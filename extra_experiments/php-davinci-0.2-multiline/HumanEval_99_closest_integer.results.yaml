language: php
name: HumanEval_99_closest_integer
results:
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  return round($value);\n}\necho closest_integer(\"\
    10\").\"\\n\";\necho closest_integer(\"15.3\").\"\\n\";\necho closest_integer(\"\
    14.5\").\"\\n\";\necho closest_integer(\"-14.5\").\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0a0csdi9.php:27\n\
    Stack trace:\n#0 /tmp/tmp0a0csdi9.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0a0csdi9.php\
    \ on line 27\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor > $ceil - $value) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\n\necho closest_integer(\"10\"\
    );\necho \"\\n\";\necho closest_integer(\"15.3\");\necho \"\\n\";\necho closest_integer(\"\
    14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.6\");\necho \"\\n\";\necho closest_integer(\"-14.4\");\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n-15\n-14\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpc110tnr8.php:43\nStack trace:\n#0 /tmp/tmpc110tnr8.php(50): test()\n\
    #1 {main}\n  thrown in /tmp/tmpc110tnr8.php on line 43\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $ceil = ceil($value);\n\
    \  $floor = floor($value);\n  if ($ceil - $value < $value - $floor) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\n\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58j0abpz.php:35\n\
    Stack trace:\n#0 /tmp/tmp58j0abpz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp58j0abpz.php\
    \ on line 35\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  return round($value);\n}\n\n/* Create a\
    \ function that takes a value (string) representing a number\nand returns the\
    \ closest integer to it. If the number is equidistant\nfrom two integers, round\
    \ it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"\
    15.3\")\n15\nNote:\nRounding away from zero means that if the given number is\
    \ equidistant\nfrom two integers, the one you should return is the one that is\
    \ the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn\
    \ 15 and closest_integer(\"-14.5\") should return -15.*/\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzwexm769.php:37\n\
    Stack trace:\n#0 /tmp/tmpzwexm769.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzwexm769.php\
    \ on line 37\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor < $ceil - $value) {\n    return\
    \ $floor;\n  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n-14\n15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_on00x1.php:34\n\
    Stack trace:\n#0 /tmp/tmp0_on00x1.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0_on00x1.php\
    \ on line 34\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_yysh52s.php:29\n\
    Stack trace:\n#0 /tmp/tmp_yysh52s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_yysh52s.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor < $ceil - $value) {\n    return\
    \ $floor;\n  } else {\n    return $ceil;\n  }\n}\n\n/* Create a function that\
    \ takes a string and returns the number of\nwords in the string.\nExamples\n>>>\
    \ count_words(\"Hello World\")\n2\n>>> count_words(\"Hello World, I am a string\"\
    )\n5\n>>> count_words(\"\")\n0\n>>> count_words(\"This is a test\")\n4\n>>> count_words(\"\
    This is a test of the function\")\n7\n>>> count_words(\"This is a test of the\
    \ function count_words\")\n10*/\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppd8sgo6m.php:46\n\
    Stack trace:\n#0 /tmp/tmppd8sgo6m.php(53): test()\n#1 {main}\n  thrown in /tmp/tmppd8sgo6m.php\
    \ on line 46\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil) {\n    return $value\
    \ < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil ? $floor : $ceil;\n\
    }\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") .\
    \ \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\n\n/* Create a function that takes a number as an argument,\
    \ increments\nthe number by +1 and returns the result.\nExamples\n>>> increment(0)\n\
    1\n>>> increment(9)\n10\n>>> increment(-3)\n-2*/\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiyk0p6js.php:46\n\
    Stack trace:\n#0 /tmp/tmpiyk0p6js.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpiyk0p6js.php\
    \ on line 46\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq1i_fiv_.php:25\n\
    Stack trace:\n#0 /tmp/tmpq1i_fiv_.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpq1i_fiv_.php\
    \ on line 25\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = $value\
    \ - (int)$value;\n  if ($value == 0) {\n    return (int)$value;\n  } elseif ($value\
    \ < 0.5) {\n    return (int)$value;\n  } else {\n    return (int)$value + 1;\n\
    \  }\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\"\
    ) . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n0\n1\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpig4e3h4n.php:35\n\
    Stack trace:\n#0 /tmp/tmpig4e3h4n.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpig4e3h4n.php\
    \ on line 35\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $floor =\
    \ floor($value);\n    $ceil = ceil($value);\n    if ($value - $floor < $ceil -\
    \ $value) {\n        return $floor;\n    } else {\n        return $ceil;\n   \
    \ }\n}\n\n/* Create a function that takes a value (string) representing a number\n\
    and returns the closest integer to it. If the number is equidistant\nfrom two\
    \ integers, round it away from zero.\nExamples\n>>> closest_integer(\"10\")\n\
    10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means that\
    \ if the given number is equidistant\nfrom two integers, the one you should return\
    \ is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\"\
    ) should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjh0ikboq.php:44\n\
    Stack trace:\n#0 /tmp/tmpjh0ikboq.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpjh0ikboq.php\
    \ on line 44\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $ceil = ceil($value);\n\
    \  $floor = floor($value);\n  if ($ceil - $value == 0.5) {\n    return $ceil;\n\
    \  } elseif ($value - $floor == 0.5) {\n    return $floor;\n  } elseif ($ceil\
    \ - $value < 0.5) {\n    return $ceil;\n  } else {\n    return $floor;\n  }\n\
    }\n\n/* Create a function that takes a string and returns a new string with\n\
    all vowels removed.\nExamples\n>>> remove_vowels(\"I have never seen a thin person\
    \ drinking Diet Coke.\")\n\" hv nvr sn  thn prsn drnkng Dt Ck.\"\n>>> remove_vowels(\"\
    We're gonna build a wall!\")\n\"W'r gnn bld  wll!\"\n>>> remove_vowels(\"Happy\
    \ Thanksgiving to all--even the haters and losers!\")\n\"Hppy Thnksgvng t ll--vn\
    \ th htrs nd lsrs!\"\n>>> remove_vowels(\"\")\n\"\"*/\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpham4xv8v.php:46\n\
    Stack trace:\n#0 /tmp/tmpham4xv8v.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpham4xv8v.php\
    \ on line 46\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $num = floatval($value);\n  $floor = floor($num);\n\
    \  $ceil = ceil($num);\n  if ($num - $floor == 0.5) {\n    return $num > 0 ? $ceil\
    \ : $floor;\n  }\n  return $num - $floor < $ceil - $num ? $floor : $ceil;\n}\n\
    \necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\
    \\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpof4rz0mo.php:34\n\
    Stack trace:\n#0 /tmp/tmpof4rz0mo.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpof4rz0mo.php\
    \ on line 34\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = floatval($value);\n    $floor\
    \ = floor($value);\n    $ceil = ceil($value);\n    if ($value - $floor < $ceil\
    \ - $value) {\n        return $floor;\n    } else {\n        return $ceil;\n \
    \   }\n}\n\necho closest_integer(\"10\");\necho \"\\n\";\necho closest_integer(\"\
    15.3\");\necho \"\\n\";\necho closest_integer(\"14.5\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"-14.6\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.4\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\necho \"\\n\";\necho closest_integer(\"-14.6\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.4\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.6\");\necho \"\\n\";\necho closest_integer(\"\
    -14.4\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.6\");\necho \"\\n\";\necho closest_integer(\"-14.4\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.6\");\necho \"\\n\";\necho closest_integer(\"-14.4\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"-14.6\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.4\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\necho \"\\n\";\necho closest_integer(\"-14.6\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.4\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.6\");\necho \"\\n\";\necho closest_integer(\"\
    -14.4\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected integer "10", expecting "," or ";" in /tmp/tmp9g_t88bs.php
    on line 87

    '
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\");\necho \"<br>\";\necho closest_integer(\"\
    15.3\");\necho \"<br>\";\necho closest_integer(\"14.5\");\necho \"<br>\";\necho\
    \ closest_integer(\"-14.5\");\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10<br>15<br>15<br>-15\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpltncfskn.php:32\nStack trace:\n#0 /tmp/tmpltncfskn.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmpltncfskn.php on line 32\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor < $ceil - $value) {\n    return\
    \ $floor;\n  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0wn_g7_.php:34\n\
    Stack trace:\n#0 /tmp/tmpz0wn_g7_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpz0wn_g7_.php\
    \ on line 34\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $value =\
    \ round($value);\n    return $value;\n}\necho closest_integer(\"10\").\"\\n\"\
    ;\necho closest_integer(\"15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\\
    n\";\necho closest_integer(\"-14.5\").\"\\n\";\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpynjzhl7f.php:29\n\
    Stack trace:\n#0 /tmp/tmpynjzhl7f.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpynjzhl7f.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor < $ceil - $value) {\n    return\
    \ $floor;\n  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6c76qzp.php:34\n\
    Stack trace:\n#0 /tmp/tmpu6c76qzp.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpu6c76qzp.php\
    \ on line 34\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\n\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp0xicrtp.php:30\n\
    Stack trace:\n#0 /tmp/tmpp0xicrtp.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpp0xicrtp.php\
    \ on line 30\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor > $ceil - $value) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\n\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl_qd56ss.php:35\n\
    Stack trace:\n#0 /tmp/tmpl_qd56ss.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpl_qd56ss.php\
    \ on line 35\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  return round($value);\n}\necho closest_integer(\"\
    10\");\necho \"<br>\";\necho closest_integer(\"15.3\");\necho \"<br>\";\necho\
    \ closest_integer(\"14.5\");\necho \"<br>\";\necho closest_integer(\"-14.5\");\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10<br>15<br>15<br>-15\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmptkji4809.php:30\nStack trace:\n#0 /tmp/tmptkji4809.php(37): test()\n\
    #1 {main}\n  thrown in /tmp/tmptkji4809.php on line 30\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  return round($value);\n}\n\n/* Create a\
    \ function that takes a value (string) representing a number\nand returns the\
    \ closest integer to it. If the number is equidistant\nfrom two integers, round\
    \ it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"\
    15.3\")\n15\nNote:\nRounding away from zero means that if the given number is\
    \ equidistant\nfrom two integers, the one you should return is the one that is\
    \ the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn\
    \ 15 and closest_integer(\"-14.5\") should return -15.*/\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzwexm769.php:37\n\
    Stack trace:\n#0 /tmp/tmpzwexm769.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzwexm769.php\
    \ on line 37\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = floatval($value);\n    $floor\
    \ = floor($value);\n    $ceil = ceil($value);\n    if ($value - $floor >= 0.5)\
    \ {\n        return $ceil;\n    } else {\n        return $floor;\n    }\n}\n\n\
    echo closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\\
    n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsw1bwz4x.php:35\n\
    Stack trace:\n#0 /tmp/tmpsw1bwz4x.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpsw1bwz4x.php\
    \ on line 35\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor < $ceil - $value) {\n    return\
    \ $floor;\n  } else {\n    return $ceil;\n  }\n}\n\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnmz4n9d.php:35\n\
    Stack trace:\n#0 /tmp/tmpjnmz4n9d.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpjnmz4n9d.php\
    \ on line 35\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = round($value);\n  return $value;\n\
    }\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\
    \\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw08s3nat.php:28\n\
    Stack trace:\n#0 /tmp/tmpw08s3nat.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpw08s3nat.php\
    \ on line 28\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value_abs =\
    \ abs($value);\n  $value_floor = floor($value_abs);\n  $value_ceil = ceil($value_abs);\n\
    \  $value_floor_diff = $value_abs - $value_floor;\n  $value_ceil_diff = $value_ceil\
    \ - $value_abs;\n  if ($value_floor_diff == $value_ceil_diff) {\n    if ($value\
    \ < 0) {\n      return -$value_ceil;\n    } else {\n      return $value_ceil;\n\
    \    }\n  } elseif ($value_floor_diff < $value_ceil_diff) {\n    return $value_floor;\n\
    \  } else {\n    return $value_ceil;\n  }\n}\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppv4_357v.php:39\n\
    Stack trace:\n#0 /tmp/tmppv4_357v.php(46): test()\n#1 {main}\n  thrown in /tmp/tmppv4_357v.php\
    \ on line 39\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil) {\n    return ($value\
    \ < 0) ? $floor : $ceil;\n  }\n  return ($diff_floor < $diff_ceil) ? $floor :\
    \ $ceil;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"15.3\"\
    ).\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"-14.5\"\
    ).\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkdyy_iib.php:35\n\
    Stack trace:\n#0 /tmp/tmpkdyy_iib.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpkdyy_iib.php\
    \ on line 35\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil) {\n    return $floor;\n\
    \  }\n  return $diff_floor < $diff_ceil ? $floor : $ceil;\n}\n\n/* Create a function\
    \ that takes a string and returns a new string\nwith all vowels removed.\nExamples\n\
    >>> remove_vowels(\"I have never seen a thin person drinking Diet Coke.\")\n\"\
    \ hv nvr sn  thn prsn drnkng Dt Ck.\"\n>>> remove_vowels(\"We're gonna build a\
    \ wall!\")\n\"W'r gnn bld  wll!\"\n>>> remove_vowels(\"Happy Thanksgiving to all--even\
    \ the haters and losers!\")\n\"Hppy Thnksgvng t ll--vn th htrs nd lsrs!\"\nNote:\n\
    \"y\" is not considered a vowel.\n*/\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsxdxyqfd.php:44\n\
    Stack trace:\n#0 /tmp/tmpsxdxyqfd.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpsxdxyqfd.php\
    \ on line 44\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = round($value);\n  return $value;\n\
    }\necho closest_integer(\"15.3\");\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpplgtok_6.php:25\n\
    Stack trace:\n#0 /tmp/tmpplgtok_6.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpplgtok_6.php\
    \ on line 25\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n\t$value = floatval($value);\n\t$floor = floor($value);\n\
    \t$ceil = ceil($value);\n\tif ($value - $floor > $ceil - $value) {\n\t\treturn\
    \ $ceil;\n\t} else {\n\t\treturn $floor;\n\t}\n}\n\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkl2m_mrt.php:35\n\
    Stack trace:\n#0 /tmp/tmpkl2m_mrt.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpkl2m_mrt.php\
    \ on line 35\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $value =\
    \ round($value);\n    return $value;\n}\n\necho closest_integer(\"10\") . \"<br>\"\
    ;\necho closest_integer(\"15.3\") . \"<br>\";\necho closest_integer(\"14.5\")\
    \ . \"<br>\";\necho closest_integer(\"-14.5\") . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10<br>15<br>15<br>-15<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp20u9k2mu.php:30\nStack trace:\n#0 /tmp/tmp20u9k2mu.php(37): test()\n\
    #1 {main}\n  thrown in /tmp/tmp20u9k2mu.php on line 30\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = floatval($value);\n    $floor\
    \ = floor($value);\n    $ceil = ceil($value);\n    if ($value - $floor > $ceil\
    \ - $value) {\n        return $ceil;\n    } else {\n        return $floor;\n \
    \   }\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\"\
    ) . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydx8plvx.php:34\n\
    Stack trace:\n#0 /tmp/tmpydx8plvx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpydx8plvx.php\
    \ on line 34\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $num = round($value);\n  if ($num < $value)\
    \ {\n    $num += 1;\n  }\n  return $num;\n}\necho closest_integer(\"10\") . \"\
    \\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\"\
    ) . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n16\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8tn65v11.php:31\n\
    Stack trace:\n#0 /tmp/tmp8tn65v11.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8tn65v11.php\
    \ on line 31\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = explode('.', $value);\n  if(count($value)\
    \ == 1) {\n    return $value[0];\n  }\n  if($value[1] >= 5) {\n    return $value[0]\
    \ + 1;\n  }\n  return $value[0];\n}\necho closest_integer(\"10\") . \"\\n\";\n\
    echo closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\
    \\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-13\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrjqyk4z.php:34\n\
    Stack trace:\n#0 /tmp/tmpjrjqyk4z.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpjrjqyk4z.php\
    \ on line 34\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsrnrtjng.php:29\n\
    Stack trace:\n#0 /tmp/tmpsrnrtjng.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpsrnrtjng.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_yysh52s.php:29\n\
    Stack trace:\n#0 /tmp/tmp_yysh52s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_yysh52s.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil) {\n    return $value\
    \ < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil ? $floor : $ceil;\n\
    }\n\n/* Create a function that takes a string and returns the number of\nwords\
    \ in it.\nExamples\n>>> count_words(\"Hello world\")\n2\n>>> count_words(\"Hello\
    \ world, I am here\")\n5\n>>> count_words(\"Hello world, I am here, I am here,\
    \ I am here\")\n5\n>>> count_words(\"Hello world, I am here, I am here, I am here,\
    \ I am here\")\n6\n>>> count_words(\"Hello world, I am here, I am here, I am here,\
    \ I am here, I am here\")\n7\n>>> count_words(\"Hello world, I am here, I am here,\
    \ I am here, I am here, I am here, I am here\")\n8\n>>> count_words(\"Hello world,\
    \ I am here, I am here, I am here, I am here, I am here, I am here, I am here\"\
    )\n9\n>>> count_words(\"Hello world, I am here, I am here, I am here, I am here,\
    \ I am here, I am here, I am here, I am here\")\n10\n>>> count_words(\"Hello world,\
    \ I am here, I am here, I am here, I am here, I am here, I am here, I am here,\
    \ I am here, I am here\")\n11\n>>> count_words(\"Hello world, I am here, I am\
    \ here, I am here, I am here, I am here, I am here, I am here, I am here, I am\
    \ here, I am here\")\n12\n>>> count_words(\"Hello world, I am here, I am here,\
    \ I am here, I am here, I am here, I am here, I am here, I am here, I am here,\
    \ I am here, I am\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 27 in /tmp/tmpqnzs1mgd.php on
    line 27

    '
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil) {\n    return $floor;\n\
    \  } else {\n    return $ceil;\n  }\n}\n\n/* Create a function that takes a string\
    \ and returns the number of\nwords in it.\nExamples\n>>> count_words(\"I am a\
    \ code warrior\")\n4\n>>> count_words(\"I would like to work for Google\")\n6\n\
    >>> count_words(\"A B C D\")\n4\n>>> count_words(\"\")\n0*/\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7vuubrzc.php:44\n\
    Stack trace:\n#0 /tmp/tmp7vuubrzc.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp7vuubrzc.php\
    \ on line 44\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = floatval($value);\n    $floor\
    \ = floor($value);\n    $ceil = ceil($value);\n    if ($value - $floor > $ceil\
    \ - $value) {\n        return $ceil;\n    } else {\n        return $floor;\n \
    \   }\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\"\
    ) . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydx8plvx.php:34\n\
    Stack trace:\n#0 /tmp/tmpydx8plvx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpydx8plvx.php\
    \ on line 34\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsrnrtjng.php:29\n\
    Stack trace:\n#0 /tmp/tmpsrnrtjng.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpsrnrtjng.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $value = round($value);\n\
    \  return $value;\n}\n\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjql4cfy.php:30\n\
    Stack trace:\n#0 /tmp/tmphjql4cfy.php(37): test()\n#1 {main}\n  thrown in /tmp/tmphjql4cfy.php\
    \ on line 30\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor < $ceil - $value) {\n    return\
    \ $floor;\n  } else {\n    return $ceil;\n  }\n}\n\n/* Create a function that\
    \ takes a string and returns a new string with\nall vowels removed.\nExamples\n\
    >>> remove_vowels(\"I have never seen a thin person drinking Diet Coke.\")\n\"\
    \ hv nvr sn  thn prsn drnkng Dt Ck.\"\n>>> remove_vowels(\"We're gonna build a\
    \ wall!\")\n\"W'r gnn bld  wll!\"\n>>> remove_vowels(\"Happy Thanksgiving to all--even\
    \ the haters and losers!\")\n\"Hppy Thnksgvng t ll--vn th htrs nd lsrs!\"\n>>>\
    \ remove_vowels(\"\")\n\"\"*/\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps55qczbc.php:42\n\
    Stack trace:\n#0 /tmp/tmps55qczbc.php(49): test()\n#1 {main}\n  thrown in /tmp/tmps55qczbc.php\
    \ on line 42\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $value =\
    \ round($value);\n    return $value;\n}\necho closest_integer(\"15.3\");\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuvhbu7tb.php:26\n\
    Stack trace:\n#0 /tmp/tmpuvhbu7tb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpuvhbu7tb.php\
    \ on line 26\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil) {\n    return $value\
    \ < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil ? $floor : $ceil;\n\
    }\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\
    \\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\"\
    ) . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\")\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpvzpn3e2r.php on line 53

    '
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = floatval($value);\n    $ceil\
    \ = ceil($value);\n    $floor = floor($value);\n    if ($value - $floor > $ceil\
    \ - $value) {\n        return $ceil;\n    } else {\n        return $floor;\n \
    \   }\n}\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\"\
    ) . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5t_l3cyv.php:35\n\
    Stack trace:\n#0 /tmp/tmp5t_l3cyv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp5t_l3cyv.php\
    \ on line 35\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\");\necho \"<br>\";\necho closest_integer(\"\
    15.3\");\necho \"<br>\";\necho closest_integer(\"14.5\");\necho \"<br>\";\necho\
    \ closest_integer(\"-14.5\");\necho \"<br>\";\necho closest_integer(\"-14.6\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.4\");\necho \"<br>\";\necho closest_integer(\"\
    -14.9\");\necho \"<br>\";\necho closest_integer(\"-14.1\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.0\");\necho \"<br>\";\necho closest_integer(\"-14.2\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.8\");\necho \"<br>\";\necho closest_integer(\"\
    -14.3\");\necho \"<br>\";\necho closest_integer(\"-14.7\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.6\");\necho \"<br>\";\necho closest_integer(\"-14.5\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.4\");\necho \"<br>\";\necho closest_integer(\"\
    -14.3\");\necho \"<br>\";\necho closest_integer(\"-14.2\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.1\");\necho \"<br>\";\necho closest_integer(\"-14.0\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.9\");\necho \"<br>\";\necho closest_integer(\"\
    -14.8\");\necho \"<br>\";\necho closest_integer(\"-14.7\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.6\");\necho \"<br>\";\necho closest_integer(\"-14.5\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.4\");\necho \"<br>\";\necho closest_integer(\"\
    -14.3\");\necho \"<br>\";\necho closest_integer(\"-14.2\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.1\");\necho\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp93pzyzfb.php on line 78

    '
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = floatval($value);\n    $floor\
    \ = floor($value);\n    $ceil = ceil($value);\n    if ($value - $floor > $ceil\
    \ - $value) {\n        return $ceil;\n    } else {\n        return $floor;\n \
    \   }\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\"\
    ) . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydx8plvx.php:34\n\
    Stack trace:\n#0 /tmp/tmpydx8plvx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpydx8plvx.php\
    \ on line 34\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor >= 0.5) {\n    return $ceil;\n\
    \  } else {\n    return $floor;\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmpfhdeds.php:30\n\
    Stack trace:\n#0 /tmp/tmpmpfhdeds.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpmpfhdeds.php\
    \ on line 30\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  if ($value >\
    \ 0) {\n    $value = ceil($value);\n  } else {\n    $value = floor($value);\n\
    \  }\n  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n16\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcwuwvphy.php:33\n\
    Stack trace:\n#0 /tmp/tmpcwuwvphy.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpcwuwvphy.php\
    \ on line 33\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = explode('.', $value);\n  if (count($value)\
    \ == 1) {\n    return $value[0];\n  } else {\n    if ($value[1] >= 5) {\n    \
    \  return $value[0] + 1;\n    } else {\n      return $value[0];\n    }\n  }\n\
    }\necho closest_integer(\"10\");\necho closest_integer(\"15.3\");\necho closest_integer(\"\
    14.5\");\necho closest_integer(\"-14.5\");\nfunction candidate(...$args) {\n \
    \   return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "101515-13\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpll53w21o.php:36\n\
    Stack trace:\n#0 /tmp/tmpll53w21o.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpll53w21o.php\
    \ on line 36\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $value =\
    \ round($value);\n    return $value;\n}\necho closest_integer(\"10\").\"\\n\"\
    ;\necho closest_integer(\"15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\\
    n\";\necho closest_integer(\"-14.5\").\"\\n\";\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpynjzhl7f.php:29\n\
    Stack trace:\n#0 /tmp/tmpynjzhl7f.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpynjzhl7f.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = round($value);\n  return $value;\n\
    }\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\
    \\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw08s3nat.php:28\n\
    Stack trace:\n#0 /tmp/tmpw08s3nat.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpw08s3nat.php\
    \ on line 28\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = round($value);\n    return $value;\n\
    }\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") .\
    \ \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr32pj8ir.php:29\n\
    Stack trace:\n#0 /tmp/tmpr32pj8ir.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpr32pj8ir.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor > $ceil - $value) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\n\n/* Create a function that\
    \ takes a string and returns the number (count)\nof vowels contained within it.\n\
    Examples\n>>> count_vowels(\"Celebration\")\n5\n>>> count_vowels(\"Palm\")\n1\n\
    >>> count_vowels(\"Prediction\")\n4\nNotes\na, e, i, o, u are considered vowels\
    \ (not y).\nAll test cases are one word and only contain letters. */\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk95cfbvd.php:43\n\
    Stack trace:\n#0 /tmp/tmpk95cfbvd.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpk95cfbvd.php\
    \ on line 43\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $value =\
    \ round($value);\n    return $value;\n}\necho closest_integer(\"10\");\necho \"\
    <br>\";\necho closest_integer(\"15.3\");\necho \"<br>\";\necho closest_integer(\"\
    14.5\");\necho \"<br>\";\necho closest_integer(\"-14.5\");\necho \"<br>\";\necho\
    \ closest_integer(\"-14.4\");\necho \"<br>\";\necho closest_integer(\"-14.6\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.7\");\necho \"<br>\";\necho closest_integer(\"\
    -14.8\");\necho \"<br>\";\necho closest_integer(\"-14.9\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.1\");\necho \"<br>\";\necho closest_integer(\"-14.2\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.3\");\necho \"<br>\";\necho closest_integer(\"\
    -14.4\");\necho \"<br>\";\necho closest_integer(\"-14.5\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.6\");\necho \"<br>\";\necho closest_integer(\"-14.7\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.8\");\necho \"<br>\";\necho closest_integer(\"\
    -14.9\");\necho \"<br>\";\necho closest_integer(\"-14.1\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.2\");\necho \"<br>\";\necho closest_integer(\"-14.3\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.4\");\necho \"<br>\";\necho closest_integer(\"\
    -14.5\");\necho \"<br>\";\necho closest_integer(\"-14.6\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.7\");\necho \"<br>\";\necho closest_integer(\"-14.8\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.9\");\necho \"<br>\";\necho closest_integer(\"\
    -14.1\");\necho \"<br>\";\necho closest_integer(\"-14.2\");\necho\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpumex3crm.php on line 78

    '
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil) {\n    return ($value\
    \ < 0) ? $floor : $ceil;\n  }\n  return ($diff_floor < $diff_ceil) ? $floor :\
    \ $ceil;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplrk061tu.php:35\n\
    Stack trace:\n#0 /tmp/tmplrk061tu.php(42): test()\n#1 {main}\n  thrown in /tmp/tmplrk061tu.php\
    \ on line 35\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  if (is_int($value))\
    \ {\n    return $value;\n  }\n  $floor = floor($value);\n  $ceil = ceil($value);\n\
    \  if ($value - $floor > $ceil - $value) {\n    return $ceil;\n  }\n  return $floor;\n\
    }\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2hr5mkat.php:33\n\
    Stack trace:\n#0 /tmp/tmp2hr5mkat.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp2hr5mkat.php\
    \ on line 33\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptub9x7fz.php:29\n\
    Stack trace:\n#0 /tmp/tmptub9x7fz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptub9x7fz.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpixgsl7lf.php:30\n\
    Stack trace:\n#0 /tmp/tmpixgsl7lf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpixgsl7lf.php\
    \ on line 30\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_yysh52s.php:29\n\
    Stack trace:\n#0 /tmp/tmp_yysh52s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_yysh52s.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $value =\
    \ round($value);\n    return $value;\n}\necho closest_integer(\"10\").\"\\n\"\
    ;\necho closest_integer(\"15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\\
    n\";\necho closest_integer(\"-14.5\").\"\\n\";\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpynjzhl7f.php:29\n\
    Stack trace:\n#0 /tmp/tmpynjzhl7f.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpynjzhl7f.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = floatval($value);\n    $floor\
    \ = floor($value);\n    $ceil = ceil($value);\n    if ($value - $floor < $ceil\
    \ - $value) {\n        return $floor;\n    } else {\n        return $ceil;\n \
    \   }\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp07wy36dg.php:31\n\
    Stack trace:\n#0 /tmp/tmp07wy36dg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp07wy36dg.php\
    \ on line 31\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\");\necho \"<br>\";\necho closest_integer(\"\
    15.3\");\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10<br>15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm93ouuks.php:28\n\
    Stack trace:\n#0 /tmp/tmpm93ouuks.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpm93ouuks.php\
    \ on line 28\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $value =\
    \ round($value);\n    return $value;\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9vwhp_66.php:25\n\
    Stack trace:\n#0 /tmp/tmp9vwhp_66.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp9vwhp_66.php\
    \ on line 25\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $int = (int)$value;\n  $dec = $value - $int;\n\
    \  if ($dec >= 0.5) {\n    return $int + 1;\n  } else {\n    return $int;\n  }\n\
    }\necho closest_integer(\"10\") . \"<br>\";\necho closest_integer(\"15.3\") .\
    \ \"<br>\";\necho closest_integer(\"14.5\") . \"<br>\";\necho closest_integer(\"\
    -14.5\") . \"<br>\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10<br>15<br>15<br>-14<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmprir184_m.php:35\nStack trace:\n#0 /tmp/tmprir184_m.php(40): test()\n\
    #1 {main}\n  thrown in /tmp/tmprir184_m.php on line 35\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptub9x7fz.php:29\n\
    Stack trace:\n#0 /tmp/tmptub9x7fz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptub9x7fz.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor >= 0.5) {\n    return $ceil;\n\
    \  } else {\n    return $floor;\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkzwlqec6.php:30\n\
    Stack trace:\n#0 /tmp/tmpkzwlqec6.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpkzwlqec6.php\
    \ on line 30\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $num = (int)$value;\n  $dec = $value - $num;\n\
    \  if ($dec > 0.5) {\n    return $num + 1;\n  } elseif ($dec < -0.5) {\n    return\
    \ $num - 1;\n  } else {\n    return $num;\n  }\n}\n\n/* Create a function that\
    \ takes a number as an argument and returns\ntrue or false depending on whether\
    \ the number is symmetrical or not.\nA number is symmetrical when it is the same\
    \ as its reverse.\nExamples\n>>> is_symmetrical(7227)\ntrue\n>>> is_symmetrical(12567)\n\
    false\n>>> is_symmetrical(44444444)\ntrue\n>>> is_symmetrical(9939)\nfalse\n>>>\
    \ is_symmetrical(1112111)\ntrue*/\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqnpepzlc.php:47\n\
    Stack trace:\n#0 /tmp/tmpqnpepzlc.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpqnpepzlc.php\
    \ on line 47\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = floatval($value);\n    $value\
    \ = round($value);\n    return $value;\n}\necho closest_integer(\"10\").\"\\n\"\
    ;\necho closest_integer(\"15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\\
    n\";\necho closest_integer(\"-14.5\").\"\\n\";\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzedorswt.php:29\n\
    Stack trace:\n#0 /tmp/tmpzedorswt.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpzedorswt.php\
    \ on line 29\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $value =\
    \ round($value);\n    return $value;\n}\necho closest_integer(\"10\");\necho \"\
    <br>\";\necho closest_integer(\"15.3\");\necho \"<br>\";\necho closest_integer(\"\
    14.5\");\necho \"<br>\";\necho closest_integer(\"-14.5\");\necho \"<br>\";\necho\
    \ closest_integer(\"-14.6\");\necho \"<br>\";\necho closest_integer(\"-14.4\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.9\");\necho \"<br>\";\necho closest_integer(\"\
    -14.1\");\necho \"<br>\";\necho closest_integer(\"-14.0\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.7\");\necho \"<br>\";\necho closest_integer(\"-14.8\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.2\");\necho \"<br>\";\necho closest_integer(\"\
    -14.3\");\necho \"<br>\";\necho closest_integer(\"-14.6\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.4\");\necho \"<br>\";\necho closest_integer(\"-14.9\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.1\");\necho \"<br>\";\necho closest_integer(\"\
    -14.0\");\necho \"<br>\";\necho closest_integer(\"-14.7\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.8\");\necho \"<br>\";\necho closest_integer(\"-14.2\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.3\");\necho \"<br>\";\necho closest_integer(\"\
    -14.6\");\necho \"<br>\";\necho closest_integer(\"-14.4\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.9\");\necho \"<br>\";\necho closest_integer(\"-14.1\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.0\");\necho \"<br>\";\necho closest_integer(\"\
    -14.7\");\necho \"<br>\";\necho closest_integer(\"-14.8\");\necho\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp66ytyh8z.php on line 78

    '
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\n\n$value = \"15.3\";\necho closest_integer($value);\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzucgv3io.php:28\n\
    Stack trace:\n#0 /tmp/tmpzucgv3io.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpzucgv3io.php\
    \ on line 28\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  return $diff_floor < $diff_ceil ? $floor : $ceil;\n\
    }\n\n/* Create a function that takes a value (string) representing a number\n\
    and returns the closest integer to it. If the number is equidistant\nfrom two\
    \ integers, round it away from zero.\nExamples\n>>> closest_integer(\"10\")\n\
    10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means that\
    \ if the given number is equidistant\nfrom two integers, the one you should return\
    \ is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\"\
    ) should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp71y1c_ui.php:42\n\
    Stack trace:\n#0 /tmp/tmp71y1c_ui.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp71y1c_ui.php\
    \ on line 42\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = floatval($value);\n    $floor\
    \ = floor($value);\n    $ceil = ceil($value);\n    $diff_floor = abs($value -\
    \ $floor);\n    $diff_ceil = abs($value - $ceil);\n    if ($diff_floor == $diff_ceil)\
    \ {\n        return $value >= 0 ? $ceil : $floor;\n    }\n    return $diff_floor\
    \ < $diff_ceil ? $floor : $ceil;\n}\n\n/* Create a function that takes a value\
    \ (string) representing a number\nand returns the closest integer to it. If the\
    \ number is equidistant\nfrom two integers, round it away from zero.\nExamples\n\
    >>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding\
    \ away from zero means that if the given number is equidistant\nfrom two integers,\
    \ the one you should return is the one that is the\nfarthest from zero. For example\
    \ closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should\
    \ return -15.*/\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpca8qit9r.php:45\n\
    Stack trace:\n#0 /tmp/tmpca8qit9r.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpca8qit9r.php\
    \ on line 45\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $value =\
    \ round($value);\n    return $value;\n}\necho closest_integer(\"10\") . \"<br>\"\
    ;\necho closest_integer(\"15.3\") . \"<br>\";\necho closest_integer(\"14.5\")\
    \ . \"<br>\";\necho closest_integer(\"-14.5\") . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10<br>15<br>15<br>-15<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpf1uxnj5d.php:29\nStack trace:\n#0 /tmp/tmpf1uxnj5d.php(36): test()\n\
    #1 {main}\n  thrown in /tmp/tmpf1uxnj5d.php on line 29\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = round($value);\n  return $value;\n\
    }\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\
    \\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw08s3nat.php:28\n\
    Stack trace:\n#0 /tmp/tmpw08s3nat.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpw08s3nat.php\
    \ on line 28\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpixgsl7lf.php:30\n\
    Stack trace:\n#0 /tmp/tmpixgsl7lf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpixgsl7lf.php\
    \ on line 30\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\n\n/* Create a function that takes a value (string) representing\
    \ a number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp125h94d1.php:39\n\
    Stack trace:\n#0 /tmp/tmp125h94d1.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp125h94d1.php\
    \ on line 39\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\");\necho \"<br>\";\necho closest_integer(\"\
    15.3\");\necho \"<br>\";\necho closest_integer(\"14.5\");\necho \"<br>\";\necho\
    \ closest_integer(\"-14.5\");\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10<br>15<br>15<br>-15\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpltncfskn.php:32\nStack trace:\n#0 /tmp/tmpltncfskn.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmpltncfskn.php on line 32\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $int = (int)$value;\n\
    \    $diff = $value - $int;\n    if ($diff > 0.5) {\n        return $int + 1;\n\
    \    } elseif ($diff < -0.5) {\n        return $int - 1;\n    } else {\n     \
    \   return $int;\n    }\n}\n\n/* Create a function that takes a string and returns\
    \ a new string with\nall vowels removed.\nExamples\n>>> remove_vowels(\"I have\
    \ never seen a thin person drinking Diet Coke.\")\n\" hv nvr sn  thn prsn drnkng\
    \ Dt Ck.\"\n>>> remove_vowels(\"We're gonna build a wall!\")\n\"W'r gnn bld  wll!\"\
    \n>>> remove_vowels(\"Happy Thanksgiving to all--even the haters and losers!\"\
    )\n\"Hppy Thnksgvng t ll--vn th htrs nd lsrs!\"\n>>> remove_vowels(\"Vowels are\
    \ very important in English.\")\n\"Vwls r vry mprtnt n nglsh.\"*/\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnclvnv0c.php:45\n\
    Stack trace:\n#0 /tmp/tmpnclvnv0c.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpnclvnv0c.php\
    \ on line 45\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  if ($value <\
    \ 0) {\n    $value = ceil($value);\n  } else {\n    $value = floor($value);\n\
    \  }\n  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdcjn_yax.php:33\n\
    Stack trace:\n#0 /tmp/tmpdcjn_yax.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpdcjn_yax.php\
    \ on line 33\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor > $ceil - $value) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpebqdxckw.php:30\n\
    Stack trace:\n#0 /tmp/tmpebqdxckw.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpebqdxckw.php\
    \ on line 30\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  return round($value);\n}\n\n/* Create a\
    \ function that takes a value (string) representing a number\nand returns the\
    \ closest integer to it. If the number is equidistant\nfrom two integers, round\
    \ it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"\
    15.3\")\n15\nNote:\nRounding away from zero means that if the given number is\
    \ equidistant\nfrom two integers, the one you should return is the one that is\
    \ the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn\
    \ 15 and closest_integer(\"-14.5\") should return -15.*/\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzwexm769.php:37\n\
    Stack trace:\n#0 /tmp/tmpzwexm769.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzwexm769.php\
    \ on line 37\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor > $ceil - $value) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\n\n/* Create a function that\
    \ takes a string and returns a string in which\neach character is repeated once.\n\
    Examples\n>>> double_char(\"String\")\n\"SSttrriinngg\"\n>>> double_char(\"Hello\
    \ World!\")\n\"HHeelllloo  WWoorrlldd!!\"\n>>> double_char(\"1234!_ \")\n\"11223344!!__\
    \  \"*/\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2bi7ghfs.php:40\n\
    Stack trace:\n#0 /tmp/tmp2bi7ghfs.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2bi7ghfs.php\
    \ on line 40\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpixgsl7lf.php:30\n\
    Stack trace:\n#0 /tmp/tmpixgsl7lf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpixgsl7lf.php\
    \ on line 30\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil) {\n    return $value\
    \ < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil ? $floor : $ceil;\n\
    }\n\n/* Create a function that takes a value (string) representing a number\n\
    and returns the closest integer to it. If the number is equidistant\nfrom two\
    \ integers, round it away from zero.\nExamples\n>>> closest_integer(\"10\")\n\
    10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means that\
    \ if the given number is equidistant\nfrom two integers, the one you should return\
    \ is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\"\
    ) should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2e7ggqqj.php:45\n\
    Stack trace:\n#0 /tmp/tmp2e7ggqqj.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp2e7ggqqj.php\
    \ on line 45\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = floatval($value);\n    $floor\
    \ = floor($value);\n    $ceil = ceil($value);\n    $diffFloor = abs($value - $floor);\n\
    \    $diffCeil = abs($ceil - $value);\n    if ($diffFloor == $diffCeil) {\n  \
    \      return $value < 0 ? $floor : $ceil;\n    }\n    return $diffFloor < $diffCeil\
    \ ? $floor : $ceil;\n}\n\necho closest_integer(\"10\") . PHP_EOL;\necho closest_integer(\"\
    15.3\") . PHP_EOL;\necho closest_integer(\"14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_57bvu7.php:36\n\
    Stack trace:\n#0 /tmp/tmpy_57bvu7.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpy_57bvu7.php\
    \ on line 36\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $ceil = ceil($value);\n\
    \  $floor = floor($value);\n  if ($value - $floor == 0.5) {\n    if ($value >\
    \ 0) {\n      return $ceil;\n    } else {\n      return $floor;\n    }\n  } else\
    \ {\n    return round($value);\n  }\n}\n\necho closest_integer(\"10\") . \"\\\
    n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\"\
    ) . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu_3ggdav.php:39\n\
    Stack trace:\n#0 /tmp/tmpu_3ggdav.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpu_3ggdav.php\
    \ on line 39\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $ceil = ceil($value);\n\
    \  $floor = floor($value);\n  if ($value - $floor < $ceil - $value) {\n    return\
    \ $floor;\n  } else {\n    return $ceil;\n  }\n}\n\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq5s_6ho3.php:35\n\
    Stack trace:\n#0 /tmp/tmpq5s_6ho3.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpq5s_6ho3.php\
    \ on line 35\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsrnrtjng.php:29\n\
    Stack trace:\n#0 /tmp/tmpsrnrtjng.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpsrnrtjng.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\");\necho \"<br>\";\necho closest_integer(\"\
    15.3\");\necho \"<br>\";\necho closest_integer(\"14.5\");\necho \"<br>\";\necho\
    \ closest_integer(\"-14.5\");\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10<br>15<br>15<br>-15\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpltncfskn.php:32\nStack trace:\n#0 /tmp/tmpltncfskn.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmpltncfskn.php on line 32\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil) {\n    return $floor;\n\
    \  } else {\n    return $ceil;\n  }\n}\n\necho closest_integer(\"10\") . \"\\\
    n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\"\
    ) . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp46hi1d3t.php:37\n\
    Stack trace:\n#0 /tmp/tmp46hi1d3t.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp46hi1d3t.php\
    \ on line 37\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  return $value\
    \ >= 0 ? ceil($value) : floor($value);\n}\n\necho closest_integer(\"10\") . PHP_EOL;\n\
    echo closest_integer(\"15.3\") . PHP_EOL;\necho closest_integer(\"14.5\") . PHP_EOL;\n\
    echo closest_integer(\"-14.5\") . PHP_EOL;\nfunction candidate(...$args) {\n \
    \   return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n16\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl_mnvcrl.php:29\n\
    Stack trace:\n#0 /tmp/tmpl_mnvcrl.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpl_mnvcrl.php\
    \ on line 29\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = floatval($value);\n    $floor\
    \ = floor($value);\n    $ceil = ceil($value);\n    if ($value - $floor > $ceil\
    \ - $value) {\n        return $ceil;\n    } else {\n        return $floor;\n \
    \   }\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"15.3\"\
    ).\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"-14.5\"\
    ).\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz1mqkev9.php:34\n\
    Stack trace:\n#0 /tmp/tmpz1mqkev9.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpz1mqkev9.php\
    \ on line 34\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $value = round($value);\n\
    \  return $value;\n}\n\n/* Create a function that takes a string and returns a\
    \ string with\nits letters in alphabetical order.\nExamples\n>>> alphabet_soup(\"\
    hello\")\n\"ehllo\"\n>>> alphabet_soup(\"edabit\")\n\"abdeit\"\n>>> alphabet_soup(\"\
    hacker\")\n\"acehkr\"\n>>> alphabet_soup(\"geek\")\n\"eegk\"\n>>> alphabet_soup(\"\
    javascript\")\n\"aacijprstv\"*/\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa_o5ifi8.php:39\n\
    Stack trace:\n#0 /tmp/tmpa_o5ifi8.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpa_o5ifi8.php\
    \ on line 39\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_yysh52s.php:29\n\
    Stack trace:\n#0 /tmp/tmp_yysh52s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_yysh52s.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = round($value);\n    return $value;\n\
    }\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"15.3\").\"\\\
    n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"-14.5\"\
    ).\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpahtxhab4.php:28\n\
    Stack trace:\n#0 /tmp/tmpahtxhab4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpahtxhab4.php\
    \ on line 28\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    return round($value);\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgu1dy_ww.php:23\n\
    Stack trace:\n#0 /tmp/tmpgu1dy_ww.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpgu1dy_ww.php\
    \ on line 23\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n\t$value = floatval($value);\n\t$floor = floor($value);\n\
    \t$ceil = ceil($value);\n\tif ($value - $floor < $ceil - $value) {\n\t\treturn\
    \ $floor;\n\t} else {\n\t\treturn $ceil;\n\t}\n}\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9dhhmmb4.php:34\n\
    Stack trace:\n#0 /tmp/tmp9dhhmmb4.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp9dhhmmb4.php\
    \ on line 34\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  return round($value);\n}\n\necho closest_integer(\"\
    10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn2sq0zt2.php:28\n\
    Stack trace:\n#0 /tmp/tmpn2sq0zt2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpn2sq0zt2.php\
    \ on line 28\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil) {\n    return $value\
    \ > 0 ? $ceil : $floor;\n  }\n  return $diff_floor < $diff_ceil ? $floor : $ceil;\n\
    }\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") .\
    \ \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n-15\n-14\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmploij6nmr.php:38\nStack trace:\n#0 /tmp/tmploij6nmr.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmploij6nmr.php on line 38\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil) {\n    return $value\
    \ > 0 ? $ceil : $floor;\n  }\n  return $diff_floor < $diff_ceil ? $floor : $ceil;\n\
    }\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") .\
    \ \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"14.6\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    14.6\") . \"\\n\";\necho closest_integer(\"14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"14.6\") . \"\\n\";\necho closest_integer(\"\
    14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    14.6\") . \"\\n\";\necho closest_integer(\"14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"14.6\") . \"\\n\";\necho closest_\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpaa2_s7lo.php on line 55

    '
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    return round($value);\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgu1dy_ww.php:23\n\
    Stack trace:\n#0 /tmp/tmpgu1dy_ww.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpgu1dy_ww.php\
    \ on line 23\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $int = (int)$value;\n\
    \    $decimal = $value - $int;\n    if ($decimal >= 0.5) {\n        return $int\
    \ + 1;\n    } else {\n        return $int;\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfy7tboeh.php:32\n\
    Stack trace:\n#0 /tmp/tmpfy7tboeh.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfy7tboeh.php\
    \ on line 32\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq1i_fiv_.php:25\n\
    Stack trace:\n#0 /tmp/tmpq1i_fiv_.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpq1i_fiv_.php\
    \ on line 25\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = round($value);\n  return $value;\n\
    }\necho closest_integer(\"10\");\necho \"<br>\";\necho closest_integer(\"15.3\"\
    );\necho \"<br>\";\necho closest_integer(\"14.5\");\necho \"<br>\";\necho closest_integer(\"\
    -14.5\");\necho \"<br>\";\necho closest_integer(\"-14.6\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.4\");\necho \"<br>\";\necho closest_integer(\"-14.5\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.6\");\necho \"<br>\";\necho closest_integer(\"\
    -14.4\");\necho \"<br>\";\necho closest_integer(\"-14.5\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.6\");\necho \"<br>\";\necho closest_integer(\"-14.4\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.5\");\necho \"<br>\";\necho closest_integer(\"\
    -14.6\");\necho \"<br>\";\necho closest_integer(\"-14.4\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.5\");\necho \"<br>\";\necho closest_integer(\"-14.6\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.4\");\necho \"<br>\";\necho closest_integer(\"\
    -14.5\");\necho \"<br>\";\necho closest_integer(\"-14.6\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.4\");\necho \"<br>\";\necho closest_integer(\"-14.5\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.6\");\necho \"<br>\";\necho closest_integer(\"\
    -14.4\");\necho \"<br>\";\necho closest_integer(\"-14.5\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.6\");\necho \"<br>\";\necho closest_integer(\"-14.4\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.5\");\necho \"<br>\";\necho closest_integer(\"\
    -14.6\");\necho \"<br>\";\necho closest_integer(\"-\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected integer "10", expecting ")" in /tmp/tmp3384wcrv.php
    on line 83

    '
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    return round($value);\n}\n\n/* Create\
    \ a function that takes a value (string) representing a number\nand returns the\
    \ closest integer to it. If the number is equidistant\nfrom two integers, round\
    \ it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"\
    15.3\")\n15\nNote:\nRounding away from zero means that if the given number is\
    \ equidistant\nfrom two integers, the one you should return is the one that is\
    \ the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn\
    \ 15 and closest_integer(\"-14.5\") should return -15.*/\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5_w82phk.php:37\n\
    Stack trace:\n#0 /tmp/tmp5_w82phk.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp5_w82phk.php\
    \ on line 37\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsrnrtjng.php:29\n\
    Stack trace:\n#0 /tmp/tmpsrnrtjng.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpsrnrtjng.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = round($value);\n  return $value;\n\
    }\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\
    \\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw08s3nat.php:28\n\
    Stack trace:\n#0 /tmp/tmpw08s3nat.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpw08s3nat.php\
    \ on line 28\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = floatval($value);\n    $floor\
    \ = floor($value);\n    $ceil = ceil($value);\n    if ($value - $floor < $ceil\
    \ - $value) {\n        return $floor;\n    } else {\n        return $ceil;\n \
    \   }\n}\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\"\
    ) . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpywixk8df.php:35\n\
    Stack trace:\n#0 /tmp/tmpywixk8df.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpywixk8df.php\
    \ on line 35\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor < $ceil - $value) {\n    return\
    \ $floor;\n  } else {\n    return $ceil;\n  }\n}\n\necho closest_integer(\"10\"\
    );\necho \"\\n\";\necho closest_integer(\"15.3\");\necho \"\\n\";\necho closest_integer(\"\
    14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphkix0c9y.php:39\n\
    Stack trace:\n#0 /tmp/tmphkix0c9y.php(46): test()\n#1 {main}\n  thrown in /tmp/tmphkix0c9y.php\
    \ on line 39\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n\t$value = floatval($value);\n\t$value = round($value);\n\
    \treturn $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpes85oine.php:29\n\
    Stack trace:\n#0 /tmp/tmpes85oine.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpes85oine.php\
    \ on line 29\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor < $ceil - $value) {\n    return\
    \ $floor;\n  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0wn_g7_.php:34\n\
    Stack trace:\n#0 /tmp/tmpz0wn_g7_.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpz0wn_g7_.php\
    \ on line 34\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_yysh52s.php:29\n\
    Stack trace:\n#0 /tmp/tmp_yysh52s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_yysh52s.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil) {\n    return $value\
    \ > 0 ? $ceil : $floor;\n  }\n  return $diff_floor < $diff_ceil ? $floor : $ceil;\n\
    }\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") .\
    \ \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected integer "10", expecting ")" in /tmp/tmpp37rs3jb.php
    on line 59

    '
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  return round($value);\n\
    }\n\n/* Create a function that takes a string and returns the word count.\nThe\
    \ string will be a sentence.\nExamples\n>>> count_words(\"Just an example here\
    \ move along\")\n6\nNote:\nIf you need to, use the PHP str_word_count() function.*/\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvn6djxwa.php:32\n\
    Stack trace:\n#0 /tmp/tmpvn6djxwa.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpvn6djxwa.php\
    \ on line 32\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor > $ceil - $value) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdys86dkg.php:34\n\
    Stack trace:\n#0 /tmp/tmpdys86dkg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdys86dkg.php\
    \ on line 34\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_yysh52s.php:29\n\
    Stack trace:\n#0 /tmp/tmp_yysh52s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_yysh52s.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $num = floatval($value);\n    $floor =\
    \ floor($num);\n    $ceil = ceil($num);\n    $diff_floor = abs($num - $floor);\n\
    \    $diff_ceil = abs($num - $ceil);\n    if ($diff_floor < $diff_ceil) {\n  \
    \      return $floor;\n    } else {\n        return $ceil;\n    }\n}\necho closest_integer(\"\
    10\") . PHP_EOL;\necho closest_integer(\"15.3\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj38def1u.php:36\n\
    Stack trace:\n#0 /tmp/tmpj38def1u.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpj38def1u.php\
    \ on line 36\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  return round($value);\n}\n\n/* Create a\
    \ function that takes a value (string) representing a number\nand returns the\
    \ closest integer to it. If the number is equidistant\nfrom two integers, round\
    \ it away from zero.\nExamples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"\
    15.3\")\n15\nNote:\nRounding away from zero means that if the given number is\
    \ equidistant\nfrom two integers, the one you should return is the one that is\
    \ the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn\
    \ 15 and closest_integer(\"-14.5\") should return -15.*/\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzwexm769.php:37\n\
    Stack trace:\n#0 /tmp/tmpzwexm769.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpzwexm769.php\
    \ on line 37\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil) {\n    return $value\
    \ < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil ? $floor : $ceil;\n\
    }\n\n/* Create a function that takes a string and returns a string with\nits letters\
    \ in alphabetical order.\nExamples\n>>> alphabet_soup(\"hello\")\n\"ehllo\"\n\
    >>> alphabet_soup(\"edabit\")\n\"abdeit\"\n>>> alphabet_soup(\"hacker\")\n\"acehkr\"\
    \n>>> alphabet_soup(\"geek\")\n\"eegk\"\n>>> alphabet_soup(\"javascript\")\n\"\
    aacijprstv\"*/\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpprrf02uv.php:45\n\
    Stack trace:\n#0 /tmp/tmpprrf02uv.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpprrf02uv.php\
    \ on line 45\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $ceil = ceil($value);\n\
    \    $floor = floor($value);\n    if ($ceil - $value < $value - $floor) {\n  \
    \      return $ceil;\n    } else {\n        return $floor;\n    }\n}\necho closest_integer(\"\
    10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo2q8r982.php:34\n\
    Stack trace:\n#0 /tmp/tmpo2q8r982.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpo2q8r982.php\
    \ on line 34\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = round($value);\n  return $value;\n\
    }\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\
    \\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw08s3nat.php:28\n\
    Stack trace:\n#0 /tmp/tmpw08s3nat.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpw08s3nat.php\
    \ on line 28\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil) {\n    return $floor;\n\
    \  } else {\n    return $ceil;\n  }\n}\n\n/* Create a function that takes a value\
    \ (string) representing a number\nand returns the closest integer to it. If the\
    \ number is equidistant\nfrom two integers, round it away from zero.\nExamples\n\
    >>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding\
    \ away from zero means that if the given number is equidistant\nfrom two integers,\
    \ the one you should return is the one that is the\nfarthest from zero. For example\
    \ closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should\
    \ return -15.*/\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75e7m7hn.php:46\n\
    Stack trace:\n#0 /tmp/tmp75e7m7hn.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp75e7m7hn.php\
    \ on line 46\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $num = (int)$value;\n  $dec = $value - $num;\n\
    \  if ($dec >= 0.5) {\n    return $num + 1;\n  } else {\n    return $num;\n  }\n\
    }\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") . \"\
    \\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"-14.5\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgc794l91.php:35\n\
    Stack trace:\n#0 /tmp/tmpgc794l91.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpgc794l91.php\
    \ on line 35\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor > $ceil - $value) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2il78irh.php:34\n\
    Stack trace:\n#0 /tmp/tmp2il78irh.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp2il78irh.php\
    \ on line 34\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n\t$value = (float)$value;\n\t$floor = floor($value);\n\
    \t$ceil = ceil($value);\n\t$diff_floor = abs($value - $floor);\n\t$diff_ceil =\
    \ abs($value - $ceil);\n\tif ($diff_floor == $diff_ceil) {\n\t\treturn $value\
    \ < 0 ? $floor : $ceil;\n\t}\n\treturn $diff_floor < $diff_ceil ? $floor : $ceil;\n\
    }\n\n/* Create a function that takes a value (string) representing a number\n\
    and returns the closest integer to it. If the number is equidistant\nfrom two\
    \ integers, round it away from zero.\nExamples\n>>> closest_integer(\"10\")\n\
    10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means that\
    \ if the given number is equidistant\nfrom two integers, the one you should return\
    \ is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\"\
    ) should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplielco9g.php:45\n\
    Stack trace:\n#0 /tmp/tmplielco9g.php(52): test()\n#1 {main}\n  thrown in /tmp/tmplielco9g.php\
    \ on line 45\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $value =\
    \ round($value);\n    return $value;\n}\n\necho closest_integer(\"10\").\"\\n\"\
    ;\necho closest_integer(\"15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\\
    n\";\necho closest_integer(\"-14.5\").\"\\n\";\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzeoj8spk.php:30\n\
    Stack trace:\n#0 /tmp/tmpzeoj8spk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzeoj8spk.php\
    \ on line 30\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = floatval($value);\n    $floor\
    \ = floor($value);\n    $ceil = ceil($value);\n    if ($value - $floor < $ceil\
    \ - $value) {\n        return $floor;\n    } else {\n        return $ceil;\n \
    \   }\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\"\
    ) . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6qsnt75q.php:34\n\
    Stack trace:\n#0 /tmp/tmp6qsnt75q.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp6qsnt75q.php\
    \ on line 34\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $value =\
    \ round($value);\n    return $value;\n}\n\necho closest_integer(\"10\") . \"\\\
    n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\"\
    ) . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjrq4euqd.php:30\n\
    Stack trace:\n#0 /tmp/tmpjrq4euqd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpjrq4euqd.php\
    \ on line 30\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil) {\n    return $value\
    \ < 0 ? $floor : $ceil;\n  }\n  return $diff_floor < $diff_ceil ? $floor : $ceil;\n\
    }\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") .\
    \ \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfpn1ioec.php:36\n\
    Stack trace:\n#0 /tmp/tmpfpn1ioec.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpfpn1ioec.php\
    \ on line 36\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $value =\
    \ round($value);\n    return $value;\n}\necho closest_integer(\"10\");\necho \"\
    <br>\";\necho closest_integer(\"15.3\");\necho \"<br>\";\necho closest_integer(\"\
    14.5\");\necho \"<br>\";\necho closest_integer(\"-14.5\");\necho \"<br>\";\necho\
    \ closest_integer(\"-14.4\");\necho \"<br>\";\necho closest_integer(\"-14.6\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.7\");\necho \"<br>\";\necho closest_integer(\"\
    -14.8\");\necho \"<br>\";\necho closest_integer(\"-14.9\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.1\");\necho \"<br>\";\necho closest_integer(\"-14.2\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.3\");\necho \"<br>\";\necho closest_integer(\"\
    -14.4\");\necho \"<br>\";\necho closest_integer(\"-14.5\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.6\");\necho \"<br>\";\necho closest_integer(\"-14.7\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.8\");\necho \"<br>\";\necho closest_integer(\"\
    -14.9\");\necho \"<br>\";\necho closest_integer(\"-14.0\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.0\");\necho \"<br>\";\necho closest_integer(\"-14.0\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.0\");\necho \"<br>\";\necho closest_integer(\"\
    -14.0\");\necho \"<br>\";\necho closest_integer(\"-14.0\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.0\");\necho \"<br>\";\necho closest_integer(\"-14.0\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.0\");\necho \"<br>\";\necho closest_integer(\"\
    -14.0\");\necho \"<br>\";\necho closest_integer(\"-14.0\");\necho\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpm5v85_xq.php on line 78

    '
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil) {\n    return $floor;\n\
    \  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"10\") . \"\\n\"\
    ;\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\") .\
    \ \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl4qtffqh.php:36\n\
    Stack trace:\n#0 /tmp/tmpl4qtffqh.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpl4qtffqh.php\
    \ on line 36\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $num = floatval($value);\n  $floor = floor($num);\n\
    \  $ceil = ceil($num);\n  $diff_floor = abs($num - $floor);\n  $diff_ceil = abs($num\
    \ - $ceil);\n  if ($diff_floor == $diff_ceil) {\n    return $num < 0 ? $floor\
    \ : $ceil;\n  }\n  return $diff_floor < $diff_ceil ? $floor : $ceil;\n}\n\n/*\
    \ Create a function that takes a string and returns the number (count)\nof vowels\
    \ contained within it.\nExamples\n>>> count_vowels(\"Celebration\")\n5\n>>> count_vowels(\"\
    Palm\")\n1\n>>> count_vowels(\"Prediction\")\n4\nNote: Vowels are the letters,\
    \ A, E, I, O, and U. */\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpezi0eoqn.php:42\n\
    Stack trace:\n#0 /tmp/tmpezi0eoqn.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpezi0eoqn.php\
    \ on line 42\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $int = (int)$value;\n\
    \  $decimal = $value - $int;\n  if ($decimal >= 0.5) {\n    return $int + 1;\n\
    \  } else {\n    return $int;\n  }\n}\necho closest_integer(\"10\") . \"\\n\"\
    ;\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\") .\
    \ \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe0o0guhu.php:36\n\
    Stack trace:\n#0 /tmp/tmpe0o0guhu.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpe0o0guhu.php\
    \ on line 36\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor > $ceil - $value) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\n\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0kaxj_mv.php:35\n\
    Stack trace:\n#0 /tmp/tmp0kaxj_mv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0kaxj_mv.php\
    \ on line 35\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  if ($diff_floor == $diff_ceil) {\n    return $value\
    \ > 0 ? $ceil : $floor;\n  }\n  return $diff_floor < $diff_ceil ? $floor : $ceil;\n\
    }\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") .\
    \ \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\necho closest_integer(\"-14.6\") . \"\\n\";\necho closest_integer(\"\
    -14.4\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.6\") . \"\\n\";\necho closest_integer(\"-14.4\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected integer "10", expecting ")" in /tmp/tmp5h94z9mx.php
    on line 59

    '
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = $value\
    \ - floor($value);\n  if ($value < 0.5) {\n    return floor($value);\n  } else\
    \ {\n    return ceil($value);\n  }\n}\necho closest_integer(\"10\") . \"\\n\"\
    ;\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"14.5\") .\
    \ \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n0\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjff8zbh9.php:33\n\
    Stack trace:\n#0 /tmp/tmpjff8zbh9.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpjff8zbh9.php\
    \ on line 33\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\n/* Create a function that takes a value (string) representing\
    \ a number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppv1flqkp.php:42\n\
    Stack trace:\n#0 /tmp/tmppv1flqkp.php(49): test()\n#1 {main}\n  thrown in /tmp/tmppv1flqkp.php\
    \ on line 42\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor > $ceil - $value) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\n\n/* Create a function that\
    \ takes a value (string) representing a number\nand returns the closest integer\
    \ to it. If the number is equidistant\nfrom two integers, round it away from zero.\n\
    Examples\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\
    Note:\nRounding away from zero means that if the given number is equidistant\n\
    from two integers, the one you should return is the one that is the\nfarthest\
    \ from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"\
    -14.5\") should return -15.*/\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj4da4h__.php:44\n\
    Stack trace:\n#0 /tmp/tmpj4da4h__.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpj4da4h__.php\
    \ on line 44\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor > $ceil - $value) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\n\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0kaxj_mv.php:35\n\
    Stack trace:\n#0 /tmp/tmp0kaxj_mv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0kaxj_mv.php\
    \ on line 35\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor > $ceil - $value) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\n\n/* Create a function that\
    \ takes a string and returns a string in which\neach character is repeated once.\n\
    Examples\n>>> double_char(\"String\")\n\"SSttrriinngg\"\n>>> double_char(\"Hello\
    \ World!\")\n\"HHeelllloo  WWoorrlldd!!\"\n>>> double_char(\"1234!_ \")\n\"11223344!!__\
    \  \"*/\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2bi7ghfs.php:40\n\
    Stack trace:\n#0 /tmp/tmp2bi7ghfs.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp2bi7ghfs.php\
    \ on line 40\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff_floor = abs($value - $floor);\n  $diff_ceil\
    \ = abs($value - $ceil);\n  if ($diff_floor < $diff_ceil) {\n    return $floor;\n\
    \  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"14.5\");\nfunction\
    \ candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp41dpkakt.php:33\n\
    Stack trace:\n#0 /tmp/tmp41dpkakt.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp41dpkakt.php\
    \ on line 33\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_yysh52s.php:29\n\
    Stack trace:\n#0 /tmp/tmp_yysh52s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_yysh52s.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_yysh52s.php:29\n\
    Stack trace:\n#0 /tmp/tmp_yysh52s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_yysh52s.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_yysh52s.php:29\n\
    Stack trace:\n#0 /tmp/tmp_yysh52s.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_yysh52s.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $value_int\
    \ = (int)$value;\n    $value_dec = $value - $value_int;\n    if ($value_dec >=\
    \ 0.5) {\n        return $value_int + 1;\n    } else {\n        return $value_int;\n\
    \    }\n}\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl0_vbvc0.php:37\n\
    Stack trace:\n#0 /tmp/tmpl0_vbvc0.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpl0_vbvc0.php\
    \ on line 37\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n\t$num = floatval($value);\n\t$num_floor =\
    \ floor($num);\n\t$num_ceil = ceil($num);\n\t$diff_floor = abs($num - $num_floor);\n\
    \t$diff_ceil = abs($num - $num_ceil);\n\treturn $diff_floor < $diff_ceil ? $num_floor\
    \ : $num_ceil;\n}\n\necho closest_integer(\"10\");\necho \"\\n\";\necho closest_integer(\"\
    15.3\");\necho \"\\n\";\necho closest_integer(\"14.5\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"-14.6\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.4\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\necho \"\\n\";\necho closest_integer(\"-14.6\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.4\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.6\");\necho \"\\n\";\necho closest_integer(\"\
    -14.4\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.6\");\necho \"\\n\";\necho closest_integer(\"-14.4\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"\
    -14.6\");\necho \"\\n\";\necho closest_integer(\"-14.4\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.5\");\necho \"\\n\";\necho closest_integer(\"-14.6\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.4\");\necho \"\\n\";\necho closest_integer(\"\
    -14.5\");\necho \"\\n\";\necho closest_integer(\"-14.6\");\necho \"\\n\";\necho\
    \ closest_integer(\"-14.4\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\n\
    echo \"\\n\";\necho closest_integer(\"-14.6\");\necho \"\\n\";\necho closest_integer\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmp8f5l33lk.php on line 77

    '
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor < $ceil - $value) {\n    return\
    \ $floor;\n  } else {\n    return $ceil;\n  }\n}\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu6c76qzp.php:34\n\
    Stack trace:\n#0 /tmp/tmpu6c76qzp.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpu6c76qzp.php\
    \ on line 34\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $value =\
    \ round($value);\n    return $value;\n}\necho closest_integer(\"10\");\necho \"\
    <br>\";\necho closest_integer(\"15.3\");\necho \"<br>\";\necho closest_integer(\"\
    14.5\");\necho \"<br>\";\necho closest_integer(\"-14.5\");\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10<br>15<br>15<br>-15\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp3zngesiy.php:32\nStack trace:\n#0 /tmp/tmp3zngesiy.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmp3zngesiy.php on line 32\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsrnrtjng.php:29\n\
    Stack trace:\n#0 /tmp/tmpsrnrtjng.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpsrnrtjng.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq1i_fiv_.php:25\n\
    Stack trace:\n#0 /tmp/tmpq1i_fiv_.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpq1i_fiv_.php\
    \ on line 25\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6rzebad1.php:29\n\
    Stack trace:\n#0 /tmp/tmp6rzebad1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp6rzebad1.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $value = round($value);\n\
    \  return $value;\n}\n\necho closest_integer(\"10\");\necho \"<br>\";\necho closest_integer(\"\
    15.3\");\necho \"<br>\";\necho closest_integer(\"14.5\");\necho \"<br>\";\necho\
    \ closest_integer(\"-14.5\");\necho \"<br>\";\necho closest_integer(\"-14.6\"\
    );\necho \"<br>\";\necho closest_integer(\"-14.4\");\necho \"<br>\";\necho closest_integer(\"\
    -14.3\");\necho \"<br>\";\necho closest_integer(\"-14.2\");\necho \"<br>\";\n\
    echo closest_integer(\"-14.1\");\necho \"<br>\";\necho closest_integer(\"-14.0\"\
    );\necho \"<br>\";\necho closest_integer(\"-13.9\");\necho \"<br>\";\necho closest_integer(\"\
    -13.8\");\necho \"<br>\";\necho closest_integer(\"-13.7\");\necho \"<br>\";\n\
    echo closest_integer(\"-13.6\");\necho \"<br>\";\necho closest_integer(\"-13.5\"\
    );\necho \"<br>\";\necho closest_integer(\"-13.4\");\necho \"<br>\";\necho closest_integer(\"\
    -13.3\");\necho \"<br>\";\necho closest_integer(\"-13.2\");\necho \"<br>\";\n\
    echo closest_integer(\"-13.1\");\necho \"<br>\";\necho closest_integer(\"-13.0\"\
    );\necho \"<br>\";\necho closest_integer(\"-12.9\");\necho \"<br>\";\necho closest_integer(\"\
    -12.8\");\necho \"<br>\";\necho closest_integer(\"-12.7\");\necho \"<br>\";\n\
    echo closest_integer(\"-12.6\");\necho \"<br>\";\necho closest_integer(\"-12.5\"\
    );\necho \"<br>\";\necho closest_integer(\"-12.4\");\necho \"<br>\";\necho closest_integer(\"\
    -12.3\");\necho \"<br>\";\necho closest_integer(\"-12.2\");\necho \"<br>\";\n\
    echo closest_integer(\"-12.1\");\necho\nfunction candidate(...$args) {\n    return\
    \ closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpg1xhy59n.php on line 79

    '
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor > $ceil - $value) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\necho closest_integer(\"10\"\
    ).\"\\n\";\necho closest_integer(\"15.3\").\"\\n\";\necho closest_integer(\"14.5\"\
    ).\"\\n\";\necho closest_integer(\"-14.5\").\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp24rareyy.php:34\n\
    Stack trace:\n#0 /tmp/tmp24rareyy.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp24rareyy.php\
    \ on line 34\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $value =\
    \ round($value);\n    return $value;\n}\necho closest_integer(\"10\").\"\\n\"\
    ;\necho closest_integer(\"15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\\
    n\";\necho closest_integer(\"-14.5\").\"\\n\";\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpynjzhl7f.php:29\n\
    Stack trace:\n#0 /tmp/tmpynjzhl7f.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpynjzhl7f.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $value =\
    \ round($value);\n    return $value;\n}\necho closest_integer(\"10\");\necho \"\
    <br>\";\necho closest_integer(\"15.3\");\necho \"<br>\";\necho closest_integer(\"\
    14.5\");\necho \"<br>\";\necho closest_integer(\"-14.5\");\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10<br>15<br>15<br>-15\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp3zngesiy.php:32\nStack trace:\n#0 /tmp/tmp3zngesiy.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmp3zngesiy.php on line 32\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = (float)$value;\n    $value =\
    \ round($value);\n    return $value;\n}\necho closest_integer(\"10\").\"\\n\"\
    ;\necho closest_integer(\"15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\\
    n\";\necho closest_integer(\"-14.5\").\"\\n\";\nfunction candidate(...$args) {\n\
    \    return closest_integer(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    10\") !== 10) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    -15.5\") !== -16) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    15.3\") !== 15) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    0\") !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpynjzhl7f.php:29\n\
    Stack trace:\n#0 /tmp/tmpynjzhl7f.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpynjzhl7f.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"15.3\");\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57jffslb.php:26\n\
    Stack trace:\n#0 /tmp/tmp57jffslb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp57jffslb.php\
    \ on line 26\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = round($value);\n    return $value;\n\
    }\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"15.3\").\"\\\
    n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"-14.5\"\
    ).\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpahtxhab4.php:28\n\
    Stack trace:\n#0 /tmp/tmpahtxhab4.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpahtxhab4.php\
    \ on line 28\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  $diff1 = abs($value - $floor);\n  $diff2 = abs($value\
    \ - $ceil);\n  if ($diff1 == $diff2) {\n    return $value < 0 ? $floor : $ceil;\n\
    \  }\n  return $diff1 < $diff2 ? $floor : $ceil;\n}\n\n/* Create a function that\
    \ takes a string and returns a string with its\nletters in alphabetical order.\n\
    Examples\n>>> alphabet_soup(\"hello\")\nehllo\n>>> alphabet_soup(\"edabit\")\n\
    abdeit\n>>> alphabet_soup(\"hacker\")\nacehkr\n>>> alphabet_soup(\"geek\")\neegk\n\
    >>> alphabet_soup(\"javascript\")\naacijprstv\n*/\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz7mqlwts.php:46\n\
    Stack trace:\n#0 /tmp/tmpz7mqlwts.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpz7mqlwts.php\
    \ on line 46\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  if ($value >=\
    \ 0) {\n    return ceil($value);\n  } else {\n    return floor($value);\n  }\n\
    }\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\") .\
    \ \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n16\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnyq8nrs1.php:33\n\
    Stack trace:\n#0 /tmp/tmpnyq8nrs1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpnyq8nrs1.php\
    \ on line 33\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $value = round($value);\n\
    \  return $value;\n}\n\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"\
    15.3\") . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj7h3trsf.php:30\n\
    Stack trace:\n#0 /tmp/tmpj7h3trsf.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpj7h3trsf.php\
    \ on line 30\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\n\n/* Create a function that takes a value (string) representing\
    \ a number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp125h94d1.php:39\n\
    Stack trace:\n#0 /tmp/tmp125h94d1.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp125h94d1.php\
    \ on line 39\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = floatval($value);\n    $floor\
    \ = floor($value);\n    $ceil = ceil($value);\n    if ($value - $floor > $ceil\
    \ - $value) {\n        return $ceil;\n    } else {\n        return $floor;\n \
    \   }\n}\necho closest_integer(\"10\") . \"\\n\";\necho closest_integer(\"15.3\"\
    ) . \"\\n\";\necho closest_integer(\"14.5\") . \"\\n\";\necho closest_integer(\"\
    -14.5\") . \"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpydx8plvx.php:34\n\
    Stack trace:\n#0 /tmp/tmpydx8plvx.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpydx8plvx.php\
    \ on line 34\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptub9x7fz.php:29\n\
    Stack trace:\n#0 /tmp/tmptub9x7fz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptub9x7fz.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor > $ceil - $value) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\n\necho closest_integer(\"10\"\
    ) . PHP_EOL;\necho closest_integer(\"15.3\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnsqwko08.php:35\n\
    Stack trace:\n#0 /tmp/tmpnsqwko08.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpnsqwko08.php\
    \ on line 35\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\") . PHP_EOL;\necho closest_integer(\"\
    15.3\") . PHP_EOL;\necho closest_integer(\"14.5\") . PHP_EOL;\necho closest_integer(\"\
    -14.5\") . PHP_EOL;\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpakbpn415.php:29\n\
    Stack trace:\n#0 /tmp/tmpakbpn415.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpakbpn415.php\
    \ on line 29\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor > $ceil - $value) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\n\necho closest_integer(\"10\"\
    ) . \"\\n\";\necho closest_integer(\"15.3\") . \"\\n\";\necho closest_integer(\"\
    14.5\") . \"\\n\";\necho closest_integer(\"-14.5\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return closest_integer(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"10\") !== 10) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"14.5\") !== 15) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0kaxj_mv.php:35\n\
    Stack trace:\n#0 /tmp/tmp0kaxj_mv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0kaxj_mv.php\
    \ on line 35\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n    $value = floatval($value);\n    if ($value\
    \ > 0) {\n        $value = ceil($value);\n    } else {\n        $value = floor($value);\n\
    \    }\n    return $value;\n}\n\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxy43mxgk.php:30\n\
    Stack trace:\n#0 /tmp/tmpxy43mxgk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxy43mxgk.php\
    \ on line 30\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $value = round($value);\n\
    \  return $value;\n}\necho closest_integer(\"10\").\"\\n\";\necho closest_integer(\"\
    15.3\").\"\\n\";\necho closest_integer(\"14.5\").\"\\n\";\necho closest_integer(\"\
    -14.5\").\"\\n\";\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n15\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptub9x7fz.php:29\n\
    Stack trace:\n#0 /tmp/tmptub9x7fz.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptub9x7fz.php\
    \ on line 29\n"
  timestamp: 1660220838
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = (float)$value;\n  $value_abs =\
    \ abs($value);\n  $value_floor = floor($value_abs);\n  $value_ceil = ceil($value_abs);\n\
    \  if ($value_abs - $value_floor < $value_ceil - $value_abs) {\n    return $value\
    \ < 0 ? -$value_floor : $value_floor;\n  } else {\n    return $value < 0 ? -$value_ceil\
    \ : $value_ceil;\n  }\n}\n\n/* Create a function that takes a value (string) representing\
    \ a number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc0i72cgv.php:45\n\
    Stack trace:\n#0 /tmp/tmpc0i72cgv.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpc0i72cgv.php\
    \ on line 45\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = floatval($value);\n  $floor = floor($value);\n\
    \  $ceil = ceil($value);\n  if ($value - $floor > $ceil - $value) {\n    return\
    \ $ceil;\n  } else {\n    return $floor;\n  }\n}\n\necho closest_integer(\"10\"\
    ) . PHP_EOL;\necho closest_integer(\"15.3\") . PHP_EOL;\necho closest_integer(\"\
    14.5\") . PHP_EOL;\necho closest_integer(\"-14.5\") . PHP_EOL;\n\n/* Create a\
    \ function that takes a string and returns the number of\nwords in the string.\n\
    Examples\n>>> count_words(\"Hello world\")\n2\n>>> count_words(\"This is a sentence\"\
    )\n4\n>>> count_words(\"\")\n0\n>>> count_words(\"a b c d e f g h i j k l m n\
    \ o p q r s t u v w x y z\")\n26\n>>> count_words(\"Lorem ipsum dolor sit amet,\
    \ consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore\
    \ magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris\
    \ nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit\
    \ in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint\
    \ occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim\
    \ id est laborum.\")\n68\nNote:\nThe string will always be one or more words.\n\
    The string will never be empty.\nThe string will never contain any non-alphanumeric\
    \ characters.\nThe string will contain at least one letter.\nThe string will contain\
    \ at least one space.\nThe string will not contain any leading or trailing spaces.*/\n\
    function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10\n15\n14\n-15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwduqzzq7.php:56\n\
    Stack trace:\n#0 /tmp/tmpwduqzzq7.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpwduqzzq7.php\
    \ on line 56\n"
  timestamp: 1660220839
- exit_code: 255
  program: "<?php\n/* Create a function that takes a value (string) representing a\
    \ number\nand returns the closest integer to it. If the number is equidistant\n\
    from two integers, round it away from zero.\nExamples\n>>> closest_integer(\"\
    10\")\n10\n>>> closest_integer(\"15.3\")\n15\nNote:\nRounding away from zero means\
    \ that if the given number is equidistant\nfrom two integers, the one you should\
    \ return is the one that is the\nfarthest from zero. For example closest_integer(\"\
    14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.*/\n\
    function closest_integer($value) {\n  $value = round($value);\n  return $value;\n\
    }\necho closest_integer(\"10\");\necho \"<br>\";\necho closest_integer(\"15.3\"\
    );\necho \"<br>\";\necho closest_integer(\"14.5\");\necho \"<br>\";\necho closest_integer(\"\
    -14.5\");\nfunction candidate(...$args) {\n    return closest_integer(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10<br>15<br>15<br>-15\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpa1ly97lj.php:31\nStack trace:\n#0 /tmp/tmpa1ly97lj.php(38): test()\n\
    #1 {main}\n  thrown in /tmp/tmpa1ly97lj.php on line 31\n"
  timestamp: 1660220839
