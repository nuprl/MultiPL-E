name: HumanEval_126_is_sorted
language: php
prompt: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
  in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
  \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
  true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4,\
  \ 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
  \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>>\
  \ is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\n\
  false*/\nfunction is_sorted($lst) {\n"
tests: "function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4,\
  \ 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $sorted = true;\n    $prev = null;\n    foreach ($lst as $num)\
    \ {\n        if ($prev !== null && $num <= $prev) {\n            $sorted = false;\n\
    \            break;\n        }\n        $prev = $num;\n    }\n    return $sorted;\n\
    }\n", "\t$sorted = true;\n\t$prev = null;\n\tforeach ($lst as $item) {\n\t\tif\
    \ ($prev != null && $prev >= $item) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\
    \t}\n\t\t$prev = $item;\n\t}\n\treturn $sorted;\n}\n", "    $len = count($lst);\n\
    \    if ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n/* Given an array of numbers, return\
    \ whether or not they are sorted\nin ascending order. If array has more than 1\
    \ duplicate of the same\nnumber, return false. Assume no negative numbers and\
    \ only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $lst =\
    \ array_unique($lst);\n    $sorted = $lst;\n    sort($sorted);\n    return $lst\
    \ == $sorted;\n}\n\n/* Given an array of numbers, return whether or not they are\
    \ sorted\nin ascending order. If array has more than 1 duplicate of the same\n\
    number, return false. Assume no negative numbers and only integers.\nExamples\n\
    >>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n", "    $len = count($lst);\n\
    \    if ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $sorted = true;\n    $i = 0;\n\
    \    while ($i < count($lst) - 1) {\n        if ($lst[$i] > $lst[$i + 1]) {\n\
    \            $sorted = false;\n            break;\n        }\n        $i++;\n\
    \    }\n    return $sorted;\n}\n\n/* Given an array of numbers, return whether\
    \ or not they are sorted\nin ascending order. If array has more than 1 duplicate\
    \ of the same\nnumber, return false. Assume no negative numbers and only integers.\n\
    Examples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\n\
    true\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3,\
    \ 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n", "    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $len = count($lst);\n    for ($i = 0; $i\
    \ < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    $sorted = true;\n   \
    \ for ($i = 0; $i < count($lst) - 1; $i++) {\n        if ($lst[$i] >= $lst[$i\
    \ + 1]) {\n            $sorted = false;\n        }\n    }\n    return $sorted;\n\
    }\n", "\t$len = count($lst);\n\t$i = 0;\n\twhile ($i < $len - 1) {\n\t\tif ($lst[$i]\
    \ >= $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t\t$i++;\n\t}\n\treturn true;\n\
    }\n\n/* Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/", "    $sorted = true;\n    $prev = 0;\n    foreach ($lst as\
    \ $num) {\n        if ($num < $prev) {\n            $sorted = false;\n       \
    \     break;\n        }\n        $prev = $num;\n    }\n    return $sorted;\n}",
  "    $lst_len = count($lst);\n    if ($lst_len == 1) {\n        return true;\n \
    \   }\n    for ($i = 0; $i < $lst_len - 1; $i++) {\n        if ($lst[$i] > $lst[$i\
    \ + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "    $len = count($lst);\n    if ($len == 1) {\n        return true;\n    }\n  \
    \  for ($i = 0; $i < $len - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\n/* Given\
    \ an array of numbers, return whether or not they are sorted\nin ascending order.\
    \ If array has more than 1 duplicate of the same\nnumber, return false. Assume\
    \ no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/", "    $len = count($lst);\n    if ($len == 1) {\n        return\
    \ true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($lst[$i]\
    \ >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "    $len = count($lst);\n    if ($len == 1) {\n        return\
    \ true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($lst[$i]\
    \ >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);", "    $lst_len\
    \ = count($lst);\n    if ($lst_len == 1) {\n        return true;\n    }\n    for\
    \ ($i = 0; $i < $lst_len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\n/* Given\
    \ an array of numbers, return whether or not they are sorted\nin ascending order.\
    \ If array has more than 1 duplicate of the same\nnumber, return false. Assume\
    \ no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/", "    $sorted = true;\n    $last = $lst[0];\n    for ($i =\
    \ 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $last) {\n            $sorted\
    \ = false;\n            break;\n        }\n        $last = $lst[$i];\n    }\n\
    \    return $sorted;\n}\n", "    $lst = array_unique($lst);\n    $lst = array_values($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n/*\
    \ Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/", "    $count = count($lst);\n    $i = 0;\n    while ($i < $count\
    \ - 1) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n        $i++;\n    }\n    return true;\n}\n", "\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\n", "    $lst = array_unique($lst);\n    $lst = array_values($lst);\n\
    \    $len = count($lst);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n    }\n \
    \   return true;\n}\n\n$lst = array(1, 2, 3, 4, 5, 6, 7);\n$lst = array(1, 2,\
    \ 2, 2, 3, 4);\n$lst = array(1, 2, 2, 3, 3, 4);\n$lst = array(1, 3, 2, 4, 5, 6,\
    \ 7);\n$lst = array(1, 2, 3, 4, 5, 6);\n$lst = array(1, 2, 3, 4, 5);\n$lst = array(5);\n\
    $lst = array(1, 3, 2, 4, 5);\nvar_dump(is_sorted($lst));", "    $prev = null;\n\
    \    foreach ($lst as $item) {\n        if ($prev !== null && $prev >= $item)\
    \ {\n            return false;\n        }\n        $prev = $item;\n    }\n   \
    \ return true;\n}\n", "    if (count($lst) == 1) {\n        return true;\n   \
    \ }\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n      \
    \  if ($lst[$i] < $prev) {\n            return false;\n        }\n        $prev\
    \ = $lst[$i];\n    }\n    return true;\n}\n", "    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    $prev = $lst[0];\n\
    \    for ($i = 1; $i < $lst_len; $i++) {\n        if ($lst[$i] < $prev) {\n  \
    \          return false;\n        }\n        $prev = $lst[$i];\n    }\n    return\
    \ true;\n}\n", "    $lst = array_unique($lst);\n    $lst = array_values($lst);\n\
    \    $lst_size = count($lst);\n    for ($i = 0; $i < $lst_size - 1; $i++) {\n\
    \        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5, 6, 7);\necho is_sorted($lst);",
  "    $lst = array_unique($lst);\n    $lst_sorted = $lst;\n    sort($lst_sorted);\n\
    \    return $lst == $lst_sorted;\n}\n\n$lst = array(1, 2, 3, 4, 5);\nvar_dump(is_sorted($lst));\n\
    \n$lst = array(1, 3, 2, 4, 5);\nvar_dump(is_sorted($lst));\n\n$lst = array(1,\
    \ 2, 3, 4, 5, 6);\nvar_dump(is_sorted($lst));\n\n$lst = array(1, 2, 3, 4, 5, 6,\
    \ 7);\nvar_dump(is_sorted($lst));\n\n$lst = array(1, 3, 2, 4, 5, 6, 7);\nvar_dump(is_sorted($lst));\n\
    \n$lst = array(1, 2, 2, 3, 3, 4);\nvar_dump(is_sorted($lst));\n\n$lst = array(1,\
    \ 2, 2, 2, 3, 4);\nvar_dump(is_sorted($lst));", "    $len = count($lst);\n   \
    \ if ($len <= 1) {\n        return true;\n    }\n    $prev = $lst[0];\n    for\
    \ ($i = 1; $i < $len; $i++) {\n        if ($lst[$i] <= $prev) {\n            return\
    \ false;\n        }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n",
  "    $sorted = true;\n    $last = null;\n    foreach ($lst as $item) {\n       \
    \ if ($last !== null && $last >= $item) {\n            $sorted = false;\n    \
    \        break;\n        }\n        $last = $item;\n    }\n    return $sorted;\n\
    }\n", "    if (count($lst) == 1) {\n        return true;\n    }\n    for ($i =\
    \ 0; $i < count($lst) - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\n/* Given\
    \ an array of numbers, return whether or not they are sorted\nin ascending order.\
    \ If array has more than 1 duplicate of the same\nnumber, return false. Assume\
    \ no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/", "    $lst = array_unique($lst);\n    $lst = array_values($lst);\n\
    \    $lst_len = count($lst);\n    for ($i = 0; $i < $lst_len - 1; $i++) {\n  \
    \      if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5, 6, 7);\necho is_sorted($lst);",
  "    $lst = array_unique($lst);\n    $sorted = $lst;\n    sort($sorted);\n    return\
    \ $lst == $sorted;\n}\n", "    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev === null) {\n            $prev = $item;\n\
    \        } else {\n            if ($prev > $item) {\n                $sorted =\
    \ false;\n                break;\n            }\n            $prev = $item;\n\
    \        }\n    }\n    return $sorted;\n}\n", "    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "\t$sorted = true;\n\t$prev = $lst[0];\n\
    \tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i] < $prev) {\n\t\t\t\
    $sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\t}\n\treturn $sorted;\n\
    }\n\n/* Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/", "    $prev = null;\n    foreach ($lst as $item) {\n      \
    \  if ($prev !== null && $prev >= $item) {\n            return false;\n      \
    \  }\n        $prev = $item;\n    }\n    return true;\n}\n", "    $prev = $lst[0];\n\
    \    $count = 0;\n    foreach ($lst as $num) {\n        if ($num < $prev) {\n\
    \            return false;\n        }\n        if ($num == $prev) {\n        \
    \    $count++;\n        }\n        $prev = $num;\n    }\n    if ($count > 1) {\n\
    \        return false;\n    }\n    return true;\n}\n", "    $last = null;\n  \
    \  foreach ($lst as $item) {\n        if ($last !== null && $last >= $item) {\n\
    \            return false;\n        }\n        $last = $item;\n    }\n    return\
    \ true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\n$lst2 = array(1, 2, 2, 3, 3, 4);\n\
    $lst3 = array(1, 2, 2, 2, 3, 4);\n$lst4 = array(1, 3, 2, 4, 5);\n$lst5 = array(1,\
    \ 3, 2, 4, 5, 6, 7);\n$lst6 = array(1, 2, 3, 4, 5, 6, 7);\n$lst7 = array(1, 2,\
    \ 3, 4, 5, 6);\n$lst8 = array(5);\n\necho is_sorted($lst) . \"\\n\";\necho is_sorted($lst2)\
    \ . \"\\n\";\necho is_sorted($lst3) . \"\\n\";\necho is_sorted($lst4) . \"\\n\"\
    ;\necho is_sorted($lst5) . \"\\n\";\necho is_sorted($lst6) . \"\\n\";\necho is_sorted($lst7)\
    \ . \"\\n\";\necho is_sorted($lst8) . \"\\n\";", "    $sorted = true;\n    $prev\
    \ = $lst[0];\n    foreach ($lst as $num) {\n        if ($num < $prev) {\n    \
    \        $sorted = false;\n            break;\n        }\n        $prev = $num;\n\
    \    }\n    return $sorted;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);",
  "    $sorted = true;\n    $prev = null;\n    foreach ($lst as $item) {\n       \
    \ if ($prev !== null && $prev >= $item) {\n            $sorted = false;\n    \
    \        break;\n        }\n        $prev = $item;\n    }\n    return $sorted;\n\
    }\n", "    $lst_len = count($lst);\n    if ($lst_len == 1) {\n        return true;\n\
    \    }\n    for ($i = 0; $i < $lst_len - 1; $i++) {\n        if ($lst[$i] >= $lst[$i\
    \ + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    $lst = array(1, 2, 3, 4, 5);\n$lst1 = array(1, 3, 2, 4, 5);\n$lst2 = array(1,\
    \ 2, 2, 3, 3, 4);\n$lst3 = array(1, 2, 2, 2, 3, 4);\n$lst4 = array(5);\n$lst5\
    \ = array(1, 2, 3, 4, 5, 6);\n$lst6 = array(1, 2, 3, 4, 5, 6, 7);\n$lst7 = array(1,\
    \ 3, 2, 4, 5, 6, 7);\n\necho is_sorted($lst) . \"\\n\";\necho is_sorted($lst1)\
    \ . \"\\n\";\necho is_sorted($lst2) . \"\\n\";\necho is_sorted($lst3) . \"\\n\"\
    ;\necho is_sorted($lst4) . \"\\n\";\necho is_sorted($lst5) . \"\\n\";\necho is_sorted($lst6)\
    \ . \"\\n\";\necho is_sorted($lst7) . \"\\n\";", "    $prev = $lst[0];\n    $dup\
    \ = false;\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] ==\
    \ $prev) {\n            $dup = true;\n        }\n        if ($lst[$i] < $prev)\
    \ {\n            return false;\n        }\n        $prev = $lst[$i];\n    }\n\
    \    return !$dup;\n}\n\n/* Given an array of numbers, return whether or not they\
    \ are sorted\nin ascending order. If array has more than 1 duplicate of the same\n\
    number, return false. Assume no negative numbers and only integers.\nExamples\n\
    >>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\n$lst = array(1, 2,\
    \ 3, 4, 5);\necho is_sorted($lst);", "    $lst = array_unique($lst);\n    $sorted\
    \ = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n$lst = array(1,\
    \ 2, 3, 4, 5);\necho is_sorted($lst);\necho \"\\n\";\n$lst = array(1, 3, 2, 4,\
    \ 5);\necho is_sorted($lst);\necho \"\\n\";\n$lst = array(1, 2, 2, 3, 3, 4);\n\
    echo is_sorted($lst);\necho \"\\n\";\n$lst = array(1, 2, 2, 2, 3, 4);\necho is_sorted($lst);\n\
    echo \"\\n\";", "    $lst = array_unique($lst);\n    $sorted = $lst;\n    sort($sorted);\n\
    \    return $lst == $sorted;\n}\n\n/* Given an array of numbers, return whether\
    \ or not they are sorted\nin ascending order. If array has more than 1 duplicate\
    \ of the same\nnumber, return false. Assume no negative numbers and only integers.\n\
    Examples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\n\
    true\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3,\
    \ 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$len = count($lst);\n\tfor ($i = 0; $i < $len\
    \ - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn true;\n}\n\necho is_sorted(array(1, 2, 2, 3, 3, 4)) ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_sorted(array(1, 2, 2, 2, 3, 4)) ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_sorted(array(1, 2, 3, 4, 5)) ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_sorted(array(1, 3, 2, 4, 5)) ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_sorted(array(1, 2, 3, 4, 5, 6)) ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_sorted(array(1, 2, 3, 4, 5, 6, 7)) ? \"\
    true\" : \"false\";\necho \"\\n\";\necho is_sorted(array(1, 3, 2, 4, 5, 6, 7))\
    \ ? \"true\" : \"false\";\necho \"\\n\";\necho is_sorted(array(5)) ? \"true\"\
    \ : \"false\";\necho \"\\n\";", "    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   $sorted = false;\n            break;\n        }\n        $prev = $num;\n \
    \   }\n    return $sorted;\n}\n", "    $sorted = true;\n    $prev = $lst[0];\n\
    \    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n\
    \            $sorted = false;\n            break;\n        }\n        $prev =\
    \ $lst[$i];\n    }\n    return $sorted;\n}\n", "\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\tif ($lst == $sorted) {\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\n", "    $len = count($lst);\n    for ($i = 0; $i < $len\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $sorted = true;\n    $prev = null;\n\
    \    foreach ($lst as $item) {\n        if ($prev !== null && $prev >= $item)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n", "  $prev = null;\n  foreach ($lst\
    \ as $item) {\n    if ($prev !== null && $prev >= $item) {\n      return false;\n\
    \    }\n    $prev = $item;\n  }\n  return true;\n}\n", "    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n/*\
    \ Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/", "    $len = count($lst);\n    if ($len == 1) {\n        return\
    \ true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($lst[$i]\
    \ >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "    $last = null;\n    foreach ($lst as $item) {\n        if ($last\
    \ !== null && $last > $item) {\n            return false;\n        }\n       \
    \ $last = $item;\n    }\n    return true;\n}\n\n/* Given an array of numbers,\
    \ return whether or not they are sorted\nin ascending order. If array has more\
    \ than 1 duplicate of the same\nnumber, return false. Assume no negative numbers\
    \ and only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $len =\
    \ count($lst);\n    if ($len == 1) {\n        return true;\n    }\n    for ($i\
    \ = 0; $i < $len - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n", "    $len = count($lst);\n\
    \    if ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len\
    \ - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $sorted = true;\n    $prev = $lst[0];\n\
    \    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n\
    \            $sorted = false;\n            break;\n        }\n        $prev =\
    \ $lst[$i];\n    }\n    return $sorted;\n}\n", "    $result = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $result = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $result;\n}\n", "    if (count($lst)\
    \ == 1) {\n        return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1;\
    \ $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n            return\
    \ false;\n        }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\n\
    /* Given a list of numbers, return the list with the same numbers\nin reverse\
    \ order.\nExamples\n>>> reverse_list(array(1, 2, 3, 4, 5))\narray(5, 4, 3, 2,\
    \ 1)\n>>> reverse_list(array(1, 2, 3, 4))\narray(4, 3, 2, 1)\n>>> reverse_list(array(1,\
    \ 2, 3))\narray(3, 2, 1)\n>>> reverse_list(array(1, 2))\narray(2, 1)\n>>> reverse_list(array(1))\n\
    array(1)\n>>> reverse_list(array())\narray()*/", "    $lst_len = count($lst);\n\
    \    if ($lst_len < 2) {\n        return true;\n    }\n    $prev = $lst[0];\n\
    \    for ($i = 1; $i < $lst_len; $i++) {\n        if ($lst[$i] < $prev) {\n  \
    \          return false;\n        }\n        $prev = $lst[$i];\n    }\n    return\
    \ true;\n}\n", "    $lst = array_unique($lst);\n    $lst = array_values($lst);\n\
    \    $lst_len = count($lst);\n    for ($i = 0; $i < $lst_len - 1; $i++) {\n  \
    \      if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5, 6, 7);\nvar_dump(is_sorted($lst));",
  "    $sorted = true;\n    $prev = null;\n    foreach ($lst as $item) {\n       \
    \ if ($prev !== null && $prev >= $item) {\n            $sorted = false;\n    \
    \        break;\n        }\n        $prev = $item;\n    }\n    return $sorted;\n\
    }\n", "  $lst_len = count($lst);\n  $i = 0;\n  $j = 1;\n  while ($j < $lst_len)\
    \ {\n    if ($lst[$i] > $lst[$j]) {\n      return false;\n    }\n    $i++;\n \
    \   $j++;\n  }\n  return true;\n}\n\n/* Given an array of numbers, return whether\
    \ or not they are sorted\nin ascending order. If array has more than 1 duplicate\
    \ of the same\nnumber, return false. Assume no negative numbers and only integers.\n\
    Examples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\n\
    true\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3,\
    \ 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n", "    $len = count($lst);\n\
    \    if ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);",
  "    $lst = array_unique($lst);\n    $lst_sorted = $lst;\n    sort($lst_sorted);\n\
    \    return $lst == $lst_sorted;\n}\n\n/* Given an array of numbers, return whether\
    \ or not they are sorted\nin ascending order. If array has more than 1 duplicate\
    \ of the same\nnumber, return false. Assume no negative numbers and only integers.\n\
    Examples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\n\
    true\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3,\
    \ 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "  if (count($lst) == 1) {\n \
    \   return true;\n  }\n  for ($i = 0; $i < count($lst) - 1; $i++) {\n    if ($lst[$i]\
    \ >= $lst[$i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\
    \ Given an array of numbers, return the sum of the numbers.\nExamples\n>>> sum_array(array(1,\
    \ 2, 3, 4, 5))\n15\n>>> sum_array(array(1, 2, 3, 4, 5, 6))\n21\n>>> sum_array(array(1,\
    \ 2, 3, 4, 5, 6, 7))\n28\n>>> sum_array(array(1, 2, 3, 4, 5, 6, 7, 8))\n36\n>>>\
    \ sum_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n45\n>>> sum_array(array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10))\n55*/", "    $lst = array_unique($lst);\n    sort($lst);\n\
    \    return $lst == $lst;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);",
  "    $size = count($lst);\n    if ($size == 1) {\n        return true;\n    }\n\
    \    for ($i = 0; $i < $size - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\n/* Given\
    \ an array of numbers, return whether or not they are sorted\nin ascending order.\
    \ If array has more than 1 duplicate of the same\nnumber, return false. Assume\
    \ no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/", "    $count = count($lst);\n    if ($count == 1) {\n     \
    \   return true;\n    }\n    $i = 0;\n    while ($i < $count - 1) {\n        if\
    \ ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n        $i++;\n\
    \    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);",
  "    $len = count($lst);\n    if ($len == 1) {\n        return true;\n    }\n  \
    \  for ($i = 0; $i < $len - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n", "  \
    \  $sorted = true;\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst); $i++)\
    \ {\n        if ($lst[$i] < $prev) {\n            $sorted = false;\n         \
    \   break;\n        }\n        $prev = $lst[$i];\n    }\n    return $sorted;\n\
    }\n", "    $lst_len = count($lst);\n    if ($lst_len == 1) {\n        return true;\n\
    \    }\n    for ($i = 0; $i < $lst_len - 1; $i++) {\n        if ($lst[$i] >= $lst[$i\
    \ + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    $lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);", "    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n/*\
    \ Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/", "    $sorted = true;\n    $prev = $lst[0];\n    for ($i =\
    \ 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n            $sorted\
    \ = false;\n            break;\n        }\n        $prev = $lst[$i];\n    }\n\
    \    return $sorted;\n}\n", "    $len = count($lst);\n    if ($len < 2) {\n  \
    \      return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "    $lst_len = count($lst);\n    if ($lst_len == 1)\
    \ {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len - 1; $i++) {\n\
    \        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "    $prev = $lst[0];\n    foreach ($lst as $num)\
    \ {\n        if ($num < $prev) {\n            return false;\n        }\n     \
    \   $prev = $num;\n    }\n    return true;\n}\n\n/* Given an array of numbers,\
    \ return whether or not they are sorted\nin ascending order. If array has more\
    \ than 1 duplicate of the same\nnumber, return false. Assume no negative numbers\
    \ and only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $len =\
    \ count($lst);\n    if ($len == 1) {\n        return true;\n    }\n    for ($i\
    \ = 0; $i < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n", "\t$lst = array_unique($lst);\n\
    \t$lst = array_values($lst);\n\t$len = count($lst);\n\tfor ($i = 0; $i < $len\
    \ - 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn true;\n}\n", "    $lst = array_unique($lst);\n    $sorted = $lst;\n\
    \    sort($sorted);\n    return $lst == $sorted;\n}\n", "    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $len = count($lst);\n    for ($i = 0; $i\
    \ < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5,\
    \ 6, 7);\necho is_sorted($lst);", "\t$lst_len = count($lst);\n\t$i = 0;\n\t$j\
    \ = 1;\n\twhile ($j < $lst_len) {\n\t\tif ($lst[$i] > $lst[$j]) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t\t$i++;\n\t\t$j++;\n\t}\n\treturn true;\n}\n\n/* Given an array\
    \ of numbers, return whether or not they are sorted\nin ascending order. If array\
    \ has more than 1 duplicate of the same\nnumber, return false. Assume no negative\
    \ numbers and only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $i = 0;\n\
    \    $j = 1;\n    while ($j < count($lst)) {\n        if ($lst[$i] >= $lst[$j])\
    \ {\n            return false;\n        }\n        $i++;\n        $j++;\n    }\n\
    \    return true;\n}\n", "    $lst = array_unique($lst);\n    $lst = array_values($lst);\n\
    \    $len = count($lst);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n    }\n \
    \   return true;\n}\n\n$lst = array(1, 2, 3, 4, 5, 6, 7);\n$lst = array(1, 2,\
    \ 2, 2, 3, 4);\n$lst = array(1, 2, 2, 3, 3, 4);\n$lst = array(1, 3, 2, 4, 5, 6,\
    \ 7);\n$lst = array(1, 2, 3, 4, 5, 6);\n$lst = array(1, 2, 3, 4, 5);\n$lst = array(5);\n\
    $lst = array(1, 3, 2, 4, 5);\n\necho is_sorted($lst);", "    $len = count($lst);\n\
    \    if ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $lst_len = count($lst);\n    if\
    \ ($lst_len == 1) {\n        return true;\n    } else {\n        $i = 0;\n   \
    \     while ($i < $lst_len - 1) {\n            if ($lst[$i] > $lst[$i + 1]) {\n\
    \                return false;\n            }\n            $i++;\n        }\n\
    \        return true;\n    }\n}\n", "    $lst = array_unique($lst);\n    $lst\
    \ = array_values($lst);\n    $len = count($lst);\n    for ($i = 0; $i < $len -\
    \ 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $prev = null;\n    foreach ($lst\
    \ as $num) {\n        if ($prev !== null && $num <= $prev) {\n            return\
    \ false;\n        }\n        $prev = $num;\n    }\n    return true;\n}\n\n/* Given\
    \ an array of numbers, return whether or not they are sorted\nin ascending order.\
    \ If array has more than 1 duplicate of the same\nnumber, return false. Assume\
    \ no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/", "    $sorted = true;\n    $prev = $lst[0];\n    for ($i =\
    \ 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n            $sorted\
    \ = false;\n            break;\n        }\n        $prev = $lst[$i];\n    }\n\
    \    return $sorted;\n}\n", "    $len = count($lst);\n    if ($len == 1) {\n \
    \       return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n       \
    \ if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);",
  "    $sorted = true;\n    $prev = $lst[0];\n    foreach ($lst as $num) {\n     \
    \   if ($num < $prev) {\n            $sorted = false;\n            break;\n  \
    \      }\n        $prev = $num;\n    }\n    return $sorted;\n}\n\n$lst = array(5);\n\
    echo is_sorted($lst);\necho \"\\n\";\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);\n\
    echo \"\\n\";\n$lst = array(1, 3, 2, 4, 5);\necho is_sorted($lst);\necho \"\\\
    n\";\n$lst = array(1, 2, 3, 4, 5, 6);\necho is_sorted($lst);\necho \"\\n\";\n\
    $lst = array(1, 2, 3, 4, 5, 6, 7);\necho is_sorted($lst);\necho \"\\n\";\n$lst\
    \ = array(1, 3, 2, 4, 5, 6, 7);\necho is_sorted($lst);\necho \"\\n\";\n$lst =\
    \ array(1, 2, 2, 3, 3, 4);\necho is_sorted($lst);\necho \"\\n\";\n$lst = array(1,\
    \ 2, 2, 2, 3, 4);\necho is_sorted($lst);\necho \"\\n\";", "    $lst_len = count($lst);\n\
    \    if ($lst_len == 1) {\n        return true;\n    }\n    for ($i = 0; $i <\
    \ $lst_len - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n           \
    \ return false;\n        }\n    }\n    return true;\n}\n\n$lst = array(1, 2, 3,\
    \ 4, 5);\nvar_dump(is_sorted($lst));\n\n$lst = array(1, 3, 2, 4, 5);\nvar_dump(is_sorted($lst));\n\
    \n$lst = array(1, 2, 3, 4, 5, 6);\nvar_dump(is_sorted($lst));\n\n$lst = array(1,\
    \ 2, 3, 4, 5, 6, 7);\nvar_dump(is_sorted($lst));\n\n$lst = array(1, 3, 2, 4, 5,\
    \ 6, 7);\nvar_dump(is_sorted($lst));\n\n$lst = array(1, 2, 2, 3, 3, 4);\nvar_dump(is_sorted($lst));\n\
    \n$lst = array(1, 2, 2, 2, 3, 4);\nvar_dump(is_sorted($lst));", "    $prev = null;\n\
    \    foreach ($lst as $item) {\n        if ($prev !== null && $prev >= $item)\
    \ {\n            return false;\n        }\n        $prev = $item;\n    }\n   \
    \ return true;\n}\n", "    $prev = null;\n    foreach ($lst as $item) {\n    \
    \    if ($prev !== null && $prev >= $item) {\n            return false;\n    \
    \    }\n        $prev = $item;\n    }\n    return true;\n}\n", "  $sorted = true;\n\
    \  $prev = $lst[0];\n  for ($i = 1; $i < count($lst); $i++) {\n    if ($lst[$i]\
    \ < $prev) {\n      $sorted = false;\n      break;\n    }\n    $prev = $lst[$i];\n\
    \  }\n  return $sorted;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);\n\
    echo \"\\n\";\n$lst = array(1, 3, 2, 4, 5);\necho is_sorted($lst);\necho \"\\\
    n\";\n$lst = array(1, 2, 2, 3, 3, 4);\necho is_sorted($lst);\necho \"\\n\";\n\
    $lst = array(1, 2, 2, 2, 3, 4);\necho is_sorted($lst);\necho \"\\n\";", "\t$sorted\
    \ = true;\n\t$i = 0;\n\t$j = 1;\n\t$len = count($lst);\n\twhile ($i < $len-1 &&\
    \ $j < $len) {\n\t\tif ($lst[$i] == $lst[$j]) {\n\t\t\t$sorted = false;\n\t\t\t\
    break;\n\t\t}\n\t\tif ($lst[$i] > $lst[$j]) {\n\t\t\t$sorted = false;\n\t\t\t\
    break;\n\t\t}\n\t\t$i++;\n\t\t$j++;\n\t}\n\treturn $sorted;\n}\n\n$lst = array(1,\
    \ 2, 3, 4, 5);\n$lst2 = array(1, 2, 2, 3, 4);\n$lst3 = array(1, 2, 2, 2, 3, 4);\n\
    $lst4 = array(1, 3, 2, 4, 5);\n$lst5 = array(1, 2, 3, 4, 5, 6);\n$lst6 = array(1,\
    \ 2, 3, 4, 5, 6, 7);\n$lst7 = array(1, 3, 2, 4, 5, 6, 7);\n$lst8 = array(5);\n\
    \necho is_sorted($lst) . \"\\n\";\necho is_sorted($lst2) . \"\\n\";\necho is_sorted($lst3)\
    \ . \"\\n\";\necho is_sorted($lst4) . \"\\n\";\necho is_sorted($lst5) . \"\\n\"\
    ;\necho is_sorted($lst6) . \"\\n\";\necho is_sorted($lst7) . \"\\n\";\necho is_sorted($lst8)\
    \ . \"\\n\";", "    $sorted = true;\n    $prev = $lst[0];\n    for ($i = 1; $i\
    \ < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n            $sorted\
    \ = false;\n            break;\n        }\n        $prev = $lst[$i];\n    }\n\
    \    return $sorted;\n}\n", "    $len = count($lst);\n    if ($len == 1) {\n \
    \       return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1; $i < $len;\
    \ $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n      \
    \  }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n", "\t$sorted = true;\n\
    \t$prev = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < $prev) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\
    \t}\n\treturn $sorted;\n}\n\n$lst = array(1, 2, 3, 4, 5);\n$lst2 = array(1, 3,\
    \ 2, 4, 5);\n$lst3 = array(1, 2, 2, 3, 3, 4);\n$lst4 = array(1, 2, 2, 2, 3, 4);\n\
    \necho is_sorted($lst) . \"\\n\";\necho is_sorted($lst2) . \"\\n\";\necho is_sorted($lst3)\
    \ . \"\\n\";\necho is_sorted($lst4) . \"\\n\";", "    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $len = count($lst);\n    for ($i = 0; $i\
    \ < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5,\
    \ 6, 7);\nvar_dump(is_sorted($lst));", "    $sorted = true;\n    $prev = null;\n\
    \    foreach ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n\
    \            $sorted = false;\n            break;\n        }\n        $prev =\
    \ $num;\n    }\n    return $sorted;\n}\n", "    $lst_count = count($lst);\n  \
    \  if ($lst_count == 1) {\n        return true;\n    }\n    $prev = $lst[0];\n\
    \    for ($i = 1; $i < $lst_count; $i++) {\n        if ($lst[$i] < $prev) {\n\
    \            return false;\n        }\n        $prev = $lst[$i];\n    }\n    return\
    \ true;\n}\n", "  $lst = array_unique($lst);\n  $lst_sorted = $lst;\n  sort($lst_sorted);\n\
    \  return $lst == $lst_sorted;\n}\n\n/* Given an array of numbers, return whether\
    \ or not they are sorted\nin ascending order. If array has more than 1 duplicate\
    \ of the same\nnumber, return false. Assume no negative numbers and only integers.\n\
    Examples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\n\
    true\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3,\
    \ 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $len = count($lst);\n   \
    \ if ($len < 2) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n", "    $len = count($lst);\n    if ($len\
    \ == 1) {\n        return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1;\
    \ $i < $len; $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n\
    \        }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n", "    $sorted\
    \ = true;\n    $prev = null;\n    foreach ($lst as $item) {\n        if ($prev\
    \ !== null && $prev >= $item) {\n            $sorted = false;\n            break;\n\
    \        }\n        $prev = $item;\n    }\n    return $sorted;\n}\n\n/* Given\
    \ an array of numbers, return whether or not they are sorted\nin ascending order.\
    \ If array has more than 1 duplicate of the same\nnumber, return false. Assume\
    \ no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/", "    $sorted = true;\n    $prev = $lst[0];\n    for ($i =\
    \ 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n            $sorted\
    \ = false;\n            break;\n        }\n        $prev = $lst[$i];\n    }\n\
    \    return $sorted;\n}\n", "    $i = 0;\n    $len = count($lst);\n    while ($i\
    \ < $len - 1) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n        $i++;\n    }\n    return true;\n}\n", "    $sorted = true;\n\
    \    $prev = null;\n    foreach ($lst as $item) {\n        if ($prev !== null\
    \ && $prev >= $item) {\n            $sorted = false;\n            break;\n   \
    \     }\n        $prev = $item;\n    }\n    return $sorted;\n}\n", "    $sorted\
    \ = true;\n    $last = 0;\n    $duplicate = false;\n    foreach ($lst as $num)\
    \ {\n        if ($num == $last) {\n            $duplicate = true;\n        }\n\
    \        if ($num < $last) {\n            $sorted = false;\n        }\n      \
    \  $last = $num;\n    }\n    return $sorted && !$duplicate;\n}\n", "    $lst =\
    \ array_unique($lst);\n    $sorted = $lst;\n    sort($sorted);\n    return $lst\
    \ == $sorted;\n}\n\n/* Given an array of numbers, return whether or not they are\
    \ sorted\nin ascending order. If array has more than 1 duplicate of the same\n\
    number, return false. Assume no negative numbers and only integers.\nExamples\n\
    >>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $prev >= $item) {\n       \
    \     return false;\n        }\n        $prev = $item;\n    }\n    return true;\n\
    }\n", "    $lst_len = count($lst);\n    if ($lst_len == 1) {\n        return true;\n\
    \    }\n    $prev = $lst[0];\n    for ($i = 1; $i < $lst_len; $i++) {\n      \
    \  if ($lst[$i] < $prev) {\n            return false;\n        }\n        $prev\
    \ = $lst[$i];\n    }\n    return true;\n}\n", "\t$lst = array_unique($lst);\n\t\
    $lst = array_values($lst);\n\t$len = count($lst);\n\tfor ($i = 0; $i < $len -\
    \ 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn true;\n}\n", "    if (count($lst) == 1) {\n        return true;\n\
    \    }\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n   \
    \     if ($lst[$i] < $prev) {\n            return false;\n        }\n        $prev\
    \ = $lst[$i];\n    }\n    return true;\n}\n\n/* Given an array of numbers, return\
    \ whether or not they are sorted\nin ascending order. If array has more than 1\
    \ duplicate of the same\nnumber, return false. Assume no negative numbers and\
    \ only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $lst_len\
    \ = count($lst);\n    if ($lst_len == 1) {\n        return true;\n    }\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < $lst_len; $i++) {\n        if ($lst[$i] <\
    \ $prev) {\n            return false;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\n$lst2 = array(1,\
    \ 2, 2, 3, 3, 4);\n$lst3 = array(1, 2, 2, 2, 3, 4);\n$lst4 = array(1, 3, 2, 4,\
    \ 5);\n$lst5 = array(1, 2, 3, 4, 5, 6);\n$lst6 = array(1, 2, 3, 4, 5, 6, 7);\n\
    $lst7 = array(1, 3, 2, 4, 5, 6, 7);\n$lst8 = array(5);\n\necho is_sorted($lst)\
    \ . \"\\n\";\necho is_sorted($lst2) . \"\\n\";\necho is_sorted($lst3) . \"\\n\"\
    ;\necho is_sorted($lst4) . \"\\n\";\necho is_sorted($lst5) . \"\\n\";\necho is_sorted($lst6)\
    \ . \"\\n\";\necho is_sorted($lst7) . \"\\n\";\necho is_sorted($lst8) . \"\\n\"\
    ;", "    $temp = $lst;\n    sort($temp);\n    if ($temp == $lst) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/* Given an array of\
    \ numbers, return whether or not they are sorted\nin ascending order. If array\
    \ has more than 1 duplicate of the same\nnumber, return false. Assume no negative\
    \ numbers and only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    if (count($lst)\
    \ == 1) {\n        return true;\n    }\n    for ($i = 0; $i < count($lst) - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n/*\n * Given an array of numbers, return\
    \ the sum of all the numbers.\n * Examples\n * >>> sum_array(array(1, 2, 3, 4,\
    \ 5))\n * 15\n * >>> sum_array(array(1, 2, 3, 4, 5, 6))\n * 21\n * >>> sum_array(array(1,\
    \ 2, 3, 4, 5, 6, 7))\n * 28\n * >>> sum_array(array(1, 2, 3, 4, 5, 6, 7, 8))\n\
    \ * 36\n * >>> sum_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n * 45\n * >>> sum_array(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n * 55\n * */", "    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $len = count($lst);\n    for ($i = 0; $i\
    \ < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5,\
    \ 6, 7);\necho is_sorted($lst);", "    $len = count($lst);\n    if ($len == 1)\
    \ {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n  \
    \      if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "    $count = count($lst);\n    if ($count ==\
    \ 1) {\n        return true;\n    }\n    for ($i = 0; $i < $count - 1; $i++) {\n\
    \        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);",
  "    $lst = array_unique($lst);\n    $sorted = $lst;\n    sort($sorted);\n    return\
    \ $lst == $sorted;\n}\n", "    $lst_len = count($lst);\n    if ($lst_len == 1)\
    \ {\n        return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1; $i <\
    \ $lst_len; $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n\
    \        }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n", "    $count\
    \ = count($lst);\n    if ($count == 1) {\n        return true;\n    }\n    for\
    \ ($i = 0; $i < $count - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    $n\
    \ = count($lst);\n    for ($i = 0; $i < $n - 1; $i++) {\n        if ($lst[$i]\
    \ >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/", "    $prev = null;\n    foreach ($lst as $item) {\n      \
    \  if ($prev !== null && $prev >= $item) {\n            return false;\n      \
    \  }\n        $prev = $item;\n    }\n    return true;\n}\n\n/* Given an array\
    \ of numbers, return whether or not they are sorted\nin ascending order. If array\
    \ has more than 1 duplicate of the same\nnumber, return false. Assume no negative\
    \ numbers and only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $lst_len\
    \ = count($lst);\n    if ($lst_len == 1) {\n        return true;\n    }\n    for\
    \ ($i = 0; $i < $lst_len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    $sorted\
    \ = true;\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n\
    \        if ($lst[$i] < $prev) {\n            $sorted = false;\n            break;\n\
    \        }\n        $prev = $lst[$i];\n    }\n    return $sorted;\n}\n", "\t$lst\
    \ = array_unique($lst);\n\t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst ==\
    \ $sorted;\n}\n\n/* Given an array of numbers, return whether or not they are\
    \ sorted\nin ascending order. If array has more than 1 duplicate of the same\n\
    number, return false. Assume no negative numbers and only integers.\nExamples\n\
    >>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $len = count($lst);\n    for ($i = 0; $i\
    \ < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "\t$lst = array_unique($lst);\n\
    \t$sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\n", "    if\
    \ (count($lst) == 1) {\n        return true;\n    }\n    $sorted = true;\n   \
    \ $last = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $last) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $last = $lst[$i];\n    }\n    return $sorted;\n}\n", "    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n/*\
    \ Given a list of numbers, return the number of unique numbers in the list.\n\
    Examples\n>>> num_unique(array(1, 2, 3, 4, 5))\n5\n>>> num_unique(array(1, 2,\
    \ 2, 3, 3, 4))\n4\n>>> num_unique(array(1, 2, 2, 2, 3, 3, 4))\n4\n>>> num_unique(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n10\n>>> num_unique(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 10))\n10\n>>> num_unique(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10,\
    \ 10))\n10\n>>> num_unique(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10))\n\
    10\n>>> num_unique(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10))\n10\n\
    >>> num_unique(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10))\n10\n\
    >>> num_unique(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10))\n\
    10\n>>> num_unique(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10,\
    \ 10))\n10\n>>> num_unique(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10))\n10\n>>> num_unique(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10,\
    \ 10, 10, 10, 10, 10,", "    $sorted = true;\n    $prev = null;\n    foreach ($lst\
    \ as $item) {\n        if ($prev !== null && $prev > $item) {\n            $sorted\
    \ = false;\n            break;\n        }\n        $prev = $item;\n    }\n   \
    \ return $sorted;\n}\n", "    $sorted = true;\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num < $prev) {\n          \
    \  $sorted = false;\n            break;\n        }\n        $prev = $num;\n  \
    \  }\n    return $sorted;\n}\n", "    $prev = null;\n    foreach ($lst as $val)\
    \ {\n        if ($prev !== null && $prev >= $val) {\n            return false;\n\
    \        }\n        $prev = $val;\n    }\n    return true;\n}\n", "    $count\
    \ = count($lst);\n    if ($count == 1) {\n        return true;\n    }\n    $i\
    \ = 0;\n    while ($i < $count - 1) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n\
    \            return false;\n        }\n        $i++;\n    }\n    return true;\n\
    }\n", "\t$sorted = true;\n\t$prev = null;\n\tforeach ($lst as $item) {\n\t\tif\
    \ ($prev === null) {\n\t\t\t$prev = $item;\n\t\t} else {\n\t\t\tif ($prev > $item)\
    \ {\n\t\t\t\t$sorted = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$prev = $item;\n\
    \t\t}\n\t}\n\treturn $sorted;\n}\n", "\t$sorted = true;\n\t$last = $lst[0];\n\t\
    for ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i] < $last) {\n\t\t\t$sorted\
    \ = false;\n\t\t\tbreak;\n\t\t}\n\t\t$last = $lst[$i];\n\t}\n\treturn $sorted;\n\
    }\n", "\t$lst = array_unique($lst);\n\t$sorted = $lst;\n\tsort($sorted);\n\treturn\
    \ $lst == $sorted;\n}\n\n/* Given an array of numbers, return whether or not they\
    \ are sorted\nin ascending order. If array has more than 1 duplicate of the same\n\
    number, return false. Assume no negative numbers and only integers.\nExamples\n\
    >>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n", "    $sorted = true;\n\
    \    $prev = null;\n    foreach ($lst as $num) {\n        if ($prev !== null &&\
    \ $num <= $prev) {\n            $sorted = false;\n            break;\n       \
    \ }\n        $prev = $num;\n    }\n    return $sorted;\n}\n", "    $sorted = true;\n\
    \    $prev = $lst[0];\n    foreach ($lst as $item) {\n        if ($item < $prev)\
    \ {\n            $sorted = false;\n            break;\n        }\n        $prev\
    \ = $item;\n    }\n    return $sorted;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho\
    \ is_sorted($lst);", "    $len = count($lst);\n    if ($len == 1) {\n        return\
    \ true;\n    }\n    for ($i = 0; $i < $len - 1; $i++) {\n        if ($lst[$i]\
    \ >= $lst[$i + 1]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "    if (count($lst) == 1) {\n        return true;\n    }\n   \
    \ $prev = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            return false;\n        }\n        $prev = $lst[$i];\n\
    \    }\n    return true;\n}\n\n/* Given an array of numbers, return whether or\
    \ not they are sorted\nin ascending order. If array has more than 1 duplicate\
    \ of the same\nnumber, return false. Assume no negative numbers and only integers.\n\
    Examples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\n\
    true\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3,\
    \ 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n", " \
    \   $lst_len = count($lst);\n    if ($lst_len == 1) {\n        return true;\n\
    \    }\n    for ($i = 0; $i < $lst_len - 1; $i++) {\n        if ($lst[$i] > $lst[$i\
    \ + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "    $sorted = true;\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst); $i++)\
    \ {\n        if ($lst[$i] < $prev) {\n            $sorted = false;\n         \
    \   break;\n        }\n        $prev = $lst[$i];\n    }\n    return $sorted;\n\
    }\n", "    $lst_len = count($lst);\n    if ($lst_len == 1) {\n        return true;\n\
    \    }\n    for ($i = 0; $i < $lst_len - 1; $i++) {\n        if ($lst[$i] >= $lst[$i\
    \ + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    $lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);", "\t$lst = array_unique($lst);\n\
    \t$lst_sorted = $lst;\n\tsort($lst_sorted);\n\treturn $lst == $lst_sorted;\n}\n",
  "    $lst = array_unique($lst);\n    $sorted = $lst;\n    sort($sorted);\n    return\
    \ $lst == $sorted;\n}\n", "    $lst_len = count($lst);\n    if ($lst_len == 1)\
    \ {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len - 1; $i++) {\n\
    \        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "    $sorted = true;\n    $last = null;\n    foreach\
    \ ($lst as $item) {\n        if ($last !== null && $item <= $last) {\n       \
    \     $sorted = false;\n            break;\n        }\n        $last = $item;\n\
    \    }\n    return $sorted;\n}\n", "    $lst_len = count($lst);\n    if ($lst_len\
    \ == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len - 1; $i++)\
    \ {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n\n/* Given an array of numbers, return whether\
    \ or not they are sorted\nin ascending order. If array has more than 1 duplicate\
    \ of the same\nnumber, return false. Assume no negative numbers and only integers.\n\
    Examples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\n\
    true\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3,\
    \ 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $lst = array_unique($lst);\n\
    \    $len = count($lst);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n    }\n \
    \   return true;\n}\n\n$lst = array(1, 2, 3, 4, 5, 6, 7);\nvar_dump(is_sorted($lst));",
  "    if (count($lst) == 1) {\n        return true;\n    }\n    $sorted = true;\n\
    \    $last = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if\
    \ ($lst[$i] < $last) {\n            $sorted = false;\n            break;\n   \
    \     }\n        $last = $lst[$i];\n    }\n    return $sorted;\n}\n\n$lst = array(1,\
    \ 2, 3, 4, 5);\necho is_sorted($lst);\n", "    $lst_length = count($lst);\n  \
    \  if ($lst_length == 1) {\n        return true;\n    }\n    for ($i = 0; $i <\
    \ $lst_length - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\n", "    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $i = 0;\n    while ($i < count($lst) - 1)\
    \ {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n     \
    \   }\n        $i++;\n    }\n    return true;\n}\n", "    $lst_length = count($lst);\n\
    \    if ($lst_length == 1) {\n        return true;\n    }\n    for ($i = 0; $i\
    \ < $lst_length - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n", "    $sorted =\
    \ true;\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n  \
    \      if ($lst[$i] < $prev) {\n            $sorted = false;\n            break;\n\
    \        }\n        $prev = $lst[$i];\n    }\n    return $sorted;\n}\n", "   \
    \ $len = count($lst);\n    if ($len == 1) {\n        return true;\n    }\n   \
    \ for ($i = 0; $i < $len - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "  $lst\
    \ = array_unique($lst);\n  $sorted = $lst;\n  sort($sorted);\n  return $lst ==\
    \ $sorted;\n}\n\n/* Given an array of numbers, return whether or not they are\
    \ sorted\nin ascending order. If array has more than 1 duplicate of the same\n\
    number, return false. Assume no negative numbers and only integers.\nExamples\n\
    >>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $sorted = true;\n    $last\
    \ = 0;\n    foreach ($lst as $num) {\n        if ($num < $last) {\n          \
    \  $sorted = false;\n            break;\n        }\n        $last = $num;\n  \
    \  }\n    return $sorted;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);",
  "\t$lst_len = count($lst);\n\tif ($lst_len <= 1) {\n\t\treturn true;\n\t}\n\t$prev\
    \ = $lst[0];\n\tfor ($i = 1; $i < $lst_len; $i++) {\n\t\tif ($lst[$i] < $prev)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\t$prev = $lst[$i];\n\t}\n\treturn true;\n\
    }\n", "    $lst_len = count($lst);\n    if ($lst_len <= 1) {\n        return true;\n\
    \    }\n    for ($i = 0; $i < $lst_len - 1; $i++) {\n        if ($lst[$i] >= $lst[$i\
    \ + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "    $prev = null;\n    foreach ($lst as $item) {\n        if ($prev !== null &&\
    \ $prev >= $item) {\n            return false;\n        }\n        $prev = $item;\n\
    \    }\n    return true;\n}\n", "    $lst_len = count($lst);\n    if ($lst_len\
    \ == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len - 1; $i++)\
    \ {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\n", "    $lst_len = count($lst);\n    if ($lst_len\
    \ == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len - 1; $i++)\
    \ {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n", "    $lst_len = count($lst);\n    if ($lst_len\
    \ == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len - 1; $i++)\
    \ {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n", "    $lst = array_unique($lst);\n    $lst\
    \ = array_values($lst);\n    $i = 0;\n    $j = 1;\n    while ($j < count($lst))\
    \ {\n        if ($lst[$i] > $lst[$j]) {\n            return false;\n        }\n\
    \        $i++;\n        $j++;\n    }\n    return true;\n}\n\n/* Given an array\
    \ of numbers, return whether or not they are sorted\nin ascending order. If array\
    \ has more than 1 duplicate of the same\nnumber, return false. Assume no negative\
    \ numbers and only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $sorted\
    \ = true;\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n\
    \        if ($lst[$i] < $prev) {\n            $sorted = false;\n            break;\n\
    \        }\n        $prev = $lst[$i];\n    }\n    return $sorted;\n}\n", "   \
    \ $lst_len = count($lst);\n    if ($lst_len == 1) {\n        return true;\n  \
    \  }\n    for ($i = 0; $i < $lst_len - 1; $i++) {\n        if ($lst[$i] >= $lst[$i\
    \ + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "    $lst = array_unique($lst);\n    $sorted = $lst;\n    sort($sorted);\n    return\
    \ $lst == $sorted;\n}\n\n/* Given an array of numbers, return whether or not they\
    \ are sorted\nin ascending order. If array has more than 1 duplicate of the same\n\
    number, return false. Assume no negative numbers and only integers.\nExamples\n\
    >>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $len = count($lst);\n    for ($i = 0; $i\
    \ < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n/*\
    \ Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/", "    $sorted = true;\n    $prev = null;\n    foreach ($lst\
    \ as $item) {\n        if ($prev !== null && $prev >= $item) {\n            $sorted\
    \ = false;\n            break;\n        }\n        $prev = $item;\n    }\n   \
    \ return $sorted;\n}\n", "    $lst_len = count($lst);\n    if ($lst_len == 1)\
    \ {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len - 1; $i++) {\n\
    \        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "\t$lst = array_unique($lst);\n\t$lst = array_values($lst);\n\
    \t$len = count($lst);\n\tfor ($i = 0; $i < $len - 1; $i++) {\n\t\tif ($lst[$i]\
    \ > $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", " \
    \ $lst_len = count($lst);\n  if ($lst_len == 1) {\n    return true;\n  }\n  for\
    \ ($i = 0; $i < $lst_len - 1; $i++) {\n    if ($lst[$i] >= $lst[$i + 1]) {\n \
    \     return false;\n    }\n  }\n  return true;\n}\n", "    $len = count($lst);\n\
    \    if ($len == 1) {\n        return true;\n    }\n    $prev = $lst[0];\n   \
    \ for ($i = 1; $i < $len; $i++) {\n        if ($lst[$i] < $prev) {\n         \
    \   return false;\n        }\n        $prev = $lst[$i];\n    }\n    return true;\n\
    }\n", "    $sorted = true;\n    $prev = null;\n    foreach ($lst as $item) {\n\
    \        if ($prev !== null && $prev >= $item) {\n            $sorted = false;\n\
    \            break;\n        }\n        $prev = $item;\n    }\n    return $sorted;\n\
    }\n\n/* Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/", "    $lst = array_unique($lst);\n    $lst = array_values($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n/*\n\
    \ * Given an array of numbers, return whether or not they are sorted\n * in ascending\
    \ order. If array has more than 1 duplicate of the same\n * number, return false.\
    \ Assume no negative numbers and only integers.\n * Examples\n * >>> is_sorted(array(5))\n\
    \ * true\n * >>> is_sorted(array(1, 2, 3, 4, 5))\n * true\n * >>> is_sorted(array(1,\
    \ 3, 2, 4, 5))\n * false\n * >>> is_sorted(array(1, 2, 3, 4, 5, 6))\n * true\n\
    \ * >>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\n * true\n * >>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\n * false\n * >>> is_sorted(array(1, 2, 2, 3, 3, 4))\n *\
    \ true\n * >>> is_sorted(array(1, 2, 2, 2, 3, 4))\n * false\n */", "    $len =\
    \ count($lst);\n    if ($len == 1) {\n        return true;\n    }\n    for ($i\
    \ = 0; $i < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n", "    $lst_len\
    \ = count($lst);\n    if ($lst_len == 1) {\n        return true;\n    }\n    for\
    \ ($i = 0; $i < $lst_len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "    $prev\
    \ = null;\n    foreach ($lst as $item) {\n        if ($prev !== null && $prev\
    \ >= $item) {\n            return false;\n        }\n        $prev = $item;\n\
    \    }\n    return true;\n}\n", "    $lst = array_unique($lst);\n    $lst = array_values($lst);\n\
    \    $len = count($lst);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n    }\n \
    \   return true;\n}\n\n/* Given an array of numbers, return whether or not they\
    \ are sorted\nin ascending order. If array has more than 1 duplicate of the same\n\
    number, return false. Assume no negative numbers and only integers.\nExamples\n\
    >>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $count = count($lst);\n \
    \   $i = 0;\n    while ($i < $count - 1) {\n        if ($lst[$i] >= $lst[$i +\
    \ 1]) {\n            return false;\n        }\n        $i++;\n    }\n    return\
    \ true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\nvar_dump(is_sorted($lst));\n\n$lst\
    \ = array(1, 3, 2, 4, 5);\nvar_dump(is_sorted($lst));\n\n$lst = array(1, 2, 2,\
    \ 3, 3, 4);\nvar_dump(is_sorted($lst));\n\n$lst = array(1, 2, 2, 2, 3, 4);\nvar_dump(is_sorted($lst));",
  "    $lst = array_unique($lst);\n    $sorted = $lst;\n    sort($sorted);\n    return\
    \ $lst == $sorted;\n}\n\n/* Given an array of numbers, return whether or not they\
    \ are sorted\nin ascending order. If array has more than 1 duplicate of the same\n\
    number, return false. Assume no negative numbers and only integers.\nExamples\n\
    >>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $item) {\n        if ($prev !== null && $prev\
    \ >= $item) {\n            $sorted = false;\n            break;\n        }\n \
    \       $prev = $item;\n    }\n    return $sorted;\n}\n", "    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n/*\
    \ Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/", "    $sorted = true;\n    $prev = $lst[0];\n    for ($i =\
    \ 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $prev) {\n            $sorted\
    \ = false;\n            break;\n        }\n        $prev = $lst[$i];\n    }\n\
    \    return $sorted;\n}\n\n/* Given an array of numbers, return whether or not\
    \ they are sorted\nin ascending order. If array has more than 1 duplicate of the\
    \ same\nnumber, return false. Assume no negative numbers and only integers.\n\
    Examples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\n\
    true\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3,\
    \ 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/", "    $lst_len = count($lst);\n\
    \    if ($lst_len <= 1) {\n        return true;\n    }\n    $prev = $lst[0];\n\
    \    for ($i = 1; $i < $lst_len; $i++) {\n        if ($lst[$i] < $prev) {\n  \
    \          return false;\n        }\n        $prev = $lst[$i];\n    }\n    return\
    \ true;\n}\n", "    $sorted = true;\n    $prev = null;\n    foreach ($lst as $item)\
    \ {\n        if ($prev !== null && $prev >= $item) {\n            $sorted = false;\n\
    \            break;\n        }\n        $prev = $item;\n    }\n    return $sorted;\n\
    }\n", "    $sorted = true;\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] < $prev) {\n            $sorted = false;\n   \
    \         break;\n        }\n        $prev = $lst[$i];\n    }\n    return $sorted;\n\
    }\n", "    $lst_len = count($lst);\n    if ($lst_len == 1) {\n        return true;\n\
    \    }\n    $prev = $lst[0];\n    for ($i = 1; $i < $lst_len; $i++) {\n      \
    \  if ($lst[$i] < $prev) {\n            return false;\n        }\n        $prev\
    \ = $lst[$i];\n    }\n    return true;\n}\n", "    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $num) {\n        if ($prev !== null && $num <=\
    \ $prev) {\n            $sorted = false;\n            break;\n        }\n    \
    \    $prev = $num;\n    }\n    return $sorted;\n}\n", "    $lst_len = count($lst);\n\
    \    $i = 0;\n    $j = 1;\n    while ($j < $lst_len) {\n        if ($lst[$i] >\
    \ $lst[$j]) {\n            return false;\n        }\n        $i++;\n        $j++;\n\
    \    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\n$lst2 = array(1,\
    \ 3, 2, 4, 5);\n$lst3 = array(1, 2, 2, 3, 3, 4);\n$lst4 = array(1, 2, 2, 2, 3,\
    \ 4);\n\necho is_sorted($lst) . \"\\n\";\necho is_sorted($lst2) . \"\\n\";\necho\
    \ is_sorted($lst3) . \"\\n\";\necho is_sorted($lst4) . \"\\n\";", "    $lst_len\
    \ = count($lst);\n    if ($lst_len == 1) {\n        return true;\n    }\n    $i\
    \ = 0;\n    $j = 1;\n    while ($j < $lst_len) {\n        if ($lst[$i] >= $lst[$j])\
    \ {\n            return false;\n        }\n        $i++;\n        $j++;\n    }\n\
    \    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\nvar_dump(is_sorted($lst));\n\
    \n$lst = array(1, 3, 2, 4, 5);\nvar_dump(is_sorted($lst));\n\n$lst = array(1,\
    \ 2, 3, 4, 5, 6);\nvar_dump(is_sorted($lst));\n\n$lst = array(1, 2, 3, 4, 5, 6,\
    \ 7);\nvar_dump(is_sorted($lst));\n\n$lst = array(1, 3, 2, 4, 5, 6, 7);\nvar_dump(is_sorted($lst));\n\
    \n$lst = array(1, 2, 2, 3, 3, 4);\nvar_dump(is_sorted($lst));\n\n$lst = array(1,\
    \ 2, 2, 2, 3, 4);\nvar_dump(is_sorted($lst));\n\n$lst = array(5);\nvar_dump(is_sorted($lst));"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
