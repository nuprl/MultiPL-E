name: HumanEval_28_concatenate
language: php
prompt: "<?php\n/* Concatenate array of strings into a single string\n>>> concatenate(array())\n\
  \"\"\n>>> concatenate(array(\"a\", \"b\", \"c\"))\n\"abc\"*/\nfunction concatenate($strings)\
  \ {\n"
tests: "function candidate(...$args) {\n    return concatenate(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== \"\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"xyz\") {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\"\
  , \"z\", \"w\", \"k\")) !== \"xyzwk\") { throw new Exception(\"Test failed!\");\
  \ }\n}\n\ntest();"
completions: ["    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Return the first element of\
    \ an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\nnull*/", "    $result\
    \ = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/*\n * Test\n */\nassert_options(ASSERT_BAIL,\
    \ 1);\n$test_name = \"concatenate\";\n\n$tests = array(\n    array(\n        \"\
    input\" => array(),\n        \"expected\" => \"\"\n    ),\n    array(\n      \
    \  \"input\" => array(\"a\", \"b\", \"c\"),\n        \"expected\" => \"abc\"\n\
    \    )\n);\n\nforeach ($tests as $index => $test) {\n    $result = concatenate($test[\"\
    input\"]);\n    if ($result !== $test[\"expected\"]) {\n        echo \"Test $index\
    \ failed\\n\";\n        echo \"Result: $result\\n\";\n        echo \"Expected:\
    \ {$test[\"expected\"]}\\n\";\n        assert(false);\n    }\n}\n\necho \"Tests\
    \ passed\\n\";", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result\
    \ .= $string;\n\t}\n\treturn $result;\n}\n\n/* Concatenate array of strings into\
    \ a single string with a separator\n>>> concatenate_with_separator(array(), \"\
    ,\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\
    \"a,b,c\"*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result\
    \ .= $string;\n\t}\n\treturn $result;\n}\n\n/* Return the first element of an\
    \ array\n>>> first(array(\"a\", \"b\", \"c\"))\n\"a\"*/", "    $result = \"\"\
    ;\n    foreach ($strings as $string) {\n        $result .= $string;\n    }\n \
    \   return $result;\n}\n\n/* Concatenate array of strings into a single string,\
    \ with a separator\n>>> concatenate_with_separator(array(), \",\")\n\"\"\n>>>\
    \ concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\"a,b,c\"*/",
  "    $result = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/* Concatenate array of strings into a single\
    \ string, with a separator\n>>> concatenate_with_separator(array(), \",\")\n\"\
    \"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\"a,b,c\"\
    */", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Returns the first element of\
    \ an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\nnull*/", "\t$result\
    \ = \"\";\n\tforeach ($strings as $string) {\n\t\t$result .= $string;\n\t}\n\t\
    return $result;\n}\n\n/* Concatenate array of strings into a single string, with\
    \ a separator\n>>> concatenate_with_separator(array(), \",\")\n\"\"\n>>> concatenate_with_separator(array(\"\
    a\", \"b\", \"c\"), \",\")\n\"a,b,c\"\n>>> concatenate_with_separator(array(\"\
    a\", \"b\", \"c\"), \"\")\n\"abc\"*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /* Return the first element of an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\n\
    null*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result .=\
    \ $string;\n\t}\n\treturn $result;\n}\n\n/* Concatenate array of strings into\
    \ a single string with a separator\n>>> concatenate_with_separator(array(), \"\
    ,\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\
    \"a,b,c\"*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result\
    \ .= $string;\n\t}\n\treturn $result;\n}\n\n/* Return the number of times that\
    \ $substring appears in $string\n>>> substring_count(\"\", \"\")\n0\n>>> substring_count(\"\
    \", \"a\")\n0\n>>> substring_count(\"a\", \"\")\n0\n>>> substring_count(\"a\"\
    , \"a\")\n1\n>>> substring_count(\"aa\", \"a\")\n2\n>>> substring_count(\"abc\"\
    , \"b\")\n1\n>>> substring_count(\"abc\", \"bc\")\n1\n>>> substring_count(\"abc\"\
    , \"abc\")\n1\n>>> substring_count(\"ababab\", \"ab\")\n3\n>>> substring_count(\"\
    ababab\", \"aba\")\n2\n>>> substring_count(\"ababab\", \"abab\")\n1\n>>> substring_count(\"\
    ababab\", \"ababa\")\n0\n>>> substring_count(\"ababab\", \"bab\")\n1\n>>> substring_count(\"\
    ababab\", \"baba\")\n0\n>>> substring_count(\"ababab\", \"ababab\")\n1\n>>> substring_count(\"\
    ababab\", \"abababa\")\n0\n>>> substring_count(\"ababab\", \"abababab\")\n0\n\
    >>> substring_count(\"ababab\", \"ababababab\")\n0\n>>> substring_count(\"ababab\"\
    , \"abababababab\")\n0\n>>> substring_count(\"ababab\", \"ababababababab\")\n\
    0\n>>> substring_count(\"ababab\", \"abababababababab\")\n0\n>>> substring_count(\"\
    ababab\", \"ababababababababab\")\n0\n>>> substring_count(\"ababab\", \"abababababababababab\"\
    )\n0\n>>> substring_count(\"ababab\", \"ababababababababababab\")\n0\n>>> substring_count(\"\
    ababab\", \"abababababababababababab\")\n0\n>>> substring_count", "    $string\
    \ = \"\";\n    foreach ($strings as $str) {\n        $string .= $str;\n    }\n\
    \    return $string;\n}\n\n/* Concatenate array of strings into a single string\
    \ with a separator\n>>> concatenate_with_separator(array(), \",\")\n\"\"\n>>>\
    \ concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\"a,b,c\"*/",
  "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result .= $string;\n\
    \t}\n\treturn $result;\n}\n\n/* Returns the first element of an array\n>>> first(array(1,\
    \ 2, 3))\n1\n>>> first(array())\nnull*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /* Return the first element of an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\n\
    null*/", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/*\n * Return a string with the\
    \ first letter of each word capitalized\n * >>> capitalize(\"hello world\")\n\
    \ * \"Hello World\"\n * >>> capitalize(\"hello world, how are you?\")\n * \"Hello\
    \ World, How Are You?\"\n */", "    $result = \"\";\n    foreach ($strings as\
    \ $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n/*\
    \ Returns the first element of an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\n\
    null*/", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate array of strings\
    \ into a single string, with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t\
    $result .= $string;\n\t}\n\treturn $result;\n}\n\n/* Return the first element\
    \ of an array\n>>> first(array(\"a\", \"b\", \"c\"))\n\"a\"*/", "    $result =\
    \ \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n  \
    \  }\n    return $result;\n}\n\n/* Return the first element of an array\n>>> first(array(1,\
    \ 2, 3))\n1\n>>> first(array())\nnull*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /* Return a string with all the characters in the string reversed\n>>> reverse(\"\
    \")\n\"\"\n>>> reverse(\"a\")\n\"a\"\n>>> reverse(\"ab\")\n\"ba\"\n>>> reverse(\"\
    abc\")\n\"cba\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate\
    \ array of strings into a single string with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t\
    $result .= $string;\n\t}\n\treturn $result;\n}\n\n/* Check if a string is a palindrome\n\
    >>> isPalindrome(\"\")\ntrue\n>>> isPalindrome(\"a\")\ntrue\n>>> isPalindrome(\"\
    aa\")\ntrue\n>>> isPalindrome(\"ab\")\nfalse\n>>> isPalindrome(\"aba\")\ntrue\n\
    >>> isPalindrome(\"abba\")\ntrue\n>>> isPalindrome(\"abcdcba\")\ntrue\n>>> isPalindrome(\"\
    abcdcbx\")\nfalse\n>>> isPalindrome(\"abcdefghhgfedcba\")\ntrue\n>>> isPalindrome(\"\
    abcdefghihgfedcba\")\ntrue\n>>> isPalindrome(\"abcdefghihgfeddcba\")\nfalse*/",
  "    $result = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/* Returns the first element of an array\n>>>\
    \ first(array(\"a\", \"b\", \"c\"))\n\"a\"*/", "    $result = \"\";\n    foreach\
    \ ($strings as $string) {\n        $result .= $string;\n    }\n    return $result;\n\
    }\n\n/* Count the number of times a substring occurs in a string\n>>> countSubstr(\"\
    abcabcabc\", \"abc\")\n3\n>>> countSubstr(\"abcabcabc\", \"ab\")\n2\n>>> countSubstr(\"\
    abcabcabc\", \"a\")\n3\n>>> countSubstr(\"abcabcabc\", \"\")\n4\n>>> countSubstr(\"\
    abcabcabc\", \"d\")\n0*/", "    $result = \"\";\n    foreach ($strings as $string)\
    \ {\n        $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate\
    \ array of strings into a single string with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    \")\n\"abc\"*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result\
    \ .= $string;\n\t}\n\treturn $result;\n}\n\n/* Returns the number of times the\
    \ specified string appears in the array\n>>> count_occurrences(array(\"a\", \"\
    b\", \"c\"), \"a\")\n1\n>>> count_occurrences(array(\"a\", \"b\", \"c\"), \"b\"\
    )\n1\n>>> count_occurrences(array(\"a\", \"b\", \"c\"), \"c\")\n1\n>>> count_occurrences(array(\"\
    a\", \"b\", \"c\"), \"d\")\n0\n>>> count_occurrences(array(\"a\", \"b\", \"c\"\
    , \"a\"), \"a\")\n2\n>>> count_occurrences(array(\"a\", \"b\", \"c\", \"a\"),\
    \ \"b\")\n1\n>>> count_occurrences(array(\"a\", \"b\", \"c\", \"a\"), \"c\")\n\
    1\n>>> count_occurrences(array(\"a\", \"b\", \"c\", \"a\"), \"d\")\n0*/", "  \
    \  $result = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/* Concatenate array of strings into a single\
    \ string with a separator\n>>> concatenate_with_separator(array(), \",\")\n\"\"\
    \n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\"a,b,c\"\
    */", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate array of strings\
    \ into a single string, with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/* Return the sum\
    \ of the numbers in the array\n>>> sum(array(1, 2, 3))\n6\n>>> sum(array(5, 5,\
    \ 5, 5, 5))\n25\n>>> sum(array(10, -10))\n0*/", "    $result = \"\";\n    foreach\
    \ ($strings as $string) {\n        $result .= $string;\n    }\n    return $result;\n\
    }\n\n/* Concatenate array of strings into a single string, with a separator\n\
    >>> concatenate_with_separator(array(), \",\")\n\"\"\n>>> concatenate_with_separator(array(\"\
    a\", \"b\", \"c\"), \",\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /*\n * Concatenate array of strings into a single string, with a separator\n *\
    \ between each string\n * >>> concatenate_with_separator(array(), \",\")\n * \"\
    \"\n * >>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n * \"\
    a,b,c\"\n */", "    $result = \"\";\n    foreach ($strings as $string) {\n   \
    \     $result .= $string;\n    }\n    return $result;\n}\n\n/* Return the sum\
    \ of the numbers in the array\n>>> sum(array(1, 2, 3))\n6\n>>> sum(array(5, 5,\
    \ 5, 5, 5))\n25\n>>> sum(array(10, -10))\n0*/", "\t$result = \"\";\n\tforeach\
    \ ($strings as $string) {\n\t\t$result .= $string;\n\t}\n\treturn $result;\n}\n\
    \n/* Return the number of times that $needle occurs in $haystack\n>>> count_occurrences(\"\
    a\", \"\")\n0\n>>> count_occurrences(\"a\", \"a\")\n1\n>>> count_occurrences(\"\
    a\", \"ba\")\n1\n>>> count_occurrences(\"a\", \"aba\")\n2\n>>> count_occurrences(\"\
    a\", \"baba\")\n2*/", "    $result = \"\";\n    foreach ($strings as $string)\
    \ {\n        $result .= $string;\n    }\n    return $result;\n}\n\n/* Return the\
    \ first element of an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\n\
    null*/", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Return the first element of\
    \ an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\nnull*/", "    $result\
    \ = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/* Concatenate array of strings into a single\
    \ string, separated by a given separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate\
    \ array of strings into a single string with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t\
    $result .= $string;\n\t}\n\treturn $result;\n}\n\n/*\n * Returns the string with\
    \ the first letter capitalized\n * >>> capitalize(\"hello\")\n * \"Hello\"\n *\
    \ >>> capitalize(\"HELLO\")\n * \"HELLO\"\n */", "\t$result = \"\";\n\tforeach\
    \ ($strings as $string) {\n\t\t$result .= $string;\n\t}\n\treturn $result;\n}\n\
    \n/* Return the first element of an array\n>>> first(array(\"a\", \"b\", \"c\"\
    ))\n\"a\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n    \
    \    $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate array\
    \ of strings into a single string with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/*\n * Returns\
    \ the first element of an array.\n *\n * @param array $array\n * @return mixed\n\
    \ */", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate array of strings\
    \ into a single string, with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/* Return the first\
    \ element of an array\n>>> first(array(\"a\", \"b\", \"c\"))\n\"a\"*/", "    $result\
    \ = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/* Concatenate array of strings into a single\
    \ string with a separator\n>>> concatenate_with_separator(array(), \",\")\n\"\"\
    \n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\"a,b,c\"\
    \n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\")\n\"abc\"*/",
  "    $result = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/* Returns the first element of an array\n>>>\
    \ first(array(\"a\", \"b\", \"c\"))\n\"a\"*/", "    $result = \"\";\n    foreach\
    \ ($strings as $string) {\n        $result .= $string;\n    }\n    return $result;\n\
    }\n\n/* Return the sum of all numbers in an array\n>>> sum(array())\n0\n>>> sum(array(1,\
    \ 2, 3))\n6*/", "    $result = \"\";\n    foreach ($strings as $string) {\n  \
    \      $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate array\
    \ of strings into a single string with a separator\n>>> concatenate_with_separator(array(),\
    \ \" \")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    \ \")\n\"a b c\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    \")\n\"abc\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n \
    \       $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate array\
    \ of strings into a single string, with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/* Return the first\
    \ element of an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\nnull*/",
  "    $result = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/* Return the sum of all numbers in an array\n\
    >>> sum(array())\n0\n>>> sum(array(1, 2, 3))\n6*/", "\t$result = \"\";\n\tforeach\
    \ ($strings as $string) {\n\t\t$result .= $string;\n\t}\n\treturn $result;\n}\n\
    \n/* Return the number of times a string appears in an array of strings\n>>> count_occurrences(array(),\
    \ \"a\")\n0\n>>> count_occurrences(array(\"a\", \"b\", \"a\"), \"a\")\n2*/", "\t\
    $result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result .= $string;\n\t\
    }\n\treturn $result;\n}\n\n/* Return the first element of an array\n>>> first(array(\"\
    a\", \"b\", \"c\"))\n\"a\"*/", "    $string = \"\";\n    foreach ($strings as\
    \ $str) {\n        $string .= $str;\n    }\n    return $string;\n}\n\n/* Concatenate\
    \ array of strings into a single string, with a separator\n>>> concatenate_with_separator(array(),\
    \ \".\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    .\")\n\"a.b.c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate\
    \ array of strings into a single string, with a separator\n>>> concatenate_with_separator(array(),\
    \ \".\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    .\")\n\"a.b.c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/*\n * Returns\
    \ a string with the first letter of each word capitalized\n * >>> capitalize(\"\
    hello world\")\n * \"Hello World\"\n * >>> capitalize(\"hello world, i'm a string\"\
    )\n * \"Hello World, I'm A String\"\n */", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /* Concatenate array of strings into a single string with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate\
    \ array of strings into a single string with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    \")\n\"abc\"*/", "  $result = \"\";\n  foreach ($strings as $string) {\n    $result\
    \ .= $string;\n  }\n  return $result;\n}\n\n/* Concatenate array of strings into\
    \ a single string with a separator\n>>> concatenate_with_separator(array(), \"\
    ,\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\
    \"a,b,c\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\")\n\"\
    abc\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/*\n>>> concatenate_with_commas(array())\n\
    \"\"\n>>> concatenate_with_commas(array(\"a\"))\n\"a\"\n>>> concatenate_with_commas(array(\"\
    a\", \"b\", \"c\"))\n\"a, b, and c\"\n*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /* Return the number of times a string appears in an array of strings\n>>> count_occurrences(array(),\
    \ \"a\")\n0\n>>> count_occurrences(array(\"a\", \"b\", \"a\"), \"a\")\n2*/", "\t\
    $result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result .= $string;\n\t\
    }\n\treturn $result;\n}\n\n/* Concatenate array of strings into a single string,\
    \ with a separator\n>>> concatenate_with_separator(array(), \",\")\n\"\"\n>>>\
    \ concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\"a,b,c\"\n>>>\
    \ concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\")\n\"abc\"*/", "\t\
    $result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result .= $string;\n\t\
    }\n\treturn $result;\n}\n\n/* Return a string with the first letter of each word\
    \ capitalized\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    HELLO WORLD\")\n\"Hello World\"*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /* Concatenate array of strings into a single string, with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    \")\n\"abc\"*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result\
    \ .= $string;\n\t}\n\treturn $result;\n}\n\n/* Concatenate array of strings into\
    \ a single string with a separator\n>>> concatenate_with_separator(array(), \"\
    ,\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\
    \"a,b,c\"*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result\
    \ .= $string;\n\t}\n\treturn $result;\n}\n\n/* Concatenate array of strings into\
    \ a single string, with a separator\n>>> concatenate_with_separator(array(), \"\
    ,\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\
    \"a,b,c\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\")\n\"\
    abc\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Return the first element of\
    \ an array\n>>> first(array(\"a\", \"b\", \"c\"))\n\"a\"*/", "    $result = \"\
    \";\n    foreach ($strings as $string) {\n        $result .= $string;\n    }\n\
    \    return $result;\n}\n\n/* Concatenate array of strings into a single string,\
    \ with a separator\n>>> concatenate_with_separator(array(), \",\")\n\"\"\n>>>\
    \ concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\"a,b,c\"*/",
  "    $result = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/* Concatenate array of strings into a single\
    \ string, separated by given separator\n>>> concatenate_with_separator(array(),\
    \ \".\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    .\")\n\"a.b.c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/*\n * Concatenate\
    \ array of strings into a single string with a separator\n * >>> concatenate_with_separator(array(),\
    \ \",\")\n * \"\"\n * >>> concatenate_with_separator(array(\"a\", \"b\", \"c\"\
    ), \",\")\n * \"a,b,c\"\n */", "\t$result = \"\";\n\tforeach ($strings as $string)\
    \ {\n\t\t$result .= $string;\n\t}\n\treturn $result;\n}\n\n/* Return the longest\
    \ string in an array of strings\n>>> longest(array(\"a\", \"ab\", \"abc\"))\n\"\
    abc\"\n>>> longest(array(\"a\", \"ab\", \"abc\", \"abcd\"))\n\"abcd\"\n>>> longest(array(\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\"))\n\"abcde\"*/", "    $result = \"\"\
    ;\n    foreach ($strings as $string) {\n        $result .= $string;\n    }\n \
    \   return $result;\n}\n\n/* Return the first element of an array\n>>> first(array(1,\
    \ 2, 3))\n1\n>>> first(array())\nnull*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /* Return a string with all the characters in reverse order\n>>> reverse(\"abc\"\
    )\n\"cba\"\n>>> reverse(\"\")\n\"\"*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /*\n * Returns a string with all spaces converted to underscores (by default),\
    \ accented\n * characters converted to non-accented characters, and non word characters\
    \ removed.\n */", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/*\n * Return the\
    \ first element of an array\n * >>> first(array(1, 2, 3))\n * 1\n * >>> first(array())\n\
    \ * null\n */", "    $result = \"\";\n    foreach ($strings as $string) {\n  \
    \      $result .= $string;\n    }\n    return $result;\n}\n\n/*\n * Test for concatenate\n\
    \ */\nassert_options(ASSERT_BAIL, 1);\nassert(concatenate(array()) === \"\");\n\
    assert(concatenate(array(\"a\", \"b\", \"c\")) === \"abc\");\n\n/*\n * Test for\
    \ concatenate\n */\nassert_options(ASSERT_BAIL, 1);\nassert(concatenate(array())\
    \ === \"\");\nassert(concatenate(array(\"a\", \"b\", \"c\")) === \"abc\");\n\n\
    /*\n * Test for concatenate\n */\nassert_options(ASSERT_BAIL, 1);\nassert(concatenate(array())\
    \ === \"\");\nassert(concatenate(array(\"a\", \"b\", \"c\")) === \"abc\");\n\n\
    /*\n * Test for concatenate\n */\nassert_options(ASSERT_BAIL, 1);\nassert(concatenate(array())\
    \ === \"\");\nassert(concatenate(array(\"a\", \"b\", \"c\")) === \"abc\");\n\n\
    /*\n * Test for concatenate\n */\nassert_options(ASSERT_BAIL, 1);\nassert(concatenate(array())\
    \ === \"\");\nassert(concatenate(array(\"a\", \"b\", \"c\")) === \"abc\");\n\n\
    /*\n * Test for concatenate\n */\nassert_options(ASSERT_BAIL, 1);\nassert(concatenate(array())\
    \ === \"\");\nassert(concatenate(array(\"a\", \"b\", \"c\")) === \"abc\");\n\n\
    /*\n * Test for concatenate\n */\nassert_options(ASSERT_BAIL, 1);\nassert(concatenate(array())\
    \ === \"\");\nassert(concatenate(array(\"a\", \"b\", \"c\")) === \"abc\");\n\n\
    /*\n * Test for concatenate\n */\nassert_options(ASSERT_BAIL, 1);\nassert(concatenate(array())\
    \ === \"\");\nassert(concatenate(array(\"a\", \"b\", \"", "    $result = \"\"\
    ;\n    foreach ($strings as $string) {\n        $result .= $string;\n    }\n \
    \   return $result;\n}\n\n/* Concatenate array of strings into a single string,\
    \ with a separator\n>>> concatenate_with_separator(array(), \",\")\n\"\"\n>>>\
    \ concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\"a,b,c\"*/",
  "    $result = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/* Return the first element of an array\n>>>\
    \ first(array(1, 2, 3))\n1*/", "\t$result = \"\";\n\tforeach ($strings as $string)\
    \ {\n\t\t$result .= $string;\n\t}\n\treturn $result;\n}\n\n/* Return true if the\
    \ string is empty or contains only whitespace\n>>> is_blank(\"\")\ntrue\n>>> is_blank(\"\
    \ \")\ntrue\n>>> is_blank(\"a\")\nfalse\n>>> is_blank(\"a \")\nfalse*/", "   \
    \ $result = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/*\n * Concatenate array of strings into a single\
    \ string, with a separator\n * >>> concatenate_with_separator(array(), \",\")\n\
    \ * \"\"\n * >>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\"\
    )\n * \"a,b,c\"\n */", "    $result = \"\";\n    foreach ($strings as $string)\
    \ {\n        $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate\
    \ array of strings into a single string with a separator\n>>> concatenate_separated(array(),\
    \ \",\")\n\"\"\n>>> concatenate_separated(array(\"a\", \"b\", \"c\"), \",\")\n\
    \"a,b,c\"\n>>> concatenate_separated(array(\"a\", \"b\", \"c\"), \"\")\n\"abc\"\
    */", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Return the number of times\
    \ that $needle appears in $haystack\n>>> count_occurrences(\"\", \"\")\n0\n>>>\
    \ count_occurrences(\"\", \"a\")\n0\n>>> count_occurrences(\"a\", \"\")\n0\n>>>\
    \ count_occurrences(\"a\", \"a\")\n1\n>>> count_occurrences(\"a\", \"b\")\n0\n\
    >>> count_occurrences(\"aa\", \"a\")\n2\n>>> count_occurrences(\"aaa\", \"a\"\
    )\n3\n>>> count_occurrences(\"aaa\", \"aa\")\n2\n>>> count_occurrences(\"abc\"\
    , \"a\")\n1\n>>> count_occurrences(\"abc\", \"b\")\n1\n>>> count_occurrences(\"\
    abc\", \"c\")\n1\n>>> count_occurrences(\"abc\", \"d\")\n0\n>>> count_occurrences(\"\
    abc\", \"ab\")\n1\n>>> count_occurrences(\"abc\", \"bc\")\n1\n>>> count_occurrences(\"\
    abc\", \"abc\")\n1\n>>> count_occurrences(\"aaa\", \"aa\")\n2\n>>> count_occurrences(\"\
    aaa\", \"aaa\")\n1\n>>> count_occurrences(\"aaaa\", \"aa\")\n3\n>>> count_occurrences(\"\
    aaaa\", \"aaa\")\n2\n>>> count_occurrences(\"aaaa\", \"aaaa\")\n1\n>>> count_occurrences(\"\
    aaaaa\", \"aa\")\n4\n>>> count_occurrences(\"aaaaa\", \"aaa\")\n3\n>>> count_occurrences(\"\
    aaaaa\", \"aaaa\")\n2\n>>> count_occurrences(\"aaaaa\", \"aaaaa\")\n1\n>>> count_occurrences(\"\
    abcabc\", \"a\")\n2\n>>> count_occurrences(\"abcabc\", \"b\")\n2\n>>> count_occurrences(\"\
    abcabc\", \"c\")\n2\n>>> count_occurrences(\"abcabc\", \"d\")\n0\n>>> count_occurrences(\"\
    abcabc\", \"ab\")\n1\n>>> count_occurrences(\"abcabc\", \"bc\")\n", "    $result\
    \ = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/*\n * Concatenate array of strings into a single\
    \ string with a separator\n * >>> concatenate_with_separator(array(), \",\")\n\
    \ * \"\"\n * >>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\"\
    )\n * \"a,b,c\"\n */", "    $result = \"\";\n    foreach ($strings as $string)\
    \ {\n        $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate\
    \ array of strings into a single string, separated by a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t\
    $result .= $string;\n\t}\n\treturn $result;\n}\n\n/* Concatenate array of strings\
    \ into a single string with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t\
    $result .= $string;\n\t}\n\treturn $result;\n}\n\n/* Check if a string is a palindrome\n\
    >>> isPalindrome(\"\")\ntrue\n>>> isPalindrome(\"a\")\ntrue\n>>> isPalindrome(\"\
    ab\")\nfalse\n>>> isPalindrome(\"aba\")\ntrue\n>>> isPalindrome(\"abba\")\ntrue\n\
    >>> isPalindrome(\"abcdcba\")\ntrue*/", "\t$result = \"\";\n\tforeach ($strings\
    \ as $string) {\n\t\t$result .= $string;\n\t}\n\treturn $result;\n}\n\n/* Concatenate\
    \ array of strings into a single string, separated by a delimiter\n>>> concatenate_delimited(array(),\
    \ \",\")\n\"\"\n>>> concatenate_delimited(array(\"a\", \"b\", \"c\"), \",\")\n\
    \"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n    \
    \    $result .= $string;\n    }\n    return $result;\n}\n\n/* Return the longest\
    \ string in an array of strings\n>>> longest_string(array(\"a\", \"ab\", \"abc\"\
    ))\n\"abc\"\n>>> longest_string(array(\"a\", \"ab\", \"abc\", \"abcd\"))\n\"abcd\"\
    \n>>> longest_string(array(\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"))\n\"abcde\"\
    */", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate array of strings\
    \ into a single string with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/*\n>>> concatenate_with_commas(array())\n\
    \"\"\n>>> concatenate_with_commas(array(\"a\"))\n\"a\"\n>>> concatenate_with_commas(array(\"\
    a\", \"b\", \"c\"))\n\"a, b, and c\"\n*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /*\n>>> concatenate(array(\"a\", \"b\", \"c\"))\n\"abc\"\n*/", "    $result =\
    \ \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n  \
    \  }\n    return $result;\n}\n\n/* Concatenate array of strings into a single\
    \ string with a separator\n>>> concatenate_with_separator(array(), \",\")\n\"\"\
    \n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\"a,b,c\"\
    */", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result .= $string;\n\
    \t}\n\treturn $result;\n}\n\n/* Return the number of times that the specified\
    \ character appears in the specified string\n>>> countChar(\"\", \"a\")\n0\n>>>\
    \ countChar(\"a\", \"a\")\n1\n>>> countChar(\"a\", \"b\")\n0\n>>> countChar(\"\
    ab\", \"a\")\n1\n>>> countChar(\"ab\", \"b\")\n1\n>>> countChar(\"aba\", \"a\"\
    )\n2\n>>> countChar(\"aba\", \"b\")\n1*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /* Concatenate array of strings into a single string with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate\
    \ array of strings into a single string with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    \")\n\"abc\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n \
    \       $result .= $string;\n    }\n    return $result;\n}\n\n/* Returns the longest\
    \ string in the array\n>>> longest(array(\"a\", \"ab\", \"abc\"))\n\"abc\"\n>>>\
    \ longest(array(\"a\", \"ab\", \"abc\", \"abcd\"))\n\"abcd\"\n>>> longest(array(\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\"))\n\"abcde\"*/", "    $result = \"\"\
    ;\n    foreach ($strings as $string) {\n        $result .= $string;\n    }\n \
    \   return $result;\n}\n\n/* Concatenate array of strings into a single string,\
    \ with a separator between each string\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/* Return the number\
    \ of times the needle appears in the haystack\n>>> count_substring(\"\", \"\"\
    )\n0\n>>> count_substring(\"\", \"a\")\n0\n>>> count_substring(\"a\", \"\")\n\
    0\n>>> count_substring(\"a\", \"a\")\n1\n>>> count_substring(\"a\", \"b\")\n0\n\
    >>> count_substring(\"aa\", \"a\")\n2\n>>> count_substring(\"aaa\", \"a\")\n3\n\
    >>> count_substring(\"aaa\", \"aa\")\n2\n>>> count_substring(\"abc\", \"a\")\n\
    1\n>>> count_substring(\"abc\", \"b\")\n1\n>>> count_substring(\"abc\", \"c\"\
    )\n1\n>>> count_substring(\"abc\", \"ab\")\n1\n>>> count_substring(\"abc\", \"\
    bc\")\n1\n>>> count_substring(\"abc\", \"abc\")\n1\n>>> count_substring(\"aaa\"\
    , \"aa\")\n2\n>>> count_substring(\"aaa\", \"aaa\")\n1\n>>> count_substring(\"\
    aaaa\", \"aa\")\n3\n>>> count_substring(\"aaaa\", \"aaa\")\n2\n>>> count_substring(\"\
    aaaa\", \"aaaa\")\n1\n>>> count_substring(\"ababab\", \"ab\")\n3\n>>> count_substring(\"\
    ababab\", \"ba\")\n2\n>>> count_substring(\"ababab\", \"abab\")\n1\n>>> count_substring(\"\
    ababab\", \"ababab\")\n1\n>>> count_substring(\"ababab\", \"abababa\")\n0\n>>>\
    \ count_substring(\"ababab\", \"abababab\")\n0\n>>> count_substring(\"ababab\"\
    , \"ababababab\")\n0\n>>> count_substring(\"ababab\", \"abababababab\")\n0\n>>>\
    \ count_substring(\"ababab\", \"ababababababab\")\n0\n>>> count_substring(\"ababab\"\
    , \"abababababababab\")\n0\n>>> count_substring(\"", "\t$result = \"\";\n\tforeach\
    \ ($strings as $string) {\n\t\t$result .= $string;\n\t}\n\treturn $result;\n}\n\
    \n/* Returns the first element of an array\n>>> first(array(\"a\", \"b\", \"c\"\
    ))\n\"a\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n    \
    \    $result .= $string;\n    }\n    return $result;\n}\n\n/* Returns the length\
    \ of the longest string in an array\n>>> longest_string(array(\"a\", \"ab\", \"\
    abc\"))\n3\n>>> longest_string(array(\"a\", \"ab\", \"abc\", \"abcd\"))\n4\n>>>\
    \ longest_string(array(\"a\", \"b\", \"c\"))\n1*/", "    $result = \"\";\n   \
    \ foreach ($strings as $string) {\n        $result .= $string;\n    }\n    return\
    \ $result;\n}\n\n/* Concatenate array of strings into a single string with a separator\n\
    >>> concatenate_with_separator(array(), \",\")\n\"\"\n>>> concatenate_with_separator(array(\"\
    a\", \"b\", \"c\"), \",\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /* Return the first element of an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\n\
    null*/", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Returns the number of times\
    \ the string $needle appears in the string $haystack\n>>> count_occurrences(\"\
    a\", \"\")\n0\n>>> count_occurrences(\"a\", \"a\")\n1\n>>> count_occurrences(\"\
    a\", \"ba\")\n1\n>>> count_occurrences(\"a\", \"aba\")\n2\n>>> count_occurrences(\"\
    a\", \"baba\")\n2\n>>> count_occurrences(\"a\", \"bababa\")\n3\n>>> count_occurrences(\"\
    a\", \"babababa\")\n4\n>>> count_occurrences(\"a\", \"bababababa\")\n5\n>>> count_occurrences(\"\
    a\", \"babababababa\")\n6\n>>> count_occurrences(\"a\", \"bababababababa\")\n\
    7\n>>> count_occurrences(\"a\", \"babababababababa\")\n8\n>>> count_occurrences(\"\
    a\", \"bababababababababa\")\n9\n>>> count_occurrences(\"a\", \"babababababababababa\"\
    )\n10\n>>> count_occurrences(\"a\", \"bababababababababababa\")\n11\n>>> count_occurrences(\"\
    a\", \"babababababababababababa\")\n12\n>>> count_occurrences(\"a\", \"bababababababababababababa\"\
    )\n13\n>>> count_occurrences(\"a\", \"babababababababababababababa\")\n14\n>>>\
    \ count_occurrences(\"a\", \"bababababababababababababababa\")\n15\n>>> count_occurrences(\"\
    a\", \"babababababababababababababababa\")\n16\n>>> count_occurrences(\"a\", \"\
    bababababababababababababababababa\")\n17\n>>> count_occurrences(\"a\", \"babababababab",
  "    $result = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/* Return the first element of an array\n>>>\
    \ first(array(1, 2, 3))\n1\n>>> first(array())\nnull*/", "\t$result = \"\";\n\t\
    foreach ($strings as $string) {\n\t\t$result .= $string;\n\t}\n\treturn $result;\n\
    }\n\n/* Returns the number of times the given string appears in the given array\
    \ of strings\n>>> count_occurrences(\"a\", array(\"a\", \"b\", \"a\"))\n2\n>>>\
    \ count_occurrences(\"b\", array(\"a\", \"b\", \"a\"))\n1\n>>> count_occurrences(\"\
    c\", array(\"a\", \"b\", \"a\"))\n0*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /* Returns the first element of an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\n\
    null*/", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Return the number of times\
    \ that $substring appears in $string\n>>> substring_count(\"\", \"\")\n0\n>>>\
    \ substring_count(\"\", \"a\")\n0\n>>> substring_count(\"a\", \"\")\n0\n>>> substring_count(\"\
    a\", \"a\")\n1\n>>> substring_count(\"aa\", \"a\")\n2\n>>> substring_count(\"\
    aaa\", \"a\")\n3\n>>> substring_count(\"aaa\", \"aa\")\n1\n>>> substring_count(\"\
    aaa\", \"aaa\")\n1\n>>> substring_count(\"aaaa\", \"aaa\")\n1\n>>> substring_count(\"\
    aaaaa\", \"aaa\")\n2\n>>> substring_count(\"aaaaa\", \"aaaa\")\n1\n>>> substring_count(\"\
    aaaaa\", \"aaaaa\")\n1\n>>> substring_count(\"aaaaaa\", \"aaaaa\")\n1\n>>> substring_count(\"\
    aaaaaa\", \"aaaaaa\")\n1\n>>> substring_count(\"aaaaaaa\", \"aaaaaa\")\n1\n>>>\
    \ substring_count(\"aaaaaaa\", \"aaaaaaa\")\n1\n>>> substring_count(\"aaaaaaaa\"\
    , \"aaaaaaa\")\n1\n>>> substring_count(\"aaaaaaaa\", \"aaaaaaaa\")\n1\n>>> substring_count(\"\
    aaaaaaaaa\", \"aaaaaaa\")\n1\n>>> substring_count(\"aaaaaaaaa\", \"aaaaaaaa\"\
    )\n1\n>>> substring_count(\"aaaaaaaaa\", \"aaaaaaaaa\")\n1\n>>> substring_count(\"\
    aaaaaaaaaa\", \"aaaaaaaaa\")\n1\n>>> substring_count(\"aaaaaaaaaa\", \"aaaaaaaaaa\"\
    )\n1\n>>> substring_count(\"aaaaaaaaaaa\", \"aaaaaaaaa\")\n1\n>>> substring_count(\"\
    aaaaaaaaaaa\", \"aaaaaaaaaa\")\n1\n>>> substring_count(\"aaaaaaaaaaa\", \"aaaaaaaaaaa\"\
    )\n1\n>>> substring_count(\"aaaaaaaaaaaa\", \"aaaaaaaaa\")\n1\n>>> substring_count(\"\
    aaaaaaaaaaaa\", \"aaaaaaaaaa\")\n1\n>>> substring_count(\"aaaaaaaaaaaa\", \"aaaaaaaaaaa\"\
    )", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result .= $string;\n\
    \t}\n\treturn $result;\n}\n\n/* Return the first element of an array\n>>> first(array())\n\
    null\n>>> first(array(\"a\", \"b\", \"c\"))\n\"a\"*/", "    $result = \"\";\n\
    \    foreach ($strings as $string) {\n        $result .= $string;\n    }\n   \
    \ return $result;\n}\n\n/* Return the number of times that $substring occurs in\
    \ $string\n>>> count_substrings(\"abc\", \"a\")\n1\n>>> count_substrings(\"abc\"\
    , \"b\")\n1\n>>> count_substrings(\"abc\", \"c\")\n1\n>>> count_substrings(\"\
    abc\", \"d\")\n0\n>>> count_substrings(\"abcabc\", \"a\")\n2\n>>> count_substrings(\"\
    abcabc\", \"b\")\n2\n>>> count_substrings(\"abcabc\", \"c\")\n2\n>>> count_substrings(\"\
    abcabc\", \"d\")\n0\n>>> count_substrings(\"abcabc\", \"ab\")\n1\n>>> count_substrings(\"\
    abcabc\", \"bc\")\n1\n>>> count_substrings(\"abcabc\", \"abc\")\n1\n>>> count_substrings(\"\
    abcabc\", \"bca\")\n0\n>>> count_substrings(\"abcabc\", \"\")\n6\n>>> count_substrings(\"\
    \", \"a\")\n0\n>>> count_substrings(\"\", \"\")\n0*/", "    $result = \"\";\n\
    \    foreach ($strings as $string) {\n        $result .= $string;\n    }\n   \
    \ return $result;\n}\n\n/* Concatenate array of strings into a single string,\
    \ with a separator\n>>> concatenate_with_separator(array(), \".\")\n\"\"\n>>>\
    \ concatenate_with_separator(array(\"a\", \"b\", \"c\"), \".\")\n\"a.b.c\"*/",
  "    $result = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/* Return the first element of an array\n>>>\
    \ first(array(1, 2, 3))\n1\n>>> first(array())\nnull*/", "    $result = \"\";\n\
    \    foreach ($strings as $string) {\n        $result .= $string;\n    }\n   \
    \ return $result;\n}\n\n/* Concatenate array of strings into a single string,\
    \ separated by a given separator\n>>> concatenate_with_separator(array(), \",\"\
    )\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\"\
    a,b,c\"*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result\
    \ .= $string;\n\t}\n\treturn $result;\n}\n\n/* Returns true if $string is a palindrome,\
    \ false otherwise\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"a\")\ntrue\n\
    >>> is_palindrome(\"aa\")\ntrue\n>>> is_palindrome(\"ab\")\nfalse\n>>> is_palindrome(\"\
    aba\")\ntrue\n>>> is_palindrome(\"abba\")\ntrue\n>>> is_palindrome(\"abcd\")\n\
    false\n>>> is_palindrome(\"abcba\")\ntrue*/", "    $result = \"\";\n    foreach\
    \ ($strings as $string) {\n        $result .= $string;\n    }\n    return $result;\n\
    }\n\n/* Concatenate array of strings into a single string, separated by a given\
    \ separator\n>>> concatenate_with_separator(array(), \",\")\n\"\"\n>>> concatenate_with_separator(array(\"\
    a\", \"b\", \"c\"), \",\")\n\"a,b,c\"\n>>> concatenate_with_separator(array(\"\
    a\", \"b\", \"c\"), \"\")\n\"abc\"*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /* Find the longest string in an array of strings\n>>> longest(array(\"a\", \"\
    ab\", \"abc\"))\n\"abc\"\n>>> longest(array(\"a\", \"ab\", \"abc\", \"abcd\"))\n\
    \"abcd\"\n>>> longest(array(\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"))\n\"\
    abcde\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n      \
    \  $result .= $string;\n    }\n    return $result;\n}\n\n/* Count the number of\
    \ times a substring occurs in a string\n>>> countSubstring(\"a\", \"a\")\n1\n\
    >>> countSubstring(\"a\", \"b\")\n0\n>>> countSubstring(\"a\", \"aa\")\n1\n>>>\
    \ countSubstring(\"aa\", \"a\")\n2\n>>> countSubstring(\"aa\", \"aa\")\n1\n>>>\
    \ countSubstring(\"aaa\", \"aa\")\n2\n>>> countSubstring(\"aaa\", \"aaa\")\n1\n\
    >>> countSubstring(\"aaaa\", \"aa\")\n3\n>>> countSubstring(\"aaaa\", \"aaa\"\
    )\n2\n>>> countSubstring(\"aaaaa\", \"aa\")\n4\n>>> countSubstring(\"aaaaa\",\
    \ \"aaa\")\n3\n>>> countSubstring(\"aaaaaa\", \"aa\")\n5\n>>> countSubstring(\"\
    aaaaaa\", \"aaa\")\n4\n>>> countSubstring(\"aaaaaaa\", \"aa\")\n6\n>>> countSubstring(\"\
    aaaaaaa\", \"aaa\")\n5\n>>> countSubstring(\"aaaaaaaa\", \"aa\")\n7\n>>> countSubstring(\"\
    aaaaaaaa\", \"aaa\")\n6\n>>> countSubstring(\"aaaaaaaaa\", \"aa\")\n8\n>>> countSubstring(\"\
    aaaaaaaaa\", \"aaa\")\n7\n>>> countSubstring(\"aaaaaaaaaa\", \"aa\")\n9\n>>> countSubstring(\"\
    aaaaaaaaaa\", \"aaa\")\n8\n>>> countSubstring(\"aaaaaaaaaaa\", \"aa\")\n10\n>>>\
    \ countSubstring(\"aaaaaaaaaaa\", \"aaa\")\n9\n>>> countSubstring(\"aaaaaaaaaaaa\"\
    , \"aa\")\n11\n>>> countSubstring(\"aaaaaaaaaaaa\", \"aaa\")\n10\n>>> countSubstring(\"\
    aaaaaaaaaaaaa\", \"aa\")\n12\n>>> countSubstring(\"aaaaaaaaaaaaa\", \"aaa\")\n\
    11\n>>> countSubstring(\"aaaaaaaaaaaaaa\", \"aa\")\n13\n>>> countSubstring(\"\
    aaaaaaaaaaaaaa\", \"aaa\")\n12\n>>> countSubstring(\"aaaaaaaaaaaaaaa\", \"aa\"\
    )\n14\n>>> countSubstring(\"aaaaaaaaaaaaaaa\", \"aaa\")\n13\n>>> countSubstring(\"\
    aaaaaaaaaaaaaaaa\", \"aa\")", "    $result = \"\";\n    foreach ($strings as $string)\
    \ {\n        $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate\
    \ array of strings into a single string, separated by a given separator\n>>> concatenate_separated(array(),\
    \ \",\")\n\"\"\n>>> concatenate_separated(array(\"a\", \"b\", \"c\"), \",\")\n\
    \"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n    \
    \    $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate array\
    \ of strings into a single string, with a separator\n>>> concatenate_with_separator(array(),\
    \ \".\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    .\")\n\"a.b.c\"*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t\
    $result .= $string;\n\t}\n\treturn $result;\n}\n\n/* Find the longest string in\
    \ an array of strings\n>>> longest(array(\"a\", \"ab\", \"abc\"))\n\"abc\"*/",
  "    $result = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/* Concatenate array of strings into a single\
    \ string with a separator\n>>> concatenate_with_separator(array(), \",\")\n\"\"\
    \n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\"a,b,c\"\
    \n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\")\n\"abc\"*/",
  "    $result = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/* Return the number of times that $substring\
    \ appears in $string\n>>> countSubstring(\"banana\", \"a\")\n3\n>>> countSubstring(\"\
    banana\", \"b\")\n1\n>>> countSubstring(\"banana\", \"n\")\n2\n>>> countSubstring(\"\
    banana\", \"x\")\n0\n>>> countSubstring(\"banana\", \"\")\n6*/", "\t$result =\
    \ \"\";\n\tforeach ($strings as $string) {\n\t\t$result .= $string;\n\t}\n\treturn\
    \ $result;\n}\n\n/* Return the first element of an array\n>>> first(array(\"a\"\
    , \"b\", \"c\"))\n\"a\"*/", "\t$result = \"\";\n\tforeach ($strings as $str) {\n\
    \t\t$result .= $str;\n\t}\n\treturn $result;\n}\n\n/* Split a string into an array\
    \ of strings\n>>> split(\"\")\narray()\n>>> split(\"abc\")\narray(\"a\", \"b\"\
    , \"c\")*/", "    $result = \"\";\n    foreach ($strings as $string) {\n     \
    \   $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate array\
    \ of strings into a single string, with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate\
    \ array of strings into a single string with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/* Return the first\
    \ element of an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\nnull*/",
  "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result .= $string;\n\
    \t}\n\treturn $result;\n}\n\n/* Return the first element of an array\n>>> first(array(1,\
    \ 2, 3))\n1\n>>> first(array())\nnull*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /* Return the first element of an array\n>>> first(array(\"a\", \"b\", \"c\"))\n\
    \"a\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate array of strings\
    \ into a single string, with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    \")\n\"abc\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n \
    \       $result .= $string;\n    }\n    return $result;\n}\n\n/* Return the sum\
    \ of the numbers in the array\n>>> sum(array(1, 2, 3))\n6\n>>> sum(array(5, 5,\
    \ 5, 5, 5))\n25\n>>> sum(array(10, -10))\n0*/", "    $result = \"\";\n    foreach\
    \ ($strings as $string) {\n        $result .= $string;\n    }\n    return $result;\n\
    }\n\n/* Count the number of times a substring appears in a string\n>>> countSubstring(\"\
    \", \"\")\n0\n>>> countSubstring(\"\", \"a\")\n0\n>>> countSubstring(\"a\", \"\
    \")\n0\n>>> countSubstring(\"a\", \"a\")\n1\n>>> countSubstring(\"a\", \"b\")\n\
    0\n>>> countSubstring(\"aa\", \"a\")\n2\n>>> countSubstring(\"aa\", \"b\")\n0\n\
    >>> countSubstring(\"aaa\", \"a\")\n3\n>>> countSubstring(\"aaa\", \"b\")\n0\n\
    >>> countSubstring(\"aaaa\", \"a\")\n4\n>>> countSubstring(\"aaaa\", \"b\")\n\
    0\n>>> countSubstring(\"aaaaa\", \"a\")\n5\n>>> countSubstring(\"aaaaa\", \"b\"\
    )\n0\n>>> countSubstring(\"aaaaaa\", \"a\")\n6\n>>> countSubstring(\"aaaaaa\"\
    , \"b\")\n0\n>>> countSubstring(\"aaaaaaa\", \"a\")\n7\n>>> countSubstring(\"\
    aaaaaaa\", \"b\")\n0\n>>> countSubstring(\"aaaaaaaa\", \"a\")\n8\n>>> countSubstring(\"\
    aaaaaaaa\", \"b\")\n0\n>>> countSubstring(\"aaaaaaaaa\", \"a\")\n9\n>>> countSubstring(\"\
    aaaaaaaaa\", \"b\")\n0\n>>> countSubstring(\"aaaaaaaaaa\", \"a\")\n10\n>>> countSubstring(\"\
    aaaaaaaaaa\", \"b\")\n0\n>>> countSubstring(\"aaaaaaaaaaa\", \"a\")\n11\n>>> countSubstring(\"\
    aaaaaaaaaaa\", \"b\")\n0\n>>> countSubstring(\"aaaaaaaaaaaa\", \"a\")\n12\n>>>\
    \ countSubstring(\"aaaaaaaaaaaa\", \"b\")\n0\n>>> countSubstring(\"aaaaaaaaaaaaa\"\
    , \"a\")\n13\n>>> countSubstring(\"aaaaaaaaaaaaa\", \"b\")\n0\n>>> countSubstring(\"\
    aaaaaaaaaaaaaa\", \"a\")\n14\n>>> countSubstring(\"aaaaaaaaaaaaaa\", \"b\")\n\
    0\n>>> countSubstring(\"aaaaaaaaaaaaaaa\", \"a\")\n15\n>>> countSubstring(\"aaaaaaaa",
  "    $result = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/*\n * Concatenate array of strings into a single\
    \ string, with a separator between each string\n * >>> concatenate_with_separator(array(),\
    \ \",\")\n * \"\"\n * >>> concatenate_with_separator(array(\"a\", \"b\", \"c\"\
    ), \",\")\n * \"a,b,c\"\n */", "    $result = \"\";\n    foreach ($strings as\
    \ $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n/*\
    \ Return the first element of an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\n\
    null*/", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Return the first element of\
    \ an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\nnull*/", "    $result\
    \ = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/* Concatenate array of strings into a single\
    \ string, separated by a given separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t\
    $result .= $string;\n\t}\n\treturn $result;\n}\n\n/* Return the first element\
    \ of an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array(\"a\", \"b\", \"\
    c\"))\n\"a\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n \
    \       $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate array\
    \ of strings into a single string, with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/* Return the number\
    \ of times $substring appears in $string\n>>> countSubstring(\"banana\", \"a\"\
    )\n3\n>>> countSubstring(\"banana\", \"b\")\n1\n>>> countSubstring(\"banana\"\
    , \"n\")\n2*/", "    $result = \"\";\n    foreach ($strings as $string) {\n  \
    \      $result .= $string;\n    }\n    return $result;\n}\n\n/* Count the number\
    \ of times a substring appears in a string\n>>> countSubstring(\"\", \"\")\n0\n\
    >>> countSubstring(\"\", \"a\")\n0\n>>> countSubstring(\"a\", \"\")\n0\n>>> countSubstring(\"\
    a\", \"a\")\n1\n>>> countSubstring(\"a\", \"b\")\n0\n>>> countSubstring(\"aa\"\
    , \"a\")\n2\n>>> countSubstring(\"aaa\", \"a\")\n3\n>>> countSubstring(\"aaa\"\
    , \"aa\")\n2\n>>> countSubstring(\"aaa\", \"aaa\")\n1\n>>> countSubstring(\"aaaa\"\
    , \"aa\")\n3\n>>> countSubstring(\"aaaa\", \"aaa\")\n2\n>>> countSubstring(\"\
    aaaaa\", \"aaa\")\n3\n>>> countSubstring(\"aaaaa\", \"aaaa\")\n2\n>>> countSubstring(\"\
    aaaaaa\", \"aaa\")\n4\n>>> countSubstring(\"aaaaaa\", \"aaaa\")\n3\n>>> countSubstring(\"\
    aaaaaaa\", \"aaa\")\n5\n>>> countSubstring(\"aaaaaaa\", \"aaaa\")\n4\n>>> countSubstring(\"\
    aaaaaaaa\", \"aaa\")\n6\n>>> countSubstring(\"aaaaaaaa\", \"aaaa\")\n5\n>>> countSubstring(\"\
    aaaaaaaaa\", \"aaa\")\n7\n>>> countSubstring(\"aaaaaaaaa\", \"aaaa\")\n6\n>>>\
    \ countSubstring(\"aaaaaaaaaa\", \"aaa\")\n8\n>>> countSubstring(\"aaaaaaaaaa\"\
    , \"aaaa\")\n7\n>>> countSubstring(\"aaaaaaaaaaa\", \"aaa\")\n9\n>>> countSubstring(\"\
    aaaaaaaaaaa\", \"aaaa\")\n8\n>>> countSubstring(\"aaaaaaaaaaaa\", \"aaa\")\n10\n\
    >>> countSubstring(\"aaaaaaaaaaaa\", \"aaaa\")\n9\n>>> countSubstring(\"aaaaaaaaaaaaa\"\
    , \"aaa\")\n11\n>>> countSubstring(\"aaaaaaaaaaaaa\", \"aaaa\")\n10\n>>> countSubstring(\"\
    aaaaaaaaaaaaaa\", \"aaa\")\n12\n>>> countSubstring(\"aaaaaaaaaaaaaa\", \"aaaa\"\
    )\n11\n>>> countSubstring(\"aaaaaaaaaaaaaaa\", \"aaa\")\n13\n>>> countSubstring(\"\
    aaaaaaaa", "    $result = \"\";\n    foreach ($strings as $string) {\n       \
    \ $result .= $string;\n    }\n    return $result;\n}\n\n/*\n * Count the number\
    \ of times a substring appears in a string\n * >>> countSubstring(\"abc\", \"\
    a\")\n * 1\n * >>> countSubstring(\"abc\", \"b\")\n * 1\n * >>> countSubstring(\"\
    abc\", \"c\")\n * 1\n * >>> countSubstring(\"abc\", \"d\")\n * 0\n * >>> countSubstring(\"\
    abc\", \"ab\")\n * 1\n * >>> countSubstring(\"abc\", \"bc\")\n * 1\n * >>> countSubstring(\"\
    abc\", \"abc\")\n * 1\n * >>> countSubstring(\"aaa\", \"a\")\n * 3\n * >>> countSubstring(\"\
    aaa\", \"aa\")\n * 2\n * >>> countSubstring(\"aaa\", \"aaa\")\n * 1\n * >>> countSubstring(\"\
    aaa\", \"aaaa\")\n * 0\n * >>> countSubstring(\"aaa\", \"\")\n * 4\n * >>> countSubstring(\"\
    \", \"\")\n * 1\n * >>> countSubstring(\"\", \"a\")\n * 0\n */", "    $result\
    \ = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/* Concatenate array of strings into a single\
    \ string with a separator\n>>> concatenate_with_separator(array(), \",\")\n\"\"\
    \n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\"a,b,c\"\
    */", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Return the first element of\
    \ an array\n>>> first(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> first(array())\n\
    null*/", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/*\n * Test code\n */\n\nassert_options(ASSERT_BAIL,\
    \ 1);\n\n$tests = array(\n    array(),\n    array(\"a\", \"b\", \"c\"),\n);\n\n\
    $results = array(\n    \"\",\n    \"abc\",\n);\n\n$failed = false;\nforeach ($tests\
    \ as $index => $test) {\n    $result = concatenate($test);\n    if ($result !==\
    \ $results[$index]) {\n        print \"Test $index failed: got $result, expected\
    \ {$results[$index]}\\n\";\n        $failed = true;\n    }\n}\n\nif ($failed)\
    \ {\n    print \"Tests failed.\\n\";\n    exit(1);\n}\n\nprint \"Tests passed.\\\
    n\";", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result .= $string;\n\
    \t}\n\treturn $result;\n}\n\n/*\n * Concatenate array of strings into a single\
    \ string\n * with a given separator\n * >>> concatenate_with_separator(array(),\
    \ \" \")\n * \"\"\n * >>> concatenate_with_separator(array(\"a\", \"b\", \"c\"\
    ), \" \")\n * \"a b c\"\n */", "\t$result = \"\";\n\tforeach ($strings as $string)\
    \ {\n\t\t$result .= $string;\n\t}\n\treturn $result;\n}\n\n/* Get the first element\
    \ of an array\n>>> first(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> first(array())\n\
    null*/", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Return the first element of\
    \ an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\nnull*/", "    $result\
    \ = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/* Return the sum of all the numbers in an array\n\
    >>> sum(array())\n0\n>>> sum(array(1, 2, 3))\n6*/", "    $result = \"\";\n   \
    \ foreach ($strings as $string) {\n        $result .= $string;\n    }\n    return\
    \ $result;\n}\n\n/* Concatenate array of strings into a single string, separated\
    \ by a delimiter\n>>> concatenate_delimited(array(), \" \")\n\"\"\n>>> concatenate_delimited(array(\"\
    a\", \"b\", \"c\"), \" \")\n\"a b c\"*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /* Return the sum of the numbers in the array\n>>> sum(array(1, 2, 3))\n6\n>>>\
    \ sum(array())\n0*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\
    \t$result .= $string;\n\t}\n\treturn $result;\n}\n\n/* Return an array of strings\
    \ from a single string\n>>> split(\"\")\narray()\n>>> split(\"abc\")\narray(\"\
    a\", \"b\", \"c\")*/", "    $result = \"\";\n    foreach ($strings as $string)\
    \ {\n        $result .= $string;\n    }\n    return $result;\n}\n\n/* Return the\
    \ first element of an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\n\
    null*/", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Return the first element of\
    \ an array\n>>> first(array(1, 2, 3))\n1*/", "\t$result = \"\";\n\tforeach ($strings\
    \ as $string) {\n\t\t$result .= $string;\n\t}\n\treturn $result;\n}\n\n/* Return\
    \ the first element of an array\n>>> first(array(\"a\", \"b\", \"c\"))\n\"a\"\
    */", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate array of strings\
    \ into a single string, with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/* Find the first\
    \ non-repeated character in a string\n>>> firstNonRepeatedCharacter(\"aabbcc\"\
    )\n\"d\"\n>>> firstNonRepeatedCharacter(\"aabbcad\")\n\"d\"*/", "\t$result = \"\
    \";\n\tforeach ($strings as $string) {\n\t\t$result .= $string;\n\t}\n\treturn\
    \ $result;\n}\n\n/* Concatenate array of strings into a single string with a separator\n\
    >>> concatenate_with_separator(array(), \" \")\n\"\"\n>>> concatenate_with_separator(array(\"\
    a\", \"b\", \"c\"), \" \")\n\"a b c\"*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /* Return the first element of an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\n\
    null*/", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Return the length of a string\n\
    >>> length(\"\")\n0\n>>> length(\"a\")\n1\n>>> length(\"ab\")\n2*/", "\t$result\
    \ = \"\";\n\tforeach ($strings as $string) {\n\t\t$result .= $string;\n\t}\n\t\
    return $result;\n}\n\n/* Return the number of times the string $needle occurs\
    \ in the string $haystack\n>>> strCount(\"\", \"\")\n0\n>>> strCount(\"a\", \"\
    \")\n0\n>>> strCount(\"\", \"a\")\n0\n>>> strCount(\"a\", \"a\")\n1\n>>> strCount(\"\
    a\", \"aa\")\n1\n>>> strCount(\"aa\", \"a\")\n2\n>>> strCount(\"aa\", \"aa\")\n\
    1\n>>> strCount(\"aaa\", \"aa\")\n2\n>>> strCount(\"aaa\", \"aaa\")\n1\n>>> strCount(\"\
    aaaa\", \"aa\")\n3\n>>> strCount(\"aaaa\", \"aaa\")\n2\n>>> strCount(\"aaaaa\"\
    , \"aa\")\n4\n>>> strCount(\"aaaaa\", \"aaa\")\n3\n>>> strCount(\"aaaaaa\", \"\
    aa\")\n5\n>>> strCount(\"aaaaaa\", \"aaa\")\n4\n>>> strCount(\"aaaaaaa\", \"aa\"\
    )\n6\n>>> strCount(\"aaaaaaa\", \"aaa\")\n5\n>>> strCount(\"aaaaaaaa\", \"aa\"\
    )\n7\n>>> strCount(\"aaaaaaaa\", \"aaa\")\n6\n>>> strCount(\"aaaaaaaaa\", \"aa\"\
    )\n8\n>>> strCount(\"aaaaaaaaa\", \"aaa\")\n7\n>>> strCount(\"aaaaaaaaaa\", \"\
    aa\")\n9\n>>> strCount(\"aaaaaaaaaa\", \"aaa\")\n8\n>>> strCount(\"aaaaaaaaaaa\"\
    , \"aa\")\n10\n>>> strCount(\"aaaaaaaaaaa\", \"aaa\")\n9\n>>> strCount(\"aaaaaaaaaaaa\"\
    , \"aa\")\n11\n>>> strCount(\"aaaaaaaaaaaa\", \"aaa\")\n10\n>>> strCount(\"aaaaaaaaaaaaa\"\
    , \"aa\")\n12\n>>> strCount(\"aaaaaaaaaaaaa\", \"aaa\")\n11\n>>> strCount(\"aaaaaaaaaaaaaa\"\
    , \"aa\")\n13\n>>> strCount(\"aaaaaaaaaaaaaa\", \"aaa\")\n12\n>>> strCount(\"\
    aaaaaaaaaaaaaaa\", \"aa\")\n14\n>>> strCount(\"aaaaaaaaaaaaaaa\", \"aaa\")\n13\n\
    >>> strCount(\"aaaaaaaaaaaaaaaa\", \"aa\")\n15\n>>> str", "    $result = \"\"\
    ;\n    foreach ($strings as $string) {\n        $result .= $string;\n    }\n \
    \   return $result;\n}\n\n/* Concatenate array of strings into a single string\
    \ with a separator\n>>> concatenate_with_separator(array(), \"|\")\n\"\"\n>>>\
    \ concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"|\")\n\"a|b|c\"*/",
  "    $result = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/*\n * Returns the first element of an array\n\
    \ * @param array $array\n * @return mixed\n */", "    $result = \"\";\n    foreach\
    \ ($strings as $string) {\n        $result .= $string;\n    }\n    return $result;\n\
    }\n\n/* Return the sum of all the numbers in the array\n>>> sum(array())\n0\n\
    >>> sum(array(1, 2, 3))\n6*/", "\t$result = \"\";\n\tforeach ($strings as $string)\
    \ {\n\t\t$result .= $string;\n\t}\n\treturn $result;\n}\n\n/* Check if a string\
    \ is a palindrome\n>>> isPalindrome(\"\")\ntrue\n>>> isPalindrome(\"a\")\ntrue\n\
    >>> isPalindrome(\"aa\")\ntrue\n>>> isPalindrome(\"ab\")\nfalse\n>>> isPalindrome(\"\
    aba\")\ntrue\n>>> isPalindrome(\"abba\")\ntrue\n>>> isPalindrome(\"abab\")\nfalse\n\
    >>> isPalindrome(\"ababa\")\ntrue\n>>> isPalindrome(\"ababba\")\nfalse\n>>> isPalindrome(\"\
    ababbaba\")\ntrue*/", "    $result = \"\";\n    foreach ($strings as $string)\
    \ {\n        $result .= $string;\n    }\n    return $result;\n}\n\n/*\n>>> concatenate(array(\"\
    a\", \"b\", \"c\"))\n\"abc\"\n*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /* Concatenate array of strings into a single string with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    \")\n\"abc\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n \
    \       $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate array\
    \ of strings into a single string, with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "    $string = \"\";\n    foreach ($strings as $str) {\n \
    \       $string .= $str;\n    }\n    return $string;\n}\n\n/* Return the first\
    \ element of an array\n>>> first(array(1, 2, 3))\n1*/", "\t$result = \"\";\n\t\
    foreach ($strings as $string) {\n\t\t$result .= $string;\n\t}\n\treturn $result;\n\
    }\n\n/*\n * Returns a string with all occurrences of $search replaced with $replace\n\
    \ * >>> replace(\"abcabc\", \"a\", \"x\")\n * \"xbcxbc\"\n */", "    $result =\
    \ \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n  \
    \  }\n    return $result;\n}\n\n/*\n * Returns the number of times a given string\
    \ appears in an array of strings\n * >>> count_occurrences(array(\"a\", \"b\"\
    , \"a\"), \"a\")\n * 2\n * >>> count_occurrences(array(\"a\", \"b\", \"a\"), \"\
    b\")\n * 1\n * >>> count_occurrences(array(\"a\", \"b\", \"a\"), \"c\")\n * 0\n\
    \ */", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Find the first index of a substring\
    \ in a string\n>>> find(\"\", \"\")\n0\n>>> find(\"\", \"abc\")\n0\n>>> find(\"\
    a\", \"abc\")\n0\n>>> find(\"b\", \"abc\")\n1\n>>> find(\"c\", \"abc\")\n2\n>>>\
    \ find(\"d\", \"abc\")\n-1*/", "\t$result = \"\";\n\tforeach ($strings as $string)\
    \ {\n\t\t$result .= $string;\n\t}\n\treturn $result;\n}\n\n/*\n * Concatenate\
    \ array of strings into a single string, with a separator\n * >>> concatenate_with_separator(array(),\
    \ \",\")\n * \"\"\n * >>> concatenate_with_separator(array(\"a\", \"b\", \"c\"\
    ), \",\")\n * \"a,b,c\"\n */", "\t$result = \"\";\n\tforeach ($strings as $string)\
    \ {\n\t\t$result .= $string;\n\t}\n\treturn $result;\n}\n\n/* Returns a string\
    \ with the given number of spaces\n>>> indent(0)\n\"\"\n>>> indent(1)\n\" \"\n\
    >>> indent(2)\n\"  \"*/", "    $result = \"\";\n    foreach ($strings as $string)\
    \ {\n        $result .= $string;\n    }\n    return $result;\n}\n\n/* Count the\
    \ number of times a substring appears in a string\n>>> countSubstring(\"banana\"\
    , \"a\")\n3\n>>> countSubstring(\"banana\", \"b\")\n1\n>>> countSubstring(\"banana\"\
    , \"n\")\n2\n>>> countSubstring(\"banana\", \"na\")\n2\n>>> countSubstring(\"\
    banana\", \"ban\")\n1\n>>> countSubstring(\"banana\", \"banana\")\n1\n>>> countSubstring(\"\
    banana\", \"an\")\n2\n>>> countSubstring(\"banana\", \"ana\")\n2\n>>> countSubstring(\"\
    banana\", \"x\")\n0*/", "    $result = \"\";\n    foreach ($strings as $string)\
    \ {\n        $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate\
    \ array of strings into a single string with a separator\n>>> concatenate_with_separator(array(),\
    \ \".\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    .\")\n\"a.b.c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate\
    \ array of strings into a single string with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t\
    $result .= $string;\n\t}\n\treturn $result;\n}\n\n/* Concatenate array of strings\
    \ into a single string with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/* Return the first\
    \ element of an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\nnull*/",
  "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result .= $string;\n\
    \t}\n\treturn $result;\n}\n\n/* Return the first element of an array\n>>> first(array())\n\
    null\n>>> first(array(\"a\", \"b\", \"c\"))\n\"a\"*/", "\t$result = \"\";\n\t\
    foreach ($strings as $string) {\n\t\t$result .= $string;\n\t}\n\treturn $result;\n\
    }\n\n/* Concatenate array of strings into a single string, with a separator\n\
    >>> concatenate_with_separator(array(), \",\")\n\"\"\n>>> concatenate_with_separator(array(\"\
    a\", \"b\", \"c\"), \",\")\n\"a,b,c\"*/", "\t$result = \"\";\n\tforeach ($strings\
    \ as $string) {\n\t\t$result .= $string;\n\t}\n\treturn $result;\n}\n\n/* Return\
    \ the first element of an array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\n\
    null*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result .=\
    \ $string;\n\t}\n\treturn $result;\n}\n\n/* Concatenate array of strings into\
    \ a single string with a separator\n>>> concatenate_with_separator(array(), \"\
    ,\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\
    \"a,b,c\"*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result\
    \ .= $string;\n\t}\n\treturn $result;\n}\n\n/* Return the first element of an\
    \ array\n>>> first(array(1, 2, 3))\n1\n>>> first(array())\nnull*/", "    $result\
    \ = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/* Concatenate array of strings into a single\
    \ string, with a separator\n>>> concatenate_with_separator(array(), \".\")\n\"\
    \"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \".\")\n\"a.b.c\"\
    */", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Return a string with all characters\
    \ in upper case\n>>> uppercase(\"abc\")\n\"ABC\"\n>>> uppercase(\"ABC\")\n\"ABC\"\
    */", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate array of strings\
    \ into a single string, with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/* Find the longest\
    \ string in an array of strings\n>>> longest(array(\"a\", \"ab\", \"abc\"))\n\"\
    abc\"\n>>> longest(array(\"a\", \"ab\", \"abc\", \"abcd\"))\n\"abcd\"\n>>> longest(array(\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\"))\n\"abcde\"*/", "\t$result = \"\";\n\
    \tforeach ($strings as $string) {\n\t\t$result .= $string;\n\t}\n\treturn $result;\n\
    }\n\n/* Concatenate array of strings into a single string with a separator\n>>>\
    \ concatenate_with_separator(array(), \",\")\n\"\"\n>>> concatenate_with_separator(array(\"\
    a\", \"b\", \"c\"), \",\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /* Find the longest string in an array of strings\n>>> longest(array(\"a\", \"\
    ab\", \"abc\"))\n\"abc\"\n>>> longest(array(\"a\", \"ab\", \"abc\", \"abcd\"))\n\
    \"abcd\"\n>>> longest(array(\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"))\n\"\
    abcde\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n      \
    \  $result .= $string;\n    }\n    return $result;\n}\n\n/* Return a string with\
    \ the first letter of each word capitalized\n>>> capitalize(\"hello world\")\n\
    \"Hello World\"\n>>> capitalize(\"HELLO WORLD\")\n\"Hello World\"\n>>> capitalize(\"\
    hello WORLD\")\n\"Hello World\"\n>>> capitalize(\"HELLO world\")\n\"Hello World\"\
    */", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate array of strings\
    \ into a single string, with a given separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/* Return the first\
    \ element of an array\n>>> first(array(\"a\", \"b\", \"c\"))\n\"a\"*/", "    $result\
    \ = \"\";\n    foreach ($strings as $string) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}\n\n/* Count the number of times a substring occurs\
    \ in a string\n>>> countSubstring(\"a\", \"a\")\n1\n>>> countSubstring(\"a\",\
    \ \"b\")\n0\n>>> countSubstring(\"a\", \"aa\")\n0\n>>> countSubstring(\"aa\",\
    \ \"a\")\n2\n>>> countSubstring(\"aaa\", \"a\")\n3\n>>> countSubstring(\"aaa\"\
    , \"aa\")\n2\n>>> countSubstring(\"aaa\", \"aaa\")\n1\n>>> countSubstring(\"aaa\"\
    , \"aaaa\")\n0\n>>> countSubstring(\"aaa\", \"\")\n4\n>>> countSubstring(\"\"\
    , \"a\")\n0\n>>> countSubstring(\"\", \"\")\n1*/", "    $result = \"\";\n    foreach\
    \ ($strings as $string) {\n        $result .= $string;\n    }\n    return $result;\n\
    }\n\n/* Concatenate array of strings into a single string, with a separator\n\
    >>> concatenate_with_separator(array(), \",\")\n\"\"\n>>> concatenate_with_separator(array(\"\
    a\", \"b\", \"c\"), \",\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings\
    \ as $string) {\n        $result .= $string;\n    }\n    return $result;\n}\n\n\
    /* Concatenate array of strings into a single string, separated by a delimiter\n\
    >>> concatenate_delim(\"\", array(\"a\", \"b\", \"c\"))\n\"abc\"\n>>> concatenate_delim(\"\
    \ \", array(\"a\", \"b\", \"c\"))\n\"a b c\"\n>>> concatenate_delim(\"\", array())\n\
    \"\"*/", "\t$result = \"\";\n\tforeach ($strings as $string) {\n\t\t$result .=\
    \ $string;\n\t}\n\treturn $result;\n}\n\n/* Concatenate array of strings into\
    \ a single string, with a separator\n>>> concatenate_with_separator(array(), \"\
    ,\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \",\")\n\
    \"a,b,c\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\")\n\"\
    abc\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/* Return the first element of\
    \ an array\n>>> first(array(\"a\", \"b\", \"c\"))\n\"a\"\n>>> first(array())\n\
    null*/", "    $result = \"\";\n    foreach ($strings as $string) {\n        $result\
    \ .= $string;\n    }\n    return $result;\n}\n\n/*\n * Returns a string with all\
    \ spaces converted to underscores (by default), accented\n * characters converted\
    \ to non-accented characters, and non word characters removed.\n *\n * @param\
    \ string $string the string you want to slug\n * @param string $replacement will\
    \ replace keys in map\n * @return string\n */", "    $result = \"\";\n    foreach\
    \ ($strings as $string) {\n        $result .= $string;\n    }\n    return $result;\n\
    }\n\n/* Return the first element of an array\n>>> first(array(1, 2, 3))\n1\n>>>\
    \ first(array())\nnull*/", "    $result = \"\";\n    foreach ($strings as $string)\
    \ {\n        $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate\
    \ array of strings into a single string with a separator\n>>> concatenate_with_separator(array(),\
    \ \",\")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    ,\")\n\"a,b,c\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n\
    \        $result .= $string;\n    }\n    return $result;\n}\n\n/* Concatenate\
    \ array of strings into a single string, separated by a given separator\n>>> concatenate_with_separator(array(),\
    \ \" \")\n\"\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    \ \")\n\"a b c\"\n>>> concatenate_with_separator(array(\"a\", \"b\", \"c\"), \"\
    \")\n\"abc\"*/", "    $result = \"\";\n    foreach ($strings as $string) {\n \
    \       $result .= $string;\n    }\n    return $result;\n}\n\n/* Return the number\
    \ of times a string appears in an array of strings\n>>> count_in_array(\"a\",\
    \ array(\"a\", \"b\", \"c\"))\n1\n>>> count_in_array(\"a\", array(\"a\", \"a\"\
    , \"a\"))\n3\n>>> count_in_array(\"a\", array(\"b\", \"c\", \"d\"))\n0*/"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
