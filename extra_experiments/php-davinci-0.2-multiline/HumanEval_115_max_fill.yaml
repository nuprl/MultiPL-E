name: HumanEval_115_max_fill
language: php
prompt: "<?php\n/* You are given a rectangular grid of wells. Each row represents\
  \ a single well,\nand each 1 in a row represents a single unit of water.\nEach well\
  \ has a corresponding bucket that can be used to extract water from it, \nand all\
  \ buckets have the same capacity.\nYour task is to use the buckets to empty the\
  \ wells.\nOutput the number of times you need to lower the buckets.\nExample 1:\n\
  >>> max_fill(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1)\n\
  6\nExample 2:\n>>> max_fill(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1,\
  \ 1, 1, 1), array(0, 1, 1, 1)), 2)\n5\nExample 3:\n>>> max_fill(array(array(0, 0,\
  \ 0), array(0, 0, 0)), 5)\n0\nConstraints:\n* all wells have the same length\n*\
  \ 1 <= grid.length <= 10^2\n* 1 <= grid[:,1].length <= 10^2\n* grid[i][j] -> 0 |\
  \ 1\n* 1 <= capacity <= 10*/\nfunction max_fill($grid, $capacity) {\n"
tests: "function candidate(...$args) {\n    return max_fill(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
  \ array(1, 1, 1, 1)), 1) !== 6) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0,\
  \ 1, 1, 1)), 2) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(0,\
  \ 0, 0), array(0, 0, 0)), 5) !== 0) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(array(1, 1, 1, 1), array(1, 1, 1, 1)), 2) !== 4) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 1, 1, 1),\
  \ array(1, 1, 1, 1)), 9) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                if ($i > 0 && $grid[$i -\
    \ 1][$j] == 1) {\n                    $count--;\n                    $grid[$i\
    \ - 1][$j] = 0;\n                }\n                if ($j > 0 && $grid[$i][$j\
    \ - 1] == 1) {\n                    $count--;\n                    $grid[$i][$j\
    \ - 1] = 0;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n\
    $capacity = 1;\necho max_fill($grid, $capacity);", "    $count = 0;\n    $max\
    \ = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n    for ($i = 0;\
    \ $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n            if\
    \ ($grid[$i][$j] == 1) {\n                $count++;\n            }\n        }\n\
    \        if ($count > $max) {\n            $max = $count;\n        }\n       \
    \ $count = 0;\n    }\n    return $max * $capacity;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);", "\t$max = 0;\n\t$fill = 0;\n\t$row = 0;\n\t$col = 0;\n\t$max_row\
    \ = count($grid);\n\t$max_col = count($grid[0]);\n\twhile ($row < $max_row) {\n\
    \t\t$col = 0;\n\t\twhile ($col < $max_col) {\n\t\t\tif ($grid[$row][$col] == 1)\
    \ {\n\t\t\t\t$fill++;\n\t\t\t\tif ($fill > $max) {\n\t\t\t\t\t$max = $fill;\n\t\
    \t\t\t}\n\t\t\t}\n\t\t\t$col++;\n\t\t}\n\t\t$row++;\n\t}\n\treturn $max * $capacity;\n\
    }\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n\
    $capacity = 1;\necho max_fill($grid, $capacity);\necho \"\\n\";\n$grid = array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity\
    \ = 2;\necho max_fill($grid, $capacity);\necho \"\\n\";\n$grid = array(array(0,\
    \ 0, 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid, $capacity);\n\
    echo \"\\n\";", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $max_row = 0;\n    $max_col = 0;\n    for ($i = 0; $i < $rows; $i++) {\n\
    \        for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1)\
    \ {\n                $count++;\n                $max_row = max($max_row, $i);\n\
    \                $max_col = max($max_col, $j);\n            }\n        }\n   \
    \ }\n    $max_row++;\n    $max_col++;\n    $count_row = 0;\n    $count_col = 0;\n\
    \    for ($i = 0; $i < $max_row; $i++) {\n        $count_row += $capacity;\n \
    \   }\n    for ($i = 0; $i < $max_col; $i++) {\n        $count_col += $capacity;\n\
    \    }\n    return min($count_row, $count_col);\n}\n\n$grid = array(array(0, 0,\
    \ 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);", "    $rows = count($grid);\n    $cols = count($grid[0]);\n   \
    \ $total = 0;\n    $fill = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            $total += $grid[$i][$j];\n       \
    \ }\n    }\n    if ($total <= $capacity) {\n        return 0;\n    }\n    $fill\
    \ = $capacity;\n    $count = 0;\n    while ($fill < $total) {\n        $count++;\n\
    \        $fill += $capacity;\n    }\n    return $count;\n}\n", "\t$max = 0;\n\t\
    $count = 0;\n\t$len = count($grid);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\t$max\
    \ = max($max, max($grid[$i]));\n\t}\n\tfor ($i = 0; $i < $max; $i++) {\n\t\tfor\
    \ ($j = 0; $j < $len; $j++) {\n\t\t\tfor ($k = 0; $k < count($grid[$j]); $k++)\
    \ {\n\t\t\t\tif ($grid[$j][$k] > 0) {\n\t\t\t\t\t$grid[$j][$k]--;\n\t\t\t\t\t\
    $count++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}\n", "    $count\
    \ = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i =\
    \ 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n         \
    \   if ($grid[$i][$j] == 1) {\n                $grid[$i][$j] = 0;\n          \
    \      $count++;\n                $capacity--;\n                if ($capacity\
    \ == 0) {\n                    $capacity = $count;\n                    $count\
    \ = 0;\n                }\n            }\n        }\n    }\n    return $capacity;\n\
    }\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n\
    $capacity = 1;\necho max_fill($grid, $capacity);", "\t$count = 0;\n\t$max = 0;\n\
    \t$grid_size = count($grid);\n\t$row_size = count($grid[0]);\n\tfor ($i = 0; $i\
    \ < $grid_size; $i++) {\n\t\tfor ($j = 0; $j < $row_size; $j++) {\n\t\t\tif ($grid[$i][$j]\
    \ == 1) {\n\t\t\t\t$max = max($max, $j);\n\t\t\t}\n\t\t}\n\t\t$count += $max +\
    \ 1;\n\t\t$max = 0;\n\t}\n\treturn $count * $capacity;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);\n\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1,\
    \ 1, 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid, $capacity);\n\
    \n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity);", "\t$max_fill = 0;\n\t$row_count = count($grid);\n\t$column_count\
    \ = count($grid[0]);\n\tfor ($i = 0; $i < $row_count; $i++) {\n\t\tfor ($j = 0;\
    \ $j < $column_count; $j++) {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$max_fill\
    \ += $capacity;\n\t\t\t\t$grid[$i][$j] = 0;\n\t\t\t\t$grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n\t\t\t}\n\t\t}\n\t}\n\treturn $max_fill;\n}", "    $row\
    \ = count($grid);\n    $col = count($grid[0]);\n    $count = 0;\n    for ($i =\
    \ 0; $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n           \
    \ if ($grid[$i][$j] == 1) {\n                $count++;\n                $grid[$i][$j]\
    \ = 0;\n                $capacity--;\n                if ($capacity == 0) {\n\
    \                    $count += max_fill($grid, $capacity);\n                }\n\
    \            }\n        }\n    }\n    return $count;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);", "\t$count = 0;\n\t$grid = array_map('array_sum', $grid);\n\twhile(max($grid)\
    \ >= $capacity) {\n\t\t$count++;\n\t\t$grid = array_map(function($x) use ($capacity)\
    \ {\n\t\t\treturn $x - $capacity;\n\t\t}, $grid);\n\t}\n\treturn $count;\n}\n",
  "\t$count = 0;\n\t$row_count = count($grid);\n\t$col_count = count($grid[0]);\n\t\
    $max_row = 0;\n\t$max_col = 0;\n\t$max_value = 0;\n\tfor ($i = 0; $i < $row_count;\
    \ $i++) {\n\t\tfor ($j = 0; $j < $col_count; $j++) {\n\t\t\tif ($grid[$i][$j]\
    \ > $max_value) {\n\t\t\t\t$max_value = $grid[$i][$j];\n\t\t\t\t$max_row = $i;\n\
    \t\t\t\t$max_col = $j;\n\t\t\t}\n\t\t}\n\t}\n\t$count = $max_value;\n\t$grid[$max_row][$max_col]\
    \ = 0;\n\t$max_value = 0;\n\twhile ($max_value < $capacity) {\n\t\tfor ($i = 0;\
    \ $i < $row_count; $i++) {\n\t\t\tfor ($j = 0; $j < $col_count; $j++) {\n\t\t\t\
    \tif ($grid[$i][$j] > $max_value) {\n\t\t\t\t\t$max_value = $grid[$i][$j];\n\t\
    \t\t\t\t$max_row = $i;\n\t\t\t\t\t$max_col = $j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\
    \t$count += $max_value;\n\t\t$grid[$max_row][$max_col] = 0;\n\t\t$max_value =\
    \ 0;\n\t}\n\treturn $count;\n}\necho max_fill(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1);\necho max_fill(array(array(0, 0, 1, 1), array(0,\
    \ 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2);\necho max_fill(array(array(0,\
    \ 0, 0), array", "    $count = 0;\n    $grid = array_map(function($row) use ($capacity)\
    \ {\n        $row = array_map(function($cell) use ($capacity) {\n            return\
    \ $cell * $capacity;\n        }, $row);\n        return $row;\n    }, $grid);\n\
    \    $max = array_map(function($row) {\n        return max($row);\n    }, $grid);\n\
    \    $max = max($max);\n    while($max > 0) {\n        $grid = array_map(function($row)\
    \ use ($max) {\n            $row = array_map(function($cell) use ($max) {\n  \
    \              return $cell - $max;\n            }, $row);\n            return\
    \ $row;\n        }, $grid);\n        $max = array_map(function($row) {\n     \
    \       return max($row);\n        }, $grid);\n        $max = max($max);\n   \
    \     $count++;\n    }\n    return $count;\n}\n\n$grid = array(\n    array(0,\
    \ 0, 1, 0),\n    array(0, 1, 0, 0),\n    array(1, 1, 1, 1)\n);\n$capacity = 1;\n\
    echo max_fill($grid, $capacity) . PHP_EOL;\n\n$grid = array(\n    array(0, 0,\
    \ 1, 1),\n    array(0, 0, 0, 0),\n    array(1, 1, 1, 1),\n    array(0, 1, 1, 1)\n\
    );\n$capacity = 2;\necho max_fill($grid, $capacity) . PHP_EOL;\n\n$grid = array(\n\
    \    array(0, 0, 0),\n    array(0, 0, 0)\n);\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity) . PHP_EOL;", "    $count = 0;\n    $rows = count($grid);\n    $cols\
    \ = count($grid[0]);\n    $max_row = $rows - 1;\n    $max_col = $cols - 1;\n \
    \   $row = 0;\n    $col = 0;\n    $dir = 0;\n    $dirs = array(array(0, 1), array(1,\
    \ 0), array(0, -1), array(-1, 0));\n    while ($row >= 0 && $row <= $max_row &&\
    \ $col >= 0 && $col <= $max_col) {\n        if ($grid[$row][$col] > 0) {\n   \
    \         $grid[$row][$col] -= $capacity;\n            $count++;\n        }\n\
    \        if ($row === 0 && $col === 0) {\n            $dir = 0;\n        } elseif\
    \ ($row === 0 && $col === $max_col) {\n            $dir = 1;\n        } elseif\
    \ ($row === $max_row && $col === $max_col) {\n            $dir = 2;\n        }\
    \ elseif ($row === $max_row && $col === 0) {\n            $dir = 3;\n        }\n\
    \        $row += $dirs[$dir][0];\n        $col += $dirs[$dir][1];\n    }\n   \
    \ return $count;\n}\n", "    $count = 0;\n    $grid = array_reverse($grid);\n\
    \    $max = max(array_map('max', $grid));\n    while ($max > 0) {\n        foreach\
    \ ($grid as $key => $row) {\n            if ($row[0] > 0) {\n                $grid[$key][0]\
    \ = $row[0] - $capacity;\n                $count++;\n            }\n         \
    \   array_shift($row);\n            $grid[$key] = $row;\n        }\n        $max\
    \ = max(array_map('max', $grid));\n    }\n    return $count;\n}\n\n$grid = array(\n\
    \    array(0, 0, 1, 0),\n    array(0, 1, 0, 0),\n    array(1, 1, 1, 1)\n);\necho\
    \ max_fill($grid, 1);\necho \"\\n\";\n$grid = array(\n    array(0, 0, 1, 1),\n\
    \    array(0, 0, 0, 0),\n    array(1, 1, 1, 1),\n    array(0, 1, 1, 1)\n);\necho\
    \ max_fill($grid, 2);\necho \"\\n\";\n$grid = array(\n    array(0, 0, 0),\n  \
    \  array(0, 0, 0)\n);\necho max_fill($grid, 5);\necho \"\\n\";", "\t$count = 0;\n\
    \t$grid_length = count($grid);\n\t$grid_width = count($grid[0]);\n\t$grid_size\
    \ = $grid_length * $grid_width;\n\t$grid_copy = $grid;\n\t$grid_copy_length =\
    \ count($grid_copy);\n\t$grid_copy_width = count($grid_copy[0]);\n\t$grid_copy_size\
    \ = $grid_copy_length * $grid_copy_width;\n\t$grid_copy_sum = 0;\n\tfor ($i =\
    \ 0; $i < $grid_copy_length; $i++) {\n\t\tfor ($j = 0; $j < $grid_copy_width;\
    \ $j++) {\n\t\t\t$grid_copy_sum += $grid_copy[$i][$j];\n\t\t}\n\t}\n\twhile ($grid_copy_sum\
    \ > 0) {\n\t\t$count++;\n\t\tfor ($i = 0; $i < $grid_copy_length; $i++) {\n\t\t\
    \tfor ($j = 0; $j < $grid_copy_width; $j++) {\n\t\t\t\tif ($grid_copy[$i][$j]\
    \ > 0) {\n\t\t\t\t\t$grid_copy[$i][$j] -= $capacity;\n\t\t\t\t\tif ($grid_copy[$i][$j]\
    \ < 0) {\n\t\t\t\t\t\t$grid_copy[$i][$j] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t\t$grid_copy_sum = 0;\n\t\tfor ($i = 0; $i < $grid_copy_length; $i++)\
    \ {\n\t\t\tfor ($j = 0; $j < $grid_copy_width; $j++) {\n\t\t\t\t$grid_copy_sum\
    \ += $grid_copy[$i][$j];\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}\necho max_fill(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1", "    $result = 0;\n   \
    \ $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i = 0; $i < $rows;\
    \ $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $result += $capacity;\n                $grid[$i][$j]\
    \ = 0;\n                $grid = fill_neighbours($grid, $i, $j, $capacity);\n \
    \           }\n        }\n    }\n    return $result;\n}\n", "\t$count = 0;\n\t\
    $max = 0;\n\t$row = count($grid);\n\t$col = count($grid[0]);\n\tfor ($i = 0; $i\
    \ < $row; $i++) {\n\t\tfor ($j = 0; $j < $col; $j++) {\n\t\t\tif ($grid[$i][$j]\
    \ == 1) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\t\tif ($count > $max) {\n\t\t\t\
    $max = $count;\n\t\t}\n\t\t$count = 0;\n\t}\n\treturn $max * $capacity;\n}\n\n\
    $grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity\
    \ = 1;\necho max_fill($grid, $capacity);\necho \"\\n\";\n$grid = array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity\
    \ = 2;\necho max_fill($grid, $capacity);\necho \"\\n\";\n$grid = array(array(0,\
    \ 0, 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid, $capacity);\n\
    echo \"\\n\";", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $wells = [];\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0;\
    \ $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n               \
    \ $wells[] = [$i, $j];\n            }\n        }\n    }\n    $wells_count = count($wells);\n\
    \    for ($i = 0; $i < $wells_count; $i++) {\n        $row = $wells[$i][0];\n\
    \        $col = $wells[$i][1];\n        $grid[$row][$col] = 0;\n        $count++;\n\
    \        $capacity--;\n        if ($capacity == 0) {\n            $count++;\n\
    \            $capacity = $capacity + $cols;\n        }\n    }\n    return $count;\n\
    }\n\n$grid = [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n];\n$capacity\
    \ = 1;\necho max_fill($grid, $capacity);", "\t$total = 0;\n\t$rows = count($grid);\n\
    \t$cols = count($grid[0]);\n\tfor ($i = 0; $i < $rows; $i++) {\n\t\tfor ($j =\
    \ 0; $j < $cols; $j++) {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$total += $capacity;\n\
    \t\t\t\t$grid[$i][$j] = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn $total;\n}", "    $count\
    \ = 0;\n    foreach ($grid as $row) {\n        $count += count_fill($row, $capacity);\n\
    \    }\n    return $count;\n}\n", "    $count = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $max_row = 0;\n    $max_col = 0;\n    for ($i\
    \ = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n       \
    \     if ($grid[$i][$j] == 1) {\n                $max_row = max($max_row, $i);\n\
    \                $max_col = max($max_col, $j);\n            }\n        }\n   \
    \ }\n    for ($i = 0; $i <= $max_row; $i++) {\n        for ($j = 0; $j <= $max_col;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n\
    \            }\n        }\n    }\n    return $count;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);", "    $times = 0;\n    $row_count = count($grid);\n    $col_count\
    \ = count($grid[0]);\n    $row_max = array_fill(0, $row_count, 0);\n    $col_max\
    \ = array_fill(0, $col_count, 0);\n    for ($i = 0; $i < $row_count; $i++) {\n\
    \        for ($j = 0; $j < $col_count; $j++) {\n            $row_max[$i] = max($row_max[$i],\
    \ $grid[$i][$j]);\n            $col_max[$j] = max($col_max[$j], $grid[$i][$j]);\n\
    \        }\n    }\n    for ($i = 0; $i < $row_count; $i++) {\n        for ($j\
    \ = 0; $j < $col_count; $j++) {\n            $times += min($row_max[$i], $col_max[$j])\
    \ - $grid[$i][$j];\n        }\n    }\n    return $times * $capacity;\n}\n\n/*",
  "\t$count = 0;\n\t$row = count($grid);\n\t$col = count($grid[0]);\n\t$bucket = array_fill(0,\
    \ $col, 0);\n\tfor ($i = 0; $i < $row; $i++) {\n\t\tfor ($j = 0; $j < $col; $j++)\
    \ {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$bucket[$j]++;\n\t\t\t}\n\t\t}\n\
    \t\t$count += fill($bucket, $capacity);\n\t}\n\treturn $count;\n}", "    $num_rows\
    \ = count($grid);\n    $num_cols = count($grid[0]);\n    $num_buckets = 0;\n \
    \   $num_wells = 0;\n    $num_filled_wells = 0;\n    for ($row = 0; $row < $num_rows;\
    \ $row++) {\n        for ($col = 0; $col < $num_cols; $col++) {\n            if\
    \ ($grid[$row][$col] == 1) {\n                $num_wells++;\n            }\n \
    \       }\n    }\n    while ($num_filled_wells < $num_wells) {\n        $num_buckets++;\n\
    \        $num_filled_wells = 0;\n        for ($row = 0; $row < $num_rows; $row++)\
    \ {\n            for ($col = 0; $col < $num_cols; $col++) {\n                if\
    \ ($grid[$row][$col] == 1) {\n                    $grid[$row][$col] = 0;\n   \
    \                 $num_filled_wells++;\n                    if ($num_filled_wells\
    \ == $num_wells) {\n                        return $num_buckets;\n           \
    \         }\n                    $num_filled_wells += fill_neighbors($grid, $row,\
    \ $col, $capacity - 1);\n                    if ($num_filled_wells == $num_wells)\
    \ {\n                        return $num_buckets;\n                    }\n   \
    \             }\n            }\n        }\n    }\n    return $num_buckets;\n}",
  "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    $max\
    \ = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count++;\n\
    \            }\n        }\n        $max = max($max, $count);\n        $count =\
    \ 0;\n    }\n    return $max * $capacity;\n}\n\n$grid = array(array(0, 0, 1, 0),\
    \ array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                if ($i > 0 && $grid[$i -\
    \ 1][$j] == 1) {\n                    $grid[$i - 1][$j] = 0;\n               \
    \ }\n                if ($j > 0 && $grid[$i][$j - 1] == 1) {\n               \
    \     $grid[$i][$j - 1] = 0;\n                }\n            }\n        }\n  \
    \  }\n    return $count;\n}\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);", "\t\
    $count = 0;\n\t$max = 0;\n\t$max_row = 0;\n\t$max_col = 0;\n\tfor ($i = 0; $i\
    \ < count($grid); $i++) {\n\t\tfor ($j = 0; $j < count($grid[$i]); $j++) {\n\t\
    \t\tif ($grid[$i][$j] > $max) {\n\t\t\t\t$max = $grid[$i][$j];\n\t\t\t\t$max_row\
    \ = $i;\n\t\t\t\t$max_col = $j;\n\t\t\t}\n\t\t}\n\t}\n\tfor ($i = 0; $i < count($grid);\
    \ $i++) {\n\t\tfor ($j = 0; $j < count($grid[$i]); $j++) {\n\t\t\tif ($grid[$i][$j]\
    \ == 1) {\n\t\t\t\t$count += $capacity;\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n\
    }\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n\
    $capacity = 1;\necho max_fill($grid, $capacity);", "    $count = 0;\n    $grid_length\
    \ = count($grid);\n    $grid_width = count($grid[0]);\n    for ($i = 0; $i < $grid_length;\
    \ $i++) {\n        for ($j = 0; $j < $grid_width; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $grid[$i][$j] = 0;\n                $count++;\n   \
    \             $grid = fill($grid, $capacity, $i, $j);\n            }\n       \
    \ }\n    }\n    return $count;\n}", "    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $count = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j\
    \ < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count++;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill($grid, $i, $j,\
    \ $capacity);\n            }\n        }\n    }\n    return $count;\n}", "    $count\
    \ = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n    $max = 0;\n\
    \    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $max = max($max, $j);\n\
    \            }\n        }\n    }\n    for ($i = 0; $i < $row; $i++) {\n      \
    \  for ($j = 0; $j < $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n  \
    \              $count += $capacity;\n            }\n            if ($j == $max)\
    \ {\n                $count += $capacity;\n            }\n        }\n    }\n \
    \   return $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);\necho \"\\n\";\n\
    $grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0,\
    \ 1, 1, 1));\n$capacity = 2;\necho max_fill($grid, $capacity);\necho \"\\n\";\n\
    $grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity);\necho \"\\n\";", "    $fill = 0;\n    $rows = count($grid);\n  \
    \  $cols = count($grid[0]);\n    $buckets = array_fill(0, $rows, $capacity);\n\
    \    $filled = array_fill(0, $rows, 0);\n    $empty = array_fill(0, $rows, 0);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $filled[$i]++;\n \
    \           } else {\n                $empty[$i]++;\n            }\n        }\n\
    \    }\n    for ($i = 0; $i < $rows; $i++) {\n        $fill += $filled[$i];\n\
    \        $buckets[$i] -= $filled[$i];\n        if ($buckets[$i] < 0) {\n     \
    \       $fill += abs($buckets[$i]);\n            $buckets[$i] = 0;\n        }\n\
    \        if ($i < $rows - 1) {\n            $buckets[$i + 1] += $buckets[$i];\n\
    \            if ($buckets[$i + 1] > $empty[$i + 1]) {\n                $buckets[$i\
    \ + 1] = $empty[$i + 1];\n            }\n        }\n    }\n    return $fill;\n\
    }", "    $counter = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n\
    \    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $counter++;\n        \
    \        $grid[$i][$j] = 0;\n                $capacity--;\n                if\
    \ ($capacity == 0) {\n                    return $counter;\n                }\n\
    \            }\n        }\n    }\n    return $counter;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);", "    $rows = count($grid);\n    $cols = count($grid[0]);\n   \
    \ $total = 0;\n    $fill = 0;\n    $times = 0;\n    for ($i = 0; $i < $rows; $i++)\
    \ {\n        for ($j = 0; $j < $cols; $j++) {\n            $total += $grid[$i][$j];\n\
    \        }\n    }\n    while ($fill < $total) {\n        $fill = 0;\n        for\
    \ ($i = 0; $i < $rows; $i++) {\n            for ($j = 0; $j < $cols; $j++) {\n\
    \                if ($grid[$i][$j] > 0) {\n                    $grid[$i][$j] -=\
    \ $capacity;\n                    if ($grid[$i][$j] < 0) {\n                 \
    \       $grid[$i][$j] = 0;\n                    }\n                    $fill +=\
    \ $capacity;\n                }\n            }\n        }\n        $times++;\n\
    \    }\n    return $times;\n}\necho max_fill(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1);\necho max_fill(array(array(0, 0, 1, 1), array(0,\
    \ 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2);\necho max_fill(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5);", "    $count = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    for ($i = 0; $i < $rows; $i++) {\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n      \
    \          $count += $capacity;\n                $grid[$i][$j] = 0;\n        \
    \        $grid = fill_neighbors($grid, $i, $j, $capacity);\n            }\n  \
    \      }\n    }\n    return $count;\n}", "    $total = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $row_max = array_fill(0, $rows, 0);\n    $col_max\
    \ = array_fill(0, $cols, 0);\n    for ($i = 0; $i < $rows; $i++) {\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            $row_max[$i] = max($row_max[$i], $grid[$i][$j]);\n\
    \            $col_max[$j] = max($col_max[$j], $grid[$i][$j]);\n        }\n   \
    \ }\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            $total += min($row_max[$i], $col_max[$j]) - $grid[$i][$j];\n\
    \        }\n    }\n    return $total;\n}\n$grid = array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);",
  "    $count = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n    $i\
    \ = 0;\n    $j = 0;\n    while ($i < $row) {\n        $j = 0;\n        while ($j\
    \ < $col) {\n            if ($grid[$i][$j] == 1) {\n                $grid[$i][$j]\
    \ = 0;\n                $count++;\n                $k = $i;\n                while\
    \ ($k < $row && $k < $i + $capacity) {\n                    $l = $j;\n       \
    \             while ($l < $col && $l < $j + $capacity) {\n                   \
    \     if ($grid[$k][$l] == 1) {\n                            $grid[$k][$l] = 0;\n\
    \                        }\n                        $l++;\n                  \
    \  }\n                    $k++;\n                }\n            }\n          \
    \  $j++;\n        }\n        $i++;\n    }\n    return $count;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);", "    $max_fill = 0;\n    $row_count = count($grid);\n    $col_count\
    \ = count($grid[0]);\n    for ($i = 0; $i < $row_count; $i++) {\n        for ($j\
    \ = 0; $j < $col_count; $j++) {\n            if ($grid[$i][$j] == 1) {\n     \
    \           $max_fill += $capacity;\n                $grid[$i][$j] = 0;\n    \
    \            $grid = fill_neighbors($grid, $capacity, $i, $j);\n            }\n\
    \        }\n    }\n    return $max_fill;\n}\n", "    $max_fill = 0;\n    $grid_size\
    \ = count($grid);\n    $row_size = count($grid[0]);\n    for ($i = 0; $i < $grid_size;\
    \ $i++) {\n        $fill = 0;\n        for ($j = 0; $j < $row_size; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $fill += $capacity;\n\
    \            }\n        }\n        if ($fill > $max_fill) {\n            $max_fill\
    \ = $fill;\n        }\n    }\n    return $max_fill;\n}", "    $times = 0;\n  \
    \  $grid_length = count($grid);\n    $grid_width = count($grid[0]);\n    $max_height\
    \ = 0;\n    for ($i = 0; $i < $grid_length; $i++) {\n        $max_height = max($max_height,\
    \ max($grid[$i]));\n    }\n    for ($i = 0; $i < $max_height; $i++) {\n      \
    \  for ($j = 0; $j < $grid_length; $j++) {\n            for ($k = 0; $k < $grid_width;\
    \ $k++) {\n                if ($grid[$j][$k] > 0) {\n                    $times++;\n\
    \                    $grid[$j][$k]--;\n                }\n            }\n    \
    \    }\n    }\n    return $times;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);\n\
    \n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0,\
    \ 1, 1, 1));\n$capacity = 2;\necho max_fill($grid, $capacity);\n\n$grid = array(array(0,\
    \ 0, 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid, $capacity);",
  "\t$count = 0;\n\t$max = 0;\n\tforeach ($grid as $row) {\n\t\t$max = max($max, max($row));\n\
    \t}\n\tfor ($i = 0; $i < $max; $i++) {\n\t\t$count += fill($grid, $capacity);\n\
    \t}\n\treturn $count;\n}", "\t$count = 0;\n\t$row_count = count($grid);\n\t$col_count\
    \ = count($grid[0]);\n\tfor ($i = 0; $i < $row_count; $i++) {\n\t\tfor ($j = 0;\
    \ $j < $col_count; $j++) {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$count++;\n\
    \t\t\t\t$grid[$i][$j] = 0;\n\t\t\t\t$capacity--;\n\t\t\t\tif ($capacity == 0)\
    \ {\n\t\t\t\t\t$capacity = $capacity + $count;\n\t\t\t\t\t$count = 0;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t}\n\treturn $capacity;\n}\n\n$grid = array(array(0, 0, 1,\
    \ 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);", "    $total = 0;\n    $count = 0;\n    $row = count($grid);\n\
    \    $col = count($grid[0]);\n    for ($i = 0; $i < $row; $i++) {\n        for\
    \ ($j = 0; $j < $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n       \
    \         $total += $capacity;\n                $count++;\n            }\n   \
    \     }\n    }\n    return $total - $count;\n}\n\n$grid = array(array(0, 0, 1,\
    \ 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);", "    $count = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n\
    \    $bucket = $capacity;\n    for ($i = 0; $i < $row; $i++) {\n        for ($j\
    \ = 0; $j < $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n           \
    \     if ($bucket > 0) {\n                    $bucket--;\n                   \
    \ $grid[$i][$j] = 0;\n                } else {\n                    $count++;\n\
    \                    $bucket = $capacity - 1;\n                    $grid[$i][$j]\
    \ = 0;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n\
    $capacity = 1;\necho max_fill($grid, $capacity);", "\t$rows = count($grid);\n\t\
    $cols = count($grid[0]);\n\t$buckets = array_fill(0, $rows, $capacity);\n\t$lowered\
    \ = 0;\n\twhile (true) {\n\t\t$lowered_this_round = false;\n\t\tfor ($i = 0; $i\
    \ < $rows; $i++) {\n\t\t\tfor ($j = 0; $j < $cols; $j++) {\n\t\t\t\tif ($grid[$i][$j]\
    \ == 1 && $buckets[$i] > 0) {\n\t\t\t\t\t$buckets[$i]--;\n\t\t\t\t\t$grid[$i][$j]\
    \ = 0;\n\t\t\t\t\t$lowered_this_round = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\
    if (!$lowered_this_round) {\n\t\t\tbreak;\n\t\t}\n\t\t$lowered++;\n\t}\n\treturn\
    \ $lowered;\n}", "\t$count = 0;\n\t$rows = count($grid);\n\t$cols = count($grid[0]);\n\
    \t$buckets = array_fill(0, $rows, $capacity);\n\tfor ($i = 0; $i < $cols; $i++)\
    \ {\n\t\tfor ($j = 0; $j < $rows; $j++) {\n\t\t\tif ($grid[$j][$i] == 1) {\n\t\
    \t\t\tif ($buckets[$j] == 0) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\t$buckets[$j]--;\n\
    \t\t\t}\n\t\t}\n\t\t$count += array_sum($buckets);\n\t}\n\treturn $count;\n}\n\
    \necho max_fill(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)),\
    \ 1);\necho max_fill(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1,\
    \ 1), array(0, 1, 1, 1)), 2);\necho max_fill(array(array(0, 0, 0), array(0, 0,\
    \ 0)), 5);", "    $count = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n\
    \    $bucket = $capacity;\n    for ($i = 0; $i < $row; $i++) {\n        for ($j\
    \ = 0; $j < $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n           \
    \     if ($bucket > 0) {\n                    $bucket--;\n                   \
    \ $grid[$i][$j] = 0;\n                } else {\n                    $count++;\n\
    \                    $bucket = $capacity - 1;\n                    $grid[$i][$j]\
    \ = 0;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }\n", "    $count = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n\
    \    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n\
    \                $grid[$i][$j] = 0;\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1,\
    \ 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);", "\t$count = 0;\n\
    \t$grid = array_map(function($row) use ($capacity) {\n\t\treturn array_map(function($well)\
    \ use ($capacity) {\n\t\t\treturn $well * $capacity;\n\t\t}, $row);\n\t}, $grid);\n\
    \twhile(true) {\n\t\t$grid = array_map(function($row) use ($capacity) {\n\t\t\t\
    return array_map(function($well) use ($capacity) {\n\t\t\t\treturn $well - 1;\n\
    \t\t\t}, $row);\n\t\t}, $grid);\n\t\t$grid = array_map(function($row) use ($capacity)\
    \ {\n\t\t\treturn array_map(function($well) use ($capacity) {\n\t\t\t\treturn\
    \ $well < 0 ? 0 : $well;\n\t\t\t}, $row);\n\t\t}, $grid);\n\t\t$count++;\n\t\t\
    if(array_sum(array_map('array_sum', $grid)) == 0) {\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \treturn $count;\n}\necho max_fill(array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1)), 1);\necho max_fill(array(array(0, 0, 1, 1), array(0, 0,\
    \ 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2);\necho max_fill(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5);", "    $count = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    for ($i = 0; $i < $rows; $i++) {\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n      \
    \          $count += $capacity;\n                $grid[$i][$j] = 0;\n        \
    \        if ($i + 1 < $rows) {\n                    $grid[$i + 1][$j] = 1;\n \
    \               }\n            }\n        }\n    }\n    return $count;\n}\n",
  "    $max_fill = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n \
    \   for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $max_fill += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $capacity, $i, $j);\n            }\n        }\n    }\n    return $max_fill;\n\
    }\n", "    $count = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n\
    \    $bucket = $capacity;\n    for ($i = 0; $i < $row; $i++) {\n        for ($j\
    \ = 0; $j < $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n           \
    \     if ($bucket > 0) {\n                    $bucket--;\n                   \
    \ $grid[$i][$j] = 0;\n                } else {\n                    $count++;\n\
    \                    $bucket = $capacity - 1;\n                    $grid[$i][$j]\
    \ = 0;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n\
    $capacity = 1;\necho max_fill($grid, $capacity);", "    $count = 0;\n    $row\
    \ = count($grid);\n    $col = count($grid[0]);\n    $bucket = array_fill(0, $col,\
    \ 0);\n    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $bucket[$j] = $capacity;\n\
    \            }\n        }\n        $count += array_sum($bucket);\n    }\n    return\
    \ $count;\n}\n", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $max_row = $rows - 1;\n    $max_col = $cols - 1;\n    $row = 0;\n    $col\
    \ = 0;\n    while ($row <= $max_row && $col <= $max_col) {\n        $count +=\
    \ $capacity;\n        $row++;\n        $col++;\n    }\n    return $count;\n}\n\
    \n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity\
    \ = 1;\necho max_fill($grid, $capacity);\n\n$grid = array(array(0, 0, 1, 1), array(0,\
    \ 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid,\
    \ $capacity);\n\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity = 5;\n\
    echo max_fill($grid, $capacity);", "    $count = 0;\n    $row = count($grid);\n\
    \    $col = count($grid[0]);\n    $bucket = $capacity;\n    for ($i = 0; $i <\
    \ $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                if ($bucket > 0) {\n                    $bucket--;\n\
    \                    $grid[$i][$j] = 0;\n                } else {\n          \
    \          $count++;\n                    $bucket = $capacity;\n             \
    \       $bucket--;\n                    $grid[$i][$j] = 0;\n                }\n\
    \            }\n        }\n    }\n    return $count;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);", "    $count = 0;\n    $grid = array_reverse($grid);\n    $max\
    \ = max(array_map('max', $grid));\n    $max_index = array_search($max, array_map('max',\
    \ $grid));\n    $max_index = count($grid) - $max_index - 1;\n    for ($i = 0;\
    \ $i < count($grid); $i++) {\n        for ($j = 0; $j < count($grid[$i]); $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $count++;\n      \
    \          $grid[$i][$j] = 0;\n            }\n        }\n    }\n    $count +=\
    \ $max_index;\n    return $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);",
  "\t$count = 0;\n\t$rows = count($grid);\n\t$cols = count($grid[0]);\n\tfor ($i =\
    \ 0; $i < $rows; $i++) {\n\t\tfor ($j = 0; $j < $cols; $j++) {\n\t\t\tif ($grid[$i][$j]\
    \ == 1) {\n\t\t\t\t$count += $capacity;\n\t\t\t\t$grid[$i][$j] = 0;\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn $count;\n}\necho max_fill(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1);\necho max_fill(array(array(0, 0, 1, 1), array(0,\
    \ 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2);\necho max_fill(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5);", "\t$count = 0;\n\t$row_count = count($grid);\n\
    \t$col_count = count($grid[0]);\n\tfor ($i = 0; $i < $row_count; $i++) {\n\t\t\
    for ($j = 0; $j < $col_count; $j++) {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\
    \t$count++;\n\t\t\t\t$grid[$i][$j] = 0;\n\t\t\t\t$capacity--;\n\t\t\t\tif ($capacity\
    \ == 0) {\n\t\t\t\t\t$capacity = $count;\n\t\t\t\t\t$count = 0;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn $capacity;\n}\n\n$grid = array(array(0, 0, 1, 0),\
    \ array(0, 1, 0, 0), array(1, 1, 1, 1));\necho max_fill($grid, 1);\n\n$grid =\
    \ array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1,\
    \ 1));\necho max_fill($grid, 2);\n\n$grid = array(array(0, 0, 0), array(0, 0,\
    \ 0));\necho max_fill($grid, 5);", "    $count = 0;\n    $max = 0;\n    foreach\
    \ ($grid as $row) {\n        $max = max($max, max($row));\n    }\n    while ($max\
    \ > 0) {\n        $count += count_fill($grid, $capacity);\n        $max -= $capacity;\n\
    \    }\n    return $count;\n}\n", "\t$count = 0;\n\t$grid_size = count($grid);\n\
    \t$row_size = count($grid[0]);\n\t$row_index = 0;\n\t$column_index = 0;\n\t$row_index_max\
    \ = $grid_size - 1;\n\t$column_index_max = $row_size - 1;\n\t$row_index_min =\
    \ 0;\n\t$column_index_min = 0;\n\t$row_index_limit = $grid_size;\n\t$column_index_limit\
    \ = $row_size;\n\t$direction = 'right';\n\twhile ($row_index_limit > 0 && $column_index_limit\
    \ > 0) {\n\t\tif ($direction == 'right') {\n\t\t\tfor ($i = $column_index_min;\
    \ $i < $column_index_limit; $i++) {\n\t\t\t\tif ($grid[$row_index][$i] == 1) {\n\
    \t\t\t\t\t$count++;\n\t\t\t\t\t$grid[$row_index][$i] = 0;\n\t\t\t\t}\n\t\t\t}\n\
    \t\t\t$row_index++;\n\t\t\t$row_index_limit--;\n\t\t\t$direction = 'down';\n\t\
    \t} else if ($direction == 'down') {\n\t\t\tfor ($i = $row_index_min; $i < $row_index_limit;\
    \ $i++) {\n\t\t\t\tif ($grid[$i][$column_index_max] == 1) {\n\t\t\t\t\t$count++;\n\
    \t\t\t\t\t$grid[$i][$column_index_max] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$column_index_max--;\n\
    \t\t\t$column_index_limit--;\n\t\t\t$direction = 'left';\n\t\t} else if ($direction\
    \ == 'left') {\n\t\t\tfor ($i = $column_index_max; $i >= $column_index_min; $i--)\
    \ {\n\t\t\t\tif ($grid[$row_index_max][$i] == 1) {\n\t\t\t\t\t$count++;\n\t\t",
  "\t$rows = count($grid);\n\t$cols = count($grid[0]);\n\t$total = 0;\n\tfor ($i =\
    \ 0; $i < $rows; $i++) {\n\t\tfor ($j = 0; $j < $cols; $j++) {\n\t\t\tif ($grid[$i][$j]\
    \ == 1) {\n\t\t\t\t$total += $capacity;\n\t\t\t}\n\t\t}\n\t}\n\treturn $total;\n\
    }\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n\
    $capacity = 1;\necho max_fill($grid, $capacity);\necho \"\\n\";\n\n$grid = array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity\
    \ = 2;\necho max_fill($grid, $capacity);\necho \"\\n\";\n\n$grid = array(array(0,\
    \ 0, 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid, $capacity);\n\
    echo \"\\n\";", "  $count = 0;\n  $bucket = $capacity;\n  for ($i = 0; $i < count($grid);\
    \ $i++) {\n    for ($j = 0; $j < count($grid[$i]); $j++) {\n      if ($grid[$i][$j]\
    \ == 1) {\n        if ($bucket == 0) {\n          $bucket = $capacity;\n     \
    \     $count++;\n        }\n        $bucket--;\n      }\n    }\n  }\n  return\
    \ $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1,\
    \ 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);\n\n$grid = array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity\
    \ = 2;\necho max_fill($grid, $capacity);\n\n$grid = array(array(0, 0, 0), array(0,\
    \ 0, 0));\n$capacity = 5;\necho max_fill($grid, $capacity);", "\t$count = 0;\n\
    \t$rows = count($grid);\n\t$cols = count($grid[0]);\n\t$max_row = $rows - 1;\n\
    \t$max_col = $cols - 1;\n\t$row = 0;\n\t$col = 0;\n\t$direction = 'right';\n\t\
    while ($row <= $max_row && $col <= $max_col) {\n\t\tif ($grid[$row][$col] == 1)\
    \ {\n\t\t\t$grid[$row][$col] = 0;\n\t\t\t$count++;\n\t\t}\n\t\tif ($direction\
    \ == 'right') {\n\t\t\tif ($col == $max_col) {\n\t\t\t\t$row++;\n\t\t\t\t$direction\
    \ = 'down';\n\t\t\t} else {\n\t\t\t\t$col++;\n\t\t\t}\n\t\t} else if ($direction\
    \ == 'down') {\n\t\t\tif ($row == $max_row) {\n\t\t\t\t$col--;\n\t\t\t\t$direction\
    \ = 'left';\n\t\t\t} else {\n\t\t\t\t$row++;\n\t\t\t}\n\t\t} else if ($direction\
    \ == 'left') {\n\t\t\tif ($col == 0) {\n\t\t\t\t$row--;\n\t\t\t\t$direction =\
    \ 'up';\n\t\t\t} else {\n\t\t\t\t$col--;\n\t\t\t}\n\t\t} else if ($direction ==\
    \ 'up') {\n\t\t\tif ($row == 0) {\n\t\t\t\t$col++;\n\t\t\t\t$direction = 'right';\n\
    \t\t\t} else {\n\t\t\t\t$row--;\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}\n\n\
    $grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity\
    \ = 1;\necho max_fill($grid, $capacity) . PHP_EOL;\n\n$grid = array(array(0, 0,\
    \ 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array", "\t$count = 0;\n\t$grid\
    \ = array_reverse($grid);\n\t$max_height = 0;\n\tforeach ($grid as $row) {\n\t\
    \t$max_height = max($max_height, max($row));\n\t}\n\tfor ($i = 0; $i < $max_height;\
    \ $i++) {\n\t\t$count += fill_row($grid, $capacity);\n\t}\n\treturn $count;\n}",
  "\t$count = 0;\n\t$row_count = count($grid);\n\t$col_count = count($grid[0]);\n\t\
    $total_water = 0;\n\tfor ($i = 0; $i < $row_count; $i++) {\n\t\tfor ($j = 0; $j\
    \ < $col_count; $j++) {\n\t\t\t$total_water += $grid[$i][$j];\n\t\t}\n\t}\n\t\
    $total_water = $total_water * $capacity;\n\t$bucket_capacity = $capacity;\n\t\
    $bucket_count = 0;\n\twhile ($total_water > 0) {\n\t\tfor ($i = 0; $i < $row_count;\
    \ $i++) {\n\t\t\tfor ($j = 0; $j < $col_count; $j++) {\n\t\t\t\tif ($grid[$i][$j]\
    \ == 1) {\n\t\t\t\t\t$grid[$i][$j] = 0;\n\t\t\t\t\t$bucket_capacity--;\n\t\t\t\
    \t\t$total_water--;\n\t\t\t\t}\n\t\t\t\tif ($bucket_capacity == 0) {\n\t\t\t\t\
    \t$bucket_capacity = $capacity;\n\t\t\t\t\t$bucket_count++;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn $bucket_count;\n}\n", "\t$max_fill = 0;\n\t$max_fill_count\
    \ = 0;\n\t$grid_length = count($grid);\n\t$grid_width = count($grid[0]);\n\tfor\
    \ ($i = 0; $i < $grid_length; $i++) {\n\t\tfor ($j = 0; $j < $grid_width; $j++)\
    \ {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$max_fill += $capacity;\n\t\t\t\t\
    $max_fill_count++;\n\t\t\t}\n\t\t}\n\t}\n\treturn $max_fill_count == 0 ? 0 : $max_fill;\n\
    }\n\necho max_fill(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1,\
    \ 1)), 1);\necho max_fill(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1,\
    \ 1, 1, 1), array(0, 1, 1, 1)), 2);\necho max_fill(array(array(0, 0, 0), array(0,\
    \ 0, 0)), 5);", "    $total = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $total += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $total;\n}\n",
  "    $count = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                if ($i > 0 && $grid[$i -\
    \ 1][$j] == 1) {\n                    $count--;\n                    $grid[$i\
    \ - 1][$j] = 0;\n                }\n                if ($j > 0 && $grid[$i][$j\
    \ - 1] == 1) {\n                    $count--;\n                    $grid[$i][$j\
    \ - 1] = 0;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n\
    $capacity = 1;\necho max_fill($grid, $capacity);\necho \"\\n\";\n$grid = array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity\
    \ = 2;\necho max_fill($grid, $capacity);\necho \"\\n\";\n$grid = array(array(0,\
    \ 0, 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid, $capacity);\n\
    echo \"\\n\";", "\t$rows = count($grid);\n\t$cols = count($grid[0]);\n\t$times\
    \ = 0;\n\t$buckets = array_fill(0, $rows, $capacity);\n\t$col = 0;\n\twhile ($col\
    \ < $cols) {\n\t\t$row = 0;\n\t\twhile ($row < $rows) {\n\t\t\tif ($grid[$row][$col]\
    \ == 1) {\n\t\t\t\tif ($buckets[$row] == 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\
    \t\t\t$buckets[$row]--;\n\t\t\t}\n\t\t\t$row++;\n\t\t}\n\t\t$col++;\n\t\t$times++;\n\
    \t}\n\treturn $times;\n}\n", "    $count = 0;\n    $rows = count($grid);\n   \
    \ $cols = count($grid[0]);\n    for ($i = 0; $i < $rows; $i++) {\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n      \
    \          $count += $capacity;\n                $grid[$i][$j] = 0;\n        \
    \        $grid = fill_neighbors($grid, $capacity, $i, $j);\n            }\n  \
    \      }\n    }\n    return $count;\n}\n", "    $count = 0;\n    $row = count($grid);\n\
    \    $col = count($grid[0]);\n    for ($i = 0; $i < $row; $i++) {\n        for\
    \ ($j = 0; $j < $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n       \
    \         $count += $capacity;\n                $grid[$i][$j] = 0;\n         \
    \   }\n        }\n    }\n    return $count;\n}\n", "\t$count = 0;\n\t$grid_length\
    \ = count($grid);\n\t$grid_width = count($grid[0]);\n\t$grid_height = 0;\n\tfor\
    \ ($i = 0; $i < $grid_length; $i++) {\n\t\tfor ($j = 0; $j < $grid_width; $j++)\
    \ {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$grid_height = $i;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t}\n\tfor ($i = 0; $i < $grid_length; $i++) {\n\t\tfor ($j =\
    \ 0; $j < $grid_width; $j++) {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$count\
    \ += $capacity;\n\t\t\t\t$grid[$i][$j] = 0;\n\t\t\t}\n\t\t}\n\t}\n\tfor ($i =\
    \ $grid_height; $i >= 0; $i--) {\n\t\tfor ($j = 0; $j < $grid_width; $j++) {\n\
    \t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$count++;\n\t\t\t\t$grid[$i][$j] = 0;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);",
  "\t$fill = 0;\n\t$rows = count($grid);\n\t$cols = count($grid[0]);\n\tfor ($i =\
    \ 0; $i < $rows; $i++) {\n\t\tfor ($j = 0; $j < $cols; $j++) {\n\t\t\tif ($grid[$i][$j]\
    \ == 1) {\n\t\t\t\t$fill += $capacity;\n\t\t\t\tfor ($k = $i + 1; $k < $rows;\
    \ $k++) {\n\t\t\t\t\tif ($grid[$k][$j] == 1) {\n\t\t\t\t\t\t$fill += $capacity;\n\
    \t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn $fill;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0,\
    \ 0), array(1, 1, 1, 1));\necho max_fill($grid, 1) . \"\\n\";\n$grid = array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1));\necho max_fill($grid,\
    \ 2) . \"\\n\";\n$grid = array(array(0, 0, 0), array(0, 0, 0));\necho max_fill($grid,\
    \ 5) . \"\\n\";", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $wells = [];\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0;\
    \ $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n               \
    \ $wells[] = [$i, $j];\n            }\n        }\n    }\n    $wells_count = count($wells);\n\
    \    for ($i = 0; $i < $wells_count; $i++) {\n        $count += $capacity;\n \
    \       $row = $wells[$i][0];\n        $col = $wells[$i][1];\n        for ($j\
    \ = $i + 1; $j < $wells_count; $j++) {\n            if ($wells[$j][0] == $row\
    \ && $wells[$j][1] <= $col) {\n                $count--;\n            }\n    \
    \    }\n    }\n    return $count;\n}\n\n$grid = [\n    [0, 0, 1, 0],\n    [0,\
    \ 1, 0, 0],\n    [1, 1, 1, 1]\n];\n$capacity = 1;\necho max_fill($grid, $capacity)\
    \ . PHP_EOL;\n\n$grid = [\n    [0, 0, 1, 1],\n    [0, 0, 0, 0],\n    [1, 1, 1,\
    \ 1],\n    [0, 1, 1, 1]\n];\n$capacity = 2;\necho max_fill($grid, $capacity) .\
    \ PHP_EOL;\n\n$grid = [\n    [0, 0, 0],\n    [0, 0, 0]\n];\n$capacity = 5;\necho\
    \ max_fill($grid, $capacity) . PHP_EOL;", "    $count = 0;\n    $row_count = count($grid);\n\
    \    $col_count = count($grid[0]);\n    $row_max = array_fill(0, $row_count, 0);\n\
    \    $col_max = array_fill(0, $col_count, 0);\n    for ($i = 0; $i < $row_count;\
    \ $i++) {\n        for ($j = 0; $j < $col_count; $j++) {\n            $row_max[$i]\
    \ = max($row_max[$i], $grid[$i][$j]);\n            $col_max[$j] = max($col_max[$j],\
    \ $grid[$i][$j]);\n        }\n    }\n    for ($i = 0; $i < $row_count; $i++) {\n\
    \        for ($j = 0; $j < $col_count; $j++) {\n            $count += min($row_max[$i],\
    \ $col_max[$j]) - $grid[$i][$j];\n        }\n    }\n    return $count * $capacity;\n\
    }", "    $count = 0;\n    $grid_length = count($grid);\n    $grid_width = count($grid[0]);\n\
    \    $grid_copy = $grid;\n    for ($i = 0; $i < $grid_length; $i++) {\n      \
    \  for ($j = 0; $j < $grid_width; $j++) {\n            if ($grid_copy[$i][$j]\
    \ == 1) {\n                $count++;\n                $grid_copy[$i][$j] = 0;\n\
    \                $grid_copy = fill_bucket($grid_copy, $i, $j, $capacity);\n  \
    \          }\n        }\n    }\n    return $count;\n}\n", "    $count = 0;\n \
    \   $rows = count($grid);\n    $cols = count($grid[0]);\n    $row = 0;\n    $col\
    \ = 0;\n    while ($row < $rows) {\n        $col = 0;\n        while ($col < $cols)\
    \ {\n            if ($grid[$row][$col] == 1) {\n                $count += $capacity;\n\
    \                $grid[$row][$col] = 0;\n            }\n            $col++;\n\
    \        }\n        $row++;\n    }\n    return $count;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);\n\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1,\
    \ 1, 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid, $capacity);\n\
    \n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity);", "    $count = 0;\n    $row_count = count($grid);\n    $col_count\
    \ = count($grid[0]);\n    $row_index = 0;\n    $col_index = 0;\n    while ($row_index\
    \ < $row_count) {\n        $col_index = 0;\n        while ($col_index < $col_count)\
    \ {\n            if ($grid[$row_index][$col_index] == 1) {\n                $grid[$row_index][$col_index]\
    \ = 0;\n                $count++;\n                $row_index_temp = $row_index;\n\
    \                $col_index_temp = $col_index;\n                $capacity_temp\
    \ = $capacity;\n                while ($capacity_temp > 0) {\n               \
    \     if ($row_index_temp > 0 && $grid[$row_index_temp - 1][$col_index_temp] ==\
    \ 1) {\n                        $grid[$row_index_temp - 1][$col_index_temp] =\
    \ 0;\n                        $row_index_temp--;\n                        $capacity_temp--;\n\
    \                    } else if ($row_index_temp < $row_count - 1 && $grid[$row_index_temp\
    \ + 1][$col_index_temp] == 1) {\n                        $grid[$row_index_temp\
    \ + 1][$col_index_temp] = 0;\n                        $row_index_temp++;\n   \
    \                     $capacity_temp--;\n                    } else if ($col_index_temp\
    \ > 0 && $grid[$row_index_temp][$col_index_temp - 1] == 1) {\n               \
    \         $grid[$row_index_temp][$col_index_temp - 1] = 0;\n                 \
    \       $col_index_temp--;\n                        $capacity_temp--;\n      \
    \              } else if ($col_index_temp < $col_count - 1 && $grid[$row_index_temp][$col_index_temp\
    \ + 1] == 1) {\n                        $grid[$row_index_temp][$col_index_temp\
    \ + 1] = 0;\n                        $col_index_temp++;\n                    \
    \    $capacity_temp--;\n                    } else {\n                       \
    \ break;\n                    }", "    $count = 0;\n    $rows = count($grid);\n\
    \    $columns = count($grid[0]);\n    for ($i = 0; $i < $rows; $i++) {\n     \
    \   for ($j = 0; $j < $columns; $j++) {\n            if ($grid[$i][$j] == 1) {\n\
    \                $grid[$i][$j] = 0;\n                $count++;\n             \
    \   $capacity--;\n                if ($capacity > 0) {\n                    $count\
    \ += max_fill($grid, $capacity);\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}", "    $total = 0;\n    $max = 0;\n    foreach ($grid\
    \ as $row) {\n        $total += array_sum($row);\n        $max = max($max, max($row));\n\
    \    }\n    if ($total == 0) return 0;\n    return ceil($total / $capacity) +\
    \ $max - 1;\n}\n", "    $count = 0;\n    $grid_length = count($grid);\n    for\
    \ ($i = 0; $i < $grid_length; $i++) {\n        $row_length = count($grid[$i]);\n\
    \        for ($j = 0; $j < $row_length; $j++) {\n            if ($grid[$i][$j]\
    \ === 1) {\n                $count += $capacity;\n                $grid[$i][$j]\
    \ = 0;\n            }\n        }\n    }\n    return $count;\n}\n", "\t$count =\
    \ 0;\n\t$grid_length = count($grid);\n\t$grid_width = count($grid[0]);\n\tfor\
    \ ($i = 0; $i < $grid_length; $i++) {\n\t\tfor ($j = 0; $j < $grid_width; $j++)\
    \ {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$count += $capacity;\n\t\t\t\t$grid[$i][$j]\
    \ = 0;\n\t\t\t\tif ($i > 0) {\n\t\t\t\t\t$grid[$i - 1][$j] = 0;\n\t\t\t\t}\n\t\
    \t\t\tif ($i < $grid_length - 1) {\n\t\t\t\t\t$grid[$i + 1][$j] = 0;\n\t\t\t\t\
    }\n\t\t\t\tif ($j > 0) {\n\t\t\t\t\t$grid[$i][$j - 1] = 0;\n\t\t\t\t}\n\t\t\t\t\
    if ($j < $grid_width - 1) {\n\t\t\t\t\t$grid[$i][$j + 1] = 0;\n\t\t\t\t}\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn $count;\n}\n", "    $count = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    for ($i = 0; $i < $rows; $i++) {\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n      \
    \          $count += $capacity;\n                $grid[$i][$j] = 0;\n        \
    \        $grid = fill_neighbors($grid, $capacity, $i, $j);\n            }\n  \
    \      }\n    }\n    return $count;\n}\n", "    $count = 0;\n    $row = count($grid);\n\
    \    $col = count($grid[0]);\n    $well = array();\n    for ($i = 0; $i < $row;\
    \ $i++) {\n        for ($j = 0; $j < $col; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $well[$i][$j] = $capacity;\n            } else {\n\
    \                $well[$i][$j] = 0;\n            }\n        }\n    }\n    $max\
    \ = 0;\n    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++)\
    \ {\n            if ($well[$i][$j] > $max) {\n                $max = $well[$i][$j];\n\
    \            }\n        }\n    }\n    while ($max > 0) {\n        for ($i = 0;\
    \ $i < $row; $i++) {\n            for ($j = 0; $j < $col; $j++) {\n          \
    \      if ($well[$i][$j] == $max) {\n                    $well[$i][$j] = 0;\n\
    \                    if ($i > 0) {\n                        $well[$i - 1][$j]\
    \ = $well[$i - 1][$j] + 1;\n                    }\n                    if ($i\
    \ < $row - 1) {\n                        $well[$i + 1][$j] = $well[$i + 1][$j]\
    \ + 1;\n                    }\n                    if ($j > 0) {\n           \
    \             $well[$i][$j - 1] = $well[$i][$j - 1] + 1;\n                   \
    \ }\n                    if ($j < $col - 1) {\n                        $well[$i][$j\
    \ + 1] = $well[$i][$j + 1] + 1;\n                    }\n                }\n  \
    \          }\n        }\n        $max--;\n        $count++;\n    }\n    return\
    \ $count;\n}", "    $total = 0;\n    $row_count = count($grid);\n    $col_count\
    \ = count($grid[0]);\n    for ($i = 0; $i < $row_count; $i++) {\n        for ($j\
    \ = 0; $j < $col_count; $j++) {\n            if ($grid[$i][$j] == 1) {\n     \
    \           $total += $capacity;\n                $grid[$i][$j] = 0;\n       \
    \         $grid = fill_neighbours($grid, $i, $j, $capacity);\n            }\n\
    \        }\n    }\n    return $total;\n}\n", "    $count = 0;\n    foreach ($grid\
    \ as $row) {\n        $count += max_fill_row($row, $capacity);\n    }\n    return\
    \ $count;\n}\n", "    $count = 0;\n    $grid = array_map('array_sum', $grid);\n\
    \    foreach ($grid as $row) {\n        $count += ceil($row / $capacity);\n  \
    \  }\n    return $count;\n}\n\n$grid = array(\n    array(0, 0, 1, 0),\n    array(0,\
    \ 1, 0, 0),\n    array(1, 1, 1, 1)\n);\n\necho max_fill($grid, 1);", "    $count\
    \ = 0;\n    $grid = array_reverse($grid);\n    foreach ($grid as $row) {\n   \
    \     $row = array_reverse($row);\n        $row_count = 0;\n        foreach ($row\
    \ as $cell) {\n            if ($cell === 1) {\n                $row_count++;\n\
    \            }\n        }\n        if ($row_count > 0) {\n            $count +=\
    \ ceil($row_count / $capacity);\n        }\n    }\n    return $count;\n}\n\n$grid\
    \ = array(\n    array(0, 0, 1, 0),\n    array(0, 1, 0, 0),\n    array(1, 1, 1,\
    \ 1)\n);\n$capacity = 1;\necho max_fill($grid, $capacity);\necho \"\\n\";\n\n\
    $grid = array(\n    array(0, 0, 1, 1),\n    array(0, 0, 0, 0),\n    array(1, 1,\
    \ 1, 1),\n    array(0, 1, 1, 1)\n);\n$capacity = 2;\necho max_fill($grid, $capacity);\n\
    echo \"\\n\";\n\n$grid = array(\n    array(0, 0, 0),\n    array(0, 0, 0)\n);\n\
    $capacity = 5;\necho max_fill($grid, $capacity);\necho \"\\n\";", "    $count\
    \ = 0;\n    $grid_length = count($grid);\n    $grid_width = count($grid[0]);\n\
    \    $grid_copy = $grid;\n    for ($i = 0; $i < $grid_length; $i++) {\n      \
    \  for ($j = 0; $j < $grid_width; $j++) {\n            if ($grid_copy[$i][$j]\
    \ == 1) {\n                $grid_copy[$i][$j] = 0;\n                $count++;\n\
    \                $capacity--;\n                $j++;\n                while ($capacity\
    \ > 0 && $j < $grid_width) {\n                    if ($grid_copy[$i][$j] == 1)\
    \ {\n                        $grid_copy[$i][$j] = 0;\n                       \
    \ $capacity--;\n                    }\n                    $j++;\n           \
    \     }\n                if ($capacity == 0) {\n                    $capacity\
    \ = $capacity + $grid_width;\n                }\n            }\n        }\n  \
    \  }\n    return $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0,\
    \ 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);",
  "\t$rows = count($grid);\n\t$cols = count($grid[0]);\n\t$max_fill = 0;\n\t$fill\
    \ = 0;\n\tfor ($i = 0; $i < $rows; $i++) {\n\t\tfor ($j = 0; $j < $cols; $j++)\
    \ {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$fill++;\n\t\t\t}\n\t\t}\n\t\t$max_fill\
    \ = max($max_fill, $fill);\n\t\t$fill = 0;\n\t}\n\treturn $max_fill * $capacity;\n\
    }\n\necho max_fill(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1,\
    \ 1)), 1) . \"\\n\";\necho max_fill(array(array(0, 0, 1, 1), array(0, 0, 0, 0),\
    \ array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) . \"\\n\";\necho max_fill(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) . \"\\n\";", "\t$rows = count($grid);\n\t$cols =\
    \ count($grid[0]);\n\t$max_fill = 0;\n\tfor ($i = 0; $i < $rows; $i++) {\n\t\t\
    for ($j = 0; $j < $cols; $j++) {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$max_fill\
    \ += $capacity;\n\t\t\t\t$grid[$i][$j] = 0;\n\t\t\t\tif ($i > 0 && $grid[$i -\
    \ 1][$j] == 1) {\n\t\t\t\t\t$max_fill--;\n\t\t\t\t\t$grid[$i - 1][$j] = 0;\n\t\
    \t\t\t}\n\t\t\t\tif ($j > 0 && $grid[$i][$j - 1] == 1) {\n\t\t\t\t\t$max_fill--;\n\
    \t\t\t\t\t$grid[$i][$j - 1] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $max_fill;\n\
    }\necho max_fill(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)),\
    \ 1);\necho max_fill(array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1,\
    \ 1), array(0, 1, 1, 1)), 2);\necho max_fill(array(array(0, 0, 0), array(0, 0,\
    \ 0)), 5);", "    $count = 0;\n    $max_row = count($grid);\n    $max_col = count($grid[0]);\n\
    \    for ($i = 0; $i < $max_row; $i++) {\n        for ($j = 0; $j < $max_col;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                if ($i > 0) {\n         \
    \           $grid[$i - 1][$j] = 0;\n                }\n                if ($i\
    \ < $max_row - 1) {\n                    $grid[$i + 1][$j] = 0;\n            \
    \    }\n                if ($j > 0) {\n                    $grid[$i][$j - 1] =\
    \ 0;\n                }\n                if ($j < $max_col - 1) {\n          \
    \          $grid[$i][$j + 1] = 0;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}\n", "    $row_count = count($grid);\n    $col_count\
    \ = count($grid[0]);\n    $total_water = 0;\n    $row_index = 0;\n    $col_index\
    \ = 0;\n    $total_water = 0;\n    $bucket_count = 0;\n    while ($row_index <\
    \ $row_count) {\n        $col_index = 0;\n        while ($col_index < $col_count)\
    \ {\n            if ($grid[$row_index][$col_index] == 1) {\n                $total_water++;\n\
    \            }\n            $col_index++;\n        }\n        $row_index++;\n\
    \    }\n    $bucket_count = ceil($total_water / $capacity);\n    return $bucket_count;\n\
    }\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n\
    $capacity = 1;\necho max_fill($grid, $capacity);", "    $count = 0;\n    $rows\
    \ = count($grid);\n    $cols = count($grid[0]);\n    $max_col = 0;\n    $max_row\
    \ = 0;\n    $max_val = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j\
    \ = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] > $max_val) {\n    \
    \            $max_val = $grid[$i][$j];\n                $max_row = $i;\n     \
    \           $max_col = $j;\n            }\n        }\n    }\n    $count += $max_val;\n\
    \    $grid[$max_row][$max_col] = 0;\n    $max_val = 0;\n    $max_row = 0;\n  \
    \  $max_col = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j\
    \ < $cols; $j++) {\n            if ($grid[$i][$j] > $max_val) {\n            \
    \    $max_val = $grid[$i][$j];\n                $max_row = $i;\n             \
    \   $max_col = $j;\n            }\n        }\n    }\n    $count += $max_val;\n\
    \    $grid[$max_row][$max_col] = 0;\n    $max_val = 0;\n    $max_row = 0;\n  \
    \  $max_col = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j\
    \ < $cols; $j++) {\n            if ($grid[$i][$j] > $max_val) {\n            \
    \    $max_val = $grid[$i][$j];\n                $max_row = $i;\n             \
    \   $max_col = $j;\n            }\n        }\n    }\n    $count += $max_val;\n\
    \    $grid[$max_row][$max_col] = 0;\n    $max_val = 0;\n    $max_row =", "   \
    \ $count = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n    $bucket\
    \ = $capacity;\n    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j <\
    \ $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n                if ($bucket\
    \ > 0) {\n                    $bucket--;\n                    $grid[$i][$j] =\
    \ 0;\n                } else {\n                    $count++;\n              \
    \      $bucket = $capacity - 1;\n                    $grid[$i][$j] = 0;\n    \
    \            }\n            }\n        }\n    }\n    return $count;\n}\n\n$grid\
    \ = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity\
    \ = 1;\necho max_fill($grid, $capacity);", "    $count = 0;\n    $grid = array_map(function($row)\
    \ use ($capacity) {\n        return array_map(function($cell) use ($capacity)\
    \ {\n            return $cell * $capacity;\n        }, $row);\n    }, $grid);\n\
    \    $max_row = count($grid);\n    $max_col = count($grid[0]);\n    $max_row_sum\
    \ = array_map(function($row) {\n        return array_sum($row);\n    }, $grid);\n\
    \    $max_col_sum = array_fill(0, $max_col, 0);\n    for ($i = 0; $i < $max_row;\
    \ $i++) {\n        for ($j = 0; $j < $max_col; $j++) {\n            $max_col_sum[$j]\
    \ += $grid[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $max_row; $i++) {\n\
    \        for ($j = 0; $j < $max_col; $j++) {\n            $count += min($max_row_sum[$i],\
    \ $max_col_sum[$j]) - $grid[$i][$j];\n        }\n    }\n    return $count;\n}\n",
  "\t$total = 0;\n\t$row = count($grid);\n\t$col = count($grid[0]);\n\tfor ($i = 0;\
    \ $i < $row; $i++) {\n\t\tfor ($j = 0; $j < $col; $j++) {\n\t\t\tif ($grid[$i][$j]\
    \ == 1) {\n\t\t\t\t$total += $capacity;\n\t\t\t}\n\t\t}\n\t}\n\treturn $total;\n\
    }\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n\
    $capacity = 1;\necho max_fill($grid, $capacity);\necho \"\\n\";\n\n$grid = array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity\
    \ = 2;\necho max_fill($grid, $capacity);\necho \"\\n\";\n\n$grid = array(array(0,\
    \ 0, 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid, $capacity);\n\
    echo \"\\n\";", "\t$count = 0;\n\t$row = count($grid);\n\t$col = count($grid[0]);\n\
    \t$temp = array();\n\tfor ($i = 0; $i < $row; $i++) {\n\t\tfor ($j = 0; $j < $col;\
    \ $j++) {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$temp[$i][$j] = $capacity;\n\
    \t\t\t} else {\n\t\t\t\t$temp[$i][$j] = 0;\n\t\t\t}\n\t\t}\n\t}\n\tfor ($i = 0;\
    \ $i < $row; $i++) {\n\t\tfor ($j = 0; $j < $col; $j++) {\n\t\t\tif ($temp[$i][$j]\
    \ > 0) {\n\t\t\t\t$count++;\n\t\t\t\tif ($i > 0) {\n\t\t\t\t\t$temp[$i - 1][$j]\
    \ = $temp[$i - 1][$j] + $temp[$i][$j] - 1;\n\t\t\t\t}\n\t\t\t\tif ($i < $row -\
    \ 1) {\n\t\t\t\t\t$temp[$i + 1][$j] = $temp[$i + 1][$j] + $temp[$i][$j] - 1;\n\
    \t\t\t\t}\n\t\t\t\tif ($j > 0) {\n\t\t\t\t\t$temp[$i][$j - 1] = $temp[$i][$j -\
    \ 1] + $temp[$i][$j] - 1;\n\t\t\t\t}\n\t\t\t\tif ($j < $col - 1) {\n\t\t\t\t\t\
    $temp[$i][$j + 1] = $temp[$i][$j + 1] + $temp[$i][$j] - 1;\n\t\t\t\t}\n\t\t\t\t\
    $temp[$i][$j] = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}\necho max_fill(array(array(0,\
    \ 0, 1, 0), array(0, 1", "    $times = 0;\n    $rows = count($grid);\n    $cols\
    \ = count($grid[0]);\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j =\
    \ 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n            \
    \    $grid[$i][$j] = 0;\n                $times++;\n                $capacity--;\n\
    \                if ($capacity == 0) {\n                    return $times;\n \
    \               }\n                $grid = fill_water($grid, $capacity, $i, $j);\n\
    \            }\n        }\n    }\n    return $times;\n}\n", "    $buckets = 0;\n\
    \    $grid = array_map(function($row) use ($capacity) {\n        $row = array_filter($row);\n\
    \        $row = array_pad($row, $capacity, 0);\n        return $row;\n    }, $grid);\n\
    \    $grid = array_values($grid);\n    $grid = array_filter($grid);\n    $grid\
    \ = array_values($grid);\n    $grid = array_map(function($row) use ($capacity)\
    \ {\n        $row = array_slice($row, 0, $capacity);\n        return $row;\n \
    \   }, $grid);\n    $grid = array_values($grid);\n    $grid = array_filter($grid);\n\
    \    $grid = array_values($grid);\n    $grid = array_map(function($row) use ($capacity)\
    \ {\n        $row = array_pad($row, $capacity, 0);\n        return $row;\n   \
    \ }, $grid);\n    $grid = array_values($grid);\n    $grid = array_filter($grid);\n\
    \    $grid = array_values($grid);\n    while (count($grid) > 0) {\n        $buckets\
    \ += 1;\n        $grid = array_map(function($row) use ($capacity) {\n        \
    \    $row = array_map(function($cell) use ($capacity) {\n                if ($cell\
    \ > 0) {\n                    $cell -= 1;\n                }\n               \
    \ return $cell;\n            }, $row);\n            return $row;\n        }, $grid);\n\
    \        $grid = array_values($grid);\n        $grid = array_filter($grid);\n\
    \        $grid = array_values($grid);\n    }\n    return $buckets;\n}", "    $count\
    \ = 0;\n    $grid_height = count($grid);\n    $grid_width = count($grid[0]);\n\
    \    for ($i = 0; $i < $grid_height; $i++) {\n        for ($j = 0; $j < $grid_width;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n\
    \                $grid[$i][$j] = 0;\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1,\
    \ 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);", "\t$max_fill = 0;\n\
    \t$max_fill_count = 0;\n\t$max_fill_row = 0;\n\t$max_fill_col = 0;\n\t$grid_size\
    \ = count($grid);\n\t$grid_size_col = count($grid[0]);\n\tfor ($row = 0; $row\
    \ < $grid_size; $row++) {\n\t\tfor ($col = 0; $col < $grid_size_col; $col++) {\n\
    \t\t\tif ($grid[$row][$col] == 1) {\n\t\t\t\t$max_fill_count++;\n\t\t\t\t$grid[$row][$col]\
    \ = 0;\n\t\t\t}\n\t\t\tif ($max_fill_count > $max_fill) {\n\t\t\t\t$max_fill =\
    \ $max_fill_count;\n\t\t\t\t$max_fill_row = $row;\n\t\t\t\t$max_fill_col = $col;\n\
    \t\t\t}\n\t\t}\n\t\t$max_fill_count = 0;\n\t}\n\t$max_fill_count = 0;\n\tfor ($row\
    \ = 0; $row < $grid_size; $row++) {\n\t\tfor ($col = 0; $col < $grid_size_col;\
    \ $col++) {\n\t\t\tif ($grid[$row][$col] == 1) {\n\t\t\t\t$max_fill_count++;\n\
    \t\t\t}\n\t\t}\n\t}\n\tif ($max_fill_count == 0) {\n\t\treturn 0;\n\t}\n\t$max_fill_count\
    \ = 0;\n\tfor ($row = 0; $row < $grid_size; $row++) {\n\t\tfor ($col = 0; $col\
    \ < $grid_size_col; $col++) {\n\t\t\tif ($grid[$row][$col] == 1) {\n\t\t\t\t$max_fill_count++;\n\
    \t\t\t}\n\t\t}\n\t}\n\tif ($max_fill_count == 0) {\n\t\treturn 0;\n\t}\n\treturn\
    \ $max_fill * $capacity;\n}", "    $count = 0;\n    $rows = count($grid);\n  \
    \  $cols = count($grid[0]);\n    $max_row = $rows - 1;\n    $max_col = $cols -\
    \ 1;\n    $row = 0;\n    $col = 0;\n    $dir = 'right';\n    while ($row <= $max_row\
    \ && $col <= $max_col) {\n        if ($dir == 'right') {\n            if ($grid[$row][$col]\
    \ == 1) {\n                $grid[$row][$col] = 0;\n                $count++;\n\
    \            }\n            $col++;\n            if ($col > $max_col) {\n    \
    \            $col--;\n                $row++;\n                $dir = 'down';\n\
    \            }\n        } elseif ($dir == 'down') {\n            if ($grid[$row][$col]\
    \ == 1) {\n                $grid[$row][$col] = 0;\n                $count++;\n\
    \            }\n            $row++;\n            if ($row > $max_row) {\n    \
    \            $row--;\n                $col--;\n                $dir = 'left';\n\
    \            }\n        } elseif ($dir == 'left') {\n            if ($grid[$row][$col]\
    \ == 1) {\n                $grid[$row][$col] = 0;\n                $count++;\n\
    \            }\n            $col--;\n            if ($col < 0) {\n           \
    \     $col++;\n                $row--;\n                $dir = 'up';\n       \
    \     }\n        } elseif ($dir == 'up') {\n            if ($grid[$row][$col]\
    \ == 1) {\n                $grid[$row][$col] = 0;\n                $count++;\n\
    \            }\n            $row--;\n            if ($row < 0) {\n           \
    \     $row++;\n                $col++;\n                $dir = 'right';\n    \
    \        }\n        }\n    }\n    return $count;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity", "\t$count = 0;\n\t$grid_length = count($grid);\n\t$grid_width =\
    \ count($grid[0]);\n\tfor ($i = 0; $i < $grid_length; $i++) {\n\t\tfor ($j = 0;\
    \ $j < $grid_width; $j++) {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$count +=\
    \ $capacity;\n\t\t\t\t$grid[$i][$j] = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n\
    }\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n\
    $capacity = 1;\necho max_fill($grid, $capacity);\necho \"\\n\";\n\n$grid = array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity\
    \ = 2;\necho max_fill($grid, $capacity);\necho \"\\n\";\n\n$grid = array(array(0,\
    \ 0, 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid, $capacity);\n\
    echo \"\\n\";", "\t$rows = count($grid);\n\t$cols = count($grid[0]);\n\t$water\
    \ = 0;\n\t$buckets = 0;\n\tfor ($i = 0; $i < $rows; $i++) {\n\t\tfor ($j = 0;\
    \ $j < $cols; $j++) {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$water++;\n\t\t\
    \t}\n\t\t}\n\t}\n\twhile ($water > 0) {\n\t\t$buckets++;\n\t\t$water -= $capacity;\n\
    \t}\n\treturn $buckets;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0,\
    \ 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);",
  "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    $wells\
    \ = [];\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $wells[] = [$i,\
    \ $j];\n            }\n        }\n    }\n    while (count($wells) > 0) {\n   \
    \     $count++;\n        $new_wells = [];\n        foreach ($wells as $well) {\n\
    \            $i = $well[0];\n            $j = $well[1];\n            $grid[$i][$j]\
    \ = 0;\n            if ($i > 0 && $grid[$i - 1][$j] == 1) {\n                $new_wells[]\
    \ = [$i - 1, $j];\n            }\n            if ($i < $rows - 1 && $grid[$i +\
    \ 1][$j] == 1) {\n                $new_wells[] = [$i + 1, $j];\n            }\n\
    \            if ($j > 0 && $grid[$i][$j - 1] == 1) {\n                $new_wells[]\
    \ = [$i, $j - 1];\n            }\n            if ($j < $cols - 1 && $grid[$i][$j\
    \ + 1] == 1) {\n                $new_wells[] = [$i, $j + 1];\n            }\n\
    \        }\n        $wells = $new_wells;\n    }\n    return $count;\n}\n", " \
    \   $count = 0;\n    $max = 0;\n    foreach ($grid as $row) {\n        $max =\
    \ max($max, max($row));\n    }\n    for ($i = 0; $i < $max; $i++) {\n        foreach\
    \ ($grid as $row) {\n            $count += count(array_filter($row, function($x)\
    \ use ($i, $capacity) {\n                return $x > $i && $x <= $i + $capacity;\n\
    \            }));\n        }\n    }\n    return $count;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";\n\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0),\
    \ array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";\n\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity\
    \ = 5;\necho max_fill($grid, $capacity) . \"\\n\";", "\t$fill_count = 0;\n\t$row_count\
    \ = count($grid);\n\t$col_count = count($grid[0]);\n\t$row_index = 0;\n\t$col_index\
    \ = 0;\n\t$row_index_max = $row_count - 1;\n\t$col_index_max = $col_count - 1;\n\
    \twhile ($row_index <= $row_index_max) {\n\t\t$col_index = 0;\n\t\twhile ($col_index\
    \ <= $col_index_max) {\n\t\t\tif ($grid[$row_index][$col_index] == 1) {\n\t\t\t\
    \t$grid[$row_index][$col_index] = 0;\n\t\t\t\t$fill_count++;\n\t\t\t\tif ($row_index\
    \ < $row_index_max) {\n\t\t\t\t\t$grid[$row_index + 1][$col_index] = 1;\n\t\t\t\
    \t}\n\t\t\t\tif ($col_index < $col_index_max) {\n\t\t\t\t\t$grid[$row_index][$col_index\
    \ + 1] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$col_index++;\n\t\t}\n\t\t$row_index++;\n\
    \t}\n\treturn $fill_count;\n}\n\necho max_fill(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1);\necho max_fill(array(array(0, 0, 1, 1), array(0,\
    \ 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2);\necho max_fill(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5);", "    $count = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    for ($i = 0; $i < $rows; $i++) {\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n      \
    \          $count += $capacity;\n                $grid[$i][$j] = 0;\n        \
    \        $grid = fill_neighbors($grid, $capacity, $i, $j);\n            }\n  \
    \      }\n    }\n    return $count;\n}\n", "    $max = 0;\n    $count = 0;\n \
    \   foreach ($grid as $row) {\n        $max = max($max, max($row));\n    }\n \
    \   while ($max > 0) {\n        $max -= $capacity;\n        $count++;\n    }\n\
    \    return $count;\n}", "    $count = 0;\n    $grid_height = count($grid);\n\
    \    $grid_width = count($grid[0]);\n    $bucket = $capacity;\n    for ($i = 0;\
    \ $i < $grid_height; $i++) {\n        for ($j = 0; $j < $grid_width; $j++) {\n\
    \            if ($grid[$i][$j] === 1) {\n                $bucket--;\n        \
    \        if ($bucket === 0) {\n                    $count++;\n               \
    \     $bucket = $capacity;\n                }\n            }\n        }\n    }\n\
    \    return $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);\necho\
    \ \"\\n\";\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1,\
    \ 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid, $capacity);\n\
    echo \"\\n\";\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity = 5;\n\
    echo max_fill($grid, $capacity);\necho \"\\n\";", "    $count = 0;\n    $grid\
    \ = array_map(function($row) use ($capacity) {\n        return array_map(function($cell)\
    \ use ($capacity) {\n            return $cell * $capacity;\n        }, $row);\n\
    \    }, $grid);\n    $max_row = count($grid);\n    $max_col = count($grid[0]);\n\
    \    $max_cell = $max_row * $max_col;\n    $i = 0;\n    while ($i < $max_cell)\
    \ {\n        $row = floor($i / $max_col);\n        $col = $i % $max_col;\n   \
    \     if ($grid[$row][$col] > 0) {\n            $grid[$row][$col]--;\n       \
    \     $count++;\n        }\n        $i++;\n    }\n    return $count;\n}\n", " \
    \   $count = 0;\n    $grid = array_map(function($row) use ($capacity) {\n    \
    \    $row = array_map(function($cell) use ($capacity) {\n            return $cell\
    \ * $capacity;\n        }, $row);\n        return $row;\n    }, $grid);\n    $grid\
    \ = array_map(function($row) use ($capacity) {\n        $row = array_map(function($cell)\
    \ use ($capacity) {\n            return $cell - $capacity;\n        }, $row);\n\
    \        return $row;\n    }, $grid);\n    $grid = array_map(function($row) use\
    \ ($capacity) {\n        $row = array_map(function($cell) use ($capacity) {\n\
    \            return $cell + $capacity;\n        }, $row);\n        return $row;\n\
    \    }, $grid);\n    $grid = array_map(function($row) use ($capacity) {\n    \
    \    $row = array_map(function($cell) use ($capacity) {\n            return $cell\
    \ - $capacity;\n        }, $row);\n        return $row;\n    }, $grid);\n    $grid\
    \ = array_map(function($row) use ($capacity) {\n        $row = array_map(function($cell)\
    \ use ($capacity) {\n            return $cell + $capacity;\n        }, $row);\n\
    \        return $row;\n    }, $grid);\n    $grid = array_map(function($row) use\
    \ ($capacity) {\n        $row = array_map(function($cell) use ($capacity) {\n\
    \            return $cell - $capacity;\n        }, $row);\n        return $row;\n\
    \    }, $grid);\n    $grid = array_map(function($row) use ($capacity) {\n    \
    \    $row = array_map(function($cell) use ($capacity) {\n            return $cell\
    \ + $capacity;\n        }, $row);\n        return $row;\n    }, $grid);\n    $grid\
    \ = array_map(function($row) use ($capacity) {\n        $row = array_map(function($cell)\
    \ use ($capacity) {\n            return $cell - $capacity;\n        }, $row);\n\
    \        return $row;\n    }, $grid);\n", "    $times = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    for ($i = 0; $i < $rows; $i++) {\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n      \
    \          $grid[$i][$j] = 0;\n                $times++;\n                $water\
    \ = $capacity;\n                while ($water > 0) {\n                    if ($i\
    \ > 0 && $grid[$i - 1][$j] == 1) {\n                        $grid[$i - 1][$j]\
    \ = 0;\n                        $water--;\n                    }\n           \
    \         if ($i < $rows - 1 && $grid[$i + 1][$j] == 1) {\n                  \
    \      $grid[$i + 1][$j] = 0;\n                        $water--;\n           \
    \         }\n                    if ($j > 0 && $grid[$i][$j - 1] == 1) {\n   \
    \                     $grid[$i][$j - 1] = 0;\n                        $water--;\n\
    \                    }\n                    if ($j < $cols - 1 && $grid[$i][$j\
    \ + 1] == 1) {\n                        $grid[$i][$j + 1] = 0;\n             \
    \           $water--;\n                    }\n                }\n            }\n\
    \        }\n    }\n    return $times;\n}", "\t$count = 0;\n\t$cols = count($grid[0]);\n\
    \t$rows = count($grid);\n\t$max = 0;\n\tfor ($i = 0; $i < $rows; $i++) {\n\t\t\
    for ($j = 0; $j < $cols; $j++) {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$max\
    \ = max($max, $i);\n\t\t\t}\n\t\t}\n\t}\n\tfor ($i = 0; $i < $rows; $i++) {\n\t\
    \tfor ($j = 0; $j < $cols; $j++) {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t\
    $count += $max - $i;\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);", "    $times = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $times++;\n      \
    \          $grid = fill($grid, $i, $j, $capacity);\n            }\n        }\n\
    \    }\n    return $times;\n}\n", "    $count = 0;\n    $row = count($grid);\n\
    \    $col = count($grid[0]);\n    for ($i = 0; $i < $row; $i++) {\n        for\
    \ ($j = 0; $j < $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n       \
    \         $count += $capacity;\n                $grid[$i][$j] = 0;\n         \
    \   }\n        }\n    }\n    return $count;\n}\n\n$grid = array(array(0, 0, 1,\
    \ 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);", "    $total = 0;\n    $row_total = 0;\n    $row_count = count($grid);\n\
    \    $col_count = count($grid[0]);\n    for ($i = 0; $i < $row_count; $i++) {\n\
    \        for ($j = 0; $j < $col_count; $j++) {\n            $row_total += $grid[$i][$j];\n\
    \        }\n        $total += $row_total;\n        $row_total = 0;\n    }\n  \
    \  return $total * $capacity;\n}\n", "\t$count = 0;\n\t$rows = count($grid);\n\
    \t$cols = count($grid[0]);\n\t$buckets = array_fill(0, $rows, $capacity);\n\t\
    for ($i = 0; $i < $cols; $i++) {\n\t\tfor ($j = 0; $j < $rows; $j++) {\n\t\t\t\
    if ($grid[$j][$i] == 1) {\n\t\t\t\t$buckets[$j]--;\n\t\t\t\tif ($buckets[$j] <\
    \ 0) {\n\t\t\t\t\t$count++;\n\t\t\t\t\t$buckets[$j] = $capacity - 1;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}\n\n$grid = array(array(0, 0, 1, 0),\
    \ array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";\n\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0),\
    \ array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";\n\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity\
    \ = 5;\necho max_fill($grid, $capacity) . \"\\n\";", "    $total = 0;\n    $row_count\
    \ = count($grid);\n    $col_count = count($grid[0]);\n    for ($i = 0; $i < $row_count;\
    \ $i++) {\n        $row_total = 0;\n        for ($j = 0; $j < $col_count; $j++)\
    \ {\n            $row_total += $grid[$i][$j];\n        }\n        $total += min($row_total,\
    \ $capacity);\n    }\n    return $total;\n}\n", "    $rows = count($grid);\n \
    \   $cols = count($grid[0]);\n    $total = 0;\n    $i = 0;\n    $j = 0;\n    $count\
    \ = 0;\n    while ($i < $rows) {\n        $j = 0;\n        while ($j < $cols)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $total += $capacity;\n\
    \                $count++;\n            }\n            $j++;\n        }\n    \
    \    $i++;\n    }\n    return $total - $count;\n}\n\n$grid = array(array(0, 0,\
    \ 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\necho max_fill($grid, 1);\necho\
    \ \"\\n\";\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1,\
    \ 1), array(0, 1, 1, 1));\necho max_fill($grid, 2);\necho \"\\n\";\n$grid = array(array(0,\
    \ 0, 0), array(0, 0, 0));\necho max_fill($grid, 5);\necho \"\\n\";", "    $grid\
    \ = array_map(function($row) {\n        return array_sum($row);\n    }, $grid);\n\
    \    $total = array_sum($grid);\n    $max = max($grid);\n    $min = min($grid);\n\
    \    $count = 0;\n    while ($total > 0) {\n        $count++;\n        $total\
    \ -= $capacity;\n        $max -= $capacity;\n        if ($max < $min) {\n    \
    \        $max = max($grid);\n        }\n    }\n    return $count;\n}\n\n$grid\
    \ = array(\n    array(0, 0, 1, 0),\n    array(0, 1, 0, 0),\n    array(1, 1, 1,\
    \ 1)\n);\n$capacity = 1;\necho max_fill($grid, $capacity);\n\n$grid = array(\n\
    \    array(0, 0, 1, 1),\n    array(0, 0, 0, 0),\n    array(1, 1, 1, 1),\n    array(0,\
    \ 1, 1, 1)\n);\n$capacity = 2;\necho max_fill($grid, $capacity);\n\n$grid = array(\n\
    \    array(0, 0, 0),\n    array(0, 0, 0)\n);\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity);", "\t$total = 0;\n\t$rows = count($grid);\n\t$cols = count($grid[0]);\n\
    \tfor ($i = 0; $i < $rows; $i++) {\n\t\tfor ($j = 0; $j < $cols; $j++) {\n\t\t\
    \tif ($grid[$i][$j] == 1) {\n\t\t\t\t$total += $capacity;\n\t\t\t\t$grid[$i][$j]\
    \ = 0;\n\t\t\t\t$grid = fill_grid($grid, $capacity, $i, $j);\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn $total;\n}", "    $count = 0;\n    $row_count = count($grid);\n\
    \    $col_count = count($grid[0]);\n    for ($i = 0; $i < $row_count; $i++) {\n\
    \        for ($j = 0; $j < $col_count; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $grid[$i][$j] = 0;\n                $count++;\n   \
    \             $capacity--;\n                if ($capacity > 0) {\n           \
    \         $count += max_fill($grid, $capacity);\n                }\n         \
    \   }\n        }\n    }\n    return $count;\n}\n\n$grid = array(array(0, 0, 1,\
    \ 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);\n\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1,\
    \ 1, 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid, $capacity);\n\
    \n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity);", "    $num_rows = count($grid);\n    $num_cols = count($grid[0]);\n\
    \    $num_buckets = 0;\n    $bucket_capacity = $capacity;\n    $bucket_level =\
    \ 0;\n    $bucket_level_increase = 0;\n    $bucket_level_decrease = 0;\n    $bucket_level_decrease_increase\
    \ = 0;\n    $bucket_level_decrease_increase_increase = 0;\n    $bucket_level_decrease_increase_increase_increase\
    \ = 0;\n    $bucket_level_decrease_increase_increase_increase_increase = 0;\n\
    \    $bucket_level_decrease_increase_increase_increase_increase_increase = 0;\n\
    \    $bucket_level_decrease_increase_increase_increase_increase_increase_increase\
    \ = 0;\n    $bucket_level_decrease_increase_increase_increase_increase_increase_increase_increase\
    \ = 0;\n    $bucket_level_decrease_increase_increase_increase_increase_increase_increase_increase_increase\
    \ = 0;\n    $bucket_level_decrease_increase_increase_increase_increase_increase_increase_increase_increase_increase\
    \ = 0;\n    $bucket_level_decrease_increase_increase_increase_increase_increase_increase_increase_increase_increase_increase\
    \ = 0;\n    $bucket_level_decrease_increase_increase_increase_increase_increase_increase_increase_increase_increase_increase_increase\
    \ = 0;\n    $bucket_level_decrease_increase_increase_increase_increase_increase_increase_increase_increase_increase_increase_increase_increase\
    \ = 0;\n    $bucket_level_decrease_increase_increase_increase_increase_increase_",
  "    $count = 0;\n    $grid_length = count($grid);\n    $row_length = count($grid[0]);\n\
    \    for ($i = 0; $i < $grid_length; $i++) {\n        for ($j = 0; $j < $row_length;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count++;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill_neighbors($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $count;\n}\n",
  "    $count = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n    $max\
    \ = 0;\n    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $max = max($max, $j);\n\
    \            }\n        }\n    }\n    for ($i = 0; $i < $row; $i++) {\n      \
    \  for ($j = 0; $j < $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n  \
    \              $count++;\n                $grid[$i][$j] = 0;\n               \
    \ $j += $capacity;\n            }\n        }\n    }\n    return $count;\n}\n\n\
    $grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity\
    \ = 1;\necho max_fill($grid, $capacity);", "    $count = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    for ($i = 0; $i < $rows; $i++) {\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n      \
    \          $count += $capacity;\n                $grid[$i][$j] = 0;\n        \
    \        $grid = fill_neighbors($grid, $i, $j, $capacity - 1);\n            }\n\
    \        }\n    }\n    return $count;\n}\n", "    $count = 0;\n    $grid = array_map(function($row)\
    \ use ($capacity) {\n        return array_map(function($cell) use ($capacity)\
    \ {\n            return $cell * $capacity;\n        }, $row);\n    }, $grid);\n\
    \    $grid = array_map(function($row) use ($capacity) {\n        return array_sum($row);\n\
    \    }, $grid);\n    while (max($grid) > 0) {\n        $grid = array_map(function($row)\
    \ use ($capacity) {\n            return $row - $capacity;\n        }, $grid);\n\
    \        $grid = array_map(function($row) use ($capacity) {\n            return\
    \ $row < 0 ? 0 : $row;\n        }, $grid);\n        $count++;\n    }\n    return\
    \ $count;\n}\n\n/*", "    $count = 0;\n    $max_row = count($grid);\n    $max_col\
    \ = count($grid[0]);\n    $bucket = array_fill(0, $max_col, 0);\n    for ($i =\
    \ 0; $i < $max_row; $i++) {\n        for ($j = 0; $j < $max_col; $j++) {\n   \
    \         if ($grid[$i][$j] == 1) {\n                $bucket[$j]++;\n        \
    \    }\n        }\n        $count += fill_bucket($bucket, $capacity);\n    }\n\
    \    return $count;\n}", "\t$count = 0;\n\t$grid = array_map(function($row) use\
    \ ($capacity, &$count) {\n\t\t$count += array_sum($row);\n\t\treturn array_fill(0,\
    \ count($row), $capacity);\n\t}, $grid);\n\t$grid = array_reverse($grid);\n\t\
    $row_count = count($grid);\n\t$col_count = count($grid[0]);\n\tfor ($i = 0; $i\
    \ < $row_count; $i++) {\n\t\tfor ($j = 0; $j < $col_count; $j++) {\n\t\t\tif ($grid[$i][$j]\
    \ > 0) {\n\t\t\t\t$count--;\n\t\t\t\t$grid[$i][$j]--;\n\t\t\t\tif ($i + 1 < $row_count)\
    \ {\n\t\t\t\t\t$grid[$i + 1][$j]++;\n\t\t\t\t}\n\t\t\t\tif ($j + 1 < $col_count)\
    \ {\n\t\t\t\t\t$grid[$i][$j + 1]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $count;\n}\necho max_fill(array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1)), 1) . \"\\n\";\necho max_fill(array(array(0, 0, 1, 1), array(0, 0,\
    \ 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) . \"\\n\";\necho max_fill(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5) . \"\\n\";", "    $num_rows = count($grid);\n   \
    \ $num_cols = count($grid[0]);\n    $num_buckets = 0;\n    for ($i = 0; $i < $num_rows;\
    \ $i++) {\n        for ($j = 0; $j < $num_cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $num_buckets++;\n            }\n        }\n    }\n\
    \    $num_buckets = ceil($num_buckets / $capacity);\n    return $num_buckets;\n\
    }", "    $count = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n\
    \    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n\
    \                $grid[$i][$j] = 0;\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1,\
    \ 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);\n\n$grid = array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity\
    \ = 2;\necho max_fill($grid, $capacity);\n\n$grid = array(array(0, 0, 0), array(0,\
    \ 0, 0));\n$capacity = 5;\necho max_fill($grid, $capacity);", "    $count = 0;\n\
    \    $row = count($grid);\n    $col = count($grid[0]);\n    for ($i = 0; $i <\
    \ $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $grid[$i][$j] = 0;\n                $count++;\n   \
    \             $queue = [[$i, $j]];\n                while (!empty($queue)) {\n\
    \                    $cur = array_shift($queue);\n                    $x = $cur[0];\n\
    \                    $y = $cur[1];\n                    if ($x - 1 >= 0 && $grid[$x\
    \ - 1][$y] == 1) {\n                        $grid[$x - 1][$y] = 0;\n         \
    \               $queue[] = [$x - 1, $y];\n                    }\n            \
    \        if ($x + 1 < $row && $grid[$x + 1][$y] == 1) {\n                    \
    \    $grid[$x + 1][$y] = 0;\n                        $queue[] = [$x + 1, $y];\n\
    \                    }\n                    if ($y - 1 >= 0 && $grid[$x][$y -\
    \ 1] == 1) {\n                        $grid[$x][$y - 1] = 0;\n               \
    \         $queue[] = [$x, $y - 1];\n                    }\n                  \
    \  if ($y + 1 < $col && $grid[$x][$y + 1] == 1) {\n                        $grid[$x][$y\
    \ + 1] = 0;\n                        $queue[] = [$x, $y + 1];\n              \
    \      }\n                }\n            }\n        }\n    }\n    return $count\
    \ * $capacity;\n}\n\n$grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n$capacity\
    \ = 1;\necho max_fill($grid, $capacity);\necho \"\\n\";\n$grid = [[0, 0, 1, 1],\
    \ [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]];\n$capacity =", "    $total = 0;\n\
    \    $rows = count($grid);\n    $cols = count($grid[0]);\n    for ($i = 0; $i\
    \ < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $total += $capacity;\n                $grid[$i][$j]\
    \ = 0;\n                $grid = fill_well($grid, $capacity, $i, $j);\n       \
    \     }\n        }\n    }\n    return $total;\n}\n", "    $count = 0;\n    $row\
    \ = count($grid);\n    $col = count($grid[0]);\n    $max = 0;\n    for ($i = 0;\
    \ $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n            if\
    \ ($grid[$i][$j] == 1) {\n                $max = max($max, $j);\n            }\n\
    \        }\n    }\n    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j\
    \ < $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count\
    \ += $capacity;\n            }\n            if ($j == $max) {\n              \
    \  $count += $capacity;\n            }\n        }\n    }\n    return $count;\n\
    }\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity\
    \ = 1;\necho max_fill($grid, $capacity);", "    $total = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    for ($i = 0; $i < $rows; $i++) {\n        $row\
    \ = $grid[$i];\n        $fill = $capacity;\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            $fill -= $row[$j];\n            if ($fill < 0) {\n          \
    \      $total += abs($fill);\n                $fill = 0;\n            }\n    \
    \    }\n    }\n    return $total;\n}\necho max_fill(array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1)), 1);\necho max_fill(array(array(0, 0, 1, 1), array(0,\
    \ 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2);\necho max_fill(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5);", "\t$count = 0;\n\t$row_count = count($grid);\n\
    \t$col_count = count($grid[0]);\n\tfor ($i = 0; $i < $row_count; $i++) {\n\t\t\
    for ($j = 0; $j < $col_count; $j++) {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\
    \t$count += $capacity;\n\t\t\t\t$grid[$i][$j] = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $count;\n}\n\n/*", "    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $count = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j\
    \ < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count\
    \ += $capacity;\n                $grid[$i][$j] = 0;\n                $grid = fill($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $count;\n}\n",
  "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    $max\
    \ = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        $max = 0;\n        for ($j\
    \ = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n          \
    \      $max++;\n            }\n        }\n        $count += $max;\n        if\
    \ ($max > $capacity) {\n            $count += $max - $capacity;\n        }\n \
    \   }\n    return $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0,\
    \ 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);",
  "\t$rows = count($grid);\n\t$cols = count($grid[0]);\n\t$fill = 0;\n\tfor ($i =\
    \ 0; $i < $rows; $i++) {\n\t\tfor ($j = 0; $j < $cols; $j++) {\n\t\t\tif ($grid[$i][$j]\
    \ == 1) {\n\t\t\t\t$grid[$i][$j] = 0;\n\t\t\t\t$fill++;\n\t\t\t\t$queue = [[$i,\
    \ $j]];\n\t\t\t\twhile (count($queue) > 0) {\n\t\t\t\t\t$pos = array_shift($queue);\n\
    \t\t\t\t\t$x = $pos[0];\n\t\t\t\t\t$y = $pos[1];\n\t\t\t\t\tif ($x > 0 && $grid[$x\
    \ - 1][$y] == 1) {\n\t\t\t\t\t\t$grid[$x - 1][$y] = 0;\n\t\t\t\t\t\t$queue[] =\
    \ [$x - 1, $y];\n\t\t\t\t\t}\n\t\t\t\t\tif ($x < $rows - 1 && $grid[$x + 1][$y]\
    \ == 1) {\n\t\t\t\t\t\t$grid[$x + 1][$y] = 0;\n\t\t\t\t\t\t$queue[] = [$x + 1,\
    \ $y];\n\t\t\t\t\t}\n\t\t\t\t\tif ($y > 0 && $grid[$x][$y - 1] == 1) {\n\t\t\t\
    \t\t\t$grid[$x][$y - 1] = 0;\n\t\t\t\t\t\t$queue[] = [$x, $y - 1];\n\t\t\t\t\t\
    }\n\t\t\t\t\tif ($y < $cols - 1 && $grid[$x][$y + 1] == 1) {\n\t\t\t\t\t\t$grid[$x][$y\
    \ + 1] = 0;\n\t\t\t\t\t\t$queue[] = [$x, $y + 1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn $", "\t$count = 0;\n\t$grid_length = count($grid);\n\
    \t$grid_width = count($grid[0]);\n\t$grid_max = $grid_length * $grid_width;\n\t\
    $grid_max_height = max(array_map('max', $grid));\n\t$grid_max_height = $grid_max_height\
    \ > $capacity ? $grid_max_height : $capacity;\n\tfor ($i = 0; $i < $grid_max_height;\
    \ $i++) {\n\t\t$count += count(array_filter(array_map(function($row) {\n\t\t\t\
    return count(array_filter($row, function($cell) {\n\t\t\t\treturn $cell == 1;\n\
    \t\t\t}));\n\t\t}, $grid)));\n\t\t$grid = array_map(function($row) use ($capacity)\
    \ {\n\t\t\treturn array_map(function($cell) use ($capacity) {\n\t\t\t\treturn\
    \ $cell > $capacity ? $cell - $capacity : 0;\n\t\t\t}, $row);\n\t\t}, $grid);\n\
    \t}\n\treturn $count;\n}", "    $count = 0;\n    $row = count($grid);\n    $col\
    \ = count($grid[0]);\n    $bucket = array_fill(0, $col, 0);\n    for ($i = 0;\
    \ $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n            if\
    \ ($grid[$i][$j] == 1) {\n                $bucket[$j]++;\n            }\n    \
    \    }\n    }\n    for ($i = 0; $i < $col; $i++) {\n        $count += floor($bucket[$i]\
    \ / $capacity);\n        if ($bucket[$i] % $capacity != 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}", "    $count = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    $total = $rows * $cols;\n    $filled = 0;\n\
    \    while ($filled < $total) {\n        $filled = 0;\n        for ($i = 0; $i\
    \ < $rows; $i++) {\n            for ($j = 0; $j < $cols; $j++) {\n           \
    \     if ($grid[$i][$j] == 1) {\n                    $grid[$i][$j] = 0;\n    \
    \                $filled++;\n                }\n            }\n        }\n   \
    \     $count++;\n    }\n    return $count;\n}\n\n$grid = array(array(0, 0, 1,\
    \ 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);", "    $grid = array_map(function($row) {\n        return array_sum($row);\n\
    \    }, $grid);\n    $max = max($grid);\n    return max(0, $max - $capacity);\n\
    }\n", "    $total = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    $max_col = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0;\
    \ $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n               \
    \ $max_col = max($max_col, $j);\n            }\n        }\n    }\n    for ($i\
    \ = 0; $i < $rows; $i++) {\n        $total += $max_col - count(array_filter($grid[$i]));\n\
    \    }\n    return $total;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1,\
    \ 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);",
  "\t$max_fill = 0;\n\t$row_count = count($grid);\n\t$column_count = count($grid[0]);\n\
    \tfor ($i = 0; $i < $row_count; $i++) {\n\t\tfor ($j = 0; $j < $column_count;\
    \ $j++) {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$max_fill += $capacity;\n\t\
    \t\t\t$grid[$i][$j] = 0;\n\t\t\t\t$grid = fill_neighbours($grid, $i, $j, $capacity);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $max_fill;\n}", "    $count = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    for ($i = 0; $i < $rows; $i++) {\n        for\
    \ ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n      \
    \          $grid[$i][$j] = 0;\n                $count++;\n                $capacity--;\n\
    \                if ($capacity > 0) {\n                    $count += max_fill($grid,\
    \ $capacity);\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1,\
    \ 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);\necho \"\\n\";\n$grid\
    \ = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1,\
    \ 1, 1));\n$capacity = 2;\necho max_fill($grid, $capacity);\necho \"\\n\";\n$grid\
    \ = array(array(0, 0, 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity);\necho \"\\n\";", "    $count = 0;\n    $row_count = count($grid);\n\
    \    $col_count = count($grid[0]);\n    for ($i = 0; $i < $row_count; $i++) {\n\
    \        $row = $grid[$i];\n        $row_sum = array_sum($row);\n        if ($row_sum\
    \ > 0) {\n            $count += $row_sum / $capacity;\n            if ($row_sum\
    \ % $capacity > 0) {\n                $count++;\n            }\n        }\n  \
    \  }\n    return $count;\n}\n", "    $total = 0;\n    $max = 0;\n    $count =\
    \ 0;\n    $grid_length = count($grid);\n    $grid_width = count($grid[0]);\n \
    \   for ($i = 0; $i < $grid_length; $i++) {\n        for ($j = 0; $j < $grid_width;\
    \ $j++) {\n            $total += $grid[$i][$j];\n            if ($grid[$i][$j]\
    \ > $max) {\n                $max = $grid[$i][$j];\n            }\n        }\n\
    \    }\n    if ($total == 0) {\n        return 0;\n    }\n    $count = ceil($total\
    \ / $capacity);\n    if ($max > $capacity) {\n        $count += ceil($max / $capacity);\n\
    \    }\n    return $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1,\
    \ 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);",
  "    $max_fill = 0;\n    $max_fill_count = 0;\n    $grid_length = count($grid);\n\
    \    $grid_width = count($grid[0]);\n    for ($i = 0; $i < $grid_length; $i++)\
    \ {\n        $max_fill += $capacity;\n        for ($j = 0; $j < $grid_width; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $max_fill -= 1;\n\
    \            }\n        }\n        if ($max_fill < 0) {\n            $max_fill_count\
    \ += abs($max_fill);\n            $max_fill = 0;\n        }\n    }\n    return\
    \ $max_fill_count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);\necho \"\\n\";\n\
    \n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0,\
    \ 1, 1, 1));\n$capacity = 2;\necho max_fill($grid, $capacity);\necho \"\\n\";\n\
    \n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity);\necho \"\\n\";", "\t$rows = count($grid);\n\t$cols = count($grid[0]);\n\
    \t$max_fill = 0;\n\tfor ($i = 0; $i < $rows; $i++) {\n\t\tfor ($j = 0; $j < $cols;\
    \ $j++) {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$max_fill += $capacity;\n\t\
    \t\t\t$grid[$i][$j] = 0;\n\t\t\t\t$grid = fill_neighbors($grid, $capacity, $i,\
    \ $j);\n\t\t\t}\n\t\t}\n\t}\n\treturn $max_fill;\n}", "    $count = 0;\n    $row\
    \ = count($grid);\n    $col = count($grid[0]);\n    $bucket = $capacity;\n   \
    \ for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n \
    \           if ($grid[$i][$j] == 1) {\n                if ($bucket == 0) {\n \
    \                   $count++;\n                    $bucket = $capacity;\n    \
    \            }\n                $bucket--;\n            }\n        }\n    }\n\
    \    return $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);\necho\
    \ \"\\n\";\n\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid, $capacity);\n\
    echo \"\\n\";\n\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity = 5;\n\
    echo max_fill($grid, $capacity);\necho \"\\n\";", "    $row_count = count($grid);\n\
    \    $col_count = count($grid[0]);\n    $total_water = 0;\n    $total_emptied\
    \ = 0;\n    $emptied_this_round = 0;\n    $emptied_last_round = 0;\n    $bucket_count\
    \ = 0;\n    $bucket_count_last_round = 0;\n    $bucket_count_this_round = 0;\n\
    \    $bucket_count_last_round = 0;\n    $bucket_count_this_round = 0;\n    $bucket_count_last_round\
    \ = 0;\n    $bucket_count_this_round = 0;\n    $bucket_count_last_round = 0;\n\
    \    $bucket_count_this_round = 0;\n    $bucket_count_last_round = 0;\n    $bucket_count_this_round\
    \ = 0;\n    $bucket_count_last_round = 0;\n    $bucket_count_this_round = 0;\n\
    \    $bucket_count_last_round = 0;\n    $bucket_count_this_round = 0;\n    $bucket_count_last_round\
    \ = 0;\n    $bucket_count_this_round = 0;\n    $bucket_count_last_round = 0;\n\
    \    $bucket_count_this_round = 0;\n    $bucket_count_last_round = 0;\n    $bucket_count_this_round\
    \ = 0;\n    $bucket_count_last_round = 0;\n    $bucket_count_this_round = 0;\n\
    \    $bucket_count_last_round = 0;\n    $bucket_count_this_round = 0;\n    $bucket_count_last_round\
    \ = 0;\n    $bucket_count_this_round = 0;\n    $bucket_count_last_round = 0;\n\
    \    $bucket_count_this_round = 0;\n    $bucket_count_last_round = 0;\n    $bucket_count_this_round\
    \ = 0;\n    $bucket_count_last_round = 0;\n", "    $total = 0;\n    $rows = count($grid);\n\
    \    $cols = count($grid[0]);\n    for ($i = 0; $i < $rows; $i++) {\n        $row\
    \ = $grid[$i];\n        $row_total = 0;\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            $row_total += $row[$j];\n        }\n        $total += $row_total;\n\
    \        if ($row_total < $capacity) {\n            $capacity -= $row_total;\n\
    \        } else {\n            $total += ceil($row_total / $capacity);\n     \
    \       $capacity = $capacity - ($row_total % $capacity);\n        }\n    }\n\
    \    return $total;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity) . \"\\\
    n\";\n\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1),\
    \ array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid, $capacity) . \"\\\
    n\";\n\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";", "    $max_fill = 0;\n    $max_fill_count = 0;\n    $max_fill_row\
    \ = 0;\n    $max_fill_col = 0;\n    $max_fill_row_count = 0;\n    $max_fill_col_count\
    \ = 0;\n    $max_fill_row_col_count = 0;\n    $max_fill_row_col_count_count =\
    \ 0;\n    $max_fill_row_col_count_row = 0;\n    $max_fill_row_col_count_col =\
    \ 0;\n    $max_fill_row_col_count_row_count = 0;\n    $max_fill_row_col_count_col_count\
    \ = 0;\n    $max_fill_row_col_count_row_col_count = 0;\n    $max_fill_row_col_count_row_col_count_count\
    \ = 0;\n    $max_fill_row_col_count_row_col_count_row = 0;\n    $max_fill_row_col_count_row_col_count_col\
    \ = 0;\n    $max_fill_row_col_count_row_col_count_row_count = 0;\n    $max_fill_row_col_count_row_col_count_col_count\
    \ = 0;\n    $max_fill_row_col_count_row_col_count_row_col_count = 0;\n    $max_fill_row_col_count_row_col_count_row_col_count_count\
    \ = 0;\n    $max_fill_row_col_count_row_col_count_row_col_count_row = 0;\n   \
    \ $max_fill_row_col_count_row_col_count_row_col_count_col = 0;\n    $max_fill_row_col_count_row_col_count_row_col_count_row_count\
    \ = 0;\n    $max_fill_row_col_count_row_col_count_row_col_count_col_count = 0;\n\
    \    $max_fill_row_col_count_row_col_count_row_col_count", "\t$count = 0;\n\t\
    $grid = array_map(function($row) use ($capacity) {\n\t\t$row = array_map(function($cell)\
    \ use ($capacity) {\n\t\t\treturn $cell * $capacity;\n\t\t}, $row);\n\t\treturn\
    \ $row;\n\t}, $grid);\n\t$max_row = count($grid);\n\t$max_col = count($grid[0]);\n\
    \twhile (true) {\n\t\t$empty_row = false;\n\t\tfor ($i = 0; $i < $max_row; $i++)\
    \ {\n\t\t\tfor ($j = 0; $j < $max_col; $j++) {\n\t\t\t\tif ($grid[$i][$j] > 0)\
    \ {\n\t\t\t\t\t$grid[$i][$j]--;\n\t\t\t\t\t$count++;\n\t\t\t\t}\n\t\t\t\tif ($grid[$i][$j]\
    \ == 0) {\n\t\t\t\t\t$empty_row = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!$empty_row)\
    \ {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $count;\n}\necho max_fill(array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1)), 1) . \"\\n\";\necho max_fill(array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) . \"\\\
    n\";\necho max_fill(array(array(0, 0, 0), array(0, 0, 0)), 5) . \"\\n\";", " \
    \   $count = 0;\n    $row_count = count($grid);\n    $col_count = count($grid[0]);\n\
    \    for ($i = 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count++;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill_bucket($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $count;\n}\n",
  "    $max_fill = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n \
    \   for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $max_fill += $capacity;\n\
    \                $grid[$i][$j] = 0;\n                if ($i > 0 && $grid[$i -\
    \ 1][$j] == 1) {\n                    $max_fill--;\n                    $grid[$i\
    \ - 1][$j] = 0;\n                }\n                if ($j > 0 && $grid[$i][$j\
    \ - 1] == 1) {\n                    $max_fill--;\n                    $grid[$i][$j\
    \ - 1] = 0;\n                }\n            }\n        }\n    }\n    return $max_fill;\n\
    }\n", "\t$total_water = 0;\n\t$total_fill = 0;\n\t$total_rows = count($grid);\n\
    \t$total_cols = count($grid[0]);\n\t$row_water = array_fill(0, $total_rows, 0);\n\
    \t$col_water = array_fill(0, $total_cols, 0);\n\tfor ($i = 0; $i < $total_rows;\
    \ $i++) {\n\t\tfor ($j = 0; $j < $total_cols; $j++) {\n\t\t\tif ($grid[$i][$j]\
    \ == 1) {\n\t\t\t\t$total_water++;\n\t\t\t\t$row_water[$i]++;\n\t\t\t\t$col_water[$j]++;\n\
    \t\t\t}\n\t\t}\n\t}\n\t$row_fill = array_fill(0, $total_rows, 0);\n\t$col_fill\
    \ = array_fill(0, $total_cols, 0);\n\twhile ($total_water > 0) {\n\t\t$row_fill_count\
    \ = 0;\n\t\t$col_fill_count = 0;\n\t\tfor ($i = 0; $i < $total_rows; $i++) {\n\
    \t\t\tif ($row_water[$i] > 0) {\n\t\t\t\t$row_fill[$i]++;\n\t\t\t\t$row_fill_count++;\n\
    \t\t\t\t$row_water[$i]--;\n\t\t\t\t$total_water--;\n\t\t\t}\n\t\t}\n\t\tfor ($j\
    \ = 0; $j < $total_cols; $j++) {\n\t\t\tif ($col_water[$j] > 0) {\n\t\t\t\t$col_fill[$j]++;\n\
    \t\t\t\t$col_fill_count++;\n\t\t\t\t$col_water[$j]--;\n\t\t\t\t$total_water--;\n\
    \t\t\t}\n\t\t}\n\t\t$total_fill += min($row_fill_count, $col_fill_count);\n\t\
    }\n\treturn $total_fill;\n}\n\n$grid = array(", "    $count = 0;\n    $row = count($grid);\n\
    \    $col = count($grid[0]);\n    for ($i = 0; $i < $row; $i++) {\n        for\
    \ ($j = 0; $j < $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n       \
    \         $count += $capacity;\n                $grid[$i][$j] = 0;\n         \
    \   }\n        }\n    }\n    return $count;\n}\n\n$grid = array(array(0, 0, 1,\
    \ 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);", "    $count = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n\
    \    $max = 0;\n    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j <\
    \ $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count++;\n\
    \            }\n        }\n        $max = max($max, $count);\n        $count =\
    \ 0;\n    }\n    return $max * $capacity;\n}\n\n$grid = array(array(0, 0, 1, 0),\
    \ array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);", "    $rows = count($grid);\n    $cols = count($grid[0]);\n   \
    \ $count = 0;\n    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j <\
    \ $cols; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count++;\n\
    \                $grid[$i][$j] = 0;\n                $grid = fill_well($grid,\
    \ $i, $j, $capacity);\n            }\n        }\n    }\n    return $count;\n}",
  "    $count = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n    $bucket\
    \ = $capacity;\n    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j <\
    \ $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n                if ($bucket\
    \ > 0) {\n                    $bucket--;\n                    $grid[$i][$j] =\
    \ 0;\n                } else {\n                    $count++;\n              \
    \      $bucket = $capacity - 1;\n                    $grid[$i][$j] = 0;\n    \
    \            }\n            }\n        }\n    }\n    return $count;\n}\n\n$grid\
    \ = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity\
    \ = 1;\necho max_fill($grid, $capacity);\necho \"\\n\";\n$grid = array(array(0,\
    \ 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity\
    \ = 2;\necho max_fill($grid, $capacity);\necho \"\\n\";\n$grid = array(array(0,\
    \ 0, 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid, $capacity);\n\
    echo \"\\n\";", "    $count = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $count++;\n      \
    \          $grid[$i][$j] = 0;\n                $k = $i;\n                while\
    \ ($k < $rows && $grid[$k][$j] == 1) {\n                    $grid[$k][$j] = 0;\n\
    \                    $k++;\n                }\n                $k = $i - 1;\n\
    \                while ($k >= 0 && $grid[$k][$j] == 1) {\n                   \
    \ $grid[$k][$j] = 0;\n                    $k--;\n                }\n         \
    \   }\n        }\n    }\n    return $count;\n}\n$grid = array(array(0, 0, 1, 0),\
    \ array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity);", "    $count = 0;\n    $max = 0;\n    foreach ($grid as $row) {\n\
    \        $max = max($max, max($row));\n    }\n    $count += $max * count($grid);\n\
    \    $count += count($grid) * count($grid[0]);\n    return $count;\n}\n", "\t\
    $count = 0;\n\t$row = count($grid);\n\t$col = count($grid[0]);\n\t$max = 0;\n\t\
    for ($i = 0; $i < $row; $i++) {\n\t\tfor ($j = 0; $j < $col; $j++) {\n\t\t\tif\
    \ ($grid[$i][$j] == 1) {\n\t\t\t\t$max = max($max, $j);\n\t\t\t}\n\t\t}\n\t\t\
    $count += $max + 1;\n\t\t$max = 0;\n\t}\n\treturn $count * $capacity;\n}\n\n$grid\
    \ = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity\
    \ = 1;\necho max_fill($grid, $capacity);", "\t$wells = count($grid);\n\t$units\
    \ = count($grid[0]);\n\t$buckets = 0;\n\tfor ($i = 0; $i < $wells; $i++) {\n\t\
    \t$buckets += array_sum($grid[$i]);\n\t}\n\t$buckets = ceil($buckets / $capacity);\n\
    \treturn $buckets;\n}\nprint_r(max_fill(array(array(0, 0, 1, 0), array(0, 1, 0,\
    \ 0), array(1, 1, 1, 1)), 1));\nprint_r(max_fill(array(array(0, 0, 1, 1), array(0,\
    \ 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2));\nprint_r(max_fill(array(array(0,\
    \ 0, 0), array(0, 0, 0)), 5));", "\t$count = 0;\n\t$row_count = count($grid);\n\
    \t$col_count = count($grid[0]);\n\t$row_index = 0;\n\t$col_index = 0;\n\t$row_index_max\
    \ = $row_count - 1;\n\t$col_index_max = $col_count - 1;\n\t$row_index_min = 0;\n\
    \t$col_index_min = 0;\n\twhile ($row_index_min <= $row_index_max && $col_index_min\
    \ <= $col_index_max) {\n\t\t$row_index = $row_index_min;\n\t\t$col_index = $col_index_min;\n\
    \t\twhile ($col_index <= $col_index_max) {\n\t\t\tif ($grid[$row_index][$col_index]\
    \ == 1) {\n\t\t\t\t$count += $capacity;\n\t\t\t}\n\t\t\t$col_index++;\n\t\t}\n\
    \t\t$row_index++;\n\t\twhile ($row_index <= $row_index_max) {\n\t\t\tif ($grid[$row_index][$col_index\
    \ - 1] == 1) {\n\t\t\t\t$count += $capacity;\n\t\t\t}\n\t\t\t$row_index++;\n\t\
    \t}\n\t\t$col_index--;\n\t\twhile ($col_index >= $col_index_min) {\n\t\t\tif ($grid[$row_index\
    \ - 1][$col_index] == 1) {\n\t\t\t\t$count += $capacity;\n\t\t\t}\n\t\t\t$col_index--;\n\
    \t\t}\n\t\t$row_index--;\n\t\twhile ($row_index > $row_index_min) {\n\t\t\tif\
    \ ($grid[$row_index - 1][$col_index + 1] == 1) {\n\t\t\t\t$count += $capacity;\n\
    \t\t\t}\n\t\t\t$row_index--;\n\t\t}\n\t\t$row_index_min++;\n\t\t$col_index_min++;\n\
    \t\t$row_index_max--;\n\t\t$col_index_", "    $wells = count($grid);\n    $units\
    \ = count($grid[0]);\n    $buckets = 0;\n    $current_bucket = 0;\n    $current_unit\
    \ = 0;\n    $current_well = 0;\n    while ($current_well < $wells) {\n       \
    \ if ($grid[$current_well][$current_unit] == 1) {\n            $current_bucket++;\n\
    \            if ($current_bucket == $capacity) {\n                $buckets++;\n\
    \                $current_bucket = 0;\n                $current_unit++;\n    \
    \            $current_well = 0;\n            }\n        }\n        $current_well++;\n\
    \    }\n    return $buckets;\n}\n", "    $num_rows = count($grid);\n    $num_cols\
    \ = count($grid[0]);\n    $num_buckets = $num_rows * $num_cols;\n    $num_buckets_filled\
    \ = 0;\n    $num_buckets_emptied = 0;\n    $num_buckets_filled_per_row = array_fill(0,\
    \ $num_rows, 0);\n    $num_buckets_emptied_per_row = array_fill(0, $num_rows,\
    \ 0);\n    $num_buckets_filled_per_col = array_fill(0, $num_cols, 0);\n    $num_buckets_emptied_per_col\
    \ = array_fill(0, $num_cols, 0);\n    $num_buckets_filled_per_row_per_col = array_fill(0,\
    \ $num_rows, array_fill(0, $num_cols, 0));\n    $num_buckets_emptied_per_row_per_col\
    \ = array_fill(0, $num_rows, array_fill(0, $num_cols, 0));\n    $num_buckets_filled_per_row_per_col_per_row\
    \ = array_fill(0, $num_rows, array_fill(0, $num_cols, array_fill(0, $num_rows,\
    \ 0)));\n    $num_buckets_emptied_per_row_per_col_per_row = array_fill(0, $num_rows,\
    \ array_fill(0, $num_cols, array_fill(0, $num_rows, 0)));\n    $num_buckets_filled_per_row_per_col_per_col\
    \ = array_fill(0, $num_rows, array_fill(0, $num_cols, array_fill(0, $num_cols,\
    \ 0)));\n    $num_buckets_emptied_per_row_per_col_per_col = array_fill(0, $num_rows,\
    \ array_fill(0, $num_cols, array_fill(0, $num_cols, 0)));\n    $num", "    $count\
    \ = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n    $bucket = $capacity;\n\
    \    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                if ($bucket > 0) {\n \
    \                   $bucket--;\n                    $grid[$i][$j] = 0;\n     \
    \           } else {\n                    $count++;\n                    $bucket\
    \ = $capacity - 1;\n                    $grid[$i][$j] = 0;\n                }\n\
    \            }\n        }\n    }\n    return $count;\n}", "\t$count = 0;\n\t$bucket\
    \ = 0;\n\t$max = 0;\n\t$i = 0;\n\t$j = 0;\n\t$len = count($grid);\n\t$len2 = count($grid[0]);\n\
    \twhile ($i < $len) {\n\t\t$j = 0;\n\t\twhile ($j < $len2) {\n\t\t\tif ($grid[$i][$j]\
    \ == 1) {\n\t\t\t\t$bucket++;\n\t\t\t\tif ($bucket > $max) {\n\t\t\t\t\t$max =\
    \ $bucket;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$j++;\n\t\t}\n\t\t$i++;\n\t}\n\t$count =\
    \ $max / $capacity;\n\tif ($max % $capacity != 0) {\n\t\t$count++;\n\t}\n\treturn\
    \ $count;\n}\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1,\
    \ 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);", "\t$max_fill = 0;\n\
    \t$grid_length = count($grid);\n\tfor ($i = 0; $i < $grid_length; $i++) {\n\t\t\
    $row_length = count($grid[$i]);\n\t\tfor ($j = 0; $j < $row_length; $j++) {\n\t\
    \t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$max_fill += $capacity;\n\t\t\t\t$grid[$i][$j]\
    \ = 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn $max_fill;\n}\n", "\t$count = 0;\n\t$rows\
    \ = count($grid);\n\t$cols = count($grid[0]);\n\tfor ($i = 0; $i < $rows; $i++)\
    \ {\n\t\tfor ($j = 0; $j < $cols; $j++) {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\
    \t\t\t$count += $capacity;\n\t\t\t\t$grid[$i][$j] = 0;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return $count;\n}", "    $count = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n\
    \    $max_row = 0;\n    $max_col = 0;\n    for ($i = 0; $i < $row; $i++) {\n \
    \       for ($j = 0; $j < $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n\
    \                $max_row = max($max_row, $i);\n                $max_col = max($max_col,\
    \ $j);\n            }\n        }\n    }\n    for ($i = 0; $i <= $max_row; $i++)\
    \ {\n        for ($j = 0; $j <= $max_col; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $count += $capacity;\n            }\n        }\n  \
    \  }\n    return $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0,\
    \ 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);",
  "    $grid = array_map(function($row) {\n        return array_sum($row);\n    },\
    \ $grid);\n    $max = max($grid);\n    $min = min($grid);\n    $count = 0;\n \
    \   while ($max > $min) {\n        $max -= $capacity;\n        $count++;\n   \
    \ }\n    return $count;\n}\n", "    $count = 0;\n    $row_count = count($grid);\n\
    \    $col_count = count($grid[0]);\n    $wells = [];\n    for ($i = 0; $i < $row_count;\
    \ $i++) {\n        for ($j = 0; $j < $col_count; $j++) {\n            if ($grid[$i][$j]\
    \ === 1) {\n                $wells[] = [$i, $j];\n            }\n        }\n \
    \   }\n    $well_count = count($wells);\n    for ($i = 0; $i < $well_count; $i++)\
    \ {\n        $well = $wells[$i];\n        $row = $well[0];\n        $col = $well[1];\n\
    \        $grid[$row][$col] = 0;\n        $count++;\n        $j = $i + 1;\n   \
    \     while ($j < $well_count) {\n            $well = $wells[$j];\n          \
    \  $row = $well[0];\n            $col = $well[1];\n            if ($grid[$row][$col]\
    \ === 1) {\n                $grid[$row][$col] = 0;\n                $count++;\n\
    \            }\n            $j++;\n        }\n    }\n    return $count;\n}\n\n\
    $grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity) . PHP_EOL;\n\n$grid = [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1],\
    \ [0, 1, 1, 1]];\n$capacity = 2;\necho max_fill($grid, $capacity) . PHP_EOL;\n\
    \n$grid = [[0, 0, 0], [0, 0, 0]];\n$capacity = 5;\necho max_fill($grid, $capacity)\
    \ . PHP_EOL;", "    $wells = count($grid);\n    $units = count($grid[0]);\n  \
    \  $buckets = 0;\n    for ($i = 0; $i < $wells; $i++) {\n        $buckets += array_sum($grid[$i]);\n\
    \    }\n    $buckets = ceil($buckets / $capacity);\n    return $buckets;\n}\n",
  "    $count = 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n    $bucket\
    \ = $capacity;\n    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0; $j <\
    \ $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n                if ($bucket\
    \ > 0) {\n                    $bucket--;\n                    $grid[$i][$j] =\
    \ 0;\n                } else {\n                    $count++;\n              \
    \      $bucket = $capacity;\n                    $bucket--;\n                \
    \    $grid[$i][$j] = 0;\n                }\n            }\n        }\n    }\n\
    \    return $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0),\
    \ array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);", "\t\
    $max_fill = 0;\n\t$row_count = count($grid);\n\t$col_count = count($grid[0]);\n\
    \tfor ($i = 0; $i < $row_count; $i++) {\n\t\tfor ($j = 0; $j < $col_count; $j++)\
    \ {\n\t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$max_fill += $capacity;\n\t\t\t\t\
    $grid[$i][$j] = 0;\n\t\t\t\t$grid = fill_neighbors($grid, $i, $j, $capacity -\
    \ 1);\n\t\t\t}\n\t\t}\n\t}\n\treturn $max_fill;\n}", "    $count = 0;\n    $row\
    \ = count($grid);\n    $col = count($grid[0]);\n    for ($i = 0; $i < $row; $i++)\
    \ {\n        for ($j = 0; $j < $col; $j++) {\n            if ($grid[$i][$j] ==\
    \ 1) {\n                $grid[$i][$j] = 0;\n                $count++;\n      \
    \          $capacity--;\n                if ($capacity == 0) {\n             \
    \       return $count;\n                }\n                $grid = fill_water($grid,\
    \ $i, $j, $capacity);\n                $capacity = $capacity + count_water($grid,\
    \ $i, $j);\n            }\n        }\n    }\n    return $count;\n}\n", "\t$count\
    \ = 0;\n\t$grid_length = count($grid);\n\t$grid_width = count($grid[0]);\n\t$buckets\
    \ = array_fill(0, $grid_length, $capacity);\n\t$buckets_count = count($buckets);\n\
    \t$buckets_filled = 0;\n\twhile ($buckets_filled < $buckets_count) {\n\t\tfor\
    \ ($i = 0; $i < $grid_length; $i++) {\n\t\t\tif ($buckets[$i] > 0) {\n\t\t\t\t\
    for ($j = 0; $j < $grid_width; $j++) {\n\t\t\t\t\tif ($grid[$i][$j] == 1) {\n\t\
    \t\t\t\t\t$grid[$i][$j] = 0;\n\t\t\t\t\t\t$buckets[$i]--;\n\t\t\t\t\t}\n\t\t\t\
    \t}\n\t\t\t} else {\n\t\t\t\t$buckets_filled++;\n\t\t\t}\n\t\t}\n\t\t$count++;\n\
    \t}\n\treturn $count;\n}\n\necho max_fill(array(array(0, 0, 1, 0), array(0, 1,\
    \ 0, 0), array(1, 1, 1, 1)), 1) . \"\\n\";\necho max_fill(array(array(0, 0, 1,\
    \ 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0, 1, 1, 1)), 2) . \"\\n\";\n\
    echo max_fill(array(array(0, 0, 0), array(0, 0, 0)), 5) . \"\\n\";", "\t$num_rows\
    \ = count($grid);\n\t$num_cols = count($grid[0]);\n\t$num_buckets = 0;\n\tfor\
    \ ($i = 0; $i < $num_rows; $i++) {\n\t\tfor ($j = 0; $j < $num_cols; $j++) {\n\
    \t\t\tif ($grid[$i][$j] == 1) {\n\t\t\t\t$num_buckets++;\n\t\t\t}\n\t\t}\n\t}\n\
    \t$num_buckets = $num_buckets / $capacity;\n\treturn $num_buckets;\n}\n\n$grid\
    \ = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity\
    \ = 1;\necho max_fill($grid, $capacity);", "    $count = 0;\n    $grid = array_map(function($row)\
    \ use ($capacity) {\n        return array_map(function($cell) use ($capacity)\
    \ {\n            return $cell * $capacity;\n        }, $row);\n    }, $grid);\n\
    \    $grid = array_map(function($row) use ($capacity) {\n        return array_sum($row);\n\
    \    }, $grid);\n    while (max($grid) > 0) {\n        $count++;\n        $grid\
    \ = array_map(function($cell) use ($capacity) {\n            return $cell - $capacity;\n\
    \        }, $grid);\n    }\n    return $count;\n}\n\n/*", "    $result = 0;\n\
    \    $row = count($grid);\n    $col = count($grid[0]);\n    for ($i = 0; $i <\
    \ $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $result += $capacity;\n                $grid[$i][$j]\
    \ = 0;\n                if ($i > 0 && $grid[$i - 1][$j] == 1) {\n            \
    \        $result += $capacity;\n                    $grid[$i - 1][$j] = 0;\n \
    \               }\n                if ($j > 0 && $grid[$i][$j - 1] == 1) {\n \
    \                   $result += $capacity;\n                    $grid[$i][$j -\
    \ 1] = 0;\n                }\n            }\n        }\n    }\n    return $result;\n\
    }\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n\
    $capacity = 1;\necho max_fill($grid, $capacity);", "    $fill_count = 0;\n   \
    \ $row_count = count($grid);\n    $col_count = count($grid[0]);\n    for ($i =\
    \ 0; $i < $row_count; $i++) {\n        for ($j = 0; $j < $col_count; $j++) {\n\
    \            if ($grid[$i][$j] == 1) {\n                $grid[$i][$j] = 0;\n \
    \               $fill_count++;\n                $fill_count += fill_well($grid,\
    \ $capacity, $i, $j);\n            }\n        }\n    }\n    return $fill_count;\n\
    }\n", "    $count = 0;\n    $grid = array_reverse($grid);\n    foreach ($grid\
    \ as $row) {\n        $row = array_reverse($row);\n        $sum = 0;\n       \
    \ foreach ($row as $cell) {\n            $sum += $cell;\n            if ($sum\
    \ > $capacity) {\n                $count += $sum - $capacity;\n              \
    \  $sum = $capacity;\n            }\n        }\n    }\n    return $count;\n}\n\
    \n/*", "    $n = count($grid);\n    $m = count($grid[0]);\n    $count = 0;\n \
    \   for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n   \
    \         if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n  \
    \              $grid[$i][$j] = 0;\n                if ($i > 0 && $grid[$i - 1][$j]\
    \ == 1) {\n                    $count--;\n                    $grid[$i - 1][$j]\
    \ = 0;\n                }\n                if ($j > 0 && $grid[$i][$j - 1] ==\
    \ 1) {\n                    $count--;\n                    $grid[$i][$j - 1] =\
    \ 0;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }\n", "    $buckets = 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++)\
    \ {\n            if ($grid[$i][$j] == 1) {\n                $buckets++;\n    \
    \            $grid[$i][$j] = 0;\n                $capacity--;\n              \
    \  if ($capacity == 0) {\n                    $buckets++;\n                  \
    \  $capacity = $capacity + $cols;\n                }\n            }\n        }\n\
    \    }\n    return $buckets;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1,\
    \ 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);\n\
    echo \"\\n\";\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1,\
    \ 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid, $capacity);\n\
    echo \"\\n\";\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity = 5;\n\
    echo max_fill($grid, $capacity);\necho \"\\n\";", "    $count = 0;\n    $grid\
    \ = array_map('array_sum', $grid);\n    foreach ($grid as $row) {\n        $count\
    \ += ceil($row / $capacity);\n    }\n    return $count;\n}\n\n$grid = array(\n\
    \    array(0, 0, 1, 0),\n    array(0, 1, 0, 0),\n    array(1, 1, 1, 1)\n);\necho\
    \ max_fill($grid, 1);\necho \"\\n\";\n$grid = array(\n    array(0, 0, 1, 1),\n\
    \    array(0, 0, 0, 0),\n    array(1, 1, 1, 1),\n    array(0, 1, 1, 1)\n);\necho\
    \ max_fill($grid, 2);\necho \"\\n\";\n$grid = array(\n    array(0, 0, 0),\n  \
    \  array(0, 0, 0)\n);\necho max_fill($grid, 5);\necho \"\\n\";", "    $total =\
    \ 0;\n    $rows = count($grid);\n    $cols = count($grid[0]);\n    $wells = [];\n\
    \    for ($i = 0; $i < $rows; $i++) {\n        $wells[$i] = [];\n        for ($j\
    \ = 0; $j < $cols; $j++) {\n            $wells[$i][$j] = $grid[$i][$j];\n    \
    \        $total += $grid[$i][$j];\n        }\n    }\n    $count = 0;\n    while\
    \ ($total > 0) {\n        $count++;\n        for ($i = 0; $i < $rows; $i++) {\n\
    \            for ($j = 0; $j < $cols; $j++) {\n                if ($wells[$i][$j]\
    \ > 0) {\n                    $wells[$i][$j] = max(0, $wells[$i][$j] - $capacity);\n\
    \                    $total -= $capacity;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);\n\
    echo \"\\n\";\n\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1,\
    \ 1, 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid, $capacity);\n\
    echo \"\\n\";\n\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity = 5;\n\
    echo max_fill($grid, $capacity);\necho \"\\n\";", "    $count = 0;\n    $row =\
    \ count($grid);\n    $col = count($grid[0]);\n    $max = 0;\n    for ($i = 0;\
    \ $i < $row; $i++) {\n        for ($j = 0; $j < $col; $j++) {\n            if\
    \ ($grid[$i][$j] == 1) {\n                $count++;\n            }\n        }\n\
    \        $max = max($max, $count);\n        $count = 0;\n    }\n    return $max\
    \ * $capacity;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1,\
    \ 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);", "    $count =\
    \ 0;\n    $row = count($grid);\n    $col = count($grid[0]);\n    $max_row = 0;\n\
    \    $max_col = 0;\n    for ($i = 0; $i < $row; $i++) {\n        for ($j = 0;\
    \ $j < $col; $j++) {\n            if ($grid[$i][$j] == 1) {\n                $max_row\
    \ = max($max_row, $i);\n                $max_col = max($max_col, $j);\n      \
    \      }\n        }\n    }\n    for ($i = 0; $i <= $max_row; $i++) {\n       \
    \ for ($j = 0; $j <= $max_col; $j++) {\n            if ($grid[$i][$j] == 1) {\n\
    \                $count += $capacity;\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1,\
    \ 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);", "    $count = 0;\n\
    \    $rows = count($grid);\n    $cols = count($grid[0]);\n    $max = 0;\n    for\
    \ ($i = 0; $i < $rows; $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n   \
    \         if ($grid[$i][$j] == 1) {\n                $count++;\n            }\n\
    \        }\n        $max = max($max, $count);\n        $count = 0;\n    }\n  \
    \  return $max * $capacity;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1,\
    \ 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);\n\
    \n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0), array(1, 1, 1, 1), array(0,\
    \ 1, 1, 1));\n$capacity = 2;\necho max_fill($grid, $capacity);\n\n$grid = array(array(0,\
    \ 0, 0), array(0, 0, 0));\n$capacity = 5;\necho max_fill($grid, $capacity);",
  "\t$total = 0;\n\t$max = 0;\n\t$rows = count($grid);\n\t$cols = count($grid[0]);\n\
    \tfor ($i = 0; $i < $rows; $i++) {\n\t\tfor ($j = 0; $j < $cols; $j++) {\n\t\t\
    \t$total += $grid[$i][$j];\n\t\t\tif ($grid[$i][$j] > $max) {\n\t\t\t\t$max =\
    \ $grid[$i][$j];\n\t\t\t}\n\t\t}\n\t}\n\tif ($total == 0) {\n\t\treturn 0;\n\t\
    }\n\tif ($capacity >= $max) {\n\t\treturn $total;\n\t}\n\t$min = $total;\n\tfor\
    \ ($i = $max; $i <= $capacity; $i++) {\n\t\t$curr = 0;\n\t\tfor ($j = 0; $j <\
    \ $rows; $j++) {\n\t\t\t$curr += max($grid[$j]);\n\t\t}\n\t\tif ($curr < $min)\
    \ {\n\t\t\t$min = $curr;\n\t\t}\n\t}\n\treturn $min;\n}\n\n$grid = array(array(0,\
    \ 0, 1, 0), array(0, 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";\n\n$grid = array(array(0, 0, 1, 1), array(0, 0, 0, 0),\
    \ array(1, 1, 1, 1), array(0, 1, 1, 1));\n$capacity = 2;\necho max_fill($grid,\
    \ $capacity) . \"\\n\";\n\n$grid = array(array(0, 0, 0), array(0, 0, 0));\n$capacity\
    \ = 5;\necho max_fill($grid, $capacity) . \"\\n\";", "    $total_water = 0;\n\
    \    $total_buckets = 0;\n    $max_row_water = 0;\n    $max_row_index = 0;\n \
    \   $max_row_water_index = 0;\n    $max_row_water_index_2 = 0;\n    $max_row_water_index_3\
    \ = 0;\n    $max_row_water_index_4 = 0;\n    $max_row_water_index_5 = 0;\n   \
    \ $max_row_water_index_6 = 0;\n    $max_row_water_index_7 = 0;\n    $max_row_water_index_8\
    \ = 0;\n    $max_row_water_index_9 = 0;\n    $max_row_water_index_10 = 0;\n  \
    \  $max_row_water_index_11 = 0;\n    $max_row_water_index_12 = 0;\n    $max_row_water_index_13\
    \ = 0;\n    $max_row_water_index_14 = 0;\n    $max_row_water_index_15 = 0;\n \
    \   $max_row_water_index_16 = 0;\n    $max_row_water_index_17 = 0;\n    $max_row_water_index_18\
    \ = 0;\n    $max_row_water_index_19 = 0;\n    $max_row_water_index_20 = 0;\n \
    \   $max_row_water_index_21 = 0;\n    $max_row_water_index_22 = 0;\n    $max_row_water_index_23\
    \ = 0;\n    $max_row_water_index_24 = 0;\n    $max_row_water_index_25 = 0;\n \
    \   $max_row_water_index_26 = 0;\n    $max_row_water_index_27 = 0;\n    $max_row_water_index_28\
    \ = 0;\n    $max_row_water_index_29 = 0;\n    $max_row_water_index_30 = 0;\n \
    \   $max_row_water_index_31 = 0;\n    $max_row_water", "    $count = 0;\n    $row_length\
    \ = count($grid[0]);\n    $col_length = count($grid);\n    for ($i = 0; $i < $row_length;\
    \ $i++) {\n        $row_sum = 0;\n        for ($j = 0; $j < $col_length; $j++)\
    \ {\n            $row_sum += $grid[$j][$i];\n        }\n        $count += floor($row_sum\
    \ / $capacity);\n        if ($row_sum % $capacity > 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0,\
    \ 1, 0, 0), array(1, 1, 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);",
  "    $count = 0;\n    $grid_length = count($grid);\n    $grid_width = count($grid[0]);\n\
    \    for ($i = 0; $i < $grid_length; $i++) {\n        for ($j = 0; $j < $grid_width;\
    \ $j++) {\n            if ($grid[$i][$j] == 1) {\n                $count += $capacity;\n\
    \                $grid[$i][$j] = 0;\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n$grid = array(array(0, 0, 1, 0), array(0, 1, 0, 0), array(1, 1,\
    \ 1, 1));\n$capacity = 1;\necho max_fill($grid, $capacity);", "    $result = 0;\n\
    \    $rows = count($grid);\n    $cols = count($grid[0]);\n    $row_max = array_fill(0,\
    \ $rows, 0);\n    $col_max = array_fill(0, $cols, 0);\n    for ($i = 0; $i < $rows;\
    \ $i++) {\n        for ($j = 0; $j < $cols; $j++) {\n            if ($grid[$i][$j]\
    \ == 1) {\n                $row_max[$i]++;\n                $col_max[$j]++;\n\
    \            }\n        }\n    }\n    for ($i = 0; $i < $rows; $i++) {\n     \
    \   for ($j = 0; $j < $cols; $j++) {\n            $result += min($row_max[$i],\
    \ $col_max[$j]);\n        }\n    }\n    return $result * $capacity;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
