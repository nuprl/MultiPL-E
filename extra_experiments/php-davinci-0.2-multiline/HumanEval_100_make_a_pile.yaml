name: HumanEval_100_make_a_pile
language: php
prompt: "<?php\n/* Given a positive integer n, you have to make a pile of n levels\
  \ of stones.\nThe first level has n stones.\nThe number of stones in the next level\
  \ is:\n- the next odd number if n is odd.\n- the next even number if n is even.\n\
  Return the number of stones in each level in an array, where element at index\n\
  i represents the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\n\
  array(3, 5, 7)*/\nfunction make_a_pile($n) {\n"
tests: "function candidate(...$args) {\n    return make_a_pile(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(3) !== array(3, 5, 7)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(4) !== array(4, 6, 8, 10)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5) !== array(5, 7, 9, 11, 13)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(6) !== array(6, 8, 10, 12, 14,\
  \ 16)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== array(8,\
  \ 10, 12, 14, 16, 18, 20, 22)) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n;\n        $n += $n % 2 ? 2 : 1;\n    }\n    return $result;\n}\n\n/* Given\
    \ a positive integer n, you have to make a pile of n levels of stones.\nThe first\
    \ level has n stones.\nThe number of stones in the next level is:\n- the next\
    \ odd number if n is odd.\n- the next even number if n is even.\nReturn the number\
    \ of stones in each level in an array, where element at index\ni represents the\
    \ number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n;\n        $n += ($n % 2 == 0) ? 2 : 1;\n    }\n    return $result;\n}\n\
    print_r(make_a_pile(3));", "    $result = array();\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        if ($i == 0) {\n            $result[] = $n;\n        } else\
    \ {\n            if ($result[$i - 1] % 2 == 0) {\n                $result[] =\
    \ $result[$i - 1] + 2;\n            } else {\n                $result[] = $result[$i\
    \ - 1] + 1;\n            }\n        }\n    }\n    return $result;\n}\n\n/* Given\
    \ a positive integer n, you have to make a pile of n levels of stones.\nThe first\
    \ level has n stones.\nThe number of stones in the next level is:\n- the next\
    \ odd number if n is odd.\n- the next even number if n is even.\nReturn the number\
    \ of stones in each level in an array, where element at index\ni represents the\
    \ number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $arr = [];\n    for ($i = 0; $i < $n; $i++) {\n        $arr[]\
    \ = $n;\n        if ($n % 2 == 0) {\n            $n++;\n        } else {\n   \
    \         $n += 2;\n        }\n    }\n    return $arr;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n +\
    \ 2 * $i;\n    }\n    return $result;\n}\n\n/* Given an array of integers, return\
    \ the sum of the integers with the same\nindex as the first even number.\nExamples:\n\
    >>> sum_of_even_indexed([1, 2, 3, 4, 5, 6])\n9\n>>> sum_of_even_indexed([1, 3,\
    \ 5])\n0\n>>> sum_of_even_indexed([0, 1, 2, 3, 4, 5])\n6\n>>> sum_of_even_indexed([1,\
    \ 2, 3, 4, 5])\n9*/", "  $result = array();\n  $result[] = $n;\n  while ($n >\
    \ 1) {\n    if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n\
    \ + 1) / 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n}\n\n/* Given\
    \ a positive integer n, you have to make a pile of n levels of stones.\nThe first\
    \ level has n stones.\nThe number of stones in the next level is:\n- the next\
    \ odd number if n is odd.\n- the next even number if n is even.\nReturn the number\
    \ of stones in each level in an array, where element at index\ni represents the\
    \ number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   if ($i == 0) {\n            $result[] = $n;\n        } else {\n          \
    \  if ($result[$i - 1] % 2 == 0) {\n                $result[] = $result[$i - 1]\
    \ + 2;\n            } else {\n                $result[] = $result[$i - 1] + 1;\n\
    \            }\n        }\n    }\n    return $result;\n}\n\n/* Given an array\
    \ of integers, return the sum of the integers that are\ndivisible by 3.\nExamples:\n\
    >>> sum_of_3([1, 2, 3, 4, 5, 6, 7, 8, 9])\n18\n>>> sum_of_3([0, 3, 6, 9, 12, 15,\
    \ 18])\n54\n>>> sum_of_3([-1, -2, -3, -4, -5, -6, -7, -8, -9])\n-45*/", "  $result\
    \ = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n;\n    $n = ($n\
    \ % 2 == 0) ? $n + 2 : $n + 1;\n  }\n  return $result;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "    $arr = array();\n    for ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n\
    \            $arr[] = $n;\n        } else {\n            if ($arr[$i - 1] % 2\
    \ == 0) {\n                $arr[] = $arr[$i - 1] + 2;\n            } else {\n\
    \                $arr[] = $arr[$i - 1] + 1;\n            }\n        }\n    }\n\
    \    return $arr;\n}\n\n/* Given a positive integer n, you have to make a pile\
    \ of n levels of stones.\nThe first level has n stones.\nThe number of stones\
    \ in the next level is:\n- the next odd number if n is odd.\n- the next even number\
    \ if n is even.\nReturn the number of stones in each level in an array, where\
    \ element at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = array();\n    $result[]\
    \ = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n\
    \ / 2;\n        } else {\n            $n = ($n + 1) / 2;\n        }\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n\n/* Given a positive integer n, you have\
    \ to make a pile of n levels of stones.\nThe first level has n stones.\nThe number\
    \ of stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = array();\n  \
    \  $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n       \
    \     $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n       \
    \ }\n        $result[] = $n;\n    }\n    return $result;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[] =\
    \ $n;\n        $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "  $arr = array();\n  $arr[] = $n;\n  $i = 0;\n  while ($n > 0) {\n\
    \    if ($n % 2 == 0) {\n      $n = $n / 2;\n      $arr[] = $n;\n    } else {\n\
    \      $n = ($n + 1) / 2;\n      $arr[] = $n;\n    }\n  }\n  return $arr;\n}\n\
    print_r(make_a_pile(3));", "    $result = array();\n    $result[] = $n;\n    while\
    \ ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        }\
    \ else {\n            $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n\
    \    }\n    return $result;\n}\n\nprint_r(make_a_pile(3));", "    $result = array();\n\
    \    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\n\n$n = 3;\nprint_r(make_a_pile($n));",
  "    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n\
    \        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n    \
    \        $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are\ndivisible by 3.\nExamples:\n>>> sum_divisible_by_3([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9])\n18\n>>> sum_divisible_by_3([0, 3, 5, 6, 9])\n18*/", "    $result\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n   \
    \     $n = ($n % 2 == 0) ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n\n\
    /* Given a string, return a new string where the first and last chars have been\n\
    exchanged.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n\
    >>> front_back('ab')\n'ba'*/", "    $arr = array();\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $arr[] = $n;\n        if ($n % 2 == 0) {\n            $n +=\
    \ 2;\n        } else {\n            $n += 1;\n        }\n    }\n    return $arr;\n\
    }\nprint_r(make_a_pile(3));", "    $result = array();\n    $result[] = $n;\n \
    \   while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n \
    \       } else {\n            $n = ($n + 1) / 2;\n        }\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n\n/* Given a positive integer n, you have\
    \ to make a pile of n levels of stones.\nThe first level has n stones.\nThe number\
    \ of stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = array();\n  \
    \  for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n        if ($n % 2\
    \ == 0) {\n            $n++;\n        } else {\n            $n += 2;\n       \
    \ }\n    }\n    return $result;\n}\n\necho \"<pre>\";\nprint_r(make_a_pile(3));\n\
    echo \"</pre>\";\n\n/* Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\nThe first level has n stones.\nThe number of stones in\
    \ the next level is:\n- the next odd number if n is odd.\n- the next even number\
    \ if n is even.\nReturn the number of stones in each level in an array, where\
    \ element at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "    $arr = array();\n    $arr[] = $n;\n\
    \    while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n\
    \        } else {\n            $n = ($n + 1) / 2;\n        }\n        $arr[] =\
    \ $n;\n    }\n    return $arr;\n}\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(4));\n\
    print_r(make_a_pile(5));\nprint_r(make_a_pile(6));\nprint_r(make_a_pile(7));\n\
    print_r(make_a_pile(8));\nprint_r(make_a_pile(9));\nprint_r(make_a_pile(10));",
  "  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 ==\
    \ 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n  \
    \  $result[] = $n;\n  }\n  return $result;\n}\n\n/* Given a positive integer n,\
    \ you have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result\
    \ = array();\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 ==\
    \ 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n + 1)\
    \ / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n}", " \
    \ $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n + 2\
    \ * $i;\n  }\n  return $result;\n}\n\n/* Given a positive integer n, you have\
    \ to make a pile of n levels of stones.\nThe first level has n stones.\nThe number\
    \ of stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "  $result = array();\n  $result[]\
    \ = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n / 2;\n    }\
    \ else {\n      $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n  }\n  return\
    \ $result;\n}\n\n/* Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\nThe first level has n stones.\nThe number of stones in the next\
    \ level is:\n- the next odd number if n is odd.\n- the next even number if n is\
    \ even.\nReturn the number of stones in each level in an array, where element\
    \ at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "    $arr = [];\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        $arr[] = $n;\n        $n = ($n % 2 == 0) ? $n + 2 : $n\
    \ + 1;\n    }\n    return $arr;\n}\n\n/* Given a positive integer n, you have\
    \ to make a pile of n levels of stones.\nThe first level has n stones.\nThe number\
    \ of stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "  $result = array();\n  for\
    \ ($i = 0; $i < $n; $i++) {\n    $result[] = $n + 2 * $i;\n  }\n  return $result;\n\
    }\n\n/* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n\
    \        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n    \
    \        $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\nprint_r(make_a_pile(3));", "  $stones = [$n];\n  while ($n > 1)\
    \ {\n    $n = $n % 2 ? $n + 2 : $n + 1;\n    $stones[] = $n;\n  }\n  return $stones;\n\
    }\n\n/* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n   \
    \ if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) /\
    \ 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[] =\
    \ $n + 2 * $i;\n    }\n    return $result;\n}\n\n/* Given a positive integer n,\
    \ you have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $arr =\
    \ array();\n    $arr[] = $n;\n    for ($i = 1; $i < $n; $i++) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n + 2;\n            $arr[] = $n;\n        } else\
    \ {\n            $n = $n + 1;\n            $arr[] = $n;\n        }\n    }\n  \
    \  return $arr;\n}\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(4));", "   \
    \ $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ - 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   if ($i == 0) {\n            $result[] = $n;\n        } else {\n          \
    \  if ($result[$i - 1] % 2 == 0) {\n                $result[] = $result[$i - 1]\
    \ + 2;\n            } else {\n                $result[] = $result[$i - 1] + 1;\n\
    \            }\n        }\n    }\n    return $result;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n + 2 *\
    \ $i;\n  }\n  return $result;\n}\necho '<pre>';\nprint_r(make_a_pile(3));\necho\
    \ '</pre>';", "    $result = array();\n    $result[] = $n;\n    while ($n > 1)\
    \ {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n\
    \            $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n \
    \   return $result;\n}\nprint_r(make_a_pile(3));", "    $result = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n            $result[] = $n;\n\
    \        } else {\n            $result[] = $result[$i - 1] + 2;\n        }\n \
    \   }\n    return $result;\n}\n\n/* Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\nThe first level has n stones.\nThe number of\
    \ stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n            $result[] = $n;\n\
    \        } else {\n            $result[] = $result[$i - 1] + 2;\n        }\n \
    \   }\n    return $result;\n}\n\n/* Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\nThe first level has n stones.\nThe number of\
    \ stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = array();\n  \
    \  for ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n            $result[]\
    \ = $n;\n        } else {\n            if ($result[$i - 1] % 2 == 0) {\n     \
    \           $result[] = $result[$i - 1] + 2;\n            } else {\n         \
    \       $result[] = $result[$i - 1] + 1;\n            }\n        }\n    }\n  \
    \  return $result;\n}\n\n/* Given an array of integers, return an array of the\
    \ same size where the\nelement at each index is the product of all the elements\
    \ in the original\narray except for the element at that index.\nFor example, an\
    \ input of [1, 2, 3, 4, 5] should return [120, 60, 40, 30, 24].\nYou cannot use\
    \ division in this problem.\nExamples:\n>>> product_of_all_other_numbers([1, 2,\
    \ 3, 4, 5])\narray(120, 60, 40, 30, 24)\n>>> product_of_all_other_numbers([3,\
    \ 2, 1])\narray(2, 3, 6)*/", "    $result = array();\n    $result[] = $n;\n  \
    \  while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n  \
    \      } else {\n            $n = ($n + 1) / 2;\n        }\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n\n/* Given a positive integer n, you have\
    \ to make a pile of n levels of stones.\nThe first level has n stones.\nThe number\
    \ of stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = array();\n  \
    \  for ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n            $result[]\
    \ = $n;\n        } else {\n            if ($result[$i - 1] % 2 == 0) {\n     \
    \           $result[] = $result[$i - 1] + 2;\n            } else {\n         \
    \       $result[] = $result[$i - 1] + 1;\n            }\n        }\n    }\n  \
    \  return $result;\n}\n\nprint_r(make_a_pile(3));", "    $result = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n        $n = $n % 2 == 0\
    \ ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n\n/* Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n + 2 *\
    \ $i;\n    }\n    return $result;\n}\n\n/* Given a positive integer n, you have\
    \ to make a pile of n levels of stones.\nThe first level has n stones.\nThe number\
    \ of stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = array();\n  \
    \  for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n        $n = ($n %\
    \ 2 == 0) ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "    $arr = [];\n    for ($i = 0; $i < $n; $i++) {\n        $arr[] = $n;\n     \
    \   if ($n % 2 == 0) {\n            $n += 2;\n        } else {\n            $n\
    \ += 1;\n        }\n    }\n    return $arr;\n}\n\n/* Given an array of integers,\
    \ return the sum of all the elements.\nExamples:\n>>> sum_of_elements(array(1,\
    \ 2, 3, 4, 5))\n15\n>>> sum_of_elements(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\
    55*/", "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n;\n        if ($n % 2 == 0) {\n            $n += 2;\n        } else {\n\
    \            $n += 1;\n        }\n    }\n    return $result;\n}\n\n/* Given a\
    \ positive integer n, you have to make a pile of n levels of stones.\nThe first\
    \ level has n stones.\nThe number of stones in the next level is:\n- the next\
    \ odd number if n is odd.\n- the next even number if n is even.\nReturn the number\
    \ of stones in each level in an array, where element at index\ni represents the\
    \ number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n\
    \        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n    \
    \        $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\n/* Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\nThe first level has n stones.\nThe number of stones in the next\
    \ level is:\n- the next odd number if n is odd.\n- the next even number if n is\
    \ even.\nReturn the number of stones in each level in an array, where element\
    \ at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "  $result = array();\n  for ($i = 0; $i\
    \ < $n; $i++) {\n    $result[] = $n;\n    $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n\
    \  }\n  return $result;\n}\n\n/* Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\nThe first level has n stones.\nThe number of\
    \ stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = array();\n  \
    \  $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n       \
    \     $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n       \
    \ }\n        $result[] = $n;\n    }\n    return $result;\n}\n\nprint_r(make_a_pile(3));\n\
    print_r(make_a_pile(4));\nprint_r(make_a_pile(5));\nprint_r(make_a_pile(6));\n\
    print_r(make_a_pile(7));\nprint_r(make_a_pile(8));\nprint_r(make_a_pile(9));\n\
    print_r(make_a_pile(10));\nprint_r(make_a_pile(11));\nprint_r(make_a_pile(12));\n\
    print_r(make_a_pile(13));\nprint_r(make_a_pile(14));\nprint_r(make_a_pile(15));\n\
    print_r(make_a_pile(16));\nprint_r(make_a_pile(17));\nprint_r(make_a_pile(18));\n\
    print_r(make_a_pile(19));\nprint_r(make_a_pile(20));\nprint_r(make_a_pile(21));\n\
    print_r(make_a_pile(22));\nprint_r(make_a_pile(23));\nprint_r(make_a_pile(24));\n\
    print_r(make_a_pile(25));\nprint_r(make_a_pile(26));\nprint_r(make_a_pile(27));\n\
    print_r(make_a_pile(28));\nprint_r(make_a_pile(29));\nprint_r(make_a_pile(30));\n\
    print_r(make_a_pile(31));\nprint_r(make_a_pile(32));\nprint_r", "    $result =\
    \ array();\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0)\
    \ {\n            $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n\
    \        }\n        $result[] = $n;\n    }\n    return $result;\n}\necho '<pre>';\n\
    print_r(make_a_pile(3));\necho '</pre>';\n\n/* Given a positive integer n, you\
    \ have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $pile =\
    \ array();\n    $pile[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0)\
    \ {\n            $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n\
    \        }\n        $pile[] = $n;\n    }\n    return $pile;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "    $arr = array();\n    for ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n\
    \            $arr[] = $n;\n        } else {\n            if ($arr[$i - 1] % 2\
    \ == 0) {\n                $arr[] = $arr[$i - 1] + 2;\n            } else {\n\
    \                $arr[] = $arr[$i - 1] + 1;\n            }\n        }\n    }\n\
    \    return $arr;\n}\n\n/* Given a positive integer n, you have to make a pile\
    \ of n levels of stones.\nThe first level has n stones.\nThe number of stones\
    \ in the next level is:\n- the next odd number if n is odd.\n- the next even number\
    \ if n is even.\nReturn the number of stones in each level in an array, where\
    \ element at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "    $arr = [];\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        if ($i == 0) {\n            $arr[] = $n;\n        } else\
    \ {\n            if ($arr[$i - 1] % 2 == 0) {\n                $arr[] = $arr[$i\
    \ - 1] + 2;\n            } else {\n                $arr[] = $arr[$i - 1] + 1;\n\
    \            }\n        }\n    }\n    return $arr;\n}\n\n/* Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $arr =\
    \ [];\n    $i = 0;\n    while ($n > 0) {\n        $arr[$i] = $n;\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $i++;\n    }\n    return $arr;\n}\n\n/* Given\
    \ a positive integer n, you have to make a pile of n levels of stones.\nThe first\
    \ level has n stones.\nThe number of stones in the next level is:\n- the next\
    \ odd number if n is odd.\n- the next even number if n is even.\nReturn the number\
    \ of stones in each level in an array, where element at index\ni represents the\
    \ number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\n/* Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "  $result =\
    \ array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n  \
    \    $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[]\
    \ = $n;\n  }\n  return $result;\n}\n\n/* Given a positive integer n, you have\
    \ to make a pile of n levels of stones.\nThe first level has n stones.\nThe number\
    \ of stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = array();\n  \
    \  for ($i = 0; $i < $n; $i++) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $n + $i;\n        } else {\n            $result[] = $n + $i + 1;\n       \
    \ }\n    }\n    return $result;\n}\n\n/* Given a string, return a new string with\
    \ the first and last character\nof the given string.\nExamples:\n>>> first_and_last(\"\
    hello\")\n\"ho\"\n>>> first_and_last(\"a\")\n\"a\"\n>>> first_and_last(\"\")\n\
    \"\"*/", "    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n\
    \        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n    \
    \        $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\necho \"<pre>\";\nprint_r(make_a_pile(3));\necho \"</pre>\";\n\
    \necho \"<pre>\";\nprint_r(make_a_pile(4));\necho \"</pre>\";\n\necho \"<pre>\"\
    ;\nprint_r(make_a_pile(5));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(make_a_pile(6));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(make_a_pile(7));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(make_a_pile(8));\necho \"</pre>\";\n\necho \"<pre>\"\
    ;\nprint_r(make_a_pile(9));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(make_a_pile(10));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(make_a_pile(11));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(make_a_pile(12));\necho \"</pre>\";\n\necho \"<pre>\"\
    ;\nprint_r(make_a_pile(13));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(make_a_pile(14));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(make_a_pile(15));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(make_a_pile(16));\necho \"</pre>\";\n\necho \"<pre>\"\
    ;\nprint_r(make_a_pile(17));\necho \"</pre>\";\n\necho \"<pre", "    $pile = array();\n\
    \    $pile[] = $n;\n    while ($n > 1) {\n        $n = ($n % 2 == 0) ? $n - 1\
    \ : $n - 2;\n        $pile[] = $n;\n    }\n    return $pile;\n}\n\n/* Given an\
    \ array of integers, return an array of the same size where the element\nat each\
    \ index is the product of all the elements in the original array except\nfor the\
    \ element at that index.\nFor example, an input of [1, 2, 3, 4, 5] should return\
    \ [120, 60, 40, 30, 24].\nYou cannot use division in this problem.\nExamples:\n\
    >>> product_of_all_other_numbers([1, 2, 3, 4, 5])\narray(120, 60, 40, 30, 24)\n\
    >>> product_of_all_other_numbers([3, 2, 1])\narray(2, 3, 6)*/", "    $result =\
    \ array();\n    $result[] = $n;\n    $i = 0;\n    while ($n > 0) {\n        if\
    \ ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n\
    \ = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\nprint_r(make_a_pile(3));", "    $result = array();\n    $result[] = $n;\n \
    \   while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n \
    \       } else {\n            $n = ($n + 1) / 2;\n        }\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n\n/* Given an array of integers, return\
    \ the sum of the integers that are\nmultiples of 3 or 5.\nExamples:\n>>> sum_multiples_of_3_or_5(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n33\n>>> sum_multiples_of_3_or_5(array(0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10))\n33\n>>> sum_multiples_of_3_or_5(array(0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n60\n>>> sum_multiples_of_3_or_5(array(0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))\n78\n\
    >>> sum_multiples_of_3_or_5(array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))\n195\n\
    >>> sum_multiples_of_3_or_5(array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,\
    \ 33, 34, 35, 36, 37, 38, 39, 40))\n208\n>>> sum_multiples_of_3_or_5(array(0,\
    \ 1, 2,", "    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n\
    \        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n    \
    \        $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\nprint_r(make_a_pile(3));", "    $result = array();\n    $result[]\
    \ = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n\
    \ / 2;\n        } else {\n            $n = ($n + 1) / 2;\n        }\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(4));\n\
    print_r(make_a_pile(5));\nprint_r(make_a_pile(6));\nprint_r(make_a_pile(7));\n\
    print_r(make_a_pile(8));\nprint_r(make_a_pile(9));\nprint_r(make_a_pile(10));\n\
    print_r(make_a_pile(11));\nprint_r(make_a_pile(12));\nprint_r(make_a_pile(13));\n\
    print_r(make_a_pile(14));\nprint_r(make_a_pile(15));\nprint_r(make_a_pile(16));\n\
    print_r(make_a_pile(17));\nprint_r(make_a_pile(18));\nprint_r(make_a_pile(19));\n\
    print_r(make_a_pile(20));\nprint_r(make_a_pile(21));\nprint_r(make_a_pile(22));\n\
    print_r(make_a_pile(23));\nprint_r(make_a_pile(24));\nprint_r(make_a_pile(25));\n\
    print_r(make_a_pile(26));\nprint_r(make_a_pile(27));\nprint_r(make_a_pile(28));\n\
    print_r(make_a_pile(29));\nprint_r(make_a_pile(30));\nprint_r(make_a_pile(31));\n\
    print_r(make_a_pile(32));\nprint_r", "    $result = [];\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        $result[] = $n;\n        if ($n % 2 == 0) {\n         \
    \   $n += 2;\n        } else {\n            $n += 1;\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\nThe first level has n stones.\nThe number of stones in the next\
    \ level is:\n- the next odd number if n is odd.\n- the next even number if n is\
    \ even.\nReturn the number of stones in each level in an array, where element\
    \ at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = [];\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        $result[] = $n;\n        $n = $n % 2 == 0 ? $n + 2 :\
    \ $n + 1;\n    }\n    return $result;\n}\n\n/* Given a positive integer n, you\
    \ have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $arr =\
    \ array();\n    for ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n      \
    \      $arr[] = $n;\n        } else {\n            if ($arr[$i - 1] % 2 == 0)\
    \ {\n                $arr[] = $arr[$i - 1] + 2;\n            } else {\n      \
    \          $arr[] = $arr[$i - 1] + 1;\n            }\n        }\n    }\n    return\
    \ $arr;\n}\nprint_r(make_a_pile(3));", "    $result = array();\n    $result[]\
    \ = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n\
    \ / 2;\n        } else {\n            $n = ($n + 1) / 2;\n        }\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n\n/* Given a positive integer n, you have\
    \ to make a pile of n levels of stones.\nThe first level has n stones.\nThe number\
    \ of stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = array();\n  \
    \  for ($i = 0; $i < $n; $i++) {\n        $result[] = $n + 2 * $i;\n    }\n  \
    \  return $result;\n}\n\n/* Given an array of integers, return the number of odd\
    \ numbers in the array.\nExamples:\n>>> count_odds(array(1, 2, 3, 4, 5))\n3\n\
    >>> count_odds(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n5\n>>> count_odds(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n8*/", "    $result = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n            $result[]\
    \ = $n;\n        } else {\n            if ($result[$i - 1] % 2 == 0) {\n     \
    \           $result[] = $result[$i - 1] + 2;\n            } else {\n         \
    \       $result[] = $result[$i - 1] + 1;\n            }\n        }\n    }\n  \
    \  return $result;\n}\n\n/* Given a positive integer n, you have to make a pile\
    \ of n levels of stones.\nThe first level has n stones.\nThe number of stones\
    \ in the next level is:\n- the next odd number if n is odd.\n- the next even number\
    \ if n is even.\nReturn the number of stones in each level in an array, where\
    \ element at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = array();\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        $result[] = $n + 2 * $i;\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $result[] = $n + 2 * $i;\n    }\n    return $result;\n}\n\n/* Given an array\
    \ of integers, return an array of the same size where the\nelement at each index\
    \ is the product of all the elements in the original\narray except for the element\
    \ at that index.\nFor example, an input of [1, 2, 3, 4, 5] should return [120,\
    \ 60, 40, 30, 24].\nYou may not use division in your solution.\nExamples:\n>>>\
    \ product_of_all_except_at_index([1, 2, 3, 4, 5])\narray(120, 60, 40, 30, 24)*/",
  "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[] =\
    \ $n;\n        $n = ($n % 2 == 0) ? $n + 2 : $n + 1;\n    }\n    return $result;\n\
    }\n\n/* Given a string, return a new string where the first and last chars have\
    \ been\nexchanged.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n\
    'a'\n>>> front_back('ab')\n'ba'*/", "  $result = array();\n  for ($i = 0; $i <\
    \ $n; $i++) {\n    $result[] = $n + 2 * $i;\n  }\n  return $result;\n}\necho '<pre>';\n\
    print_r(make_a_pile(3));\necho '</pre>';", "    $result = array();\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        if ($i == 0) {\n            $result[] = $n;\n\
    \        } else {\n            if ($result[$i - 1] % 2 == 0) {\n             \
    \   $result[] = $result[$i - 1] + 2;\n            } else {\n                $result[]\
    \ = $result[$i - 1] + 1;\n            }\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string, return the first character that is not repeated anywhere\
    \ in\nthe string.\nExamples:\n>>> first_non_repeated_character('ABA')\n'B'\n>>>\
    \ first_non_repeated_character('AACBDB')\n'C'*/", "    $arr = array();\n    $arr[]\
    \ = $n;\n    for ($i = 1; $i < $n; $i++) {\n        if ($n % 2 == 0) {\n     \
    \       $arr[] = $n + $i;\n        } else {\n            $arr[] = $n + $i + 1;\n\
    \        }\n    }\n    return $arr;\n}\nprint_r(make_a_pile(3));", "    $result\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n + 2 *\
    \ $i;\n    }\n    return $result;\n}\n\n/* Given a positive integer n, you have\
    \ to make a pile of n levels of stones.\nThe first level has n stones.\nThe number\
    \ of stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $arr = array();\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n            $arr[] = $n;\n\
    \        } else {\n            if ($arr[$i - 1] % 2 == 0) {\n                $arr[]\
    \ = $arr[$i - 1] + 2;\n            } else {\n                $arr[] = $arr[$i\
    \ - 1] + 1;\n            }\n        }\n    }\n    return $arr;\n}\n\n/* Given\
    \ a positive integer n, you have to make a pile of n levels of stones.\nThe first\
    \ level has n stones.\nThe number of stones in the next level is:\n- the next\
    \ odd number if n is odd.\n- the next even number if n is even.\nReturn the number\
    \ of stones in each level in an array, where element at index\ni represents the\
    \ number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $result[] = $n + 2 * $i;\n    }\n    return $result;\n}\n\n/* Given an array\
    \ of integers, return the sum of the integers that are in the\narray.\nExamples:\n\
    >>> sum_of_integers([1, 2, 3, 4, 5])\n15\n>>> sum_of_integers([-1, -2, -3, -4,\
    \ -5])\n-15\n>>> sum_of_integers([])\n0*/", "    $arr = array();\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        if ($i == 0) {\n            $arr[] = $n;\n  \
    \      } else {\n            if ($arr[$i - 1] % 2 == 0) {\n                $arr[]\
    \ = $arr[$i - 1] + 2;\n            } else {\n                $arr[] = $arr[$i\
    \ - 1] + 1;\n            }\n        }\n    }\n    return $arr;\n}\n\n/* Given\
    \ a positive integer n, you have to make a pile of n levels of stones.\nThe first\
    \ level has n stones.\nThe number of stones in the next level is:\n- the next\
    \ odd number if n is odd.\n- the next even number if n is even.\nReturn the number\
    \ of stones in each level in an array, where element at index\ni represents the\
    \ number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[]\
    \ = $n;\n    $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n  }\n  return $result;\n}\n\n\
    /* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[]\
    \ = $n + 2 * $i;\n  }\n  return $result;\n}\n\n/* Given a positive integer n,\
    \ you have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $arr =\
    \ [];\n    for ($i = 0; $i < $n; $i++) {\n        $arr[] = $n;\n        $n = ($n\
    \ % 2 == 0) ? $n + 2 : $n + 1;\n    }\n    return $arr;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "    $arr = [];\n    for ($i = 0; $i < $n; $i++) {\n        $arr[] = $n;\n     \
    \   if ($n % 2 == 0) {\n            $n += 2;\n        } else {\n            $n\
    \ += 1;\n        }\n    }\n    return $arr;\n}\nprint_r(make_a_pile(3));\n\n/*\
    \ Given an array of integers, return the sum of the elements in the array.\nExamples:\n\
    >>> sum_of_elements([1, 2, 3, 4, 5])\n15\n>>> sum_of_elements([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10])\n55*/", "    $result = array();\n    $result[] = $n;\n    while\
    \ ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        }\
    \ else {\n            $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n\
    \    }\n    return $result;\n}\n\n/* Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\nThe first level has n stones.\nThe number of\
    \ stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = array();\n  \
    \  for ($i = 0; $i < $n; $i++) {\n        $result[] = $n + 2 * $i;\n    }\n  \
    \  return $result;\n}\n\n/* Given a positive integer n, you have to make a pile\
    \ of n levels of stones.\nThe first level has n stones.\nThe number of stones\
    \ in the next level is:\n- the next odd number if n is odd.\n- the next even number\
    \ if n is even.\nReturn the number of stones in each level in an array, where\
    \ element at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = [];\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        $result[] = $n;\n        if ($n % 2 == 0) {\n       \
    \     $n += 2;\n        } else {\n            $n += 1;\n        }\n    }\n   \
    \ return $result;\n}\nprint_r(make_a_pile(3));", "    $result = array();\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        $result[] = $n + 2 * $i;\n    }\n   \
    \ return $result;\n}\n\n/* Given a positive integer n, you have to make a pile\
    \ of n levels of stones.\nThe first level has n stones.\nThe number of stones\
    \ in the next level is:\n- the next odd number if n is odd.\n- the next even number\
    \ if n is even.\nReturn the number of stones in each level in an array, where\
    \ element at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "  $arr = array($n);\n  while ($n > 1)\
    \ {\n    $n = ($n % 2 == 0) ? $n - 1 : $n - 2;\n    array_push($arr, $n);\n  }\n\
    \  return $arr;\n}\n\n/* Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\nThe first level has n stones.\nThe number of stones in\
    \ the next level is:\n- the next odd number if n is odd.\n- the next even number\
    \ if n is even.\nReturn the number of stones in each level in an array, where\
    \ element at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = array();\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        $result[] = $n;\n        $n = ($n % 2 == 0) ? $n\
    \ + 2 : $n + 1;\n    }\n    return $result;\n}\n\n/* Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n        if\
    \ ($n % 2 == 0) {\n            $n += 2;\n        } else {\n            $n += 1;\n\
    \        }\n    }\n    return $result;\n}\n\n/* Given a positive integer n, you\
    \ have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "  $result =\
    \ array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n  \
    \    $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $result[]\
    \ = $n;\n  }\n  return $result;\n}\n\n/* Given a positive integer n, you have\
    \ to make a pile of n levels of stones.\nThe first level has n stones.\nThe number\
    \ of stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $arr = array();\n    $arr[]\
    \ = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n\
    \ / 2;\n        } else {\n            $n = ($n + 1) / 2;\n        }\n        $arr[]\
    \ = $n;\n    }\n    return $arr;\n}\n\n/* Given a positive integer n, you have\
    \ to make a pile of n levels of stones.\nThe first level has n stones.\nThe number\
    \ of stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $pile = array();\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $pile[] = $n + 2 * $i;\n    }\n    return\
    \ $pile;\n}\n\n/* Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\nThe first level has n stones.\nThe number of stones in the next\
    \ level is:\n- the next odd number if n is odd.\n- the next even number if n is\
    \ even.\nReturn the number of stones in each level in an array, where element\
    \ at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "  $result = array();\n  for ($i = 0; $i\
    \ < $n; $i++) {\n    $result[] = $n + 2 * $i;\n  }\n  return $result;\n}\n\n/*\
    \ Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $pile = array();\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ if ($i == 0) {\n            $pile[] = $n;\n        } else {\n            $pile[]\
    \ = $pile[$i - 1] + 2;\n        }\n    }\n    return $pile;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "    $arr = [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n   \
    \         $arr[] = $n;\n        } else {\n            if ($arr[$i - 1] % 2 ==\
    \ 0) {\n                $arr[] = $arr[$i - 1] + 2;\n            } else {\n   \
    \             $arr[] = $arr[$i - 1] + 1;\n            }\n        }\n    }\n  \
    \  return $arr;\n}\necho '<pre>';\nprint_r(make_a_pile(3));\necho '</pre>';",
  "  $result = array();\n  for ($i = 1; $i <= $n; $i++) {\n    $result[] = $n + 2\
    \ * $i - 1;\n  }\n  return $result;\n}\n\n/* Given a positive integer n, you have\
    \ to make a pile of n levels of stones.\nThe first level has n stones.\nThe number\
    \ of stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $result[] = $n + 2 * $i;\n    }\n    return\
    \ $result;\n}\n\necho '<pre>';\nprint_r(make_a_pile(3));\necho '</pre>';", " \
    \   $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n\
    \        $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n\n\
    /*\n>>> make_a_pile(4)\narray(4, 6, 8, 10)\n>>> make_a_pile(5)\narray(5, 7, 9,\
    \ 11, 13)\n*/", "  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n\
    \    if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1)\
    \ / 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n        $n =\
    \ ($n % 2 == 0) ? $n / 2 : ($n + 1) / 2;\n        $result[] = $n;\n    }\n   \
    \ return $result;\n}\n\n/* Given a positive integer n, you have to make a pile\
    \ of n levels of stones.\nThe first level has n stones.\nThe number of stones\
    \ in the next level is:\n- the next odd number if n is odd.\n- the next even number\
    \ if n is even.\nReturn the number of stones in each level in an array, where\
    \ element at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = array();\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        $result[] = $n + 2 * $i;\n    }\n    return $result;\n\
    }\n\n/* Given an array of integers, return the sum of the integers that are\n\
    multiples of 3 or 5.\nExamples:\n>>> sum_of_multiples_of_3_or_5(array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10))\n33\n>>> sum_of_multiples_of_3_or_5(array(0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10))\n33\n>>> sum_of_multiples_of_3_or_5(array(0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))\n78\n>>> sum_of_multiples_of_3_or_5(array(0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30))\n195\n>>> sum_of_multiples_of_3_or_5(array(0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40))\n308\n\
    >>> sum_of_multiples_of_3_or_5(array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\
    \ 32, 33, 34, 35, 36, 37, 38, 39, 40,", "  $result = array();\n  $result[] = $n;\n\
    \  while ($n > 0) {\n    if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n\
    \      $n = ($n - 1) / 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n\
    }\n\n/* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   if ($i == 0) {\n            $result[] = $n;\n        } else {\n          \
    \  if ($result[$i - 1] % 2 == 0) {\n                $result[] = $result[$i - 1]\
    \ + 2;\n            } else {\n                $result[] = $result[$i - 1] + 1;\n\
    \            }\n        }\n    }\n    return $result;\n}\n\n/* Given an array\
    \ of integers, return an array of the same size where the\nelement at each index\
    \ is the product of all the elements in the original\narray except for the element\
    \ at that index.\nFor example, an input of [1, 2, 3, 4, 5] should return [120,\
    \ 60, 40, 30, 24].\nYou cannot use division in this problem.\n>>> product_of_all_but_index([1,\
    \ 2, 3, 4, 5])\narray(120, 60, 40, 30, 24)*/", "    $result = array();\n    $result[]\
    \ = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n\
    \ / 2;\n        } else {\n            $n = ($n + 1) / 2;\n        }\n        $result[]\
    \ = $n;\n    }\n    return $result;\n}\n\n/* Given a positive integer n, you have\
    \ to make a pile of n levels of stones.\nThe first level has n stones.\nThe number\
    \ of stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = array();\n  \
    \  $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n       \
    \     $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n       \
    \ }\n        $result[] = $n;\n    }\n    return $result;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "    $arr = array();\n    $arr[] = $n;\n    while ($n > 1) {\n        if ($n % 2\
    \ == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n +\
    \ 1) / 2;\n        }\n        $arr[] = $n;\n    }\n    return $arr;\n}\n\nprint_r(make_a_pile(3));\n\
    print_r(make_a_pile(4));\nprint_r(make_a_pile(5));\nprint_r(make_a_pile(6));\n\
    print_r(make_a_pile(7));\nprint_r(make_a_pile(8));\nprint_r(make_a_pile(9));\n\
    print_r(make_a_pile(10));\nprint_r(make_a_pile(11));\nprint_r(make_a_pile(12));\n\
    print_r(make_a_pile(13));\nprint_r(make_a_pile(14));\nprint_r(make_a_pile(15));\n\
    print_r(make_a_pile(16));\nprint_r(make_a_pile(17));\nprint_r(make_a_pile(18));\n\
    print_r(make_a_pile(19));\nprint_r(make_a_pile(20));\nprint_r(make_a_pile(21));\n\
    print_r(make_a_pile(22));\nprint_r(make_a_pile(23));\nprint_r(make_a_pile(24));\n\
    print_r(make_a_pile(25));\nprint_r(make_a_pile(26));\nprint_r(make_a_pile(27));\n\
    print_r(make_a_pile(28));\nprint_r(make_a_pile(29));\nprint_r(make_a_pile(30));\n\
    print_r(make_a_pile(31));\nprint_r(make_a_pile(32));\nprint_r", "    $arr = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n            $arr[]\
    \ = $n;\n        } else {\n            if ($arr[$i - 1] % 2 == 0) {\n        \
    \        $arr[] = $arr[$i - 1] + 2;\n            } else {\n                $arr[]\
    \ = $arr[$i - 1] + 1;\n            }\n        }\n    }\n    return $arr;\n}\n\n\
    /* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\n/* Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result\
    \ = array();\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 ==\
    \ 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n + 1)\
    \ / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n}\n\n\
    print_r(make_a_pile(3));\nprint_r(make_a_pile(4));\nprint_r(make_a_pile(5));\n\
    print_r(make_a_pile(6));\nprint_r(make_a_pile(7));\nprint_r(make_a_pile(8));\n\
    print_r(make_a_pile(9));\nprint_r(make_a_pile(10));\nprint_r(make_a_pile(11));\n\
    print_r(make_a_pile(12));\nprint_r(make_a_pile(13));\nprint_r(make_a_pile(14));\n\
    print_r(make_a_pile(15));\nprint_r(make_a_pile(16));\nprint_r(make_a_pile(17));\n\
    print_r(make_a_pile(18));\nprint_r(make_a_pile(19));\nprint_r(make_a_pile(20));\n\
    print_r(make_a_pile(21));\nprint_r(make_a_pile(22));\nprint_r(make_a_pile(23));\n\
    print_r(make_a_pile(24));\nprint_r(make_a_pile(25));\nprint_r(make_a_pile(26));\n\
    print_r(make_a_pile(27));\nprint_r(make_a_pile(28));\nprint_r(make_a_pile(29));\n\
    print_r(make_a_pile(30));\nprint_r(make_a_pile(31));\nprint_r(make_a_pile(32));\n\
    print_r", "    $arr = array();\n    for ($i = 0; $i < $n; $i++) {\n        if\
    \ ($i % 2 == 0) {\n            $arr[] = $n + $i;\n        } else {\n         \
    \   $arr[] = $n + $i + 1;\n        }\n    }\n    return $arr;\n}\nprint_r(make_a_pile(3));",
  "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[] =\
    \ $n;\n        if ($n % 2 == 0) {\n            $n += 2;\n        } else {\n  \
    \          $n += 1;\n        }\n    }\n    return $result;\n}\n\n/* Given a string,\
    \ return a new string where the first and last chars have been\nexchanged.\nExamples:\n\
    >>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n\
    'ba'*/", "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n;\n        $n = ($n % 2 == 0) ? $n + 2 : $n + 1;\n    }\n    return $result;\n\
    }\nprint_r(make_a_pile(3));", "  $pile = array($n);\n  while ($n > 1) {\n    $n\
    \ = ($n % 2 == 0) ? $n - 1 : $n - 2;\n    array_push($pile, $n);\n  }\n  return\
    \ $pile;\n}", "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n   \
    \     if ($i == 0) {\n            $result[] = $n;\n        } else {\n        \
    \    if ($result[$i - 1] % 2 == 0) {\n                $result[] = $result[$i -\
    \ 1] + 2;\n            } else {\n                $result[] = $result[$i - 1] +\
    \ 1;\n            }\n        }\n    }\n    return $result;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[] =\
    \ $n + 2 * $i;\n    }\n    return $result;\n}\n\n/* Given a positive integer n,\
    \ you have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n   \
    \     $n = ($n % 2 == 0) ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n\n\
    /* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] =\
    \ $n;\n    $n += ($n % 2) ? 2 : 1;\n  }\n  return $result;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "    $result = array();\n    for ($i = 1; $i <= $n; $i++) {\n        $result[] =\
    \ $n + 2 * $i - 1;\n    }\n    return $result;\n}\n\n/* Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result\
    \ = array();\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 ==\
    \ 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n + 1)\
    \ / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n}\n\n\
    /* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n   \
    \ if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) /\
    \ 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[] =\
    \ $n;\n        $n = ($n % 2 == 0) ? $n + 2 : $n + 1;\n    }\n    return $result;\n\
    }\n\n/* Given a string, return the string with the first letter of each word capitalized.\n\
    Examples:\n>>> capitalize_words(\"hello world\")\n\"Hello World\"\n>>> capitalize_words(\"\
    hello world, how are you?\")\n\"Hello World, How Are You?\"*/", "  $result = array();\n\
    \  $result[] = $n;\n  while ($n > 1) {\n    $n = $n % 2 == 0 ? $n / 2 : ($n +\
    \ 1) / 2;\n    $result[] = $n;\n  }\n  return $result;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 ==\
    \ 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n  \
    \  $result[] = $n;\n  }\n  return $result;\n}\n\n/* Given a positive integer n,\
    \ you have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result\
    \ = array();\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 ==\
    \ 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n + 1)\
    \ / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n}\n\n\
    /* Given an array of integers, return the number of times the array has to be\n\
    rotated to get the maximum element of the array at the first position.\nExamples:\n\
    >>> find_rotation_count(array(1, 2, 3, 4, 5))\n0\n>>> find_rotation_count(array(5,\
    \ 1, 2, 3, 4))\n1\n>>> find_rotation_count(array(4, 5, 1, 2, 3))\n2\n>>> find_rotation_count(array(3,\
    \ 4, 5, 1, 2))\n3\n>>> find_rotation_count(array(2, 3, 4, 5, 1))\n4\n>>> find_rotation_count(array(1,\
    \ 2, 3, 4, 5))\n0\n>>> find_rotation_count(array(5, 4, 3, 2, 1))\n4\n>>> find_rotation_count(array(1,\
    \ 2, 3, 4, 5, 6))\n0\n>>> find_rotation_count(array(6, 1, 2, 3, 4, 5))\n1\n>>>\
    \ find_rotation_count(array(5, 6, 1, 2, 3, 4))\n2\n>>> find_rotation_count(array(4,\
    \ 5, 6, 1, 2, 3))\n3\n>>> find_rotation_count(array(3, 4, 5, 6, 1, 2))\n4\n>>>\
    \ find_rotation_count(array(2, 3, 4, 5, 6, 1))\n5\n>>> find_rotation_count(array(1,\
    \ 2, 3, 4, 5, 6))\n0\n>>> find_rotation_count(array(6, 5, 4, 3, 2, 1))\n5\n>>>\
    \ find_rotation_count(array(1, 2, 3, 4, 5, 6, 7))\n", "  $arr = [];\n  $i = 0;\n\
    \  while ($n > 0) {\n    $arr[$i] = $n;\n    if ($n % 2 == 0) {\n      $n = $n\
    \ / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n    $i++;\n  }\n  return\
    \ $arr;\n}\n\n/* Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\nThe first level has n stones.\nThe number of stones in the next\
    \ level is:\n- the next odd number if n is odd.\n- the next even number if n is\
    \ even.\nReturn the number of stones in each level in an array, where element\
    \ at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "    $arr = array();\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $arr[] = $n;\n        if ($n % 2 == 0) {\n       \
    \     $n++;\n        } else {\n            $n += 2;\n        }\n    }\n    return\
    \ $arr;\n}\nprint_r(make_a_pile(3));", "    $arr = array();\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $arr[] = $n;\n        if ($n % 2 == 0) {\n       \
    \     $n += 2;\n        } else {\n            $n += 1;\n        }\n    }\n   \
    \ return $arr;\n}\n\n/* Given a positive integer n, you have to make a pile of\
    \ n levels of stones.\nThe first level has n stones.\nThe number of stones in\
    \ the next level is:\n- the next odd number if n is odd.\n- the next even number\
    \ if n is even.\nReturn the number of stones in each level in an array, where\
    \ element at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = array();\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        $result[] = $n + 2 * $i;\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\n/* Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n   \
    \     if ($n % 2 == 0) {\n            $n += 2;\n        } else {\n           \
    \ $n += 1;\n        }\n    }\n    return $result;\n}\n\n/* Given an array of integers,\
    \ return the sum of the integers that are\nmultiples of 3 or 5, but not both.\n\
    Examples:\n>>> sum_of_multiples_of_3_or_5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n33\n\
    >>> sum_of_multiples_of_3_or_5([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n15*/",
  "    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "  $result = [];\n  $i = 0;\n  while ($n > 0) {\n    $result[$i] =\
    \ $n;\n    $n = $n % 2 == 0 ? $n / 2 : ($n + 1) / 2;\n    $i++;\n  }\n  return\
    \ $result;\n}\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(4));\nprint_r(make_a_pile(5));\n\
    print_r(make_a_pile(6));\nprint_r(make_a_pile(7));\nprint_r(make_a_pile(8));\n\
    print_r(make_a_pile(9));\nprint_r(make_a_pile(10));\nprint_r(make_a_pile(11));\n\
    print_r(make_a_pile(12));\nprint_r(make_a_pile(13));\nprint_r(make_a_pile(14));\n\
    print_r(make_a_pile(15));\nprint_r(make_a_pile(16));\nprint_r(make_a_pile(17));\n\
    print_r(make_a_pile(18));\nprint_r(make_a_pile(19));\nprint_r(make_a_pile(20));\n\
    print_r(make_a_pile(21));\nprint_r(make_a_pile(22));\nprint_r(make_a_pile(23));\n\
    print_r(make_a_pile(24));\nprint_r(make_a_pile(25));\nprint_r(make_a_pile(26));\n\
    print_r(make_a_pile(27));\nprint_r(make_a_pile(28));\nprint_r(make_a_pile(29));\n\
    print_r(make_a_pile(30));\nprint_r(make_a_pile(31));\nprint_r(make_a_pile(32));\n\
    print_r(make_a_pile(33));\nprint_", "    $arr = array();\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        if ($i == 0) {\n            $arr[] = $n;\n        } else\
    \ {\n            if ($arr[$i - 1] % 2 == 0) {\n                $arr[] = $arr[$i\
    \ - 1] + 2;\n            } else {\n                $arr[] = $arr[$i - 1] + 1;\n\
    \            }\n        }\n    }\n    return $arr;\n}\nprint_r(make_a_pile(3));",
  "  $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 ==\
    \ 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n  \
    \  $result[] = $n;\n  }\n  return $result;\n}\n\n/* Given a positive integer n,\
    \ you have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "  $result =\
    \ [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n;\n    if ($n % 2 ==\
    \ 0) {\n      $n += 2;\n    } else {\n      $n += 1;\n    }\n  }\n  return $result;\n\
    }\necho '<pre>';\nprint_r(make_a_pile(3));\necho '</pre>';", "  $pile = array();\n\
    \  for ($i = 0; $i < $n; $i++) {\n    $pile[] = $n + 2 * $i;\n  }\n  return $pile;\n\
    }\necho '<pre>';\nprint_r(make_a_pile(3));\necho '</pre>';", "    $result = array();\n\
    \    $result[] = $n;\n    $i = 1;\n    while ($n > 0) {\n        if ($n % 2 ==\
    \ 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n + 1)\
    \ / 2;\n        }\n        $result[] = $n;\n        $i++;\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $arr = array();\n    for ($i = 0; $i < $n; $i++) {\n        $arr[]\
    \ = $n;\n        if ($n % 2 == 0) {\n            $n += 2;\n        } else {\n\
    \            $n += 1;\n        }\n    }\n    return $arr;\n}\nprint_r(make_a_pile(3));",
  "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n;\n\
    \        $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n    return $result;\n}\n\
    print_r(make_a_pile(3));", "    $result = array();\n    $result[] = $n;\n    while\
    \ ($n > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        }\
    \ else {\n            $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n\
    \    }\n    return $result;\n}\n\n/* Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\nThe first level has n stones.\nThe number of\
    \ stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "  $stones = array();\n  for\
    \ ($i = 0; $i < $n; $i++) {\n    $stones[] = $n + 2 * $i;\n  }\n  return $stones;\n\
    }\n\n/* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "  $result = [];\n  for ($i = 0; $i < $n; $i++) {\n    $result[] =\
    \ $n;\n    $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n  }\n  return $result;\n}\n\n\
    /* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $result[] = $n + 2 * $i;\n    }\n    return $result;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\n/* Given an array of integers, return the sum of the first n integers.\n\
    If n is greater than the length of the array, return the sum of the whole array.\n\
    Examples:\n>>> sum_first_n([1, 2, 3, 4, 5], 3)\n6\n>>> sum_first_n([1, 2, 3, 4,\
    \ 5], 5)\n15\n>>> sum_first_n([1, 2, 3, 4, 5], 6)\n15\n>>> sum_first_n([1, 2,\
    \ 3, 4, 5], 0)\n0*/", "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $result[] = $n;\n        $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n\
    \    return $result;\n}\n\n/* Given an array of integers, return the number of\
    \ elements that are even.\nExamples:\n>>> count_even([1, 2, 3, 4, 5])\n2\n>>>\
    \ count_even([1, 3, 5])\n0\n>>> count_even([])\n0\n>>> count_even([11, 9, 0, 1])\n\
    1\n>>> count_even([2, 11, 9, 0])\n2\n>>> count_even([2])\n1\n>>> count_even([2,\
    \ 5, 12])\n2*/", "    $result = [];\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $result[] = $n;\n        $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n    }\n    return\
    \ $result;\n}\nprint_r(make_a_pile(3));", "    $arr = [];\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        if ($i == 0) {\n            $arr[] = $n;\n        } else\
    \ {\n            if ($arr[$i - 1] % 2 == 0) {\n                $arr[] = $arr[$i\
    \ - 1] + 2;\n            } else {\n                $arr[] = $arr[$i - 1] + 1;\n\
    \            }\n        }\n    }\n    return $arr;\n}\n\n/* Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result\
    \ = array();\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 ==\
    \ 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n + 1)\
    \ / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n}\n\n\
    /* Given an array of integers, return an array of integers where each element\n\
    is the product of all the integers in the array except the element at that\nindex.\n\
    Examples:\n>>> product_of_all_other_numbers([1, 2, 3, 4, 5])\narray(120, 60, 40,\
    \ 30, 24)*/", "    $arr = [];\n    for ($i = 0; $i < $n; $i++) {\n        if ($i\
    \ == 0) {\n            $arr[] = $n;\n        } else {\n            if ($arr[$i\
    \ - 1] % 2 == 0) {\n                $arr[] = $arr[$i - 1] + 2;\n            }\
    \ else {\n                $arr[] = $arr[$i - 1] + 1;\n            }\n        }\n\
    \    }\n    return $arr;\n}\nprint_r(make_a_pile(3));", "    $result = array();\n\
    \    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n     \
    \       $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n     \
    \   }\n        $result[] = $n;\n    }\n    return $result;\n}\n", "    $result\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[] = $n + 2 *\
    \ $i;\n    }\n    return $result;\n}\n\n/* Given an array of integers, return\
    \ the sum of the first n integers.\nExamples:\n>>> sum_first_n([1, 2, 3, 4, 5],\
    \ 3)\n6\n>>> sum_first_n([1, 2, 3, 4, 5], 5)\n15\n>>> sum_first_n([1, 2, 3, 4,\
    \ 5], 0)\n0\n>>> sum_first_n([1, 2, 3, 4, 5], -1)\n0\n>>> sum_first_n([1, 2, 3,\
    \ 4, 5], -5)\n0\n>>> sum_first_n([1, 2, 3, 4, 5], -10)\n0\n>>> sum_first_n([1,\
    \ 2, 3, 4, 5], 10)\n15*/", "    $arr = array();\n    $arr[] = $n;\n    while ($n\
    \ > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else\
    \ {\n            $n = ($n + 1) / 2;\n        }\n        $arr[] = $n;\n    }\n\
    \    return $arr;\n}\n\necho '<pre>';\nprint_r(make_a_pile(3));\necho '</pre>';\n\
    \n/* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $arr = array();\n    for ($i = 0; $i < $n; $i++) {\n        if\
    \ ($i == 0) {\n            $arr[] = $n;\n        } else {\n            if ($arr[$i\
    \ - 1] % 2 == 0) {\n                $arr[] = $arr[$i - 1] + 2;\n            }\
    \ else {\n                $arr[] = $arr[$i - 1] + 1;\n            }\n        }\n\
    \    }\n    return $arr;\n}\n\n/* Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\nThe first level has n stones.\nThe number of\
    \ stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "  $pile = array();\n  $pile[]\
    \ = $n;\n  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n / 2;\n    }\
    \ else {\n      $n = ($n + 1) / 2;\n    }\n    $pile[] = $n;\n  }\n  return $pile;\n\
    }\nprint_r(make_a_pile(3));", "    $arr = array();\n    $arr[] = $n;\n    $i =\
    \ 1;\n    while ($n > 0) {\n        if ($n % 2 == 0) {\n            $n = $n /\
    \ 2;\n            $arr[] = $n;\n        } else {\n            $n = ($n + 1) /\
    \ 2;\n            $arr[] = $n;\n        }\n        $i++;\n    }\n    return $arr;\n\
    }\nprint_r(make_a_pile(3));", "    $result = array();\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $result[] = $n + 2 * $i;\n    }\n    return $result;\n}\n\n\
    /* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $result[] = $n;\n        $n = ($n % 2 == 0) ? $n + 2 : $n + 1;\n    }\n  \
    \  return $result;\n}\nprint_r(make_a_pile(3));", "    $result = array();\n  \
    \  for ($i = 0; $i < $n; $i++) {\n        $result[] = $n + 2 * $i;\n    }\n  \
    \  return $result;\n}\n\n/* Given an array of integers, return the sum of the\
    \ first n integers.\nExamples:\n>>> sum_first_n([1, 2, 3, 4, 5], 3)\n6\n>>> sum_first_n([1,\
    \ 2, 3, 4, 5], 5)\n15*/", "    $result = array();\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $result[] = $n;\n        $n = $n % 2 == 0 ? $n + 2 : $n + 1;\n  \
    \  }\n    return $result;\n}\n\n/* Given a positive integer n, you have to make\
    \ a pile of n levels of stones.\nThe first level has n stones.\nThe number of\
    \ stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = array();\n  \
    \  $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n       \
    \     $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n       \
    \ }\n        $result[] = $n;\n    }\n    return $result;\n}\n\n/* Given an array\
    \ of integers, return the sum of the integers that are\nmultiples of 3 or 5.\n\
    Examples:\n>>> sum_of_multiples_of_3_or_5(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n\
    33\n>>> sum_of_multiples_of_3_or_5(array(0, 0, 0, 0, 0))\n0\n>>> sum_of_multiples_of_3_or_5(array(-3,\
    \ -5, -7, -9, -11))\n-33*/", "  $result = array();\n  $result[] = $n;\n  while\
    \ ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n     \
    \ $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n}\n\n\
    /* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "  $pile = array($n);\n  $i = 0;\n  while ($pile[$i] > 1) {\n    if\
    \ ($pile[$i] % 2 == 0) {\n      $pile[] = $pile[$i] - 1;\n    } else {\n     \
    \ $pile[] = $pile[$i] - 2;\n    }\n    $i++;\n  }\n  return $pile;\n}\n\n/* Given\
    \ a positive integer n, you have to make a pile of n levels of stones.\nThe first\
    \ level has n stones.\nThe number of stones in the next level is:\n- the next\
    \ odd number if n is odd.\n- the next even number if n is even.\nReturn the number\
    \ of stones in each level in an array, where element at index\ni represents the\
    \ number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n\
    \        $n = $n % 2 == 0 ? $n - 1 : $n + 1;\n        $result[] = $n;\n    }\n\
    \    return $result;\n}\n\n/* Given a positive integer n, you have to make a pile\
    \ of n levels of stones.\nThe first level has n stones.\nThe number of stones\
    \ in the next level is:\n- the next odd number if n is odd.\n- the next even number\
    \ if n is even.\nReturn the number of stones in each level in an array, where\
    \ element at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "    $arr = [];\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        $arr[] = $n;\n        if ($n % 2 == 0) {\n            $n\
    \ += 2;\n        } else {\n            $n += 1;\n        }\n    }\n    return\
    \ $arr;\n}\nprint_r(make_a_pile(3));", "    $result = array();\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        if ($i == 0) {\n            $result[] = $n;\n \
    \       } else {\n            if ($result[$i - 1] % 2 == 0) {\n              \
    \  $result[] = $result[$i - 1] + 2;\n            } else {\n                $result[]\
    \ = $result[$i - 1] + 1;\n            }\n        }\n    }\n    return $result;\n\
    }\n\n/* Given an array of integers, return the number of elements that are\nnot\
    \ divisible by 2.\nExamples:\n>>> not_divisible_by_2(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10))\n5*/", "    $result = array();\n    $result[] = $n;\n    while ($n\
    \ > 1) {\n        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else\
    \ {\n            $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n\
    \    return $result;\n}\n\n/* Given a positive integer n, you have to make a pile\
    \ of n levels of stones.\nThe first level has n stones.\nThe number of stones\
    \ in the next level is:\n- the next odd number if n is odd.\n- the next even number\
    \ if n is even.\nReturn the number of stones in each level in an array, where\
    \ element at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "  $result = array();\n  for ($i = 0; $i\
    \ < $n; $i++) {\n    $result[] = $n;\n    if ($n % 2 == 0) {\n      $n++;\n  \
    \  } else {\n      $n += 2;\n    }\n  }\n  return $result;\n}\n\n/* Given an array\
    \ of integers, return an array of integers where each element\nis the product\
    \ of all the elements in the array except the element at the\ncurrent index.\n\
    Examples:\n>>> product_of_all_except_self([1, 2, 3, 4])\narray(24, 12, 8, 6)\n\
    >>> product_of_all_except_self([1, 2, 0, 4])\narray(0, 0, 8, 0)\n>>> product_of_all_except_self([1,\
    \ 2, 3, 0])\narray(0, 0, 0, 6)\n>>> product_of_all_except_self([0, 2, 3, 4])\n\
    array(24, 0, 0, 0)\n>>> product_of_all_except_self([0, 0, 0, 0])\narray(0, 0,\
    \ 0, 0)\n>>> product_of_all_except_self([1, 2, 3, 4, 5])\narray(120, 60, 40, 30,\
    \ 24)\n>>> product_of_all_except_self([1, 2, 3, 4, 0])\narray(0, 0, 0, 0, 24)\n\
    >>> product_of_all_except_self([1, 2, 3, 4, -1])\narray(-24, -12, -8, -6, -12)\n\
    >>> product_of_all_except_self([1, 2, 3, 4, -1, 0])\narray(0, 0, 0, 0, 0, 0)\n\
    >>> product_of_all_except_self([1, 2, 3, 4, -1, 0, 2])\narray(0, 0, 0, 0, 0, 0,\
    \ 0)\n>>> product_of_all_except_self([1, 2, 3, 4, -1, 0, 2, 3])\narray(0, 0, 0,\
    \ 0, 0, 0, 0, 0", "  $result = [];\n  $result[] = $n;\n  while ($n > 1) {\n  \
    \  if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) /\
    \ 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n}\n\n/* Given an array\
    \ of integers, return an array of the same size where the\nelement at each index\
    \ is the product of all the elements in the original\narray except for the element\
    \ at that index.\nFor example, an input of [1, 2, 3, 4, 5] should return [120,\
    \ 60, 40, 30, 24].\nYou cannot use division in this problem.\n*/", "  $result\
    \ = array();\n  for ($i = 0; $i < $n; $i++) {\n    $result[] = $n;\n    if ($n\
    \ % 2 == 0) {\n      $n += 2;\n    } else {\n      $n += 1;\n    }\n  }\n  return\
    \ $result;\n}\n\n/* Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\nThe first level has n stones.\nThe number of stones in the next\
    \ level is:\n- the next odd number if n is odd.\n- the next even number if n is\
    \ even.\nReturn the number of stones in each level in an array, where element\
    \ at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "    $arr = array();\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $arr[] = $n;\n        if ($n % 2 == 0) {\n       \
    \     $n++;\n        } else {\n            $n += 2;\n        }\n    }\n    return\
    \ $arr;\n}\nprint_r(make_a_pile(3));", "    $result = array();\n    $result[]\
    \ = $n;\n    while ($n > 1) {\n        $n = $n % 2 == 0 ? $n / 2 : ($n + 1) /\
    \ 2;\n        $result[] = $n;\n    }\n    return $result;\n}\n\n/* Given an array\
    \ of integers, return the sum of the integers that are\ndivisible by 3.\nExamples:\n\
    >>> sum_divisible_by_3([1, 2, 3, 4, 5, 6, 7, 8, 9])\n18\n>>> sum_divisible_by_3([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n45\n>>> sum_divisible_by_3([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n60*/",
  "  $result = array();\n  for ($i = 0; $i < $n; $i++) {\n    if ($i == 0) {\n   \
    \   $result[] = $n;\n    } else {\n      if ($result[$i - 1] % 2 == 0) {\n   \
    \     $result[] = $result[$i - 1] + 2;\n      } else {\n        $result[] = $result[$i\
    \ - 1] + 1;\n      }\n    }\n  }\n  return $result;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "    $result = array();\n    $result[] = $n;\n    $i = 0;\n    while ($n > 0) {\n\
    \        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n    \
    \        $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\n/* Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\nThe first level has n stones.\nThe number of stones in the next\
    \ level is:\n- the next odd number if n is odd.\n- the next even number if n is\
    \ even.\nReturn the number of stones in each level in an array, where element\
    \ at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "  $result = array();\n  $result[] = $n;\n\
    \  while ($n > 1) {\n    if ($n % 2 == 0) {\n      $n = $n / 2;\n    } else {\n\
    \      $n = ($n + 1) / 2;\n    }\n    $result[] = $n;\n  }\n  return $result;\n\
    }\n\n/* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $result[] = $n;\n        if ($n % 2 == 0) {\n            $n++;\n        }\
    \ else {\n            $n += 2;\n        }\n    }\n    return $result;\n}", " \
    \   $arr = array();\n    $arr[] = $n;\n    for ($i = 0; $i < $n; $i++) {\n   \
    \     if ($n % 2 == 0) {\n            $n = $n + 2;\n            $arr[] = $n;\n\
    \        } else {\n            $n = $n + 1;\n            $arr[] = $n;\n      \
    \  }\n    }\n    return $arr;\n}\nprint_r(make_a_pile(3));", "    $arr = [];\n\
    \    $arr[] = $n;\n    while ($n > 1) {\n        if ($n % 2 == 0) {\n        \
    \    $n = $n / 2;\n        } else {\n            $n = ($n + 1) / 2;\n        }\n\
    \        $arr[] = $n;\n    }\n    return $arr;\n}\nprint_r(make_a_pile(3));",
  "    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $result[] = $n + 2 * $i;\n    }\n    return $result;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "    $arr = array();\n    $arr[] = $n;\n    while ($n > 1) {\n        if ($n % 2\
    \ == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n -\
    \ 1) / 2;\n        }\n        $arr[] = $n;\n    }\n    return $arr;\n}\nprint_r(make_a_pile(3));",
  "    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\n/* Given an array of integers, return the sum of the elements in the array.\n\
    Examples:\n>>> sum_of_elements(array(1, 2, 3, 4, 5))\n15\n>>> sum_of_elements(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n55*/", "    $result = [];\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        $result[] = $n;\n        $n = $n % 2 == 0 ? $n + 2 :\
    \ $n + 1;\n    }\n    return $result;\n}\n\n/* Given a positive integer n, you\
    \ have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result\
    \ = array();\n    $result[] = $n;\n    while ($n > 1) {\n        $n = $n % 2 ==\
    \ 0 ? $n - 1 : $n + 1;\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n\
    \        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n    \
    \        $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\n/* Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\nThe first level has n stones.\nThe number of stones in the next\
    \ level is:\n- the next odd number if n is odd.\n- the next even number if n is\
    \ even.\nReturn the number of stones in each level in an array, where element\
    \ at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = [];\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        $result[] = $n;\n        $n = $n % 2 == 0 ? $n + 2 :\
    \ $n + 1;\n    }\n    return $result;\n}\n\n/* Given a positive integer n, you\
    \ have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        if ($i == 0) {\n    \
    \        $result[] = $n;\n        } else {\n            if ($result[$i - 1] %\
    \ 2 == 0) {\n                $result[] = $result[$i - 1] + 2;\n            } else\
    \ {\n                $result[] = $result[$i - 1] + 1;\n            }\n       \
    \ }\n    }\n    return $result;\n}\n\n/* Given a positive integer n, you have\
    \ to make a pile of n levels of stones.\nThe first level has n stones.\nThe number\
    \ of stones in the next level is:\n- the next odd number if n is odd.\n- the next\
    \ even number if n is even.\nReturn the number of stones in each level in an array,\
    \ where element at index\ni represents the number of stones in the level (i+1).\n\
    Examples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "  $result = [];\n  for ($i\
    \ = 0; $i < $n; $i++) {\n    $result[] = $n + 2 * $i;\n  }\n  return $result;\n\
    }\n\n/* Given a string, return an array of all the permutations of that string.\n\
    The permutations of the string should be the same length as the original string\n\
    (i.e. use each letter in the string exactly once) but do not need to be actual\n\
    words.\nThe array that is returned should only contain unique values and its elements\n\
    should be in alphabetical order.\nExamples:\n>>> string_permutations('one')\n\
    array('eno', 'eon', 'neo', 'noe', 'oen', 'one')\n>>> string_permutations('app')\n\
    array('app', 'pap', 'ppa')\n>>> string_permutations('nn')\narray('nn')*/", " \
    \ $result = array();\n  $result[] = $n;\n  while ($n > 1) {\n    if ($n % 2 ==\
    \ 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n    }\n  \
    \  $result[] = $n;\n  }\n  return $result;\n}\necho \"<pre>\";\nprint_r(make_a_pile(3));\n\
    echo \"</pre>\";", "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $result[] = $n + 2 * $i;\n    }\n    return $result;\n}\n\n/* Given a\
    \ positive integer n, you have to make a pile of n levels of stones.\nThe first\
    \ level has n stones.\nThe number of stones in the next level is:\n- the next\
    \ odd number if n is odd.\n- the next even number if n is even.\nReturn the number\
    \ of stones in each level in an array, where element at index\ni represents the\
    \ number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n\
    \        if ($n % 2 == 0) {\n            $n = $n / 2;\n        } else {\n    \
    \        $n = ($n + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return\
    \ $result;\n}\n\n/* Given a positive integer n, you have to make a pile of n levels\
    \ of stones.\nThe first level has n stones.\nThe number of stones in the next\
    \ level is:\n- the next odd number if n is odd.\n- the next even number if n is\
    \ even.\nReturn the number of stones in each level in an array, where element\
    \ at index\ni represents the number of stones in the level (i+1).\nExamples:\n\
    >>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result = array();\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        if ($i == 0) {\n            $result[] = $n;\n \
    \       } else {\n            if ($result[$i - 1] % 2 == 0) {\n              \
    \  $result[] = $result[$i - 1] + 2;\n            } else {\n                $result[]\
    \ = $result[$i - 1] + 1;\n            }\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "  $pile = array();\n  $pile[] = $n;\n  while ($n > 1) {\n    if ($n\
    \ % 2 == 0) {\n      $n = $n / 2;\n    } else {\n      $n = ($n + 1) / 2;\n  \
    \  }\n    $pile[] = $n;\n  }\n  return $pile;\n}\n\n/* Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result\
    \ = array();\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 ==\
    \ 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n + 1)\
    \ / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n}\nprint_r(make_a_pile(3));",
  "    $result = array();\n    $result[] = $n;\n    for ($i = 1; $i < $n; $i++) {\n\
    \        if ($n % 2 == 0) {\n            $result[] = $n + $i;\n        } else\
    \ {\n            $result[] = $n + $i + 1;\n        }\n    }\n    return $result;\n\
    }\nprint_r(make_a_pile(3));\nprint_r(make_a_pile(4));\nprint_r(make_a_pile(5));\n\
    print_r(make_a_pile(6));\nprint_r(make_a_pile(7));\nprint_r(make_a_pile(8));\n\
    print_r(make_a_pile(9));\nprint_r(make_a_pile(10));\nprint_r(make_a_pile(11));\n\
    print_r(make_a_pile(12));\nprint_r(make_a_pile(13));\nprint_r(make_a_pile(14));\n\
    print_r(make_a_pile(15));\nprint_r(make_a_pile(16));\nprint_r(make_a_pile(17));\n\
    print_r(make_a_pile(18));\nprint_r(make_a_pile(19));\nprint_r(make_a_pile(20));\n\
    print_r(make_a_pile(21));\nprint_r(make_a_pile(22));\nprint_r(make_a_pile(23));\n\
    print_r(make_a_pile(24));\nprint_r(make_a_pile(25));\nprint_r(make_a_pile(26));\n\
    print_r(make_a_pile(27));\nprint_r(make_a_pile(28));\nprint_r(make_a_pile(29));\n\
    print_r(make_a_pile(30));\nprint_r(make_a_pile(31));\nprint_r(make_a_pile(32));\n\
    print", "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[]\
    \ = $n + 2 * $i;\n    }\n    return $result;\n}\n\n/* Given a positive integer\
    \ n, you have to make a pile of n levels of stones.\nThe first level has n stones.\n\
    The number of stones in the next level is:\n- the next odd number if n is odd.\n\
    - the next even number if n is even.\nReturn the number of stones in each level\
    \ in an array, where element at index\ni represents the number of stones in the\
    \ level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/", "    $result\
    \ = array();\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n % 2 ==\
    \ 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n + 1)\
    \ / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n}\n\n\
    /* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/", "    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $result[] = $n + 2 * $i;\n    }\n    return $result;\n}\n\n/* Given a positive\
    \ integer n, you have to make a pile of n levels of stones.\nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n- the next odd number\
    \ if n is odd.\n- the next even number if n is even.\nReturn the number of stones\
    \ in each level in an array, where element at index\ni represents the number of\
    \ stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3, 5, 7)*/",
  "    $result = array();\n    $result[] = $n;\n    while ($n > 1) {\n        if ($n\
    \ % 2 == 0) {\n            $n = $n / 2;\n        } else {\n            $n = ($n\
    \ + 1) / 2;\n        }\n        $result[] = $n;\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer n, you have to make a pile of n levels of stones.\n\
    The first level has n stones.\nThe number of stones in the next level is:\n- the\
    \ next odd number if n is odd.\n- the next even number if n is even.\nReturn the\
    \ number of stones in each level in an array, where element at index\ni represents\
    \ the number of stones in the level (i+1).\nExamples:\n>>> make_a_pile(3)\narray(3,\
    \ 5, 7)*/"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
