name: HumanEval_46_fib4
language: php
prompt: "<?php\n/* The Fib4 number sequence is a sequence similar to the Fibbonacci\
  \ sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\n\
  fib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease\
  \ write a function to efficiently compute the n-th element of the fib4 number sequence.\
  \  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14*/\nfunction\
  \ fib4($n) {\n"
tests: "function candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\t$a = 0;\n\t$b = 0;\n\t$c = 2;\n\t$d = 0;\n\tfor ($i = 3; $i <= $n;\
    \ $i++) {\n\t\t$e = $a + $b + $c + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\
    \t\t$d = $e;\n\t}\n\treturn $d;\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\
    \\n\";\necho fib4(7) . \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4;\
    \ $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] +\
    \ $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5);\necho \"\\n\";\n\
    echo fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5) .\
    \ \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5);\n\
    echo \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t\
    $fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] =\
    \ $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n\
    }\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\n\
    echo \"\\n\";\n", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++)\
    \ {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t\
    }\n\treturn $fib4[$n];\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\n\
    echo fib4(7) . \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tif ($n < 4) {\n\t\t\
    return $fib4[$n];\n\t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1]\
    \ + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\n\
    echo fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", " \
    \   $numbers = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $numbers[$i\
    \ % 4] = $numbers[($i - 1) % 4] + $numbers[($i - 2) % 4] + $numbers[($i - 3) %\
    \ 4] + $numbers[($i - 4) % 4];\n    }\n    return $numbers[$n % 4];\n}\n\n/*\n\
    \ * Write a function that takes a string and returns the number of vowels in the\
    \ string.\n * >>> count_vowels(\"hello\")\n * 2\n * >>> count_vowels(\"world\"\
    )\n * 1\n * >>> count_vowels(\"aeiou\")\n * 5\n */", "\t$fib4 = array(0, 0, 2,\
    \ 0);\n\tif ($n < 4) {\n\t\treturn $fib4[$n];\n\t}\n\tfor ($i = 4; $i <= $n; $i++)\
    \ {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t\
    }\n\treturn $fib4[$n];\n}\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho\
    \ \"\\n\";\necho fib4(7);\necho \"\\n\";", "\tif ($n < 0) {\n\t\treturn 0;\n\t\
    }\n\tif ($n < 2) {\n\t\treturn 0;\n\t}\n\tif ($n == 2) {\n\t\treturn 2;\n\t}\n\
    \tif ($n == 3) {\n\t\treturn 0;\n\t}\n\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i\
    \ = 4; $i <= $n; $i++) {\n\t\t$fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i\
    \ - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n\t}\n\treturn $fib4[$n\
    \ % 4];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) .\
    \ \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\
    \t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\t\
    return $fib4[$n];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho\
    \ fib4(7) . \"\\n\";", "    $fib4 = array(0, 0, 2, 0);\n    if ($n < 4) {\n  \
    \      return $fib4[$n];\n    }\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i\
    \ % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i\
    \ - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\n/*\n * Write a function that\
    \ takes a string and returns the number of vowels in the string.\n * >>> count_vowels('hello\
    \ world')\n * 3\n */", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n;\
    \ $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\
    \t}\n\treturn $fib4[$n];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\"\
    ;\necho fib4(7) . \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i\
    \ <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\
    \t}\n\treturn $fib4[$n];\n}\n\n/*\nWrite a function that takes an array of integers\
    \ and returns the sum of the integers after adding 1 to each.\nplusOneSum([1,\
    \ 2, 3, 4]); // 14\n*/", "\t$fib4 = array(0, 0, 2, 0);\n\tif ($n < 4) {\n\t\t\
    return $fib4[$n];\n\t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1]\
    \ + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\n\
    echo fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho\
    \ \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\
    \t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\t\
    return $fib4[$n];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho\
    \ fib4(7) . \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n;\
    \ $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\
    \t}\n\treturn $fib4[$n];\n}\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho\
    \ \"\\n\";\necho fib4(7);\necho \"\\n\";", "    $fib4 = [0, 0, 2, 0];\n    for\
    \ ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i\
    \ - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n\
    \ % 4];\n}\n\n/*\n * The Fibbonacci sequence is a sequence of numbers defined\
    \ as follows:\n * fib(0) -> 0\n * fib(1) -> 1\n * fib(n) -> fib(n-1) + fib(n-2)\n\
    \ * Please write a function to efficiently compute the n-th element of the Fibbonacci\
    \ sequence.  Do not use recursion.\n * >>> fib(5)\n * 5\n * >>> fib(6)\n * 8\n\
    \ */", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i]\
    \ = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n\
    }\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";",
  "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] =\
    \ $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n\
    }\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\n\
    echo \"\\n\";", "\tif ($n == 0) {\n\t\treturn 0;\n\t}\n\tif ($n == 1) {\n\t\t\
    return 0;\n\t}\n\tif ($n == 2) {\n\t\treturn 2;\n\t}\n\tif ($n == 3) {\n\t\treturn\
    \ 0;\n\t}\n\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t\
    $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4]\
    \ + $fib4[($i - 4) % 4];\n\t}\n\treturn $fib4[$n % 4];\n}\n\necho fib4(5) . \"\
    \\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\n", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tif ($n < 4) {\n\t\treturn $fib4[$n];\n\t}\n\tfor ($i = 4; $i <=\
    \ $n; $i++) {\n\t\t$fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] +\
    \ $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n\t}\n\treturn $fib4[$n % 4];\n}\n\
    echo fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho\
    \ \"\\n\";", "\t$a = 0;\n\t$b = 0;\n\t$c = 2;\n\t$d = 0;\n\tfor ($i = 3; $i <=\
    \ $n; $i++) {\n\t\t$e = $a + $b + $c + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c\
    \ = $d;\n\t\t$d = $e;\n\t}\n\treturn $d;\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6)\
    \ . \"\\n\";\necho fib4(7) . \"\\n\";", "\t$a = 0;\n\t$b = 0;\n\t$c = 2;\n\t$d\
    \ = 0;\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$e = $a + $b + $c + $d;\n\t\t$a\
    \ = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\t$d = $e;\n\t}\n\treturn $d;\n}\necho\
    \ fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\
    \\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t\
    $fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn\
    \ $fib4[$n];\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7)\
    \ . \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\
    \t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\t\
    return $fib4[$n];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho\
    \ fib4(7) . \"\\n\";", "    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <=\
    \ $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i -\
    \ 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\n/*\n * Write a function\
    \ that takes a string and returns the number of unique characters in the string.\n\
    \ * It is possible to implement this function in O(n) time.\n * >>> count_unique_chars(\"\
    apple\")\n * 5\n * >>> count_unique_chars(\"banana\")\n * 3\n */", "  $fib4 =\
    \ array(0, 0, 2, 0);\n  for ($i = 4; $i <= $n; $i++) {\n    $fib4[$i] = $fib4[$i-1]\
    \ + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n  }\n  return $fib4[$n];\n}\n\n\
    echo fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "\t\
    $a = 0;\n\t$b = 0;\n\t$c = 2;\n\t$d = 0;\n\tif ($n < 4) {\n\t\treturn $d;\n\t\
    }\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\
    \t\t$d = $a + $b + $c + $d;\n\t}\n\treturn $d;\n}\necho fib4(5);\necho \"\\n\"\
    ;\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\n/*\n * Write a\
    \ function that takes a string and returns the number of vowels in the string.\n\
    \ * >>> count_vowels('hello world')\n * 3\n * >>> count_vowels('omg this is going\
    \ to be so much fun')\n * 16\n * >>> count_vowels('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
  "\t$fib4 = array(0, 0, 2, 0);\n\tif ($n < 4) {\n\t\treturn $fib4[$n];\n\t}\n\tfor\
    \ ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5);\necho \"\\n\";\n\
    echo fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5) . \"\
    \\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "    $fib4 = array(0,\
    \ 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i\
    \ - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n\
    }\n\n/* Write a function that takes a string and returns the number of vowels\
    \ in the string.  Do not use recursion.\n>>> count_vowels('hello')\n2\n>>> count_vowels('world')\n\
    1\n>>> count_vowels('aeiou')\n5\n>>> count_vowels('aeiouaeiou')\n10\n>>> count_vowels('aeiouaeiouaeiou')\n\
    15\n>>> count_vowels('aeiouaeiouaeiouaeiou')\n20\n>>> count_vowels('aeiouaeiouaeiouaeiouaeiou')\n\
    25\n>>> count_vowels('aeiouaeiouaeiouaeiouaeiouaeiou')\n30\n>>> count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiou')\n\
    35\n>>> count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou')\n40\n>>> count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou')\n\
    45\n>>> count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou')\n50\n\
    >>> count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou')\n\
    55\n>>> count_vowels('aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouae", "\t$fib4\
    \ = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1]\
    \ + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho\
    \ fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\
    \\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tif ($n < 4) {\n\t\treturn $fib4[$n];\n\
    \t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i % 4] = $fib4[($i - 1) % 4]\
    \ + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n\t}\n\t\
    return $fib4[$n % 4];\n}\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\
    \\n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i\
    \ = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5);\necho \"\\n\";\n\
    echo fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$a = 0;\n\t$b\
    \ = 0;\n\t$c = 2;\n\t$d = 0;\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$e = $a +\
    \ $b + $c + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\t$d = $e;\n\t}\n\
    \treturn $d;\n}\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\n\
    echo fib4(7);\necho \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i\
    \ <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\
    \t}\n\treturn $fib4[$n];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\"\
    ;\necho fib4(7) . \"\\n\";", "    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <=\
    \ $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) %\
    \ 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n\
    \ % 4];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) .\
    \ \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\
    \t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\t\
    return $fib4[$n];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho\
    \ fib4(7) . \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n;\
    \ $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\
    \t}\n\treturn $fib4[$n];\n}\n\n/*\n * The Fib4 number sequence is a sequence similar\
    \ to the Fibbonacci sequnece that's defined as follows:\nfib4(0) -> 0\nfib4(1)\
    \ -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
    \ + fib4(n-4).\nPlease write a function to efficiently compute the n-th element\
    \ of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n\
    8\n>>> fib4(7)\n14\n*/", "\t$a = 0;\n\t$b = 0;\n\t$c = 2;\n\t$d = 0;\n\tfor ($i\
    \ = 3; $i <= $n; $i++) {\n\t\t$e = $a + $b + $c + $d;\n\t\t$a = $b;\n\t\t$b =\
    \ $c;\n\t\t$c = $d;\n\t\t$d = $e;\n\t}\n\treturn $d;\n}\necho fib4(5);\necho \"\
    \\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4\
    \ = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1]\
    \ + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\n\
    echo fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho\
    \ \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\
    \t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\t\
    return $fib4[$n];\n}\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\"\
    ;\necho fib4(7);\necho \"\\n\";", "    if ($n == 0) {\n        return 0;\n   \
    \ } elseif ($n == 1) {\n        return 0;\n    } elseif ($n == 2) {\n        return\
    \ 2;\n    } elseif ($n == 3) {\n        return 0;\n    } else {\n        $fib4\
    \ = array(0, 0, 2, 0);\n        for ($i = 4; $i <= $n; $i++) {\n            $fib4[$i\
    \ % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i\
    \ - 4) % 4];\n        }\n        return $fib4[$n % 4];\n    }\n}\n\n/*\n * Given\
    \ a string, return a new string where the first and last chars have been exchanged.\n\
    \ * >>> front_back('code')\n * 'eodc'\n * >>> front_back('a')\n * 'a'\n * >>>\
    \ front_back('ab')\n * 'ba'\n */", "    $fib4 = array(0, 0, 2, 0);\n    for ($i\
    \ = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] +\
    \ $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\n/*\n * A\
    \ number is called a palindrome if it reads the same from left to right as it\
    \ does from right to left.\n * For example, the numbers 1001, 202, 1221, and 12321\
    \ are all palindromes.  Write a function that takes a\n * number and returns true\
    \ if the number is a palindrome and false otherwise.\n * >>> isPalindrome(1001)\n\
    \ * true\n * >>> isPalindrome(202)\n * true\n * >>> isPalindrome(1221)\n * true\n\
    \ * >>> isPalindrome(12321)\n * true\n * >>> isPalindrome(1234)\n * false\n */",
  "    if ($n < 4) {\n        return $n * 2;\n    }\n    $a = 0;\n    $b = 0;\n  \
    \  $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a +\
    \ $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n      \
    \  $d = $e;\n    }\n    return $e;\n}\necho fib4(5);\necho \"\\n\";\necho fib4(6);\n\
    echo \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\t\
    for ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5);\necho \"\\n\";\n\
    echo fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";\n", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5) .\
    \ \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "    $a = 0;\n\
    \    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n \
    \       $d = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n\
    \    }\n    return $d;\n}\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho\
    \ \"\\n\";\necho fib4(7);\necho \"\\n\";\n\n/*\n * The Fib4 number sequence is\
    \ a sequence similar to the Fibbonacci sequnece that's defined as follows:\nfib4(0)\
    \ -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2)\
    \ + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently compute the\
    \ n-th element of the fib4 number sequence.  Do not use recursion.\n>>> fib4(5)\n\
    4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n */\n", "    $a = 0;\n    $b = 0;\n    $c\
    \ = 2;\n    $d = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $d = $a + $b +\
    \ $c;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n    }\n    return\
    \ $d;\n}\n\necho fib4(5);\necho fib4(6);\necho fib4(7);\n\n/*\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *", "\t$fib4 = array(0, 0, 2, 0);\n\tif ($n < 4) {\n\t\treturn $fib4[$n];\n\
    \t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5);\necho\
    \ \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4\
    \ = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1]\
    \ + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\n\
    echo fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho\
    \ \"\\n\";", "    if ($n < 3) {\n        return $n * 2;\n    }\n    $fib4 = [0,\
    \ 0, 2, 0];\n    for ($i = 3; $i < $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i\
    \ - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n\
    \    }\n    return $fib4[($n - 1) % 4];\n}\n\n/*\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *", "\t$fib4 = array(0, 0, 2, 0);\n\tif ($n < 4) {\n\t\treturn\
    \ $fib4[$n];\n\t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1]\
    \ + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\n\
    echo fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho\
    \ \"\\n\";", "    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++)\
    \ {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i\
    \ - 4];\n    }\n    return $fib4[$n];\n}\n\n/*\n * Write a function that takes\
    \ a string and returns the number of vowels in the string.\n * >>> count_vowels(\"\
    hello\")\n * 2\n * >>> count_vowels(\"world\")\n * 1\n * >>> count_vowels(\"\"\
    )\n * 0\n */", "\t$a = 0;\n\t$b = 0;\n\t$c = 2;\n\t$d = 0;\n\tfor ($i = 3; $i\
    \ <= $n; $i++) {\n\t\t$d = $a + $b + $c;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c =\
    \ $d;\n\t}\n\treturn $d;\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\n\
    echo fib4(7) . \"\\n\";", "    $fib4 = array(0, 0, 2, 0);\n    if ($n < 4) {\n\
    \        return $fib4[$n];\n    }\n    for ($i = 4; $i <= $n; $i++) {\n      \
    \  $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3)\
    \ % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\n/*\n * Given\
    \ a string, return the first character that does not repeat.\n * >>> firstNonRepeating(\"\
    aabbcdde\")\n * 'e'\n * >>> firstNonRepeating(\"aabbcddeff\")\n * 'f'\n * >>>\
    \ firstNonRepeating(\"aabbcddeffg\")\n * 'g'\n */", "    if ($n == 0) {\n    \
    \    return 0;\n    } elseif ($n == 1) {\n        return 0;\n    } elseif ($n\
    \ == 2) {\n        return 2;\n    } elseif ($n == 3) {\n        return 0;\n  \
    \  } else {\n        $fib4 = [0, 0, 2, 0];\n        for ($i = 4; $i <= $n; $i++)\
    \ {\n            $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i\
    \ - 4];\n        }\n        return $fib4[$n];\n    }\n}\n\n/*\n * Write a function\
    \ that takes a string and returns the number of vowels in the string.  Do not\
    \ use any built-in string functions.\n * >>> count_vowels('hello')\n * 2\n * >>>\
    \ count_vowels('world')\n * 1\n * >>> count_vowels('aeiou')\n * 5\n */", "   \
    \ $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i]\
    \ = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n  \
    \  return $fib4[$n];\n}\n\n/* The Fib5 number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\nfib5(0) -> 0\nfib5(1) ->\
    \ 0\nfib5(2) -> 2\nfib5(3) -> 0\nfib5(4) -> 0\nfib5(n) -> fib5(n-1) + fib5(n-2)\
    \ + fib5(n-3) + fib5(n-4) + fib5(n-5).\nPlease write a function to efficiently\
    \ compute the n-th element of the fib5 number sequence.  Do not use recursion.\n\
    >>> fib5(5)\n0\n>>> fib5(6)\n4\n>>> fib5(7)\n8*/", "\t$fib4 = array(0, 0, 2, 0);\n\
    \tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] +\
    \ $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5) . \"\\\
    n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "    $fib4 = array(0,\
    \ 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i\
    \ - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n\
    }\n\n/*\n * Write a function that takes a string and returns a new string with\
    \ all vowels removed.\n * >>> disemvowel(\"foobar\")\n * \"fbr\"\n * >>> disemvowel(\"\
    ruby\")\n * \"rby\"\n * >>> disemvowel(\"aeiou\")\n * \"\"\n */", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5) . \"\
    \\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "    $a = 0;\n    $b\
    \ = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n       \
    \ $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n\
    \        $d = $e;\n    }\n    return $d;\n}\n\necho fib4(5);\necho \"\\n\";\n\
    echo fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";\necho fib4(8);\necho\
    \ \"\\n\";\necho fib4(9);\necho \"\\n\";\necho fib4(10);\necho \"\\n\";\necho\
    \ fib4(11);\necho \"\\n\";\necho fib4(12);\necho \"\\n\";\necho fib4(13);\necho\
    \ \"\\n\";\necho fib4(14);\necho \"\\n\";\necho fib4(15);\necho \"\\n\";\necho\
    \ fib4(16);\necho \"\\n\";\necho fib4(17);\necho \"\\n\";\necho fib4(18);\necho\
    \ \"\\n\";\necho fib4(19);\necho \"\\n\";\necho fib4(20);\necho \"\\n\";\necho\
    \ fib4(21);\necho \"\\n\";\necho fib4(22);\necho \"\\n\";\necho fib4(23);\necho\
    \ \"\\n\";\necho fib4(24);\necho \"\\n\";\necho fib4(25);\necho \"\\n\";\necho\
    \ fib4(26);\necho \"\\n\";\necho fib4(27);\necho \"\\n\";\necho fib4(28);\necho\
    \ \"\\n\";\necho fib4(29);\necho \"\\n\";\necho fib4(30);\necho \"\\n\";\necho\
    \ fib4(31);\necho \"\\n\";\necho fib4(32);\necho \"\\n\";\necho fib4(33);\necho\
    \ \"\\n\";\necho fib4(34);\necho \"\\n\";\necho fib4(35);\necho \"\\n\";\necho\
    \ fib4(36);\necho \"\\n\";\necho fib4(37);\necho \"\\n\";\necho fib4(38);\necho",
  "\tif ($n == 0) {\n\t\treturn 0;\n\t} elseif ($n == 1) {\n\t\treturn 0;\n\t} elseif\
    \ ($n == 2) {\n\t\treturn 2;\n\t} elseif ($n == 3) {\n\t\treturn 0;\n\t} else\
    \ {\n\t\t$fib4 = array(0, 0, 2, 0);\n\t\tfor ($i = 4; $i <= $n; $i++) {\n\t\t\t\
    $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4]\
    \ + $fib4[($i - 4) % 4];\n\t\t}\n\t\treturn $fib4[$n % 4];\n\t}\n}\n\n/*\n * The\
    \ Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's\
    \ defined as follows:\nfib5(0) -> 0\nfib5(1) -> 0\nfib5(2) -> 2\nfib5(3) -> 0\n\
    fib5(4) -> 0\nfib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n\
    Please write a function to efficiently compute the n-th element of the fib5 number\
    \ sequence.  Do not use recursion.\n>>> fib5(6)\n4\n>>> fib5(7)\n8\n>>> fib5(8)\n\
    14\n*/", "    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n\
    \        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i\
    \ - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\n/*\n\
    \ * Write a function that takes a string as input and returns the string reversed.\n\
    \ * >>> reverseString('hello')\n * 'olleh'\n * >>> reverseString('A man, a plan,\
    \ a canal: Panama')\n * 'amanaP :lanac a ,nalp a ,nam A'\n */", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5) . \"\
    \\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5);\necho\
    \ \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "   \
    \ $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++)\
    \ {\n        $d = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c\
    \ = $d;\n    }\n    return $d;\n}\n\n/*\n * The Fibonacci sequence is a sequence\
    \ of numbers defined as follows:\n * fib(0) -> 0\n * fib(1) -> 1\n * fib(n) ->\
    \ fib(n-1) + fib(n-2)\n * Please write a function to efficiently compute the n-th\
    \ element of the Fibonacci sequence.  Do not use recursion.\n * >>> fib(5)\n *\
    \ 5\n * >>> fib(6)\n * 8\n * >>> fib(7)\n * 13\n */", "\t$a = 0;\n\t$b = 0;\n\t\
    $c = 2;\n\t$d = 0;\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$e = $a + $b + $c +\
    \ $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\t$d = $e;\n\t}\n\treturn $d;\n\
    }\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\n\
    echo \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++)\
    \ {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t\
    }\n\treturn $fib4[$n];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\n\
    echo fib4(7) . \"\\n\";", "\t$fib4 = [0, 0, 2, 0];\n\tfor ($i = 4; $i <= $n; $i++)\
    \ {\n\t\t$fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i\
    \ - 3) % 4] + $fib4[($i - 4) % 4];\n\t}\n\treturn $fib4[$n % 4];\n}\n\necho fib4(5)\
    \ . PHP_EOL;\necho fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;", "    if ($n <\
    \ 4) {\n        return $n == 2 ? 2 : 0;\n    }\n    $fib4 = [0, 0, 2, 0];\n  \
    \  for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4]\
    \ + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n\
    \    return $fib4[$n % 4];\n}\n\n/*\n * Given a string, return the first character\
    \ that does not repeat.\n * If there is no unique character, return null.\n *\
    \ >>> firstNonRepeatingCharacter('abacabad')\n * 'c'\n * >>> firstNonRepeatingCharacter('abacabaabacaba')\n\
    \ * null\n */", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++)\
    \ {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t\
    }\n\treturn $fib4[$n];\n}\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho\
    \ \"\\n\";\necho fib4(7);\necho \"\\n\";", "    $fib4 = [0, 0, 2, 0];\n    if\
    \ ($n < 4) {\n        return $fib4[$n];\n    }\n    for ($i = 4; $i <= $n; $i++)\
    \ {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i\
    \ - 4];\n    }\n    return $fib4[$n];\n}\n\n/*\n * Given a string, return the\
    \ first non-repeating character.\n * >>> first_non_repeating_letter('a')\n * 'a'\n\
    \ * >>> first_non_repeating_letter('stress')\n * 't'\n * >>> first_non_repeating_letter('moonmen')\n\
    \ * 'e'\n */", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\
    \t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\t\
    return $fib4[$n];\n}\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\"\
    ;\necho fib4(7);\necho \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4;\
    \ $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] +\
    \ $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5) . \"\\n\";\necho fib4(6)\
    \ . \"\\n\";\necho fib4(7) . \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i\
    \ = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5) . \"\\n\";\necho\
    \ fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\n", "\t$fib4 = array(0, 0, 2, 0);\n\
    \tif ($n < 4) {\n\t\treturn $fib4[$n];\n\t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\
    \t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\t\
    return $fib4[$n];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho\
    \ fib4(7) . \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tif ($n <= 3) {\n\t\treturn\
    \ $fib4[$n];\n\t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1]\
    \ + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho\
    \ fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\
    \\n\";", "    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n\
    \        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i\
    \ - 4];\n    }\n    return $fib4[$n];\n}\n\n/*\nGiven a string, return the first\
    \ non-repeating character in it. For example, given the string \"total\", return\
    \ 'o'. Given the string \"teeter\", return 'r'.\n>>> firstNonRepeatingChar('total')\n\
    'o'\n>>> firstNonRepeatingChar('teeter')\n'r'\n*/", "\t$fib4 = array(0, 0, 2,\
    \ 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5);\n\
    echo \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";\n",
  "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] =\
    \ $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n\
    }\n\necho fib4(5).\"\\n\";\necho fib4(6).\"\\n\";\necho fib4(7).\"\\n\";", "\t\
    $fib4 = [0, 0, 2, 0];\n\tif ($n < 4) {\n\t\treturn $fib4[$n];\n\t}\n\tfor ($i\
    \ = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5) . \"\\n\";\necho fib4(6)\
    \ . \"\\n\";\necho fib4(7) . \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i\
    \ = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5);\necho \"\\n\";\n\
    echo fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";\n", "\t$a = 0;\n\t\
    $b = 0;\n\t$c = 2;\n\t$d = 0;\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$e = $a +\
    \ $b + $c + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\t$d = $e;\n\t}\n\
    \treturn $d;\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7)\
    \ . \"\\n\";", "    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++)\
    \ {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i\
    \ - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(5);\necho \"\\n\";\necho\
    \ fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";\n", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5) . \"\
    \\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "    $fib4 = array(0,\
    \ 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i\
    \ - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n\
    }\n\n/*\n * The Fibonacci sequence is a sequence of numbers such that each number\
    \ is the sum of the two preceding ones, starting from 0 and 1.\n * That is,\n\
    \ * fib(0) = 0\n * fib(1) = 1\n * fib(n) = fib(n-1) + fib(n-2)\n * Please write\
    \ a function to efficiently compute the n-th element of the Fibonacci sequence.\
    \  Do not use recursion.\n * >>> fib(5)\n * 5\n * >>> fib(6)\n * 8\n * >>> fib(7)\n\
    \ * 13\n */", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\
    \t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\t\
    return $fib4[$n];\n}\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\"\
    ;\necho fib4(7);\necho \"\\n\";", "\t$fib4 = [0, 0, 2, 0];\n\tfor ($i = 4; $i\
    \ <= $n; $i++) {\n\t\t$fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4]\
    \ + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n\t}\n\treturn $fib4[$n % 4];\n\
    }\n\necho fib4(5) . PHP_EOL;\necho fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;",
  "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] =\
    \ $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n\
    }\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\"\
    ;\n", "\t$fib4_0 = 0;\n\t$fib4_1 = 0;\n\t$fib4_2 = 2;\n\t$fib4_3 = 0;\n\t$fib4_n\
    \ = 0;\n\tif ($n == 0) {\n\t\treturn $fib4_0;\n\t}\n\tif ($n == 1) {\n\t\treturn\
    \ $fib4_1;\n\t}\n\tif ($n == 2) {\n\t\treturn $fib4_2;\n\t}\n\tif ($n == 3) {\n\
    \t\treturn $fib4_3;\n\t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4_n = $fib4_0\
    \ + $fib4_1 + $fib4_2 + $fib4_3;\n\t\t$fib4_0 = $fib4_1;\n\t\t$fib4_1 = $fib4_2;\n\
    \t\t$fib4_2 = $fib4_3;\n\t\t$fib4_3 = $fib4_n;\n\t}\n\treturn $fib4_n;\n}\necho\
    \ fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "\t$a\
    \ = 0;\n\t$b = 0;\n\t$c = 2;\n\t$d = 0;\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t\
    $d = $a + $b + $c;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t}\n\treturn $d;\n\
    }\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\n\
    echo \"\\n\";", "    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++)\
    \ {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i\
    \ - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\necho\
    \ fib4(5);\necho fib4(6);\necho fib4(7);", "\t$fib4 = array(0, 0, 2, 0);\n\tfor\
    \ ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5).\"\\n\";\necho fib4(6).\"\
    \\n\";\necho fib4(7).\"\\n\";\n", "    $fib4 = array(0, 0, 2, 0);\n    for ($i\
    \ = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i\
    \ - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n\
    \ % 4];\n}", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\
    \t\t$fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3)\
    \ % 4] + $fib4[($i - 4) % 4];\n\t}\n\treturn $fib4[$n % 4];\n}\necho fib4(5);\n\
    echo \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t\
    $fib4 = array(0, 0, 2, 0);\n\tif ($n < 4) {\n\t\treturn $fib4[$n];\n\t}\n\tfor\
    \ ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5);\necho \"\\n\";\n\
    echo fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "    $fib4 = array(0,\
    \ 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i\
    \ - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n\
    }\n\n/* The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3)\
    \ -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write\
    \ a function to efficiently compute the n-th element of the fib4 number sequence.\
    \  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14*/",
  "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] =\
    \ $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n\
    }\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";",
  "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] =\
    \ $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n\
    }\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";",
  "    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n;\
    \ $i++) {\n        $d = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n  \
    \      $c = $d;\n    }\n    return $d;\n}\n\n/*\n * Write a function that takes\
    \ a string and returns the number of vowels in the string.\n * >>> count_vowels('hello\
    \ world')\n * 3\n * >>> count_vowels('omg this is going to be so much fun')\n\
    \ * 16\n * >>> count_vowels('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
  "    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n;\
    \ $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n\
    \        $c = $d;\n        $d = $e;\n    }\n    return $d;\n}\n\n/*\n * Write\
    \ a function that takes an array of integers and returns an array of the same\
    \ integers in the same order,\n * but with any duplicate values removed.\n * For\
    \ example:\n * >>> removeDuplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 9])\n * [1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9]\n */", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i\
    \ <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\
    \t}\n\treturn $fib4[$n];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\"\
    ;\necho fib4(7) . \"\\n\";", "    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <=\
    \ $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) %\
    \ 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n\
    \ % 4];\n}\n\n/*\n * Test code\n */\nassert(fib4(5) == 4);\nassert(fib4(6) ==\
    \ 8);\nassert(fib4(7) == 14);", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4;\
    \ $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] +\
    \ $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5);\necho \"\\n\";\n\
    echo fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tif ($n <= 3) {\n\t\treturn $fib4[$n];\n\t}\n\tfor ($i = 4; $i <=\
    \ $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\
    \t}\n\treturn $fib4[$n];\n}\n\n/*\nGiven a string, return the first non-repeating\
    \ character in it. For example, given the string \"total\", return 'o'. Given\
    \ the string \"teeter\", return 'r'.\n>>> firstNonRepeatingChar('total')\n'o'\n\
    >>> firstNonRepeatingChar('teeter')\n'r'\n*/", "\t$fib4 = array(0, 0, 2, 0);\n\
    \tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] +\
    \ $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5);\necho\
    \ \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4\
    \ = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1]\
    \ + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\n\
    echo fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "\t\
    $fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] =\
    \ $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n\
    }\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";",
  "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] =\
    \ $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n\
    }\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";",
  "    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return\
    \ 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n\
    \        return 0;\n    }\n    $fib4_0 = 0;\n    $fib4_1 = 0;\n    $fib4_2 = 2;\n\
    \    $fib4_3 = 0;\n    $fib4_4 = 0;\n    for ($i = 4; $i <= $n; $i++) {\n    \
    \    $fib4_4 = $fib4_3 + $fib4_2 + $fib4_1 + $fib4_0;\n        $fib4_0 = $fib4_1;\n\
    \        $fib4_1 = $fib4_2;\n        $fib4_2 = $fib4_3;\n        $fib4_3 = $fib4_4;\n\
    \    }\n    return $fib4_4;\n}\n\n/*\n * Write a function that takes a string\
    \ and returns the number of vowels in the string.\n * >>> count_vowels('hello')\n\
    \ * 2\n * >>> count_vowels('world')\n * 1\n * >>> count_vowels('helloworld')\n\
    \ * 3\n */", "\t$fib4 = array(0, 0, 2, 0);\n\tif ($n < 4) {\n\t\treturn $fib4[$n];\n\
    \t}\n\t$fib4[3] = 2;\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i % 4] = $fib4[($i\
    \ - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n\
    \t}\n\treturn $fib4[$n % 4];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\\
    n\";\necho fib4(7) . \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4;\
    \ $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] +\
    \ $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5);\necho \"\\n\";\necho\
    \ fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "    $fib4 = array(0,\
    \ 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i\
    \ - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n\
    }\n\n/*\n * Given a string, return the length of the longest substring without\
    \ repeating characters.\n * >>> lengthOfLongestSubstring(\"abcabcbb\")\n * 3\n\
    \ * >>> lengthOfLongestSubstring(\"bbbbb\")\n * 1\n * >>> lengthOfLongestSubstring(\"\
    pwwkew\")\n * 3\n */", "\t$fib4 = array(0, 0, 2, 0);\n\tif ($n < 4) {\n\t\treturn\
    \ $fib4[$n];\n\t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1]\
    \ + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\n\
    echo fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho\
    \ \"\\n\";\n\n/*\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++)\
    \ {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t\
    }\n\treturn $fib4[$n];\n}\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho\
    \ \"\\n\";\necho fib4(7);\necho \"\\n\";", "\tif ($n < 0) {\n\t\treturn 0;\n\t\
    }\n\t$a = 0;\n\t$b = 0;\n\t$c = 2;\n\t$d = 0;\n\tfor ($i = 3; $i <= $n; $i++)\
    \ {\n\t\t$e = $a + $b + $c + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\
    \t$d = $e;\n\t}\n\treturn $d;\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\
    \\n\";\necho fib4(7) . \"\\n\";", "    $fib4 = [0, 0, 2, 0];\n    for ($i = 4;\
    \ $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i -\
    \ 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n\
    \ % 4];\n}\n\n/*\n * Write a function that takes two strings and returns true\
    \ if they are anagrams of each other.\n * >>> is_anagram('cinema', 'iceman')\n\
    \ * True\n * >>> is_anagram('cinema', 'icemann')\n * False\n */", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tif ($n < 4) {\n\t\treturn $fib4[$n];\n\t}\n\tfor ($i = 4; $i <=\
    \ $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\
    \t}\n\treturn $fib4[$n];\n}\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho\
    \ \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor\
    \ ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5) . \"\\n\";\necho\
    \ fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "    if ($n < 4) {\n        return\
    \ $n;\n    }\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n\
    \        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i\
    \ - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\n/*\n\
    \ * Write a function that takes a string and returns the number of vowels in the\
    \ string.\n * >>> count_vowels(\"hello\")\n * 2\n * >>> count_vowels(\"world\"\
    )\n * 3\n * >>> count_vowels(\"\")\n * 0\n */", "    $a = 0;\n    $b = 0;\n  \
    \  $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $d = $a +\
    \ $b + $c;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n    }\n    return\
    \ $d;\n}\n\n/*\n * Write a function that takes a string and returns the number\
    \ of vowels in the string.\n * >>> count_vowels(\"Hello World\")\n * 3\n * >>>\
    \ count_vowels(\"Python\")\n * 2\n * >>> count_vowels(\"Theistareykjarbunga\"\
    )\n * 8\n */", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\
    \t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\t\
    return $fib4[$n];\n}\necho fib4(5);\necho fib4(6);\necho fib4(7);", "\t$fib4 =\
    \ array(0, 0, 2, 0);\n\tif ($n < 4) {\n\t\treturn $fib4[$n];\n\t}\n\tfor ($i =\
    \ 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5);\necho \"\\n\";\n\
    echo fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tif ($n < 4) {\n\t\treturn $fib4[$n];\n\t}\n\tfor ($i = 4; $i <=\
    \ $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\
    \t}\n\treturn $fib4[$n];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\"\
    ;\necho fib4(7) . \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i\
    \ <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\
    \t}\n\treturn $fib4[$n];\n}\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho\
    \ \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor\
    \ ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5);\necho \"\\n\";\n\
    echo fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5) .\
    \ \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5);\necho\
    \ \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$a\
    \ = 0;\n\t$b = 0;\n\t$c = 2;\n\t$d = 0;\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t\
    $e = $a + $b + $c + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\t$d = $e;\n\
    \t}\n\treturn $d;\n}\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\"\
    ;\necho fib4(7);\necho \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4;\
    \ $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] +\
    \ $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5) . \"\\n\";\necho fib4(6)\
    \ . \"\\n\";\necho fib4(7) . \"\\n\";", "\t$a = 0;\n\t$b = 0;\n\t$c = 2;\n\t$d\
    \ = 0;\n\tif ($n == 0) {\n\t\treturn 0;\n\t}\n\tif ($n == 1) {\n\t\treturn 0;\n\
    \t}\n\tif ($n == 2) {\n\t\treturn 2;\n\t}\n\tif ($n == 3) {\n\t\treturn 0;\n\t\
    }\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$e = $a + $b + $c + $d;\n\t\t$a = $b;\n\
    \t\t$b = $c;\n\t\t$c = $d;\n\t\t$d = $e;\n\t}\n\treturn $e;\n}\necho fib4(5);\n\
    echo \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t\
    $fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] =\
    \ $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n\
    }\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\n\
    echo \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++)\
    \ {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t\
    }\n\treturn $fib4[$n];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\n\
    echo fib4(7) . \"\\n\";", "    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i\
    \ <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2)\
    \ % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n\
    \ % 4];\n}\n\n/*\n * Write a function that takes in a string and returns the first\
    \ character that is not repeated anywhere in the string.\n * For example, given\
    \ the string \"abcdabcd\", the function should return 'e'.\n * Given the string\
    \ \"abcbad\", the function should return 'd'.\n * If there are no unique characters\
    \ in the string, return null.\n * >>> first_non_repeating_letter('abcdabcd')\n\
    \ * 'e'\n * >>> first_non_repeating_letter('abcbad')\n * 'd'\n * >>> first_non_repeating_letter('abcabcabc')\n\
    \ * null\n */", "\t$fib4 = [0, 0, 2, 0];\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\
    \t$fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) %\
    \ 4] + $fib4[($i - 4) % 4];\n\t}\n\treturn $fib4[$n % 4];\n}\n\necho fib4(5) .\
    \ \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tif ($n < 4) {\n\t\treturn $fib4[$n];\n\t}\n\tfor ($i = 4; $i <=\
    \ $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\
    \t}\n\treturn $fib4[$n];\n}\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho\
    \ \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor\
    \ ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5) . \"\\n\";\necho fib4(6)\
    \ . \"\\n\";\necho fib4(7) . \"\\n\";", "    $fib4 = array(0, 0, 2, 0);\n    for\
    \ ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2]\
    \ + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\n/*\n *\
    \ Write a function that takes a string and returns the number of vowels in the\
    \ string.  Do not use any built-in string functions.\n>>> count_vowels('hello')\n\
    2\n>>> count_vowels('world')\n1\n>>> count_vowels('aaaa')\n4\n>>> count_vowels('bbbb')\n\
    0\n>>> count_vowels('why')\n0\n */", "\t$a = 0;\n\t$b = 0;\n\t$c = 2;\n\t$d =\
    \ 0;\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$e = $a + $b + $c + $d;\n\t\t$a =\
    \ $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\t$d = $e;\n\t}\n\treturn $d;\n}\necho fib4(5);\n\
    echo \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", " \
    \   $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i]\
    \ = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n  \
    \  return $fib4[$n];\n}\n\n/*\n * Write a function that takes a string and returns\
    \ the number of vowels in the string.  Do not use any built-in functions.\n>>>\
    \ count_vowels('hello')\n2\n>>> count_vowels('world')\n1\n>>> count_vowels('aeiou')\n\
    5\n */", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t\
    $fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn\
    \ $fib4[$n];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7)\
    \ . \"\\n\";\n", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++)\
    \ {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t\
    }\n\treturn $fib4[$n];\n}\necho fib4(5).\"\\n\";\necho fib4(6).\"\\n\";\necho\
    \ fib4(7).\"\\n\";", "\t$fib = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++)\
    \ {\n\t\t$fib[$i % 4] = $fib[($i - 1) % 4] + $fib[($i - 2) % 4] + $fib[($i - 3)\
    \ % 4] + $fib[($i - 4) % 4];\n\t}\n\treturn $fib[$n % 4];\n}\n\necho fib4(5) .\
    \ \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5) . \"\
    \\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5);\n\
    echo \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t\
    $fib4 = [0, 0, 2, 0];\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1]\
    \ + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\n\
    /*\n * The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3)\
    \ -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write\
    \ a function to efficiently compute the n-th element of the fib4 number sequence.\
    \  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n */",
  "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] =\
    \ $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n\
    }\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\"\
    ;\n", "    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n  \
    \      $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i -\
    \ 4];\n    }\n    return $fib4[$n];\n}\n\n/*\n * The Fibonacci sequence is a sequence\
    \ of numbers where each successive number is the sum of the previous two.\n *\
    \ The sequence starts off like so: (0), 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,\
    \ 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368,\
    \ 75025, 121393, 196418, 317811, \u2026\n *\n * The Fibonacci sequence is named\
    \ after Leonardo Pisano, who was known as Fibonacci.\n * Fibonacci\u2019s 1202\
    \ book Liber Abaci introduced the sequence to Western European mathematics,\n\
    \ * although the sequence had been described earlier in Indian mathematics.\n\
    \ *\n * Write a function that takes in an integer n and returns the nth Fibonacci\
    \ number.\n *\n * >>> fib(0)\n * 0\n * >>> fib(1)\n * 1\n * >>> fib(2)\n * 1\n\
    \ * >>> fib(3)\n * 2\n * >>> fib(4)\n * 3\n * >>> fib(5)\n * 5\n * >>> fib(6)\n\
    \ * 8\n * >>> fib(7)\n * 13\n * >>> fib(8)\n * 21\n * >>> fib(9)\n * 34\n * >>>\
    \ fib(10)\n * 55\n * >>> fib(11)\n * 89\n * >>> fib(12)\n * 144\n * >>> fib(13)\n\
    \ * 233\n * >>> fib(14)\n * 377\n * >>> fib(15)\n * 610\n * >>> fib(16)\n * 987\n\
    \ * >>> fib(17)\n * 1597\n * >>> fib(18)\n * 2584\n * >>> fib(19)\n * 4181\n *\
    \ >>> fib(20)\n", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++)\
    \ {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t\
    }\n\treturn $fib4[$n];\n}\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho\
    \ \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor\
    \ ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5) . \"\\n\";\necho fib4(6)\
    \ . \"\\n\";\necho fib4(7) . \"\\n\";", "    $a = 0;\n    $b = 0;\n    $c = 2;\n\
    \    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $d = $a + $b + $c;\n\
    \        $a = $b;\n        $b = $c;\n        $c = $d;\n    }\n    return $d;\n\
    }\n\n/*\n * Write a function that takes a string and returns the number of vowels\
    \ in the string.\n * >>> count_vowels(\"hello\")\n * 2\n * >>> count_vowels(\"\
    world\")\n * 1\n * >>> count_vowels(\"\")\n * 0\n */", "\t$fib4 = array(0, 0,\
    \ 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5);\necho\
    \ \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";\n\n/*\n\
    \ * Write a function that takes a string and returns the number of vowels in the\
    \ string.  Do not count 'y' as a vowel.\n>>> count_vowels('hello world')\n3\n\
    >>> count_vowels('HELLO WORLD')\n3\n>>> count_vowels('hEllO wOrld')\n3\n>>> count_vowels('hEllO\
    \ wOrld')\n3\n>>> count_vowels('12345')\n0\n>>> count_vowels('aeiou')\n5\n>>>\
    \ count_vowels('why')\n0\n*/", "\tif ($n == 0) {\n\t\treturn 0;\n\t}\n\tif ($n\
    \ == 1) {\n\t\treturn 0;\n\t}\n\tif ($n == 2) {\n\t\treturn 2;\n\t}\n\tif ($n\
    \ == 3) {\n\t\treturn 0;\n\t}\n\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i\
    \ <= $n; $i++) {\n\t\t$fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4]\
    \ + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n\t}\n\treturn $fib4[$n % 4];\n\
    }\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\n\
    echo \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tif ($n < 4) {\n\t\treturn $fib4[$n];\n\
    \t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i % 4] = $fib4[($i - 1) % 4]\
    \ + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n\t}\n\t\
    return $fib4[$n % 4];\n}\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho\
    \ \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tif\
    \ ($n < 4) {\n\t\treturn $fib4[$n];\n\t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\
    \t$fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) %\
    \ 4] + $fib4[($i - 4) % 4];\n\t}\n\treturn $fib4[$n % 4];\n}\n\necho fib4(5) .\
    \ \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5) .\
    \ \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "    $fib4 = array(0,\
    \ 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i\
    \ - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n\
    }\n\n/*\n * Write a function that takes an array of integers and returns the sum\
    \ of the integers after adding 1 to each.\n * >>> plusOneSum([1, 2, 3, 4])\n *\
    \ 14\n * >>> plusOneSum([-1, -2, -3, -4])\n * -10\n */", "\t$fib4 = array(0, 0,\
    \ 2, 0);\n\tif ($n < 4) {\n\t\treturn $fib4[$n];\n\t}\n\tfor ($i = 4; $i <= $n;\
    \ $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\
    \t}\n\treturn $fib4[$n];\n}\n\n/*\n * The Fibonacci sequence is defined as follows:\n\
    \ * fib(0) -> 0\n * fib(1) -> 1\n * fib(n) -> fib(n-1) + fib(n-2)\n * Please write\
    \ a function to efficiently compute the n-th element of the Fibonacci sequence.\
    \  Do not use recursion.\n * >>> fib(5)\n * 5\n * >>> fib(6)\n * 8\n * >>> fib(7)\n\
    \ * 13\n */", "\t$a = 0;\n\t$b = 0;\n\t$c = 2;\n\t$d = 0;\n\tif ($n == 0) {\n\t\
    \treturn $a;\n\t}\n\tif ($n == 1) {\n\t\treturn $b;\n\t}\n\tif ($n == 2) {\n\t\
    \treturn $c;\n\t}\n\tif ($n == 3) {\n\t\treturn $d;\n\t}\n\tfor ($i = 4; $i <=\
    \ $n; $i++) {\n\t\t$e = $a + $b + $c + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c\
    \ = $d;\n\t\t$d = $e;\n\t}\n\treturn $e;\n}\necho fib4(5);\necho \"\\n\";\necho\
    \ fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5) . \"\
    \\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5);\n\
    echo fib4(6);\necho fib4(7);", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i\
    \ <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\
    \t}\n\treturn $fib4[$n];\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\n\
    echo fib4(7) . \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <=\
    \ $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\
    \t}\n\treturn $fib4[$n];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\"\
    ;\necho fib4(7) . \"\\n\";\n", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i\
    \ <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\
    \t}\n\treturn $fib4[$n];\n}\n\n/*\n * Write a function that takes an array of\
    \ integers and returns the sum of the integers after adding 1 to each.\n * >>>\
    \ plusOneSum([1, 2, 3, 4])\n * 14\n * >>> plusOneSum([-5, -4, -3, -2])\n * -13\n\
    \ */", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i]\
    \ = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n\
    }\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";",
  "    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    if ($n == 0) {\n      \
    \  return $a;\n    }\n    if ($n == 1) {\n        return $b;\n    }\n    if ($n\
    \ == 2) {\n        return $c;\n    }\n    if ($n == 3) {\n        return $d;\n\
    \    }\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n\
    \        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n\
    \    return $e;\n}\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\"\
    ;\necho fib4(7);\necho \"\\n\";\necho fib4(8);\necho \"\\n\";\necho fib4(9);\n\
    echo \"\\n\";\necho fib4(10);\necho \"\\n\";\necho fib4(11);\necho \"\\n\";\n\
    echo fib4(12);\necho \"\\n\";\necho fib4(13);\necho \"\\n\";\necho fib4(14);\n\
    echo \"\\n\";\necho fib4(15);\necho \"\\n\";\necho fib4(16);\necho \"\\n\";\n\
    echo fib4(17);\necho \"\\n\";\necho fib4(18);\necho \"\\n\";\necho fib4(19);\n\
    echo \"\\n\";\necho fib4(20);\necho \"\\n\";\necho fib4(21);\necho \"\\n\";\n\
    echo fib4(22);\necho \"\\n\";\necho fib4(23);\necho \"\\n\";\necho fib4(24);\n\
    echo \"\\n\";\necho fib4(25);\necho \"\\n\";\necho fib4(26);\necho \"\\n\";\n\
    echo fib4(27);\necho \"\\n\";\necho fib4(28);\necho \"\\n\";\necho fib4(29);\n\
    echo \"\\n\";\necho fib4(30);\necho \"\\n\";\necho fib4(31);\necho \"\\n\";\n\
    echo fib4(32);\necho", "\t$a = 0;\n\t$b = 0;\n\t$c = 2;\n\t$d = 0;\n\tfor ($i\
    \ = 3; $i <= $n; $i++) {\n\t\t$e = $a + $b + $c + $d;\n\t\t$a = $b;\n\t\t$b =\
    \ $c;\n\t\t$c = $d;\n\t\t$d = $e;\n\t}\n\treturn $d;\n}\n\necho fib4(5) . \"\\\
    n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "    $fib4 = array(0,\
    \ 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i\
    \ - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n\
    }\n\n/*\n * Write a function that takes a string and returns the number of unique\
    \ characters in the string.\n * It is possible to implement this function in O(n)\
    \ time.\n * >>> count_unique_chars(\"abcde\")\n * 5\n * >>> count_unique_chars(\"\
    aabbcc\")\n * 2\n * >>> count_unique_chars(\"abcdea\")\n * 5\n * >>> count_unique_chars(\"\
    abcba\")\n * 2\n */", "    if ($n == 0) {\n        return 0;\n    }\n    if ($n\
    \ == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n \
    \   }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4 = [0, 0, 2, 0];\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) %\
    \ 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n\
    \    return $fib4[$n % 4];\n}\n\n/*\n * Given a string, return the first non-repeating\
    \ character in it.\n * For example, given \"total\", return 'o'.\n * Given \"\
    teeter\", return 'r'.\n */", "\t$fib4 = array(0, 0, 2, 0);\n\tif ($n < 4) {\n\t\
    \treturn $fib4[$n];\n\t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1]\
    \ + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho\
    \ fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "\t$fib4\
    \ = array(0, 0, 2, 0);\n\tif ($n < 4) {\n\t\treturn $fib4[$n];\n\t}\n\tfor ($i\
    \ = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\n/*\n * The Fibonacci sequence\
    \ is defined as follows:\n * fib(0) -> 0\n * fib(1) -> 1\n * fib(n) -> fib(n-1)\
    \ + fib(n-2)\n *\n * Please write a function to efficiently compute the n-th element\
    \ of the Fibonacci sequence.\n * Do not use recursion.\n *\n * >>> fib(5)\n *\
    \ 5\n * >>> fib(6)\n * 8\n * >>> fib(7)\n * 13\n */", "    $fib4 = array(0, 0,\
    \ 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1]\
    \ + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n\
    }\n\n/*\n * Write a function that takes a string and returns the number of vowels\
    \ in the string.\n * >>> count_vowels('hello')\n * 2\n * >>> count_vowels('world')\n\
    \ * 1\n * >>> count_vowels('aeiou')\n * 5\n */", "    $fib4 = array(0, 0, 2, 0);\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i\
    \ - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\n/*\n\
    \ * Write a function that takes a string and returns the number of vowels in the\
    \ string.\n * >>> num_vowels(\"hello\")\n * 2\n * >>> num_vowels(\"world\")\n\
    \ * 3\n * >>> num_vowels(\"\")\n * 0\n */", "\t$a = 0;\n\t$b = 0;\n\t$c = 2;\n\
    \t$d = 0;\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$e = $a + $b + $c + $d;\n\t\t\
    $a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\t$d = $e;\n\t}\n\treturn $d;\n}\necho\
    \ fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\
    \\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t\
    $fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn\
    \ $fib4[$n];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7)\
    \ . \"\\n\";\n", "    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++)\
    \ {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i\
    \ - 4];\n    }\n    return $fib4[$n];\n}\necho fib4(5);\necho \"\\n\";\necho fib4(6);\n\
    echo \"\\n\";\necho fib4(7);\necho \"\\n\";", "    $fib4 = array(0, 0, 2, 0);\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) %\
    \ 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n\
    \    return $fib4[$n % 4];\n}\n\n/*\n * Write a function that takes a string and\
    \ returns the number of unique characters in the string.\n * It is possible to\
    \ implement this function in O(n) time.\n *\n * >>> num_unique_chars(\"abcde\"\
    )\n * 5\n * >>> num_unique_chars(\"aabbcc\")\n * 2\n * >>> num_unique_chars(\"\
    abcdea\")\n * 5\n * >>> num_unique_chars(\"abcba\")\n * 2\n * >>> num_unique_chars(\"\
    aaaaa\")\n * 1\n * >>> num_unique_chars(\"\")\n * 0\n */", "\t$a = 0;\n\t$b =\
    \ 0;\n\t$c = 2;\n\t$d = 0;\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$e = $a + $b\
    \ + $c + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\t$d = $e;\n\t}\n\t\
    return $d;\n}\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho\
    \ fib4(7);\necho \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tif ($n < 4) {\n\t\
    \treturn $fib4[$n];\n\t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1]\
    \ + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\n\
    echo fib4(5) . PHP_EOL;\necho fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;\n",
  "    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return\
    \ 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n\
    \        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n\
    \    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n       \
    \ $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return\
    \ $e;\n}\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\n\
    echo \"\\n\";\necho fib4(8);\necho \"\\n\";\necho fib4(9);\necho \"\\n\";\necho\
    \ fib4(10);\necho \"\\n\";\necho fib4(11);\necho \"\\n\";\necho fib4(12);\necho\
    \ \"\\n\";\necho fib4(13);\necho \"\\n\";\necho fib4(14);\necho \"\\n\";\necho\
    \ fib4(15);\necho \"\\n\";\necho fib4(16);\necho \"\\n\";\necho fib4(17);\necho\
    \ \"\\n\";\necho fib4(18);\necho \"\\n\";\necho fib4(19);\necho \"\\n\";\necho\
    \ fib4(20);\necho \"\\n\";\necho fib4(21);\necho \"\\n\";\necho fib4(22);\necho\
    \ \"\\n\";\necho fib4(23);\necho \"\\n\";\necho fib4(24);\necho \"\\n\";\necho\
    \ fib4(25);\necho \"\\n\";\necho fib4(26);\necho \"\\n\";\necho fib4(27);\necho\
    \ \"\\n\";\necho fib4(28);\necho \"\\n\";\necho fib4(29);\necho \"\\n\";\necho\
    \ fib4(30);\necho \"\\n\";\necho fib4(31);\necho \"\\n\";\necho fib4(32);\necho\
    \ \"\\n\";\n", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\
    \t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\t\
    return $fib4[$n];\n}\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\\
    n\";\necho fib4(7);\necho \"\\n\";\n", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i\
    \ = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5);\necho \"\\n\";\n\
    echo fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4 = array(0,\
    \ 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5) .\
    \ \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\n", "    $fib4 =\
    \ [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i\
    \ - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n\
    \    }\n    return $fib4[$n % 4];\n}\n\n/*", "\t$fib4 = array(0, 0, 2, 0);\n\t\
    for ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5);\necho \"\\n\";\n\
    echo fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";", "\t$a = 0;\n\t$b\
    \ = 0;\n\t$c = 2;\n\t$d = 0;\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$d = $a +\
    \ $b + $c;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t}\n\treturn $d;\n}\necho\
    \ fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "   \
    \ $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i]\
    \ = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n  \
    \  return $fib4[$n];\n}\n\n/*\n * The Fibonacci sequence is defined as follows:\n\
    \ * fib(0) -> 0\n * fib(1) -> 1\n * fib(n) -> fib(n-1) + fib(n-2)\n * Please write\
    \ a function to efficiently compute the n-th element of the Fibonacci sequence.\
    \  Do not use recursion.\n * >>> fib(5)\n * 5\n * >>> fib(6)\n * 8\n * >>> fib(7)\n\
    \ * 13\n */", "    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++)\
    \ {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i\
    \ - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(5);\necho \"\\n\";\necho\
    \ fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";\n", "\t$a = 0;\n\t$b =\
    \ 0;\n\t$c = 2;\n\t$d = 0;\n\tfor ($i = 3; $i <= $n; $i++) {\n\t\t$e = $a + $b\
    \ + $c + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\t$d = $e;\n\t}\n\t\
    return $d;\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7)\
    \ . \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tif ($n < 4) {\n\t\treturn $fib4[$n];\n\
    \t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2]\
    \ + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(5) .\
    \ PHP_EOL;\necho fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;", "    $fib4 = array(0,\
    \ 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i\
    \ - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n\
    }\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";",
  "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i %\
    \ 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i\
    \ - 4) % 4];\n\t}\n\treturn $fib4[$n % 4];\n}\n\necho fib4(5) . \"\\n\";\necho\
    \ fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\
    \tif ($n < 4) {\n\t\treturn $fib4[$n];\n\t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\
    \t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\t\
    return $fib4[$n];\n}\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\\
    n\";\necho fib4(7);\necho \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i\
    \ = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3]\
    \ + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\necho fib4(5) . \"\\n\";\necho fib4(6)\
    \ . \"\\n\";\necho fib4(7) . \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tif ($n\
    \ < 4) {\n\t\treturn $fib4[$n];\n\t}\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i]\
    \ = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n\
    }\n\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\n\
    echo \"\\n\";", "\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++)\
    \ {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t\
    }\n\treturn $fib4[$n];\n}\n\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\n\
    echo fib4(7) . \"\\n\";", "\tif ($n == 0) {\n\t\treturn 0;\n\t}\n\tif ($n == 1)\
    \ {\n\t\treturn 0;\n\t}\n\tif ($n == 2) {\n\t\treturn 2;\n\t}\n\tif ($n == 3)\
    \ {\n\t\treturn 0;\n\t}\n\t$fib4_array = array(0, 0, 2, 0);\n\tfor ($i = 4; $i\
    \ <= $n; $i++) {\n\t\t$fib4_array[$i % 4] = $fib4_array[($i - 1) % 4] + $fib4_array[($i\
    \ - 2) % 4] + $fib4_array[($i - 3) % 4] + $fib4_array[($i - 4) % 4];\n\t}\n\t\
    return $fib4_array[$n % 4];\n}\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\"\
    ;\necho fib4(7) . \"\\n\";"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
