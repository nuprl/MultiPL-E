name: HumanEval_125_split_words
language: php
prompt: "<?php\n/* Given a string of words, return an array of words split on whitespace,\
  \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
  \ exists you should return the number of lower-case letters with odd order in the\n\
  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"\
  Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\"\
  )\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/\nfunction split_words($txt)\
  \ {\n"
tests: "function candidate(...$args) {\n    return split_words(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"Hello world!\") !== array(\"Hello\", \"world!\"\
  )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,world!\"\
  ) !== array(\"Hello\", \"world!\")) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(\"Hello world,!\") !== array(\"Hello\", \"world,!\")) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello,Hello,world !\"\
  ) !== array(\"Hello,Hello,world\", \"!\")) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"abcdef\") !== 3) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"aaabb\") !== 2) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"aaaBb\") !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(\"\") !== 0) { throw new Exception(\"Test failed!\"); }\n\
  }\n\ntest();"
completions: ["    if (strpos($txt, ' ') !== false) {\n        return explode(' ',\
    \ $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if ($i % 2 == 0 && ord($txt[$i]) % 2 == 1) {\n        \
    \        $count++;\n            }\n        }\n        return $count;\n    }\n\
    }\n\n/* Given a string of words, return the number of words that start with a\
    \ capital letter.\nExamples\n>>> capital_words(\"Hello world!\")\n1\n>>> capital_words(\"\
    Hello,world!\")\n1\n>>> capital_words(\"abcdef\")\n0*/", "    $txt = str_replace(array(\"\
    \\r\\n\", \"\\r\", \"\\n\"), \"\", $txt);\n    $txt = str_replace(\" \", \",\"\
    , $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\"\
    ,,\", \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n    $txt =\
    \ str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n\
    \    $txt = str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\",,\",\
    \ \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\"\
    ,,\", \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n    $txt =\
    \ str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n\
    \    $txt = str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\",,\",\
    \ \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\"\
    ,,\", \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n    $txt =\
    \ str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n\
    \    $txt = str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\",,\",\
    \ \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\"\
    ,,\", \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n    $txt =\
    \ str_replace(\",,\", \",\", $txt);\n    $txt = str_replace(\",,\", \",\", $txt);\n",
  "    $arr = explode(\" \", $txt);\n    if (count($arr) == 1) {\n        $arr = explode(\"\
    ,\", $txt);\n        if (count($arr) == 1) {\n            $arr = str_split($txt);\n\
    \            $count = 0;\n            foreach ($arr as $item) {\n            \
    \    if (ord($item) % 2 == 1) {\n                    $count++;\n             \
    \   }\n            }\n            return $count;\n        }\n    }\n    return\
    \ $arr;\n}\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/",
  "    $words = explode(' ', $txt);\n    if (count($words) > 1) {\n        return\
    \ $words;\n    }\n    $words = explode(',', $txt);\n    if (count($words) > 1)\
    \ {\n        return $words;\n    }\n    $count = 0;\n    for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n        if (ord($txt[$i]) % 2 == 1) {\n            $count++;\n    \
    \    }\n    }\n    return $count;\n}\n\n/* Given an array of integers, return\
    \ the sum of all integers that are divisible by 3 or 5.\nExamples\n>>> sum_divisible_by_3_or_5([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n33\n>>> sum_divisible_by_3_or_5([-5, -4, -3, -2,\
    \ -1, 0, 1, 2, 3, 4, 5])\n0\n>>> sum_divisible_by_3_or_5([-5, -4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n45*/", "    $txt = str_replace(array(\"\
    \\n\", \"\\r\", \"\\t\"), '', $txt);\n    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    $txt = str_replace(',', ' ', $txt);\n    $txt = str_replace('.',\
    \ ' ', $txt);\n    $txt = str_replace('!', ' ', $txt);\n    $txt = str_replace('?',\
    \ ' ', $txt);\n    $txt = str_replace(';', ' ', $txt);\n    $txt = str_replace(':',\
    \ ' ', $txt);\n    $txt = str_replace('-', ' ', $txt);\n    $txt = str_replace('_',\
    \ ' ', $txt);\n    $txt = str_replace('(', ' ', $txt);\n    $txt = str_replace(')',\
    \ ' ', $txt);\n    $txt = str_replace('[', ' ', $txt);\n    $txt = str_replace(']',\
    \ ' ', $txt);\n    $txt = str_replace('{', ' ', $txt);\n    $txt = str_replace('}',\
    \ ' ', $txt);\n    $txt = str_replace('\"', ' ', $txt);\n    $txt = str_replace(\"\
    '\", ' ', $txt);\n    $txt = str_replace('/', ' ', $txt);\n    $txt = str_replace('\\\
    \\', ' ', $txt);\n    $txt = str_replace('|', ' ', $txt);\n    $txt = str_replace('+',\
    \ ' ', $txt);\n    $txt = str_replace('=', ' ', $txt);\n    $txt = str_replace('*',\
    \ ' ', $txt);\n    $txt = str_replace('&', ' ', $txt);\n    $txt = str_replace('^',\
    \ ' ', $txt);\n    $txt = str_replace('%', ' ', $txt);\n    $txt = str_replace('$',\
    \ ' ', $txt);\n    $txt = str_replace('#', ' ', $txt);\n    $txt = str_replace('@',\
    \ ' ', $txt);\n    $txt = str_replace('", "    if(strpos($txt, ' ') !== false)\
    \ {\n        return explode(' ', $txt);\n    }\n    if(strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    }\n    $count = 0;\n    for($i =\
    \ 0; $i < strlen($txt); $i++) {\n        if(ord($txt[$i]) % 2 != 0) {\n      \
    \      $count++;\n        }\n    }\n    return $count;\n}\n\n/* Given an array\
    \ of integers, return an array of integers where each integer is multiplied by\
    \ 2.\nExamples\n>>> double_array(array(1, 2, 3))\narray(2, 4, 6)\n>>> double_array(array(0,\
    \ 0, 0))\narray(0, 0, 0)\n>>> double_array(array(1, 2, 3, 4, 5, 6))\narray(2,\
    \ 4, 6, 8, 10, 12)*/", "    if (strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return\
    \ explode(',', $txt);\n    } else {\n        $count = 0;\n        for ($i = 0;\
    \ $i < strlen($txt); $i++) {\n            if ($i % 2 == 0) {\n               \
    \ $count++;\n            }\n        }\n        return $count;\n    }\n}\n\n/*\
    \ Given an array of integers, return the sum of the integers that are in odd positions\
    \ in the array.\nExamples\n>>> sum_odd_positions(array(1, 2, 3, 4, 5))\n9\n>>>\
    \ sum_odd_positions(array(0, 1, 2, 3, 4, 5))\n9\n>>> sum_odd_positions(array(1,\
    \ 2, 3, 4, 5, 6))\n12*/", "    if (strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return\
    \ explode(',', $txt);\n    } else {\n        $count = 0;\n        for ($i = 0;\
    \ $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2 != 0) {\n    \
    \            $count++;\n            }\n        }\n        return $count;\n   \
    \ }\n}\n\necho '<pre>';\nprint_r(split_words('Hello world!'));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(split_words('Hello,world!'));\necho '</pre>';\necho '<pre>';\n\
    print_r(split_words('abcdef'));\necho '</pre>';", "    $txt = trim($txt);\n  \
    \  $txt = preg_replace('/[^a-zA-Z0-9\\s]/', '', $txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 != 0) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\n/* Given a string\
    \ of words, return an array of words split on whitespace, if no whitespaces exists\
    \ in the text you\nshould split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\nalphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace('.', ' ', $txt);\n    $txt = str_replace('!',\
    \ ' ', $txt);\n    $txt = str_replace('?', ' ', $txt);\n    $txt = str_replace(';',\
    \ ' ', $txt);\n    $txt = str_replace(':', ' ', $txt);\n    $txt = str_replace('-',\
    \ ' ', $txt);\n    $txt = str_replace('_', ' ', $txt);\n    $txt = str_replace('(',\
    \ ' ', $txt);\n    $txt = str_replace(')', ' ', $txt);\n    $txt = str_replace('[',\
    \ ' ', $txt);\n    $txt = str_replace(']', ' ', $txt);\n    $txt = str_replace('{',\
    \ ' ', $txt);\n    $txt = str_replace('}', ' ', $txt);\n    $txt = str_replace('\"\
    ', ' ', $txt);\n    $txt = str_replace(\"'\", ' ', $txt);\n    $txt = str_replace('/',\
    \ ' ', $txt);\n    $txt = str_replace('\\\\', ' ', $txt);\n    $txt = str_replace('+',\
    \ ' ', $txt);\n    $txt = str_replace('=', ' ', $txt);\n    $txt = str_replace('*',\
    \ ' ', $txt);\n    $txt = str_replace('&', ' ', $txt);\n    $txt = str_replace('^',\
    \ ' ', $txt);\n    $txt = str_replace('%', ' ', $txt);\n    $txt = str_replace('$',\
    \ ' ', $txt);\n    $txt = str_replace('#', ' ', $txt);\n    $txt = str_replace('@',\
    \ ' ', $txt);\n    $txt = str_replace('~', ' ', $txt);\n    $txt = str_replace('`',\
    \ ' ', $txt);\n    $txt = str_replace('<', ' ', $txt);\n    $txt = str_replace('>',\
    \ ' ', $txt);\n    $txt = str_replace('|', ' ', $txt);", "    $arr = [];\n   \
    \ if (strpos($txt, ' ') !== false) {\n        $arr = explode(' ', $txt);\n   \
    \ } elseif (strpos($txt, ',') !== false) {\n        $arr = explode(',', $txt);\n\
    \    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++)\
    \ {\n            if (ord($txt[$i]) % 2 !== 0) {\n                $count++;\n \
    \           }\n        }\n        $arr = $count;\n    }\n    return $arr;\n}\n\
    \n/* Given an array of integers, return the sum of all integers in the array that\
    \ are greater than or equal to the\nfirst element in the array and less than or\
    \ equal to the last element in the array.\nExamples\n>>> sum_range([1, 4])\n10\n\
    >>> sum_range([4, 1])\n10\n>>> sum_range([5, 10, 3])\n22\n>>> sum_range([10, 5,\
    \ 3])\n8*/", "    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\n/* Given a string\
    \ of words, return an array of words split on whitespace, if no whitespaces exists\
    \ in the text you\nshould split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\nalphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    if (strpos($txt, ' ') !==\
    \ false) {\n        return explode(' ', $txt);\n    } else if (strpos($txt, ',')\
    \ !== false) {\n        return explode(',', $txt);\n    } else {\n        $count\
    \ = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ with odd order in the array, the first integer has order 0,\nthe second integer\
    \ has order 1, ...\nExamples\n>>> sum_odd_order(array(1, 2, 3, 4, 5))\n9\n>>>\
    \ sum_odd_order(array(1, 2, 3, 4, 5, 6))\n9\n>>> sum_odd_order(array(1, 2, 3,\
    \ 4, 5, 6, 7))\n16*/", "    if (strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return\
    \ explode(',', $txt);\n    } else {\n        $count = 0;\n        for ($i = 0;\
    \ $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2 != 0) {\n    \
    \            $count++;\n            }\n        }\n        return $count;\n   \
    \ }\n}\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/",
  "    if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n  \
    \  } elseif (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n\
    \    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++)\
    \ {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n  \
    \          }\n        }\n        return $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello\
    \ world!'));\nprint_r(split_words('Hello,world!'));\nprint_r(split_words('abcdef'));\n\
    echo '</pre>';", "    $arr = explode(\" \", $txt);\n    if (count($arr) > 1) {\n\
    \        return $arr;\n    }\n    $arr = explode(\",\", $txt);\n    if (count($arr)\
    \ > 1) {\n        return $arr;\n    }\n    $count = 0;\n    for ($i = 0; $i <\
    \ strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 != 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\necho \"<pre>\";\nprint_r(split_words(\"\
    Hello world!\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(split_words(\"Hello,world!\"\
    ));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(split_words(\"abcdef\"));\necho\
    \ \"</pre>\";", "    $txt = str_replace(',', ' ', $txt);\n    $txt = str_replace('.',\
    \ ' ', $txt);\n    $txt = str_replace('!', ' ', $txt);\n    $txt = str_replace('?',\
    \ ' ', $txt);\n    $txt = str_replace(';', ' ', $txt);\n    $txt = str_replace(':',\
    \ ' ', $txt);\n    $txt = str_replace('-', ' ', $txt);\n    $txt = str_replace('_',\
    \ ' ', $txt);\n    $txt = str_replace('+', ' ', $txt);\n    $txt = str_replace('=',\
    \ ' ', $txt);\n    $txt = str_replace('(', ' ', $txt);\n    $txt = str_replace(')',\
    \ ' ', $txt);\n    $txt = str_replace('[', ' ', $txt);\n    $txt = str_replace(']',\
    \ ' ', $txt);\n    $txt = str_replace('{', ' ', $txt);\n    $txt = str_replace('}',\
    \ ' ', $txt);\n    $txt = str_replace('\"', ' ', $txt);\n    $txt = str_replace(\"\
    '\", ' ', $txt);\n    $txt = str_replace('/', ' ', $txt);\n    $txt = str_replace('\\\
    \\', ' ', $txt);\n    $txt = str_replace('|', ' ', $txt);\n    $txt = str_replace('<',\
    \ ' ', $txt);\n    $txt = str_replace('>', ' ', $txt);\n    $txt = str_replace('*',\
    \ ' ', $txt);\n    $txt = str_replace('&', ' ', $txt);\n    $txt = str_replace('^',\
    \ ' ', $txt);\n    $txt = str_replace('%', ' ', $txt);\n    $txt = str_replace('$',\
    \ ' ', $txt);\n    $txt = str_replace('#', ' ', $txt);\n    $txt = str_replace('@',\
    \ ' ', $txt);\n    $txt = str_replace('~', ' ', $txt);\n    $txt = str_replace('`',\
    \ ' ', $txt);", "    $txt = trim($txt);\n    if (strpos($txt, ' ') !== false)\
    \ {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return the number of vowels\
    \ in the string.\nExamples\n>>> count_vowels(\"Hello world!\")\n3\n>>> count_vowels(\"\
    abcdef\")\n2\n>>> count_vowels(\"\")\n0*/", "    $arr = explode(' ', $txt);\n\
    \    if (count($arr) > 1) {\n        return $arr;\n    }\n    $arr = explode(',',\
    \ $txt);\n    if (count($arr) > 1) {\n        return $arr;\n    }\n    $count\
    \ = 0;\n    for ($i = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i])\
    \ % 2 == 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \necho split_words(\"Hello world!\");\necho '<br>';\necho split_words(\"Hello,world!\"\
    );\necho '<br>';\necho split_words(\"abcdef\");", "    if (strpos($txt, ' ') !==\
    \ false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',')\
    \ !== false) {\n        return explode(',', $txt);\n    } else {\n        $count\
    \ = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return an array of integers\
    \ sorted by the number of 1's in their binary representation\nExamples\n>>> sort_by_ones([1,\
    \ 2, 3, 4, 5, 6, 7, 8])\narray(1, 2, 4, 8, 3, 5, 6, 7)\n>>> sort_by_ones([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10])\narray(1, 2, 4, 8, 3, 5, 6, 9, 10, 7)*/", "    if\
    \ (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif\
    \ (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n    } else\
    \ {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n  \
    \          if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n        \
    \    }\n        }\n        return $count;\n    }\n}\n\n/* Given a string of words,\
    \ return an array of words split on whitespace, if no whitespaces exists in the\
    \ text you\nshould split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\nalphabet, ord('a') = 0,\
    \ ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    $txt = str_replace(\",\"\
    , \" \", $txt);\n    $txt = str_replace(\"  \", \" \", $txt);\n    $txt = trim($txt);\n\
    \    $txt = strtolower($txt);\n    $txt = explode(\" \", $txt);\n    if (count($txt)\
    \ > 1) {\n        return $txt;\n    } else {\n        $count = 0;\n        for\
    \ ($i = 0; $i < strlen($txt[0]); $i++) {\n            if ($i % 2 == 0) {\n   \
    \             $count++;\n            }\n        }\n        return $count;\n  \
    \  }\n}\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/",
  "    $txt = trim($txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt\
    \ = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s*\\\
    .\\s*/', '.', $txt);\n    $txt = preg_replace('/\\s*\\?\\s*/', '?', $txt);\n \
    \   $txt = preg_replace('/\\s*!\\s*/', '!', $txt);\n    $txt = preg_replace('/\\\
    s*;\\s*/', ';', $txt);\n    $txt = preg_replace('/\\s*:\\s*/', ':', $txt);\n \
    \   $txt = preg_replace('/\\s*-\\s*/', '-', $txt);\n    $txt = preg_replace('/\\\
    s*\\(\\s*/', '(', $txt);\n    $txt = preg_replace('/\\s*\\)\\s*/', ')', $txt);\n\
    \    $txt = preg_replace('/\\s*\\[\\s*/', '[', $txt);\n    $txt = preg_replace('/\\\
    s*\\]\\s*/', ']', $txt);\n    $txt = preg_replace('/\\s*\\{\\s*/', '{', $txt);\n\
    \    $txt = preg_replace('/\\s*\\}\\s*/', '}', $txt);\n    $txt = preg_replace('/\\\
    s*\\+\\s*/', '+', $txt);\n    $txt = preg_replace('/\\s*\\*\\s*/', '*', $txt);\n\
    \    $txt = preg_replace('/\\s*\\/\\s*/', '/', $txt);\n    $txt = preg_replace('/\\\
    s*=\\s*/', '=', $txt);\n    $txt = preg_replace('/\\s*\\|\\s*/', '|', $txt);\n\
    \    $txt = preg_replace('/\\s*\\\\\\s*/', '\\\\', $txt);\n    $txt = preg", " \
    \   $txt = trim($txt);\n    if (strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return\
    \ explode(',', $txt);\n    } else {\n        $count = 0;\n        for ($i = 0;\
    \ $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2 != 0) {\n    \
    \            $count++;\n            }\n        }\n        return $count;\n   \
    \ }\n}\n\n/* Given an array of integers, return the sum of the integers that are\
    \ in odd positions in the array.\nExamples\n>>> sum_odd_position([1, 2, 3, 4,\
    \ 5])\n9\n>>> sum_odd_position([1, 2, 3, 4, 5, 6])\n9\n>>> sum_odd_position([1,\
    \ 2, 3, 4, 5, 6, 7])\n16*/", "    if(strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    } elseif(strpos($txt, ',') !== false) {\n        return\
    \ explode(',', $txt);\n    } else {\n        $odd = 0;\n        for($i = 0; $i\
    \ < strlen($txt); $i++) {\n            if(ord($txt[$i]) % 2 != 0) {\n        \
    \        $odd++;\n            }\n        }\n        return $odd;\n    }\n}\n\n\
    /* Given an array of integers, return an array of integers with the same values,\
    \ but sorted in descending order.\nExamples\n>>> sort_desc([3, 2, 1])\narray(3,\
    \ 2, 1)\n>>> sort_desc([1, 2, 3])\narray(3, 2, 1)\n>>> sort_desc([])\narray()*/",
  "    $txt = trim($txt);\n    $arr = explode(' ', $txt);\n    if (count($arr) > 1)\
    \ {\n        return $arr;\n    }\n    $arr = explode(',', $txt);\n    if (count($arr)\
    \ > 1) {\n        return $arr;\n    }\n    $count = 0;\n    for ($i = 0; $i <\
    \ strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 != 0) {\n            $count++;\n\
    \        }\n    }\n    return $count;\n}\n\n$txt = 'Hello world!';\nvar_dump(split_words($txt));\n\
    $txt = 'Hello,world!';\nvar_dump(split_words($txt));\n$txt = 'abcdef';\nvar_dump(split_words($txt));",
  "    $txt = trim($txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',",
  "    if(strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n   \
    \ }\n    if(strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n\
    \    }\n    $count = 0;\n    for($i = 0; $i < strlen($txt); $i++) {\n        if(ord($txt[$i])\
    \ % 2 == 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\
    \n/* Given a string of words, return an array of words split on whitespace, if\
    \ no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/",
  "    $txt = trim($txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt\
    \ = preg_replace('/[^a-zA-Z,\\s]/', '', $txt);\n    $txt = preg_replace('/\\s+/',\
    \ ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\s]/', '', $txt);\n    $txt\
    \ = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\\
    s]/', '', $txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\\
    s]/', '', $txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\\
    s]/', '', $txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\\
    s]/', '', $txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\\
    s]/', '', $txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\\
    s]/', '', $txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\\
    s]/', '', $txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/[^a-zA-Z,\\\
    s]", "    $arr = array();\n    if (strpos($txt, ' ') !== false) {\n        $arr\
    \ = explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n      \
    \  $arr = explode(',', $txt);\n    } else {\n        $arr = strlen(preg_replace('/[^a-z]/',\
    \ '', $txt));\n    }\n    return $arr;\n}\n\n/* Given an array of integers, return\
    \ the number of integers that are greater than the previous integer\nExamples\n\
    >>> count_greater_than_previous([1, 2, 3, 4, 5])\n4\n>>> count_greater_than_previous([1,\
    \ 2, 3, 4, 5, 4, 3, 2, 1])\n4\n>>> count_greater_than_previous([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10])\n9\n>>> count_greater_than_previous([5, 4, 3, 2, 1])\n0\n>>>\
    \ count_greater_than_previous([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6,\
    \ 5, 4, 3, 2, 1])\n9\n>>> count_greater_than_previous([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n9\n>>>\
    \ count_greater_than_previous([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6,\
    \ 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n\
    9\n>>> count_greater_than_previous([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7,\
    \ 6, 5,", "    if (strpos($txt, ' ') !== false) {\n        return explode(' ',\
    \ $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 != 0) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\n/* Given an array\
    \ of integers, return the sum of the integers that are in the array, ignoring\
    \ all other characters\nin the array.\nExamples\n>>> sum_array(array(1, 2, 3,\
    \ 4))\n10\n>>> sum_array(array(1, \"2\", 3, \"4\"))\n10\n>>> sum_array(array(1,\
    \ \"2\", 3, \"4\", \"a\"))\n10\n>>> sum_array(array(1, \"2\", 3, \"4\", \"a\"\
    , \"b\"))\n10\n>>> sum_array(array(1, \"2\", 3, \"4\", \"a\", \"b\", \"c\"))\n\
    10\n>>> sum_array(array(1, \"2\", 3, \"4\", \"a\", \"b\", \"c\", \"d\"))\n10\n\
    >>> sum_array(array(1, \"2\", 3, \"4\", \"a\", \"b\", \"c\", \"d\", \"e\"))\n\
    10\n>>> sum_array(array(1, \"2\", 3, \"4\", \"a\", \"b\", \"c\", \"d\", \"e\"\
    , \"f\"))\n10\n>>> sum_array(array(1, \"2\", 3, \"4\", \"a\", \"b\", \"c\", \"\
    d\", \"e\", \"f\", \"g\"))\n10\n>>> sum_array(array(1, \"2\", 3, \"4\", \"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"))\n10\n>>> sum_array(array(1,\
    \ \"2\", 3, \"4\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\"))\n10\n", "    $txt = trim($txt);\n    $len = strlen($txt);\n    $arr = [];\n\
    \    $arr1 = [];\n    $arr2 = [];\n    $arr3 = [];\n    $arr4 = [];\n    $arr5\
    \ = [];\n    $arr6 = [];\n    $arr7 = [];\n    $arr8 = [];\n    $arr9 = [];\n\
    \    $arr10 = [];\n    $arr11 = [];\n    $arr12 = [];\n    $arr13 = [];\n    $arr14\
    \ = [];\n    $arr15 = [];\n    $arr16 = [];\n    $arr17 = [];\n    $arr18 = [];\n\
    \    $arr19 = [];\n    $arr20 = [];\n    $arr21 = [];\n    $arr22 = [];\n    $arr23\
    \ = [];\n    $arr24 = [];\n    $arr25 = [];\n    $arr26 = [];\n    $arr27 = [];\n\
    \    $arr28 = [];\n    $arr29 = [];\n    $arr30 = [];\n    $arr31 = [];\n    $arr32\
    \ = [];\n    $arr33 = [];\n    $arr34 = [];\n    $arr35 = [];\n    $arr36 = [];\n\
    \    $arr37 = [];\n    $arr38 = [];\n    $arr39 = [];\n    $arr40 = [];\n    $arr41\
    \ = [];\n    $arr42 = [];\n    $arr43 = [];\n    $arr44 = [];\n    $arr45 = [];\n\
    \    $arr46 = [];\n    $arr47 = [];\n    $arr48 = [];\n    $arr49 = [];\n    $arr50\
    \ = [];\n    $arr51 = [];\n    $arr52 = [];\n    $arr53 = [];\n    $arr54 = [];\n\
    \    $arr55 = [];\n    $arr56 = [];\n    $arr57 = [];\n    $arr58 = [];\n    $arr59\
    \ = [];\n    $arr60 = [];\n    $arr61 = [];\n    $arr62 = [];\n    $arr63 = [];\n\
    \    $arr64 = [];\n    $arr65 = [];\n    $arr66 = [];\n    $arr67 = [];\n    $arr68\
    \ = [];\n    $arr69 = [];\n    $arr", "    $txt = trim($txt);\n    $arr = explode(\"\
    \ \", $txt);\n    if (count($arr) == 1) {\n        $arr = explode(\",\", $txt);\n\
    \        if (count($arr) == 1) {\n            $count = 0;\n            for ($i\
    \ = 0; $i < strlen($txt); $i++) {\n                if (ord($txt[$i]) % 2 == 1)\
    \ {\n                    $count++;\n                }\n            }\n       \
    \     return $count;\n        }\n    }\n    return $arr;\n}\n\n/* Given a string\
    \ of words, return the number of words in the string.\nExamples\n>>> count_words(\"\
    Hello world!\")\n2\n>>> count_words(\"Hello,world!\")\n2\n>>> count_words(\"abcdef\"\
    )\n1*/", "    if (strpos($txt, ' ') !== false) {\n        return explode(' ',\
    \ $txt);\n    }\n    if (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    }\n    $count = 0;\n    for ($i = 0; $i < strlen($txt); $i++) {\n\
    \        if (ord($txt[$i]) % 2 == 1) {\n            $count++;\n        }\n   \
    \ }\n    return $count;\n}\n\n/* Given a string of words, return an array of words\
    \ split on whitespace, if no whitespaces exists in the text you\nshould split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "    $txt = trim($txt);\n    $txt = preg_replace('/\\s+/', '\
    \ ', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\\
    s+/', ',', $txt);\n    $txt = preg_replace('/[^a-z,]/', '', $txt);\n    $txt =\
    \ preg_replace('/[a-z]/', '', $txt);\n    $txt = preg_replace('/[a-z]/', '', $txt);\n\
    \    $txt = preg_replace('/[a-z]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '', $txt);\n    $txt = preg_replace('/[a-z]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '', $txt", "    $txt = trim($txt);\n    if (strpos($txt, ' ') !== false) {\n\
    \        return explode(' ', $txt);\n    }\n    if (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    }\n    $count = 0;\n    for ($i =\
    \ 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 != 0) {\n     \
    \       $count++;\n        }\n    }\n    return $count;\n}\n\necho '<pre>';\n\
    print_r(split_words('Hello world!'));\nprint_r(split_words('Hello,world!'));\n\
    print_r(split_words('abcdef'));\necho '</pre>';", "    $txt = trim($txt);\n  \
    \  $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/\\s*,\\\
    s*/', ',', $txt);\n    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 === 1) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\n/* Given a string\
    \ of words, return an array of words split on whitespace, if no whitespaces exists\
    \ in the text you\nshould split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\nalphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    if (strpos($txt, ' ') !==\
    \ false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',')\
    \ !== false) {\n        return explode(',', $txt);\n    } else {\n        $count\
    \ = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello world!'));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(split_words('Hello,world!'));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(split_words('abcdef'));\necho '</pre>';", "    $arr = [];\n\
    \    $arr = explode(' ', $txt);\n    if (count($arr) == 1) {\n        $arr = explode(',',\
    \ $txt);\n        if (count($arr) == 1) {\n            $arr = strlen($txt);\n\
    \        }\n    }\n    return $arr;\n}\n\n/* Given an array of integers, return\
    \ the number of integers that are divisible by 3 or 5, but not both.\nExamples\n\
    >>> divisible_by_3_or_5([3, 5, 6, 9, 10, 12, 15, 18, 20, 21, 24, 25])\n10\n>>>\
    \ divisible_by_3_or_5([1, 2, 4, 7, 8, 11, 13, 14, 16, 17, 19, 22, 23])\n7*/",
  "    $arr = explode(\" \", $txt);\n    if (count($arr) > 1) {\n        return $arr;\n\
    \    }\n    $arr = explode(\",\", $txt);\n    if (count($arr) > 1) {\n       \
    \ return $arr;\n    }\n    $count = 0;\n    for ($i = 0; $i < strlen($txt); $i++)\
    \ {\n        if (ord($txt[$i]) % 2 != 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\n\necho \"<pre>\";\nprint_r(split_words(\"Hello\
    \ world!\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(split_words(\"Hello,world!\"\
    ));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(split_words(\"abcdef\"));\necho\
    \ \"</pre>\";", "    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\n/* Given an array\
    \ of integers, return the sum of all integers in the array, except for the integers\
    \ that are divisible by\n3.\nExamples\n>>> sum_except_3([1, 2, 3, 4, 5])\n9\n\
    >>> sum_except_3([1, 2, 3, 4, 5, 6])\n12\n>>> sum_except_3([1, 2, 3, 4, 5, 6,\
    \ 7])\n12\n>>> sum_except_3([1, 2, 3, 4, 5, 6, 7, 8])\n15\n>>> sum_except_3([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9])\n15\n>>> sum_except_3([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\
    18\n>>> sum_except_3([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n18\n>>> sum_except_3([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n21\n>>> sum_except_3([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13])\n21\n>>> sum_except_3([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14])\n24\n>>> sum_except_3([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15])\n24\n>>> sum_except_3([1, 2, 3, 4, 5, 6, 7, 8", "    $txt =\
    \ str_replace(',', ' ', $txt);\n    $txt = str_replace('.', ' ', $txt);\n    $txt\
    \ = str_replace('!', ' ', $txt);\n    $txt = str_replace('?', ' ', $txt);\n  \
    \  $txt = str_replace(';', ' ', $txt);\n    $txt = str_replace(':', ' ', $txt);\n\
    \    $txt = str_replace('-', ' ', $txt);\n    $txt = str_replace('_', ' ', $txt);\n\
    \    $txt = str_replace('(', ' ', $txt);\n    $txt = str_replace(')', ' ', $txt);\n\
    \    $txt = str_replace('[', ' ', $txt);\n    $txt = str_replace(']', ' ', $txt);\n\
    \    $txt = str_replace('{', ' ', $txt);\n    $txt = str_replace('}', ' ', $txt);\n\
    \    $txt = str_replace('/', ' ', $txt);\n    $txt = str_replace('\\\\', ' ',\
    \ $txt);\n    $txt = str_replace('+', ' ', $txt);\n    $txt = str_replace('*',\
    \ ' ', $txt);\n    $txt = str_replace('&', ' ', $txt);\n    $txt = str_replace('^',\
    \ ' ', $txt);\n    $txt = str_replace('%', ' ', $txt);\n    $txt = str_replace('$',\
    \ ' ', $txt);\n    $txt = str_replace('#', ' ', $txt);\n    $txt = str_replace('@',\
    \ ' ', $txt);\n    $txt = str_replace('~', ' ', $txt);\n    $txt = str_replace('`',\
    \ ' ', $txt);\n    $txt = str_replace('|', ' ', $txt);\n    $txt = str_replace('>',\
    \ ' ', $txt);\n    $txt = str_replace('<', ' ', $txt);\n    $txt = str_replace('=',\
    \ ' ', $txt);\n    $txt = str_replace('\"', ' ', $txt);\n    $txt = str_replace(\"\
    '\", ' ', $txt);", "    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\n/* Given a string\
    \ of words, return an array of words split on whitespace, if no whitespaces exists\
    \ in the text you\nshould split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\nalphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    $arr = explode(' ', $txt);\n\
    \    if (count($arr) == 1) {\n        $arr = explode(',', $txt);\n        if (count($arr)\
    \ == 1) {\n            $arr = str_split($txt);\n            $count = 0;\n    \
    \        foreach ($arr as $key => $value) {\n                if (ord($value) %\
    \ 2 != 0) {\n                    $count++;\n                }\n            }\n\
    \            return $count;\n        }\n    }\n    return $arr;\n}\n\n/* Given\
    \ an array of integers, return the number of integers that are greater than the\
    \ previous integer.\nExamples\n>>> count_greater([1, 2, 3, 4, 5])\n4\n>>> count_greater([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n9\n>>> count_greater([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n19\n>>> count_greater([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\
    \ 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\
    \ 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\
    \ 100])\n99\n>>> count_greater([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26", "    $txt = trim($txt);\n \
    \   if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n \
    \   } elseif (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n\
    \    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++)\
    \ {\n            if (ord($txt[$i]) % 2 != 0) {\n                $count++;\n  \
    \          }\n        }\n        return $count;\n    }\n}\n\n/* Given a string\
    \ of words, return an array of words split on whitespace, if no whitespaces exists\
    \ in the text you\nshould split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\nalphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    $arr = array();\n    if(strpos($txt,\
    \ ' ') !== false) {\n        $arr = explode(' ', $txt);\n    } elseif(strpos($txt,\
    \ ',') !== false) {\n        $arr = explode(',', $txt);\n    } else {\n      \
    \  $arr = strlen(preg_replace('/[^a-z]/', '', $txt));\n    }\n    return $arr;\n\
    }\n\n/* Given an array of integers, return the sum of all the integers that have\
    \ an even index, multiplied by the integer at\nthe last index. If the array is\
    \ empty, you should return 0.\nExamples\n>>> even_last([0, 1, 2, 3, 4, 5])\n30\n\
    >>> even_last([1, 3, 5])\n30\n>>> even_last([6])\n36\n>>> even_last([])\n0*/",
  "    $arr = array();\n    if (strpos($txt, ' ') !== false) {\n        $arr = explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        $arr = explode(',',\
    \ $txt);\n    } else {\n        $arr = strlen(preg_replace('/[^a-z]/', '', $txt));\n\
    \    }\n    return $arr;\n}\n\n/* Given an array of integers, return an array\
    \ of integers sorted in ascending order, except for the first element,\nwhich\
    \ should be sorted in descending order.\nExamples\n>>> sort_array([1, 2, 3, 4,\
    \ 5])\narray(5, 1, 2, 3, 4)\n>>> sort_array([1, 2, 3, 4, 5, 6])\narray(6, 1, 2,\
    \ 3, 4, 5)\n>>> sort_array([1, 2, 3, 4, 5, 6, 7])\narray(7, 1, 2, 3, 4, 5, 6)*/",
  "    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt", "    $txt = trim($txt);\n    $txt = str_replace(' ', ',', $txt);\n\
    \    $txt = str_replace(',', ' ', $txt);\n    $txt = explode(' ', $txt);\n   \
    \ if (count($txt) == 1) {\n        $txt = str_split($txt[0]);\n        $count\
    \ = 0;\n        foreach ($txt as $key => $value) {\n            if ($key % 2 !=\
    \ 0) {\n                $count++;\n            }\n        }\n        return $count;\n\
    \    }\n    return $txt;\n}\n\n/* Given an array of integers, return the sum of\
    \ all the integers that have an even index, multiplied by the integer at\nthe\
    \ last index. If the array is empty, you should return 0.\nExamples\n>>> even_last([0,\
    \ 1, 2, 3, 4, 5])\n30\n>>> even_last([1, 3, 5])\n30\n>>> even_last([6])\n36\n\
    >>> even_last([])\n0*/", "    if (strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return\
    \ explode(',', $txt);\n    } else {\n        $count = 0;\n        for ($i = 0;\
    \ $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n    \
    \            $count++;\n            }\n        }\n        return $count;\n   \
    \ }\n}\n\necho \"<pre>\";\nprint_r(split_words(\"Hello world!\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(split_words(\"Hello,world!\"));\necho \"</pre>\";\n\
    echo \"<pre>\";\nprint_r(split_words(\"abcdef\"));\necho \"</pre>\";", "    $arr\
    \ = preg_split('/[\\s,]+/', $txt);\n    if (count($arr) > 1) {\n        return\
    \ $arr;\n    }\n    $arr = preg_split('/[,]+/', $txt);\n    if (count($arr) >\
    \ 1) {\n        return $arr;\n    }\n    $count = 0;\n    for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n        if (ord($txt[$i]) % 2 == 1) {\n            $count++;\n    \
    \    }\n    }\n    return $count;\n}\n\necho split_words(\"Hello world!\");\n\
    echo split_words(\"Hello,world!\");\necho split_words(\"abcdef\");", "    $txt\
    \ = str_replace(array(\"\\r\\n\", \"\\r\", \"\\n\"), ' ', $txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    $txt = trim($txt);\n    $arr = explode(' ', $txt);\n  \
    \  if (count($arr) > 1) {\n        return $arr;\n    }\n    $arr = explode(',',\
    \ $txt);\n    if (count($arr) > 1) {\n        return $arr;\n    }\n    $cnt =\
    \ 0;\n    for ($i = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i]) %\
    \ 2 == 1) {\n            $cnt++;\n        }\n    }\n    return $cnt;\n}\n\n$txt\
    \ = \"Hello world!\";\n$txt = \"Hello,world!\";\n$txt = \"abcdef\";\necho '<pre>';\n\
    print_r(split_words($txt));\necho '</pre>';", "    if (strpos($txt, ' ') !== false)\
    \ {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\n/* Given an array\
    \ of integers, return the sum of the integers with even order in the array,\n\
    ord(0) = 0, ord(1) = 1, ... ord(n) = n\nExamples\n>>> sum_even_order([1, 2, 3,\
    \ 4, 5])\n6\n>>> sum_even_order([1, 2, 3, 4, 5, 6])\n12\n>>> sum_even_order([1,\
    \ 2, 3, 4, 5, 6, 7])\n12*/", "    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/", "    if (strpos($txt, ' ') !== false) {\n\
    \        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\n/* Given an array\
    \ of integers, return the sum of the integers that are divisible by 3 or 5.\n\
    Examples\n>>> sum_of_divisible_by_3_or_5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n33\n\
    >>> sum_of_divisible_by_3_or_5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20])\n78\n>>> sum_of_divisible_by_3_or_5([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30])\n195*/", "    $txt = trim($txt);\n    if (strpos($txt,\
    \ ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello\
    \ world!'));\nprint_r(split_words('Hello,world!'));\nprint_r(split_words('abcdef'));\n\
    echo '</pre>';", "    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 != 0) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\necho '<pre>';\n\
    print_r(split_words('abcdef'));\necho '</pre>';", "    $txt = trim($txt);\n  \
    \  $txt = str_replace(array(\"\\r\\n\", \"\\r\", \"\\n\"), \"\", $txt);\n    $txt\
    \ = preg_replace('/\\s+/', ' ', $txt);\n    $txt = str_replace(array(\"\\t\"),\
    \ \"\", $txt);\n    $txt = str_replace(array(\"\\r\\n\", \"\\r\", \"\\n\"), \"\
    \", $txt);\n    $txt = str_replace(array(\"\\t\"), \"\", $txt);\n    $txt = str_replace(array(\"\
    \\r\\n\", \"\\r\", \"\\n\"), \"\", $txt);\n    $txt = str_replace(array(\"\\t\"\
    ), \"\", $txt);\n    $txt = str_replace(array(\"\\r\\n\", \"\\r\", \"\\n\"), \"\
    \", $txt);\n    $txt = str_replace(array(\"\\t\"), \"\", $txt);\n    $txt = str_replace(array(\"\
    \\r\\n\", \"\\r\", \"\\n\"), \"\", $txt);\n    $txt = str_replace(array(\"\\t\"\
    ), \"\", $txt);\n    $txt = str_replace(array(\"\\r\\n\", \"\\r\", \"\\n\"), \"\
    \", $txt);\n    $txt = str_replace(array(\"\\t\"), \"\", $txt);\n    $txt = str_replace(array(\"\
    \\r\\n\", \"\\r\", \"\\n\"), \"\", $txt);\n    $txt = str_replace(array(\"\\t\"\
    ), \"\", $txt);\n    $txt = str_replace(array(\"\\r\\n\", \"\\r\", \"\\n\"), \"\
    \", $txt);\n    $txt = str_replace(array(\"\\t\"), \"\", $txt);\n    $txt = str_replace(array(\"\
    \\r\\n\", \"\\r\", \"\\n\"), \"\", $txt);\n    $txt = str_replace(array(\"\\t\"\
    ), \"\", $txt);\n    $txt = str_replace(array(\"\\r\\n\", \"\\r\", \"\\n\"), \"\
    \", $txt);\n    $txt = str_replace(array(\"\\t\"), \"\", $txt);\n    $txt = str_replace(array(\"\
    \\r\\n\", \"\\r\", \"\\n\"),", "    if(strpos($txt, ' ') !== false) {\n      \
    \  return explode(' ', $txt);\n    } elseif(strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for($i = 0; $i < strlen($txt); $i++) {\n            if(ord($txt[$i]) % 2 !=\
    \ 0) {\n                $count++;\n            }\n        }\n        return $count;\n\
    \    }\n}\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/",
  "    $txt = str_replace(',', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n\
    \    $txt = trim($txt);\n    $txt = explode(' ', $txt);\n    if (count($txt) ==\
    \ 1) {\n        $txt = str_split($txt[0]);\n        $count = 0;\n        foreach\
    \ ($txt as $key => $value) {\n            if ($key % 2 == 0) {\n             \
    \   $count++;\n            }\n        }\n        return $count;\n    }\n    return\
    \ $txt;\n}\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/",
  "    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt", "    $arr = [];\n    if (strpos($txt, ' ') !== false) {\n        $arr\
    \ = explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n      \
    \  $arr = explode(',', $txt);\n    } else {\n        $arr = strlen(preg_replace('/[^a-z]/',\
    \ '', $txt));\n    }\n    return $arr;\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/", "    $arr = array();\n    $arr = explode(\"\
    \ \", $txt);\n    if (count($arr) == 1) {\n        $arr = explode(\",\", $txt);\n\
    \        if (count($arr) == 1) {\n            $arr = strlen($txt);\n        }\n\
    \    }\n    return $arr;\n}\n\n/* Given an array of integers, return the sum of\
    \ all the integers that have an even index, multiplied by the integer at\nthe\
    \ last index. If the array is empty, return 0. If the array has 1 element, return\
    \ just that element.\nExamples\n>>> sum_even_indexed_multiplied_by_last([1, 2,\
    \ 3, 4, 5])\n30\n>>> sum_even_indexed_multiplied_by_last([])\n0\n>>> sum_even_indexed_multiplied_by_last([1])\n\
    1*/", "    $txt = trim($txt);\n    if (strpos($txt, ' ') !== false) {\n      \
    \  return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n\
    \        return explode(',', $txt);\n    } else {\n        $count = 0;\n     \
    \   for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "    $txt = trim($txt);\n    if (strpos($txt, ' ') !== false)\
    \ {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello world!'));\n\
    print_r(split_words('Hello,world!'));\nprint_r(split_words('abcdef'));\necho '</pre>';",
  "    $arr = [];\n    $arr = explode(\" \", $txt);\n    if (count($arr) == 1) {\n\
    \        $arr = explode(\",\", $txt);\n        if (count($arr) == 1) {\n     \
    \       $arr = strlen($txt);\n        }\n    }\n    return $arr;\n}\n\n/* Given\
    \ an array of integers, return the sum of the integers that are evenly divisible\
    \ by 3.\nExamples\n>>> sum_of_threes([1, 2, 3, 4, 5, 6, 7, 8, 9])\n18\n>>> sum_of_threes([0,\
    \ -1, -2, -3, -4, -5, -6])\n0\n>>> sum_of_threes([-10, -9, -8, -7, -6, -5, -4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n0*/", "    $txt = trim($txt);\n\
    \    if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n\
    \    } elseif (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n\
    \    } else {\n        $result = 0;\n        for ($i = 0; $i < strlen($txt); $i++)\
    \ {\n            if (ord($txt[$i]) % 2 == 1) {\n                $result++;\n \
    \           }\n        }\n        return $result;\n    }\n}\n\necho '<pre>';\n\
    print_r(split_words('Hello world!'));\nprint_r(split_words('Hello,world!'));\n\
    print_r(split_words('abcdef'));\necho '</pre>';", "    $txt = trim($txt);\n  \
    \  if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n  \
    \  } elseif (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n\
    \    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++)\
    \ {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n  \
    \          }\n        }\n        return $count;\n    }\n}\n\n/* Given a string\
    \ of words, return an array of words split on whitespace, if no whitespaces exists\
    \ in the text you\nshould split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\nalphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    $txt = trim($txt);\n  \
    \  if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n  \
    \  }\n    if (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < strlen($txt); $i++) {\n       \
    \ if (ord($txt[$i]) % 2 != 0) {\n            $count++;\n        }\n    }\n   \
    \ return $count;\n}\n\n$txt = 'Hello,world!';\necho split_words($txt);", "   \
    \ $txt = str_replace(',', ' ', $txt);\n    $txt = str_replace('!', ' ', $txt);\n\
    \    $txt = str_replace('.', ' ', $txt);\n    $txt = str_replace('?', ' ', $txt);\n\
    \    $txt = str_replace(';', ' ', $txt);\n    $txt = str_replace(':', ' ', $txt);\n\
    \    $txt = str_replace('-', ' ', $txt);\n    $txt = str_replace('_', ' ', $txt);\n\
    \    $txt = str_replace('(', ' ', $txt);\n    $txt = str_replace(')', ' ', $txt);\n\
    \    $txt = str_replace('[', ' ', $txt);\n    $txt = str_replace(']', ' ', $txt);\n\
    \    $txt = str_replace('{', ' ', $txt);\n    $txt = str_replace('}', ' ', $txt);\n\
    \    $txt = str_replace('\"', ' ', $txt);\n    $txt = str_replace(\"'\", ' ',\
    \ $txt);\n    $txt = str_replace('/', ' ', $txt);\n    $txt = str_replace('\\\\\
    ', ' ', $txt);\n    $txt = str_replace('|', ' ', $txt);\n    $txt = str_replace('<',\
    \ ' ', $txt);\n    $txt = str_replace('>', ' ', $txt);\n    $txt = str_replace('=',\
    \ ' ', $txt);\n    $txt = str_replace('+', ' ', $txt);\n    $txt = str_replace('*',\
    \ ' ', $txt);\n    $txt = str_replace('&', ' ', $txt);\n    $txt = str_replace('^',\
    \ ' ', $txt);\n    $txt = str_replace('%', ' ', $txt);\n    $txt = str_replace('$',\
    \ ' ', $txt);\n    $txt = str_replace('#', ' ', $txt);\n    $txt = str_replace('@',\
    \ ' ', $txt);\n    $txt = str_replace('!', ' ', $txt);\n    $txt = str_replace('~',\
    \ ' ', $txt);", "    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 != 0) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\n/* Given a string\
    \ of words, return an array of words split on whitespace, if no whitespaces exists\
    \ in the text you\nshould split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\nalphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    $arr = [];\n    if (strpos($txt,\
    \ ' ') !== false) {\n        $arr = explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        $arr = explode(',', $txt);\n    } else {\n      \
    \  $arr = strlen(preg_replace('/[^a-z]/', '', $txt));\n    }\n    return $arr;\n\
    }\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/",
  "    $txt = trim($txt);\n    if (strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    }\n    if (strpos($txt, ',') !== false) {\n       \
    \ return explode(',', $txt);\n    }\n    $count = 0;\n    for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n        if (ord($txt[$i]) % 2 == 1) {\n            $count++;\n    \
    \    }\n    }\n    return $count;\n}\n\n/* Given a string of words, return an\
    \ array of words split on whitespace, if no whitespaces exists in the text you\n\
    should split on commas ',' if no commas exists you should return the number of\
    \ lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b') =\
    \ 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/", "    if (strpos($txt, ' ') !== false) {\n\
    \        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello world!'));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(split_words('Hello,world!'));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(split_words('abcdef'));\necho '</pre>';", "    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace('!', ' ', $txt);\n    $txt = str_replace('.',\
    \ ' ', $txt);\n    $txt = str_replace('?', ' ', $txt);\n    $txt = str_replace('-',\
    \ ' ', $txt);\n    $txt = str_replace('_', ' ', $txt);\n    $txt = str_replace('/',\
    \ ' ', $txt);\n    $txt = str_replace('\\\\', ' ', $txt);\n    $txt = str_replace('\"\
    ', ' ', $txt);\n    $txt = str_replace(\"'\", ' ', $txt);\n    $txt = str_replace('(',\
    \ ' ', $txt);\n    $txt = str_replace(')', ' ', $txt);\n    $txt = str_replace('[',\
    \ ' ', $txt);\n    $txt = str_replace(']', ' ', $txt);\n    $txt = str_replace('{',\
    \ ' ', $txt);\n    $txt = str_replace('}', ' ', $txt);\n    $txt = str_replace('*',\
    \ ' ', $txt);\n    $txt = str_replace('&', ' ', $txt);\n    $txt = str_replace('^',\
    \ ' ', $txt);\n    $txt = str_replace('%', ' ', $txt);\n    $txt = str_replace('$',\
    \ ' ', $txt);\n    $txt = str_replace('#', ' ', $txt);\n    $txt = str_replace('@',\
    \ ' ', $txt);\n    $txt = str_replace('!', ' ', $txt);\n    $txt = str_replace('~',\
    \ ' ', $txt);\n    $txt = str_replace('`', ' ', $txt);\n    $txt = str_replace('+',\
    \ ' ', $txt);\n    $txt = str_replace('=', ' ', $txt);\n    $txt = str_replace('<',\
    \ ' ', $txt);\n    $txt = str_replace('>', ' ', $txt);\n    $txt = str_replace('|',\
    \ ' ', $txt);\n    $txt = str_replace(':', ' ', $txt);", "    if (strpos($txt,\
    \ ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ the number of words that are equal to the given word\nExamples\n>>> count_words(\"\
    Hello world!\", \"Hello\")\n1\n>>> count_words(\"Hello world!\", \"world!\")\n\
    1\n>>> count_words(\"Hello world!\", \"world\")\n0\n>>> count_words(\"Hello world!\
    \ Hello world! Hello world!\", \"world\")\n0\n>>> count_words(\"Hello world! Hello\
    \ world! Hello world!\", \"Hello\")\n3*/", "    $txt = str_replace(',', ' ', $txt);\n\
    \    $txt = str_replace('  ', ' ', $txt);\n    $txt = trim($txt);\n    $arr =\
    \ explode(' ', $txt);\n    if (count($arr) > 1) {\n        return $arr;\n    }\
    \ else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n\
    \            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n      \
    \      }\n        }\n        return $count;\n    }\n}\n\n/* Given an array of\
    \ integers, return the sum of the integers that are divisible by 3 and 5.\nExamples\n\
    >>> sum_divisible_by_3_and_5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n33\n>>> sum_divisible_by_3_and_5([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n150*/",
  "    $txt = trim($txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt\
    \ = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s*\\\
    .\\s*/', '.', $txt);\n    $txt = preg_replace('/\\s*\\?\\s*/', '?', $txt);\n \
    \   $txt = preg_replace('/\\s*!\\s*/', '!', $txt);\n    $txt = preg_replace('/\\\
    s*;\\s*/', ';', $txt);\n    $txt = preg_replace('/\\s*:\\s*/', ':', $txt);\n \
    \   $txt = preg_replace('/\\s*-\\s*/', '-', $txt);\n    $txt = preg_replace('/\\\
    s*\\(\\s*/', '(', $txt);\n    $txt = preg_replace('/\\s*\\)\\s*/', ')', $txt);\n\
    \    $txt = preg_replace('/\\s*\\[\\s*/', '[', $txt);\n    $txt = preg_replace('/\\\
    s*\\]\\s*/', ']', $txt);\n    $txt = preg_replace('/\\s*\\{\\s*/', '{', $txt);\n\
    \    $txt = preg_replace('/\\s*\\}\\s*/', '}', $txt);\n    $txt = preg_replace('/\\\
    s*\\|\\s*/', '|', $txt);\n    $txt = preg_replace('/\\s*\\\\\\s*/', '\\\\', $txt);\n\
    \    $txt = preg_replace('/\\s*\\/\\s*/', '/', $txt);\n    $txt = preg_replace('/\\\
    s*\\+\\s*/', '+', $txt);\n    $txt = preg_replace('/\\s*\\*\\s*/', '*', $txt);\n\
    \    $txt = preg_replace('/\\s*\\=\\s*/', '=', $txt);\n    $txt = pre", "    $arr\
    \ = explode(' ', $txt);\n    if (count($arr) > 1) {\n        return $arr;\n  \
    \  }\n    $arr = explode(',', $txt);\n    if (count($arr) > 1) {\n        return\
    \ $arr;\n    }\n    $count = 0;\n    for ($i = 0; $i < strlen($txt); $i++) {\n\
    \        if (ord($txt[$i]) % 2 == 1) {\n            $count++;\n        }\n   \
    \ }\n    return $count;\n}\n\n/* Given an array of integers, return the sum of\
    \ all the integers that have an odd index in the array,\nzero is an even number.\n\
    Examples\n>>> sum_odd_indexed([10, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n25\n>>> sum_odd_indexed([0,\
    \ 1, 2, 3, 4, 5])\n9\n>>> sum_odd_indexed([1, 2, 3, 4, 5])\n9\n>>> sum_odd_indexed([10,\
    \ -1, 2, -3, 4, -5, 6, -7, 8, -9, 10])\n25*/", "    if (strpos($txt, ' ') !==\
    \ false) {\n        return explode(' ', $txt);\n    } else if (strpos($txt, ',')\
    \ !== false) {\n        return explode(',', $txt);\n    } else {\n        $count\
    \ = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello world!'));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(split_words('Hello,world!'));\necho '</pre>';\n\
    \necho '<pre>';\nprint_r(split_words('abcdef'));\necho '</pre>';", "    if (strpos($txt,\
    \ ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/*\nGiven a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3\n*/\n", "    if (strpos($txt, ' ') !== false)\
    \ {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\nprint_r(split_words(\"Hello world!\"));\nprint_r(split_words(\"\
    Hello,world!\"));\nprint_r(split_words(\"abcdef\"));", "    $arr = [];\n    $arr\
    \ = explode(\" \", $txt);\n    if (count($arr) == 1) {\n        $arr = explode(\"\
    ,\", $txt);\n        if (count($arr) == 1) {\n            $arr = strlen($txt);\n\
    \        }\n    }\n    return $arr;\n}\n\n/* Given an array of integers, return\
    \ the sum of all the integers that have an even index, multiplied by the integer\
    \ at\nthe last index. If the array is empty, you should return 0.\nExamples\n\
    >>> sum_of_evens([50, 60, 60, 45, 70])\n180\n>>> sum_of_evens([1, 2, 3, 4, 5,\
    \ 6])\n48\n>>> sum_of_evens([])\n0*/", "    if (strpos($txt, ' ') !== false) {\n\
    \        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are divisible by 3 or 5, but not both.\nExamples\n>>> sum_divisible_by_3_or_5([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n33\n>>> sum_divisible_by_3_or_5([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n60\n>>> sum_divisible_by_3_or_5([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n78*/", " \
    \   $txt = trim($txt);\n    if (strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return\
    \ explode(',', $txt);\n    } else {\n        $count = 0;\n        for ($i = 0;\
    \ $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n    \
    \            $count++;\n            }\n        }\n        return $count;\n   \
    \ }\n}\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/",
  "    $txt = trim($txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',",
  "    $txt = trim($txt);\n    if (strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return\
    \ explode(',', $txt);\n    } else {\n        $count = 0;\n        for ($i = 0;\
    \ $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2 != 0) {\n    \
    \            $count++;\n            }\n        }\n        return $count;\n   \
    \ }\n}\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/",
  "    $txt = trim($txt);\n    if (strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return\
    \ explode(',', $txt);\n    } else {\n        $count = 0;\n        for ($i = 0;\
    \ $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n    \
    \            $count++;\n            }\n        }\n        return $count;\n   \
    \ }\n}\n\n/* Given a string of words, return the number of vowels in the string.\n\
    Examples\n>>> count_vowels(\"Hello world!\")\n3\n>>> count_vowels(\"abcdef\")\n\
    2*/", "    $arr = array();\n    $arr = explode(' ', $txt);\n    if (count($arr)\
    \ == 1) {\n        $arr = explode(',', $txt);\n        if (count($arr) == 1) {\n\
    \            $arr = strlen($txt);\n        }\n    }\n    return $arr;\n}\n\n/*\
    \ Given an array of integers, return the sum of all numbers that are multiples\
    \ of 3 or 5.\nExamples\n>>> sum_of_multiples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\
    33\n>>> sum_of_multiples([-3, -5, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n33\n>>>\
    \ sum_of_multiples([-3, -5, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\
    \ 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,\
    \ 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,\
    \ 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,\
    \ 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])\n2318*/", "    $arr = [];\n    if\
    \ (strpos($txt, ' ') !== false) {\n        $arr = explode(' ', $txt);\n    } elseif\
    \ (strpos($txt, ',') !== false) {\n        $arr = explode(',', $txt);\n    } else\
    \ {\n        $arr = strlen(preg_replace('/[^aeiou]/i', '', $txt));\n    }\n  \
    \  return $arr;\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "    $txt = trim($txt);\n    $txt = str_replace(',', ' ', $txt);\n\
    \    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n\
    \    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n\
    \    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n\
    \    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n\
    \    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n\
    \    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n\
    \    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n\
    \    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n\
    \    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n\
    \    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n\
    \    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n\
    \    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n\
    \    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n\
    \    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n\
    \    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n\
    \    $txt = str_", "    $txt = trim($txt);\n    $txt = preg_replace('/\\s+/',\
    \ ' ', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt =\
    \ preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',',\
    \ $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\\
    s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/',\
    \ ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt =\
    \ preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',',\
    \ $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\\
    s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/',\
    \ ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt =\
    \ preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',',\
    \ $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\\
    s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/', ',', $", "    $txt =\
    \ trim($txt);\n    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\necho '<pre>';\n\
    print_r(split_words('Hello world!'));\nprint_r(split_words('Hello,world!'));\n\
    print_r(split_words('abcdef'));\necho '</pre>';", "    if (strpos($txt, ' ') !==\
    \ false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',')\
    \ !== false) {\n        return explode(',', $txt);\n    } else {\n        $count\
    \ = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of all integers\
    \ that have an odd index in the array.\nExamples\n>>> sum_odd_indexed([10, -1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n25\n>>> sum_odd_indexed([0, 1, 2, 3, 4, 5])\n\
    9*/", "    if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n\
    \    } elseif (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n\
    \    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++)\
    \ {\n            if ($i % 2 == 0) {\n                $count++;\n            }\n\
    \        }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/", "    $words = preg_split('/[\\s,]+/', $txt);\n\
    \    if (count($words) > 1) {\n        return $words;\n    }\n    $letters = preg_split('//',\
    \ $txt, -1, PREG_SPLIT_NO_EMPTY);\n    $odd_letters = array_filter($letters, function($letter)\
    \ {\n        return ord($letter) % 2 == 1;\n    });\n    return count($odd_letters);\n\
    }\n\n/* Given an array of integers, return the number of integers that are divisible\
    \ by 3.\nExamples\n>>> divisible_by_three([1, 2, 3, 4, 5, 6, 7, 8, 9])\n3\n>>>\
    \ divisible_by_three([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n5*/",
  "    $txt = trim($txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt\
    \ = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/',\
    \ ',', $txt);\n    $txt = preg_replace('/[^a-z,]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '$0,', $txt);\n    $txt = preg_replace('/[^a-z,]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '$0,', $txt);\n    $txt = preg_replace('/[^a-z,]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '$0,', $txt);\n    $txt = preg_replace('/[^a-z,]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '$0,', $txt);\n    $txt = preg_replace('/[^a-z,]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '$0,', $txt);\n    $txt = preg_replace('/[^a-z,]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '$0,', $txt);\n    $txt = preg_replace('/[^a-z,]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '$0,', $txt);\n    $txt = preg_replace('/[^a-z,]/', '', $txt);\n    $txt = preg_replace('/[a-z]/',\
    \ '$0,', $txt);\n    $txt = preg_replace('/[^a-z,]/', '', $txt);\n    $txt =",
  "    $arr = [];\n    if (strpos($txt, ' ') !== false) {\n        $arr = explode('\
    \ ', $txt);\n    } else if (strpos($txt, ',') !== false) {\n        $arr = explode(',',\
    \ $txt);\n    } else {\n        $arr = strlen(preg_replace('/[^a-z]/', '', $txt));\n\
    \    }\n    return $arr;\n}\n\n/* Given a string of words, return an array of\
    \ words split on whitespace, if no whitespaces exists in the text you\nshould\
    \ split on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "    $arr = explode(\" \", $txt);\n    if (count($arr) == 1)\
    \ {\n        $arr = explode(\",\", $txt);\n        if (count($arr) == 1) {\n \
    \           $arr = str_split($txt);\n            $count = 0;\n            foreach\
    \ ($arr as $item) {\n                if (ord($item) % 2 == 1) {\n            \
    \        $count++;\n                }\n            }\n            return $count;\n\
    \        }\n    }\n    return $arr;\n}\n\n/* Given an array of integers, return\
    \ the sum of the integers that are divisible by 3.\nExamples\n>>> sum_divisible_by_3([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9])\n18\n>>> sum_divisible_by_3([0, 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9])\n18\n>>> sum_divisible_by_3([-1, -2, -3, -4, -5, -6, -7, -8, -9])\n-18\n\
    >>> sum_divisible_by_3([])\n0*/", "    $arr = array();\n    $arr = explode(\"\
    \ \", $txt);\n    if (count($arr) == 1) {\n        $arr = explode(\",\", $txt);\n\
    \        if (count($arr) == 1) {\n            $arr = strlen($txt);\n        }\n\
    \    }\n    return $arr;\n}\n\n/* Given a string of words, return an array of\
    \ words split on whitespace, if no whitespaces exists in the text you\nshould\
    \ split on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "    $txt = trim($txt);\n    if (strpos($txt, ' ') !== false)\
    \ {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "\tif (strpos($txt, ' ') !== false) {\n\t\treturn explode(' ',\
    \ $txt);\n\t}\n\tif (strpos($txt, ',') !== false) {\n\t\treturn explode(',', $txt);\n\
    \t}\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($txt); $i++) {\n\t\tif (ord($txt[$i])\
    \ % 2 == 1) {\n\t\t\t$count++;\n\t\t}\n\t}\n\treturn $count;\n}\n\n/* Given a\
    \ string of words, return an array of words split on whitespace, if no whitespaces\
    \ exists in the text you\nshould split on commas ',' if no commas exists you should\
    \ return the number of lower-case letters with odd order in the\nalphabet, ord('a')\
    \ = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = trim($txt);\n\
    \    $txt = explode(' ', $txt);\n    if (count($txt) == 1) {\n        $txt = str_split($txt[0]);\n\
    \        $count = 0;\n        foreach ($txt as $key => $value) {\n           \
    \ if (ord($value) % 2 != 0) {\n                $count++;\n            }\n    \
    \    }\n        return $count;\n    }\n    return $txt;\n}\n\necho '<pre>';\n\
    print_r(split_words('Hello world!'));\necho '</pre>';\necho '<pre>';\nprint_r(split_words('Hello,world!'));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(split_words('abcdef'));\necho '</pre>';",
  "    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt", "    $txt = str_replace(',', ' ', $txt);\n    $txt = str_replace('.',\
    \ ' ', $txt);\n    $txt = str_replace('!', ' ', $txt);\n    $txt = str_replace('?',\
    \ ' ', $txt);\n    $txt = str_replace(';', ' ', $txt);\n    $txt = str_replace(':',\
    \ ' ', $txt);\n    $txt = str_replace('-', ' ', $txt);\n    $txt = str_replace('_',\
    \ ' ', $txt);\n    $txt = str_replace('(', ' ', $txt);\n    $txt = str_replace(')',\
    \ ' ', $txt);\n    $txt = str_replace('[', ' ', $txt);\n    $txt = str_replace(']',\
    \ ' ', $txt);\n    $txt = str_replace('{', ' ', $txt);\n    $txt = str_replace('}',\
    \ ' ', $txt);\n    $txt = str_replace('\"', ' ', $txt);\n    $txt = str_replace(\"\
    '\", ' ', $txt);\n    $txt = str_replace('/', ' ', $txt);\n    $txt = str_replace('\\\
    \\', ' ', $txt);\n    $txt = str_replace('*', ' ', $txt);\n    $txt = str_replace('+',\
    \ ' ', $txt);\n    $txt = str_replace('=', ' ', $txt);\n    $txt = str_replace('$',\
    \ ' ', $txt);\n    $txt = str_replace('%', ' ', $txt);\n    $txt = str_replace('#',\
    \ ' ', $txt);\n    $txt = str_replace('@', ' ', $txt);\n    $txt = str_replace('&',\
    \ ' ', $txt);\n    $txt = str_replace('^', ' ', $txt);\n    $txt = str_replace('~',\
    \ ' ', $txt);\n    $txt = str_replace('`', ' ', $txt);\n    $txt = str_replace('|',\
    \ ' ', $txt);\n    $txt = str_replace('<', ' ', $txt);\n    $txt = str_replace('>',\
    \ ' ', $txt);", "    $txt = trim($txt);\n    if (strpos($txt, ' ') !== false)\
    \ {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n$txt = \"Hello world!\";\nprint_r(split_words($txt));\n\
    echo \"<br>\";\n$txt = \"Hello,world!\";\nprint_r(split_words($txt));\necho \"\
    <br>\";\n$txt = \"abcdef\";\nprint_r(split_words($txt));", "    $txt = preg_replace('/[^a-zA-Z]/',\
    \ '', $txt);\n    $txt = strtolower($txt);\n    $txt = str_split($txt);\n    $count\
    \ = 0;\n    foreach ($txt as $key => $value) {\n        if ($key % 2 == 0) {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}\n\necho split_words(\"\
    Hello world!\");\necho \"<br>\";\necho split_words(\"Hello,world!\");\necho \"\
    <br>\";\necho split_words(\"abcdef\");", "    $txt = preg_replace('/[^a-zA-Z0-9\\\
    s]/', '', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);\n    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace(' ', ',', $txt);", "    if (strpos($txt,\
    \ ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given an array of integers, return\
    \ the sum of the integers that are greater than or equal to 10 and less than or\
    \ equal\nto 20.\nExamples\n>>> sum_of_range(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))\n55\n>>> sum_of_range(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30))\n150*/", "    if (strpos($txt, ' ') !== false)\
    \ {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "    $words = preg_split('/[\\s,]+/', $txt);\n    if (count($words)\
    \ > 1) {\n        return $words;\n    }\n    $letters = preg_split('//', $txt,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    $odd_letters = 0;\n    foreach ($letters as $letter)\
    \ {\n        if (ord($letter) % 2 == 1) {\n            $odd_letters++;\n     \
    \   }\n    }\n    return $odd_letters;\n}\n\n/* Given an array of integers, return\
    \ the sum of all the integers that have an even index, multiplied by the integer\
    \ at\nthe last index. If the array is empty, you should return 0.\nExamples\n\
    >>> even_last([0, 1, 2, 3, 4, 5])\n30\n>>> even_last([1, 3, 5])\n30\n>>> even_last([6])\n\
    36\n>>> even_last([])\n0*/", "    $txt = trim($txt);\n    if (strpos($txt, ' ')\
    \ !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/", "    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/',\
    \ ',', $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\\
    s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/',\
    \ ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt =\
    \ preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',',\
    \ $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\\
    s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/',\
    \ ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt =\
    \ preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',',\
    \ $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/\\\
    s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/', ',', $", "    $txt =\
    \ trim($txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/\\\
    s*,\\s*/', ',', $txt);\n    if (strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return\
    \ explode(',', $txt);\n    } else {\n        $count = 0;\n        for ($i = 0;\
    \ $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n    \
    \            $count++;\n            }\n        }\n        return $count;\n   \
    \ }\n}\n\n/* Given an array of integers, return the sum of the integers that are\
    \ divisible by 3 or 5, but not both.\nExamples\n>>> sum_divisible_by_3_or_5([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n33\n>>> sum_divisible_by_3_or_5([-5, -4, -3, -2,\
    \ -1, 0, 1, 2, 3, 4, 5])\n0\n>>> sum_divisible_by_3_or_5([-5, -4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n45*/", "    $arr = array();\n\
    \    if (strpos($txt, ' ') !== false) {\n        $arr = explode(' ', $txt);\n\
    \    } elseif (strpos($txt, ',') !== false) {\n        $arr = explode(',', $txt);\n\
    \    } else {\n        $arr = strlen(preg_replace('/[^a-z]/', '', $txt));\n  \
    \  }\n    return $arr;\n}\n\n/* Given a string of words, return an array of words\
    \ split on whitespace, if no whitespaces exists in the text you\nshould split\
    \ on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "    $txt = trim($txt);\n    if (strpos($txt, ' ') !== false)\
    \ {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "    $words = preg_split('/[\\s,]+/', $txt);\n    if (count($words)\
    \ > 1) {\n        return $words;\n    }\n    $letters = preg_split('//', $txt,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    $odd = 0;\n    foreach ($letters as $letter)\
    \ {\n        if (ord($letter) % 2 == 1) {\n            $odd++;\n        }\n  \
    \  }\n    return $odd;\n}\n\n$txt = \"Hello world!\";\n$txt = \"Hello,world!\"\
    ;\n$txt = \"abcdef\";\n\necho \"<pre>\";\nprint_r(split_words($txt));\necho \"\
    </pre>\";", "    $arr = array();\n    $arr = explode(\" \", $txt);\n    if (count($arr)\
    \ == 1) {\n        $arr = explode(\",\", $txt);\n        if (count($arr) == 1)\
    \ {\n            $arr = strlen($txt);\n        }\n    }\n    return $arr;\n}\n\
    \n/* Given a string of words, return an array of words split on whitespace, if\
    \ no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/",
  "    $words = preg_split('/[\\s,]+/', $txt);\n    if (count($words) > 1) {\n   \
    \     return $words;\n    }\n    $letters = preg_split('//', $txt, -1, PREG_SPLIT_NO_EMPTY);\n\
    \    $odds = 0;\n    foreach ($letters as $letter) {\n        if (ord($letter)\
    \ % 2 == 1) {\n            $odds++;\n        }\n    }\n    return $odds;\n}\n\n\
    /* Given a string of words, return an array of words split on whitespace, if no\
    \ whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/",
  "    $txt = str_replace(',', ' ', $txt);\n    $txt = str_replace('!', ' ', $txt);\n\
    \    $txt = str_replace('.', ' ', $txt);\n    $txt = str_replace('?', ' ', $txt);\n\
    \    $txt = str_replace(';', ' ', $txt);\n    $txt = str_replace(':', ' ', $txt);\n\
    \    $txt = str_replace('-', ' ', $txt);\n    $txt = str_replace('_', ' ', $txt);\n\
    \    $txt = str_replace('+', ' ', $txt);\n    $txt = str_replace('=', ' ', $txt);\n\
    \    $txt = str_replace('*', ' ', $txt);\n    $txt = str_replace('/', ' ', $txt);\n\
    \    $txt = str_replace('\\\\', ' ', $txt);\n    $txt = str_replace('|', ' ',\
    \ $txt);\n    $txt = str_replace('(', ' ', $txt);\n    $txt = str_replace(')',\
    \ ' ', $txt);\n    $txt = str_replace('[', ' ', $txt);\n    $txt = str_replace(']',\
    \ ' ', $txt);\n    $txt = str_replace('{', ' ', $txt);\n    $txt = str_replace('}',\
    \ ' ', $txt);\n    $txt = str_replace('<', ' ', $txt);\n    $txt = str_replace('>',\
    \ ' ', $txt);\n    $txt = str_replace('\"', ' ', $txt);\n    $txt = str_replace(\"\
    '\", ' ', $txt);\n    $txt = str_replace('`', ' ', $txt);\n    $txt = str_replace('~',\
    \ ' ', $txt);\n    $txt = str_replace('@', ' ', $txt);\n    $txt = str_replace('#',\
    \ ' ', $txt);\n    $txt = str_replace('$', ' ', $txt);\n    $txt = str_replace('%',\
    \ ' ', $txt);\n    $txt = str_replace('^', ' ', $txt);\n    $txt = str_replace('&',\
    \ ' ', $txt);", "    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 != 0) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\n/* Given an array\
    \ of integers, return the sum of all integers that have an odd number of digits.\n\
    Examples\n>>> sum_odd_digits(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n25\n>>> sum_odd_digits(array(43,\
    \ 77, 51, 987, 754, 852))\n1373\n>>> sum_odd_digits(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))\n100*/", "    $txt = trim($txt);\n\
    \    if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n\
    \    } elseif (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n\
    \    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++)\
    \ {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n  \
    \          }\n        }\n        return $count;\n    }\n}\n\n/* Given a string\
    \ of words, return an array of words split on whitespace, if no whitespaces exists\
    \ in the text you\nshould split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\nalphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    if (strpos($txt, ' ') !==\
    \ false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',')\
    \ !== false) {\n        return explode(',', $txt);\n    } else {\n        $count\
    \ = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "    $arr = [];\n    if (strpos($txt, ' ') !== false) {\n   \
    \     $arr = explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n\
    \        $arr = explode(',', $txt);\n    } else {\n        $arr = strlen(preg_replace('/[^a-z]/',\
    \ '', $txt));\n    }\n    return $arr;\n}\n\n/* Given an array of integers, return\
    \ the number of integers that are odd and have an order in the alphabet that is\
    \ odd.\nExamples\n>>> odd_order_odd_number(array(1, 2, 3, 4, 5))\n3\n>>> odd_order_odd_number(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n5\n>>> odd_order_odd_number(array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))\n10*/", "    $txt\
    \ = trim($txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/\\\
    s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s+/', ',', $txt);\n    $txt\
    \ = preg_replace('/[^a-z,]/', '', $txt);\n    $txt = preg_replace('/[a-z]/', '1',\
    \ $txt);\n    $txt = preg_replace('/[^1,]/', '', $txt);\n    $txt = preg_replace('/1/',\
    \ 'a', $txt);\n    $txt = preg_replace('/[^a,]/', '', $txt);\n    $txt = preg_replace('/a/',\
    \ '1', $txt);\n    $txt = preg_replace('/[^1,]/', '', $txt);\n    $txt = preg_replace('/1/',\
    \ 'a', $txt);\n    $txt = preg_replace('/[^a,]/', '', $txt);\n    $txt = preg_replace('/a/',\
    \ '1', $txt);\n    $txt = preg_replace('/[^1,]/', '', $txt);\n    $txt = preg_replace('/1/',\
    \ 'a', $txt);\n    $txt = preg_replace('/[^a,]/', '', $txt);\n    $txt = preg_replace('/a/',\
    \ '1', $txt);\n    $txt = preg_replace('/[^1,]/', '', $txt);\n    $txt = preg_replace('/1/',\
    \ 'a', $txt);\n    $txt = preg_replace('/[^a,]/', '', $txt);\n    $txt = preg_replace('/a/',\
    \ '1', $txt);\n    $txt = preg_replace('/[^1,]/', '', $txt);\n    $txt = preg_replace('/1/',\
    \ 'a', $txt);\n   ", "    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 != 0) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\n/* Given an array\
    \ of integers, return the sum of all integers that have an odd index.\nExamples\n\
    >>> sum_odd_indexed(array(1, 2, 3, 4, 5))\n9\n>>> sum_odd_indexed(array(0, 1,\
    \ 2, 3, 4, 5))\n9\n>>> sum_odd_indexed(array(1, 2, 3, 4, 5, 6))\n9\n>>> sum_odd_indexed(array(0,\
    \ 1, 2, 3, 4, 5, 6))\n9*/", "    $words = preg_split('/[\\s,]+/', $txt);\n   \
    \ if (count($words) == 1) {\n        $letters = str_split($txt);\n        $odd\
    \ = 0;\n        foreach ($letters as $letter) {\n            if (ord($letter)\
    \ % 2 == 1) {\n                $odd++;\n            }\n        }\n        return\
    \ $odd;\n    }\n    return $words;\n}\n\necho '<pre>';\nprint_r(split_words(\"\
    Hello world!\"));\necho '</pre>';\necho '<pre>';\nprint_r(split_words(\"Hello,world!\"\
    ));\necho '</pre>';\necho '<pre>';\nprint_r(split_words(\"abcdef\"));\necho '</pre>';",
  "    if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n  \
    \  } elseif (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n\
    \    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++)\
    \ {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n  \
    \          }\n        }\n        return $count;\n    }\n}\n\n/* Given a string\
    \ of words, return an array of words split on whitespace, if no whitespaces exists\
    \ in the text you\nshould split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\nalphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    $res = [];\n    $arr =\
    \ explode(' ', $txt);\n    if (count($arr) > 1) {\n        return $arr;\n    }\n\
    \    $arr = explode(',', $txt);\n    if (count($arr) > 1) {\n        return $arr;\n\
    \    }\n    $arr = str_split($txt);\n    foreach ($arr as $key => $value) {\n\
    \        if ($key % 2 == 0) {\n            $res[] = $value;\n        }\n    }\n\
    \    return count($res);\n}\n\necho \"<pre>\";\nprint_r(split_words(\"Hello world!\"\
    ));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(split_words(\"Hello,world!\"\
    ));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(split_words(\"abcdef\"));\n\
    echo \"</pre>\";", "    $txt = trim($txt);\n    if (strpos($txt, ' ') !== false)\
    \ {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello world!'));\n\
    print_r(split_words('Hello,world!'));\nprint_r(split_words('abcdef'));\necho '</pre>';",
  "    $arr = array();\n    if (strpos($txt, ' ') !== false) {\n        $arr = explode('\
    \ ', $txt);\n    } else if (strpos($txt, ',') !== false) {\n        $arr = explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n\
    \            }\n        }\n        $arr = $count;\n    }\n    return $arr;\n}\n\
    \n$txt = \"Hello world!\";\nprint_r(split_words($txt));\necho \"<br>\";\n$txt\
    \ = \"Hello,world!\";\nprint_r(split_words($txt));\necho \"<br>\";\n$txt = \"\
    abcdef\";\nprint_r(split_words($txt));", "    $txt = trim($txt);\n    if (strpos($txt,\
    \ ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello\
    \ world!'));\nprint_r(split_words('Hello,world!'));\nprint_r(split_words('abcdef'));\n\
    echo '</pre>';", "    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\n$txt = \"Hello\
    \ world!\";\n$txt1 = \"Hello,world!\";\n$txt2 = \"abcdef\";\n\necho \"<pre>\"\
    ;\nprint_r(split_words($txt));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(split_words($txt1));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(split_words($txt2));\necho \"</pre>\"\
    ;", "    if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n\
    \    } elseif (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n\
    \    } else {\n        $odd = 0;\n        for ($i = 0; $i < strlen($txt); $i++)\
    \ {\n            if (ord($txt[$i]) % 2 == 1) {\n                $odd++;\n    \
    \        }\n        }\n        return $odd;\n    }\n}\n\n/* Given a string of\
    \ words, return an array of words split on whitespace, if no whitespaces exists\
    \ in the text you\nshould split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\nalphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    if (strpos($txt, ' ') !==\
    \ false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',')\
    \ !== false) {\n        return explode(',', $txt);\n    } else {\n        $count\
    \ = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of all integers\
    \ that have an odd index\nExamples\n>>> sum_odd_indexed(array(1, 2, 3, 4, 5))\n\
    9\n>>> sum_odd_indexed(array(0, 1, 2, 3, 4, 5))\n9\n>>> sum_odd_indexed(array(1,\
    \ 2, 3, 4, 5, 6))\n9\n>>> sum_odd_indexed(array(0, 1, 2, 3, 4, 5, 6))\n9*/", " \
    \   $txt = trim($txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt\
    \ = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\s*\\\
    .\\s*/', '.', $txt);\n    $txt = preg_replace('/\\s*\\?\\s*/', '?', $txt);\n \
    \   $txt = preg_replace('/\\s*!\\s*/', '!', $txt);\n    $txt = preg_replace('/\\\
    s*;\\s*/', ';', $txt);\n    $txt = preg_replace('/\\s*:\\s*/', ':', $txt);\n \
    \   $txt = preg_replace('/\\s*\\(\\s*/', '(', $txt);\n    $txt = preg_replace('/\\\
    s*\\)\\s*/', ')', $txt);\n    $txt = preg_replace('/\\s*\\[\\s*/', '[', $txt);\n\
    \    $txt = preg_replace('/\\s*\\]\\s*/', ']', $txt);\n    $txt = preg_replace('/\\\
    s*\\{\\s*/', '{', $txt);\n    $txt = preg_replace('/\\s*\\}\\s*/', '}', $txt);\n\
    \    $txt = preg_replace('/\\s*\\|\\s*/', '|', $txt);\n    $txt = preg_replace('/\\\
    s*\\\\\\s*/', '\\\\', $txt);\n    $txt = preg_replace('/\\s*\\/\\s*/', '/', $txt);\n\
    \    $txt = preg_replace('/\\s*\\+\\s*/', '+', $txt);\n    $txt = preg_replace('/\\\
    s*\\-\\s*/', '-', $txt);\n    $txt = preg_replace('/\\s*\\*\\s*/', '*', $txt);\n\
    \    $txt = preg_replace('/\\s*\\=\\s*/', '=', $txt);\n    $txt = pre", "    $txt\
    \ = trim($txt);\n    $txt = preg_replace('/\\s+/', ' ', $txt);\n    if (strpos($txt,\
    \ ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given an array of integers, return\
    \ a new array with each value doubled.\nFor example:\n[1, 2, 3] --> [2, 4, 6]\n\
    For the beginner, try to use the map method - it comes in very handy quite a lot\
    \ so is a good one to know.\nExamples\n[1, 2, 3] --> [2, 4, 6]\n[4, 1, 1, 1, 4]\
    \ --> [8, 2, 2, 2, 8]\n[2, 2, 2, 2, 2, 2] --> [4, 4, 4, 4, 4, 4]*/", "    $txt\
    \ = str_replace(' ', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n \
    \   $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n\
    \    $txt", "    $txt = str_replace(\",\", \" \", $txt);\n    $txt = str_replace(\"\
    \  \", \" \", $txt);\n    $txt = trim($txt);\n    $txt = strtolower($txt);\n \
    \   if (strpos($txt, \" \") !== false) {\n        return explode(\" \", $txt);\n\
    \    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++)\
    \ {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n  \
    \          }\n        }\n        return $count;\n    }\n}\n\n/* Given a string\
    \ of words, return an array of words split on whitespace, if no whitespaces exists\
    \ in the text you\nshould split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\nalphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    $txt = str_replace(' ',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt", "    if (strpos($txt,\
    \ ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given an array of integers, return\
    \ the sum of all the integers that have an even index, multiplied by the integer\
    \ at\nthe last index. If the array is empty, you should return 0.\nExamples\n\
    >>> even_last([0, 1, 2, 3, 4, 5])\n30\n>>> even_last([1, 3, 5])\n30\n>>> even_last([6])\n\
    36\n>>> even_last([])\n0*/", "    $result = array();\n    if (strpos($txt, ' ')\
    \ !== false) {\n        $result = explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        $result = explode(',', $txt);\n    } else {\n   \
    \     $result = strlen(preg_replace('/[^aeiou]/i', '', $txt));\n    }\n    return\
    \ $result;\n}\n\n/* Given a string of words, return an array of words split on\
    \ whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "    $txt = trim($txt);\n    if (strpos($txt, ' ') !== false)\
    \ {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "    if(strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif(strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if(ord($txt[$i]) % 2 != 0) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\n/* Given an array\
    \ of integers, return the sum of the integers that are divisible by 3 or 5\nExamples\n\
    >>> sum_divisible_by_3_or_5([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n33\n>>> sum_divisible_by_3_or_5([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10])\n-33\n>>> sum_divisible_by_3_or_5([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n98*/",
  "    $txt = str_replace(\",\", \" \", $txt);\n    $txt = str_replace(\"  \", \"\
    \ \", $txt);\n    $txt = trim($txt);\n    $txt = explode(\" \", $txt);\n    if\
    \ (count($txt) == 1) {\n        $txt = str_split($txt[0]);\n        $count = 0;\n\
    \        foreach ($txt as $key => $value) {\n            if ($key % 2 == 0) {\n\
    \                $count++;\n            }\n        }\n        return $count;\n\
    \    }\n    return $txt;\n}\n\n/* Given a string of words, return an array of\
    \ words split on whitespace, if no whitespaces exists in the text you\nshould\
    \ split on commas ',' if no commas exists you should return the number of lower-case\
    \ letters with odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z')\
    \ = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\n/* Given an array\
    \ of integers, return the sum of all integers that have an odd index.\nExamples\n\
    >>> sum_odd_indexed([10, -1, 3, 5])\n8\n>>> sum_odd_indexed([0, 2, 4, 6])\n0\n\
    >>> sum_odd_indexed([1, 2, 3, 4, 5])\n9*/", "    if (strpos($txt, ' ') !== false)\
    \ {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 != 0) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\n/* Given a string\
    \ of words, return an array of words split on whitespace, if no whitespaces exists\
    \ in the text you\nshould split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\nalphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    $txt = trim($txt);\n  \
    \  if(strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n   \
    \ } elseif(strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n\
    \    } else {\n        $count = 0;\n        for($i = 0; $i < strlen($txt); $i++)\
    \ {\n            if(ord($txt[$i]) % 2 == 1) {\n                $count++;\n   \
    \         }\n        }\n        return $count;\n    }\n}\n\n/* Given a string\
    \ of words, return an array of words split on whitespace, if no whitespaces exists\
    \ in the text you\nshould split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\nalphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    if (strpos($txt, ' ') !==\
    \ false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',')\
    \ !== false) {\n        return explode(',', $txt);\n    } else {\n        $cnt\
    \ = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $cnt++;\n            }\n        }\n        return\
    \ $cnt;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "    $txt = trim($txt);\n    if (strpos($txt, ' ') !== false)\
    \ {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n$txt = 'Hello world!';\necho '<pre>';\nprint_r(split_words($txt));\n\
    echo '</pre>';\n\n$txt = 'Hello,world!';\necho '<pre>';\nprint_r(split_words($txt));\n\
    echo '</pre>';\n\n$txt = 'abcdef';\necho '<pre>';\nprint_r(split_words($txt));\n\
    echo '</pre>';", "    $txt = trim($txt);\n    if (strpos($txt, ' ') !== false)\
    \ {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\necho '<pre>';\n\
    print_r(split_words('Hello world!'));\nprint_r(split_words('Hello,world!'));\n\
    print_r(split_words('abcdef'));\necho '</pre>';", "    $txt = str_replace(',',\
    \ ' ', $txt);\n    $txt = str_replace('.', ' ', $txt);\n    $txt = str_replace('!',\
    \ ' ', $txt);\n    $txt = str_replace('?', ' ', $txt);\n    $txt = str_replace(';',\
    \ ' ', $txt);\n    $txt = str_replace(':', ' ', $txt);\n    $txt = str_replace('-',\
    \ ' ', $txt);\n    $txt = str_replace('_', ' ', $txt);\n    $txt = str_replace('(',\
    \ ' ', $txt);\n    $txt = str_replace(')', ' ', $txt);\n    $txt = str_replace('[',\
    \ ' ', $txt);\n    $txt = str_replace(']', ' ', $txt);\n    $txt = str_replace('{',\
    \ ' ', $txt);\n    $txt = str_replace('}', ' ', $txt);\n    $txt = str_replace('/',\
    \ ' ', $txt);\n    $txt = str_replace('\\\\', ' ', $txt);\n    $txt = str_replace('*',\
    \ ' ', $txt);\n    $txt = str_replace('+', ' ', $txt);\n    $txt = str_replace('=',\
    \ ' ', $txt);\n    $txt = str_replace('|', ' ', $txt);\n    $txt = str_replace('&',\
    \ ' ', $txt);\n    $txt = str_replace('^', ' ', $txt);\n    $txt = str_replace('%',\
    \ ' ', $txt);\n    $txt = str_replace('$', ' ', $txt);\n    $txt = str_replace('#',\
    \ ' ', $txt);\n    $txt = str_replace('@', ' ', $txt);\n    $txt = str_replace('~',\
    \ ' ', $txt);\n    $txt = str_replace('`', ' ', $txt);\n    $txt = str_replace('\\\
    '', ' ', $txt);\n    $txt = str_replace('\"', ' ', $txt);\n    $txt = str_replace('<',\
    \ ' ', $txt);\n    $txt = str_replace('>', ' ', $txt);", "    $result = [];\n\
    \    if (strpos($txt, ' ') !== false) {\n        $result = explode(' ', $txt);\n\
    \    } elseif (strpos($txt, ',') !== false) {\n        $result = explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 !== 0) {\n                $count++;\n\
    \            }\n        }\n        $result = $count;\n    }\n    return $result;\n\
    }\n\n/* Given an array of integers, return the sum of all integers that have an\
    \ odd index.\nExamples\n>>> sum_odd_indexed([10, 20, 30, 40, 50])\n90\n>>> sum_odd_indexed([0,\
    \ 6, -4, 7, 10])\n3\n>>> sum_odd_indexed([1, 2, 3, 4, 5, 6])\n9*/", "    if (strpos($txt,\
    \ ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('abcdef'));\n\
    echo '</pre>';", "    $txt = str_replace(',', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = trim($txt);\n    $arr = explode(' ', $txt);\n  \
    \  if (count($arr) > 1) {\n        return $arr;\n    } else {\n        $count\
    \ = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of numbers, return an array of numbers\
    \ sorted in ascending order, except for the last two elements,\nwhich should be\
    \ sorted in descending order.\nExamples\n>>> sort_array([1, 2, 3, 4, 5, 6])\n\
    array(1, 2, 3, 4, 5, 6)\n>>> sort_array([1, 2, 3, 4, 5, 6, 7])\narray(1, 2, 3,\
    \ 4, 5, 7, 6)\n>>> sort_array([1, 2, 3, 4, 5, 6, 7, 8])\narray(1, 2, 3, 4, 5,\
    \ 7, 8, 6)*/", "    $arr = [];\n    if (strpos($txt, ' ') !== false) {\n     \
    \   $arr = explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n\
    \        $arr = explode(',', $txt);\n    } else {\n        $arr = strlen(preg_replace('/[^a-z]/',\
    \ '', $txt));\n    }\n    return $arr;\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/", "    $txt = trim($txt);\n    if (strpos($txt,\
    \ ' ') !== false) {\n        return explode(' ', $txt);\n    }\n    if (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    }\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 ==\
    \ 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\n/* Given\
    \ a string of words, return an array of words split on whitespace, if no whitespaces\
    \ exists in the text you\nshould split on commas ',' if no commas exists you should\
    \ return the number of lower-case letters with odd order in the\nalphabet, ord('a')\
    \ = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    $txt = trim($txt);\n  \
    \  if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n  \
    \  } elseif (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n\
    \    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++)\
    \ {\n            if (ord($txt[$i]) % 2 != 0) {\n                $count++;\n  \
    \          }\n        }\n        return $count;\n    }\n}\n\necho '<pre>';\nprint_r(split_words('Hello\
    \ world!'));\nprint_r(split_words('Hello,world!'));\nprint_r(split_words('abcdef'));\n\
    echo '</pre>';", "    $arr = [];\n    if (strpos($txt, ' ') !== false) {\n   \
    \     $arr = explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n\
    \        $arr = explode(',', $txt);\n    } else {\n        $arr = strlen(preg_replace('/[aeiou]/i',\
    \ '', $txt));\n    }\n    return $arr;\n}\n\n/* Given an array of words, return\
    \ an array of words that are palindromes.\nExamples\n>>> palindromes(array(\"\
    Hello\", \"world!\"))\narray()\n>>> palindromes(array(\"Hello\", \"world!\", \"\
    racecar\"))\narray(\"racecar\")\n>>> palindromes(array(\"Hello\", \"world!\",\
    \ \"racecar\", \"mom\", \"dad\", \"noon\"))\narray(\"racecar\", \"mom\", \"dad\"\
    , \"noon\")*/", "    $words = preg_split('/[\\s,]+/', $txt);\n    if (count($words)\
    \ > 1) {\n        return $words;\n    }\n    $letters = preg_split('//', $txt,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    $count = 0;\n    foreach ($letters as $letter)\
    \ {\n        if (ord($letter) % 2 == 1) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}\n\n$txt = \"Hello,world!\";\necho split_words($txt);",
  "    $txt = str_replace(',', ' ', $txt);\n    $txt = str_replace('!', ' ', $txt);\n\
    \    $txt = str_replace('?', ' ', $txt);\n    $txt = str_replace('.', ' ', $txt);\n\
    \    $txt = str_replace(';', ' ', $txt);\n    $txt = str_replace(':', ' ', $txt);\n\
    \    $txt = str_replace('-', ' ', $txt);\n    $txt = str_replace('_', ' ', $txt);\n\
    \    $txt = str_replace('(', ' ', $txt);\n    $txt = str_replace(')', ' ', $txt);\n\
    \    $txt = str_replace('[', ' ', $txt);\n    $txt = str_replace(']', ' ', $txt);\n\
    \    $txt = str_replace('{', ' ', $txt);\n    $txt = str_replace('}', ' ', $txt);\n\
    \    $txt = str_replace('\"', ' ', $txt);\n    $txt = str_replace(\"'\", ' ',\
    \ $txt);\n    $txt = str_replace('/', ' ', $txt);\n    $txt = str_replace('\\\\\
    ', ' ', $txt);\n    $txt = str_replace('+', ' ', $txt);\n    $txt = str_replace('=',\
    \ ' ', $txt);\n    $txt = str_replace('*', ' ', $txt);\n    $txt = str_replace('&',\
    \ ' ', $txt);\n    $txt = str_replace('^', ' ', $txt);\n    $txt = str_replace('%',\
    \ ' ', $txt);\n    $txt = str_replace('$', ' ', $txt);\n    $txt = str_replace('#',\
    \ ' ', $txt);\n    $txt = str_replace('@', ' ', $txt);\n    $txt = str_replace('!',\
    \ ' ', $txt);\n    $txt = str_replace('~', ' ', $txt);\n    $txt = str_replace('`',\
    \ ' ', $txt);\n    $txt = str_replace('<', ' ', $txt);\n    $txt = str_replace('>',\
    \ ' ', $txt);", "    $arr = array();\n    $arr = explode(\" \", $txt);\n    if\
    \ (count($arr) == 1) {\n        $arr = explode(\",\", $txt);\n        if (count($arr)\
    \ == 1) {\n            $count = 0;\n            for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n                if (ord($txt[$i]) % 2 == 1) {\n                   \
    \ $count++;\n                }\n            }\n            return $count;\n  \
    \      }\n    }\n    return $arr;\n}\n\n/*Given an array of strings, return a\
    \ new array with the strings in sorted order, except group all the strings that\
    \ begin\nwith 'x' first. e.g. ['mix', 'xyz', 'apple', 'xanadu', 'aardvark'] yields\
    \ ['xanadu', 'xyz', 'aardvark', 'apple', 'mix']\nHint: this can be done by making\
    \ 2 lists and sorting each of them before combining them.\nExamples\n>>> front_x(['bbb',\
    \ 'ccc', 'axx', 'xzz', 'xaa'])\narray(\"xaa\", \"xzz\", \"axx\", \"bbb\", \"ccc\"\
    )\n>>> front_x(['ccc', 'bbb', 'aaa', 'xcc', 'xaa'])\narray(\"xaa\", \"xcc\", \"\
    aaa\", \"bbb\", \"ccc\")\n>>> front_x(['mix', 'xyz', 'apple', 'xanadu', 'aardvark'])\n\
    array(\"xanadu\", \"xyz\", \"aardvark\", \"apple\", \"mix\")*/", "    if (strpos($txt,\
    \ ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 == 1) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given an array of integers, return\
    \ the sum of the integers that are in the array, if the array is empty you should\n\
    return 0\nExamples\n>>> sum_array(array(1, 2, 3))\n6\n>>> sum_array(array())\n\
    0*/", "    $arr = array();\n    if (strpos($txt, ' ') !== false) {\n        $arr\
    \ = explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n      \
    \  $arr = explode(',', $txt);\n    } else {\n        $arr = strlen(preg_replace('/[^a-z]/',\
    \ '', $txt));\n    }\n    return $arr;\n}\n\n/* Given a string of words, return\
    \ an array of words split on whitespace, if no whitespaces exists in the text\
    \ you\nshould split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\nalphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\")\narray(\"\
    Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\"\
    )\n>>> split_words(\"abcdef\")\n3*/", "    $txt = trim($txt);\n    $txt = preg_replace('/\\\
    s+/', ' ', $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt\
    \ = preg_replace('/\\s+/', ',', $txt);\n    $txt = preg_replace('/[^a-z,]/', '',\
    \ $txt);\n    $txt = preg_replace('/[a-z]/', '1', $txt);\n    $txt = preg_replace('/[^1,]/',\
    \ '', $txt);\n    $txt = preg_replace('/1/', 'a', $txt);\n    $txt = preg_replace('/[^a,]/',\
    \ '', $txt);\n    $txt = preg_replace('/a/', '1', $txt);\n    $txt = preg_replace('/[^1,]/',\
    \ '', $txt);\n    $txt = preg_replace('/1/', 'a', $txt);\n    $txt = preg_replace('/[^a,]/',\
    \ '', $txt);\n    $txt = preg_replace('/a/', '1', $txt);\n    $txt = preg_replace('/[^1,]/',\
    \ '', $txt);\n    $txt = preg_replace('/1/', 'a', $txt);\n    $txt = preg_replace('/[^a,]/',\
    \ '', $txt);\n    $txt = preg_replace('/a/', '1', $txt);\n    $txt = preg_replace('/[^1,]/',\
    \ '', $txt);\n    $txt = preg_replace('/1/', 'a', $txt);\n    $txt = preg_replace('/[^a,]/',\
    \ '', $txt);\n    $txt = preg_replace('/a/', '1', $txt);\n    $txt = preg_replace('/[^1,]/',\
    \ '', $txt);\n    $txt = preg_replace('/1/', 'a', $txt);\n   ", "    if (strpos($txt,\
    \ ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        return explode(',', $txt);\n    } else {\n      \
    \  $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n            if\
    \ (ord($txt[$i]) % 2 != 0) {\n                $count++;\n            }\n     \
    \   }\n        return $count;\n    }\n}\n\n/* Given an array of integers, return\
    \ the sum of all the integers that have an even index, multiplied by the integer\
    \ at\nthe last index. If the array is empty, you should return 0.\nExamples\n\
    >>> even_last([0, 1, 2, 3, 4, 5])\n30\n>>> even_last([1, 3, 5])\n30\n>>> even_last([6])\n\
    36\n>>> even_last([])\n0*/", "    $words = explode(' ', $txt);\n    if (count($words)\
    \ > 1) {\n        return $words;\n    }\n    $words = explode(',', $txt);\n  \
    \  if (count($words) > 1) {\n        return $words;\n    }\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 ==\
    \ 1) {\n            $count++;\n        }\n    }\n    return $count;\n}\n\necho\
    \ '<pre>';\nprint_r(split_words('Hello world!'));\nprint_r(split_words('Hello,world!'));\n\
    print_r(split_words('abcdef'));\necho '</pre>';", "    $txt = str_replace(' ',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt", "    $txt\
    \ = str_replace(',', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n \
    \   $txt = trim($txt);\n    $txt = explode(' ', $txt);\n    if (count($txt) >\
    \ 1) {\n        return $txt;\n    } else {\n        $count = 0;\n        for ($i\
    \ = 0; $i < strlen($txt[0]); $i++) {\n            if (ord($txt[0][$i]) % 2 !=\
    \ 0) {\n                $count++;\n            }\n        }\n        return $count;\n\
    \    }\n}\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/",
  "    $words = preg_split('/\\s+/', $txt);\n    if (count($words) > 1) {\n      \
    \  return $words;\n    }\n    $words = preg_split('/,/', $txt);\n    if (count($words)\
    \ > 1) {\n        return $words;\n    }\n    $count = 0;\n    for ($i = 0; $i\
    \ < strlen($txt); $i++) {\n        if (ord($txt[$i]) % 2 == 1) {\n           \
    \ $count++;\n        }\n    }\n    return $count;\n}\n\necho \"<pre>\";\nprint_r(split_words(\"\
    Hello world!\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(split_words(\"Hello,world!\"\
    ));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(split_words(\"abcdef\"));\necho\
    \ \"</pre>\";", "    $txt = trim($txt);\n    if (strpos($txt, ' ') !== false)\
    \ {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return an array of integers\
    \ where each integer is multiplied by 2.\nExamples\n>>> double_array(array(1,\
    \ 2, 3))\narray(2, 4, 6)\n>>> double_array(array(0, 0, 0))\narray(0, 0, 0)\n>>>\
    \ double_array(array(-1, -2, -3))\narray(-2, -4, -6)*/", "    $arr = array();\n\
    \    if (strpos($txt, ' ') !== false) {\n        $arr = explode(' ', $txt);\n\
    \    } elseif (strpos($txt, ',') !== false) {\n        $arr = explode(',', $txt);\n\
    \    } else {\n        $arr = strlen(preg_replace('/[^a-z]/', '', $txt));\n  \
    \  }\n    return $arr;\n}\n\n/* Given an array of strings, return an array of\
    \ strings with the first letter of each string capitalized.\nExamples\n>>> capitalize_first_letter(array(\"\
    hello\", \"world\"))\narray(\"Hello\", \"World\")\n>>> capitalize_first_letter(array(\"\
    HELLO\", \"WORLD\"))\narray(\"HELLO\", \"WORLD\")\n>>> capitalize_first_letter(array(\"\
    hello\", \"WORLD\"))\narray(\"Hello\", \"WORLD\")*/", "    $arr = [];\n    if\
    \ (strpos($txt, ' ') !== false) {\n        $arr = explode(' ', $txt);\n    } elseif\
    \ (strpos($txt, ',') !== false) {\n        $arr = explode(',', $txt);\n    } else\
    \ {\n        $arr = strlen(preg_replace('/[^a-z]/', '', $txt));\n    }\n    return\
    \ $arr;\n}\n\n/* Given an array of strings, return an array of strings with the\
    \ first letter of each string capitalized.\nExamples\n>>> capitalize_first_letter(array(\"\
    hello\", \"world\"))\narray(\"Hello\", \"World\")\n>>> capitalize_first_letter(array(\"\
    HELLO\", \"WORLD\"))\narray(\"HELLO\", \"WORLD\")\n>>> capitalize_first_letter(array(\"\
    hello\", \"WORLD\"))\narray(\"Hello\", \"WORLD\")\n>>> capitalize_first_letter(array(\"\
    HELLO\", \"world\"))\narray(\"HELLO\", \"World\")*/", "    $txt = trim($txt);\n\
    \    $txt = preg_replace('/\\s+/', ' ', $txt);\n    $txt = preg_replace('/\\s*,\\\
    s*/', ',', $txt);\n    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 != 0) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\n/* Given an array\
    \ of integers, return the sum of the integers that have odd order in the array,\n\
    ord(array[0]) = 0, ord(array[1]) = 1, ... ord(array[n]) = n\nExamples\n>>> sum_odd_order([1,\
    \ 2, 3, 4, 5])\n9\n>>> sum_odd_order([1, 2, 3, 4, 5, 6])\n9\n>>> sum_odd_order([1,\
    \ 2, 3, 4, 5, 6, 7])\n16*/", "    if (strpos($txt, ' ') !== false) {\n       \
    \ return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n \
    \       return explode(',', $txt);\n    } else {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2\
    \ != 0) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of numbers, return the sum of all numbers\
    \ in the array.\nExamples\n>>> sum_array(array(1, 2, 3))\n6\n>>> sum_array(array(1,\
    \ 2, 3, 4, 5))\n15*/", "    $txt = trim($txt);\n    $arr = array();\n    if (strpos($txt,\
    \ ' ') !== false) {\n        $arr = explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        $arr = explode(',', $txt);\n    } else {\n      \
    \  $arr = strlen($txt);\n    }\n    return $arr;\n}\n\n/* Given an array of integers,\
    \ return the number of integers that are odd and even.\nExamples\n>>> count_odd_even(array(1,\
    \ 2, 3, 4, 5, 6))\narray(3, 3)\n>>> count_odd_even(array(1, 2, 3, 4, 5, 6, 7))\n\
    array(4, 3)\n>>> count_odd_even(array(1, 2, 3, 4, 5, 6, 7, 8))\narray(4, 4)*/",
  "    $arr = array();\n    if (strpos($txt, ' ') !== false) {\n        $arr = explode('\
    \ ', $txt);\n    } else if (strpos($txt, ',') !== false) {\n        $arr = explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if ($i % 2 == 0) {\n                $count++;\n       \
    \     }\n        }\n        $arr[] = $count;\n    }\n    return $arr;\n}\n\n/*\
    \ Given an array of integers, return the sum of the integers that are in odd positions\
    \ in the array.\nExamples\n>>> sum_odd_positions(array(1, 2, 3, 4, 5))\n9\n>>>\
    \ sum_odd_positions(array(1, 2, 3, 4, 5, 6))\n9\n>>> sum_odd_positions(array(1,\
    \ 2, 3, 4, 5, 6, 7))\n16\n>>> sum_odd_positions(array(1, 2, 3, 4, 5, 6, 7, 8))\n\
    16\n>>> sum_odd_positions(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n25\n>>> sum_odd_positions(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n25\n*/", "    if (strpos($txt, ' ') !== false)\
    \ {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return the sum of the integers\
    \ that are divisible by 3 or 5, but not both.\nExamples\n>>> sum_divisible_by_3_or_5([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n33\n>>> sum_divisible_by_3_or_5([-5, -4, -3, -2,\
    \ -1, 0, 1, 2, 3, 4, 5])\n8\n>>> sum_divisible_by_3_or_5([])\n0*/", "    $txt\
    \ = trim($txt);\n    $txt = str_replace(',', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_replace('\
    \  ', ' ', $txt);\n    $txt = str_replace('  ', ' ', $txt);\n    $txt = str_",
  "    $txt = trim($txt);\n    if (strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return\
    \ explode(',', $txt);\n    } else {\n        $count = 0;\n        for ($i = 0;\
    \ $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n    \
    \            $count++;\n            }\n        }\n        return $count;\n   \
    \ }\n}\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/",
  "    if(strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n   \
    \ } elseif(strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n\
    \    } else {\n        $count = 0;\n        for($i = 0; $i < strlen($txt); $i++)\
    \ {\n            if(ord($txt[$i]) % 2 != 0) {\n                $count++;\n   \
    \         }\n        }\n        return $count;\n    }\n}\n\n/* Given an array\
    \ of integers, return an array of integers with the same values, but in reverse\
    \ order.\nExamples\n>>> reverse_array(array(1, 2, 3))\narray(3, 2, 1)\n>>> reverse_array(array(1,\
    \ 2, 3, 4, 5))\narray(5, 4, 3, 2, 1)\n>>> reverse_array(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10))\narray(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)*/", "    $txt = trim($txt);\n\
    \    if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n\
    \    } elseif (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n\
    \    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++)\
    \ {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n  \
    \          }\n        }\n        return $count;\n    }\n}\n\n/* Given a string\
    \ of words, return an array of words split on whitespace, if no whitespaces exists\
    \ in the text you\nshould split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\nalphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    $txt = trim($txt);\n  \
    \  if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n  \
    \  }\n    if (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < strlen($txt); $i++) {\n       \
    \ if (ord($txt[$i]) % 2 != 0) {\n            $count++;\n        }\n    }\n   \
    \ return $count;\n}\n\n/* Given a string of words, return an array of words split\
    \ on whitespace, if no whitespaces exists in the text you\nshould split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    Examples\n>>> split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>>\
    \ split_words(\"Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    abcdef\")\n3*/", "    $txt = trim($txt);\n    if (strpos($txt, ' ') !== false)\
    \ {\n        return explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false)\
    \ {\n        return explode(',', $txt);\n    } else {\n        $count = 0;\n \
    \       for ($i = 0; $i < strlen($txt); $i++) {\n            if (ord($txt[$i])\
    \ % 2 == 1) {\n                $count++;\n            }\n        }\n        return\
    \ $count;\n    }\n}\n\n/* Given an array of integers, return an array of integers\
    \ where each integer is multiplied by 2.\nExamples\n>>> double_array(array(1,\
    \ 2, 3))\narray(2, 4, 6)\n>>> double_array(array(0, 0, 0))\narray(0, 0, 0)\n>>>\
    \ double_array(array(-1, -2, -3))\narray(-2, -4, -6)*/", "    $txt = trim($txt);\n\
    \    if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n\
    \    } elseif (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n\
    \    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++)\
    \ {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n  \
    \          }\n        }\n        return $count;\n    }\n}\n\n/* Given an array\
    \ of integers, return the sum of all integers that have an odd index.\nExamples\n\
    >>> sum_odd_indexed([10, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n39\n>>> sum_odd_indexed([0,\
    \ 1, 2, 3, 4, 5])\n9\n>>> sum_odd_indexed([1, 2, 3, 4, 5])\n9\n>>> sum_odd_indexed([10,\
    \ -1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n39*/", "    $txt = str_replace(',', ' ', $txt);\n\
    \    $txt = str_replace('!', ' ', $txt);\n    $txt = str_replace('.', ' ', $txt);\n\
    \    $txt = str_replace('?', ' ', $txt);\n    $txt = str_replace(';', ' ', $txt);\n\
    \    $txt = str_replace(':', ' ', $txt);\n    $txt = str_replace('-', ' ', $txt);\n\
    \    $txt = str_replace('(', ' ', $txt);\n    $txt = str_replace(')', ' ', $txt);\n\
    \    $txt = str_replace('\"', ' ', $txt);\n    $txt = str_replace(\"'\", ' ',\
    \ $txt);\n    $txt = str_replace('[', ' ', $txt);\n    $txt = str_replace(']',\
    \ ' ', $txt);\n    $txt = str_replace('{', ' ', $txt);\n    $txt = str_replace('}',\
    \ ' ', $txt);\n    $txt = str_replace('/', ' ', $txt);\n    $txt = str_replace('\\\
    \\', ' ', $txt);\n    $txt = str_replace('*', ' ', $txt);\n    $txt = str_replace('+',\
    \ ' ', $txt);\n    $txt = str_replace('=', ' ', $txt);\n    $txt = str_replace('%',\
    \ ' ', $txt);\n    $txt = str_replace('$', ' ', $txt);\n    $txt = str_replace('#',\
    \ ' ', $txt);\n    $txt = str_replace('@', ' ', $txt);\n    $txt = str_replace('&',\
    \ ' ', $txt);\n    $txt = str_replace('^', ' ', $txt);\n    $txt = str_replace('~',\
    \ ' ', $txt);\n    $txt = str_replace('`', ' ', $txt);\n    $txt = str_replace('|',\
    \ ' ', $txt);\n    $txt = str_replace('<', ' ', $txt);\n    $txt = str_replace('>',\
    \ ' ', $txt);\n    $txt = str_replace('_', ' ', $txt);", "    $arr = array();\n\
    \    if (strpos($txt, ' ') !== false) {\n        $arr = explode(' ', $txt);\n\
    \    } else if (strpos($txt, ',') !== false) {\n        $arr = explode(',', $txt);\n\
    \    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++)\
    \ {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n  \
    \          }\n        }\n        $arr = $count;\n    }\n    return $arr;\n}\n\n\
    /* Given an array of integers, return the sum of the integers that are in the\
    \ range of the first and last elements of the\narray. If the array is empty, return\
    \ 0.\nExamples\n>>> sum_range([1, 2, 3, 4, 5])\n9\n>>> sum_range([-2, -1, 0, 1,\
    \ 2])\n0\n>>> sum_range([])\n0*/", "    $txt = trim($txt);\n    $txt = str_replace('\
    \ ', ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,', ',', $txt);\n    $txt = str_replace(',,',\
    \ ',', $txt);\n    $txt = str_replace(',,',", "    $txt = trim($txt);\n    if\
    \ (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n    } elseif\
    \ (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n    } else\
    \ {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++) {\n  \
    \          if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n        \
    \    }\n        }\n        return $count;\n    }\n}\n\n/* Given a string of words,\
    \ return an array of words split on whitespace, if no whitespaces exists in the\
    \ text you\nshould split on commas ',' if no commas exists you should return the\
    \ number of lower-case letters with odd order in the\nalphabet, ord('a') = 0,\
    \ ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    $arr = [];\n    if (strpos($txt,\
    \ ' ') !== false) {\n        $arr = explode(' ', $txt);\n    } elseif (strpos($txt,\
    \ ',') !== false) {\n        $arr = explode(',', $txt);\n    } else {\n      \
    \  $arr = strlen(preg_replace('/[^a-z]/', '', $txt));\n    }\n    return $arr;\n\
    }\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/",
  "    $txt = str_replace(',', ' ', $txt);\n    $txt = str_replace('.', ' ', $txt);\n\
    \    $txt = str_replace('!', ' ', $txt);\n    $txt = str_replace('?', ' ', $txt);\n\
    \    $txt = str_replace(';', ' ', $txt);\n    $txt = str_replace(':', ' ', $txt);\n\
    \    $txt = str_replace('-', ' ', $txt);\n    $txt = str_replace('_', ' ', $txt);\n\
    \    $txt = str_replace('(', ' ', $txt);\n    $txt = str_replace(')', ' ', $txt);\n\
    \    $txt = str_replace('[', ' ', $txt);\n    $txt = str_replace(']', ' ', $txt);\n\
    \    $txt = str_replace('{', ' ', $txt);\n    $txt = str_replace('}', ' ', $txt);\n\
    \    $txt = str_replace('\"', ' ', $txt);\n    $txt = str_replace(\"'\", ' ',\
    \ $txt);\n    $txt = str_replace('/', ' ', $txt);\n    $txt = str_replace('\\\\\
    ', ' ', $txt);\n    $txt = str_replace('+', ' ', $txt);\n    $txt = str_replace('*',\
    \ ' ', $txt);\n    $txt = str_replace('&', ' ', $txt);\n    $txt = str_replace('^',\
    \ ' ', $txt);\n    $txt = str_replace('%', ' ', $txt);\n    $txt = str_replace('$',\
    \ ' ', $txt);\n    $txt = str_replace('#', ' ', $txt);\n    $txt = str_replace('@',\
    \ ' ', $txt);\n    $txt = str_replace('~', ' ', $txt);\n    $txt = str_replace('`',\
    \ ' ', $txt);\n    $txt = str_replace('=', ' ', $txt);\n    $txt = str_replace('<',\
    \ ' ', $txt);\n    $txt = str_replace('>', ' ', $txt);\n    $txt = str_replace('|',\
    \ ' ', $txt);", "    $txt = trim($txt);\n    $txt = preg_replace('/\\s+/', ' ',\
    \ $txt);\n    $txt = preg_replace('/\\s*,\\s*/', ',', $txt);\n    $txt = preg_replace('/\\\
    s*\\.\\s*/', '.', $txt);\n    $txt = preg_replace('/\\s*\\?\\s*/', '?', $txt);\n\
    \    $txt = preg_replace('/\\s*\\!\\s*/', '!', $txt);\n    $txt = preg_replace('/\\\
    s*\\:\\s*/', ':', $txt);\n    $txt = preg_replace('/\\s*\\;\\s*/', ';', $txt);\n\
    \    $txt = preg_replace('/\\s*\\(\\s*/', '(', $txt);\n    $txt = preg_replace('/\\\
    s*\\)\\s*/', ')', $txt);\n    $txt = preg_replace('/\\s*\\{\\s*/', '{', $txt);\n\
    \    $txt = preg_replace('/\\s*\\}\\s*/', '}', $txt);\n    $txt = preg_replace('/\\\
    s*\\[\\s*/', '[', $txt);\n    $txt = preg_replace('/\\s*\\]\\s*/', ']', $txt);\n\
    \    $txt = preg_replace('/\\s*\\=\\s*/', '=', $txt);\n    $txt = preg_replace('/\\\
    s*\\+\\s*/', '+', $txt);\n    $txt = preg_replace('/\\s*\\-\\s*/', '-', $txt);\n\
    \    $txt = preg_replace('/\\s*\\*\\s*/', '*', $txt);\n    $txt = preg_replace('/\\\
    s*\\/\\s*/', '/', $txt);\n    $txt = preg_replace('/\\s*\\%\\s*/', '%', $txt);\n\
    \    $txt = preg_replace('/\\s*\\&\\s*/', '&', $txt);\n   ", "    $txt = str_replace(\"\
    ,\", \" \", $txt);\n    $txt = str_replace(\"  \", \" \", $txt);\n    $txt = trim($txt);\n\
    \    $txt = explode(\" \", $txt);\n    if (count($txt) > 1) {\n        return\
    \ $txt;\n    } else {\n        $txt = str_split($txt[0]);\n        $count = 0;\n\
    \        foreach ($txt as $key => $value) {\n            if (ord($value) % 2 !=\
    \ 0) {\n                $count++;\n            }\n        }\n        return $count;\n\
    \    }\n}\n\n/* Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\nshould split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\nalphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>>\
    \ split_words(\"Hello world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"\
    Hello,world!\")\narray(\"Hello\", \"world!\")\n>>> split_words(\"abcdef\")\n3*/",
  "    $txt = trim($txt);\n    if (strpos($txt, ' ') !== false) {\n        return\
    \ explode(' ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return\
    \ explode(',', $txt);\n    } else {\n        $count = 0;\n        for ($i = 0;\
    \ $i < strlen($txt); $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n    \
    \            $count++;\n            }\n        }\n        return $count;\n   \
    \ }\n}\n\n/* Given a string of words, return the length of the shortest word(s).\n\
    String will never be empty and you do not need to account for different data types.\n\
    Examples\n>>> find_short(\"bitcoin take over the world maybe who knows perhaps\"\
    )\n3\n>>> find_short(\"turns out random test cases are easier than writing out\
    \ basic ones\")\n3\n>>> find_short(\"lets talk about javascript the best language\"\
    )\n3\n>>> find_short(\"i want to travel the world writing code one day\")\n1\n\
    >>> find_short(\"Lets all go on holiday somewhere very cold\")\n2*/", "    $txt\
    \ = trim($txt);\n    if (strpos($txt, ' ') !== false) {\n        return explode('\
    \ ', $txt);\n    } elseif (strpos($txt, ',') !== false) {\n        return explode(',',\
    \ $txt);\n    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt);\
    \ $i++) {\n            if (ord($txt[$i]) % 2 == 1) {\n                $count++;\n\
    \            }\n        }\n        return $count;\n    }\n}\n\n/* Given a string\
    \ of words, return an array of words split on whitespace, if no whitespaces exists\
    \ in the text you\nshould split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\nalphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/", "    $txt = trim($txt);\n  \
    \  if (strpos($txt, ' ') !== false) {\n        return explode(' ', $txt);\n  \
    \  } elseif (strpos($txt, ',') !== false) {\n        return explode(',', $txt);\n\
    \    } else {\n        $count = 0;\n        for ($i = 0; $i < strlen($txt); $i++)\
    \ {\n            if (ord($txt[$i]) % 2 != 0) {\n                $count++;\n  \
    \          }\n        }\n        return $count;\n    }\n}\n\n/* Given a string\
    \ of words, return an array of words split on whitespace, if no whitespaces exists\
    \ in the text you\nshould split on commas ',' if no commas exists you should return\
    \ the number of lower-case letters with odd order in the\nalphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\narray(\"Hello\", \"world!\")\n>>> split_words(\"Hello,world!\")\narray(\"Hello\"\
    , \"world!\")\n>>> split_words(\"abcdef\")\n3*/"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
