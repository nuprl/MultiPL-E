language: php
name: HumanEval_152_compare
results:
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n  $result = [];\n  for\
    \ ($i = 0; $i < count($game); $i++) {\n    if ($game[$i] == $guess[$i]) {\n  \
    \    $result[] = 0;\n    } else {\n      $result[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n  }\n  return $result;\n}\n\n/*\nGiven a string, return the sum of the\
    \ numbers appearing in the string, ignoring all other characters. \nA number is\
    \ a series of 1 or more digit chars in a row. (Note: Character.isDigit(char) tests\
    \ if a char is one of the chars '0', '1', .. '9'. \nInteger.parseInt(string) converts\
    \ a string to an int.)\n\nsumNumbers(\"abc123xyz\") \u2192 123\nsumNumbers(\"\
    aa11b33\") \u2192 44\nsumNumbers(\"7 11\") \u2192 18\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ a list of strings and a list of integers.\nYour task is to return a list of\
    \ strings that are in the first list, but not in the second list.\nexample:\n\
    >>> remove_duplicates(array(\"a\", \"b\", \"c\", \"d\", \"e\"), array(1, 2, 3,\
    \ 4, 5))\narray(\"a\", \"b\", \"c\", \"d\", \"e\")\n>>> remove_duplicates(array(\"\
    a\", \"b\", \"c\", \"d\", \"e\"), array(1, 2, 3, 4, 5, 1, 2, 3, 4, 5))\narray()\n\
    */\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers.\nReturn the\
    \ smallest positive integer that is not present in the array.\nThe array may contain\
    \ duplicate entries.\nYour solution should be efficient with respect to time and\
    \ space complexity.\nFor example, given [3, 4, -1, 1], return 2.\nGiven [1, 2,\
    \ 0], return 3.\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers and\
    \ a target value. Write a function that returns true if there is a subset of the\
    \ array that sums up to the target and returns false otherwise. A subset can be\
    \ any size and the elements do not have to appear consecutively in the array.\n\
    Assume that there will be only one valid solution.\n>>> subset_sum([3, 7, 4, 2],\
    \ 5)\nTrue\n>>> subset_sum([3, 34, 4, 12, 5, 12], 32)\nTrue\n>>> subset_sum([8,\
    \ 2, 4, 12], 13)\nFalse\n>>> subset_sum([8, -2, 1, -3], 6)\nTrue\n*/\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nWrite a function that returns the number\
    \ of times that the string \"code\" appears anywhere in the given string, except\
    \ we'll accept any letter for the 'd', so \"cope\" and \"cooe\" count.\n\ncount_code('aaacodebbb')\
    \ \u2192 1\ncount_code('codexxcode') \u2192 2\ncount_code('cozexxcope') \u2192\
    \ 2\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2,\
    \ 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers between\
    \ 0-9. Find the average of these numbers and return it as a floored whole number\
    \ (ie: no decimal places) written out as a string. Eg:\n\n\"zero nine five two\"\
    \ -> \"four\"\n\nIf the string is empty or includes a number greater than 9, return\
    \ \"n/a\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4,\
    \ 2, -2];\n\necho \"<pre>\";\nprint_r(compare($game, $guess));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n\
    \    [4] => 3\n    [5] => 3\n)\n</pre>"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ foreach ($game as $key => $value) {\n        $result[] = abs($value - $guess[$key]);\n\
    \    }\n    return $result;\n}\n\n/*\n * Given a string, return the sum of the\
    \ numbers appearing in the string, ignoring all other characters.\n * A number\
    \ is a series of 1 or more digit chars in a row.\n * (Note: Character.isDigit(char)\
    \ tests if a char is one of the chars '0', '1', .. '9'.\n * Integer.parseInt(string)\
    \ converts a string to an int.)\n *\n * sumNumbers(\"abc123xyz\") \u2192 123\n\
    \ * sumNumbers(\"aa11b33\") \u2192 44\n * sumNumbers(\"7 11\") \u2192 18\n */\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nGiven a string,\
    \ return the sum of the numbers appearing in the string, ignoring all other characters.\n\
    A number is a series of 1 or more digit chars in a row. (Note: Character.isDigit(char)\
    \ tests if a char is one of the chars '0', '1', .. '9'. Integer.parseInt(string)\
    \ converts a string to an int.)\n\nsumNumbers(\"abc123xyz\") \u2192 123\nsumNumbers(\"\
    aa11b33\") \u2192 44\nsumNumbers(\"7 11\") \u2192 18\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given an\
    \ array of integers, return the sum of the two largest values.\n * For example:\n\
    \ * >>> sum_two_largest(array(1, 2, 3, 4, 5))\n * 9\n * >>> sum_two_largest(array(5,\
    \ 5, 5, 5, 5))\n * 10\n * >>> sum_two_largest(array(10, 10, 9, 9, 8))\n * 19\n\
    \ */\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. Your task\
    \ is to sort odd numbers within the array in ascending order,\nand even numbers\
    \ in descending order. Note that zero is an even number. If you have an empty\
    \ array, you need to return it.\nFor example:\n>>> sortArray(array(5, 3, 2, 8,\
    \ 1, 4))\narray(1, 3, 8, 4, 5, 2)\n>>> sortArray(array())\narray()\n*/\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. On\
    \ each move you are allowed to increase exactly one of its element by one. \n\
    Find the minimal number of moves required to obtain a strictly increasing sequence\
    \ from the input.\nexample:\n>>> array(1, 1, 1)\n3\n>>> array(2, 1, 10, 1)\n12\n\
    >>> array(2, 3, 3, 5, 5, 5, 4, 12, 12, 10, 15)\n13\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1,\
    \ 2, 3, 4, 2, -2];\n\n$game2 = [0, 5, 0, 0, 0, 4];\n$guess2 = [4, 1, 1, 0, 0,\
    \ -2];\n\nprint_r(compare($game, $guess));\nprint_r(compare($game2, $guess2));\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 3\n    [5] => 3\n)\nArray\n(\n    [0] => 4\n    [1] => 4\n    [2] => 1\n\
    \    [3] => 0\n    [4] => 0\n    [5] => 6\n)\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i] -\
    \ $guess[$i]);\n    }\n    return $result;\n}\n\n/*\n * You are given a string\
    \ of numbers.\n * You have to find the sum of all the numbers present in the string.\n\
    \ * example:\n * >>> sum_numbers('1abc33xyz22')\n * 56\n * >>> sum_numbers('abc')\n\
    \ * 0\n * >>> sum_numbers('1abc2xyz3')\n * 6\n * >>> sum_numbers('1abc2xyz3abc')\n\
    \ * 6\n * >>> sum_numbers('')\n * 0\n */\nfunction candidate(...$args) {\n   \
    \ return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nGiven an array of integers, return the\
    \ sum of the two largest ones.\n>>> sum_of_two_largest(array(1, 2, 3, 4, 5))\n\
    9\n>>> sum_of_two_largest(array(1, 2, 3, 4, 5, 6))\n11\n>>> sum_of_two_largest(array(1,\
    \ 2, 3, 4, 5, 6, 7))\n13\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given an\
    \ array of integers, return a new array with each value doubled.\n * For example:\n\
    \ * [1, 2, 3] --> [2, 4, 6]\n * For the beginner, try to use the map method -\
    \ it comes in very handy quite a lot so is a good one to know.\n */\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers between\
    \ 0-9. Find the average of these numbers and return it as a floored whole number\
    \ (ie: no decimal places) written out as a string. Eg:\n\n\"zero nine five two\"\
    \ -> \"four\"\n\nIf the string is empty or includes a number greater than 9, return\
    \ \"n/a\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ an array of integers. On each move you are allowed to increase exactly one of\
    \ its element by one. \nFind the minimal number of moves required to obtain a\
    \ strictly increasing sequence from the input.\nExample\nFor inputArray = [1,\
    \ 1, 1], the output should be\narrayChange(inputArray) = 3.\nInput/Output\n[execution\
    \ time limit] 4 seconds (php)\n[input] array.integer inputArray\nGuaranteed constraints:\n\
    3 \u2264 inputArray.length \u2264 105,\n-105 \u2264 inputArray[i] \u2264 105.\n\
    [output] integer\nThe minimal number of moves needed to obtain a strictly increasing\
    \ sequence from inputArray.\nIt's guaranteed that for the given test cases the\
    \ answer always fits signed 32-bit integer type.\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers between 0-9.\
    \ Find the average of these numbers and return it as a floored whole number (ie:\
    \ no decimal places) written out as a string. Eg:\n\n\"zero nine five two\" ->\
    \ \"four\"\n\nIf the string is empty or includes a number greater than 9, return\
    \ \"n/a\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given an\
    \ array of integers, return the sum of the two largest values.\n * For example:\n\
    \ * >>> sum_two_largest(array(1, 2, 3, 4, 5))\n * 9\n * >>> sum_two_largest(array(5,\
    \ 5, 5, 5, 5))\n * 10\n * >>> sum_two_largest(array(10, 10, 9, 9, 8))\n * 19\n\
    \ * >>> sum_two_largest(array(2, 2, 2, 2, 2))\n * 4\n */\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers and\
    \ letters. \nYou need to find the number of occurrences of each letter in the\
    \ string.\nexample:\n>>> count_letters(\"abcdefghijklmnopqrstuvwxyz\")\narray('a'\
    \ => 1, 'b' => 1, 'c' => 1, 'd' => 1, 'e' => 1, 'f' => 1, 'g' => 1, 'h' => 1,\
    \ 'i' => 1, 'j' => 1, 'k' => 1, 'l' => 1, 'm' => 1, 'n' => 1, 'o' => 1, 'p' =>\
    \ 1, 'q' => 1, 'r' => 1, 's' => 1, 't' => 1, 'u' => 1, 'v' => 1, 'w' => 1, 'x'\
    \ => 1, 'y' => 1, 'z' => 1)\n>>> count_letters(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"\
    )\narray('a' => 2, 'b' => 2, 'c' => 2, 'd' => 2, 'e' => 2, 'f' => 2, 'g' => 2,\
    \ 'h' => 2, 'i' => 2, 'j' => 2, 'k' => 2, 'l' => 2, 'm' => 2, 'n' => 2, 'o' =>\
    \ 2, 'p' => 2, 'q' => 2, 'r' => 2, 's' => 2, 't' => 2, 'u' => 2, 'v' => 2, 'w'\
    \ => 2, 'x' => 2, 'y' => 2, 'z' => 2)\n>>> count_letters(\"abc\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmpyqvr71my.php on
    line 26

    '
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] === $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ an array of integers and a target number. Write a function that returns true\
    \ if there is a subset of the array that sums up to the target and returns false\
    \ otherwise. A subset can be any size and the elements do not have to appear consecutively\
    \ in the array.\nAssume that there will be only one valid solution.\nExamples:\n\
    >>> target_sum([3, 7, 4, 2], 5)\nTrue\n>>> target_sum([3, 34, 4, 12, 5, 12], 32)\n\
    True\n>>> target_sum([8, 2, 4, 12, 3], 1)\nFalse\n>>> target_sum([12, 3, 1, 2,\
    \ 8, 7], 12)\nTrue\n>>> target_sum([5, 3, 1, 2, 8, 7], 14)\nTrue\n*/\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given an\
    \ array of integers, return a new array with each value doubled.\n * For example:\n\
    \ * [1, 2, 3] --> [2, 4, 6]\n * For the beginner, try to use the map method -\
    \ it comes in very handy quite a lot so is a good one to know.\n */\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given a string of lowercase letters.\
    \ Your task is to figure out the index of the character on whose removal it will\
    \ make the string a palindrome. There will always be a valid solution.\nIn case\
    \ the string is already a palindrome, then -1 is also a valid answer along with\
    \ possible indices.\nInput format :\nString S\nOutput format :\nString\nConstraints\
    \ :\n1 <= |S| <= 10^5\nwhere |S| represents the length of string, S.\nSample Input\
    \ 1 :\naaab\nSample Output 1 :\n3\nSample Input 2 :\nbaa\nSample Output 2 :\n\
    0\nSample Input 3 :\naabaa\nSample Output 3 :\n-1\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of words separated\
    \ by spaces.\nYou need to reverse the order of words in the string.\nexample:\n\
    >>> reverse(\"I am a student\")\n\"student a am I\"\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers between 0-9.\
    \ Find the average of these numbers and return it as a floored whole number (ie:\
    \ no decimal places) written out as a string. Eg:\n>>> averageString('zero nine\
    \ five two')\n'four'\n>>> averageString('four six two three')\n'three'\n>>> averageString('one\
    \ two three four five')\n'three'\n>>> averageString('five four')\n'four'\n>>>\
    \ averageString('zero zero zero zero zero')\n'zero'\n>>> averageString('one one\
    \ eight one')\n'two'\nIf the string is empty or includes a number greater than\
    \ 9, return 'n/a'\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given an\
    \ array of integers, return the sum of the integers after adding 1 to each.\n\
    \ * example:\n * >>> plusOneSum(array(1, 2, 3))\n * 14\n * >>> plusOneSum(array(1,\
    \ -2))\n * 0\n * >>> plusOneSum(array())\n * 0\n */\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. On each move\
    \ you are allowed to increase exactly one of its element by one. \nFind the minimal\
    \ number of moves required to obtain a strictly increasing sequence from the input.\n\
    example:\n>>> array(1, 1, 1)\n3\n>>> array(2, 1)\n1\n>>> array(1, 2, 3)\n0\n*/\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers.\nReturn the\
    \ length of the longest increasing subsequence (not necessarily contiguous) in\
    \ the array.\nExample:\n>>> longest_increasing_subsequence(array(0, 8, 4, 12,\
    \ 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15))\n6\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ a string of numbers between 0-9. Find the average of these numbers and return\
    \ it as a floored whole number (ie: no decimal places) written out as a string.\
    \ Eg:\n\n\"zero nine five two\" -> \"four\"\n\nIf the string is empty or includes\
    \ a number greater than 9, return \"n/a\"\n*/\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ foreach ($game as $key => $value) {\n        $result[] = abs($value - $guess[$key]);\n\
    \    }\n    return $result;\n}\n\n/*\nYou are given an array of integers and a\
    \ target number. Write a function that returns true if there is a subset of the\
    \ array that sums up to the target and returns false otherwise. A subset can be\
    \ any size and the elements do not have to appear consecutively in the array.\n\
    \nSubset sum problem:\n\nGiven a set of non-negative integers, and a value sum,\
    \ determine if there is a subset of the given set with sum equal to given sum.\n\
    \nExamples: set[] = {3, 34, 4, 12, 5, 2}, sum = 9\nOutput:  True  //There is a\
    \ subset (4, 5) with sum 9.\n\n>>> subsetSum(array(3, 34, 4, 12, 5, 2), 9)\ntrue\n\
    >>> subsetSum(array(3, 34, 4, 12, 5, 2), 30)\nfalse\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. On\
    \ each move you are allowed to increase exactly one of its element by one. \n\
    Find the minimal number of moves required to obtain a strictly increasing sequence\
    \ from the input.\nexample:\n>>> array(1, 1, 1)\n3\n>>> array(2, 1)\n1\n*/\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nWrite a function that takes a string and\
    \ returns the number of vowels in the string.\nYou may assume that all the letters\
    \ are lower cased. You can treat \"y\" as a consonant.\n>>> count_vowels(\"abcdefg\"\
    )\n2\n>>> count_vowels(\"ABCDEFG\")\n2\n>>> count_vowels(\"Github is the second\
    \ best thing that happend to programmers, after the keyboard!\")\n22\n>>> count_vowels(\"\
    How many vowels are there in this sentence?\")\n14\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4,\
    \ 2, -2];\nvar_dump(compare($game, $guess));\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(6) {\n  [0]=>\n  int(0)\n  [1]=>\n  int(0)\n  [2]=>\n  int(0)\n \
    \ [3]=>\n  int(0)\n  [4]=>\n  int(3)\n  [5]=>\n  int(3)\n}\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * You are given\
    \ a string of words separated by spaces.\n * The words contain only lowercase\
    \ letters.\n * If a word starts with a vowel (a, e, i, o, u), append \"ma\" to\
    \ the end of the word.\n * If a word starts with a consonant, remove the first\
    \ letter and append it to the end, then add \"ma\".\n * Add one letter 'a' to\
    \ the end of each word per its word index in the sentence, starting with 1.\n\
    \ * Return the final sentence representing the conversion from the input sentence.\n\
    \ * example:\n * >>> translate(\"I speak Goat Latin\")\n * \"Imaa peaksmaaa oatGmaaaa\
    \ atinLmaaaaa\"\n * >>> translate(\"The quick brown fox jumped over the lazy dog\"\
    )\n * \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa\
    \ azylmaaaaaaaaa ogdmaaaaaaaaaa\"\n */\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. Each\
    \ integer represents a jump of its value in the array. \nFor instance, the integer\
    \ 2 represents a jump of 2 indices forward in the array; the integer -3 represents\
    \ a jump of 3 indices backward in the array. \nIf a jump spills past the array's\
    \ bounds, it wraps over to the other side. \nFor instance, a jump of -1 at index\
    \ 0 brings us to the last index in the array. \nSimilarly, a jump of 1 at the\
    \ last index in the array brings us to index 0. \nWrite a function that returns\
    \ a boolean representing whether the jumps in the array form a single cycle. \n\
    A single cycle occurs if, starting at any index in the array and following the\
    \ jumps, every element in the array is visited exactly once before landing back\
    \ on the starting index.\nexample:\n>>> hasSingleCycle(array(2, 3, 1, -4, -4,\
    \ 2))\ntrue\n>>> hasSingleCycle(array(1, 1, 1, 1, 2))\nfalse\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\nprint_r(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]));\nprint_r(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]));\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 3\n    [5] => 3\n)\nArray\n(\n    [0] => 4\n    [1] => 4\n    [2] => 1\n\
    \    [3] => 0\n    [4] => 0\n    [5] => 6\n)\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given a string,\
    \ return the sum of the numbers appearing in the string, ignoring all other characters.\
    \ \n * A number is a series of 1 or more digit chars in a row. (Note: Character.isDigit(char)\
    \ tests if a char is one of the chars '0', '1', .. '9'. \n * Integer.parseInt(string)\
    \ converts a string to an int.)\n * \n * sumNumbers(\"abc123xyz\") \u2192 123\n\
    \ * sumNumbers(\"aa11b33\") \u2192 44\n * sumNumbers(\"7 11\") \u2192 18\n */\n\
    \nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given an\
    \ array of integers, return an array of the same size where the element at each\
    \ index is the product of all the elements in the original array except for the\
    \ element at that index.\n * For example, an input of [1, 2, 3, 4, 5] should return\
    \ [120, 60, 40, 30, 24].\n * You cannot use division in this problem.\n */\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. You should\
    \ find the sum of the integers with even indexes (0th, 2nd, 4th...).\nThen multiply\
    \ this summed number and the final element of the array together.\nDon't forget\
    \ that the first element has an index of 0.\nFor an empty array, the result will\
    \ always be 0 (zero).\nexample:\n>>> even_last(array(0, 1, 2, 3, 4, 5))\n30\n\
    >>> even_last(array(1, 3, 5))\n30\n>>> even_last(array(6))\n36\n>>> even_last(array())\n\
    0\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ a string of numbers.\nYou need to find the maximum value from the string,\n\
    you can add a + or * sign between any two numbers.\nReturn the maximum value that\
    \ you can get.\nFor instance, in the string \"01231\" you can create the expression\n\
    ((((0 + 1) + 2) * 3) + 1) = 10, which is the maximum value that you can get.\n\
    \n>>> max_value(\"01231\")\n10\n>>> max_value(\"891\")\n73\n>>> max_value(\"012312\"\
    )\n18\n>>> max_value(\"0000\")\n0\n>>> max_value(\"9001\")\n9\n>>> max_value(\"\
    99999\")\n405\n>>> max_value(\"913\")\n9\n>>> max_value(\"90000\")\n81\n>>> max_value(\"\
    9223372036854775807\")\n9223372036854775807\n>>> max_value(\"9223372036854775808\"\
    )\n9223372036854775808\n>>> max_value(\"9223372036854775809\")\n9223372036854775809\n\
    >>> max_value(\"9223372036854775810\")\n9223372036854775810\n>>> max_value(\"\
    9223372036854775811\")\n9223372036854775811\n>>> max_value(\"9223372036854775812\"\
    )\n9223372036854775812\n>>> max_value(\"9223372036854775813\")\n9223372036854775813\n\
    >>> max_value(\"9223372036854775814\")\n9223372036854775814\n>>> max_value(\"\
    9223372036854775815\")\n9223372036854775815\n>>> max_value\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmpelv4uoh2.php on
    line 26

    '
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n  $result = [];\n  for\
    \ ($i = 0; $i < count($game); $i++) {\n    if ($game[$i] == $guess[$i]) {\n  \
    \    $result[] = 0;\n    } else {\n      $result[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n  }\n  return $result;\n}\n\n/*\nGiven a string, return the sum of the\
    \ numbers appearing in the string, ignoring all other characters.\nA number is\
    \ a series of 1 or more digit chars in a row. (Note: Character.isDigit(char) tests\
    \ if a char is one of the chars '0', '1', .. '9'. Integer.parseInt(string) converts\
    \ a string to an int.)\n\nsumNumbers(\"abc123xyz\") \u2192 123\nsumNumbers(\"\
    aa11b33\") \u2192 44\nsumNumbers(\"7 11\") \u2192 18\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nA number is considered perfect if its\
    \ digits sum up to exactly 10.\nGiven a positive integer n, return the n-th perfect\
    \ number.\nFor example, given 1, you should return 19. Given 2, you should return\
    \ 28.\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2,\
    \ 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers between\
    \ 0-9. Find the average of these numbers and return it as a floored whole number\
    \ (ie: no decimal places) written out as a string. Eg:\n\n\"zero nine five two\"\
    \ -> \"four\"\n\nIf the string is empty or includes a number greater than 9, return\
    \ \"n/a\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] > $guess[$i]) {\n\t\t\t\
    $result[] = $game[$i] - $guess[$i];\n\t\t} elseif ($game[$i] < $guess[$i]) {\n\
    \t\t\t$result[] = $guess[$i] - $game[$i];\n\t\t} else {\n\t\t\t$result[] = 0;\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1,\
    \ 2, 3, 4, 2, -2];\n\nprint_r(compare($game, $guess));\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 3\n    [5] => 3\n)\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers. You must find\
    \ the sum of all the numbers in the string.\nexample:\n>>> sum_numbers('1 2 3\
    \ 4 5')\n15\n>>> sum_numbers('1 2 3 4 5 6 7 8 9 10')\n55\n>>> sum_numbers('1 2\
    \ 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20')\n210\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ a list of numbers, and a target number k. Return whether or not there are two\
    \ numbers in the list that add up to k.\nExample:\nGiven [4, 7, 1 , -3, 2] and\
    \ k = 5,\nreturn true since 4 + 1 = 5.\n*/\nfunction candidate(...$args) {\n \
    \   return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. On\
    \ each move you are allowed to increase exactly one of its element by one. \n\
    Find the minimal number of moves required to obtain a strictly increasing sequence\
    \ from the input.\nexample:\n>>> array(1, 1, 1)\n3\n>>> array(2, 1)\n1\n*/\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nGiven a string,\
    \ return a new string that has transformed based on the input:\nChange case of\
    \ every character, ie. lower case to upper case, upper case to lower case.\nReverse\
    \ the order of words from the input.\nFor example:\nstringTransformer('Example\
    \ Input')/string_transformer(\"Example Input\") (depending on the language you\
    \ are completing the Kata in) should return 'iNPUT eXAMPLE'\nYou may assume the\
    \ input only contain English alphabet and spaces.\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given a string of words separated by\
    \ spaces.\nThe string will always start with a word, and will always end with\
    \ a word.\nThere may be one or more words in the middle of the string.\nThere\
    \ may be one or more spaces between each word.\nThere may be one or more spaces\
    \ at the beginning and end of the string.\n\nYour task is to return an array of\
    \ the words in the string,\nin the same order as they appear in the string.\n\n\
    example:\n>>> words('The quick brown fox jumps over the lazy dog.')\narray('The',\
    \ 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog.')\n>>> words('The\
    \ quick brown fox jumps over the lazy dog')\narray('The', 'quick', 'brown', 'fox',\
    \ 'jumps', 'over', 'the', 'lazy', 'dog')\n>>> words('The quick brown fox jumps\
    \ over the lazy dog')\narray('The', 'quick', 'brown', 'fox', 'jumps', 'over',\
    \ 'the', 'lazy', 'dog')\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given an\
    \ array of integers, return indices of the two numbers such that they add up to\
    \ a specific target.\n * You may assume that each input would have exactly one\
    \ solution, and you may not use the same element twice.\n * Example:\n * Given\
    \ nums = [2, 7, 11, 15], target = 9,\n * Because nums[0] + nums[1] = 2 + 7 = 9,\n\
    \ * return [0, 1].\n */\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n  $result = [];\n  for\
    \ ($i = 0; $i < count($game); $i++) {\n    if ($game[$i] == $guess[$i]) {\n  \
    \    $result[] = 0;\n    } else {\n      $result[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n  }\n  return $result;\n}\n\n/*\nYou are given an array of integers. You\
    \ should find the sum of the integers with even indexes (0th, 2nd, 4th...).\n\
    Then multiply this summed number and the final element of the array together.\
    \ Don't forget that the first element has an index of 0.\nFor an empty array,\
    \ the result will always be 0 (zero).\nExample:\n>>> even_last(array(0, 1, 2,\
    \ 3, 4, 5))\n30\n>>> even_last(array(1, 3, 5))\n30\n>>> even_last(array(6))\n\
    36\n>>> even_last(array())\n0\n*/\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers between\
    \ 0-9. Find the average of these numbers and return it as a floored whole number\
    \ (ie: no decimal places) written out as a string. Eg:\n\n\"zero nine five two\"\
    \ -> \"four\"\n\nIf the string is empty or includes a number greater than 9, return\
    \ \"n/a\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tforeach\
    \ ($game as $key => $value) {\n\t\tif ($value == $guess[$key]) {\n\t\t\t$result[]\
    \ = 0;\n\t\t} else {\n\t\t\t$result[] = abs($value - $guess[$key]);\n\t\t}\n\t\
    }\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers between 0-9.\
    \ Find the average of these numbers and return it as a floored whole number (ie:\
    \ no decimal places) written out as a string. Eg:\n\"zero nine five two\" -> \"\
    four\"\nIf the string is empty or includes a number greater than 9, return \"\
    n/a\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2,\
    \ 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers between 0-9.\
    \ Find the average of these numbers and return it as a floored whole number (ie:\
    \ no decimal places) written out as a string. Eg:\n\n\"zero nine five two\" ->\
    \ \"four\"\n\nIf the string is empty or includes a number greater than 9, return\
    \ \"n/a\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given a string,\
    \ return a new string where the first and last chars have been exchanged.\n *\n\
    \ *\n * frontBack(\"code\") \u2192 \"eodc\"\n * frontBack(\"a\") \u2192 \"a\"\n\
    \ * frontBack(\"ab\") \u2192 \"ba\"\n */\nfunction candidate(...$args) {\n   \
    \ return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\nprint_r(compare([1, 2, 3, 4, 5, 1], [1, 2, 3,\
    \ 4, 2, -2]));\nprint_r(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]));\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 3\n    [5] => 3\n)\nArray\n(\n    [0] => 4\n    [1] => 4\n    [2] => 1\n\
    \    [3] => 0\n    [4] => 0\n    [5] => 6\n)\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n  $result = [];\n  for\
    \ ($i = 0; $i < count($game); $i++) {\n    if ($game[$i] == $guess[$i]) {\n  \
    \    $result[] = 0;\n    } else {\n      $result[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n  }\n  return $result;\n}\n\n/*\nYou are given an array of integers. On\
    \ each move you are allowed to increase exactly one of its element by one. \n\
    Find the minimal number of moves required to obtain a strictly increasing sequence\
    \ from the input.\nExample\nFor inputArray = [1, 1, 1], the output should be\n\
    arrayChange(inputArray) = 3.\nInput/Output\n[execution time limit] 4 seconds (php)\n\
    [input] array.integer inputArray\nGuaranteed constraints:\n3 \u2264 inputArray.length\
    \ \u2264 105,\n-105 \u2264 inputArray[i] \u2264 105.\n[output] integer\nThe minimal\
    \ number of moves needed to obtain a strictly increasing sequence from inputArray.\n\
    It's guaranteed that for the given test cases the answer always fits signed 32-bit\
    \ integer type.\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4,\
    \ 2, -2];\n$result = compare($game, $guess);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 3\n    [5] => 3\n)\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers.\nReturn the\
    \ difference between the largest and smallest values.\nexample:\n>>> difference(\"\
    1 2 3 4 5\")\n4\n>>> difference(\"1 2 -3 4 5\")\n8\n>>> difference(\"1 9 3 4 -5\"\
    )\n8\n>>> difference(\"1 2 3 4 -5\")\n10\n*/\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ an array of integers, which represents the number of candies that each child\
    \ has.\nYou are also given an integer, which represents the number of children\
    \ who have an extra candy.\nYour task is to return the maximum number of candies\
    \ that any child has.\nexample:\n>>> candies(array(2, 3, 5, 1, 3), 3)\n5\n>>>\
    \ candies(array(4, 2, 1, 1, 2), 2)\n4\n>>> candies(array(12, 1, 12), 10)\n12\n\
    */\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers and\
    \ a number. Write a function that moves all instances of that number in the array\
    \ to the end of the array and returns the array.\nThe function should perform\
    \ this in place (i.e., it should mutate the input array) and doesn't need to maintain\
    \ the order of the other integers.\nExample:\n>>> moveElementToEnd([2, 1, 2, 2,\
    \ 2, 3, 4, 2], 2)\n[1, 3, 4, 2, 2, 2, 2, 2]\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ foreach ($game as $key => $value) {\n        $result[] = abs($value - $guess[$key]);\n\
    \    }\n    return $result;\n}\n\n/*\nYou are given an array of integers. On each\
    \ move you are allowed to increase exactly one of its element by one. \nFind the\
    \ minimal number of moves required to obtain a strictly increasing sequence from\
    \ the input.\nExample\nFor inputArray = [1, 1, 1], the output should be\narrayChange(inputArray)\
    \ = 3.\nInput/Output\n[execution time limit] 4 seconds (php)\n[input] array.integer\
    \ inputArray\nGuaranteed constraints:\n3 \u2264 inputArray.length \u2264 105,\n\
    -105 \u2264 inputArray[i] \u2264 105.\n[output] integer\nThe minimal number of\
    \ moves needed to obtain a strictly increasing sequence from inputArray.\nIt's\
    \ guaranteed that for the given test cases the answer always fits signed 32-bit\
    \ integer type.\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tforeach\
    \ ($game as $key => $value) {\n\t\t$result[] = abs($value - $guess[$key]);\n\t\
    }\n\treturn $result;\n}\n\nprint_r(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]));\nprint_r(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]));\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 3\n    [5] => 3\n)\nArray\n(\n    [0] => 4\n    [1] => 4\n    [2] => 1\n\
    \    [3] => 0\n    [4] => 0\n    [5] => 6\n)\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ an array of integers. On each move you are allowed to increase exactly one of\
    \ its element by one. \nFind the minimal number of moves required to obtain a\
    \ strictly increasing sequence from the input.\nExample\nFor inputArray = [1,\
    \ 1, 1], the output should be\narrayChange(inputArray) = 3.\nInput/Output\n[execution\
    \ time limit] 4 seconds (php)\n[input] array.integer inputArray\nGuaranteed constraints:\n\
    3 \u2264 inputArray.length \u2264 105,\n-105 \u2264 inputArray[i] \u2264 105.\n\
    [output] integer\nThe minimal number of moves needed to obtain a strictly increasing\
    \ sequence from inputArray.\nIt's guaranteed that for the given test cases the\
    \ answer always fits signed 32-bit integer type.\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers. You\
    \ have to find the sum of all the numbers present in the string, without using\
    \ regular expressions.\nFor example, consider the following string:\n\"1abc23\"\
    \nThe answer should be 24.\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given an\
    \ array of integers, return the sum of the integers that have an even index, multiplied\
    \ by the integer at the last index.\n * If the array is empty, you should return\
    \ 0.\n * example:\n * >>> sum_of_evens_times_last([1, 2, 3, 4, 5])\n * 30\n *\
    \ >>> sum_of_evens_times_last([3, 5])\n * 15\n * >>> sum_of_evens_times_last([6])\n\
    \ * 36\n * >>> sum_of_evens_times_last([])\n * 0\n */\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i] -\
    \ $guess[$i]);\n    }\n    return $result;\n}\n\n/*\nYou are given an array of\
    \ integers.\nReturn an array of the same size where the element at each index\
    \ is the product of all the elements in the original array except for the element\
    \ at that index.\nFor example, an input of [1, 2, 3, 4, 5] should return [120,\
    \ 60, 40, 30, 24].\nYou cannot use division in this problem.\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * \u0421\u043E\
    \u0437\u0434\u0430\u0439\u0442\u0435 \u043C\u0430\u0441\u0441\u0438\u0432, \u0437\
    \u0430\u043F\u043E\u043B\u043D\u0435\u043D\u043D\u044B\u0439 \u0447\u0438\u0441\
    \u043B\u0430\u043C\u0438 \u043E\u0442 1 \u0434\u043E 100. \u041D\u0430\u0439\u0434\
    \u0438\u0442\u0435 \u0441\u0443\u043C\u043C\u0443 \u044D\u043B\u0435\u043C\u0435\
    \u043D\u0442\u043E\u0432 \u043C\u0430\u0441\u0441\u0438\u0432\u0430, \u043A\u043E\
    \u0442\u043E\u0440\u044B\u0435 \u0434\u0435\u043B\u044F\u0442\u0441\u044F \u043D\
    \u0430 3.\n */\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ an array of integers.\nOn each move you are allowed to increase exactly one\
    \ of its element by one.\nFind the minimal number of moves required to obtain\
    \ a strictly increasing sequence from the input.\nexample:\n>>> array(1, 1, 1)\n\
    3\n>>> array(2, 1)\n1\n>>> array(1, 2, 3)\n0\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers between 0-9.\
    \ Find the average of these numbers and return it as a floored whole number (ie:\
    \ no decimal places) written out as a string. Eg:\n\n\"zero nine five two\" ->\
    \ \"four\"\n\nIf the string is empty or includes a number greater than 9, return\
    \ \"n/a\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tforeach\
    \ ($game as $key => $value) {\n\t\t$result[] = abs($value - $guess[$key]);\n\t\
    }\n\treturn $result;\n}\n\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4,\
    \ 2, -2];\nprint_r(compare($game, $guess));\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 3\n    [5] => 3\n)\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. On each move\
    \ you are allowed to increase exactly one of its element by one. \nFind the minimal\
    \ number of moves required to obtain a strictly increasing sequence from the input.\n\
    example:\n>>> array(1, 1, 1)\n3\n>>> array(2, 1)\n1\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tforeach\
    \ ($game as $key => $value) {\n\t\t$result[] = abs($value - $guess[$key]);\n\t\
    }\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. On each move\
    \ you are allowed to increase exactly one of its element by one. \nFind the minimal\
    \ number of moves required to obtain a strictly increasing sequence from the input.\n\
    example:\n>>> array(1, 1, 1)\n3\n>>> array(2, 1)\n1\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ an array of integers.\nOn each move you are allowed to increase exactly one\
    \ of its element by one.\nFind the minimal number of moves required to obtain\
    \ a strictly increasing sequence from the input.\nexample:\n>>> array(1, 1, 1)\n\
    3\n>>> array(2, 1)\n1\n>>> array(2, 3, 1, 2)\n4\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * You are given\
    \ an array of integers. Your task is to sort odd numbers within the array in ascending\
    \ order,\n * and even numbers in descending order. Note that zero is an even number.\
    \ If you have an empty array, you need to return it.\n * For example:\n * sortArray([5,\
    \ 3, 2, 8, 1, 4]) == [1, 3, 8, 4, 5, 2]\n */\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4,\
    \ 2, -2];\n\nprint_r(compare($game, $guess));\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 3\n    [5] => 3\n)\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4,\
    \ 2, -2];\nprint_r(compare($game, $guess));\n\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 3\n    [5] => 3\n)\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\nprint_r(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4,\
    \ 2, -2]));\nprint_r(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]));\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 3\n    [5] => 3\n)\nArray\n(\n    [0] => 4\n    [1] => 4\n    [2] => 1\n\
    \    [3] => 0\n    [4] => 0\n    [5] => 6\n)\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers. You need to\
    \ find the sum of all the numbers in the string.\nexample:\n>>> sum_numbers(\"\
    1 2 3\")\n6\n>>> sum_numbers(\"1 2 3.4\")\n6.4\n>>> sum_numbers(\"1 2 3.4 5\"\
    )\n11.4\n>>> sum_numbers(\"1 2 3.4 5 dog\")\n11.4\n>>> sum_numbers(\"1 2 3.4 5\
    \ dog 6 cat\")\n17.4\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given an\
    \ array of integers, return a new array with each value doubled.\n * For example:\n\
    \ * [1, 2, 3] --> [2, 4, 6]\n * For the beginner, try to use the map method -\
    \ it comes in very handy quite a lot so is a good one to know.\n */\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4,\
    \ 2, -2];\n$result = compare($game, $guess);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 3\n    [5] => 3\n)\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tforeach\
    \ ($game as $key => $value) {\n\t\t$result[] = abs($value - $guess[$key]);\n\t\
    }\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers between 0-9.\
    \ Find the average of these numbers and return it as a floored whole number (ie:\
    \ no decimal places) written out as a string. Eg:\n\"zero nine five two\" -> \"\
    four\"\nIf the string is empty or includes a number greater than 9, return \"\
    n/a\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2,\
    \ 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers between 0-9.\
    \ Find the average of these numbers and return it as a floored whole number (ie:\
    \ no decimal places) written out as a string. Eg:\n\n\"zero nine five two\" ->\
    \ \"four\"\n\nIf the string is empty or includes a number greater than 9, return\
    \ \"n/a\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers between 0-9.\
    \ Find the average of these numbers and return it as a floored whole number (ie:\
    \ no decimal places) written out as a string. Eg:\n\"zero nine five two\" -> \"\
    four\"\nIf the string is empty or includes a number greater than 9, return \"\
    n/a\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2,\
    \ 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers between\
    \ 0-9. Find the average of these numbers and return it as a floored whole number\
    \ (ie: no decimal places) written out as a string. Eg:\n>>> averageString('zero\
    \ nine five two')\n'four'\nIf the string is empty or includes a number greater\
    \ than 9, return \"n/a\"\n>>> averageString('four six two three')\n'three'\n>>>\
    \ averageString('one two three four five')\n'three'\n>>> averageString('five four')\n\
    'four'\n>>> averageString('zero zero zero zero zero')\n'zero'\n>>> averageString('one\
    \ one eight one')\n'two'\n>>> averageString('one')\n'one'\n>>> averageString('')\n\
    'n/a'\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2,\
    \ 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * \u0414\u0430\
    \u043D \u043C\u0430\u0441\u0441\u0438\u0432 \u0441 \u0447\u0438\u0441\u043B\u0430\
    \u043C\u0438. \u0412\u044B\u0432\u0435\u0434\u0438\u0442\u0435 \u043F\u043E\u0441\
    \u043B\u0435\u0434\u043E\u0432\u0430\u0442\u0435\u043B\u044C\u043D\u043E \u0435\
    \u0433\u043E \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u044B \u0438\u0441\u043F\
    \u043E\u043B\u044C\u0437\u0443\u044F \u0440\u0435\u043A\u0443\u0440\u0441\u0438\
    \u044E \u0438 \u043D\u0435 \u0438\u0441\u043F\u043E\u043B\u044C\u0437\u0443\u044F\
    \ \u0446\u0438\u043A\u043B.\n */\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given a string,\
    \ return the sum of the numbers appearing in the string, ignoring all other characters.\n\
    \ * A number is a series of 1 or more digit chars in a row. (Note: Character.isDigit(char)\
    \ tests if a char is one of the chars '0', '1', .. '9'. Integer.parseInt(string)\
    \ converts a string to an int.)\n *\n * sumNumbers(\"abc123xyz\") \u2192 123\n\
    \ * sumNumbers(\"aa11b33\") \u2192 44\n * sumNumbers(\"7 11\") \u2192 18\n */\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nWrite a function that takes an array of\
    \ strings as an argument and returns a sorted array containing the same strings,\
    \ ordered from shortest to longest.\nFor example, if this array were passed as\
    \ an argument:\n[\"Telescopes\", \"Glasses\", \"Eyes\", \"Monocles\"]\nYour function\
    \ would return the following array:\n[\"Eyes\", \"Glasses\", \"Monocles\", \"\
    Telescopes\"]\nAll of the strings in the array passed to your function will be\
    \ different lengths, so you will not have to decide how to order multiple strings\
    \ of the same length.\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ a string of numbers between 0-9. Find the average of these numbers and return\
    \ it as a floored whole number (ie: no decimal places) written out as a string.\
    \ Eg:\n\n\"zero nine five two\" -> \"four\"\n\nIf the string is empty or includes\
    \ a number greater than 9, return \"n/a\"\n*/\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i] -\
    \ $guess[$i]);\n    }\n    return $result;\n}\n\n/*\n * Complete the function\
    \ below.\n */\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given an\
    \ array of integers, return indices of the two numbers such that they add up to\
    \ a specific target.\n * You may assume that each input would have exactly one\
    \ solution, and you may not use the same element twice.\n * Example:\n * Given\
    \ nums = [2, 7, 11, 15], target = 9,\n * Because nums[0] + nums[1] = 2 + 7 = 9,\n\
    \ * return [0, 1].\n */\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given an\
    \ array of integers, return indices of the two numbers such that they add up to\
    \ a specific target.\n * You may assume that each input would have exactly one\
    \ solution, and you may not use the same element twice.\n * Example:\n * Given\
    \ nums = [2, 7, 11, 15], target = 9,\n * Because nums[0] + nums[1] = 2 + 7 = 9,\n\
    \ * return [0, 1].\n */\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. Your\
    \ task is to sort odd numbers within the array in ascending order,\nand even numbers\
    \ in descending order. Note that zero is an even number. If you have an empty\
    \ array, you need to return it.\nFor example:\n>>> sortArray(array(5, 3, 2, 8,\
    \ 1, 4))\narray(1, 3, 8, 4, 5, 2)\n*/\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. On each move\
    \ you are allowed to increase exactly one of its element by one. \nFind the minimal\
    \ number of moves required to obtain a strictly increasing sequence from the input.\n\
    Example\nFor inputArray = [1, 1, 1], the output should be\narrayChange(inputArray)\
    \ = 3.\nInput/Output\n[input] array.integer inputArray\nConstraints:\n3 \u2264\
    \ inputArray.length \u2264 105,\n-105 \u2264 inputArray[i] \u2264 105.\n[output]\
    \ integer\nThe minimal number of moves needed to obtain a strictly increasing\
    \ sequence from inputArray.\nIt's guaranteed that for the given test cases the\
    \ answer always fits signed 32-bit integer type.\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tforeach\
    \ ($game as $key => $value) {\n\t\t$result[] = abs($value - $guess[$key]);\n\t\
    }\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers between 0-9.\
    \ Find the average of these numbers and return it as a floored whole number (ie:\
    \ no decimal places) written out as a string. Eg:\n\"zero nine five two\" -> \"\
    four\"\nIf the string is empty or includes a number greater than 9, return \"\
    n/a\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2,\
    \ 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ an array of integers. On each move you are allowed to increase exactly one of\
    \ its element by one.\nFind the minimal number of moves required to obtain a strictly\
    \ increasing sequence from the input.\nexample:\n>>> array_change(array(1, 1,\
    \ 1))\n3\n>>> array_change(array(-1000, 0, -2, 0))\n5\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\necho '<pre>';\nprint_r(compare([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]));\necho '</pre>';\necho '<pre>';\nprint_r(compare([0, 5,\
    \ 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n\
    \    [4] => 3\n    [5] => 3\n)\n</pre><pre>Array\n(\n    [0] => 4\n    [1] =>\
    \ 4\n    [2] => 1\n    [3] => 0\n    [4] => 0\n    [5] => 6\n)\n</pre>"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ foreach ($game as $key => $value) {\n        $result[] = abs($value - $guess[$key]);\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given a string,\
    \ return the sum of the numbers appearing in the string, ignoring all other characters.\
    \ \n * A number is a series of 1 or more digit chars in a row. (Note: Character.isDigit(char)\
    \ tests if a char is one of the chars '0', '1', .. '9'. Integer.parseInt(string)\
    \ converts a string to an int.)\n * sumNumbers(\"abc123xyz\") \u2192 123\n * sumNumbers(\"\
    aa11b33\") \u2192 44\n * sumNumbers(\"7 11\") \u2192 18\n */\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers.\nOn each\
    \ move you are allowed to increase exactly one of its element by one.\nFind the\
    \ minimal number of moves required to obtain a strictly increasing sequence from\
    \ the input.\nexample:\n>>> array(1, 1, 1)\n3\n>>> array(2, 1)\n1\n*/\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers. You need to\
    \ find the sum of all the numbers in the string.\nexample:\n>>> sum_numbers(\"\
    1\")\n1\n>>> sum_numbers(\"1 2 3\")\n6\n>>> sum_numbers(\"1 2 3 4\")\n10\n>>>\
    \ sum_numbers(\"1 2 3 4 5\")\n15\n>>> sum_numbers(\"10 10\")\n20\n>>> sum_numbers(\"\
    0 0\")\n0\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. On each move\
    \ you are allowed to increase exactly one of its element by one. \nFind the minimal\
    \ number of moves required to obtain a strictly increasing sequence from the input.\n\
    example:\n>>> array(1, 1, 1)\n3\n>>> array(2, 1, 10, 1)\n12\n>>> array(2, 3, 3,\
    \ 5, 5, 5, 4, 12, 12, 10, 15)\n13\n*/\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nThe sum of the primes below 10 is 2 +\
    \ 3 + 5 + 7 = 17.\nFind the sum of all the primes below two million.\n*/\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. You should\
    \ find the sum of the integers with even indexes (0th, 2nd, 4th...).\nThen multiply\
    \ this summed number and the final element of the array together. Don't forget\
    \ that the first element has an index of 0.\nFor an empty array, the result will\
    \ always be 0 (zero).\n\nInput: A list of integers.\nOutput: The number as an\
    \ integer.\n\nExample:\nevenLast([0, 1, 2, 3, 4, 5]) == 30\nevenLast([1, 3, 5])\
    \ == 30\nevenLast([6]) == 36\nevenLast([]) == 0\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ foreach ($game as $key => $value) {\n        $result[] = abs($value - $guess[$key]);\n\
    \    }\n    return $result;\n}\n\n/*\nYou are given an array of integers. Each\
    \ integer represents a jump of its value in the array. \nFor instance, the integer\
    \ 2 represents a jump of 2 indices forward in the array; the integer -3 \nrepresents\
    \ a jump of 3 indices backward in the array. If a jump spills past the array's\
    \ bounds, \nit wraps over to the other side. For instance, a jump of -1 at index\
    \ 0 brings us to the last index in the array. \nSimilarly, a jump of 1 at the\
    \ last index in the array brings us to index 0. Write a function that returns\
    \ a boolean \nrepresenting whether the jumps in the array form a single cycle.\
    \ A single cycle occurs if, starting at any index in \nthe array and following\
    \ the jumps, every element in the array is visited exactly once before landing\
    \ back on the starting index.\n\n>>> hasSingleCycle(array(2, 3, 1, -4, -4, 2))\n\
    true\n>>> hasSingleCycle(array(1, 1, 1, 1, 2))\nfalse\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers.\nYour\
    \ task is to return the difference between the biggest and smallest values.\n\
    example:\n>>> diffMaxMin(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n9\n>>> diffMaxMin(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n10\n*/\nfunction candidate(...$args) {\n \
    \   return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ an array of integers. On each move you are allowed to increase exactly one of\
    \ its element by one. \nFind the minimal number of moves required to obtain a\
    \ strictly increasing sequence from the input.\nexample:\n>>> array(1, 1, 1)\n\
    3\n>>> array(2, 1, 10, 1)\n12\n>>> array(2, 3, 3, 5, 5, 5, 4, 12, 12, 10, 15)\n\
    13\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers. You need to\
    \ find the sum of all numbers in the string.\nexample:\n>>> sum_numbers('1abc33xyz22')\n\
    56\n>>> sum_numbers('abc123xyz')\n123\n>>> sum_numbers('abcdef')\n0\n>>> sum_numbers('abc123xyz789')\n\
    901\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2,\
    \ 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*Write a function that takes a string as an argument\
    \ and returns a new string\nthat contains the original string in reverse.\nexample:\n\
    >>> reverse('Hello World')\n'dlroW olleH'\n>>> reverse('The quick brown fox.')\n\
    '.xof nworb kciuq ehT'*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\nprint_r(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4,\
    \ 2, -2]));\nprint_r(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]));\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 3\n    [5] => 3\n)\nArray\n(\n    [0] => 4\n    [1] => 4\n    [2] => 1\n\
    \    [3] => 0\n    [4] => 0\n    [5] => 6\n)\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i] -\
    \ $guess[$i]);\n    }\n    return $result;\n}\n\n/*\n * Given an array of integers,\
    \ return the sum of the integers after adding 1 to each.\n * example:\n * >>>\
    \ plusOneSum(array(1, 2, 3))\n * 14\n * >>> plusOneSum(array(1, -2))\n * 0\n *\
    \ >>> plusOneSum(array(3, 4, 5, 6, 7))\n * 40\n */\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ a string of numbers between 0-9. Find the average of these numbers and return\
    \ it as a floored whole number (ie: no decimal places) written out as a string.\
    \ Eg:\n\"zero nine five two\" -> \"four\"\nIf the string is empty or includes\
    \ a number greater than 9, return \"n/a\"\n*/\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nGiven an array\
    \ of integers, return a new array with each value doubled.\nFor example:\n[1,\
    \ 2, 3] --> [2, 4, 6]\nFor the beginner, try to use the map method - it comes\
    \ in very handy quite a lot so is a good one to know.\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4,\
    \ 2, -2];\nprint_r(compare($game, $guess));\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 3\n    [5] => 3\n)\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] === $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nGiven a string, return the character that\
    \ is most commonly used in the string.\n\n>>> max_char(\"abcccccccd\")\n'c'\n\
    >>> max_char(\"apple 1231111\")\n'1'\n*/\nfunction candidate(...$args) {\n   \
    \ return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers.\nThe string\
    \ contains only numbers and you have to find the sum of all the numbers present\
    \ in the string.\nexample:\n>>> sum_numbers(\"1abc33xyz22\")\n56\n>>> sum_numbers(\"\
    abcd\")\n0\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i] -\
    \ $guess[$i]);\n    }\n    return $result;\n}\n\n/*\n * Given an array of integers,\
    \ return the sum of the integers that have an even index, multiplied by the integers\
    \ at an odd index.\n * If the array has no elements, return 0.\n * example:\n\
    \ * >>> sum_even_indexed_multiplied_by_odd([1, 2, 3, 4, 5, 6])\n * 44\n * >>>\
    \ sum_even_indexed_multiplied_by_odd([])\n * 0\n */\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ an array of integers. On each move you are allowed to increase exactly one of\
    \ its element by one. \nFind the minimal number of moves required to obtain a\
    \ strictly increasing sequence from the input.\nExample\nFor inputArray = [1,\
    \ 1, 1], the output should be\narrayChange(inputArray) = 3.\nInput/Output\n[execution\
    \ time limit] 4 seconds (php)\n[input] array.integer inputArray\nGuaranteed constraints:\n\
    3 \u2264 inputArray.length \u2264 105,\n-105 \u2264 inputArray[i] \u2264 105.\n\
    [output] integer\nThe minimal number of moves needed to obtain a strictly increasing\
    \ sequence from inputArray.\nIt's guaranteed that for the given test cases the\
    \ answer always fits signed 32-bit integer type.\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers. Each\
    \ number represents the number of times a character appears in the string.\nReturn\
    \ the character that appears the most.\nexample:\n>>> most_frequent(\"aaabbc\"\
    )\n'a'\n>>> most_frequent(\"aabbcc\")\n'c'\n>>> most_frequent(\"aabbccc\")\n'c'\n\
    */\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ a string of numbers.\nYou have to find the sum of all the numbers present in\
    \ the string.\nFor example, if the string is \"1234\" then the sum is 1+2+3+4\
    \ = 10.\nIf the string is \"1234abc\" then the sum is 1+2+3+4 = 10.\nIf the string\
    \ is \"abcd\" then the sum is 0.\n*/\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n  $result = [];\n  for\
    \ ($i = 0; $i < count($game); $i++) {\n    if ($game[$i] == $guess[$i]) {\n  \
    \    $result[] = 0;\n    } else {\n      $result[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n  }\n  return $result;\n}\n\n/*\nYou are given an array of integers. On\
    \ each move you are allowed to increase exactly one of its element by one. \n\
    Find the minimal number of moves required to obtain a strictly increasing sequence\
    \ from the input.\n\nExample\n\nFor inputArray = [1, 1, 1], the output should\
    \ be\narrayChange(inputArray) = 3.\n\nInput/Output\n\n[execution time limit] 4\
    \ seconds (php)\n\n[input] array.integer inputArray\n\nGuaranteed constraints:\n\
    3 \u2264 inputArray.length \u2264 105,\n-105 \u2264 inputArray[i] \u2264 105.\n\
    \n[output] integer\n\nThe minimal number of moves needed to obtain a strictly\
    \ increasing sequence from inputArray.\nIt's guaranteed that for the given test\
    \ cases the answer always fits signed 32-bit integer type.\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given a string\
    \ of words, you need to find the highest scoring word.\n * Each letter of a word\
    \ scores points according to it's position in the alphabet: a = 1, b = 2, c =\
    \ 3 etc.\n * You need to return the highest scoring word as a string.\n * If two\
    \ words score the same, return the word that appears earliest in the original\
    \ string.\n * All letters will be lowercase and all inputs will be valid.\n *\n\
    \ * >>> high('man i need a taxi up to ubud')\n * 'taxi'\n * >>> high('what time\
    \ are we climbing up the volcano')\n * 'volcano'\n * >>> high('take me to semynak')\n\
    \ * 'semynak'\n */\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ a string of numbers.\nYou need to find the maximum number that can be made from\
    \ these numbers.\nYou can only rearrange the digits, you cannot add or remove\
    \ any digits.\nFor example:\n>>> maxNumber(\"123\")\n321\n>>> maxNumber(\"531\"\
    )\n531\n>>> maxNumber(\"12345\")\n54321\n>>> maxNumber(\"123450\")\n54321\n>>>\
    \ maxNumber(\"1234567\")\n7654321\n>>> maxNumber(\"12345678\")\n87654321\n>>>\
    \ maxNumber(\"123456789\")\n987654321\n>>> maxNumber(\"1234567890\")\n9876543210\n\
    */\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4,\
    \ 2, -2];\n\nprint_r(compare($game, $guess));\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 3\n    [5] => 3\n)\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nGiven a string,\
    \ return the sum of the numbers appearing in the string, ignoring all other characters.\n\
    A number is a series of 1 or more digit chars in a row. (Note: Character.isDigit(char)\
    \ tests if a char is one of the chars '0', '1', .. '9'. Integer.parseInt(string)\
    \ converts a string to an int.)\n\nsumNumbers(\"abc123xyz\") \u2192 123\nsumNumbers(\"\
    aa11b33\") \u2192 44\nsumNumbers(\"7 11\") \u2192 18\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. On\
    \ each move you are allowed to increase exactly one of its element by one. \n\
    Find the minimal number of moves required to obtain a strictly increasing sequence\
    \ from the input.\nExample\nFor inputArray = [1, 1, 1], the output should be\n\
    arrayChange(inputArray) = 3.\nInput/Output\n[input] array.integer inputArray\n\
    Guaranteed constraints:\n3 \u2264 inputArray.length \u2264 105,\n-105 \u2264 inputArray[i]\
    \ \u2264 105.\n[output] integer\nThe minimal number of moves needed to obtain\
    \ a strictly increasing sequence from inputArray.\nIt's guaranteed that for the\
    \ given test cases the answer always fits signed 32-bit integer type.\n*/\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nGiven a string of words, you need to find\
    \ the highest scoring word.\nEach letter of a word scores points according to\
    \ its position in the alphabet: a = 1, b = 2, c = 3 etc.\nYou need to return the\
    \ highest scoring word as a string.\nIf two words score the same, return the word\
    \ that appears earliest in the original string.\nAll letters will be lowercase\
    \ and all inputs will be valid.\nexample:\n>>> high('man i need a taxi up to ubud')\n\
    'taxi'\n>>> high('what time are we climbing up the volcano')\n'volcano'\n>>> high('take\
    \ me to semynak')\n'semynak'\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of words separated\
    \ by spaces.\nYou need to reverse the order of the words and return the string.\n\
    example:\n>>> reverse(\"Hello World\")\n\"World Hello\"\n>>> reverse(\"Hello CodeWars\"\
    )\n\"CodeWars Hello\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\t$count\
    \ = count($game);\n\tfor ($i = 0; $i < $count; $i++) {\n\t\t$result[] = abs($game[$i]\
    \ - $guess[$i]);\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers between\
    \ 0-9. Find the average of these numbers and return it as a floored whole number\
    \ (ie: no decimal places) written out as a string. Eg:\n\n\"zero nine five two\"\
    \ -> \"four\"\n\nIf the string is empty or includes a number greater than 9, return\
    \ \"n/a\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers.\nYou\
    \ need to find the maximum value from the string,\nyou can add a + or - sign in\
    \ front of any of the numbers.\nReturn the highest possible total you can get.\n\
    example:\n>>> max_value(\"0123\")\n6\n>>> max_value(\"91212129\")\n9\n*/\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string containing only\
    \ digits (0-9). The string should have between 4 and 12 digits.\nYour task is\
    \ to split the given string into groups of two. If the string contains an odd\
    \ number of digits,\nthen the final group should contain only one digit.\nEach\
    \ group should be formatted as follows: each group contains two digits, except\
    \ the last group which may contain only one digit;\neach group is written as the\
    \ XOR of the two digits (you may use ^ for XOR); each group is written in uppercase\
    \ letters.\nexample:\n>>> xor_encrypt('123456789')\n'C1E8'\n>>> xor_encrypt('1234')\n\
    '7D'\n>>> xor_encrypt('12345')\n'7DC2'\n*/\nfunction candidate(...$args) {\n \
    \   return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given an\
    \ array of integers, return an array of the same size where the element at each\
    \ index is the product of all the elements in the original array except for the\
    \ element at that index.\n * For example, an input of [1, 2, 3, 4, 5] should return\
    \ [120, 60, 40, 30, 24].\n * You cannot use division in this problem.\n */\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers between 0-9.\
    \ Find the average of these numbers and return it as a floored whole number (ie:\
    \ no decimal places) written out as a string. Eg:\n\"zero nine five two\" -> \"\
    four\"\nIf the string is empty or includes a number greater than 9, return \"\
    n/a\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2,\
    \ 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. Each\
    \ integer represents a jump of its value in the array. \nFor instance, the integer\
    \ 2 represents a jump of 2 indices forward in the array; the integer -3 \nrepresents\
    \ a jump of 3 indices backward in the array. If a jump spills past the array's\
    \ bounds, \nit wraps over to the other side. For instance, a jump of -1 at index\
    \ 0 brings us to the last index in the array. \nSimilarly, a jump of 1 at the\
    \ last index in the array brings us to index 0. Write a function that returns\
    \ a boolean \nrepresenting whether the jumps in the array form a single cycle.\
    \ A single cycle occurs if, starting at any index in the \narray and following\
    \ the jumps, every element in the array is visited exactly once before landing\
    \ back on the starting index.\nexample:\n>>> hasSingleCycle(array(2, 3, 1, -4,\
    \ -4, 2))\nTrue\n>>> hasSingleCycle(array(1, 1, 1, 1, 2))\nFalse\n*/\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nA number is called a palindrome if it\
    \ reads the same from left to right as it does from right to left.\nFor example,\
    \ 12321 is a palindrome, but 1234 is not.\nYour task is to write a function that\
    \ takes a number and returns true if the number is a palindrome,\nand false if\
    \ it is not.\nexample:\n>>> is_palindrome(12321)\ntrue\n>>> is_palindrome(1234)\n\
    false\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2,\
    \ 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers and\
    \ letters.\nYour task is to find the number of occurrences of each letter in the\
    \ string.\nexample:\n>>> count_letters('aabbccdd')\narray('a' => 2, 'b' => 2,\
    \ 'c' => 2, 'd' => 2)\n>>> count_letters('abcdefghijklmnopqrstuvwxyz')\narray('a'\
    \ => 1, 'b' => 1, 'c' => 1, 'd' => 1, 'e' => 1, 'f' => 1, 'g' => 1, 'h' => 1,\
    \ 'i' => 1, 'j' => 1, 'k' => 1, 'l' => 1, 'm' => 1, 'n' => 1, 'o' => 1, 'p' =>\
    \ 1, 'q' => 1, 'r' => 1, 's' => 1, 't' => 1, 'u' => 1, 'v' => 1, 'w' => 1, 'x'\
    \ => 1, 'y' => 1, 'z' => 1)\n>>> count_letters('aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz')\n\
    array('a' => 2, 'b' => 2, 'c' => 2, 'd' => 2, 'e' => 2, 'f' => 2, 'g' => 2, 'h'\
    \ => 2, 'i' => 2, 'j' => 2, 'k' => 2, 'l' => 2, 'm' => 2, 'n' => 2, 'o' => 2,\
    \ 'p' => 2, 'q' => 2, 'r' => 2, 's' => 2, 't' => 2, 'u' => 2,\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmp1f0eojy3.php on
    line 26

    '
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers. You need to\
    \ find the sum of all the numbers in the string.\nexample:\n>>> sum_numbers('1a2b3c')\n\
    6\n>>> sum_numbers('123ab!45c')\n168\n>>> sum_numbers('abc123xyz')\n0\n>>> sum_numbers('abcdefghijklmnopqrstuvwxyz')\n\
    0\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] === $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * You are given\
    \ a string of numbers between 0-9. Find the average of these numbers and return\
    \ it as a floored whole number (ie: no decimal places) written out as a string.\
    \ Eg:\n * \"zero nine five two\" -> \"four\"\n * If the string is empty or includes\
    \ a number greater than 9, return \"n/a\"\n */\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers, separated\
    \ by a comma and a space. \nCreate a function that returns the highest and lowest\
    \ numbers.\nexample:\n>>> high_low(\"1, 2, 3, 4, 5\")\n\"5, 1\"\n>>> high_low(\"\
    1 2 3 4 5\")\n\"5, 1\"\n>>> high_low(\"1 9 3 4 -5\")\n\"9, -5\"\n>>> high_low(\"\
    1, -2, 3, 4, 5\")\n\"5, -2\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nGiven a string, return the sum of the\
    \ numbers appearing in the string, ignoring all other characters. \nA number is\
    \ a series of 1 or more digit chars in a row. (Note: Character.isDigit(char) tests\
    \ if a char is one of the chars '0', '1', .. '9'. Integer.parseInt(string) converts\
    \ a string to an int.)\n\nsumNumbers(\"abc123xyz\") \u2192 123\nsumNumbers(\"\
    aa11b33\") \u2192 44\nsumNumbers(\"7 11\") \u2192 18\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nWrite a function that takes an array of strings\
    \ as an argument and returns a sorted array containing the same strings, ordered\
    \ from shortest to longest.\nFor example, if this array were passed as an argument:\n\
    [\"Telescopes\", \"Glasses\", \"Eyes\", \"Monocles\"]\nYour function would return\
    \ the following array:\n[\"Eyes\", \"Glasses\", \"Monocles\", \"Telescopes\"]\n\
    All of the strings in the array passed to your function will be different lengths,\
    \ so you will not have to decide how to order multiple strings of the same length.\n\
    */\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given an\
    \ array of integers, return a new array with each value doubled.\n * For example:\n\
    \ * [1, 2, 3] --> [2, 4, 6]\n * For the beginner, try to use the map method -\
    \ it comes in very handy quite a lot so is a good one to know.\n */\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of words separated\
    \ by spaces.\nYou need to reverse each word in the string and return the result.\n\
    example:\n>>> reverse('Hello world')\n'olleH dlrow'\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. You should\
    \ find the sum of the integers with even indexes (0th, 2nd, 4th...).\nThen multiply\
    \ this summed number and the final element of the array together. Don't forget\
    \ that the first element\nhas an index of 0.\nFor an empty array, the result will\
    \ always be 0 (zero).\nExample:\narray = [1, 2, 3, 4, 5]\nThe even-indexes sum\
    \ is equal to 1 + 3 + 5 = 9. The last element is equal to 5.\nThe answer is: 9\
    \ * 5 = 45\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given an\
    \ array of integers, return a new array where each element in the new array is\
    \ the number of smaller elements to the right of that element in the original\
    \ input array.\nFor example, given the array [3, 4, 9, 6, 1], return [1, 1, 2,\
    \ 1, 0], since:\nThere is 1 smaller element to the right of 3\nThere is 1 smaller\
    \ element to the right of 4\nThere are 2 smaller elements to the right of 9\n\
    There is 1 smaller element to the right of 6\nThere are no smaller elements to\
    \ the right of 1\n */\n\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. Return\
    \ an array of the same size where the element at each index is the product of\
    \ all the elements in the original array except for the element at that index.\n\
    For example, an input of [1, 2, 3, 4, 5] should return [120, 60, 40, 30, 24].\n\
    You cannot use division in this problem.\n>>> product([1, 2, 3, 4, 5])\n[120,\
    \ 60, 40, 30, 24]\n>>> product([3, 2, 1])\n[2, 3, 6]\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers and\
    \ letters.\nYour task is to return a string where each letter is replaced by the\
    \ next letter in the alphabet.\nFor example, the letter 'a' should be replaced\
    \ by 'b', 'c' should be replaced by 'd', and so on.\nexample:\n>>> replace('abc')\n\
    'bcd'\n>>> replace('xyz')\n'yza'\n*/\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tforeach\
    \ ($game as $key => $value) {\n\t\tif ($value == $guess[$key]) {\n\t\t\t$result[]\
    \ = 0;\n\t\t} else {\n\t\t\t$result[] = abs($value - $guess[$key]);\n\t\t}\n\t\
    }\n\treturn $result;\n}\n\n/*\nWrite a function that takes a string and returns\
    \ the number of vowels in the string.\nYou may assume that all the letters are\
    \ lower cased. You can treat \"y\" as a consonant.\n>>> count_vowels(\"aeiou\"\
    )\n5\n>>> count_vowels(\"abcdefghijklmnopqrstuvwxyz\")\n5\n>>> count_vowels(\"\
    \")\n0\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i] -\
    \ $guess[$i]);\n    }\n    return $result;\n}\n\n/*\nYou are given an array of\
    \ integers. On each move you are allowed to increase exactly one of its element\
    \ by one. \nFind the minimal number of moves required to obtain a strictly increasing\
    \ sequence from the input.\nexample:\n>>> array(1, 1, 1)\n3\n>>> array(2, 1, 10,\
    \ 1)\n12\n>>> array(2, 3, 3, 5, 5, 5, 4, 12, 12, 10, 15)\n13\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers between 0-9.\
    \ Find the average of these numbers and return it as a floored whole number (ie:\
    \ no decimal places) written out as a string. Eg:\n\"zero nine five two\" -> \"\
    four\"\nIf the string is empty or includes a number greater than 9, return \"\
    n/a\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2,\
    \ 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*Given an array of integers, return an array\
    \ of the same size where the element at each index is the product of all the elements\
    \ in the original array except for the element at that index.\nFor example, an\
    \ input of [1, 2, 3, 4, 5] should return [120, 60, 40, 30, 24].\nYou cannot use\
    \ division in this problem.\nExample:\n>>> product([1, 2, 3, 4, 5])\n[120, 60,\
    \ 40, 30, 24]\n>>> product([3, 2, 1])\n[2, 3, 6]*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given a string,\
    \ return the sum of the numbers appearing in the string, ignoring all other characters.\n\
    \ * A number is a series of 1 or more digit chars in a row. (Note: Character.isDigit(char)\
    \ tests if a char is one of the chars '0', '1', .. '9'.\n * Integer.parseInt(string)\
    \ converts a string to an int.)\n *\n * sumNumbers(\"abc123xyz\") \u2192 123\n\
    \ * sumNumbers(\"aa11b33\") \u2192 44\n * sumNumbers(\"7 11\") \u2192 18\n */\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] === $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ a string where you have to find its first word.\nWhen solving a task pay attention\
    \ to the following points:\nThere can be dots and commas in a string.\nA string\
    \ can start with a letter or, for example, a dot or space.\nA word can contain\
    \ an apostrophe and it's a part of a word.\nThe whole text can be represented\
    \ with one word and that's it.\nInput: A string.\nOutput: A string.\nPrecondition:\
    \ the text can contain a-z A-Z , . '\n*/\nfunction candidate(...$args) {\n   \
    \ return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers.\nThe\
    \ string contains only numbers, and you are allowed to perform two operations\
    \ on it:\n1) Swap two digits, and\n2) Replace one digit by another.\nYou are asked\
    \ to find the minimum number of operations required to convert the given string\
    \ into a palindrome.\nexample:\n>>> min_operations(\"1234\")\n2\n>>> min_operations(\"\
    4321\")\n1\n>>> min_operations(\"4332\")\n2\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ an array of integers. You should find the sum of the integers with even indexes\
    \ (0th, 2nd, 4th...).\nThen multiply this summed number and the final element\
    \ of the array together.\nDon't forget that the first element has an index of\
    \ 0.\nFor an empty array, the result will always be 0 (zero).\nExample:\narray\
    \ = [1, 2, 3, 4, 5]\nThe even-indexes sum is equal to 2 + 4 = 6.\nThe answer is:\
    \ 6 * 5 = 30.\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given a string\
    \ of words, you need to find the highest scoring word.\n * Each letter of a word\
    \ scores points according to it's position in the alphabet: a = 1, b = 2, c =\
    \ 3 etc.\n * You need to return the highest scoring word as a string.\n * If two\
    \ words score the same, return the word that appears earliest in the original\
    \ string.\n * All letters will be lowercase and all inputs will be valid.\n *\n\
    \ * >>> high('man i need a taxi up to ubud')\n * 'taxi'\n * >>> high('what time\
    \ are we climbing up the volcano')\n * 'volcano'\n * >>> high('take me to semynak')\n\
    \ * 'semynak'\n *\n */\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * You are given\
    \ a string of numbers. You must find the maximum number of consecutive 1's in\
    \ this string.\n * example:\n * >>> find_max_consecutive_ones('110001111000000')\n\
    \ * 3\n * >>> find_max_consecutive_ones('101101111011101')\n * 5\n * >>> find_max_consecutive_ones('1111001')\n\
    \ * 4\n */\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. You\
    \ should find the sum of the integers with even indexes (0th, 2nd, 4th...).\n\
    Then multiply this summed number and the final element of the array together.\
    \ Don't forget that the first element has an index of 0.\nFor an empty array,\
    \ the result will always be 0 (zero).\nInput: A list of integers.\nOutput: The\
    \ number as an integer.\nPrecondition: 0 \u2264 len(array) \u2264 20\nall(isinstance(x,\
    \ int) for x in array)\nall(-100 < x < 100 for x in array)\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ an array of integers. You should find the sum of the integers with even indexes\
    \ (0th, 2nd, 4th...).\nThen multiply this summed number and the final element\
    \ of the array together. Don't forget that the first element has an index of 0.\n\
    For an empty array, the result will always be 0 (zero).\nExample:\n>>> even_last(array(0,\
    \ 1, 2, 3, 4, 5))\n30\n>>> even_last(array(1, 3, 5))\n30\n>>> even_last(array(6))\n\
    36\n>>> even_last(array())\n0\n*/\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given an\
    \ array of integers, return a new array with each value doubled.\n * For example:\n\
    \ * [1, 2, 3] --> [2, 4, 6]\n * For the beginner, try to use the map method -\
    \ it comes in very handy quite a lot so is a good one to know.\n */\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. On each move\
    \ you are allowed to increase exactly one of its element by one. \nFind the minimal\
    \ number of moves required to obtain a strictly increasing sequence from the input.\n\
    example:\n>>> array(1, 1, 1)\n3\n>>> array(2, 1)\n1\n>>> array(1, 2, 3)\n0\n*/\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given an\
    \ array of integers, return a new array where each element in the new array is\
    \ the number of smaller elements to the right of that element in the original\
    \ input array.\nFor example, given the array [3, 4, 9, 6, 1], return [1, 1, 2,\
    \ 1, 0], since:\nThere is 1 smaller element to the right of 3\nThere is 1 smaller\
    \ element to the right of 4\nThere are 2 smaller elements to the right of 9\n\
    There is 1 smaller element to the right of 6\nThere are no smaller elements to\
    \ the right of 1\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ a string of numbers between 0-9. Find the average of these numbers and return\
    \ it as a floored whole number (ie: no decimal places) written out as a string.\
    \ Eg:\n\n\"zero nine five two\" -> \"four\"\n\nIf the string is empty or includes\
    \ a number greater than 9, return \"n/a\"\n*/\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ a string of numbers between 0-9. Find the average of these numbers and return\
    \ it as a floored whole number (ie: no decimal places) written out as a string.\
    \ Eg:\n\"zero nine five two\" -> \"four\"\nIf the string is empty or includes\
    \ a number greater than 9, return \"n/a\"\n*/\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nWrite a function that takes an array of\
    \ integers and returns the sum of the integers after adding 1 to each.\nplusOneSum([1,\
    \ 2, 3, 4]); // 14\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tforeach\
    \ ($game as $key => $value) {\n\t\t$result[] = abs($value - $guess[$key]);\n\t\
    }\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. On each move\
    \ you are allowed to increase exactly one of its element by one. \nFind the minimal\
    \ number of moves required to obtain a strictly increasing sequence from the input.\n\
    \nExample\n\nFor inputArray = [1, 1, 1], the output should be\narrayChange(inputArray)\
    \ = 3.\n\nInput/Output\n\n[time limit] 4000ms (php)\n[input] array.integer inputArray\n\
    \nGuaranteed constraints:\n3 \u2264 inputArray.length \u2264 105,\n-105 \u2264\
    \ inputArray[i] \u2264 105.\n\n[output] integer\n\nThe minimal number of moves\
    \ needed to obtain a strictly increasing sequence from inputArray.\nIt's guaranteed\
    \ that for the given test cases the answer always fits signed 32-bit integer type.\n\
    */\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4,\
    \ 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers between 0-9.\
    \ Find the average of these numbers and return it as a floored whole number (ie:\
    \ no decimal places) written out as a string. Eg:\n\"zero nine five two\" -> \"\
    four\"\nIf the string is empty or includes a number greater than 9, return \"\
    n/a\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2,\
    \ 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4,\
    \ 2, -2];\n$result = compare($game, $guess);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 3\n    [5] => 3\n)\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers.\nYou\
    \ have to find the sum of all the numbers in the string.\nexample:\n>>> sum_of_numbers(\"\
    1abc33xyz22\")\n56\n>>> sum_of_numbers(\"abc\")\n0\n>>> sum_of_numbers(\"0123\"\
    )\n6\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2,\
    \ 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nGiven a string, return a new string that\
    \ has transformed based on the input:\nChange case of every character, ie. lower\
    \ case to upper case, upper case to lower case.\nReverse the order of words from\
    \ the input.\nFor example:\nstringTransform(\"Example Input\")/string_transform(\"\
    Example Input\") (depending on the language you are completing the Kata in) should\
    \ return 'iNPUT eXAMPLE'\nYou may assume the input only contain English alphabet\
    \ and spaces.\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ an array of integers. On each move you are allowed to increase exactly one of\
    \ its element by one. \nFind the minimal number of moves required to obtain a\
    \ strictly increasing sequence from the input.\nExample\nFor inputArray = [1,\
    \ 1, 1], the output should be\narrayChange(inputArray) = 3.\nInput/Output\n[execution\
    \ time limit] 4 seconds (php)\n[input] array.integer inputArray\nGuaranteed constraints:\n\
    3 \u2264 inputArray.length \u2264 105,\n-105 \u2264 inputArray[i] \u2264 105.\n\
    [output] integer\nThe minimal number of moves needed to obtain a strictly increasing\
    \ sequence from inputArray.\nIt's guaranteed that for the given test cases the\
    \ answer always fits signed 32-bit integer type.\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ a string of numbers between 0-9. Find the average of these numbers and return\
    \ it as a floored whole number (ie: no decimal places) written out as a string.\
    \ Eg:\n\n\"zero nine five two\" -> \"four\"\n\nIf the string is empty or includes\
    \ a number greater than 9, return \"n/a\"\n*/\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nGiven an array of integers, return the\
    \ sum of the integers after adding 1 to each.\n\nplusOneSum([1, 2, 3, 4]); //\
    \ 14\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2,\
    \ 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nWrite a function that takes a string and returns\
    \ an array of the repeated characters (letters, numbers, whitespace) in the string.\n\
    \nFor example:\n\nrepeatedCharacters(\"Programming\") // => [\"r\", \"g\", \"\
    m\"]\nrepeatedCharacters(\"Combination\") // => [\"o\", \"i\", \"n\"]\nrepeatedCharacters(\"\
    Pet\") // => []\nrepeatedCharacters(\"Paper\") // => [\"p\"]\nrepeatedCharacters(\"\
    Baseless\") // => [\"s\", \"e\"]\n*/\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2,\
    \ 3, 4, 2, -2];\n$result = compare($game, $guess);\necho \"<pre>\";\nprint_r($result);\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n\
    \    [4] => 3\n    [5] => 3\n)\n</pre>"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given a string of numbers.\nThe\
    \ string contains only numbers, but you can see that there are some errors in\
    \ the string.\nThe errors are that some numbers are duplicated, some numbers are\
    \ missing.\nYour task is to find the missing numbers and the duplicated numbers.\n\
    Return an array of two arrays, the first array contains the duplicated numbers,\
    \ the second array contains the missing numbers.\nexample:\n>>> find_errors(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\
    \ 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98,\
    \ 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114,\
    \ 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\
    \ 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146,\
    \ 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157,\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmpidsv23aq.php on
    line 26

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ foreach ($game as $key => $value) {\n        $result[] = abs($value - $guess[$key]);\n\
    \    }\n    return $result;\n}\n\n/*\n * You are given an array of integers. Each\
    \ integer represents a jump of its value in the array.\n * For instance, the integer\
    \ 2 represents a jump of 2 indices forward in the array; the integer -3\n * represents\
    \ a jump of 3 indices backward in the array. If a jump spills past the array's\
    \ bounds,\n * it wraps over to the other side. For instance, a jump of -1 at index\
    \ 0 brings us to the last index in the array.\n * Similarly, a jump of 1 at the\
    \ last index in the array brings us to index 0. Write a function that returns\
    \ a boolean\n * representing whether the jumps in the array form a single cycle.\
    \ A single cycle occurs if, starting at any index in the\n * array and following\
    \ the jumps, every element in the array is visited exactly once before landing\
    \ back on the starting index.\n *\n * For example, given the array [2, 3, 1, -4,\
    \ -4, 2], the function should return true, as the jumps up to index 5\n * form\
    \ a single cycle. Index 0 -> 2 -> 3 -> 1 -> -4 -> -4 -> 2 -> 0.\n *\n * Given\
    \ the array [1, 1, 1, 1, 2], the function should return false, as there is no\
    \ single cycle (the cycle from index 3\n * back to 3 is not complete).\n *\n *\
    \ Given the array [1, -1, 1, -1], the function should return false, as there is\
    \ no single cycle (the cycle from index 1\n * back to 1 is not complete).\n *\n\
    \ * Given the array [1, 1, 2, 2, -1, -2, -3, -4], the function should return false,\
    \ as there is no single cycle (the cycle\n * from index 5 back to 5 is not complete).\n\
    \ *\n * Given the array [1, 1, 2, 2, -1, -2, -3, -4, -3, -2, -1, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 22 in /tmp/tmpn__3d4ah.php on
    line 22

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. Each integer\
    \ represents a jump of its value in the array. \nFor instance, the integer 2 represents\
    \ a jump of 2 indices forward in the array; the integer -3 represents a jump of\
    \ 3 indices backward in the array. \nIf a jump spills past the array's bounds,\
    \ it wraps over to the other side. \nFor instance, a jump of -1 at index 0 brings\
    \ us to the last index in the array. \nSimilarly, a jump of 1 at the last index\
    \ in the array brings us to index 0.\nWrite a function that returns a boolean\
    \ representing whether the jumps in the array form a single cycle. \nA single\
    \ cycle occurs if, starting at any index in the array and following the jumps,\
    \ every element in the array is visited exactly once before landing back on the\
    \ starting index.\nexample:\n>>> hasSingleCycle(array(2, 3, 1, -4, -4, 2))\ntrue\n\
    >>> hasSingleCycle(array(1, 1, 1, 1, 2))\nfalse\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ foreach ($game as $key => $value) {\n        $result[] = abs($value - $guess[$key]);\n\
    \    }\n    return $result;\n}\n\n/*\n * \n */\n\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nWrite a function that takes a string and\
    \ returns an array of the repeated characters (letters, numbers, whitespace) in\
    \ the string.\n\nIf a char appears more than once, only show it once in the result\
    \ array.\n\nExample:\n\nrepeatedCharacters(\"Programming\")    // => [\"r\", \"\
    g\", \"m\"]\nrepeatedCharacters(\"Combination\")    // => [\"o\", \"i\", \"n\"\
    ]\nrepeatedCharacters(\"Pet\")            // => []\nrepeatedCharacters(\"Paper\"\
    )          // => [\"p\"]\nrepeatedCharacters(\"Baseless\")       // => [\"s\"\
    , \"e\"]\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n  $result = [];\n  for\
    \ ($i = 0; $i < count($game); $i++) {\n    if ($game[$i] == $guess[$i]) {\n  \
    \    $result[] = 0;\n    } else {\n      $result[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n  }\n  return $result;\n}\n\n/*\nYou are given a string of numbers between\
    \ 0-9. Find the average of these numbers and return it as a floored whole number\
    \ (ie: no decimal places) written out as a string. Eg:\n\"zero nine five two\"\
    \ -> \"four\"\nIf the string is empty or includes a number greater than 9, return\
    \ \"n/a\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ foreach ($game as $key => $value) {\n        $result[] = abs($value - $guess[$key]);\n\
    \    }\n    return $result;\n}\n\n/*\nYou are given a string of numbers between\
    \ 0-9. Find the average of these numbers and return it as a floored whole number\
    \ (ie: no decimal places) written out as a string. Eg:\n\n\"zero nine five two\"\
    \ -> \"four\"\n\nIf the string is empty or includes a number greater than 9, return\
    \ \"n/a\"\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4,\
    \ 2, -2];\n\nprint_r(compare($game, $guess));\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 3\n    [5] => 3\n)\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n  $result = [];\n  for\
    \ ($i = 0; $i < count($game); $i++) {\n    if ($game[$i] == $guess[$i]) {\n  \
    \    $result[] = 0;\n    } else {\n      $result[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n  }\n  return $result;\n}\n\n/*\nGiven a string, return a new string that\
    \ has transformed based on the input:\nChange case of every character, ie. lower\
    \ case to upper case, upper case to lower case.\nReverse the order of words from\
    \ the input.\nFor example:\nstringTransformer('Example Input')/string_transformer(\"\
    Example Input\") (depending on the language you are completing the Kata in) should\
    \ return 'iNPUT eXAMPLE'\nYou may assume the input only contain English alphabet\
    \ and spaces.\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\nprint_r(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4,\
    \ 2, -2]));\nprint_r(compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]));\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 0\n    [1] => 0\n    [2] => 0\n    [3] => 0\n    [4]\
    \ => 3\n    [5] => 3\n)\nArray\n(\n    [0] => 4\n    [1] => 4\n    [2] => 1\n\
    \    [3] => 0\n    [4] => 0\n    [5] => 6\n)\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ a string of numbers between 0-9. Find the average of these numbers and return\
    \ it as a floored whole number (ie: no decimal places) written out as a string.\
    \ Eg:\n\n\"zero nine five two\" -> \"four\"\n\nIf the string is empty or includes\
    \ a number greater than 9, return \"n/a\"\n*/\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. On each move\
    \ you are allowed to increase exactly one of its element by one. \nFind the minimal\
    \ number of moves required to obtain a strictly increasing sequence from the input.\n\
    Example\nFor inputArray = [1, 1, 1], the output should be\narrayChange(inputArray)\
    \ = 3.\nInput/Output\n[input] array.integer inputArray\nConstraints:\n3 \u2264\
    \ inputArray.length \u2264 105,\n-105 \u2264 inputArray[i] \u2264 105.\n[output]\
    \ integer\nThe minimal number of moves needed to obtain a strictly increasing\
    \ sequence from inputArray.\nIt's guaranteed that for the given test cases the\
    \ answer always fits signed 32-bit integer type.\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers. On\
    \ each move you are allowed to increase exactly one of its element by one. \n\
    Find the minimal number of moves required to obtain a strictly increasing sequence\
    \ from the input.\nexample:\n>>> array(1, 1, 1)\n3\n>>> array(2, 1, 10, 1)\n12\n\
    >>> array(2, 3, 3, 5, 5, 5, 4, 12, 12, 10, 15)\n13\n*/\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ a string of numbers.\nYou need to find the maximum number that can be made from\
    \ the digits of the given string.\nexample:\n>>> maxNumber(\"123876\")\n863211\n\
    >>> maxNumber(\"9283476\")\n9876432\n*/\nfunction candidate(...$args) {\n    return\
    \ compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ a string of numbers.\nYou need to find the maximum value that can be obtained\
    \ by summing up some (possibly, zero) of its digits.\nThe input string always\
    \ contains at least one digit.\nexample:\n>>> max_number(\"1234\")\n10\n>>> max_number(\"\
    9\")\n9\n>>> max_number(\"9999\")\n36\n>>> max_number(\"0\")\n0\n*/\nfunction\
    \ candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ foreach ($game as $key => $value) {\n        $result[] = abs($value - $guess[$key]);\n\
    \    }\n    return $result;\n}\n\n/*\nYou are given an array of integers. On each\
    \ move you are allowed to increase exactly one of its element by one. \nFind the\
    \ minimal number of moves required to obtain a strictly increasing sequence from\
    \ the input.\nExample\nFor inputArray = [1, 1, 1], the output should be\narrayChange(inputArray)\
    \ = 3.\nInput/Output\n[execution time limit] 4 seconds (php)\n[input] array.integer\
    \ inputArray\nGuaranteed constraints:\n3 \u2264 inputArray.length \u2264 105,\n\
    -105 \u2264 inputArray[i] \u2264 105.\n[output] integer\nThe minimal number of\
    \ moves needed to obtain a strictly increasing sequence from inputArray.\nIt's\
    \ guaranteed that for the given test cases the answer always fits signed 32-bit\
    \ integer type.\n*/\nfunction candidate(...$args) {\n    return compare(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !==\
    \ array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 5), array(-1,\
    \ 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\nfunction candidate(...$args)\
    \ {\n    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 26 in /tmp/tmpypow5v6w.php on
    line 26

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n    $result = [];\n   \
    \ for ($i = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given a string,\
    \ return true if it is a palindrome, and false if it is not.\n * A palindrome\
    \ is a string that is the same forwards and backwards.\n * example:\n * >>> isPalindrome(\"\
    racecar\")\n * true\n * >>> isPalindrome(\"notapalindrome\")\n * false\n */\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n/*\nYou are given an array of integers.\n\
    Return an array of the same size where the element at each index is the product\
    \ of all the elements in the original array except for the element at that index.\n\
    For example, an input of [1, 2, 3, 4, 5] should return [120, 60, 40, 30, 24].\n\
    You cannot use division in this problem.\n*/\nfunction candidate(...$args) {\n\
    \    return compare(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)) !== array(0, 0, 0, 0, 3, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(0, 0, 0, 0, 0, 0),\
    \ array(0, 0, 0, 0, 0, 0)) !== array(0, 0, 0, 0, 0, 0)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3), array(-1, -2, -3)) !== array(2,\
    \ 4, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0, 1)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* I think we all remember that feeling when the result of some\
    \ long-awaited\nevent is finally known. The feelings and thoughts you have at\
    \ that moment are\ndefinitely worth noting down and comparing.\nYour task is to\
    \ determine if a person correctly guessed the results of a number of matches.\n\
    You are given two arrays of scores and guesses of equal length, where each index\
    \ shows a match. \nReturn an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\nthe value is 0, and if not, the\
    \ value is the absolute difference between the guess and the score.\nexample:\n\
    >>> compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\narray(0, 0, 0,\
    \ 0, 3, 3)\n>>> compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\narray(4,\
    \ 4, 1, 0, 0, 6)*/\nfunction compare($game, $guess) {\n\t$result = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $result;\n}\n\n/*You are given an array of integers. On each move\
    \ you are allowed to increase exactly one of its element by one. \nFind the minimal\
    \ number of moves required to obtain a strictly increasing sequence from the input.\n\
    example:\n>>> array(1, 1, 1)\n3\n>>> array(2, 1)\n1\n>>> array(2, 3, 1, 2)\n4*/\n\
    function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\
    \ !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
    \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0,\
    \ 0, 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
