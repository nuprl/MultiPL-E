name: HumanEval_147_get_max_triples
language: php
prompt: "<?php\n/* You are given a positive integer n. You have to create an integer\
  \ array a of length n.\nFor each i (1 \u2264 i \u2264 n), the value of a[i] = i\
  \ * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j\
  \ < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\nExample :\n>>> get_max_triples(5)\n\
  1\nExplanation: \na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).*/\n\
  function get_max_triples($n) {\n"
tests: "function candidate(...$args) {\n    return get_max_triples(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(5) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(6) !== 4) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(10) !== 36) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(100) !== 53361) { throw new Exception(\"Test failed!\"); }\n\
  }\n\ntest();"
completions: ["    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i\
    \ * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++)\
    \ {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j\
    \ + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 ==\
    \ 0) {\n                    $count++;\n                }\n            }\n    \
    \    }\n    }\n    return $count;\n}\n\n/*\n * Test cases\n *\n */\necho get_max_triples(5)\
    \ . PHP_EOL;\necho get_max_triples(3) . PHP_EOL;\necho get_max_triples(10) . PHP_EOL;\n\
    echo get_max_triples(1) . PHP_EOL;\necho get_max_triples(2) . PHP_EOL;\necho get_max_triples(4)\
    \ . PHP_EOL;\necho get_max_triples(6) . PHP_EOL;\necho get_max_triples(7) . PHP_EOL;\n\
    echo get_max_triples(8) . PHP_EOL;\necho get_max_triples(9) . PHP_EOL;", "   \
    \ $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i +\
    \ 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for\
    \ ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*\n * Test cases\n *\n */\necho get_max_triples(5) . \"\\n\";\necho get_max_triples(6)\
    \ . \"\\n\";\necho get_max_triples(7) . \"\\n\";\necho get_max_triples(8) . \"\
    \\n\";\necho get_max_triples(9) . \"\\n\";\necho get_max_triples(10) . \"\\n\"\
    ;\necho get_max_triples(11) . \"\\n\";\necho get_max_triples(12) . \"\\n\";\n\
    echo get_max_triples(13) . \"\\n\";\necho get_max_triples(14) . \"\\n\";\necho\
    \ get_max_triples(15) . \"\\n\";\necho get_max_triples(16) . \"\\n\";\necho get_max_triples(17)\
    \ . \"\\n\";\necho get_max_triples(18) . \"\\n\";\necho get_max_triples(19) .\
    \ \"\\n\";\necho get_max_triples(20) . \"\\n\";\necho get_max_triples(21) . \"\
    \\n\";\necho get_max_triples(22) . \"\\n\";\necho get_max_triples(23) . \"\\n\"\
    ;\necho get_max_triples(24) . \"\\n\";\necho get_max_triples(25) . \"\\n\";\n\
    echo get_max_triples(26) . \"\\n\";\n", "    $a = [];\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for\
    \ ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++)\
    \ {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n            \
    \    }\n            }\n        }\n    }\n    return $count;\n}\n\n/*\n * Test\
    \ cases\n *\n */\necho get_max_triples(5) . PHP_EOL;\necho get_max_triples(10)\
    \ . PHP_EOL;\necho get_max_triples(20) . PHP_EOL;\necho get_max_triples(30) .\
    \ PHP_EOL;\necho get_max_triples(50) . PHP_EOL;\necho get_max_triples(100) . PHP_EOL;\n\
    echo get_max_triples(200) . PHP_EOL;\necho get_max_triples(300) . PHP_EOL;\necho\
    \ get_max_triples(500) . PHP_EOL;\necho get_max_triples(1000) . PHP_EOL;\necho\
    \ get_max_triples(2000) . PHP_EOL;\necho get_max_triples(3000) . PHP_EOL;\necho\
    \ get_max_triples(5000) . PHP_EOL;\necho get_max_triples(10000) . PHP_EOL;\necho\
    \ get_max_triples(20000) . PHP_EOL;\necho get_max_triples(30000) . PHP_EOL;\n\
    echo get_max_triples(50000) . PHP_EOL;\necho get_max_triples(100000) . PHP_EOL;\n\
    echo get_max_triples(200000) . PHP_EOL;\necho get_", "    $arr = [];\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $arr[] = $i * $i - $i + 1;\n    }\n    $count\
    \ = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j <\
    \ $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n          \
    \      if (($arr[$i] + $arr[$j] + $arr[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*\n * Test cases\n *\n */\necho get_max_triples(5);", "    $a = [];\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count\
    \ = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j <\
    \ $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n          \
    \      if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i\
    \ - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n \
    \       for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1;\
    \ $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n\
    \                    $count++;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i\
    \ = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n\
    \            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] +\
    \ $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n              \
    \  }\n            }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a =\
    \ [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[]\
    \ = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++)\
    \ {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j\
    \ + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 ==\
    \ 0) {\n                    $count++;\n                }\n            }\n    \
    \    }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i\
    \ <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n \
    \   for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1;\
    \ $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if\
    \ (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n   \
    \             }\n            }\n        }\n    }\n    return $count;\n}\n/*",
  "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i +\
    \ 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for\
    \ ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*\n>>> get_max_triples(5)\n1\n>>> get_max_triples(10)\n5\n>>> get_max_triples(100)\n\
    1617\n>>> get_max_triples(1000)\n666087\n>>> get_max_triples(10000)\n26671678\n\
    >>> get_max_triples(100000)\n1066902386\n*/", "    $a = [];\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n\
    \    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1;\
    \ $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if\
    \ (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n   \
    \             }\n            }\n        }\n    }\n    return $count;\n}\n\n/*",
  "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i +\
    \ 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for\
    \ ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i\
    \ - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n \
    \       for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1;\
    \ $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n\
    \                    $count++;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i\
    \ = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n\
    \            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] +\
    \ $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n              \
    \  }\n            }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a =\
    \ range(1, $n);\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "\t$a = [];\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$a[] =\
    \ $i * $i - $i + 1;\n\t}\n\t$count = 0;\n\tfor ($i = 0; $i < $n - 2; $i++) {\n\
    \t\tfor ($j = $i + 1; $j < $n - 1; $j++) {\n\t\t\tfor ($k = $j + 1; $k < $n; $k++)\
    \ {\n\t\t\t\tif (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n\t\t\t\t\t$count++;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}\n\n/* You are given a positive\
    \ integer n. You have to create an integer array a of length n.\nFor each i (1\
    \ \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\nReturn the number of\
    \ triples (a[i], a[j], a[k]) of a where i < j < k, \nand a[i] + a[j] + a[k] is\
    \ a multiple of 3.\nExample :\n>>> get_max_triples(5)\n1\nExplanation: \na = [1,\
    \ 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).*/", "    $a = [];\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count\
    \ = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n;\
    \ $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if\
    \ (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n   \
    \             }\n            }\n        }\n    }\n    return $count;\n}\n\n/*",
  "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i +\
    \ 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for\
    \ ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*\n * You are given a positive integer\
    \ n. You have to create an integer array a of length n.\nFor each i (1 \u2264\
    \ i \u2264 n), the value of a[i] = i * i - i + 1.\nReturn the number of triples\
    \ (a[i], a[j], a[k]) of a where i < j < k, \nand a[i] + a[j] + a[k] is a multiple\
    \ of 3.\nExample :\n>>> get_max_triples(5)\n1\nExplanation: \na = [1, 3, 7, 13,\
    \ 21]\nThe only valid triple is (1, 7, 13).\n*/", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i\
    \ - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n;\
    \ $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n      \
    \              $count++;\n                }\n            }\n        }\n    }\n\
    \    return $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0;\
    \ $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n     \
    \       for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j]\
    \ + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n  \
    \          }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\
    \    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i\
    \ + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n\
    \                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                \
    \    $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\necho get_max_triples(5);", "    $a =\
    \ [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\necho\
    \ get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n  \
    \      $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i <\
    \ $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n          \
    \  for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] +\
    \ $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n    \
    \        }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n \
    \   $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i +\
    \ 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n  \
    \              if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                  \
    \  $count++;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }\n\n/*", "    $a = range(1, $n);\n    $a = array_map(function($x) {\n       \
    \ return $x * $x - $x + 1;\n    }, $a);\n    $count = 0;\n    for ($i = 0; $i\
    \ < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n        \
    \    for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j]\
    \ + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n  \
    \          }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\
    \    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i\
    \ + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n\
    \                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                \
    \    $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i\
    \ - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n \
    \       for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1;\
    \ $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n\
    \                    $count++;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}\necho get_max_triples(5);", "    $a = [];\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count\
    \ = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j <\
    \ $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n          \
    \      if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*", "    $count = 0;\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = $i\
    \ + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n    \
    \            if (($i * $i - $i + 1 + $j * $j - $j + 1 + $k * $k - $k + 1) % 3\
    \ == 0) {\n                    $count++;\n                }\n            }\n \
    \       }\n    }\n    return $count;\n}\n\n/*\n * Test\n */ \nclass GetMaxTriplesTest\
    \ extends TestCase {\n    private function revTest($actual, $expected) {\n   \
    \     $this->assertEquals($expected, $actual);\n    }\n    public function testBasics()\
    \ {        \n        $this->revTest(get_max_triples(5), 1);\n        $this->revTest(get_max_triples(6),\
    \ 2);\n        $this->revTest(get_max_triples(7), 3);\n        $this->revTest(get_max_triples(8),\
    \ 4);\n        $this->revTest(get_max_triples(9), 5);\n        $this->revTest(get_max_triples(10),\
    \ 6);\n        $this->revTest(get_max_triples(11), 7);\n        $this->revTest(get_max_triples(12),\
    \ 8);\n        $this->revTest(get_max_triples(13), 9);\n        $this->revTest(get_max_triples(14),\
    \ 10);\n        $this->revTest(get_max_triples(15), 11);\n        $this->revTest(get_max_triples(16),\
    \ 12);\n        $this->revTest(get_max_triples(17), 13);\n        $this->revTest(get_max_triples(18),\
    \ 14);\n        $this->revTest(get_max_triples(19), 15);\n        $this->revTest(get_max_triples(20),\
    \ 16);\n        $this->revTest(get_max_tri", "    $a = [];\n    for ($i = 1; $i\
    \ <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n \
    \   for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1;\
    \ $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if\
    \ (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n   \
    \             }\n            }\n        }\n    }\n    return $count;\n}\n\n/*",
  "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i +\
    \ 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for\
    \ ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\necho get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for\
    \ ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++)\
    \ {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n            \
    \    }\n            }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a\
    \ = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\necho get_max_triples(5);", "    $a =\
    \ [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\necho\
    \ get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n  \
    \      $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i <\
    \ $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n          \
    \  for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] +\
    \ $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n    \
    \        }\n        }\n    }\n    return $count;\n}\n\necho get_max_triples(5);",
  "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i +\
    \ 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n\
    \                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                \
    \    $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\necho\
    \ get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n  \
    \      $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i <\
    \ $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n          \
    \  for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] +\
    \ $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n    \
    \        }\n        }\n    }\n    return $count;\n}\necho get_max_triples(5);",
  "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i +\
    \ 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for\
    \ ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\necho get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for\
    \ ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++)\
    \ {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n            \
    \    }\n            }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a\
    \ = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\necho\
    \ get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n  \
    \      $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i <\
    \ $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n          \
    \  for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] +\
    \ $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n    \
    \        }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n \
    \   $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i +\
    \ 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n  \
    \              if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                  \
    \  $count++;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i\
    \ * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++)\
    \ {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j\
    \ + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 ==\
    \ 0) {\n                    $count++;\n                }\n            }\n    \
    \    }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i\
    \ <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n \
    \   for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1;\
    \ $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if\
    \ (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n   \
    \             }\n            }\n        }\n    }\n    return $count;\n}\n\n/*",
  "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i +\
    \ 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for\
    \ ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\necho get_max_triples(5);", "    $a =\
    \ [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\necho get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for\
    \ ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++)\
    \ {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n            \
    \    }\n            }\n        }\n    }\n    return $count;\n}\necho get_max_triples(5);",
  "    $count = 0;\n    for ($i = 1; $i < $n; $i++) {\n        for ($j = $i + 1; $j\
    \ < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n            \
    \    if (($i * $i - $i + 1 + $j * $j - $j + 1 + $k * $k - $k + 1) % 3 == 0) {\n\
    \                    $count++;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i\
    \ = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n\
    \            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] +\
    \ $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n              \
    \  }\n            }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a =\
    \ [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\necho get_max_triples(5);", "    $a =\
    \ [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n \
    \               if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                 \
    \   $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i\
    \ - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n \
    \       for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1;\
    \ $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n\
    \                    $count++;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i\
    \ = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n\
    \            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] +\
    \ $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n              \
    \  }\n            }\n        }\n    }\n    return $count;\n}\necho get_max_triples(5);",
  "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i +\
    \ 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for\
    \ ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\necho get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for\
    \ ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++)\
    \ {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n            \
    \    }\n            }\n        }\n    }\n    return $count;\n}", "    $a = [];\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\
    \    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i\
    \ + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n\
    \                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                \
    \    $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\necho get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for\
    \ ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++)\
    \ {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n            \
    \    }\n            }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a\
    \ = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*\n * Test cases\n */\necho get_max_triples(5) . \"\\n\";\necho\
    \ get_max_triples(10) . \"\\n\";\necho get_max_triples(15) . \"\\n\";\necho get_max_triples(20)\
    \ . \"\\n\";\necho get_max_triples(25) . \"\\n\";\necho get_max_triples(30) .\
    \ \"\\n\";\necho get_max_triples(35) . \"\\n\";\necho get_max_triples(40) . \"\
    \\n\";\necho get_max_triples(45) . \"\\n\";\necho get_max_triples(50) . \"\\n\"\
    ;\necho get_max_triples(55) . \"\\n\";\necho get_max_triples(60) . \"\\n\";\n\
    echo get_max_triples(65) . \"\\n\";\necho get_max_triples(70) . \"\\n\";\necho\
    \ get_max_triples(75) . \"\\n\";\necho get_max_triples(80) . \"\\n\";\necho get_max_triples(85)\
    \ . \"\\n\";\necho get_max_triples(90) . \"\\n\";\necho get_max_triples(95) .\
    \ \"\\n\";\necho get_max_triples(100) . \"\\n\";", "    $a = [];\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count\
    \ = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j <\
    \ $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n          \
    \      if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i\
    \ - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n \
    \       for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1;\
    \ $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n\
    \                    $count++;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n        \
    \    for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j]\
    \ + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n  \
    \          }\n        }\n    }\n    return $count;\n}\n\n/*\n * Test cases\n *\n\
    \ */\necho get_max_triples(5) . PHP_EOL;\necho get_max_triples(10) . PHP_EOL;\n\
    echo get_max_triples(15) . PHP_EOL;\necho get_max_triples(20) . PHP_EOL;\necho\
    \ get_max_triples(25) . PHP_EOL;\necho get_max_triples(30) . PHP_EOL;\necho get_max_triples(35)\
    \ . PHP_EOL;\necho get_max_triples(40) . PHP_EOL;\necho get_max_triples(45) .\
    \ PHP_EOL;\necho get_max_triples(50) . PHP_EOL;", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*\n * Test cases\n *\n */\necho get_max_triples(5) . PHP_EOL;\necho get_max_triples(10)\
    \ . PHP_EOL;\necho get_max_triples(15) . PHP_EOL;\necho get_max_triples(20) .\
    \ PHP_EOL;\necho get_max_triples(25) . PHP_EOL;\necho get_max_triples(30) . PHP_EOL;\n\
    echo get_max_triples(35) . PHP_EOL;\necho get_max_triples(40) . PHP_EOL;\necho\
    \ get_max_triples(45) . PHP_EOL;\necho get_max_triples(50) . PHP_EOL;", "    $a\
    \ = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n/*", "    $a = [];\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n\
    \    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1;\
    \ $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if\
    \ (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n   \
    \             }\n            }\n        }\n    }\n    return $count;\n}\n\n/*\n\
    You are given a positive integer n. You have to create an integer array a of length\
    \ n.\nFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\nReturn\
    \ the number of triples (a[i], a[j], a[k]) of a where i < j < k, \nand a[i] +\
    \ a[j] + a[k] is a multiple of 3.\nExample :\n>>> get_max_triples(5)\n1\nExplanation:\
    \ \na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).\n*/", "    $a\
    \ = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\necho get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for\
    \ ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++)\
    \ {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n            \
    \    }\n            }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a\
    \ = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j\
    \ + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 ==\
    \ 0) {\n                    $count++;\n                }\n            }\n    \
    \    }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i\
    \ <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n \
    \   for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1;\
    \ $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if\
    \ (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n   \
    \             }\n            }\n        }\n    }\n    return $count;\n}\necho\
    \ get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n  \
    \      $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i <\
    \ $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n          \
    \  for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] +\
    \ $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n    \
    \        }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n \
    \   $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i +\
    \ 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n  \
    \              if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                  \
    \  $count++;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }\n\n/*\n * Test cases\n *\n */\necho get_max_triples(5) . PHP_EOL;\necho get_max_triples(10)\
    \ . PHP_EOL;\necho get_max_triples(15) . PHP_EOL;\necho get_max_triples(20) .\
    \ PHP_EOL;\necho get_max_triples(25) . PHP_EOL;\necho get_max_triples(30) . PHP_EOL;\n\
    echo get_max_triples(35) . PHP_EOL;\necho get_max_triples(40) . PHP_EOL;\necho\
    \ get_max_triples(45) . PHP_EOL;\necho get_max_triples(50) . PHP_EOL;", "    $a\
    \ = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*\n * Test cases\n *\n */\necho get_max_triples(5)\
    \ . PHP_EOL;\necho get_max_triples(10) . PHP_EOL;\necho get_max_triples(15) .\
    \ PHP_EOL;\necho get_max_triples(20) . PHP_EOL;\necho get_max_triples(25) . PHP_EOL;\n\
    echo get_max_triples(30) . PHP_EOL;\necho get_max_triples(35) . PHP_EOL;\necho\
    \ get_max_triples(40) . PHP_EOL;\necho get_max_triples(45) . PHP_EOL;\necho get_max_triples(50)\
    \ . PHP_EOL;", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[]\
    \ = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++)\
    \ {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j\
    \ + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 ==\
    \ 0) {\n                    $count++;\n                }\n            }\n    \
    \    }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i\
    \ <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n \
    \   for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1;\
    \ $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if\
    \ (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n   \
    \             }\n            }\n        }\n    }\n    return $count;\n}\necho\
    \ get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n  \
    \      $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i <\
    \ $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n          \
    \  for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] +\
    \ $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n    \
    \        }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n \
    \   $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i +\
    \ 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n  \
    \              if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                  \
    \  $count++;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i\
    \ * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++)\
    \ {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j\
    \ + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 ==\
    \ 0) {\n                    $count++;\n                }\n            }\n    \
    \    }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i\
    \ <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n \
    \   for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1;\
    \ $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if\
    \ (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n   \
    \             }\n            }\n        }\n    }\n    return $count;\n}\n\n/*",
  "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i +\
    \ 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for\
    \ ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*\nYou are given a positive integer n. You have to create an\
    \ integer array a of length n.\nFor each i (1 \u2264 i \u2264 n), the value of\
    \ a[i] = i * i - i + 1.\nReturn the number of triples (a[i], a[j], a[k]) of a\
    \ where i < j < k, \nand a[i] + a[j] + a[k] is a multiple of 3.\nExample :\n>>>\
    \ get_max_triples(5)\n1\nExplanation: \na = [1, 3, 7, 13, 21]\nThe only valid\
    \ triple is (1, 7, 13).\n*/", "    $a = [];\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0;\
    \ $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n     \
    \       for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j]\
    \ + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n  \
    \          }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\
    \    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i\
    \ + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n\
    \                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                \
    \    $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*\n * Test cases\n *\n */\necho get_max_triples(5)\
    \ . PHP_EOL;\necho get_max_triples(10) . PHP_EOL;\necho get_max_triples(100) .\
    \ PHP_EOL;", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] =\
    \ $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++)\
    \ {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j\
    \ + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 ==\
    \ 0) {\n                    $count++;\n                }\n            }\n    \
    \    }\n    }\n    return $count;\n}\necho get_max_triples(5);", "    $a = [];\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\
    \    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i\
    \ + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n\
    \                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                \
    \    $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\necho\
    \ get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n  \
    \      $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i <\
    \ $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n          \
    \  for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] +\
    \ $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n    \
    \        }\n        }\n    }\n    return $count;\n}\necho get_max_triples(5);",
  "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i +\
    \ 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for\
    \ ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /* You are given a positive integer n. You have to create an integer array a of\
    \ length n.\nFor each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i +\
    \ 1.\nReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n\
    and a[i] + a[j] + a[k] is a multiple of 3.\nExample :\n>>> get_max_triples(5)\n\
    1\nExplanation: \na = [1, 3, 7, 13, 21]\nThe only valid triple is (1, 7, 13).*/",
  "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i +\
    \ 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for\
    \ ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i\
    \ - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n \
    \       for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1;\
    \ $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n\
    \                    $count++;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i\
    \ = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n\
    \            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] +\
    \ $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n              \
    \  }\n            }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a =\
    \ [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\necho get_max_triples(5);", "    $a =\
    \ [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*\n * Test cases\n *\n */\necho get_max_triples(5) . PHP_EOL;\necho get_max_triples(10)\
    \ . PHP_EOL;\necho get_max_triples(15) . PHP_EOL;\necho get_max_triples(20) .\
    \ PHP_EOL;\necho get_max_triples(25) . PHP_EOL;\necho get_max_triples(30) . PHP_EOL;\n\
    echo get_max_triples(35) . PHP_EOL;\necho get_max_triples(40) . PHP_EOL;\necho\
    \ get_max_triples(45) . PHP_EOL;\necho get_max_triples(50) . PHP_EOL;", "    $a\
    \ = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*", "\t$a = [];\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$a[] = $i * $i - $i +\
    \ 1;\n\t}\n\t$count = 0;\n\tfor ($i = 0; $i < $n - 2; $i++) {\n\t\tfor ($j = $i\
    \ + 1; $j < $n - 1; $j++) {\n\t\t\tfor ($k = $j + 1; $k < $n; $k++) {\n\t\t\t\t\
    if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n\t\t\t\t\t$count++;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn $count;\n}\n\n/*\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "    $a = [];\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\
    \    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i\
    \ + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n\
    \                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                \
    \    $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\necho get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for\
    \ ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++)\
    \ {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n            \
    \    }\n            }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a\
    \ = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\necho get_max_triples(5);", "    $a =\
    \ [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\necho\
    \ get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n  \
    \      $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i <\
    \ $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n          \
    \  for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] +\
    \ $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n    \
    \        }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n \
    \   $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i +\
    \ 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n  \
    \              if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                  \
    \  $count++;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i\
    \ * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++)\
    \ {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j\
    \ + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 ==\
    \ 0) {\n                    $count++;\n                }\n            }\n    \
    \    }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i\
    \ <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n \
    \   for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1;\
    \ $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if\
    \ (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n   \
    \             }\n            }\n        }\n    }\n    return $count;\n}\n/*",
  "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i +\
    \ 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for\
    \ ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\necho get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for\
    \ ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++)\
    \ {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n            \
    \    }\n            }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a\
    \ = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\necho get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for\
    \ ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++)\
    \ {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n            \
    \    }\n            }\n        }\n    }\n    return $count;\n}\necho get_max_triples(5);",
  "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i +\
    \ 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n\
    \                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                \
    \    $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i\
    \ - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   for ($j = $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n;\
    \ $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n      \
    \              $count++;\n                }\n            }\n        }\n    }\n\
    \    return $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0;\
    \ $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n     \
    \       for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j]\
    \ + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n  \
    \          }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a = range(1,\
    \ $n);\n    $count = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ $i + 1; $j < $n; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n \
    \               if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                 \
    \   $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\necho\
    \ get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n  \
    \      $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i <\
    \ $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n          \
    \  for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] +\
    \ $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n    \
    \        }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n \
    \   $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i +\
    \ 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n  \
    \              if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                  \
    \  $count++;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i\
    \ * $i - $i + 1;\n    }\n    $triples = 0;\n    for ($i = 0; $i < $n - 2; $i++)\
    \ {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j\
    \ + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 ==\
    \ 0) {\n                    $triples++;\n                }\n            }\n  \
    \      }\n    }\n    return $triples;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i\
    \ - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n \
    \       for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1;\
    \ $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n\
    \                    $count++;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i\
    \ = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n\
    \            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] +\
    \ $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n              \
    \  }\n            }\n        }\n    }\n    return $count;\n}\necho get_max_triples(5);",
  "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i +\
    \ 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for\
    \ ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "\t$a = [];\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$a[] =\
    \ $i * $i - $i + 1;\n\t}\n\t$count = 0;\n\tfor ($i = 0; $i < $n - 2; $i++) {\n\
    \t\tfor ($j = $i + 1; $j < $n - 1; $j++) {\n\t\t\tfor ($k = $j + 1; $k < $n; $k++)\
    \ {\n\t\t\t\tif (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n\t\t\t\t\t$count++;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}\n\n/*", "    $a = [];\n  \
    \  for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n \
    \   $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i +\
    \ 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n  \
    \              if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                  \
    \  $count++;\n                }\n            }\n        }\n    }\n    return $count;\n\
    }\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i\
    \ * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++)\
    \ {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j\
    \ + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 ==\
    \ 0) {\n                    $count++;\n                }\n            }\n    \
    \    }\n    }\n    return $count;\n}\necho get_max_triples(5);", "    $a = [];\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\
    \    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i\
    \ + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n\
    \                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                \
    \    $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\necho get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for\
    \ ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++)\
    \ {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n            \
    \    }\n            }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a\
    \ = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\necho get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for\
    \ ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++)\
    \ {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n            \
    \    }\n            }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a\
    \ = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count =\
    \ 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n\
    \ - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n             \
    \   if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i\
    \ - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n \
    \       for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1;\
    \ $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n\
    \                    $count++;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}\necho get_max_triples(5);", "    $a = [];\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count\
    \ = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j <\
    \ $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n          \
    \      if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i\
    \ - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n \
    \       for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1;\
    \ $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n\
    \                    $count++;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i\
    \ = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n\
    \            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] +\
    \ $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n              \
    \  }\n            }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a =\
    \ [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*\n * \u0420\u0435\u0448\u0435\u043D\u0438\u0435 \u0443\u0447\
    \u0438\u0442\u0435\u043B\u044F\n */", "    $a = [];\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i\
    \ = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n\
    \            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] +\
    \ $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n              \
    \  }\n            }\n        }\n    }\n    return $count;\n}\n\n/*", "    $a =\
    \ [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*\n * Test cases\n *\n * Test 1\n * Input:\n * $n = 5\n * Output:\n\
    \ * 1\n *\n * Test 2\n * Input:\n * $n = 10\n * Output:\n * 4\n *\n * Test 3\n\
    \ * Input:\n * $n = 15\n * Output:\n * 10\n *\n * Test 4\n * Input:\n * $n = 20\n\
    \ * Output:\n * 20\n *\n * Test 5\n * Input:\n * $n = 25\n * Output:\n * 35\n\
    \ *\n * Test 6\n * Input:\n * $n = 30\n * Output:\n * 56\n *\n * Test 7\n * Input:\n\
    \ * $n = 35\n * Output:\n * 84\n *\n * Test 8\n * Input:\n * $n = 40\n * Output:\n\
    \ * 120\n *\n * Test 9\n * Input:\n * $n = 45\n * Output:\n * 165\n *\n * Test\
    \ 10\n * Input:\n * $n = 50\n * Output:\n * 220\n *\n * Test 11\n * Input:\n *\
    \ $n = 55\n * Output:\n * 286\n *\n * Test 12\n * Input:\n * $n = 60\n * Output:\n\
    \ * 364\n *\n * Test 13\n * Input:\n * $n = 65\n * Output:\n * 455\n *\n * Test\
    \ 14\n * Input:\n * $n = 70\n * Output:\n * 560\n *\n * Test 15\n * Input:\n *\
    \ $", "    $a = array();\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i\
    \ * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < count($a); $i++)\
    \ {\n        for ($j = $i + 1; $j < count($a); $j++) {\n            for ($k =\
    \ $j + 1; $k < count($a); $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\necho get_max_triples(5);", "    $a\
    \ = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n\
    \    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j\
    \ = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\necho get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i\
    \ <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n \
    \   for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1;\
    \ $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if\
    \ (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n   \
    \             }\n            }\n        }\n    }\n    return $count;\n}\necho\
    \ get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n  \
    \      $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i <\
    \ $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n          \
    \  for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] +\
    \ $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n    \
    \        }\n        }\n    }\n    return $count;\n}\necho get_max_triples(5);",
  "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i +\
    \ 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for\
    \ ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n     \
    \   $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n\
    \ - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for\
    \ ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k])\
    \ % 3 == 0) {\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}\n\n/*\n    ----TESTE----\n*/\n\necho\
    \ get_max_triples(5);", "\t$a = [];\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$a[]\
    \ = $i * $i - $i + 1;\n\t}\n\t$count = 0;\n\tfor ($i = 0; $i < $n - 2; $i++) {\n\
    \t\tfor ($j = $i + 1; $j < $n - 1; $j++) {\n\t\t\tfor ($k = $j + 1; $k < $n; $k++)\
    \ {\n\t\t\t\tif (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n\t\t\t\t\t$count++;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}", "    $a = [];\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count\
    \ = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j <\
    \ $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n          \
    \      if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*", "\t$a = [];\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\t$a[] = $i * $i - $i +\
    \ 1;\n\t}\n\t$count = 0;\n\tfor ($i = 0; $i < $n - 2; $i++) {\n\t\tfor ($j = $i\
    \ + 1; $j < $n - 1; $j++) {\n\t\t\tfor ($k = $j + 1; $k < $n; $k++) {\n\t\t\t\t\
    if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n\t\t\t\t\t$count++;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n\
    \    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1;\
    \ $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n                if\
    \ (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n   \
    \             }\n            }\n        }\n    }\n    return $count;\n}\n\n/*\n\
    >>> get_max_triples(5)\n1\n>>> get_max_triples(10)\n3\n>>> get_max_triples(100)\n\
    9\n>>> get_max_triples(1000)\n27\n>>> get_max_triples(10000)\n81\n>>> get_max_triples(100000)\n\
    243\n>>> get_max_triples(1000000)\n729\n>>> get_max_triples(10000000)\n2187\n\
    >>> get_max_triples(100000000)\n6561\n>>> get_max_triples(1000000000)\n19683\n\
    */", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i\
    \ - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n \
    \       for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1;\
    \ $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n\
    \                    $count++;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}\necho get_max_triples(5);", "    $a = [];\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count\
    \ = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j <\
    \ $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n          \
    \      if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n\
    \                }\n            }\n        }\n    }\n    return $count;\n}\n\n\
    /*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i\
    \ - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n \
    \       for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1;\
    \ $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n\
    \                    $count++;\n                }\n            }\n        }\n\
    \    }\n    return $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i\
    \ = 0; $i < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n\
    \            for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] +\
    \ $a[$j] + $a[$k]) % 3 == 0) {\n                    $count++;\n              \
    \  }\n            }\n        }\n    }\n    return $count;\n}\n\n/*", "  $a = [];\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $a[] = $i * $i - $i + 1;\n  }\n  $count\
    \ = 0;\n  for ($i = 0; $i < $n - 2; $i++) {\n    for ($j = $i + 1; $j < $n - 1;\
    \ $j++) {\n      for ($k = $j + 1; $k < $n; $k++) {\n        if (($a[$i] + $a[$j]\
    \ + $a[$k]) % 3 == 0) {\n          $count++;\n        }\n      }\n    }\n  }\n\
    \  return $count;\n}\n\n/*", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i\
    \ < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n        \
    \    for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j]\
    \ + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n  \
    \          }\n        }\n    }\n    return $count;\n}\n\n/*\n * Test cases\n */\n\
    echo get_max_triples(5) . \"\\n\";\necho get_max_triples(10) . \"\\n\";\necho\
    \ get_max_triples(100) . \"\\n\";\necho get_max_triples(1000) . \"\\n\";\necho\
    \ get_max_triples(10000) . \"\\n\";\necho get_max_triples(100000) . \"\\n\";\n\
    echo get_max_triples(1000000) . \"\\n\";\necho get_max_triples(10000000) . \"\\\
    n\";\necho get_max_triples(100000000) . \"\\n\";\necho get_max_triples(1000000000)\
    \ . \"\\n\";", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[]\
    \ = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++)\
    \ {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j\
    \ + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 ==\
    \ 0) {\n                    $count++;\n                }\n            }\n    \
    \    }\n    }\n    return $count;\n}\necho get_max_triples(5);", "    $a = [];\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\
    \    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i\
    \ + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n\
    \                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                \
    \    $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*\n * Test cases\n *\n */\necho get_max_triples(5) . PHP_EOL;\n\
    echo get_max_triples(10) . PHP_EOL;\necho get_max_triples(15) . PHP_EOL;\necho\
    \ get_max_triples(20) . PHP_EOL;\necho get_max_triples(25) . PHP_EOL;\necho get_max_triples(30)\
    \ . PHP_EOL;\necho get_max_triples(35) . PHP_EOL;\necho get_max_triples(40) .\
    \ PHP_EOL;\necho get_max_triples(45) . PHP_EOL;\necho get_max_triples(50) . PHP_EOL;",
  "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i +\
    \ 1;\n    }\n    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for\
    \ ($j = $i + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++)\
    \ {\n                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n            \
    \        $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\n/*\n * Test cases\n */\necho get_max_triples(5);\necho \"\\n\"\
    ;\necho get_max_triples(10);\necho \"\\n\";\necho get_max_triples(100);\necho\
    \ \"\\n\";\necho get_max_triples(1000);\necho \"\\n\";\necho get_max_triples(10000);\n\
    echo \"\\n\";\necho get_max_triples(100000);\necho \"\\n\";\necho get_max_triples(1000000);\n\
    echo \"\\n\";\necho get_max_triples(10000000);\necho \"\\n\";\necho get_max_triples(100000000);\n\
    echo \"\\n\";\necho get_max_triples(1000000000);\necho \"\\n\";", "    $a = [];\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $a[] = $i * $i - $i + 1;\n    }\n\
    \    $count = 0;\n    for ($i = 0; $i < $n - 2; $i++) {\n        for ($j = $i\
    \ + 1; $j < $n - 1; $j++) {\n            for ($k = $j + 1; $k < $n; $k++) {\n\
    \                if (($a[$i] + $a[$j] + $a[$k]) % 3 == 0) {\n                \
    \    $count++;\n                }\n            }\n        }\n    }\n    return\
    \ $count;\n}\n\necho get_max_triples(5);", "\t$a = [];\n\tfor ($i = 1; $i <= $n;\
    \ $i++) {\n\t\t$a[] = $i * $i - $i + 1;\n\t}\n\t$count = 0;\n\tfor ($i = 0; $i\
    \ < $n - 2; $i++) {\n\t\tfor ($j = $i + 1; $j < $n - 1; $j++) {\n\t\t\tfor ($k\
    \ = $j + 1; $k < $n; $k++) {\n\t\t\t\tif (($a[$i] + $a[$j] + $a[$k]) % 3 == 0)\
    \ {\n\t\t\t\t\t$count++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $count;\n}\n\
    echo get_max_triples(5);", "    $a = [];\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $a[] = $i * $i - $i + 1;\n    }\n    $count = 0;\n    for ($i = 0; $i\
    \ < $n - 2; $i++) {\n        for ($j = $i + 1; $j < $n - 1; $j++) {\n        \
    \    for ($k = $j + 1; $k < $n; $k++) {\n                if (($a[$i] + $a[$j]\
    \ + $a[$k]) % 3 == 0) {\n                    $count++;\n                }\n  \
    \          }\n        }\n    }\n    return $count;\n}\n\n/*"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
