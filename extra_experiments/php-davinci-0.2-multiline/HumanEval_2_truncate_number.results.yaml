language: php
name: HumanEval_2_truncate_number
results:
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = $number - floor($number);\n    return $number;\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    $number = '0.'\
    \ . $number[1];\n    return $number;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcusly7ez.php:26\n\
    Stack trace:\n#0 /tmp/tmpcusly7ez.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcusly7ez.php\
    \ on line 26\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $decimal_part = substr($number, strpos($number, '.')\
    \ + 1);\n    return (float) '0.' . $decimal_part;\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjl90fsbe.php:25\n\
    Stack trace:\n#0 /tmp/tmpjl90fsbe.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpjl90fsbe.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $integer\
    \ = floor($number);\n    $decimal = $number - $integer;\n    return $decimal;\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  $number\
    \ = (string)$number;\n  $number = explode('.', $number);\n  $number = '0.'.$number[1];\n\
    \  return $number;\n}\n\n/* Given a positive floating point number, it can be\
    \ decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskmjeof_.php:26\n\
    Stack trace:\n#0 /tmp/tmpskmjeof_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpskmjeof_.php\
    \ on line 26\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.'.$number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc59earwo.php:25\n\
    Stack trace:\n#0 /tmp/tmpc59earwo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpc59earwo.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $decimal = explode('.', $number);\n    return '0.' .\
    \ $decimal[1];\n}\n\n/* Given a string, return a new string with the first and\
    \ last characters\nof the original string swapped.\n>>> swap_first_last('abcd')\n\
    'dbca'*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1e16g855.php:23\n\
    Stack trace:\n#0 /tmp/tmp1e16g855.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp1e16g855.php\
    \ on line 23\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = $number - (int)$number;\n    return $number;\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  $number\
    \ = (string)$number;\n  $number = explode('.', $number);\n  return '0.' . $number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpil73awfy.php:25\n\
    Stack trace:\n#0 /tmp/tmpil73awfy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpil73awfy.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n\t$number\
    \ = $number - floor($number);\n\treturn $number;\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  $number\
    \ = (string)$number;\n  $number = explode('.', $number);\n  return '0.' . $number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpil73awfy.php:25\n\
    Stack trace:\n#0 /tmp/tmpil73awfy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpil73awfy.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.'.$number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc59earwo.php:25\n\
    Stack trace:\n#0 /tmp/tmpc59earwo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpc59earwo.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  $number\
    \ = (string)$number;\n  $number = explode('.', $number);\n  return '0.' . $number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpil73awfy.php:25\n\
    Stack trace:\n#0 /tmp/tmpil73awfy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpil73awfy.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $integer_part\
    \ = floor($number);\n    $decimal_part = $number - $integer_part;\n    return\
    \ $decimal_part;\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.'.$number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc59earwo.php:25\n\
    Stack trace:\n#0 /tmp/tmpc59earwo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpc59earwo.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    $number = '0.'\
    \ . $number[1];\n    return $number;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcusly7ez.php:26\n\
    Stack trace:\n#0 /tmp/tmpcusly7ez.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcusly7ez.php\
    \ on line 26\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    $decimals = '0.'\
    \ . $number[1];\n    return $decimals;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcypypory.php:26\n\
    Stack trace:\n#0 /tmp/tmpcypypory.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcypypory.php\
    \ on line 26\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.'.$number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc59earwo.php:25\n\
    Stack trace:\n#0 /tmp/tmpc59earwo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpc59earwo.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  $number\
    \ = (string)$number;\n  $number = explode('.', $number);\n  return '0.' . $number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpil73awfy.php:25\n\
    Stack trace:\n#0 /tmp/tmpil73awfy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpil73awfy.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = $number - floor($number);\n    return $number;\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $decimal = strpos($number, '.');\n    if ($decimal ===\
    \ false) {\n        return 0;\n    }\n    $decimal_part = substr($number, $decimal\
    \ + 1);\n    return (float)$decimal_part;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9sj8jcqf.php:29\n\
    Stack trace:\n#0 /tmp/tmp9sj8jcqf.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp9sj8jcqf.php\
    \ on line 29\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    $number = '0.'\
    \ . $number[1];\n    return $number;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcusly7ez.php:26\n\
    Stack trace:\n#0 /tmp/tmpcusly7ez.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcusly7ez.php\
    \ on line 26\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - (int)$number;\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $int\
    \ = floor($number);\n    $dec = $number - $int;\n    return $dec;\n}\n\n/* Given\
    \ a positive floating point number, it can be decomposed into\nand integer part\
    \ (largest integer smaller than given number) and decimals\n(leftover part always\
    \ smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a number, return a string with dash'-'marks before\
    \ and after each odd integer,\nbut do not begin or end the string with a dash\
    \ mark.\n>>> dasherize_number(274)\n'2-7-4'\n>>> dasherize_number(6815)\n'68-1-5'*/\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpquiinerk.php:25\n\
    Stack trace:\n#0 /tmp/tmpquiinerk.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpquiinerk.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = $number - floor($number);\n    return $number;\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n\t$number\
    \ = strval($number);\n\t$number = explode('.', $number);\n\treturn '0.' . $number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8d0c8_7j.php:25\n\
    Stack trace:\n#0 /tmp/tmp8d0c8_7j.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp8d0c8_7j.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (float)$number;\n    $number = $number - (int)$number;\n    return $number;\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  $number\
    \ = (string)$number;\n  $number = explode('.', $number);\n  return '0.' . $number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpil73awfy.php:25\n\
    Stack trace:\n#0 /tmp/tmpil73awfy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpil73awfy.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number_parts\
    \ = explode('.', $number);\n    return '0.' . $number_parts[1];\n}\n\n/* Given\
    \ a positive floating point number, it can be decomposed into\nand integer part\
    \ (largest integer smaller than given number) and decimals\n(leftover part always\
    \ smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwubh1r8d.php:24\n\
    Stack trace:\n#0 /tmp/tmpwubh1r8d.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpwubh1r8d.php\
    \ on line 24\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number_parts\
    \ = explode('.', $number);\n    return '0.' . $number_parts[1];\n}\n\n/* Given\
    \ a positive floating point number, it can be decomposed into\nand integer part\
    \ (largest integer smaller than given number) and decimals\n(leftover part always\
    \ smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwubh1r8d.php:24\n\
    Stack trace:\n#0 /tmp/tmpwubh1r8d.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpwubh1r8d.php\
    \ on line 24\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = $number - floor($number);\n    return $number;\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $decimal_part = substr($number, strpos($number, '.')\
    \ + 1);\n    return $decimal_part;\n}\n\n/* Given a positive floating point number,\
    \ it can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpclmbpcoj.php:25\n\
    Stack trace:\n#0 /tmp/tmpclmbpcoj.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpclmbpcoj.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    $number = '0.'.$number[1];\n\
    \    return $number;\n}\n\n/* Given a positive floating point number, it can be\
    \ decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpubflw6h_.php:26\n\
    Stack trace:\n#0 /tmp/tmpubflw6h_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpubflw6h_.php\
    \ on line 26\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $integer\
    \ = floor($number);\n    $decimal = $number - $integer;\n    return $decimal;\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    $number = $number[1];\n\
    \    return $number;\n}\n\n/* Given a positive floating point number, it can be\
    \ decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpziar7wxd.php:26\n\
    Stack trace:\n#0 /tmp/tmpziar7wxd.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpziar7wxd.php\
    \ on line 26\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.'.$number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc59earwo.php:25\n\
    Stack trace:\n#0 /tmp/tmpc59earwo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpc59earwo.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $position = strpos($number, '.');\n    if ($position\
    \ === false) {\n        return 0;\n    }\n    $decimals = substr($number, $position);\n\
    \    return $decimals;\n}\n\n/* Given a positive floating point number, it can\
    \ be decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwdlcogam.php:29\n\
    Stack trace:\n#0 /tmp/tmpwdlcogam.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpwdlcogam.php\
    \ on line 29\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $decimals = explode('.', $number);\n    $decimals =\
    \ $decimals[1];\n    $decimals = '0.' . $decimals;\n    return $decimals;\n}\n\
    \n/* Given a positive floating point number, it can be decomposed into\nand integer\
    \ part (largest integer smaller than given number) and decimals\n(leftover part\
    \ always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp10k2w4e3.php:27\n\
    Stack trace:\n#0 /tmp/tmp10k2w4e3.php(32): test()\n#1 {main}\n  thrown in /tmp/tmp10k2w4e3.php\
    \ on line 27\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.'.$number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc59earwo.php:25\n\
    Stack trace:\n#0 /tmp/tmpc59earwo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpc59earwo.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return \"0.\"\
    .$number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnqoh8pv.php:25\n\
    Stack trace:\n#0 /tmp/tmpdnqoh8pv.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpdnqoh8pv.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.'.$number[1];\n\
    }\n\n/* Given a string, return a new string with the first letter of each word\
    \ capitalized.\n>>> capitalize_words('hello world')\n'Hello World'*/\nfunction\
    \ candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpde1bpc_v.php:22\n\
    Stack trace:\n#0 /tmp/tmpde1bpc_v.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpde1bpc_v.php\
    \ on line 22\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n\t$number\
    \ = (string)$number;\n\t$number = explode('.', $number);\n\treturn '0.'.$number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2op_vhkq.php:25\n\
    Stack trace:\n#0 /tmp/tmp2op_vhkq.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2op_vhkq.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    $number = '0.'\
    \ . $number[1];\n    return $number;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcusly7ez.php:26\n\
    Stack trace:\n#0 /tmp/tmpcusly7ez.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcusly7ez.php\
    \ on line 26\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  $number\
    \ = strval($number);\n  $number = explode('.', $number);\n  return '0.' . $number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp44lwy9c8.php:25\n\
    Stack trace:\n#0 /tmp/tmp44lwy9c8.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp44lwy9c8.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $int_part\
    \ = floor($number);\n    $dec_part = $number - $int_part;\n    return $dec_part;\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.'.$number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc59earwo.php:25\n\
    Stack trace:\n#0 /tmp/tmpc59earwo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpc59earwo.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = $number - floor($number);\n    return $number;\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  $number\
    \ = (string)$number;\n  $number = explode('.', $number);\n  return '0.' . $number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpil73awfy.php:25\n\
    Stack trace:\n#0 /tmp/tmpil73awfy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpil73awfy.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.'.$number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc59earwo.php:25\n\
    Stack trace:\n#0 /tmp/tmpc59earwo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpc59earwo.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  $number\
    \ = (string)$number;\n  $number = explode('.', $number);\n  return '0.' . $number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpil73awfy.php:25\n\
    Stack trace:\n#0 /tmp/tmpil73awfy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpil73awfy.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    $number = '0.'\
    \ . $number[1];\n    return $number;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcusly7ez.php:26\n\
    Stack trace:\n#0 /tmp/tmpcusly7ez.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcusly7ez.php\
    \ on line 26\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  $number\
    \ = (string)$number;\n  $number = explode('.', $number);\n  return '0.' . $number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpil73awfy.php:25\n\
    Stack trace:\n#0 /tmp/tmpil73awfy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpil73awfy.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  $number\
    \ = $number - floor($number);\n  return $number;\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    $number = '0.'.$number[1];\n\
    \    return $number;\n}\n\n/* Given a positive floating point number, it can be\
    \ decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpubflw6h_.php:26\n\
    Stack trace:\n#0 /tmp/tmpubflw6h_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpubflw6h_.php\
    \ on line 26\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.'.$number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc59earwo.php:25\n\
    Stack trace:\n#0 /tmp/tmpc59earwo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpc59earwo.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    $number = '0.'\
    \ . $number[1];\n    return $number;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcusly7ez.php:26\n\
    Stack trace:\n#0 /tmp/tmpcusly7ez.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcusly7ez.php\
    \ on line 26\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  return\
    \ $number - (int)$number;\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number_array = explode('.', $number);\n    $decimal\
    \ = '0.' . $number_array[1];\n    return $decimal;\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4aec_ei0.php:26\n\
    Stack trace:\n#0 /tmp/tmp4aec_ei0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4aec_ei0.php\
    \ on line 26\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $decimal_part = '';\n    $integer_part = '';\n    for\
    \ ($i = 0; $i < strlen($number); $i++) {\n        if ($number[$i] == '.') {\n\
    \            $decimal_part = substr($number, $i);\n            $integer_part =\
    \ substr($number, 0, $i);\n            break;\n        }\n    }\n    return $decimal_part;\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5v37b32e.php:33\n\
    Stack trace:\n#0 /tmp/tmp5v37b32e.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp5v37b32e.php\
    \ on line 33\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    $number = '0.'\
    \ . $number[1];\n    return $number;\n}\n\n/* Given a positive floating point\
    \ number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcusly7ez.php:26\n\
    Stack trace:\n#0 /tmp/tmpcusly7ez.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcusly7ez.php\
    \ on line 26\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n\treturn\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = $number - floor($number);\n    return $number;\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the integer part of the number.\n\
    >>> truncate_number(3.5)\n3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzx03rcaz.php:25\n\
    Stack trace:\n#0 /tmp/tmpzx03rcaz.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpzx03rcaz.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $decimals = explode('.', $number);\n    $decimals =\
    \ '0.' . $decimals[1];\n    return $decimals;\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe2ocwe_r.php:26\n\
    Stack trace:\n#0 /tmp/tmpe2ocwe_r.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpe2ocwe_r.php\
    \ on line 26\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = $number - floor($number);\n    return $number;\n}\necho truncate_number(3.5);\n\
    function candidate(...$args) {\n    return truncate_number(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '0.5'
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n\t$number\
    \ = (string)$number;\n\t$number = explode('.', $number);\n\t$decimal = '0.'.$number[1];\n\
    \treturn $decimal;\n}\n\n/* Given a positive floating point number, it can be\
    \ decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo3s3e7zj.php:26\n\
    Stack trace:\n#0 /tmp/tmpo3s3e7zj.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpo3s3e7zj.php\
    \ on line 26\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n\treturn\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  $number\
    \ = (string)$number;\n  $number = explode('.', $number);\n  return '0.' . $number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpil73awfy.php:25\n\
    Stack trace:\n#0 /tmp/tmpil73awfy.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpil73awfy.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  $integer_part\
    \ = floor($number);\n  $decimal_part = $number - $integer_part;\n  return $decimal_part;\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = strval($number);\n    $number = explode('.', $number);\n    return '0.'.$number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0kdhhhos.php:25\n\
    Stack trace:\n#0 /tmp/tmp0kdhhhos.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp0kdhhhos.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  $number\
    \ = (string)$number;\n  $decimal_part = substr($number, strpos($number, '.') +\
    \ 1);\n  return $decimal_part;\n}\n\n/* Given a positive floating point number,\
    \ it can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgydcpv4o.php:25\n\
    Stack trace:\n#0 /tmp/tmpgydcpv4o.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpgydcpv4o.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    $number = '0.'.$number[1];\n\
    \    return $number;\n}\n\n/* Given a positive floating point number, it can be\
    \ decomposed into\nand integer part (largest integer smaller than given number)\
    \ and decimals\n(leftover part always smaller than 1).\nReturn the integer part\
    \ of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpubflw6h_.php:26\n\
    Stack trace:\n#0 /tmp/tmpubflw6h_.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpubflw6h_.php\
    \ on line 26\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n  $number\
    \ = $number - floor($number);\n  return $number;\n}\n\n/* Given a positive floating\
    \ point number, it can be decomposed into\nand integer part (largest integer smaller\
    \ than given number) and decimals\n(leftover part always smaller than 1).\nReturn\
    \ the integer part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    return\
    \ $number - floor($number);\n}\n\n/* Given a positive floating point number, it\
    \ can be decomposed into\nand integer part (largest integer smaller than given\
    \ number) and decimals\n(leftover part always smaller than 1).\nReturn the integer\
    \ part of the number.\n>>> truncate_number(3.5)\n3*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.'.$number[1];\n\
    }\n\n/* Given a positive floating point number, it can be decomposed into\nand\
    \ integer part (largest integer smaller than given number) and decimals\n(leftover\
    \ part always smaller than 1).\nReturn the integer part of the number.\n>>> truncate_number(3.5)\n\
    3*/\nfunction candidate(...$args) {\n    return truncate_number(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(3.5) !== 0.5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1.25) !== 0.25) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(123.0) !== 0.0) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc59earwo.php:25\n\
    Stack trace:\n#0 /tmp/tmpc59earwo.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpc59earwo.php\
    \ on line 25\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Given a positive floating point number, it can be decomposed\
    \ into\nand integer part (largest integer smaller than given number) and decimals\n\
    (leftover part always smaller than 1).\nReturn the decimal part of the number.\n\
    >>> truncate_number(3.5)\n0.5*/\nfunction truncate_number($number) {\n    $number\
    \ = (string)$number;\n    $number = explode('.', $number);\n    return '0.' .\
    \ $number[1];\n}\n\n/* Given a string, return a new string with the first and\
    \ last characters\nof the original string swapped.\n>>> swap_first_last('abcd')\n\
    'dbca'\n>>> swap_first_last('12345')\n'52341'*/\nfunction candidate(...$args)\
    \ {\n    return truncate_number(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(3.5) !== 0.5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(1.25) !== 0.25) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(123.0) !== 0.0) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd4lu03dd.php:25\n\
    Stack trace:\n#0 /tmp/tmpd4lu03dd.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpd4lu03dd.php\
    \ on line 25\n"
  timestamp: 1660220716
