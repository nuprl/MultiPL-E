language: php
name: HumanEval_109_move_one_ball
results:
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if(empty($arr)){\n        return true;\n    }\n    $min = $arr[0];\n    $max\
    \ = $arr[0];\n    for($i=1;$i<count($arr);$i++){\n        if($arr[$i]<$min){\n\
    \            $min = $arr[$i];\n        }\n        if($arr[$i]>$max){\n       \
    \     $max = $arr[$i];\n        }\n    }\n    if($min==$arr[0] && $max==$arr[count($arr)-1]){\n\
    \        return true;\n    }\n    return false;\n}\n\n/*\n * Complete the function\
    \ below.\n */\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqgsaqes.php:51\n\
    Stack trace:\n#0 /tmp/tmplqgsaqes.php(58): test()\n#1 {main}\n  thrown in /tmp/tmplqgsaqes.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i\
    \ = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min =\
    \ $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return\
    \ false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\n$arr1 = array(3, 5, 4, 1, 2);\necho\
    \ move_one_ball($arr);\necho \"\\n\";\necho move_one_ball($arr1);\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ahnno7j.php:51\n\
    Stack trace:\n#0 /tmp/tmp9ahnno7j.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp9ahnno7j.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $max = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $max) {\n            return false;\n        }\n        $max = $arr[$i];\n\
    \    }\n    return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxyy13wms.php:42\n\
    Stack trace:\n#0 /tmp/tmpxyy13wms.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxyy13wms.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if (empty($arr)) {\n        return true;\n    }\n    $count = count($arr);\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj4ksvu0d.php:43\n\
    Stack trace:\n#0 /tmp/tmpj4ksvu0d.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpj4ksvu0d.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $arr_length = count($arr);\n    if ($arr_length == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < $arr_length;\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if ($min == 1 && $max == $arr_length) {\n        return true;\n\
    \    }\n    return false;\n}\n\n/*\n * Test cases\n */\n\necho move_one_ball(array(3,\
    \ 4, 5, 1, 2)) . \"\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2)) . \"\\n\"\
    ;\necho move_one_ball(array(3, 5, 4, 1, 2, 6)) . \"\\n\";\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2, 6, 7)) . \"\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2, 6, 7,\
    \ 8)) . \"\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2, 6, 7, 8, 9)) . \"\\\
    n\";\necho move_one_ball(array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10)) . \"\\n\";\necho\
    \ move_one_ball(array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10, 11)) . \"\\n\";\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2, 6, 7, 8, 9, 10, 11, 12)) . \"\\n\";\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13)) . \"\\n\";\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2, 6, 7, 8, 9, 10\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpw4136f2c.php
    on line 59

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $arr_len = count($arr);\n\tif ($arr_len == 0) {\n\t\treturn true;\n\t}\n\t$min\
    \ = $arr[0];\n\t$max = $arr[0];\n\tfor ($i = 1; $i < $arr_len; $i++) {\n\t\tif\
    \ ($arr[$i] < $min) {\n\t\t\t$min = $arr[$i];\n\t\t}\n\t\tif ($arr[$i] > $max)\
    \ {\n\t\t\t$max = $arr[$i];\n\t\t}\n\t}\n\tif ($min == 1 && $max == $arr_len)\
    \ {\n\t\treturn true;\n\t}\n\treturn false;\n}\n$arr = array(3, 4, 5, 1, 2);\n\
    echo move_one_ball($arr);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp23s8bws.php:51\n\
    Stack trace:\n#0 /tmp/tmpp23s8bws.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpp23s8bws.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $arr_len = count($arr);\n\tif($arr_len == 0) {\n\t\treturn true;\n\t}\n\t$min\
    \ = $arr[0];\n\t$max = $arr[0];\n\tfor($i = 1; $i < $arr_len; $i++) {\n\t\tif($arr[$i]\
    \ < $min) {\n\t\t\t$min = $arr[$i];\n\t\t}\n\t\tif($arr[$i] > $max) {\n\t\t\t\
    $max = $arr[$i];\n\t\t}\n\t}\n\tif($min == $max) {\n\t\treturn true;\n\t}\n\t\
    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(3, 3, 3, 3, 3);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\
    \ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp4npjxk5x.php on line 54

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif ($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor ($i = 1; $i < $len; $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array();\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbpk99x2g.php:58\n\
    Stack trace:\n#0 /tmp/tmpbpk99x2g.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpbpk99x2g.php\
    \ on line 58\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $arr_length = count($arr);\n    if ($arr_length == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < $arr_length;\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuyxirz0t.php:48\n\
    Stack trace:\n#0 /tmp/tmpuyxirz0t.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpuyxirz0t.php\
    \ on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if (empty($arr)) {\n        return true;\n    }\n    $count = count($arr);\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp40het2vb.php:52\n\
    Stack trace:\n#0 /tmp/tmp40het2vb.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp40het2vb.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if ($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstufpkk5.php:52\n\
    Stack trace:\n#0 /tmp/tmpstufpkk5.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpstufpkk5.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo7kx6hz7.php:44\n\
    Stack trace:\n#0 /tmp/tmpo7kx6hz7.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpo7kx6hz7.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if (empty($arr)) {\n        return true;\n    }\n    $count = count($arr);\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplynq3uov.php:44\n\
    Stack trace:\n#0 /tmp/tmplynq3uov.php(51): test()\n#1 {main}\n  thrown in /tmp/tmplynq3uov.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif($len == 0) {\n\t\treturn true;\n\t}\n\t$i = 0;\n\t$j\
    \ = $len - 1;\n\twhile($i < $j) {\n\t\tif($arr[$i] > $arr[$i + 1]) {\n\t\t\tbreak;\n\
    \t\t}\n\t\t$i++;\n\t}\n\twhile($j > 0) {\n\t\tif($arr[$j] < $arr[$j - 1]) {\n\t\
    \t\tbreak;\n\t\t}\n\t\t$j--;\n\t}\n\tif($i >= $j) {\n\t\treturn true;\n\t}\n\t\
    $temp = $arr[$i];\n\t$arr[$i] = $arr[$j];\n\t$arr[$j] = $temp;\n\t$i = 0;\n\t\
    $j = $len - 1;\n\twhile($i < $j) {\n\t\tif($arr[$i] > $arr[$i + 1]) {\n\t\t\t\
    return false;\n\t\t}\n\t\t$i++;\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5,\
    \ 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp18xungij.php:69\n\
    Stack trace:\n#0 /tmp/tmp18xungij.php(76): test()\n#1 {main}\n  thrown in /tmp/tmp18xungij.php\
    \ on line 69\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif ($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor ($i = 1; $i < $len; $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array();\necho move_one_ball($arr);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6md4r7az.php:52\n\
    Stack trace:\n#0 /tmp/tmp6md4r7az.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp6md4r7az.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if($len == 0) {\n        return true;\n    }\n   \
    \ $min = $arr[0];\n    for($i = 1; $i < $len; $i++) {\n        if($arr[$i] < $min)\
    \ {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjajjmgw4.php:44\n\
    Stack trace:\n#0 /tmp/tmpjajjmgw4.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpjajjmgw4.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $arr_count = count($arr);\n    if($arr_count == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for($i = 1; $i < $arr_count;\
    \ $i++) {\n        if($arr[$i] < $min) {\n            $min = $arr[$i];\n     \
    \   }\n        if($arr[$i] > $max) {\n            $max = $arr[$i];\n        }\n\
    \    }\n    if($min == 1 && $max == $arr_count) {\n        return true;\n    }\n\
    \    return false;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3tm0gsgx.php:49\n\
    Stack trace:\n#0 /tmp/tmp3tm0gsgx.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp3tm0gsgx.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_uubejkj.php:52\n\
    Stack trace:\n#0 /tmp/tmp_uubejkj.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp_uubejkj.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bhs4mfp.php:45\n\
    Stack trace:\n#0 /tmp/tmp_bhs4mfp.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp_bhs4mfp.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if (empty($arr)) {\n        return true;\n    }\n    $arr = array_values($arr);\n\
    \    $len = count($arr);\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i\
    \ = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min =\
    \ $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $max) {\n        return true;\n    }\n    $min_index\
    \ = array_search($min, $arr);\n    $max_index = array_search($max, $arr);\n  \
    \  if ($min_index == 0) {\n        return false;\n    }\n    if ($max_index ==\
    \ $len - 1) {\n        return false;\n    }\n    if ($min_index < $max_index)\
    \ {\n        return false;\n    }\n    return true;\n}\n\n$arr = array(3, 4, 5,\
    \ 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(1, 1, 1, 1, 1);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,\
    \ 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp0pb66xqt.php on line 72

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpetwheqcd.php:49\n\
    Stack trace:\n#0 /tmp/tmpetwheqcd.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpetwheqcd.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $sorted = $arr;\n    sort($sorted);\n    $count = 0;\n    for ($i = 0; $i <\
    \ count($arr); $i++) {\n        if ($arr[$i] != $sorted[$i]) {\n            $count++;\n\
    \        }\n    }\n    if ($count > 1) {\n        return false;\n    }\n    return\
    \ true;\n}\n\n/*\n * Testing code\n */\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(2, 3, 4, 5,\
    \ 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 5, 4, 3, 2);\necho\
    \ move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\\
    n\";\n$arr = array(2, 3, 4, 5, 6, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(1, 6, 5, 4, 3, 2);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(7, 6,\
    \ 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(2, 3, 4,\
    \ 5, 6, 7, 1);\necho move_one_ball($arr) . \"\\\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting "," or ";"
    in /tmp/tmp39pw13g2.php on line 72

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $arr_len = count($arr);\n    if ($arr_len == 0) {\n        return true;\n \
    \   }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < $arr_len;\
    \ $i++) {\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n    \
    \    }\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n       \
    \ }\n    }\n    if ($min == 1 && $max == $arr_len) {\n        return true;\n \
    \   }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7novgcpa.php:52\n\
    Stack trace:\n#0 /tmp/tmp7novgcpa.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp7novgcpa.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if(empty($arr)) return true;\n    $min = $arr[0];\n    for($i = 1; $i < count($arr);\
    \ $i++) {\n        if($arr[$i] < $min) return false;\n        $min = min($min,\
    \ $arr[$i]);\n    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho\
    \ move_one_ball($arr);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5v8zobq2.php:40\n\
    Stack trace:\n#0 /tmp/tmp5v8zobq2.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp5v8zobq2.php\
    \ on line 40\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if(empty($arr)) {\n        return true;\n    }\n    $count = count($arr);\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n/* We have an array 'arr' of N integers arr[1],\
    \ arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your\
    \ task is to determine if\nit is possible to get an array sorted in non-decreasing\
    \ order by performing \nthe following operation on the given array:\nYou are allowed\
    \ to perform right shift operation any number of times.\nOne right shift operation\
    \ means shifting all elements of the array by one\nposition in the right direction.\
    \ The last element of the array will be moved to\nthe starting position in the\
    \ array i.e. 0th index. \nIf it is possible to obtain the sorted array by performing\
    \ the above operation\nthen return true else return false.\nIf the given array\
    \ is empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction candidate(...$args) {\n  \
    \  return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8olxguft.php:64\n\
    Stack trace:\n#0 /tmp/tmp8olxguft.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp8olxguft.php\
    \ on line 64\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if($len == 0) {\n        return true;\n    }\n   \
    \ $min = $arr[0];\n    for($i = 1; $i < $len; $i++) {\n        if($arr[$i] < $min)\
    \ {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaqml2h4w.php:48\n\
    Stack trace:\n#0 /tmp/tmpaqml2h4w.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpaqml2h4w.php\
    \ on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $sorted = $arr;\n    sort($sorted);\n    $count = 0;\n    for ($i = 0; $i <\
    \ count($arr); $i++) {\n        if ($arr[$i] != $sorted[$i]) {\n            $count++;\n\
    \        }\n    }\n    if ($count > 1) {\n        return false;\n    }\n    return\
    \ true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcy5uyguh.php:42\n\
    Stack trace:\n#0 /tmp/tmpcy5uyguh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpcy5uyguh.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_uubejkj.php:52\n\
    Stack trace:\n#0 /tmp/tmp_uubejkj.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp_uubejkj.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_22ctz2.php:43\n\
    Stack trace:\n#0 /tmp/tmpd_22ctz2.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpd_22ctz2.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = $arr[$i];\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpba69s4r1.php:45\n\
    Stack trace:\n#0 /tmp/tmpba69s4r1.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpba69s4r1.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzgtlbthv.php:44\n\
    Stack trace:\n#0 /tmp/tmpzgtlbthv.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpzgtlbthv.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $size = count($arr);\n\tif($size == 0)\n\t\treturn true;\n\t$min = $arr[0];\n\t\
    for($i = 1; $i < $size; $i++) {\n\t\tif($arr[$i] < $min)\n\t\t\treturn false;\n\
    \t\t$min = min($min, $arr[$i]);\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5,\
    \ 1, 2);\necho move_one_ball($arr);\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1m2fb38h.php:42\n\
    Stack trace:\n#0 /tmp/tmp1m2fb38h.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp1m2fb38h.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $max = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $max) {\n            return false;\n        }\n        $max = $arr[$i];\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1vh3myt.php:45\n\
    Stack trace:\n#0 /tmp/tmpd1vh3myt.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpd1vh3myt.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(5, 4, 3,\
    \ 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5,\
    \ 6);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(7, 6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(8, 7, 6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(9, 8, 7, 6, 5,\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp3xan6ewg.php on line 75

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $n = count($arr);\n    if ($n == 0) {\n        return true;\n    }\n    $min\
    \ = $arr[0];\n    for ($i = 1; $i < $n; $i++) {\n        if ($arr[$i] < $min)\
    \ {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwcddqqf1.php:42\n\
    Stack trace:\n#0 /tmp/tmpwcddqqf1.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpwcddqqf1.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif ($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor ($i = 1; $i < $len; $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpusgc2yhb.php:48\n\
    Stack trace:\n#0 /tmp/tmpusgc2yhb.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpusgc2yhb.php\
    \ on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppl54km17.php:52\n\
    Stack trace:\n#0 /tmp/tmppl54km17.php(59): test()\n#1 {main}\n  thrown in /tmp/tmppl54km17.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7,\
    \ 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(30,\
    \ 29,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp354n0ogt.php on line 57

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $len; $i++) {\n\t\tif($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplxf4xvtq.php:49\n\
    Stack trace:\n#0 /tmp/tmplxf4xvtq.php(56): test()\n#1 {main}\n  thrown in /tmp/tmplxf4xvtq.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bhs4mfp.php:45\n\
    Stack trace:\n#0 /tmp/tmp_bhs4mfp.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp_bhs4mfp.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $len; $i++) {\n\t\tif($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array();\necho move_one_ball($arr);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkckstzjw.php:52\n\
    Stack trace:\n#0 /tmp/tmpkckstzjw.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpkckstzjw.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(5, 4, 3,\
    \ 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5,\
    \ 6);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(7, 6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(8, 7, 6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(9, 8, 7, 6, 5,\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp3xan6ewg.php on line 75

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if (empty($arr)) {\n        return true;\n    }\n    $count = count($arr);\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj4ksvu0d.php:43\n\
    Stack trace:\n#0 /tmp/tmpj4ksvu0d.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpj4ksvu0d.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfn8fjt9t.php:42\n\
    Stack trace:\n#0 /tmp/tmpfn8fjt9t.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpfn8fjt9t.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $count = count($arr);\n\tif($count == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $count; $i++) {\n\t\tif($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfklntvcq.php:44\n\
    Stack trace:\n#0 /tmp/tmpfklntvcq.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpfklntvcq.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    if(empty($arr)) {\n\t\treturn true;\n\t}\n\t$min = min($arr);\n\t$min_index =\
    \ array_search($min, $arr);\n\t$max = max($arr);\n\t$max_index = array_search($max,\
    \ $arr);\n\tif($min_index == 0 && $max_index == count($arr) - 1) {\n\t\treturn\
    \ true;\n\t}\n\treturn false;\n}\necho move_one_ball(array(3, 4, 5, 1, 2)) . \"\
    \\n\";\necho move_one_ball(array(3, 5, 4, 1, 2)) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdchp4qih.php:43\n\
    Stack trace:\n#0 /tmp/tmpdchp4qih.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpdchp4qih.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkt8zbsfa.php:45\n\
    Stack trace:\n#0 /tmp/tmpkt8zbsfa.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpkt8zbsfa.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if ($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array();\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3,\
    \ 4, 5);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\\
    n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\necho move_one_ball($arr) . \"\\n\";\n\
    $arr = array(7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\necho move_one_ball($arr) . \"\\n\";\n$arr\
    \ = array(9, 8, 7, 6, 5, 4, 3, 2, 1);\necho move_\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpz4o4so9f.php on line 64

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpetwheqcd.php:49\n\
    Stack trace:\n#0 /tmp/tmpetwheqcd.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpetwheqcd.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_uubejkj.php:52\n\
    Stack trace:\n#0 /tmp/tmp_uubejkj.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp_uubejkj.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if($len == 0) {\n        return true;\n    }\n   \
    \ $min = $arr[0];\n    for($i = 1; $i < $len; $i++) {\n        if($arr[$i] < $min)\
    \ {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjajjmgw4.php:44\n\
    Stack trace:\n#0 /tmp/tmpjajjmgw4.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpjajjmgw4.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $len; $i++) {\n\t\tif($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6wzq7cwl.php:44\n\
    Stack trace:\n#0 /tmp/tmp6wzq7cwl.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp6wzq7cwl.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3d_0th6c.php:42\n\
    Stack trace:\n#0 /tmp/tmp3d_0th6c.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp3d_0th6c.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppl54km17.php:52\n\
    Stack trace:\n#0 /tmp/tmppl54km17.php(59): test()\n#1 {main}\n  thrown in /tmp/tmppl54km17.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if (empty($arr)) {\n        return true;\n    }\n    $min = $arr[0];\n    $max\
    \ = $arr[0];\n    $count = 0;\n    for ($i = 1; $i < count($arr); $i++) {\n  \
    \      if ($arr[$i] < $min) {\n            $min = $arr[$i];\n            $count++;\n\
    \        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n   \
    \     }\n    }\n    if ($count > 1) {\n        return false;\n    }\n    if ($count\
    \ == 1) {\n        if ($min == $arr[0]) {\n            return true;\n        }\n\
    \        if ($max == $arr[0]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(3, 5, 4, 1, 2, 6);\necho move_one_ball($arr);\necho \"\\\
    n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7);\necho move_one_ball($arr);\necho \"\\\
    n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7, 8);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7, 8, 9);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2, 6,\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp8ecxh12u.php on line 78

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  $len\
    \ = count($arr);\n  if ($len == 0) {\n    return true;\n  }\n  $min = $arr[0];\n\
    \  for ($i = 1; $i < $len; $i++) {\n    if ($arr[$i] < $min) {\n      return false;\n\
    \    }\n    $min = min($min, $arr[$i]);\n  }\n  return true;\n}\n\n/*\n * TEST\n\
    \ * */\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(5, 4, 3,\
    \ 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 11);\necho move_one_ball($arr);\necho\
    \ \"\\n\";\n$arr = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 11, 12);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 11, 12, 13);\necho\
    \ move_one_ball($arr);\necho \"\\n\";\n$arr = array(10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1, 11, 12\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp3irkq47a.php
    on line 73

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = $arr[$i];\n\
    \    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmped2ghosx.php:44\n\
    Stack trace:\n#0 /tmp/tmped2ghosx.php(51): test()\n#1 {main}\n  thrown in /tmp/tmped2ghosx.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $count = count($arr);\n\tif($count == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $count; $i++) {\n\t\tif($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array();\necho move_one_ball($arr);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7qk9szw.php:52\n\
    Stack trace:\n#0 /tmp/tmpi7qk9szw.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpi7qk9szw.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpetwheqcd.php:49\n\
    Stack trace:\n#0 /tmp/tmpetwheqcd.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpetwheqcd.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif ($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor ($i = 1; $i < $len; $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array();\necho move_one_ball($arr);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6md4r7az.php:52\n\
    Stack trace:\n#0 /tmp/tmp6md4r7az.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp6md4r7az.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_22ctz2.php:43\n\
    Stack trace:\n#0 /tmp/tmpd_22ctz2.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpd_22ctz2.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_uubejkj.php:52\n\
    Stack trace:\n#0 /tmp/tmp_uubejkj.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp_uubejkj.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if (empty($arr)) {\n        return true;\n    }\n    $min = $arr[0];\n    $max\
    \ = $arr[0];\n    $count = count($arr);\n    for ($i = 1; $i < $count; $i++) {\n\
    \        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n        }\n   \
    \     if ($arr[$i] > $max) {\n            $max = $arr[$i];\n        }\n    }\n\
    \    if ($min == $max) {\n        return true;\n    }\n    return false;\n}\n\n\
    echo move_one_ball(array(3, 4, 5, 1, 2));\necho move_one_ball(array(3, 5, 4, 1,\
    \ 2));\necho move_one_ball(array(1, 2, 3, 4, 5));\necho move_one_ball(array(5,\
    \ 4, 3, 2, 1));\necho move_one_ball(array(1, 1, 1, 1, 1));\necho move_one_ball(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10));\necho move_one_ball(array(10, 9, 8, 7, 6, 5, 4,\
    \ 3, 2, 1));\necho move_one_ball(array(10, 10, 10, 10, 10));\necho move_one_ball(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20));\necho\
    \ move_one_ball(array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6,\
    \ 5, 4, 3, 2, 1));\necho move_one_ball(array(20, 20, 20, 20, 20));\necho move_one_ball(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp97osb2d4.php
    on line 56

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfn8fjt9t.php:42\n\
    Stack trace:\n#0 /tmp/tmpfn8fjt9t.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpfn8fjt9t.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = $arr[$i];\n\
    \    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmped2ghosx.php:44\n\
    Stack trace:\n#0 /tmp/tmped2ghosx.php(51): test()\n#1 {main}\n  thrown in /tmp/tmped2ghosx.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if ($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n/* We have an array 'arr' of N integers arr[1],\
    \ arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your\
    \ task is to determine if\nit is possible to get an array sorted in non-decreasing\
    \ order by performing \nthe following operation on the given array:\nYou are allowed\
    \ to perform right shift operation any number of times.\nOne right shift operation\
    \ means shifting all elements of the array by one\nposition in the right direction.\
    \ The last element of the array will be moved to\nthe starting position in the\
    \ array i.e. 0th index. \nIf it is possible to obtain the sorted array by performing\
    \ the above operation\nthen return true else return false.\nIf the given array\
    \ is empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction candidate(...$args) {\n  \
    \  return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeg74e2gp.php:64\n\
    Stack trace:\n#0 /tmp/tmpeg74e2gp.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpeg74e2gp.php\
    \ on line 64\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif ($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor ($i = 1; $i < $len; $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array();\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpar_8zihv.php:55\n\
    Stack trace:\n#0 /tmp/tmpar_8zihv.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpar_8zihv.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    $i = 0;\n    while ($i < $count) {\n        if ($arr[$i]\
    \ > $arr[$i + 1]) {\n            return false;\n        }\n        $i++;\n   \
    \ }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqj5bnzxq.php:42\n\
    Stack trace:\n#0 /tmp/tmpqj5bnzxq.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpqj5bnzxq.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if (empty($arr)) {\n        return true;\n    }\n    $count = count($arr);\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(5, 4, 3,\
    \ 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9xs1ughj.php:58\n\
    Stack trace:\n#0 /tmp/tmp9xs1ughj.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp9xs1ughj.php\
    \ on line 58\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(5, 4, 3,\
    \ 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaig5xmm9.php:58\n\
    Stack trace:\n#0 /tmp/tmpaig5xmm9.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpaig5xmm9.php\
    \ on line 58\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $arr_len = count($arr);\n\tif($arr_len == 0) {\n\t\treturn true;\n\t}\n\t$min\
    \ = $arr[0];\n\t$max = $arr[0];\n\tfor($i = 1; $i < $arr_len; $i++) {\n\t\tif($arr[$i]\
    \ < $min) {\n\t\t\t$min = $arr[$i];\n\t\t}\n\t\tif($arr[$i] > $max) {\n\t\t\t\
    $max = $arr[$i];\n\t\t}\n\t}\n\tif($min == $max) {\n\t\treturn true;\n\t}\n\t\
    return false;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhr5yac8.php:50\n\
    Stack trace:\n#0 /tmp/tmpwhr5yac8.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpwhr5yac8.php\
    \ on line 50\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $arr_len = count($arr);\n    if($arr_len == 0) {\n        return true;\n  \
    \  }\n    $min = $arr[0];\n    $min_index = 0;\n    for($i = 1; $i < $arr_len;\
    \ $i++) {\n        if($arr[$i] < $min) {\n            $min = $arr[$i];\n     \
    \       $min_index = $i;\n        }\n    }\n    if($min_index == 0) {\n      \
    \  return true;\n    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\n\
    echo move_one_ball($arr);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjb3hebs2.php:49\n\
    Stack trace:\n#0 /tmp/tmpjb3hebs2.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpjb3hebs2.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if (empty($arr)) {\n        return true;\n    }\n    $min = $arr[0];\n    $max\
    \ = $arr[0];\n    $count = 0;\n    for ($i = 1; $i < count($arr); $i++) {\n  \
    \      if ($arr[$i] < $min) {\n            $min = $arr[$i];\n            $count++;\n\
    \        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n   \
    \     }\n    }\n    if ($count > 1) {\n        return false;\n    }\n    if ($min\
    \ == $arr[0] && $max == $arr[count($arr) - 1]) {\n        return true;\n    }\n\
    \    return false;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplpvdvinp.php:52\n\
    Stack trace:\n#0 /tmp/tmplpvdvinp.php(59): test()\n#1 {main}\n  thrown in /tmp/tmplpvdvinp.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $arr_len = count($arr);\n\tif($arr_len == 0) {\n\t\treturn true;\n\t}\n\t$min\
    \ = $arr[0];\n\t$min_index = 0;\n\tfor($i = 1; $i < $arr_len; $i++) {\n\t\tif($arr[$i]\
    \ < $min) {\n\t\t\t$min = $arr[$i];\n\t\t\t$min_index = $i;\n\t\t}\n\t}\n\tif($min_index\
    \ == 0) {\n\t\treturn true;\n\t}\n\tfor($i = 1; $i < $arr_len; $i++) {\n\t\tif($arr[$i]\
    \ < $arr[$i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\necho\
    \ move_one_ball(array(3, 4, 5, 1, 2));\necho \"\\n\";\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2));\necho \"\\n\";\necho move_one_ball(array(3, 4, 5, 1, 2, 3));\n\
    echo \"\\n\";\necho move_one_ball(array(3, 4, 5, 1, 2, 3, 4));\necho \"\\n\";\n\
    echo move_one_ball(array(3, 4, 5, 1, 2, 3, 4, 5));\necho \"\\n\";\necho move_one_ball(array(3,\
    \ 4, 5, 1, 2, 3, 4, 5, 6));\necho \"\\n\";\necho move_one_ball(array(3, 4, 5,\
    \ 1, 2, 3, 4, 5, 6, 7));\necho \"\\n\";\necho move_one_ball(array(3, 4, 5, 1,\
    \ 2, 3, 4, 5, 6, 7, 8));\necho \"\\n\";\necho move_one_ball(array(3, 4, 5, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9));\necho \"\\n\";\necho move_one_ball(array(3, 4, 5,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp3bblitc9.php
    on line 65

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(5, 4, 3,\
    \ 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaig5xmm9.php:58\n\
    Stack trace:\n#0 /tmp/tmpaig5xmm9.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpaig5xmm9.php\
    \ on line 58\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $arr_len = count($arr);\n\t$i = 0;\n\t$j = $arr_len - 1;\n\twhile($i < $j) {\n\
    \t\tif($arr[$i] > $arr[$i + 1]) {\n\t\t\t$temp = $arr[$i];\n\t\t\t$arr[$i] = $arr[$i\
    \ + 1];\n\t\t\t$arr[$i + 1] = $temp;\n\t\t}\n\t\tif($arr[$j] < $arr[$j - 1]) {\n\
    \t\t\t$temp = $arr[$j];\n\t\t\t$arr[$j] = $arr[$j - 1];\n\t\t\t$arr[$j - 1] =\
    \ $temp;\n\t\t}\n\t\t$i++;\n\t\t$j--;\n\t}\n\tfor($i = 0; $i < $arr_len - 1; $i++)\
    \ {\n\t\tif($arr[$i] > $arr[$i + 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n$arr = array(3, 4, 5, 1, 2);\n$result = move_one_ball($arr);\necho\
    \ $result;\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfu44zlsz.php:56\n\
    Stack trace:\n#0 /tmp/tmpfu44zlsz.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpfu44zlsz.php\
    \ on line 56\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if ($count == 0) {\n        return true;\n    }\n\
    \    $max = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $max) {\n            return false;\n        }\n        $max = $arr[$i];\n\
    \    }\n    return true;\n}\n\n/*\n * Complete the function below.\n */\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9gt9882.php:46\n\
    Stack trace:\n#0 /tmp/tmpa9gt9882.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpa9gt9882.php\
    \ on line 46\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif ($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor ($i = 1; $i < $len; $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array();\necho move_one_ball($arr);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6md4r7az.php:52\n\
    Stack trace:\n#0 /tmp/tmp6md4r7az.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp6md4r7az.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if(count($arr) == 0) {\n        return true;\n    }\n    $min = $arr[0];\n\
    \    for($i = 1; $i < count($arr); $i++) {\n        if($arr[$i] < $min) {\n  \
    \          return false;\n        }\n        $min = $arr[$i];\n    }\n    return\
    \ true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphycbmnrb.php:44\n\
    Stack trace:\n#0 /tmp/tmphycbmnrb.php(51): test()\n#1 {main}\n  thrown in /tmp/tmphycbmnrb.php\
    \ on line 44\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    if (empty($arr)) {\n\t\treturn true;\n\t}\n\t$arr_len = count($arr);\n\t$min =\
    \ $arr[0];\n\t$min_index = 0;\n\tfor ($i = 1; $i < $arr_len; $i++) {\n\t\tif ($arr[$i]\
    \ < $min) {\n\t\t\t$min = $arr[$i];\n\t\t\t$min_index = $i;\n\t\t}\n\t}\n\tif\
    \ ($min_index == 0) {\n\t\treturn true;\n\t}\n\tfor ($i = $min_index; $i < $arr_len\
    \ - 1; $i++) {\n\t\tif ($arr[$i] > $arr[$i + 1]) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(3, 4, 5, 1, 2, 6);\necho move_one_ball($arr);\necho \"\\\
    n\";\n$arr = array(3, 4, 5, 1, 2, 6, 7);\necho move_one_ball($arr);\necho \"\\\
    n\";\n$arr = array(3, 4, 5, 1, 2, 6, 7, 8);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(3, 4, 5, 1, 2, 6, 7, 8, 9);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 4, 5, 1, 2, 6, 7, 8, 9, 10);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 4, 5, 1, 2, 6, 7,\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpn_9ywtxj.php on line 72

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if (empty($arr)) {\n        return true;\n    }\n    $count = count($arr);\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if ($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3s4d8u73.php:42\n\
    Stack trace:\n#0 /tmp/tmp3s4d8u73.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp3s4d8u73.php\
    \ on line 42\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if ($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3s4d8u73.php:42\n\
    Stack trace:\n#0 /tmp/tmp3s4d8u73.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp3s4d8u73.php\
    \ on line 42\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = $arr[$i];\n\
    \    }\n    return true;\n}\n\n/* We have an array 'arr' of N integers arr[1],\
    \ arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your\
    \ task is to determine if\nit is possible to get an array sorted in non-decreasing\
    \ order by performing \nthe following operation on the given array:\nYou are allowed\
    \ to perform right shift operation any number of times.\nOne right shift operation\
    \ means shifting all elements of the array by one\nposition in the right direction.\
    \ The last element of the array will be moved to\nthe starting position in the\
    \ array i.e. 0th index. \nIf it is possible to obtain the sorted array by performing\
    \ the above operation\nthen return true else return false.\nIf the given array\
    \ is empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction candidate(...$args) {\n  \
    \  return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiwmcoii5.php:64\n\
    Stack trace:\n#0 /tmp/tmpiwmcoii5.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpiwmcoii5.php\
    \ on line 64\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count < 2) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    $max = $arr[0];\n    for($i = 1; $i < $count; $i++)\
    \ {\n        if($arr[$i] > $max) {\n            $max = $arr[$i];\n        }\n\
    \        if($arr[$i] < $min) {\n            $min = $arr[$i];\n        }\n    }\n\
    \    if($min == $arr[0] && $max == $arr[$count - 1]) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpia90s7lx.php:51\n\
    Stack trace:\n#0 /tmp/tmpia90s7lx.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpia90s7lx.php\
    \ on line 51\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if ($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(5, 4, 3,\
    \ 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5,\
    \ 6);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(7, 6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(8, 7, 6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(9, 8, 7, 6, 5,\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpcrar_dxo.php on line 75

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if ($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxt0r201y.php:49\n\
    Stack trace:\n#0 /tmp/tmpxt0r201y.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpxt0r201y.php\
    \ on line 49\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $n = count($arr);\n    if ($n == 0) {\n        return true;\n    }\n    $max\
    \ = $arr[0];\n    for ($i = 1; $i < $n; $i++) {\n        if ($arr[$i] < $max)\
    \ {\n            return false;\n        }\n        $max = max($max, $arr[$i]);\n\
    \    }\n    return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnogy5g_i.php:42\n\
    Stack trace:\n#0 /tmp/tmpnogy5g_i.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpnogy5g_i.php\
    \ on line 42\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if(empty($arr)) {\n        return true;\n    }\n    $n = count($arr);\n   \
    \ $min = $arr[0];\n    for($i = 1; $i < $n; $i++) {\n        if($arr[$i] < $min)\
    \ {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpujujlncq.php:52\n\
    Stack trace:\n#0 /tmp/tmpujujlncq.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpujujlncq.php\
    \ on line 52\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $count = count($arr);\n\tif($count == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $count; $i++) {\n\t\tif($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array();\necho move_one_ball($arr);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7qk9szw.php:52\n\
    Stack trace:\n#0 /tmp/tmpi7qk9szw.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpi7qk9szw.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $sorted = $arr;\n    sort($sorted);\n    $count = count($arr);\n    for ($i\
    \ = 0; $i < $count; $i++) {\n        if ($arr[$i] != $sorted[$i]) {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl0cpo3fk.php:39\n\
    Stack trace:\n#0 /tmp/tmpl0cpo3fk.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpl0cpo3fk.php\
    \ on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if ($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxt0r201y.php:49\n\
    Stack trace:\n#0 /tmp/tmpxt0r201y.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpxt0r201y.php\
    \ on line 49\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    if(empty($arr)) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\t$max = $arr[0];\n\
    \t$count = 0;\n\tfor($i = 1; $i < count($arr); $i++) {\n\t\tif($arr[$i] < $min)\
    \ {\n\t\t\t$min = $arr[$i];\n\t\t\t$count++;\n\t\t}\n\t\tif($arr[$i] > $max) {\n\
    \t\t\t$max = $arr[$i];\n\t\t}\n\t}\n\tif($count > 1) {\n\t\treturn false;\n\t\
    }\n\treturn true;\n}\n\necho move_one_ball(array(3, 4, 5, 1, 2)) . \"\\n\";\n\
    echo move_one_ball(array(3, 5, 4, 1, 2)) . \"\\n\";\necho move_one_ball(array(1,\
    \ 2, 3, 4, 5)) . \"\\n\";\necho move_one_ball(array(5, 4, 3, 2, 1)) . \"\\n\"\
    ;\necho move_one_ball(array(5, 4, 3, 1, 2)) . \"\\n\";\necho move_one_ball(array(5,\
    \ 4, 3, 2, 1)) . \"\\n\";\necho move_one_ball(array(5, 4, 3, 1, 2)) . \"\\n\"\
    ;\necho move_one_ball(array(5, 4, 3, 2, 1)) . \"\\n\";\necho move_one_ball(array(5,\
    \ 4, 3, 1, 2)) . \"\\n\";\necho move_one_ball(array(5, 4, 3, 2, 1)) . \"\\n\"\
    ;\necho move_one_ball(array(5, 4, 3, 1, 2)) . \"\\n\";\necho move_one_ball(array(5,\
    \ 4, 3, 2, 1)) . \"\\n\";\necho move_one_ball(array(5, 4, 3, 1, 2)) . \"\\n\"\
    ;\necho move_one_ball(array(5, 4, 3, 2, 1)) . \"\\n\";\necho move_one_ball(array(5,\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpt2nd04d2.php on line 60

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = $arr[$i];\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0b5c09hl.php:52\n\
    Stack trace:\n#0 /tmp/tmp0b5c09hl.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp0b5c09hl.php\
    \ on line 52\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++)\
    \ {\n        if ($arr[$i] < $min) {\n            return false;\n        }\n  \
    \      $min = $arr[$i];\n    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxm80mxlu.php:42\n\
    Stack trace:\n#0 /tmp/tmpxm80mxlu.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxm80mxlu.php\
    \ on line 42\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $arr_count = count($arr);\n\tif($arr_count == 0) {\n\t\treturn true;\n\t}\n\t\
    $min = $arr[0];\n\t$min_index = 0;\n\tfor($i = 1; $i < $arr_count; $i++) {\n\t\
    \tif($arr[$i] < $min) {\n\t\t\t$min = $arr[$i];\n\t\t\t$min_index = $i;\n\t\t\
    }\n\t}\n\tif($min_index == 0) {\n\t\treturn true;\n\t}\n\tfor($i = 1; $i < $arr_count;\
    \ $i++) {\n\t\tif($arr[$i] < $arr[$i - 1]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \treturn true;\n}\n$arr = array(3, 4, 5, 1, 2);\nvar_dump(move_one_ball($arr));\n\
    $arr = array(3, 5, 4, 1, 2);\nvar_dump(move_one_ball($arr));\n$arr = array(1,\
    \ 2, 3, 4, 5);\nvar_dump(move_one_ball($arr));\n$arr = array(5, 4, 3, 2, 1);\n\
    var_dump(move_one_ball($arr));\n$arr = array(1, 2, 3, 4, 5, 6);\nvar_dump(move_one_ball($arr));\n\
    $arr = array(6, 5, 4, 3, 2, 1);\nvar_dump(move_one_ball($arr));\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7);\nvar_dump(move_one_ball($arr));\n$arr = array(7, 6, 5, 4,\
    \ 3, 2, 1);\nvar_dump(move_one_ball($arr));\n$arr = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8);\nvar_dump(move_one_ball($arr));\n$arr = array(8, 7, 6, 5, 4, 3, 2, 1);\n\
    var_dump(move_one_ball($arr));\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(false)\nbool(false)\nbool(true)\nbool(false)\nbool(true)\nbool(false)\n\
    bool(true)\nbool(false)\nbool(true)\nbool(false)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpilbfh2ub.php:71\nStack trace:\n#0 /tmp/tmpilbfh2ub.php(78):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpilbfh2ub.php on line 71\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif ($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor ($i = 1; $i < $len; $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpusgc2yhb.php:48\n\
    Stack trace:\n#0 /tmp/tmpusgc2yhb.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpusgc2yhb.php\
    \ on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpetwheqcd.php:49\n\
    Stack trace:\n#0 /tmp/tmpetwheqcd.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpetwheqcd.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $count = count($arr);\n\tif($count < 2) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \t$max = $arr[0];\n\tfor($i = 1; $i < $count; $i++) {\n\t\tif($arr[$i] < $min)\
    \ {\n\t\t\t$min = $arr[$i];\n\t\t}\n\t\tif($arr[$i] > $max) {\n\t\t\t$max = $arr[$i];\n\
    \t\t}\n\t}\n\tif($min == $max) {\n\t\treturn true;\n\t}\n\t$min_index = array_search($min,\
    \ $arr);\n\t$max_index = array_search($max, $arr);\n\tif($min_index == 0) {\n\t\
    \t$min_index = $count;\n\t}\n\tif($max_index == 0) {\n\t\t$max_index = $count;\n\
    \t}\n\tif($min_index < $max_index) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\necho move_one_ball(array(3, 4, 5, 1, 2));\necho \"\\n\";\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2));\necho \"\\n\";\necho move_one_ball(array(1, 2, 3, 4, 5));\necho\
    \ \"\\n\";\necho move_one_ball(array(5, 4, 3, 2, 1));\necho \"\\n\";\necho move_one_ball(array(1,\
    \ 1, 1, 1, 1));\necho \"\\n\";\necho move_one_ball(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,\
    \ 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp6lb1mwdv.php on line 65

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if (count($arr) == 0) {\n        return true;\n    }\n    $min = $arr[0];\n\
    \    $max = $arr[0];\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            $min = $arr[$i];\n        }\n        if ($arr[$i] > $max)\
    \ {\n            $max = $arr[$i];\n        }\n    }\n    if ($min == $arr[0] &&\
    \ $max == $arr[count($arr) - 1]) {\n        return true;\n    }\n    return false;\n\
    }\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n\
    $arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr =\
    \ array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3,\
    \ 4, 5, 6);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(6, 5, 4, 3,\
    \ 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5,\
    \ 6, 7);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(7, 6, 5, 4, 3,\
    \ 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5,\
    \ 6, 7, 8);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(8, 7, 6, 5,\
    \ 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3,\
    \ 4, 5, 6,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpu54iko1e.php on line 74

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if ($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(5, 4, 3,\
    \ 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5,\
    \ 6);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(7, 6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(8, 7, 6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(9, 8, 7, 6, 5,\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpcrar_dxo.php on line 75

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if (empty($arr)) {\n        return true;\n    }\n    $min = $arr[0];\n    for\
    \ ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i] < $min) {\n       \
    \     return false;\n        }\n        $min = $arr[$i];\n    }\n    return true;\n\
    }\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n\
    $arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr =\
    \ array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1rybqua0.php:51\n\
    Stack trace:\n#0 /tmp/tmp1rybqua0.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp1rybqua0.php\
    \ on line 51\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $len; $i++) {\n\t\tif($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6wzq7cwl.php:44\n\
    Stack trace:\n#0 /tmp/tmp6wzq7cwl.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp6wzq7cwl.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkt8zbsfa.php:45\n\
    Stack trace:\n#0 /tmp/tmpkt8zbsfa.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpkt8zbsfa.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0)\n        return true;\n    $min\
    \ = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i] < $min)\n\
    \            return false;\n        $min = min($min, $arr[$i]);\n    }\n    return\
    \ true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpekf2cwwz.php:43\n\
    Stack trace:\n#0 /tmp/tmpekf2cwwz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpekf2cwwz.php\
    \ on line 43\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $n = count($arr);\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i =\
    \ 1; $i < $n; $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n\
    \        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n   \
    \     }\n    }\n    if ($min == 1 && $max == $n) {\n        return true;\n   \
    \ }\n    return false;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyfws2azn.php:46\n\
    Stack trace:\n#0 /tmp/tmpyfws2azn.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpyfws2azn.php\
    \ on line 46\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $min = $arr[0];\n    $max = $arr[0];\n    $len = count($arr);\n    for ($i\
    \ = 1; $i < $len; $i++) {\n        if ($arr[$i] < $min) {\n            $min =\
    \ $arr[$i];\n        }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n\
    \        }\n    }\n    if ($min == $arr[0] && $max == $arr[$len - 1]) {\n    \
    \    return true;\n    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5, 6);\necho move_one_ball($arr);\necho \"\\n\";\n\
    $arr = array(6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(1, 2, 3, 4, 5, 6, 7);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr\
    \ = array(1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr);\necho \"\\n\";\n\
    $arr = array(8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\necho move_one_ball($\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpbrsor58g.php on line 73

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpetwheqcd.php:49\n\
    Stack trace:\n#0 /tmp/tmpetwheqcd.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpetwheqcd.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $max = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $max) {\n            return false;\n        }\n        $max = $arr[$i];\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(5, 4, 3,\
    \ 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjyb4d6co.php:58\n\
    Stack trace:\n#0 /tmp/tmpjyb4d6co.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpjyb4d6co.php\
    \ on line 58\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $n = count($arr);\n    $i = 0;\n    while ($i < $n - 1) {\n        if ($arr[$i]\
    \ > $arr[$i + 1]) {\n            return false;\n        }\n        $i++;\n   \
    \ }\n    return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp506chdys.php:39\n\
    Stack trace:\n#0 /tmp/tmp506chdys.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp506chdys.php\
    \ on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $count = count($arr);\n\tif ($count == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor ($i = 1; $i < $count; $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n\n$arr = array(3,\
    \ 4, 5, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4,\
    \ 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array();\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_8ji9sd.php:58\n\
    Stack trace:\n#0 /tmp/tmpi_8ji9sd.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpi_8ji9sd.php\
    \ on line 58\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif ($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor ($i = 1; $i < $len; $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bhs4mfp.php:45\n\
    Stack trace:\n#0 /tmp/tmp_bhs4mfp.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp_bhs4mfp.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $len; $i++) {\n\t\tif($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxquisbam.php:45\n\
    Stack trace:\n#0 /tmp/tmpxquisbam.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpxquisbam.php\
    \ on line 45\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif($len == 0)\n\t\treturn true;\n\t$min = $arr[0];\n\t\
    for($i = 1; $i < $len; $i++) {\n\t\tif($arr[$i] < $min)\n\t\t\treturn false;\n\
    \t\t$min = min($min, $arr[$i]);\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5,\
    \ 1, 2);\necho move_one_ball($arr);\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5pkd5npw.php:42\n\
    Stack trace:\n#0 /tmp/tmp5pkd5npw.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp5pkd5npw.php\
    \ on line 42\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if ($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstufpkk5.php:52\n\
    Stack trace:\n#0 /tmp/tmpstufpkk5.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpstufpkk5.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzgtlbthv.php:44\n\
    Stack trace:\n#0 /tmp/tmpzgtlbthv.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpzgtlbthv.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $count = count($arr);\n\tif($count == 0)\n\t\treturn true;\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $count; $i++) {\n\t\tif($arr[$i] < $min)\n\t\t\treturn false;\n\
    \t\t$min = min($min, $arr[$i]);\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5,\
    \ 1, 2);\necho move_one_ball($arr);\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpenemiqxz.php:42\n\
    Stack trace:\n#0 /tmp/tmpenemiqxz.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpenemiqxz.php\
    \ on line 42\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif ($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor ($i = 1; $i < $len; $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array();\necho move_one_ball($arr);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6md4r7az.php:52\n\
    Stack trace:\n#0 /tmp/tmp6md4r7az.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp6md4r7az.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $arr_len = count($arr);\n    if ($arr_len == 0) {\n        return true;\n \
    \   }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < $arr_len;\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if ($min == 1 && $max == $arr_len) {\n        return true;\n \
    \   }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz5lxb8yc.php:50\n\
    Stack trace:\n#0 /tmp/tmpz5lxb8yc.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpz5lxb8yc.php\
    \ on line 50\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $count = count($arr);\n\tif ($count == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor ($i = 1; $i < $count; $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n\n$arr = array(3,\
    \ 4, 5, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4,\
    \ 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array();\necho move_one_ball($arr);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $arr = array_values($arr);\n\t$len = count($arr);\n\tif($len == 0) {\n\t\treturn\
    \ true;\n\t}\n\t$min = $arr[0];\n\t$max = $arr[0];\n\tfor($i = 1; $i < $len; $i++)\
    \ {\n\t\tif($arr[$i] < $min) {\n\t\t\t$min = $arr[$i];\n\t\t}\n\t\tif($arr[$i]\
    \ > $max) {\n\t\t\t$max = $arr[$i];\n\t\t}\n\t}\n\tif($min == 1 && $max == $len)\
    \ {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\n\
    echo move_one_ball($arr) . \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr)\
    \ . \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr) . \"\\n\"\
    ;\n$arr = array(1, 2, 3, 5, 4);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3,\
    \ 4, 5, 6, 7);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6, 7, 8);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10);\necho move_one_ball($arr) . \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpag1vmg8b.php
    on line 65

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $n = count($arr);\n    if($n == 0) {\n        return true;\n    }\n    $max\
    \ = $arr[0];\n    for($i = 1; $i < $n; $i++) {\n        if($arr[$i] < $max) {\n\
    \            return false;\n        }\n        $max = max($max, $arr[$i]);\n \
    \   }\n    return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6lmh3ew6.php:42\n\
    Stack trace:\n#0 /tmp/tmp6lmh3ew6.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp6lmh3ew6.php\
    \ on line 42\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo7kx6hz7.php:44\n\
    Stack trace:\n#0 /tmp/tmpo7kx6hz7.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpo7kx6hz7.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if ($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(5, 4, 3,\
    \ 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5,\
    \ 6);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(7, 6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(8, 7, 6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(9, 8, 7, 6, 5,\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpcrar_dxo.php on line 75

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $n = count($arr);\n\tif($n == 0)\n\t\treturn true;\n\t$i = 0;\n\twhile($i < $n\
    \ - 1) {\n\t\tif($arr[$i] > $arr[$i + 1])\n\t\t\tbreak;\n\t\t$i++;\n\t}\n\tif($i\
    \ == $n - 1)\n\t\treturn true;\n\t$j = $i + 1;\n\twhile($j < $n - 1) {\n\t\tif($arr[$j]\
    \ < $arr[$j + 1])\n\t\t\tbreak;\n\t\t$j++;\n\t}\n\tif($j == $n - 1)\n\t\treturn\
    \ true;\n\treturn false;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo_6hnmyf.php:52\n\
    Stack trace:\n#0 /tmp/tmpo_6hnmyf.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpo_6hnmyf.php\
    \ on line 52\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $count = count($arr);\n\tif ($count == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor ($i = 1; $i < $count; $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n\n/* We have an\
    \ array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the array\
    \ will be randomly ordered. Your task is to determine if\nit is possible to get\
    \ an array sorted in non-decreasing order by performing \nthe following operation\
    \ on the given array:\nYou are allowed to perform right shift operation any number\
    \ of times.\nOne right shift operation means shifting all elements of the array\
    \ by one\nposition in the right direction. The last element of the array will\
    \ be moved to\nthe starting position in the array i.e. 0th index. \nIf it is possible\
    \ to obtain the sorted array by performing the above operation\nthen return true\
    \ else return false.\nIf the given array is empty then return true.\nNote: The\
    \ given array is guaranteed to have unique elements.\nFor Example:\n>>> move_one_ball(array(3,\
    \ 4, 5, 1, 2))\ntrue\nExplanation: By performin 2 right shift operations, non-decreasing\
    \ order can\nbe achieved for the given array.\n>>> move_one_ball(array(3, 5, 4,\
    \ 1, 2))\nfalse\nExplanation:It is not possible to get non-decreasing order for\
    \ the given\narray by performing any number of right shift operations.*/\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp09qdyrqy.php:64\n\
    Stack trace:\n#0 /tmp/tmp09qdyrqy.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp09qdyrqy.php\
    \ on line 64\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $n = count($arr);\n    if ($n == 0) {\n        return true;\n    }\n    $min\
    \ = $arr[0];\n    for ($i = 1; $i < $n; $i++) {\n        if ($arr[$i] < $min)\
    \ {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\
    \ 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\
    \ 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,\
    \ 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,\
    \ 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,\
    \ 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124,\
    \ 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140,\
    \ 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156,\
    \ 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp5elw3fh8.php on line 45

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzgtlbthv.php:44\n\
    Stack trace:\n#0 /tmp/tmpzgtlbthv.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpzgtlbthv.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if ($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3s4d8u73.php:42\n\
    Stack trace:\n#0 /tmp/tmp3s4d8u73.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp3s4d8u73.php\
    \ on line 42\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\nvar_dump(move_one_ball($arr));\n\
    $arr = array(3, 5, 4, 1, 2);\nvar_dump(move_one_ball($arr));\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(false)\nbool(false)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmphgmolf80.php:47\nStack trace:\n#0 /tmp/tmphgmolf80.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmphgmolf80.php on line 47\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $arr_len = count($arr);\n    if ($arr_len == 0) {\n        return true;\n \
    \   }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < $arr_len;\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if ($min == 1 && $max == $arr_len) {\n        return true;\n \
    \   }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(1, 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5, 6);\necho move_one_ball($arr);\necho \"\\n\";\n\
    $arr = array(1, 2, 3, 4, 5, 6, 7);\necho move_one_ball($arr);\necho \"\\n\";\n\
    $arr = array(1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpcs09x3_a.php
    on line 72

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $count = count($arr);\n\tif($count == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $count; $i++) {\n\t\tif($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfklntvcq.php:44\n\
    Stack trace:\n#0 /tmp/tmpfklntvcq.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpfklntvcq.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if(count($arr) == 0) {\n        return true;\n    }\n    $min = $arr[0];\n\
    \    for($i = 1; $i < count($arr); $i++) {\n        if($arr[$i] < $min) {\n  \
    \          return false;\n        }\n        $min = $arr[$i];\n    }\n    return\
    \ true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi2_xb5kk.php:43\n\
    Stack trace:\n#0 /tmp/tmpi2_xb5kk.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpi2_xb5kk.php\
    \ on line 43\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $count = count($arr);\n\tif($count == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $count; $i++) {\n\t\tif($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array();\necho move_one_ball($arr);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7qk9szw.php:52\n\
    Stack trace:\n#0 /tmp/tmpi7qk9szw.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpi7qk9szw.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $len; $i++) {\n\t\tif($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\necho move_one_ball(array(3,\
    \ 4, 5, 1, 2));\necho \"\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2));\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjmwyy7ms.php:46\n\
    Stack trace:\n#0 /tmp/tmpjmwyy7ms.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpjmwyy7ms.php\
    \ on line 46\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $len; $i++) {\n\t\tif($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array();\necho move_one_ball($arr);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkckstzjw.php:52\n\
    Stack trace:\n#0 /tmp/tmpkckstzjw.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpkckstzjw.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_uubejkj.php:52\n\
    Stack trace:\n#0 /tmp/tmp_uubejkj.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp_uubejkj.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkt8zbsfa.php:45\n\
    Stack trace:\n#0 /tmp/tmpkt8zbsfa.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpkt8zbsfa.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $len; $i++) {\n\t\tif($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6wzq7cwl.php:44\n\
    Stack trace:\n#0 /tmp/tmp6wzq7cwl.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp6wzq7cwl.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n/* We have an array 'arr' of N integers arr[1],\
    \ arr[2], ..., arr[N].The\nnumbers in the array will be randomly ordered. Your\
    \ task is to determine if\nit is possible to get an array sorted in non-decreasing\
    \ order by performing \nthe following operation on the given array:\nYou are allowed\
    \ to perform right shift operation any number of times.\nOne right shift operation\
    \ means shifting all elements of the array by one\nposition in the right direction.\
    \ The last element of the array will be moved to\nthe starting position in the\
    \ array i.e. 0th index. \nIf it is possible to obtain the sorted array by performing\
    \ the above operation\nthen return true else return false.\nIf the given array\
    \ is empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction candidate(...$args) {\n  \
    \  return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpprkpeb8c.php:64\n\
    Stack trace:\n#0 /tmp/tmpprkpeb8c.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpprkpeb8c.php\
    \ on line 64\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if ($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmz0gwlb4.php:43\n\
    Stack trace:\n#0 /tmp/tmpmz0gwlb4.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpmz0gwlb4.php\
    \ on line 43\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if (empty($arr)) {\n        return true;\n    }\n    $count = count($arr);\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(5, 4, 3,\
    \ 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5,\
    \ 6);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6,\
    \ 7);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6,\
    \ 7, 8);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\necho move_one_ball($arr);\necho \"\\n\";\n\
    $arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\necho move_one_ball\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpohglhuse.php on line 73

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $max = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $max) {\n            return false;\n        }\n        $max = $arr[$i];\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(5, 4, 3,\
    \ 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5,\
    \ 6);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(7, 6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(8, 7, 6, 5, 4, 3, 2, 1);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(9, 8, 7, 6, 5, 4,\
    \ 3,\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpxyotsbk2.php on line 75

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7i3g55ns.php:48\n\
    Stack trace:\n#0 /tmp/tmp7i3g55ns.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp7i3g55ns.php\
    \ on line 48\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_22ctz2.php:43\n\
    Stack trace:\n#0 /tmp/tmpd_22ctz2.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpd_22ctz2.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpetwheqcd.php:49\n\
    Stack trace:\n#0 /tmp/tmpetwheqcd.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpetwheqcd.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1,\
    \ 2, 3, 4, 5);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(5, 4, 3,\
    \ 2, 1);\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaig5xmm9.php:58\n\
    Stack trace:\n#0 /tmp/tmpaig5xmm9.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpaig5xmm9.php\
    \ on line 58\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $arr_length = count($arr);\n    if ($arr_length == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < $arr_length;\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if ($min == 1 && $max == $arr_length) {\n        return true;\n\
    \    }\n    return false;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfs5is8mj.php:52\n\
    Stack trace:\n#0 /tmp/tmpfs5is8mj.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpfs5is8mj.php\
    \ on line 52\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_22ctz2.php:43\n\
    Stack trace:\n#0 /tmp/tmpd_22ctz2.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpd_22ctz2.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if(empty($arr)) return true;\n    $len = count($arr);\n    $min = $arr[0];\n\
    \    for($i = 1; $i < $len; $i++) {\n        if($arr[$i] < $min) return false;\n\
    \        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n/* We have\
    \ an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the\
    \ array will be randomly ordered. Your task is to determine if\nit is possible\
    \ to get an array sorted in non-decreasing order by performing \nthe following\
    \ operation on the given array:\nYou are allowed to perform right shift operation\
    \ any number of times.\nOne right shift operation means shifting all elements\
    \ of the array by one\nposition in the right direction. The last element of the\
    \ array will be moved to\nthe starting position in the array i.e. 0th index. \n\
    If it is possible to obtain the sorted array by performing the above operation\n\
    then return true else return false.\nIf the given array is empty then return true.\n\
    Note: The given array is guaranteed to have unique elements.\nFor Example:\n>>>\
    \ move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation: By performin 2 right\
    \ shift operations, non-decreasing order can\nbe achieved for the given array.\n\
    >>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It is not possible\
    \ to get non-decreasing order for the given\narray by performing any number of\
    \ right shift operations.*/\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdwv8uij0.php:60\n\
    Stack trace:\n#0 /tmp/tmpdwv8uij0.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpdwv8uij0.php\
    \ on line 60\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if(empty($arr)) {\n        return true;\n    }\n    $count = count($arr);\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy9_h3t1u.php:44\n\
    Stack trace:\n#0 /tmp/tmpy9_h3t1u.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpy9_h3t1u.php\
    \ on line 44\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    if(empty($arr)) {\n\t\treturn true;\n\t}\n\t$count = count($arr);\n\t$max = $arr[0];\n\
    \tfor($i = 1; $i < $count; $i++) {\n\t\tif($arr[$i] < $max) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$max = $arr[$i];\n\t}\n\treturn true;\n}\necho move_one_ball(array(3,\
    \ 4, 5, 1, 2)) . \"\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2)) . \"\\n\"\
    ;\necho move_one_ball(array(3, 5, 4, 1, 2, 3)) . \"\\n\";\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2, 3, 4)) . \"\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2, 3, 4,\
    \ 5)) . \"\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2, 3, 4, 5, 6)) . \"\\\
    n\";\necho move_one_ball(array(3, 5, 4, 1, 2, 3, 4, 5, 6, 7)) . \"\\n\";\necho\
    \ move_one_ball(array(3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8)) . \"\\n\";\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9)) . \"\\n\";\necho move_one_ball(array(3, 5,\
    \ 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) . \"\\n\";\necho move_one_ball(array(3, 5,\
    \ 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) . \"\\n\";\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) . \"\\n\";\necho move_one_ball(array(3\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp3l5sqa4w.php
    on line 50

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $len; $i++) {\n\t\tif($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5, 1,\
    \ 2);\nvar_dump(move_one_ball($arr));\n$arr = array(3, 5, 4, 1, 2);\nvar_dump(move_one_ball($arr));\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(false)\nbool(false)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpn865983v.php:46\nStack trace:\n#0 /tmp/tmpn865983v.php(53): test()\n\
    #1 {main}\n  thrown in /tmp/tmpn865983v.php on line 46\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif ($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor ($i = 1; $i < $len; $i++) {\n\t\tif ($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv2jxjg0a.php:49\n\
    Stack trace:\n#0 /tmp/tmpv2jxjg0a.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpv2jxjg0a.php\
    \ on line 49\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if(count($arr) == 0) {\n        return true;\n    }\n    $min = $arr[0];\n\
    \    for($i = 1; $i < count($arr); $i++) {\n        if($arr[$i] < $min) {\n  \
    \          return false;\n        }\n        $min = $arr[$i];\n    }\n    return\
    \ true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi2_xb5kk.php:43\n\
    Stack trace:\n#0 /tmp/tmpi2_xb5kk.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpi2_xb5kk.php\
    \ on line 43\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_uubejkj.php:52\n\
    Stack trace:\n#0 /tmp/tmp_uubejkj.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp_uubejkj.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if ($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n/*\n * Complete the function below.\n */\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1_rp9xm2.php:46\n\
    Stack trace:\n#0 /tmp/tmp1_rp9xm2.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp1_rp9xm2.php\
    \ on line 46\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $arr_size = count($arr);\n    if($arr_size == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $max = $arr[0];\n    for($i = 1; $i < $arr_size;\
    \ $i++) {\n        if($arr[$i] < $min) {\n            $min = $arr[$i];\n     \
    \   }\n        if($arr[$i] > $max) {\n            $max = $arr[$i];\n        }\n\
    \    }\n    if($min == $max) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphtru2gqb.php:48\n\
    Stack trace:\n#0 /tmp/tmphtru2gqb.php(55): test()\n#1 {main}\n  thrown in /tmp/tmphtru2gqb.php\
    \ on line 48\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $count = count($arr);\n\tif($count == 0) {\n\t\treturn true;\n\t}\n\t$i = 0;\n\
    \t$j = $count - 1;\n\twhile($i < $j) {\n\t\tif($arr[$i] > $arr[$i + 1]) {\n\t\t\
    \tbreak;\n\t\t}\n\t\t$i++;\n\t}\n\twhile($j > 0) {\n\t\tif($arr[$j] < $arr[$j\
    \ - 1]) {\n\t\t\tbreak;\n\t\t}\n\t\t$j--;\n\t}\n\tif($i == $j) {\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\necho move_one_ball(array(3, 4, 5, 1, 2));\necho \"\\\
    n\";\necho move_one_ball(array(3, 5, 4, 1, 2));\necho \"\\n\";\necho move_one_ball(array(3,\
    \ 5, 4, 1, 2, 6));\necho \"\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2, 6,\
    \ 7));\necho \"\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2, 6, 7, 8));\necho\
    \ \"\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2, 6, 7, 8, 9));\necho \"\\n\"\
    ;\necho move_one_ball(array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10));\necho \"\\n\";\n\
    echo move_one_ball(array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10, 11));\necho \"\\n\";\n\
    echo move_one_ball(array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10, 11, 12));\necho \"\\n\"\
    ;\necho move_one_ball(array(3, 5, 4, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13));\necho\
    \ \"\\n\";\necho move_one_ball(array(3, 5, 4, 1, 2, 6,\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp2av7ffdv.php on line 68

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzgtlbthv.php:44\n\
    Stack trace:\n#0 /tmp/tmpzgtlbthv.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpzgtlbthv.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppl54km17.php:52\n\
    Stack trace:\n#0 /tmp/tmppl54km17.php(59): test()\n#1 {main}\n  thrown in /tmp/tmppl54km17.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if(empty($arr)) {\n        return true;\n    }\n    $count = count($arr);\n\
    \    $i = 0;\n    while($i < $count) {\n        if($i == $count - 1) {\n     \
    \       return true;\n        }\n        if($arr[$i] > $arr[$i + 1]) {\n     \
    \       return false;\n        }\n        $i++;\n    }\n}\n\n$arr = array(3, 4,\
    \ 5, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array();\necho move_one_ball($arr);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjv40av5v.php:54\n\
    Stack trace:\n#0 /tmp/tmpjv40av5v.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpjv40av5v.php\
    \ on line 54\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif($len == 0) {\n\t\treturn true;\n\t}\n\t$max = $arr[0];\n\
    \tfor($i = 1; $i < $len; $i++) {\n\t\tif($arr[$i] < $max) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$max = $arr[$i];\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppphjxt_0.php:48\n\
    Stack trace:\n#0 /tmp/tmppphjxt_0.php(55): test()\n#1 {main}\n  thrown in /tmp/tmppphjxt_0.php\
    \ on line 48\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo PHP_EOL;\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho PHP_EOL;\n\
    $arr = array();\necho move_one_ball($arr);\necho PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpafx7jfbu.php:52\n\
    Stack trace:\n#0 /tmp/tmpafx7jfbu.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpafx7jfbu.php\
    \ on line 52\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if(empty($arr)) return true;\n    $min = $arr[0];\n    for($i = 1; $i < count($arr);\
    \ $i++) {\n        if($arr[$i] < $min) return false;\n        $min = min($min,\
    \ $arr[$i]);\n    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp113_ansh.php:39\n\
    Stack trace:\n#0 /tmp/tmp113_ansh.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp113_ansh.php\
    \ on line 39\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_uubejkj.php:52\n\
    Stack trace:\n#0 /tmp/tmp_uubejkj.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp_uubejkj.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_uubejkj.php:52\n\
    Stack trace:\n#0 /tmp/tmp_uubejkj.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp_uubejkj.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $len; $i++) {\n\t\tif($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplxf4xvtq.php:49\n\
    Stack trace:\n#0 /tmp/tmplxf4xvtq.php(56): test()\n#1 {main}\n  thrown in /tmp/tmplxf4xvtq.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaxgd6nxe.php:49\n\
    Stack trace:\n#0 /tmp/tmpaxgd6nxe.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpaxgd6nxe.php\
    \ on line 49\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if (count($arr) == 0) {\n        return true;\n    }\n    $min = $arr[0];\n\
    \    $max = $arr[0];\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            $min = $arr[$i];\n        }\n        if ($arr[$i] > $max)\
    \ {\n            $max = $arr[$i];\n        }\n    }\n    if ($min == $arr[0] &&\
    \ $max == $arr[count($arr) - 1]) {\n        return true;\n    }\n    return false;\n\
    }\n\n/*\n * Complete the function below.\n */\nfunction candidate(...$args) {\n\
    \    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkswy9oly.php:51\n\
    Stack trace:\n#0 /tmp/tmpkswy9oly.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpkswy9oly.php\
    \ on line 51\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_22ctz2.php:43\n\
    Stack trace:\n#0 /tmp/tmpd_22ctz2.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpd_22ctz2.php\
    \ on line 43\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bhs4mfp.php:45\n\
    Stack trace:\n#0 /tmp/tmp_bhs4mfp.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp_bhs4mfp.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if (empty($arr)) {\n        return true;\n    }\n    $min = $arr[0];\n    $max\
    \ = $arr[0];\n    for ($i = 1; $i < count($arr); $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            $min = $arr[$i];\n        }\n        if ($arr[$i] > $max)\
    \ {\n            $max = $arr[$i];\n        }\n    }\n    if ($min == $arr[0] &&\
    \ $max == $arr[count($arr) - 1]) {\n        return true;\n    }\n    return false;\n\
    }\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt1x3hlxd.php:47\n\
    Stack trace:\n#0 /tmp/tmpt1x3hlxd.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpt1x3hlxd.php\
    \ on line 47\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $n = count($arr);\n    if ($n == 0) {\n        return true;\n    }\n    $max\
    \ = $arr[0];\n    for ($i = 1; $i < $n; $i++) {\n        if ($arr[$i] < $max)\
    \ {\n            return false;\n        }\n        $max = max($max, $arr[$i]);\n\
    \    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoo7wxnen.php:43\n\
    Stack trace:\n#0 /tmp/tmpoo7wxnen.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpoo7wxnen.php\
    \ on line 43\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if ($count == 0) {\n        return true;\n    }\n\
    \    $max = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $max) {\n            return false;\n        }\n        $max = $arr[$i];\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2a8rd5g5.php:49\n\
    Stack trace:\n#0 /tmp/tmp2a8rd5g5.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp2a8rd5g5.php\
    \ on line 49\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    $i = 0;\n    while ($i < $count) {\n        if ($arr[$i]\
    \ > $arr[$i + 1]) {\n            return false;\n        }\n        $i++;\n   \
    \ }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqj5bnzxq.php:42\n\
    Stack trace:\n#0 /tmp/tmpqj5bnzxq.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpqj5bnzxq.php\
    \ on line 42\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $len; $i++) {\n\t\tif($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\n\
    echo move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmp_vj4d0.php:48\n\
    Stack trace:\n#0 /tmp/tmpmp_vj4d0.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpmp_vj4d0.php\
    \ on line 48\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if($len <= 1) return true;\n    $min = $arr[0];\n\
    \    for($i = 1; $i < $len; $i++) {\n        if($arr[$i] < $min) return false;\n\
    \        $min = min($min, $arr[$i]);\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaonim_mg.php:38\n\
    Stack trace:\n#0 /tmp/tmpaonim_mg.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpaonim_mg.php\
    \ on line 38\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_uubejkj.php:52\n\
    Stack trace:\n#0 /tmp/tmp_uubejkj.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp_uubejkj.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if(empty($arr)) {\n        return true;\n    }\n    $len = count($arr);\n \
    \   $min = $arr[0];\n    for($i = 1; $i < $len; $i++) {\n        if($arr[$i] <\
    \ $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmkoqsb8b.php:52\n\
    Stack trace:\n#0 /tmp/tmpmkoqsb8b.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpmkoqsb8b.php\
    \ on line 52\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if ($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpstufpkk5.php:52\n\
    Stack trace:\n#0 /tmp/tmpstufpkk5.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpstufpkk5.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $arr_len = count($arr);\n    if ($arr_len == 0) {\n        return true;\n \
    \   }\n    $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < $arr_len;\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \    }\n        if ($arr[$i] > $max) {\n            $max = $arr[$i];\n       \
    \ }\n    }\n    if (($max - $min) == ($arr_len - 1)) {\n        return true;\n\
    \    }\n    return false;\n}\n\n/*\n * Test cases\n */\nassert_options(ASSERT_BAIL,\
    \ 1);\n\n$tests = array(\n    array(\n        'input' => array(3, 4, 5, 1, 2),\n\
    \        'expected' => true\n    ),\n    array(\n        'input' => array(3, 5,\
    \ 4, 1, 2),\n        'expected' => false\n    ),\n    array(\n        'input'\
    \ => array(1, 2, 3, 4, 5),\n        'expected' => true\n    ),\n    array(\n \
    \       'input' => array(5, 4, 3, 2, 1),\n        'expected' => false\n    ),\n\
    \    array(\n        'input' => array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n      \
    \  'expected' => true\n    ),\n    array(\n        'input' => array(10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1),\n        'expected' => false\n    ),\n    array(\n   \
    \     'input' => array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20),\n        'expected' => true\n    ),\n    array(\n        'input'\
    \ => array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4,\nfunction\
    \ candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmprymr352k.php on line 80

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $len; $i++) {\n\t\tif($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6wzq7cwl.php:44\n\
    Stack trace:\n#0 /tmp/tmp6wzq7cwl.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp6wzq7cwl.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_uubejkj.php:52\n\
    Stack trace:\n#0 /tmp/tmp_uubejkj.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp_uubejkj.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $i = 0;\n\t$j = count($arr) - 1;\n\twhile ($i < $j) {\n\t\tif ($arr[$i] > $arr[$i\
    \ + 1]) {\n\t\t\t$temp = $arr[$i];\n\t\t\t$arr[$i] = $arr[$i + 1];\n\t\t\t$arr[$i\
    \ + 1] = $temp;\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$temp = $arr[$j];\n\t\t\t$arr[$j]\
    \ = $arr[$j - 1];\n\t\t\t$arr[$j - 1] = $temp;\n\t\t\t$j--;\n\t\t}\n\t}\n\tif\
    \ ($arr == sort($arr)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnbjnhy35.php:54\n\
    Stack trace:\n#0 /tmp/tmpnbjnhy35.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpnbjnhy35.php\
    \ on line 54\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzgtlbthv.php:44\n\
    Stack trace:\n#0 /tmp/tmpzgtlbthv.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpzgtlbthv.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if($len == 0) {\n        return true;\n    }\n   \
    \ $min = $arr[0];\n    for($i = 1; $i < $len; $i++) {\n        if($arr[$i] < $min)\
    \ {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjajjmgw4.php:44\n\
    Stack trace:\n#0 /tmp/tmpjajjmgw4.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpjajjmgw4.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppl54km17.php:52\n\
    Stack trace:\n#0 /tmp/tmppl54km17.php(59): test()\n#1 {main}\n  thrown in /tmp/tmppl54km17.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len < 2) {\n        return true;\n    }\n   \
    \ $min = $arr[0];\n    $max = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n\
    \        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n        }\n   \
    \     if ($arr[$i] > $max) {\n            $max = $arr[$i];\n        }\n    }\n\
    \    if ($max - $min == $len - 1) {\n        return true;\n    }\n    return false;\n\
    }\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2z6sv9mh.php:52\n\
    Stack trace:\n#0 /tmp/tmp2z6sv9mh.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp2z6sv9mh.php\
    \ on line 52\n"
  timestamp: 1660220657
- exit_code: 0
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $arr_length = count($arr);\n    if ($arr_length == 0) {\n        return true;\n\
    \    }\n    $min = $arr[0];\n    $min_index = 0;\n    for ($i = 1; $i < $arr_length;\
    \ $i++) {\n        if ($arr[$i] < $min) {\n            $min = $arr[$i];\n    \
    \        $min_index = $i;\n        }\n    }\n    if ($min_index == 0) {\n    \
    \    return true;\n    }\n    for ($i = 1; $i < $min_index; $i++) {\n        if\
    \ ($arr[$i] < $arr[$i - 1]) {\n            return false;\n        }\n    }\n \
    \   for ($i = $min_index + 1; $i < $arr_length; $i++) {\n        if ($arr[$i]\
    \ < $arr[$i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if ($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for ($i = 1; $i < $count; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxt0r201y.php:49\n\
    Stack trace:\n#0 /tmp/tmpxt0r201y.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpxt0r201y.php\
    \ on line 49\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif($len == 0) {\n\t\treturn true;\n\t}\n\t$min = $arr[0];\n\
    \tfor($i = 1; $i < $len; $i++) {\n\t\tif($arr[$i] < $min) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$min = $arr[$i];\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5, 1,\
    \ 2);\necho move_one_ball($arr);\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6wzq7cwl.php:44\n\
    Stack trace:\n#0 /tmp/tmp6wzq7cwl.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp6wzq7cwl.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    $min = $arr[0];\n    for ($i = 1; $i < $len; $i++)\
    \ {\n        if ($arr[$i] < $min) {\n            return false;\n        }\n  \
    \      $min = min($min, $arr[$i]);\n    }\n    return true;\n}\n\n$arr = array(3,\
    \ 4, 5, 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(3, 5, 4,\
    \ 1, 2);\necho move_one_ball($arr);\necho \"\\n\";\n$arr = array(1, 2, 3, 4, 5);\n\
    echo move_one_ball($arr);\necho \"\\n\";\n$arr = array(5, 4, 3, 2, 1);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(2, 1, 3, 4, 5);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(1, 2, 3, 4, 5, 6);\necho move_one_ball($arr);\necho \"\\\
    n\";\n$arr = array(6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5, 6, 7);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\\n\"\
    ;\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8);\necho move_one_ball($arr);\necho \"\\\
    n\";\n$arr = array(8, 7, 6, 5, 4, 3, 2, 1);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(9, 8, 7, 6, 5, 4, 3, 2, 1\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpnp3movii.php
    on line 72

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if($len == 0) {\n        return true;\n    }\n   \
    \ $min = $arr[0];\n    for($i = 1; $i < $len; $i++) {\n        if($arr[$i] < $min)\
    \ {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    function candidate(...$args) {\n    return move_one_ball(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10, 1, 2)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph6nfk_v3.php:45\n\
    Stack trace:\n#0 /tmp/tmph6nfk_v3.php(52): test()\n#1 {main}\n  thrown in /tmp/tmph6nfk_v3.php\
    \ on line 45\n"
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_uubejkj.php:52\n\
    Stack trace:\n#0 /tmp/tmp_uubejkj.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp_uubejkj.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n\t\
    $len = count($arr);\n\tif($len == 0)\n\t\treturn true;\n\t$min = $arr[0];\n\t\
    for($i = 1; $i < $len; $i++) {\n\t\tif($arr[$i] < $min)\n\t\t\treturn false;\n\
    \t\t$min = min($min, $arr[$i]);\n\t}\n\treturn true;\n}\n$arr = array(3, 4, 5,\
    \ 1, 2);\necho move_one_ball($arr);\nfunction candidate(...$args) {\n    return\
    \ move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(3,\
    \ 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 10, 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5pkd5npw.php:42\n\
    Stack trace:\n#0 /tmp/tmp5pkd5npw.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp5pkd5npw.php\
    \ on line 42\n"
  timestamp: 1660220657
- exit_code: 0
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  if(empty($arr)) {\n        return true;\n    }\n    $count = count($arr);\n\
    \    $i = 0;\n    $j = $count - 1;\n    while($i < $j) {\n        if($arr[$i]\
    \ > $arr[$i + 1]) {\n            $temp = $arr[$i];\n            $arr[$i] = $arr[$i\
    \ + 1];\n            $arr[$i + 1] = $temp;\n            $i++;\n        } else\
    \ if($arr[$j] < $arr[$j - 1]) {\n            $temp = $arr[$j];\n            $arr[$j]\
    \ = $arr[$j - 1];\n            $arr[$j - 1] = $temp;\n            $j--;\n    \
    \    } else {\n            $i++;\n            $j--;\n        }\n    }\n    if($arr[$i]\
    \ > $arr[$i + 1]) {\n        return false;\n    }\n    return true;\n}\n$arr =\
    \ array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    Warning: Undefined array key 4 in /tmp/tmp9rbfhmhn.php on line 46

    '
  timestamp: 1660220657
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $count = count($arr);\n    if($count == 0) {\n        return true;\n    }\n\
    \    $min = $arr[0];\n    for($i = 1; $i < $count; $i++) {\n        if($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\n$arr = array();\necho move_one_ball($arr);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return move_one_ball(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(3, 4, 5, 1, 2)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(3, 5, 10, 1, 2)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(4, 3, 1, 2)) !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 4, 1, 2)) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppl54km17.php:52\n\
    Stack trace:\n#0 /tmp/tmppl54km17.php(59): test()\n#1 {main}\n  thrown in /tmp/tmppl54km17.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    numbers in the array will be randomly ordered. Your task is to determine if\n\
    it is possible to get an array sorted in non-decreasing order by performing \n\
    the following operation on the given array:\nYou are allowed to perform right\
    \ shift operation any number of times.\nOne right shift operation means shifting\
    \ all elements of the array by one\nposition in the right direction. The last\
    \ element of the array will be moved to\nthe starting position in the array i.e.\
    \ 0th index. \nIf it is possible to obtain the sorted array by performing the\
    \ above operation\nthen return true else return false.\nIf the given array is\
    \ empty then return true.\nNote: The given array is guaranteed to have unique\
    \ elements.\nFor Example:\n>>> move_one_ball(array(3, 4, 5, 1, 2))\ntrue\nExplanation:\
    \ By performin 2 right shift operations, non-decreasing order can\nbe achieved\
    \ for the given array.\n>>> move_one_ball(array(3, 5, 4, 1, 2))\nfalse\nExplanation:It\
    \ is not possible to get non-decreasing order for the given\narray by performing\
    \ any number of right shift operations.*/\nfunction move_one_ball($arr) {\n  \
    \  $len = count($arr);\n    if ($len == 0) {\n        return true;\n    }\n  \
    \  $min = $arr[0];\n    for ($i = 1; $i < $len; $i++) {\n        if ($arr[$i]\
    \ < $min) {\n            return false;\n        }\n        $min = min($min, $arr[$i]);\n\
    \    }\n    return true;\n}\n\n$arr = array(3, 4, 5, 1, 2);\necho move_one_ball($arr);\n\
    echo \"\\n\";\n$arr = array(3, 5, 4, 1, 2);\necho move_one_ball($arr);\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return move_one_ball(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(3, 4, 5, 1, 2)) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 5, 10,\
    \ 1, 2)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4,\
    \ 3, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
    \ 5, 4, 1, 2)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array())\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpetwheqcd.php:49\n\
    Stack trace:\n#0 /tmp/tmpetwheqcd.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpetwheqcd.php\
    \ on line 49\n"
  timestamp: 1660220656
