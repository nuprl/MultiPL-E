language: php
name: HumanEval_126_is_sorted
results:
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $num) {\n        if ($prev !== null && $num <=\
    \ $prev) {\n            $sorted = false;\n            break;\n        }\n    \
    \    $prev = $num;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpob6jknz_.php:51\n\
    Stack trace:\n#0 /tmp/tmpob6jknz_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpob6jknz_.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$sorted = true;\n\t$prev = null;\n\
    \tforeach ($lst as $item) {\n\t\tif ($prev != null && $prev >= $item) {\n\t\t\t\
    $sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $item;\n\t}\n\treturn $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeomb273u.php:51\n\
    Stack trace:\n#0 /tmp/tmpeomb273u.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpeomb273u.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n/* Given an array of numbers, return\
    \ whether or not they are sorted\nin ascending order. If array has more than 1\
    \ duplicate of the same\nnumber, return false. Assume no negative numbers and\
    \ only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdo9zv4gl.php:71\n\
    Stack trace:\n#0 /tmp/tmpdo9zv4gl.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpdo9zv4gl.php\
    \ on line 71\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n/*\
    \ Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcguj5mpg.php:65\n\
    Stack trace:\n#0 /tmp/tmpcguj5mpg.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpcguj5mpg.php\
    \ on line 65\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp2tgz4ayi.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2tgz4ayi.php:49\nStack\
    \ trace:\n#0 /tmp/tmp2tgz4ayi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2tgz4ayi.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_1v913x.php:51\n\
    Stack trace:\n#0 /tmp/tmpf_1v913x.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpf_1v913x.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $i = 0;\n\
    \    while ($i < count($lst) - 1) {\n        if ($lst[$i] > $lst[$i + 1]) {\n\
    \            $sorted = false;\n            break;\n        }\n        $i++;\n\
    \    }\n    return $sorted;\n}\n\n/* Given an array of numbers, return whether\
    \ or not they are sorted\nin ascending order. If array has more than 1 duplicate\
    \ of the same\nnumber, return false. Assume no negative numbers and only integers.\n\
    Examples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\n\
    true\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3,\
    \ 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeckv9adw.php:69\n\
    Stack trace:\n#0 /tmp/tmpeckv9adw.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpeckv9adw.php\
    \ on line 69\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp2tgz4ayi.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2tgz4ayi.php:49\nStack\
    \ trace:\n#0 /tmp/tmp2tgz4ayi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2tgz4ayi.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $len = count($lst);\n    for ($i = 0; $i\
    \ < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nyobsh6.php:48\n\
    Stack trace:\n#0 /tmp/tmp8nyobsh6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp8nyobsh6.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    for ($i\
    \ = 0; $i < count($lst) - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n\
    \            $sorted = false;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_6b7fy9w.php:48\n\
    Stack trace:\n#0 /tmp/tmp_6b7fy9w.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp_6b7fy9w.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$len = count($lst);\n\t$i = 0;\n\
    \twhile ($i < $len - 1) {\n\t\tif ($lst[$i] >= $lst[$i + 1]) {\n\t\t\treturn false;\n\
    \t\t}\n\t\t$i++;\n\t}\n\treturn true;\n}\n\n/* Given an array of numbers, return\
    \ whether or not they are sorted\nin ascending order. If array has more than 1\
    \ duplicate of the same\nnumber, return false. Assume no negative numbers and\
    \ only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0jacrx7.php:70\n\
    Stack trace:\n#0 /tmp/tmpw0jacrx7.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpw0jacrx7.php\
    \ on line 70\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = 0;\n    foreach ($lst as $num) {\n        if ($num < $prev) {\n          \
    \  $sorted = false;\n            break;\n        }\n        $prev = $num;\n  \
    \  }\n    return $sorted;\n}\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeep8on8i.php:48\n\
    Stack trace:\n#0 /tmp/tmpeep8on8i.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpeep8on8i.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len\
    \ - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80o2_qfe.php:49\n\
    Stack trace:\n#0 /tmp/tmp80o2_qfe.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp80o2_qfe.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n/* Given an array of numbers, return\
    \ whether or not they are sorted\nin ascending order. If array has more than 1\
    \ duplicate of the same\nnumber, return false. Assume no negative numbers and\
    \ only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdo9zv4gl.php:71\n\
    Stack trace:\n#0 /tmp/tmpdo9zv4gl.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpdo9zv4gl.php\
    \ on line 71\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_1v913x.php:51\n\
    Stack trace:\n#0 /tmp/tmpf_1v913x.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpf_1v913x.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumk1la8m.php:53\n\
    Stack trace:\n#0 /tmp/tmpumk1la8m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpumk1la8m.php\
    \ on line 53\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len\
    \ - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n/* Given an array of numbers, return\
    \ whether or not they are sorted\nin ascending order. If array has more than 1\
    \ duplicate of the same\nnumber, return false. Assume no negative numbers and\
    \ only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkbboa7bt.php:69\n\
    Stack trace:\n#0 /tmp/tmpkbboa7bt.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpkbboa7bt.php\
    \ on line 69\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $last\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $last) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $last = $lst[$i];\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmphh4xjk7h.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphh4xjk7h.php:49\nStack\
    \ trace:\n#0 /tmp/tmphh4xjk7h.php(55): test()\n#1 {main}\n  thrown in /tmp/tmphh4xjk7h.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $sorted = $lst;\n    sort($sorted);\n   \
    \ return $lst == $sorted;\n}\n\n/* Given an array of numbers, return whether or\
    \ not they are sorted\nin ascending order. If array has more than 1 duplicate\
    \ of the same\nnumber, return false. Assume no negative numbers and only integers.\n\
    Examples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\n\
    true\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3,\
    \ 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmploipk09p.php:64\n\
    Stack trace:\n#0 /tmp/tmploipk09p.php(70): test()\n#1 {main}\n  thrown in /tmp/tmploipk09p.php\
    \ on line 64\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $count = count($lst);\n   \
    \ $i = 0;\n    while ($i < $count - 1) {\n        if ($lst[$i] >= $lst[$i + 1])\
    \ {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpavfah2o8.php:50\n\
    Stack trace:\n#0 /tmp/tmpavfah2o8.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpavfah2o8.php\
    \ on line 50\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$sorted = true;\n\t$prev = $lst[0];\n\
    \tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i] < $prev) {\n\t\t\t\
    $sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\t}\n\treturn $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpydyzl8_j.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpydyzl8_j.php:49\nStack\
    \ trace:\n#0 /tmp/tmpydyzl8_j.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpydyzl8_j.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $len = count($lst);\n    for ($i = 0; $i\
    \ < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5,\
    \ 6, 7);\n$lst = array(1, 2, 2, 2, 3, 4);\n$lst = array(1, 2, 2, 3, 3, 4);\n$lst\
    \ = array(1, 3, 2, 4, 5, 6, 7);\n$lst = array(1, 2, 3, 4, 5, 6);\n$lst = array(1,\
    \ 2, 3, 4, 5);\n$lst = array(5);\n$lst = array(1, 3, 2, 4, 5);\nvar_dump(is_sorted($lst));\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(false)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0y6yo_py.php:57\n\
    Stack trace:\n#0 /tmp/tmp0y6yo_py.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp0y6yo_py.php\
    \ on line 57\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $prev >= $item) {\n       \
    \     return false;\n        }\n        $prev = $item;\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf9c3y3ic.php:49\n\
    Stack trace:\n#0 /tmp/tmpf9c3y3ic.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpf9c3y3ic.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    if (count($lst) == 1) {\n \
    \       return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n      \
    \  }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp9vd2798b.php on line 26\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp9vd2798b.php:50\nStack\
    \ trace:\n#0 /tmp/tmp9vd2798b.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9vd2798b.php\
    \ on line 50\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    $prev = $lst[0];\n\
    \    for ($i = 1; $i < $lst_len; $i++) {\n        if ($lst[$i] < $prev) {\n  \
    \          return false;\n        }\n        $prev = $lst[$i];\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpm8l_zet5.php on line 27\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpm8l_zet5.php:51\nStack\
    \ trace:\n#0 /tmp/tmpm8l_zet5.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpm8l_zet5.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $lst_size = count($lst);\n    for ($i = 0;\
    \ $i < $lst_size - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n\n$lst = array(1,\
    \ 2, 3, 4, 5, 6, 7);\necho is_sorted($lst);\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc051kq71.php:50\n\
    Stack trace:\n#0 /tmp/tmpc051kq71.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpc051kq71.php\
    \ on line 50\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst_sorted = $lst;\n    sort($lst_sorted);\n    return $lst == $lst_sorted;\n\
    }\n\n$lst = array(1, 2, 3, 4, 5);\nvar_dump(is_sorted($lst));\n\n$lst = array(1,\
    \ 3, 2, 4, 5);\nvar_dump(is_sorted($lst));\n\n$lst = array(1, 2, 3, 4, 5, 6);\n\
    var_dump(is_sorted($lst));\n\n$lst = array(1, 2, 3, 4, 5, 6, 7);\nvar_dump(is_sorted($lst));\n\
    \n$lst = array(1, 3, 2, 4, 5, 6, 7);\nvar_dump(is_sorted($lst));\n\n$lst = array(1,\
    \ 2, 2, 3, 3, 4);\nvar_dump(is_sorted($lst));\n\n$lst = array(1, 2, 2, 2, 3, 4);\n\
    var_dump(is_sorted($lst));\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(true)\nbool(false)\nbool(true)\nbool(true)\nbool(false)\nbool(false)\n\
    bool(false)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj6gprq8k.php:65\n\
    Stack trace:\n#0 /tmp/tmpj6gprq8k.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpj6gprq8k.php\
    \ on line 65\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len <= 1) {\n        return true;\n    }\n    $prev = $lst[0];\n    for ($i\
    \ = 1; $i < $len; $i++) {\n        if ($lst[$i] <= $prev) {\n            return\
    \ false;\n        }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5rygkoe4.php:53\n\
    Stack trace:\n#0 /tmp/tmp5rygkoe4.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp5rygkoe4.php\
    \ on line 53\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $last\
    \ = null;\n    foreach ($lst as $item) {\n        if ($last !== null && $last\
    \ >= $item) {\n            $sorted = false;\n            break;\n        }\n \
    \       $last = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5nr5pi81.php:51\n\
    Stack trace:\n#0 /tmp/tmp5nr5pi81.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp5nr5pi81.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    if (count($lst) == 1) {\n \
    \       return true;\n    }\n    for ($i = 0; $i < count($lst) - 1; $i++) {\n\
    \        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\n/* Given an array of numbers, return whether or\
    \ not they are sorted\nin ascending order. If array has more than 1 duplicate\
    \ of the same\nnumber, return false. Assume no negative numbers and only integers.\n\
    Examples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\n\
    true\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3,\
    \ 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm0pyy0zp.php:70\n\
    Stack trace:\n#0 /tmp/tmpm0pyy0zp.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpm0pyy0zp.php\
    \ on line 70\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $lst_len = count($lst);\n    for ($i = 0;\
    \ $i < $lst_len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\n\n$lst = array(1,\
    \ 2, 3, 4, 5, 6, 7);\necho is_sorted($lst);\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8hkhg9s.php:50\n\
    Stack trace:\n#0 /tmp/tmps8hkhg9s.php(56): test()\n#1 {main}\n  thrown in /tmp/tmps8hkhg9s.php\
    \ on line 50\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcuruc73k.php:45\n\
    Stack trace:\n#0 /tmp/tmpcuruc73k.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpcuruc73k.php\
    \ on line 45\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $item) {\n        if ($prev === null) {\n    \
    \        $prev = $item;\n        } else {\n            if ($prev > $item) {\n\
    \                $sorted = false;\n                break;\n            }\n   \
    \         $prev = $item;\n        }\n    }\n    return $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2kn6vr50.php:53\n\
    Stack trace:\n#0 /tmp/tmp2kn6vr50.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp2kn6vr50.php\
    \ on line 53\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_1v913x.php:51\n\
    Stack trace:\n#0 /tmp/tmpf_1v913x.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpf_1v913x.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$sorted = true;\n\t$prev = $lst[0];\n\
    \tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i] < $prev) {\n\t\t\t\
    $sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\t}\n\treturn $sorted;\n\
    }\n\n/* Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpfj47jh64.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpfj47jh64.php:69\nStack\
    \ trace:\n#0 /tmp/tmpfj47jh64.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpfj47jh64.php\
    \ on line 69\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $prev >= $item) {\n       \
    \     return false;\n        }\n        $prev = $item;\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf9c3y3ic.php:49\n\
    Stack trace:\n#0 /tmp/tmpf9c3y3ic.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpf9c3y3ic.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $prev = $lst[0];\n    $count\
    \ = 0;\n    foreach ($lst as $num) {\n        if ($num < $prev) {\n          \
    \  return false;\n        }\n        if ($num == $prev) {\n            $count++;\n\
    \        }\n        $prev = $num;\n    }\n    if ($count > 1) {\n        return\
    \ false;\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpop_mw0s1.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpop_mw0s1.php:56\nStack\
    \ trace:\n#0 /tmp/tmpop_mw0s1.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpop_mw0s1.php\
    \ on line 56\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $last = null;\n    foreach\
    \ ($lst as $item) {\n        if ($last !== null && $last >= $item) {\n       \
    \     return false;\n        }\n        $last = $item;\n    }\n    return true;\n\
    }\n\n$lst = array(1, 2, 3, 4, 5);\n$lst2 = array(1, 2, 2, 3, 3, 4);\n$lst3 = array(1,\
    \ 2, 2, 2, 3, 4);\n$lst4 = array(1, 3, 2, 4, 5);\n$lst5 = array(1, 3, 2, 4, 5,\
    \ 6, 7);\n$lst6 = array(1, 2, 3, 4, 5, 6, 7);\n$lst7 = array(1, 2, 3, 4, 5, 6);\n\
    $lst8 = array(5);\n\necho is_sorted($lst) . \"\\n\";\necho is_sorted($lst2) .\
    \ \"\\n\";\necho is_sorted($lst3) . \"\\n\";\necho is_sorted($lst4) . \"\\n\"\
    ;\necho is_sorted($lst5) . \"\\n\";\necho is_sorted($lst6) . \"\\n\";\necho is_sorted($lst7)\
    \ . \"\\n\";\necho is_sorted($lst8) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n\n\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpbej3u3qu.php:66\nStack trace:\n#0 /tmp/tmpbej3u3qu.php(70): test()\n\
    #1 {main}\n  thrown in /tmp/tmpbej3u3qu.php on line 66\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    foreach ($lst as $num) {\n        if ($num < $prev) {\n    \
    \        $sorted = false;\n            break;\n        }\n        $prev = $num;\n\
    \    }\n    return $sorted;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nWarning: Undefined array key 0 in /tmp/tmp8zyzgure.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp8zyzgure.php:51\nStack\
    \ trace:\n#0 /tmp/tmp8zyzgure.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp8zyzgure.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $item) {\n        if ($prev !== null && $prev\
    \ >= $item) {\n            $sorted = false;\n            break;\n        }\n \
    \       $prev = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_s8kfha.php:51\n\
    Stack trace:\n#0 /tmp/tmpw_s8kfha.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpw_s8kfha.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\n$lst1\
    \ = array(1, 3, 2, 4, 5);\n$lst2 = array(1, 2, 2, 3, 3, 4);\n$lst3 = array(1,\
    \ 2, 2, 2, 3, 4);\n$lst4 = array(5);\n$lst5 = array(1, 2, 3, 4, 5, 6);\n$lst6\
    \ = array(1, 2, 3, 4, 5, 6, 7);\n$lst7 = array(1, 3, 2, 4, 5, 6, 7);\n\necho is_sorted($lst)\
    \ . \"\\n\";\necho is_sorted($lst1) . \"\\n\";\necho is_sorted($lst2) . \"\\n\"\
    ;\necho is_sorted($lst3) . \"\\n\";\necho is_sorted($lst4) . \"\\n\";\necho is_sorted($lst5)\
    \ . \"\\n\";\necho is_sorted($lst6) . \"\\n\";\necho is_sorted($lst7) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp4czizw09.php:68\nStack trace:\n#0 /tmp/tmp4czizw09.php(72): test()\n\
    #1 {main}\n  thrown in /tmp/tmp4czizw09.php on line 68\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $prev = $lst[0];\n    $dup\
    \ = false;\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] ==\
    \ $prev) {\n            $dup = true;\n        }\n        if ($lst[$i] < $prev)\
    \ {\n            return false;\n        }\n        $prev = $lst[$i];\n    }\n\
    \    return !$dup;\n}\n\n/* Given an array of numbers, return whether or not they\
    \ are sorted\nin ascending order. If array has more than 1 duplicate of the same\n\
    number, return false. Assume no negative numbers and only integers.\nExamples\n\
    >>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpsoifnlh4.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpsoifnlh4.php:73\nStack\
    \ trace:\n#0 /tmp/tmpsoifnlh4.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpsoifnlh4.php\
    \ on line 73\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\n$lst = array(1, 2,\
    \ 3, 4, 5);\necho is_sorted($lst);\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nWarning: Undefined array key 0 in /tmp/tmpnj8uak29.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpnj8uak29.php:51\nStack\
    \ trace:\n#0 /tmp/tmpnj8uak29.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpnj8uak29.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n$lst\
    \ = array(1, 2, 3, 4, 5);\necho is_sorted($lst);\necho \"\\n\";\n$lst = array(1,\
    \ 3, 2, 4, 5);\necho is_sorted($lst);\necho \"\\n\";\n$lst = array(1, 2, 2, 3,\
    \ 3, 4);\necho is_sorted($lst);\necho \"\\n\";\n$lst = array(1, 2, 2, 2, 3, 4);\n\
    echo is_sorted($lst);\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3rqb3wh2.php:57\n\
    Stack trace:\n#0 /tmp/tmp3rqb3wh2.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp3rqb3wh2.php\
    \ on line 57\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n/*\
    \ Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcguj5mpg.php:65\n\
    Stack trace:\n#0 /tmp/tmpcguj5mpg.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpcguj5mpg.php\
    \ on line 65\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\t\
    $lst = array_values($lst);\n\t$len = count($lst);\n\tfor ($i = 0; $i < $len -\
    \ 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn true;\n}\n\necho is_sorted(array(1, 2, 2, 3, 3, 4)) ? \"true\" :\
    \ \"false\";\necho \"\\n\";\necho is_sorted(array(1, 2, 2, 2, 3, 4)) ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_sorted(array(1, 2, 3, 4, 5)) ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_sorted(array(1, 3, 2, 4, 5)) ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_sorted(array(1, 2, 3, 4, 5, 6)) ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_sorted(array(1, 2, 3, 4, 5, 6, 7)) ? \"\
    true\" : \"false\";\necho \"\\n\";\necho is_sorted(array(1, 3, 2, 4, 5, 6, 7))\
    \ ? \"true\" : \"false\";\necho \"\\n\";\necho is_sorted(array(5)) ? \"true\"\
    \ : \"false\";\necho \"\\n\";\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "true\ntrue\ntrue\nfalse\ntrue\ntrue\nfalse\ntrue\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpi014_jg6.php:64\nStack trace:\n#0 /tmp/tmpi014_jg6.php(70):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpi014_jg6.php on line 64\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $num) {\n        if ($prev !== null && $num <=\
    \ $prev) {\n            $sorted = false;\n            break;\n        }\n    \
    \    $prev = $num;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpob6jknz_.php:51\n\
    Stack trace:\n#0 /tmp/tmpob6jknz_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpob6jknz_.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp2tgz4ayi.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2tgz4ayi.php:49\nStack\
    \ trace:\n#0 /tmp/tmp2tgz4ayi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2tgz4ayi.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\t\
    $sorted = $lst;\n\tsort($sorted);\n\tif ($lst == $sorted) {\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjyd0kf3w.php:48\n\
    Stack trace:\n#0 /tmp/tmpjyd0kf3w.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpjyd0kf3w.php\
    \ on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    for\
    \ ($i = 0; $i < $len - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n \
    \           return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6gc4lyq6.php:48\n\
    Stack trace:\n#0 /tmp/tmp6gc4lyq6.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp6gc4lyq6.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $item) {\n        if ($prev !== null && $prev\
    \ >= $item) {\n            $sorted = false;\n            break;\n        }\n \
    \       $prev = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_s8kfha.php:51\n\
    Stack trace:\n#0 /tmp/tmpw_s8kfha.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpw_s8kfha.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n  $prev = null;\n  foreach ($lst\
    \ as $item) {\n    if ($prev !== null && $prev >= $item) {\n      return false;\n\
    \    }\n    $prev = $item;\n  }\n  return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt47o_fty.php:49\n\
    Stack trace:\n#0 /tmp/tmpt47o_fty.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpt47o_fty.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n/*\
    \ Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcguj5mpg.php:65\n\
    Stack trace:\n#0 /tmp/tmpcguj5mpg.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpcguj5mpg.php\
    \ on line 65\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_1v913x.php:51\n\
    Stack trace:\n#0 /tmp/tmpf_1v913x.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpf_1v913x.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $last = null;\n    foreach\
    \ ($lst as $item) {\n        if ($last !== null && $last > $item) {\n        \
    \    return false;\n        }\n        $last = $item;\n    }\n    return true;\n\
    }\n\n/* Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxflxkcce.php:67\n\
    Stack trace:\n#0 /tmp/tmpxflxkcce.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpxflxkcce.php\
    \ on line 67\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_1v913x.php:51\n\
    Stack trace:\n#0 /tmp/tmpf_1v913x.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpf_1v913x.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqbt_3ti3.php:49\n\
    Stack trace:\n#0 /tmp/tmpqbt_3ti3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpqbt_3ti3.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp2tgz4ayi.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2tgz4ayi.php:49\nStack\
    \ trace:\n#0 /tmp/tmp2tgz4ayi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2tgz4ayi.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $result = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $result = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmptijyzr8z.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmptijyzr8z.php:49\nStack\
    \ trace:\n#0 /tmp/tmptijyzr8z.php(55): test()\n#1 {main}\n  thrown in /tmp/tmptijyzr8z.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    if (count($lst) == 1) {\n \
    \       return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n      \
    \  }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\n/* Given a list\
    \ of numbers, return the list with the same numbers\nin reverse order.\nExamples\n\
    >>> reverse_list(array(1, 2, 3, 4, 5))\narray(5, 4, 3, 2, 1)\n>>> reverse_list(array(1,\
    \ 2, 3, 4))\narray(4, 3, 2, 1)\n>>> reverse_list(array(1, 2, 3))\narray(3, 2,\
    \ 1)\n>>> reverse_list(array(1, 2))\narray(2, 1)\n>>> reverse_list(array(1))\n\
    array(1)\n>>> reverse_list(array())\narray()*/\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpqg_4b9zk.php on line 26\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpqg_4b9zk.php:65\nStack\
    \ trace:\n#0 /tmp/tmpqg_4b9zk.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpqg_4b9zk.php\
    \ on line 65\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len < 2) {\n        return true;\n    }\n    $prev = $lst[0];\n \
    \   for ($i = 1; $i < $lst_len; $i++) {\n        if ($lst[$i] < $prev) {\n   \
    \         return false;\n        }\n        $prev = $lst[$i];\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplc5_tvkh.php:51\n\
    Stack trace:\n#0 /tmp/tmplc5_tvkh.php(57): test()\n#1 {main}\n  thrown in /tmp/tmplc5_tvkh.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $lst_len = count($lst);\n    for ($i = 0;\
    \ $i < $lst_len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n       \
    \     return false;\n        }\n    }\n    return true;\n}\n\n$lst = array(1,\
    \ 2, 3, 4, 5, 6, 7);\nvar_dump(is_sorted($lst));\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(true)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn7ms46se.php:50\n\
    Stack trace:\n#0 /tmp/tmpn7ms46se.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn7ms46se.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $item) {\n        if ($prev !== null && $prev\
    \ >= $item) {\n            $sorted = false;\n            break;\n        }\n \
    \       $prev = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_s8kfha.php:51\n\
    Stack trace:\n#0 /tmp/tmpw_s8kfha.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpw_s8kfha.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n  $lst_len = count($lst);\n  $i\
    \ = 0;\n  $j = 1;\n  while ($j < $lst_len) {\n    if ($lst[$i] > $lst[$j]) {\n\
    \      return false;\n    }\n    $i++;\n    $j++;\n  }\n  return true;\n}\n\n\
    /* Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpea97llbv.php:70\n\
    Stack trace:\n#0 /tmp/tmpea97llbv.php(76): test()\n#1 {main}\n  thrown in /tmp/tmpea97llbv.php\
    \ on line 70\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp2tgz4ayi.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2tgz4ayi.php:49\nStack\
    \ trace:\n#0 /tmp/tmp2tgz4ayi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2tgz4ayi.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumk1la8m.php:53\n\
    Stack trace:\n#0 /tmp/tmpumk1la8m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpumk1la8m.php\
    \ on line 53\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst_sorted = $lst;\n    sort($lst_sorted);\n    return $lst == $lst_sorted;\n\
    }\n\n/* Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7qlc1oxf.php:65\n\
    Stack trace:\n#0 /tmp/tmp7qlc1oxf.php(69): test()\n#1 {main}\n  thrown in /tmp/tmp7qlc1oxf.php\
    \ on line 65\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n  if (count($lst) == 1) {\n   \
    \ return true;\n  }\n  for ($i = 0; $i < count($lst) - 1; $i++) {\n    if ($lst[$i]\
    \ >= $lst[$i + 1]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\
    \ Given an array of numbers, return the sum of the numbers.\nExamples\n>>> sum_array(array(1,\
    \ 2, 3, 4, 5))\n15\n>>> sum_array(array(1, 2, 3, 4, 5, 6))\n21\n>>> sum_array(array(1,\
    \ 2, 3, 4, 5, 6, 7))\n28\n>>> sum_array(array(1, 2, 3, 4, 5, 6, 7, 8))\n36\n>>>\
    \ sum_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n45\n>>> sum_array(array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10))\n55*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpop2c0dx_.php:64\n\
    Stack trace:\n#0 /tmp/tmpop2c0dx_.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpop2c0dx_.php\
    \ on line 64\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    sort($lst);\n    return $lst == $lst;\n}\n\n$lst = array(1, 2, 3, 4, 5);\n\
    echo is_sorted($lst);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo4px6nqp.php:37\n\
    Stack trace:\n#0 /tmp/tmpo4px6nqp.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpo4px6nqp.php\
    \ on line 37\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $size = count($lst);\n    if\
    \ ($size == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $size - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n/* Given an array of numbers, return\
    \ whether or not they are sorted\nin ascending order. If array has more than 1\
    \ duplicate of the same\nnumber, return false. Assume no negative numbers and\
    \ only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpco5zol6n.php:71\n\
    Stack trace:\n#0 /tmp/tmpco5zol6n.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpco5zol6n.php\
    \ on line 71\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $count = count($lst);\n   \
    \ if ($count == 1) {\n        return true;\n    }\n    $i = 0;\n    while ($i\
    \ < $count - 1) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return\
    \ false;\n        }\n        $i++;\n    }\n    return true;\n}\n\n$lst = array(1,\
    \ 2, 3, 4, 5);\necho is_sorted($lst);\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsaz_fwc6.php:53\n\
    Stack trace:\n#0 /tmp/tmpsaz_fwc6.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpsaz_fwc6.php\
    \ on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_1v913x.php:51\n\
    Stack trace:\n#0 /tmp/tmpf_1v913x.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpf_1v913x.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp2tgz4ayi.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2tgz4ayi.php:49\nStack\
    \ trace:\n#0 /tmp/tmp2tgz4ayi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2tgz4ayi.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n/*\
    \ Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcguj5mpg.php:65\n\
    Stack trace:\n#0 /tmp/tmpcguj5mpg.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpcguj5mpg.php\
    \ on line 65\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp2tgz4ayi.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2tgz4ayi.php:49\nStack\
    \ trace:\n#0 /tmp/tmp2tgz4ayi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2tgz4ayi.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len < 2) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++)\
    \ {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp76hapwfh.php:51\n\
    Stack trace:\n#0 /tmp/tmp76hapwfh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp76hapwfh.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len\
    \ - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80o2_qfe.php:49\n\
    Stack trace:\n#0 /tmp/tmp80o2_qfe.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp80o2_qfe.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $prev = $lst[0];\n    foreach\
    \ ($lst as $num) {\n        if ($num < $prev) {\n            return false;\n \
    \       }\n        $prev = $num;\n    }\n    return true;\n}\n\n/* Given an array\
    \ of numbers, return whether or not they are sorted\nin ascending order. If array\
    \ has more than 1 duplicate of the same\nnumber, return false. Assume no negative\
    \ numbers and only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp_7kykgsh.php on line 23\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp_7kykgsh.php:67\nStack\
    \ trace:\n#0 /tmp/tmp_7kykgsh.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp_7kykgsh.php\
    \ on line 67\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqbt_3ti3.php:49\n\
    Stack trace:\n#0 /tmp/tmpqbt_3ti3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpqbt_3ti3.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\t\
    $lst = array_values($lst);\n\t$len = count($lst);\n\tfor ($i = 0; $i < $len -\
    \ 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmoslndt0.php:48\n\
    Stack trace:\n#0 /tmp/tmpmoslndt0.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpmoslndt0.php\
    \ on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcuruc73k.php:45\n\
    Stack trace:\n#0 /tmp/tmpcuruc73k.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpcuruc73k.php\
    \ on line 45\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $len = count($lst);\n    for ($i = 0; $i\
    \ < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5,\
    \ 6, 7);\necho is_sorted($lst);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx1x_vrfv.php:50\n\
    Stack trace:\n#0 /tmp/tmpx1x_vrfv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpx1x_vrfv.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$lst_len = count($lst);\n\t$i\
    \ = 0;\n\t$j = 1;\n\twhile ($j < $lst_len) {\n\t\tif ($lst[$i] > $lst[$j]) {\n\
    \t\t\treturn false;\n\t\t}\n\t\t$i++;\n\t\t$j++;\n\t}\n\treturn true;\n}\n\n/*\
    \ Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cjfht3h.php:70\n\
    Stack trace:\n#0 /tmp/tmp4cjfht3h.php(76): test()\n#1 {main}\n  thrown in /tmp/tmp4cjfht3h.php\
    \ on line 70\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $i = 0;\n    $j = 1;\n    while\
    \ ($j < count($lst)) {\n        if ($lst[$i] >= $lst[$j]) {\n            return\
    \ false;\n        }\n        $i++;\n        $j++;\n    }\n    return true;\n}\n\
    \nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoc8t06w7.php:51\n\
    Stack trace:\n#0 /tmp/tmpoc8t06w7.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpoc8t06w7.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $len = count($lst);\n    for ($i = 0; $i\
    \ < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5,\
    \ 6, 7);\n$lst = array(1, 2, 2, 2, 3, 4);\n$lst = array(1, 2, 2, 3, 3, 4);\n$lst\
    \ = array(1, 3, 2, 4, 5, 6, 7);\n$lst = array(1, 2, 3, 4, 5, 6);\n$lst = array(1,\
    \ 2, 3, 4, 5);\n$lst = array(5);\n$lst = array(1, 3, 2, 4, 5);\n\necho is_sorted($lst);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplawr2s51.php:58\n\
    Stack trace:\n#0 /tmp/tmplawr2s51.php(64): test()\n#1 {main}\n  thrown in /tmp/tmplawr2s51.php\
    \ on line 58\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_1v913x.php:51\n\
    Stack trace:\n#0 /tmp/tmpf_1v913x.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpf_1v913x.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    } else {\n        $i = 0;\n\
    \        while ($i < $lst_len - 1) {\n            if ($lst[$i] > $lst[$i + 1])\
    \ {\n                return false;\n            }\n            $i++;\n       \
    \ }\n        return true;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz4mpqyfl.php:52\n\
    Stack trace:\n#0 /tmp/tmpz4mpqyfl.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpz4mpqyfl.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $len = count($lst);\n    for ($i = 0; $i\
    \ < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nyobsh6.php:48\n\
    Stack trace:\n#0 /tmp/tmp8nyobsh6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp8nyobsh6.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $prev = null;\n    foreach\
    \ ($lst as $num) {\n        if ($prev !== null && $num <= $prev) {\n         \
    \   return false;\n        }\n        $prev = $num;\n    }\n    return true;\n\
    }\n\n/* Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjnwy0_b2.php:69\n\
    Stack trace:\n#0 /tmp/tmpjnwy0_b2.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpjnwy0_b2.php\
    \ on line 69\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp2tgz4ayi.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2tgz4ayi.php:49\nStack\
    \ trace:\n#0 /tmp/tmp2tgz4ayi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2tgz4ayi.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumk1la8m.php:53\n\
    Stack trace:\n#0 /tmp/tmpumk1la8m.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpumk1la8m.php\
    \ on line 53\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    foreach ($lst as $num) {\n        if ($num < $prev) {\n    \
    \        $sorted = false;\n            break;\n        }\n        $prev = $num;\n\
    \    }\n    return $sorted;\n}\n\n$lst = array(5);\necho is_sorted($lst);\necho\
    \ \"\\n\";\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);\necho \"\\n\"\
    ;\n$lst = array(1, 3, 2, 4, 5);\necho is_sorted($lst);\necho \"\\n\";\n$lst =\
    \ array(1, 2, 3, 4, 5, 6);\necho is_sorted($lst);\necho \"\\n\";\n$lst = array(1,\
    \ 2, 3, 4, 5, 6, 7);\necho is_sorted($lst);\necho \"\\n\";\n$lst = array(1, 3,\
    \ 2, 4, 5, 6, 7);\necho is_sorted($lst);\necho \"\\n\";\n$lst = array(1, 2, 2,\
    \ 3, 3, 4);\necho is_sorted($lst);\necho \"\\n\";\n$lst = array(1, 2, 2, 2, 3,\
    \ 4);\necho is_sorted($lst);\necho \"\\n\";\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n\n1\n1\n\n1\n1\n\nWarning: Undefined array key 0 in /tmp/tmprcl38xy8.php\
    \ on line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprcl38xy8.php:73\n\
    Stack trace:\n#0 /tmp/tmprcl38xy8.php(79): test()\n#1 {main}\n  thrown in /tmp/tmprcl38xy8.php\
    \ on line 73\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\nvar_dump(is_sorted($lst));\n\
    \n$lst = array(1, 3, 2, 4, 5);\nvar_dump(is_sorted($lst));\n\n$lst = array(1,\
    \ 2, 3, 4, 5, 6);\nvar_dump(is_sorted($lst));\n\n$lst = array(1, 2, 3, 4, 5, 6,\
    \ 7);\nvar_dump(is_sorted($lst));\n\n$lst = array(1, 3, 2, 4, 5, 6, 7);\nvar_dump(is_sorted($lst));\n\
    \n$lst = array(1, 2, 2, 3, 3, 4);\nvar_dump(is_sorted($lst));\n\n$lst = array(1,\
    \ 2, 2, 2, 3, 4);\nvar_dump(is_sorted($lst));\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(true)\nbool(false)\nbool(true)\nbool(true)\nbool(false)\nbool(false)\n\
    bool(false)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy9h39hx7.php:71\n\
    Stack trace:\n#0 /tmp/tmpy9h39hx7.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpy9h39hx7.php\
    \ on line 71\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $prev >= $item) {\n       \
    \     return false;\n        }\n        $prev = $item;\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf9c3y3ic.php:49\n\
    Stack trace:\n#0 /tmp/tmpf9c3y3ic.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpf9c3y3ic.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $prev >= $item) {\n       \
    \     return false;\n        }\n        $prev = $item;\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf9c3y3ic.php:49\n\
    Stack trace:\n#0 /tmp/tmpf9c3y3ic.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpf9c3y3ic.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n  $sorted = true;\n  $prev = $lst[0];\n\
    \  for ($i = 1; $i < count($lst); $i++) {\n    if ($lst[$i] < $prev) {\n     \
    \ $sorted = false;\n      break;\n    }\n    $prev = $lst[$i];\n  }\n  return\
    \ $sorted;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);\necho \"\\\
    n\";\n$lst = array(1, 3, 2, 4, 5);\necho is_sorted($lst);\necho \"\\n\";\n$lst\
    \ = array(1, 2, 2, 3, 3, 4);\necho is_sorted($lst);\necho \"\\n\";\n$lst = array(1,\
    \ 2, 2, 2, 3, 4);\necho is_sorted($lst);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n\nWarning: Undefined array key 0 in /tmp/tmpjq4r638h.php on\
    \ line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjq4r638h.php:61\n\
    Stack trace:\n#0 /tmp/tmpjq4r638h.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpjq4r638h.php\
    \ on line 61\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$sorted = true;\n\t$i = 0;\n\t\
    $j = 1;\n\t$len = count($lst);\n\twhile ($i < $len-1 && $j < $len) {\n\t\tif ($lst[$i]\
    \ == $lst[$j]) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\tif ($lst[$i]\
    \ > $lst[$j]) {\n\t\t\t$sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$i++;\n\t\t\
    $j++;\n\t}\n\treturn $sorted;\n}\n\n$lst = array(1, 2, 3, 4, 5);\n$lst2 = array(1,\
    \ 2, 2, 3, 4);\n$lst3 = array(1, 2, 2, 2, 3, 4);\n$lst4 = array(1, 3, 2, 4, 5);\n\
    $lst5 = array(1, 2, 3, 4, 5, 6);\n$lst6 = array(1, 2, 3, 4, 5, 6, 7);\n$lst7 =\
    \ array(1, 3, 2, 4, 5, 6, 7);\n$lst8 = array(5);\n\necho is_sorted($lst) . \"\\\
    n\";\necho is_sorted($lst2) . \"\\n\";\necho is_sorted($lst3) . \"\\n\";\necho\
    \ is_sorted($lst4) . \"\\n\";\necho is_sorted($lst5) . \"\\n\";\necho is_sorted($lst6)\
    \ . \"\\n\";\necho is_sorted($lst7) . \"\\n\";\necho is_sorted($lst8) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n\n1\n1\n\n1\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpsfinbrk4.php:75\nStack trace:\n#0 /tmp/tmpsfinbrk4.php(79): test()\n\
    #1 {main}\n  thrown in /tmp/tmpsfinbrk4.php on line 75\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp2tgz4ayi.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2tgz4ayi.php:49\nStack\
    \ trace:\n#0 /tmp/tmp2tgz4ayi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2tgz4ayi.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    $prev = $lst[0];\n    for ($i\
    \ = 1; $i < $len; $i++) {\n        if ($lst[$i] < $prev) {\n            return\
    \ false;\n        }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpebmqjn4l.php on line 27\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpebmqjn4l.php:51\nStack\
    \ trace:\n#0 /tmp/tmpebmqjn4l.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpebmqjn4l.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$sorted = true;\n\t$prev = $lst[0];\n\
    \tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i] < $prev) {\n\t\t\t\
    $sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$prev = $lst[$i];\n\t}\n\treturn $sorted;\n\
    }\n\n$lst = array(1, 2, 3, 4, 5);\n$lst2 = array(1, 3, 2, 4, 5);\n$lst3 = array(1,\
    \ 2, 2, 3, 3, 4);\n$lst4 = array(1, 2, 2, 2, 3, 4);\n\necho is_sorted($lst) .\
    \ \"\\n\";\necho is_sorted($lst2) . \"\\n\";\necho is_sorted($lst3) . \"\\n\"\
    ;\necho is_sorted($lst4) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n\nWarning: Undefined array key 0 in /tmp/tmpzwbeaq53.php on\
    \ line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzwbeaq53.php:58\n\
    Stack trace:\n#0 /tmp/tmpzwbeaq53.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpzwbeaq53.php\
    \ on line 58\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $len = count($lst);\n    for ($i = 0; $i\
    \ < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5,\
    \ 6, 7);\nvar_dump(is_sorted($lst));\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(true)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_jmc6g0x.php:50\n\
    Stack trace:\n#0 /tmp/tmp_jmc6g0x.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_jmc6g0x.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $num) {\n        if ($prev !== null && $num <=\
    \ $prev) {\n            $sorted = false;\n            break;\n        }\n    \
    \    $prev = $num;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpob6jknz_.php:51\n\
    Stack trace:\n#0 /tmp/tmpob6jknz_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpob6jknz_.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_count = count($lst);\n\
    \    if ($lst_count == 1) {\n        return true;\n    }\n    $prev = $lst[0];\n\
    \    for ($i = 1; $i < $lst_count; $i++) {\n        if ($lst[$i] < $prev) {\n\
    \            return false;\n        }\n        $prev = $lst[$i];\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpgtixgtuu.php on line 27\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpgtixgtuu.php:51\nStack\
    \ trace:\n#0 /tmp/tmpgtixgtuu.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpgtixgtuu.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n  $lst = array_unique($lst);\n\
    \  $lst_sorted = $lst;\n  sort($lst_sorted);\n  return $lst == $lst_sorted;\n\
    }\n\n/* Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprz2t2c7b.php:65\n\
    Stack trace:\n#0 /tmp/tmprz2t2c7b.php(69): test()\n#1 {main}\n  thrown in /tmp/tmprz2t2c7b.php\
    \ on line 65\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len < 2) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1; $i++)\
    \ {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp76hapwfh.php:51\n\
    Stack trace:\n#0 /tmp/tmp76hapwfh.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp76hapwfh.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    $prev = $lst[0];\n    for ($i\
    \ = 1; $i < $len; $i++) {\n        if ($lst[$i] < $prev) {\n            return\
    \ false;\n        }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpebmqjn4l.php on line 27\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpebmqjn4l.php:51\nStack\
    \ trace:\n#0 /tmp/tmpebmqjn4l.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpebmqjn4l.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $item) {\n        if ($prev !== null && $prev\
    \ >= $item) {\n            $sorted = false;\n            break;\n        }\n \
    \       $prev = $item;\n    }\n    return $sorted;\n}\n\n/* Given an array of\
    \ numbers, return whether or not they are sorted\nin ascending order. If array\
    \ has more than 1 duplicate of the same\nnumber, return false. Assume no negative\
    \ numbers and only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprrp9roki.php:71\n\
    Stack trace:\n#0 /tmp/tmprrp9roki.php(75): test()\n#1 {main}\n  thrown in /tmp/tmprrp9roki.php\
    \ on line 71\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp2tgz4ayi.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2tgz4ayi.php:49\nStack\
    \ trace:\n#0 /tmp/tmp2tgz4ayi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2tgz4ayi.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $i = 0;\n    $len = count($lst);\n\
    \    while ($i < $len - 1) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n      \
    \      return false;\n        }\n        $i++;\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwi4gj3lf.php:50\n\
    Stack trace:\n#0 /tmp/tmpwi4gj3lf.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpwi4gj3lf.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $item) {\n        if ($prev !== null && $prev\
    \ >= $item) {\n            $sorted = false;\n            break;\n        }\n \
    \       $prev = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_s8kfha.php:51\n\
    Stack trace:\n#0 /tmp/tmpw_s8kfha.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpw_s8kfha.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $last\
    \ = 0;\n    $duplicate = false;\n    foreach ($lst as $num) {\n        if ($num\
    \ == $last) {\n            $duplicate = true;\n        }\n        if ($num < $last)\
    \ {\n            $sorted = false;\n        }\n        $last = $num;\n    }\n \
    \   return $sorted && !$duplicate;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1vamblqp.php:54\n\
    Stack trace:\n#0 /tmp/tmp1vamblqp.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp1vamblqp.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n/*\
    \ Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcguj5mpg.php:65\n\
    Stack trace:\n#0 /tmp/tmpcguj5mpg.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpcguj5mpg.php\
    \ on line 65\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $prev >= $item) {\n       \
    \     return false;\n        }\n        $prev = $item;\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf9c3y3ic.php:49\n\
    Stack trace:\n#0 /tmp/tmpf9c3y3ic.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpf9c3y3ic.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    $prev = $lst[0];\n\
    \    for ($i = 1; $i < $lst_len; $i++) {\n        if ($lst[$i] < $prev) {\n  \
    \          return false;\n        }\n        $prev = $lst[$i];\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpm8l_zet5.php on line 27\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpm8l_zet5.php:51\nStack\
    \ trace:\n#0 /tmp/tmpm8l_zet5.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpm8l_zet5.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\t\
    $lst = array_values($lst);\n\t$len = count($lst);\n\tfor ($i = 0; $i < $len -\
    \ 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmoslndt0.php:48\n\
    Stack trace:\n#0 /tmp/tmpmoslndt0.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpmoslndt0.php\
    \ on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    if (count($lst) == 1) {\n \
    \       return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n      \
    \  }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\n/* Given an array\
    \ of numbers, return whether or not they are sorted\nin ascending order. If array\
    \ has more than 1 duplicate of the same\nnumber, return false. Assume no negative\
    \ numbers and only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpwzpdp6o_.php on line 26\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpwzpdp6o_.php:70\nStack\
    \ trace:\n#0 /tmp/tmpwzpdp6o_.php(76): test()\n#1 {main}\n  thrown in /tmp/tmpwzpdp6o_.php\
    \ on line 70\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    $prev = $lst[0];\n\
    \    for ($i = 1; $i < $lst_len; $i++) {\n        if ($lst[$i] < $prev) {\n  \
    \          return false;\n        }\n        $prev = $lst[$i];\n    }\n    return\
    \ true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\n$lst2 = array(1, 2, 2, 3, 3, 4);\n\
    $lst3 = array(1, 2, 2, 2, 3, 4);\n$lst4 = array(1, 3, 2, 4, 5);\n$lst5 = array(1,\
    \ 2, 3, 4, 5, 6);\n$lst6 = array(1, 2, 3, 4, 5, 6, 7);\n$lst7 = array(1, 3, 2,\
    \ 4, 5, 6, 7);\n$lst8 = array(5);\n\necho is_sorted($lst) . \"\\n\";\necho is_sorted($lst2)\
    \ . \"\\n\";\necho is_sorted($lst3) . \"\\n\";\necho is_sorted($lst4) . \"\\n\"\
    ;\necho is_sorted($lst5) . \"\\n\";\necho is_sorted($lst6) . \"\\n\";\necho is_sorted($lst7)\
    \ . \"\\n\";\necho is_sorted($lst8) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n\n1\n1\n\n1\n\nWarning: Undefined array key 0 in /tmp/tmp32l_bhu5.php\
    \ on line 27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp32l_bhu5.php:68\n\
    Stack trace:\n#0 /tmp/tmp32l_bhu5.php(74): test()\n#1 {main}\n  thrown in /tmp/tmp32l_bhu5.php\
    \ on line 68\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $temp = $lst;\n    sort($temp);\n\
    \    if ($temp == $lst) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\n/* Given an array of numbers, return whether or not they\
    \ are sorted\nin ascending order. If array has more than 1 duplicate of the same\n\
    number, return false. Assume no negative numbers and only integers.\nExamples\n\
    >>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1,\
    \ 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>>\
    \ is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiae8druz.php:66\n\
    Stack trace:\n#0 /tmp/tmpiae8druz.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpiae8druz.php\
    \ on line 66\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    if (count($lst) == 1) {\n \
    \       return true;\n    }\n    for ($i = 0; $i < count($lst) - 1; $i++) {\n\
    \        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\n/*\n * Given an array of numbers, return the sum\
    \ of all the numbers.\n * Examples\n * >>> sum_array(array(1, 2, 3, 4, 5))\n *\
    \ 15\n * >>> sum_array(array(1, 2, 3, 4, 5, 6))\n * 21\n * >>> sum_array(array(1,\
    \ 2, 3, 4, 5, 6, 7))\n * 28\n * >>> sum_array(array(1, 2, 3, 4, 5, 6, 7, 8))\n\
    \ * 36\n * >>> sum_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n * 45\n * >>> sum_array(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n * 55\n * */\nfunction candidate(...$args) {\n\
    \    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqtbxo3pd.php:66\n\
    Stack trace:\n#0 /tmp/tmpqtbxo3pd.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpqtbxo3pd.php\
    \ on line 66\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $len = count($lst);\n    for ($i = 0; $i\
    \ < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5,\
    \ 6, 7);\necho is_sorted($lst);\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx1x_vrfv.php:50\n\
    Stack trace:\n#0 /tmp/tmpx1x_vrfv.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpx1x_vrfv.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_1v913x.php:51\n\
    Stack trace:\n#0 /tmp/tmpf_1v913x.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpf_1v913x.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $count = count($lst);\n   \
    \ if ($count == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $count\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpco2icobn.php:53\n\
    Stack trace:\n#0 /tmp/tmpco2icobn.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpco2icobn.php\
    \ on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcuruc73k.php:45\n\
    Stack trace:\n#0 /tmp/tmpcuruc73k.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpcuruc73k.php\
    \ on line 45\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    $prev = $lst[0];\n\
    \    for ($i = 1; $i < $lst_len; $i++) {\n        if ($lst[$i] < $prev) {\n  \
    \          return false;\n        }\n        $prev = $lst[$i];\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpm8l_zet5.php on line 27\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpm8l_zet5.php:51\nStack\
    \ trace:\n#0 /tmp/tmpm8l_zet5.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpm8l_zet5.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $count = count($lst);\n   \
    \ if ($count == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $count\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ecrwq5a.php:51\n\
    Stack trace:\n#0 /tmp/tmp9ecrwq5a.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp9ecrwq5a.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $n = count($lst);\n    for\
    \ ($i = 0; $i < $n - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\n\n/* Given an\
    \ array of numbers, return whether or not they are sorted\nin ascending order.\
    \ If array has more than 1 duplicate of the same\nnumber, return false. Assume\
    \ no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8m5k7_23.php:68\n\
    Stack trace:\n#0 /tmp/tmp8m5k7_23.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp8m5k7_23.php\
    \ on line 68\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $prev >= $item) {\n       \
    \     return false;\n        }\n        $prev = $item;\n    }\n    return true;\n\
    }\n\n/* Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4cku44bi.php:69\n\
    Stack trace:\n#0 /tmp/tmp4cku44bi.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp4cku44bi.php\
    \ on line 69\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len\
    \ - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80o2_qfe.php:49\n\
    Stack trace:\n#0 /tmp/tmp80o2_qfe.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp80o2_qfe.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp2tgz4ayi.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2tgz4ayi.php:49\nStack\
    \ trace:\n#0 /tmp/tmp2tgz4ayi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2tgz4ayi.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\t\
    $sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\n\n/* Given an\
    \ array of numbers, return whether or not they are sorted\nin ascending order.\
    \ If array has more than 1 duplicate of the same\nnumber, return false. Assume\
    \ no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqktnk8yz.php:65\n\
    Stack trace:\n#0 /tmp/tmpqktnk8yz.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpqktnk8yz.php\
    \ on line 65\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $len = count($lst);\n    for ($i = 0; $i\
    \ < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nyobsh6.php:48\n\
    Stack trace:\n#0 /tmp/tmp8nyobsh6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp8nyobsh6.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\t\
    $sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsu8rc5_k.php:45\n\
    Stack trace:\n#0 /tmp/tmpsu8rc5_k.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpsu8rc5_k.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    if (count($lst) == 1) {\n \
    \       return true;\n    }\n    $sorted = true;\n    $last = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $last) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $last = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpqqle94hu.php on line 27\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpqqle94hu.php:52\nStack\
    \ trace:\n#0 /tmp/tmpqqle94hu.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpqqle94hu.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n/*\
    \ Given a list of numbers, return the number of unique numbers in the list.\n\
    Examples\n>>> num_unique(array(1, 2, 3, 4, 5))\n5\n>>> num_unique(array(1, 2,\
    \ 2, 3, 3, 4))\n4\n>>> num_unique(array(1, 2, 2, 2, 3, 3, 4))\n4\n>>> num_unique(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n10\n>>> num_unique(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 10))\n10\n>>> num_unique(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10,\
    \ 10))\n10\n>>> num_unique(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10))\n\
    10\n>>> num_unique(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10))\n10\n\
    >>> num_unique(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10))\n10\n\
    >>> num_unique(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10))\n\
    10\n>>> num_unique(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10, 10, 10,\
    \ 10))\n10\n>>> num_unique(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 10,\
    \ 10, 10, 10, 10))\n10\n>>> num_unique(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10,\
    \ 10, 10, 10, 10, 10,\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 29 in /tmp/tmphifttxmo.php on
    line 29

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $item) {\n        if ($prev !== null && $prev\
    \ > $item) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0p8wr27w.php:49\n\
    Stack trace:\n#0 /tmp/tmp0p8wr27w.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp0p8wr27w.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $num) {\n        if ($prev !== null && $num <\
    \ $prev) {\n            $sorted = false;\n            break;\n        }\n    \
    \    $prev = $num;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbnq41xhl.php:49\n\
    Stack trace:\n#0 /tmp/tmpbnq41xhl.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpbnq41xhl.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $prev = null;\n    foreach\
    \ ($lst as $val) {\n        if ($prev !== null && $prev >= $val) {\n         \
    \   return false;\n        }\n        $prev = $val;\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpilu2bfuk.php:49\n\
    Stack trace:\n#0 /tmp/tmpilu2bfuk.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpilu2bfuk.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $count = count($lst);\n   \
    \ if ($count == 1) {\n        return true;\n    }\n    $i = 0;\n    while ($i\
    \ < $count - 1) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return\
    \ false;\n        }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwqlz4hbo.php:53\n\
    Stack trace:\n#0 /tmp/tmpwqlz4hbo.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpwqlz4hbo.php\
    \ on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$sorted = true;\n\t$prev = null;\n\
    \tforeach ($lst as $item) {\n\t\tif ($prev === null) {\n\t\t\t$prev = $item;\n\
    \t\t} else {\n\t\t\tif ($prev > $item) {\n\t\t\t\t$sorted = false;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t\t$prev = $item;\n\t\t}\n\t}\n\treturn $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp79k14olq.php:53\n\
    Stack trace:\n#0 /tmp/tmp79k14olq.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp79k14olq.php\
    \ on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$sorted = true;\n\t$last = $lst[0];\n\
    \tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i] < $last) {\n\t\t\t\
    $sorted = false;\n\t\t\tbreak;\n\t\t}\n\t\t$last = $lst[$i];\n\t}\n\treturn $sorted;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpj146egnd.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpj146egnd.php:49\nStack\
    \ trace:\n#0 /tmp/tmpj146egnd.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpj146egnd.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\t\
    $sorted = $lst;\n\tsort($sorted);\n\treturn $lst == $sorted;\n}\n\n/* Given an\
    \ array of numbers, return whether or not they are sorted\nin ascending order.\
    \ If array has more than 1 duplicate of the same\nnumber, return false. Assume\
    \ no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqktnk8yz.php:65\n\
    Stack trace:\n#0 /tmp/tmpqktnk8yz.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpqktnk8yz.php\
    \ on line 65\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp2tgz4ayi.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2tgz4ayi.php:49\nStack\
    \ trace:\n#0 /tmp/tmp2tgz4ayi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2tgz4ayi.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $num) {\n        if ($prev !== null && $num <=\
    \ $prev) {\n            $sorted = false;\n            break;\n        }\n    \
    \    $prev = $num;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpob6jknz_.php:51\n\
    Stack trace:\n#0 /tmp/tmpob6jknz_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpob6jknz_.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    foreach ($lst as $item) {\n        if ($item < $prev) {\n  \
    \          $sorted = false;\n            break;\n        }\n        $prev = $item;\n\
    \    }\n    return $sorted;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nWarning: Undefined array key 0 in /tmp/tmp6u3g308z.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp6u3g308z.php:51\nStack\
    \ trace:\n#0 /tmp/tmp6u3g308z.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp6u3g308z.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_1v913x.php:51\n\
    Stack trace:\n#0 /tmp/tmpf_1v913x.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpf_1v913x.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    if (count($lst) == 1) {\n \
    \       return true;\n    }\n    $prev = $lst[0];\n    for ($i = 1; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] < $prev) {\n            return false;\n      \
    \  }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\n/* Given an array\
    \ of numbers, return whether or not they are sorted\nin ascending order. If array\
    \ has more than 1 duplicate of the same\nnumber, return false. Assume no negative\
    \ numbers and only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpwzpdp6o_.php on line 26\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpwzpdp6o_.php:70\nStack\
    \ trace:\n#0 /tmp/tmpwzpdp6o_.php(76): test()\n#1 {main}\n  thrown in /tmp/tmpwzpdp6o_.php\
    \ on line 70\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcuruc73k.php:45\n\
    Stack trace:\n#0 /tmp/tmpcuruc73k.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpcuruc73k.php\
    \ on line 45\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len\
    \ - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80o2_qfe.php:49\n\
    Stack trace:\n#0 /tmp/tmp80o2_qfe.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp80o2_qfe.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp2tgz4ayi.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2tgz4ayi.php:49\nStack\
    \ trace:\n#0 /tmp/tmp2tgz4ayi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2tgz4ayi.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\t\
    $lst_sorted = $lst;\n\tsort($lst_sorted);\n\treturn $lst == $lst_sorted;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63rve72r.php:45\n\
    Stack trace:\n#0 /tmp/tmp63rve72r.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp63rve72r.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcuruc73k.php:45\n\
    Stack trace:\n#0 /tmp/tmpcuruc73k.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpcuruc73k.php\
    \ on line 45\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len\
    \ - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80o2_qfe.php:49\n\
    Stack trace:\n#0 /tmp/tmp80o2_qfe.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp80o2_qfe.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $last\
    \ = null;\n    foreach ($lst as $item) {\n        if ($last !== null && $item\
    \ <= $last) {\n            $sorted = false;\n            break;\n        }\n \
    \       $last = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx4ntgoye.php:51\n\
    Stack trace:\n#0 /tmp/tmpx4ntgoye.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpx4ntgoye.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\n/* Given an array of numbers, return\
    \ whether or not they are sorted\nin ascending order. If array has more than 1\
    \ duplicate of the same\nnumber, return false. Assume no negative numbers and\
    \ only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpycc1uniy.php:71\n\
    Stack trace:\n#0 /tmp/tmpycc1uniy.php(75): test()\n#1 {main}\n  thrown in /tmp/tmpycc1uniy.php\
    \ on line 71\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $len = count($lst);\n    for ($i = 0; $i < $len - 1; $i++) {\n        if\
    \ ($lst[$i] > $lst[$i + 1]) {\n            return false;\n        }\n    }\n \
    \   return true;\n}\n\n$lst = array(1, 2, 3, 4, 5, 6, 7);\nvar_dump(is_sorted($lst));\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(true)\n\nWarning: Undefined array key 2 in /tmp/tmpqkxgs4mo.php on\
    \ line 26\n\nWarning: Undefined array key 3 in /tmp/tmpqkxgs4mo.php on line 26\n\
    \nWarning: Undefined array key 2 in /tmp/tmpqkxgs4mo.php on line 26\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpqkxgs4mo.php:51\nStack trace:\n\
    #0 /tmp/tmpqkxgs4mo.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpqkxgs4mo.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    if (count($lst) == 1) {\n \
    \       return true;\n    }\n    $sorted = true;\n    $last = $lst[0];\n    for\
    \ ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $last) {\n      \
    \      $sorted = false;\n            break;\n        }\n        $last = $lst[$i];\n\
    \    }\n    return $sorted;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);\n\
    \nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nWarning: Undefined array key 0 in /tmp/tmphgc1jp3z.php on line 27\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphgc1jp3z.php:55\nStack\
    \ trace:\n#0 /tmp/tmphgc1jp3z.php(61): test()\n#1 {main}\n  thrown in /tmp/tmphgc1jp3z.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_length = count($lst);\n\
    \    if ($lst_length == 1) {\n        return true;\n    }\n    for ($i = 0; $i\
    \ < $lst_length - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeox6nd9j.php:51\n\
    Stack trace:\n#0 /tmp/tmpeox6nd9j.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpeox6nd9j.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $i = 0;\n    while ($i < count($lst) - 1)\
    \ {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n     \
    \   }\n        $i++;\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzgvrvnu5.php:49\n\
    Stack trace:\n#0 /tmp/tmpzgvrvnu5.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpzgvrvnu5.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_length = count($lst);\n\
    \    if ($lst_length == 1) {\n        return true;\n    }\n    for ($i = 0; $i\
    \ < $lst_length - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeox6nd9j.php:51\n\
    Stack trace:\n#0 /tmp/tmpeox6nd9j.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpeox6nd9j.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp2tgz4ayi.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2tgz4ayi.php:49\nStack\
    \ trace:\n#0 /tmp/tmp2tgz4ayi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2tgz4ayi.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf_1v913x.php:51\n\
    Stack trace:\n#0 /tmp/tmpf_1v913x.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpf_1v913x.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n  $lst = array_unique($lst);\n\
    \  $sorted = $lst;\n  sort($sorted);\n  return $lst == $sorted;\n}\n\n/* Given\
    \ an array of numbers, return whether or not they are sorted\nin ascending order.\
    \ If array has more than 1 duplicate of the same\nnumber, return false. Assume\
    \ no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpronag8se.php:65\n\
    Stack trace:\n#0 /tmp/tmpronag8se.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpronag8se.php\
    \ on line 65\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $last\
    \ = 0;\n    foreach ($lst as $num) {\n        if ($num < $last) {\n          \
    \  $sorted = false;\n            break;\n        }\n        $last = $num;\n  \
    \  }\n    return $sorted;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho is_sorted($lst);\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5etuqy9x.php:51\n\
    Stack trace:\n#0 /tmp/tmp5etuqy9x.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp5etuqy9x.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$lst_len = count($lst);\n\tif\
    \ ($lst_len <= 1) {\n\t\treturn true;\n\t}\n\t$prev = $lst[0];\n\tfor ($i = 1;\
    \ $i < $lst_len; $i++) {\n\t\tif ($lst[$i] < $prev) {\n\t\t\treturn false;\n\t\
    \t}\n\t\t$prev = $lst[$i];\n\t}\n\treturn true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp_eapa6i.php:51\n\
    Stack trace:\n#0 /tmp/tmpp_eapa6i.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpp_eapa6i.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len <= 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnnj6pimm.php:51\n\
    Stack trace:\n#0 /tmp/tmpnnj6pimm.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpnnj6pimm.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $prev >= $item) {\n       \
    \     return false;\n        }\n        $prev = $item;\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf9c3y3ic.php:49\n\
    Stack trace:\n#0 /tmp/tmpf9c3y3ic.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpf9c3y3ic.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len\
    \ - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80o2_qfe.php:49\n\
    Stack trace:\n#0 /tmp/tmp80o2_qfe.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp80o2_qfe.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ypha6aw.php:51\n\
    Stack trace:\n#0 /tmp/tmp5ypha6aw.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp5ypha6aw.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ypha6aw.php:51\n\
    Stack trace:\n#0 /tmp/tmp5ypha6aw.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp5ypha6aw.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $i = 0;\n    $j = 1;\n    while ($j < count($lst))\
    \ {\n        if ($lst[$i] > $lst[$j]) {\n            return false;\n        }\n\
    \        $i++;\n        $j++;\n    }\n    return true;\n}\n\n/* Given an array\
    \ of numbers, return whether or not they are sorted\nin ascending order. If array\
    \ has more than 1 duplicate of the same\nnumber, return false. Assume no negative\
    \ numbers and only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpupsu4rs0.php:71\n\
    Stack trace:\n#0 /tmp/tmpupsu4rs0.php(77): test()\n#1 {main}\n  thrown in /tmp/tmpupsu4rs0.php\
    \ on line 71\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp2tgz4ayi.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2tgz4ayi.php:49\nStack\
    \ trace:\n#0 /tmp/tmp2tgz4ayi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2tgz4ayi.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ypha6aw.php:51\n\
    Stack trace:\n#0 /tmp/tmp5ypha6aw.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp5ypha6aw.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n/*\
    \ Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcguj5mpg.php:65\n\
    Stack trace:\n#0 /tmp/tmpcguj5mpg.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpcguj5mpg.php\
    \ on line 65\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $len = count($lst);\n    for ($i = 0; $i\
    \ < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8nyobsh6.php:48\n\
    Stack trace:\n#0 /tmp/tmp8nyobsh6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp8nyobsh6.php\
    \ on line 48\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n/*\
    \ Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcguj5mpg.php:65\n\
    Stack trace:\n#0 /tmp/tmpcguj5mpg.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpcguj5mpg.php\
    \ on line 65\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $item) {\n        if ($prev !== null && $prev\
    \ >= $item) {\n            $sorted = false;\n            break;\n        }\n \
    \       $prev = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_s8kfha.php:51\n\
    Stack trace:\n#0 /tmp/tmpw_s8kfha.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpw_s8kfha.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len\
    \ - 1; $i++) {\n        if ($lst[$i] >= $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5ypha6aw.php:51\n\
    Stack trace:\n#0 /tmp/tmp5ypha6aw.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp5ypha6aw.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n\t$lst = array_unique($lst);\n\t\
    $lst = array_values($lst);\n\t$len = count($lst);\n\tfor ($i = 0; $i < $len -\
    \ 1; $i++) {\n\t\tif ($lst[$i] > $lst[$i + 1]) {\n\t\t\treturn false;\n\t\t}\n\
    \t}\n\treturn true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmoslndt0.php:48\n\
    Stack trace:\n#0 /tmp/tmpmoslndt0.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpmoslndt0.php\
    \ on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n  $lst_len = count($lst);\n  if\
    \ ($lst_len == 1) {\n    return true;\n  }\n  for ($i = 0; $i < $lst_len - 1;\
    \ $i++) {\n    if ($lst[$i] >= $lst[$i + 1]) {\n      return false;\n    }\n \
    \ }\n  return true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfkhxsg9r.php:51\n\
    Stack trace:\n#0 /tmp/tmpfkhxsg9r.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpfkhxsg9r.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    $prev = $lst[0];\n    for ($i\
    \ = 1; $i < $len; $i++) {\n        if ($lst[$i] < $prev) {\n            return\
    \ false;\n        }\n        $prev = $lst[$i];\n    }\n    return true;\n}\n\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpebmqjn4l.php on line 27\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpebmqjn4l.php:51\nStack\
    \ trace:\n#0 /tmp/tmpebmqjn4l.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpebmqjn4l.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $item) {\n        if ($prev !== null && $prev\
    \ >= $item) {\n            $sorted = false;\n            break;\n        }\n \
    \       $prev = $item;\n    }\n    return $sorted;\n}\n\n/* Given an array of\
    \ numbers, return whether or not they are sorted\nin ascending order. If array\
    \ has more than 1 duplicate of the same\nnumber, return false. Assume no negative\
    \ numbers and only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprrp9roki.php:71\n\
    Stack trace:\n#0 /tmp/tmprrp9roki.php(75): test()\n#1 {main}\n  thrown in /tmp/tmprrp9roki.php\
    \ on line 71\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $sorted = $lst;\n    sort($sorted);\n   \
    \ return $lst == $sorted;\n}\n\n/*\n * Given an array of numbers, return whether\
    \ or not they are sorted\n * in ascending order. If array has more than 1 duplicate\
    \ of the same\n * number, return false. Assume no negative numbers and only integers.\n\
    \ * Examples\n * >>> is_sorted(array(5))\n * true\n * >>> is_sorted(array(1, 2,\
    \ 3, 4, 5))\n * true\n * >>> is_sorted(array(1, 3, 2, 4, 5))\n * false\n * >>>\
    \ is_sorted(array(1, 2, 3, 4, 5, 6))\n * true\n * >>> is_sorted(array(1, 2, 3,\
    \ 4, 5, 6, 7))\n * true\n * >>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\n * false\n\
    \ * >>> is_sorted(array(1, 2, 2, 3, 3, 4))\n * true\n * >>> is_sorted(array(1,\
    \ 2, 2, 2, 3, 4))\n * false\n */\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnd_c7i7t.php:66\n\
    Stack trace:\n#0 /tmp/tmpnd_c7i7t.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpnd_c7i7t.php\
    \ on line 66\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $len = count($lst);\n    if\
    \ ($len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $len - 1;\
    \ $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqbt_3ti3.php:49\n\
    Stack trace:\n#0 /tmp/tmpqbt_3ti3.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpqbt_3ti3.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    for ($i = 0; $i < $lst_len\
    \ - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n   \
    \ return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80o2_qfe.php:49\n\
    Stack trace:\n#0 /tmp/tmp80o2_qfe.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp80o2_qfe.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $prev = null;\n    foreach\
    \ ($lst as $item) {\n        if ($prev !== null && $prev >= $item) {\n       \
    \     return false;\n        }\n        $prev = $item;\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf9c3y3ic.php:49\n\
    Stack trace:\n#0 /tmp/tmpf9c3y3ic.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpf9c3y3ic.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_values($lst);\n    $len = count($lst);\n    for ($i = 0; $i\
    \ < $len - 1; $i++) {\n        if ($lst[$i] > $lst[$i + 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\n/* Given an array of numbers,\
    \ return whether or not they are sorted\nin ascending order. If array has more\
    \ than 1 duplicate of the same\nnumber, return false. Assume no negative numbers\
    \ and only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwgy0nzr.php:68\n\
    Stack trace:\n#0 /tmp/tmpuwgy0nzr.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpuwgy0nzr.php\
    \ on line 68\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $count = count($lst);\n   \
    \ $i = 0;\n    while ($i < $count - 1) {\n        if ($lst[$i] >= $lst[$i + 1])\
    \ {\n            return false;\n        }\n        $i++;\n    }\n    return true;\n\
    }\n\n$lst = array(1, 2, 3, 4, 5);\nvar_dump(is_sorted($lst));\n\n$lst = array(1,\
    \ 3, 2, 4, 5);\nvar_dump(is_sorted($lst));\n\n$lst = array(1, 2, 2, 3, 3, 4);\n\
    var_dump(is_sorted($lst));\n\n$lst = array(1, 2, 2, 2, 3, 4);\nvar_dump(is_sorted($lst));\n\
    function candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(true)\nbool(false)\nbool(false)\nbool(false)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp6l2qb323.php:61\nStack trace:\n#0 /tmp/tmp6l2qb323.php(65):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6l2qb323.php on line 61\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n/*\
    \ Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcguj5mpg.php:65\n\
    Stack trace:\n#0 /tmp/tmpcguj5mpg.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpcguj5mpg.php\
    \ on line 65\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $item) {\n        if ($prev !== null && $prev\
    \ >= $item) {\n            $sorted = false;\n            break;\n        }\n \
    \       $prev = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_s8kfha.php:51\n\
    Stack trace:\n#0 /tmp/tmpw_s8kfha.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpw_s8kfha.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst = array_unique($lst);\n\
    \    $sorted = $lst;\n    sort($sorted);\n    return $lst == $sorted;\n}\n\n/*\
    \ Given an array of numbers, return whether or not they are sorted\nin ascending\
    \ order. If array has more than 1 duplicate of the same\nnumber, return false.\
    \ Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcguj5mpg.php:65\n\
    Stack trace:\n#0 /tmp/tmpcguj5mpg.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpcguj5mpg.php\
    \ on line 65\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\n/* Given an array of\
    \ numbers, return whether or not they are sorted\nin ascending order. If array\
    \ has more than 1 duplicate of the same\nnumber, return false. Assume no negative\
    \ numbers and only integers.\nExamples\n>>> is_sorted(array(5))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5))\nfalse\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1, 2, 3, 4, 5, 6, 7))\ntrue\n>>>\
    \ is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n>>> is_sorted(array(1, 2, 2, 3,\
    \ 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2, 3, 4))\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp1d82jm53.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp1d82jm53.php:69\nStack\
    \ trace:\n#0 /tmp/tmp1d82jm53.php(75): test()\n#1 {main}\n  thrown in /tmp/tmp1d82jm53.php\
    \ on line 69\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len <= 1) {\n        return true;\n    }\n    $prev = $lst[0];\n\
    \    for ($i = 1; $i < $lst_len; $i++) {\n        if ($lst[$i] < $prev) {\n  \
    \          return false;\n        }\n        $prev = $lst[$i];\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppxp9_u2w.php:51\n\
    Stack trace:\n#0 /tmp/tmppxp9_u2w.php(57): test()\n#1 {main}\n  thrown in /tmp/tmppxp9_u2w.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $item) {\n        if ($prev !== null && $prev\
    \ >= $item) {\n            $sorted = false;\n            break;\n        }\n \
    \       $prev = $item;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw_s8kfha.php:51\n\
    Stack trace:\n#0 /tmp/tmpw_s8kfha.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpw_s8kfha.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $prev) {\n            $sorted = false;\n            break;\n        }\n  \
    \      $prev = $lst[$i];\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmp2tgz4ayi.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp2tgz4ayi.php:49\nStack\
    \ trace:\n#0 /tmp/tmp2tgz4ayi.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp2tgz4ayi.php\
    \ on line 49\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    $prev = $lst[0];\n\
    \    for ($i = 1; $i < $lst_len; $i++) {\n        if ($lst[$i] < $prev) {\n  \
    \          return false;\n        }\n        $prev = $lst[$i];\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return is_sorted(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(5)) !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 0 in /tmp/tmpm8l_zet5.php on line 27\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpm8l_zet5.php:51\nStack\
    \ trace:\n#0 /tmp/tmpm8l_zet5.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpm8l_zet5.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $sorted = true;\n    $prev\
    \ = null;\n    foreach ($lst as $num) {\n        if ($prev !== null && $num <=\
    \ $prev) {\n            $sorted = false;\n            break;\n        }\n    \
    \    $prev = $num;\n    }\n    return $sorted;\n}\n\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpob6jknz_.php:51\n\
    Stack trace:\n#0 /tmp/tmpob6jknz_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpob6jknz_.php\
    \ on line 51\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   $i = 0;\n    $j = 1;\n    while ($j < $lst_len) {\n        if ($lst[$i] >\
    \ $lst[$j]) {\n            return false;\n        }\n        $i++;\n        $j++;\n\
    \    }\n    return true;\n}\n\n$lst = array(1, 2, 3, 4, 5);\n$lst2 = array(1,\
    \ 3, 2, 4, 5);\n$lst3 = array(1, 2, 2, 3, 3, 4);\n$lst4 = array(1, 2, 2, 2, 3,\
    \ 4);\n\necho is_sorted($lst) . \"\\n\";\necho is_sorted($lst2) . \"\\n\";\necho\
    \ is_sorted($lst3) . \"\\n\";\necho is_sorted($lst4) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_sorted(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(5))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 3, 2, 4, 5)) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1)) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 1))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 2, 3, 4)) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 3, 3, 4)) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(array(1, 2, 2, 3, 3, 4)) !== true) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn9icnua7.php:59\n\
    Stack trace:\n#0 /tmp/tmpn9icnua7.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpn9icnua7.php\
    \ on line 59\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Given an array of numbers, return whether or not they are sorted\n\
    in ascending order. If array has more than 1 duplicate of the same\nnumber, return\
    \ false. Assume no negative numbers and only integers.\nExamples\n>>> is_sorted(array(5))\n\
    true\n>>> is_sorted(array(1, 2, 3, 4, 5))\ntrue\n>>> is_sorted(array(1, 3, 2,\
    \ 4, 5))\nfalse\n>>> is_sorted(array(1, 2, 3, 4, 5, 6))\ntrue\n>>> is_sorted(array(1,\
    \ 2, 3, 4, 5, 6, 7))\ntrue\n>>> is_sorted(array(1, 3, 2, 4, 5, 6, 7))\nfalse\n\
    >>> is_sorted(array(1, 2, 2, 3, 3, 4))\ntrue\n>>> is_sorted(array(1, 2, 2, 2,\
    \ 3, 4))\nfalse*/\nfunction is_sorted($lst) {\n    $lst_len = count($lst);\n \
    \   if ($lst_len == 1) {\n        return true;\n    }\n    $i = 0;\n    $j = 1;\n\
    \    while ($j < $lst_len) {\n        if ($lst[$i] >= $lst[$j]) {\n          \
    \  return false;\n        }\n        $i++;\n        $j++;\n    }\n    return true;\n\
    }\n\n$lst = array(1, 2, 3, 4, 5);\nvar_dump(is_sorted($lst));\n\n$lst = array(1,\
    \ 3, 2, 4, 5);\nvar_dump(is_sorted($lst));\n\n$lst = array(1, 2, 3, 4, 5, 6);\n\
    var_dump(is_sorted($lst));\n\n$lst = array(1, 2, 3, 4, 5, 6, 7);\nvar_dump(is_sorted($lst));\n\
    \n$lst = array(1, 3, 2, 4, 5, 6, 7);\nvar_dump(is_sorted($lst));\n\n$lst = array(1,\
    \ 2, 2, 3, 3, 4);\nvar_dump(is_sorted($lst));\n\n$lst = array(1, 2, 2, 2, 3, 4);\n\
    var_dump(is_sorted($lst));\n\n$lst = array(5);\nvar_dump(is_sorted($lst));\nfunction\
    \ candidate(...$args) {\n    return is_sorted(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(5)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 3, 2, 4, 5)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6))\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5, 6, 7)) !== true) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(1, 3, 2, 4, 5, 6, 7)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1)) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(3, 2, 1)) !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 2, 2, 3, 4)) !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 3, 3, 4))\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 2, 3, 3, 4)) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(true)\nbool(false)\nbool(true)\nbool(true)\nbool(false)\nbool(false)\n\
    bool(false)\nbool(true)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpdvcbc4.php:78\n\
    Stack trace:\n#0 /tmp/tmpdpdvcbc4.php(82): test()\n#1 {main}\n  thrown in /tmp/tmpdpdvcbc4.php\
    \ on line 78\n"
  timestamp: 1660220656
