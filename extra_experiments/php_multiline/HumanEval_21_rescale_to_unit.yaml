name: HumanEval_21_rescale_to_unit
language: php
prompt: "<?php\n/* Given array of numbers (of at least two elements), apply a linear\
  \ transform to that array,\nsuch that the smallest number will become 0 and the\
  \ largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
  \ 0.25, 0.5, 0.75, 1.0)*/\nfunction rescale_to_unit($numbers) {\n"
tests: "function candidate(...$args) {\n    return rescale_to_unit(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(array(2.0, 49.9)) !== array(0.0, 1.0))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0, 49.9))\
  \ !== array(1.0, 0.0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.0,\
  \ 2.0, 3.0, 4.0, 5.0)) !== array(0.0, 0.25, 0.5, 0.75, 1.0)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(2.0, 1.0, 5.0, 3.0, 4.0)) !== array(0.25,\
  \ 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(12.0,\
  \ 11.0, 15.0, 13.0, 14.0)) !== array(0.25, 0.0, 1.0, 0.5, 0.75)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $min = min($numbers);\n    $max = max($numbers);\n    $range =\
    \ $max - $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n\
    \        $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $scaled = array();\n    foreach ($numbers as $number)\
    \ {\n        $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "\t$min = min($numbers);\n\t$max = max($numbers);\n\
    \t$range = $max - $min;\n\t$result = array();\n\tforeach ($numbers as $number)\
    \ {\n\t\t$result[] = ($number - $min) / $range;\n\t}\n\treturn $result;\n}\n\n\
    /* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given a list of numbers, return a list where each number is the sum of\
    \ all preceding numbers\n>>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6,\
    \ 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range =\
    \ $max - $min;\n    $result = array();\n    foreach ($numbers as $number) {\n\
    \        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given a list of numbers, return the mean (average) of the numbers.\n>>>\
    \ mean(array(1.0, 2.0, 3.0, 4.0, 5.0))\n3.0*/", "    $min = min($numbers);\n \
    \   $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given array of numbers (of at\
    \ least two elements), apply a linear transform to that array,\nsuch that the\
    \ smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nsuch that the smallest number will\
    \ become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "  $min = min($numbers);\n\
    \  $max = max($numbers);\n  $range = $max - $min;\n  $scaled = array();\n  foreach\
    \ ($numbers as $number) {\n    $scaled[] = ($number - $min) / $range;\n  }\n \
    \ return $scaled;\n}\n\n/* Given an array of numbers, return an array of the same\
    \ length,\nwhere each element is the sum of all previous elements in the array.\n\
    >>> cumulative_sum(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(1.0, 3.0, 6.0, 10.0,\
    \ 15.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range\
    \ = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as $number)\
    \ {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n\
    }\n\n/* Given a list of numbers, return a list of numbers that are the cumulative\
    \ sums of the original list.\n>>> cumulative_sum(array(1, 2, 3, 4))\narray(1,\
    \ 3, 6, 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range\
    \ = $max - $min;\n    $result = array();\n    foreach ($numbers as $number) {\n\
    \        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $scaled = array();\n    foreach ($numbers as $number)\
    \ {\n        $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as\
    \ $number) {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return\
    \ $rescaled;\n}\n\n/* Given a list of numbers, return a list of the same numbers,\n\
    but with the largest number in the list at the front.\n>>> largest_first([1, 2,\
    \ 3, 4, 5])\n[5, 1, 2, 3, 4]\n>>> largest_first([-1, -2, -3, -4, -5])\n[-1, -5,\
    \ -2, -3, -4]\n>>> largest_first([])\n[]\n*/", "\t$min = min($numbers);\n\t$max\
    \ = max($numbers);\n\t$range = $max - $min;\n\t$rescaled = array();\n\tforeach\
    \ ($numbers as $number) {\n\t\t$rescaled[] = ($number - $min) / $range;\n\t}\n\
    \treturn $rescaled;\n}\n\n/* Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nsuch that the smallest number will\
    \ become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nsuch that the smallest number will\
    \ become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nsuch that the smallest number will\
    \ become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given a list of numbers, return a list where\
    \ each number is the sum of all preceding numbers\n>>> cumulative_sum(array(1,\
    \ 2, 3, 4))\narray(1, 3, 6, 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as\
    \ $number) {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return\
    \ $rescaled;\n}\n\n/* Given array of numbers (of at least two elements), apply\
    \ a linear transform to that array,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n   \
    \ $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n \
    \   foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nsuch that the smallest number will\
    \ become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "\t$min = min($numbers);\n\
    \t$max = max($numbers);\n\t$range = $max - $min;\n\t$result = array();\n\tforeach\
    \ ($numbers as $number) {\n\t\t$result[] = ($number - $min) / $range;\n\t}\n\t\
    return $result;\n}\n\n/* Given an array of numbers, return the average (mean)\
    \ of those numbers\n>>> average(array(1.0, 2.0, 3.0, 4.0, 5.0))\n3.0*/", "   \
    \ $min = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n\
    \    $result = array();\n    foreach ($numbers as $number) {\n        $result[]\
    \ = ($number - $min) / $range;\n    }\n    return $result;\n}\n\n/* Given a list\
    \ of numbers, return a list where each number is the sum of all preceding numbers\n\
    >>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6, 10)\n*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given array of numbers (of at\
    \ least two elements), apply a linear transform to that array,\nsuch that the\
    \ smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given array of numbers (of at\
    \ least two elements), apply a linear transform to that array,\nsuch that the\
    \ smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given array of numbers (of at\
    \ least two elements), apply a linear transform to that array,\nsuch that the\
    \ smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given a list of numbers, return\
    \ a list of the same numbers, but with the largest number first.\n>>> largest_first([1,\
    \ 2, 3, 4, 5])\n[5, 1, 2, 3, 4]\n>>> largest_first([5, 1, 2, 3, 4])\n[5, 1, 2,\
    \ 3, 4]\n>>> largest_first([5, 1, 2, 3, 4, 5])\n[5, 5, 1, 2, 3, 4]\n>>> largest_first([5,\
    \ 4, 3, 2, 1])\n[5, 4, 3, 2, 1]\n*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given a list of numbers, return a list where each number is the sum of\
    \ all preceding numbers\n>>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6,\
    \ 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range =\
    \ $max - $min;\n    $result = array();\n    foreach ($numbers as $number) {\n\
    \        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given a list of numbers, return a list of the same numbers,\nexcept with\
    \ the smallest number first and the largest number last.\n>>> sort_min_max(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(1.0, 2.0, 3.0, 4.0, 5.0)\n>>> sort_min_max(array(5.0,\
    \ 4.0, 3.0, 2.0, 1.0))\narray(1.0, 2.0, 3.0, 4.0, 5.0)\n>>> sort_min_max(array(1.0,\
    \ 5.0, 2.0, 4.0, 3.0))\narray(1.0, 2.0, 3.0, 4.0, 5.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given a list of numbers, return\
    \ the mean (average) of those numbers.\n>>> mean(array(1.0, 2.0, 3.0, 4.0, 5.0))\n\
    3.0 */", "    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max\
    \ - $min;\n    $result = array();\n    foreach ($numbers as $number) {\n     \
    \   $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\n\
    /* Given a list of numbers, return a list where each number is the sum of all\
    \ preceding numbers\n>>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6, 10)*/",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n\
    \    $result = array();\n    foreach ($numbers as $number) {\n        $result[]\
    \ = ($number - $min) / $range;\n    }\n    return $result;\n}\n\n/* Given an array\
    \ of numbers, apply a linear transform to that array,\nsuch that the smallest\
    \ number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $scaled = array();\n\
    \    foreach ($numbers as $number) {\n        $scaled[] = ($number - $min) / $range;\n\
    \    }\n    return $scaled;\n}\n\n/* Given two arrays of numbers, apply a linear\
    \ transform to the second array,\nsuch that the smallest number will become 0\
    \ and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0), array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n\
    \    $result = array();\n    foreach ($numbers as $number) {\n        $result[]\
    \ = ($number - $min) / $range;\n    }\n    return $result;\n}\n\n/* Given a list\
    \ of numbers, return a list where each number is the sum of all preceding numbers\n\
    >>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6, 10)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given array of numbers (of at\
    \ least two elements), apply a linear transform to that array,\nsuch that the\
    \ smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given a list of numbers, return a list where\
    \ each number is the sum of all preceding numbers\n>>> cumulative_sum(array(1,\
    \ 2, 3, 4))\narray(1, 3, 6, 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as\
    \ $number) {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return\
    \ $rescaled;\n}\n\n/* Given a list of numbers, return the mean (average) of those\
    \ numbers\n>>> mean(array(1.0, 2.0, 3.0, 4.0, 5.0))\n3.0*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given array of numbers (of at\
    \ least two elements), apply a linear transform to that array,\nsuch that the\
    \ smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given a list of numbers, return\
    \ a list of the numbers, each one being the sum of all the numbers\nbefore it\
    \ in the list.\n>>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6, 10)*/",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n\
    \    $rescaled = array();\n    foreach ($numbers as $number) {\n        $rescaled[]\
    \ = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\n/* Given array\
    \ of numbers (of at least two elements), apply a linear transform to that array,\n\
    such that the smallest number will become 0 and the largest will become 1\n>>>\
    \ rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range =\
    \ $max - $min;\n    $result = array();\n    foreach ($numbers as $number) {\n\
    \        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $scaled = array();\n    foreach ($numbers as $number) {\n        $scaled[]\
    \ = ($number - $min) / ($max - $min);\n    }\n    return $scaled;\n}\n\n/* Given\
    \ a list of numbers, return a list where each number is the sum of all preceding\
    \ numbers\n>>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6, 10)*/", "   \
    \ $min = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n\
    \    $result = array();\n    foreach ($numbers as $number) {\n        $result[]\
    \ = ($number - $min) / $range;\n    }\n    return $result;\n}\n\n/* Given array\
    \ of numbers (of at least two elements), apply a linear transform to that array,\n\
    such that the smallest number will become 0 and the largest will become 1\n>>>\
    \ rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range =\
    \ $max - $min;\n    $result = array();\n    foreach ($numbers as $number) {\n\
    \        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as\
    \ $number) {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return\
    \ $rescaled;\n}\n\n/* Given array of numbers (of at least two elements), apply\
    \ a linear transform to that array,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n   \
    \ $max = max($numbers);\n    $range = $max - $min;\n    $scaled = array();\n \
    \   foreach ($numbers as $number) {\n        $scaled[] = ($number - $min) / $range;\n\
    \    }\n    return $scaled;\n}\n\n/* Given a list of numbers, return a list where\
    \ each number is the sum of all preceding numbers\n>>> cumulative_sum(array(1,\
    \ 2, 3, 4))\narray(1, 3, 6, 10)*/", "\t$min = min($numbers);\n\t$max = max($numbers);\n\
    \t$range = $max - $min;\n\t$result = array();\n\tforeach ($numbers as $number)\
    \ {\n\t\t$result[] = ($number - $min) / $range;\n\t}\n\treturn $result;\n}\n\n\
    /* Given a list of numbers, return a list of the same numbers, but with the largest\
    \ number first.\n>>> largest_first([1, 2, 3, 4, 5])\n[5, 1, 2, 3, 4]\n>>> largest_first([5,\
    \ 4, 3, 2, 1])\n[5, 4, 3, 2, 1]\n>>> largest_first([5, 4, 3, 2, 1, 0])\n[5, 4,\
    \ 3, 2, 1, 0]\n>>> largest_first([5, 4, 3, 2, 1, 0, -1])\n[5, 4, 3, 2, 1, 0, -1]\n\
    >>> largest_first([5, 4, 3, 2, 1, 0, -1, -2])\n[5, 4, 3, 2, 1, 0, -1, -2]\n>>>\
    \ largest_first([5, 4, 3, 2, 1, 0, -1, -2, -3])\n[5, 4, 3, 2, 1, 0, -1, -2, -3]\n\
    >>> largest_first([5, 4, 3, 2, 1, 0, -1, -2, -3, -4])\n[5, 4, 3, 2, 1, 0, -1,\
    \ -2, -3, -4]\n>>> largest_first([5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5])\n[5,\
    \ 4, 3, 2, 1, 0, -1, -2, -3, -4, -5]\n>>> largest_first([5, 4, 3, 2, 1, 0, -1,\
    \ -2, -3, -4, -5, -6])\n[5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6]\n>>> largest_",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n\
    \    $result = array();\n    foreach ($numbers as $number) {\n        $result[]\
    \ = ($number - $min) / $range;\n    }\n    return $result;\n}\n\n/* Given a list\
    \ of numbers, return the index of the number closest to the mean.\n>>> index_of_closest_to_mean(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\n2\n>>> index_of_closest_to_mean(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0))\n2\n>>> index_of_closest_to_mean(array(1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0))\n3\n>>> index_of_closest_to_mean(array(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,\
    \ 8.0))\n3\n>>> index_of_closest_to_mean(array(1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,\
    \ 8.0, 9.0))\n4\n>>> index_of_closest_to_mean(array(1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0, 10.0))\n4\n>>> index_of_closest_to_mean(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0))\n4\n>>> index_of_closest_to_mean(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0))\n", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nsuch that the smallest number will\
    \ become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $new_numbers = array();\n\
    \    foreach ($numbers as $number) {\n        $new_numbers[] = ($number - $min)\
    \ / $range;\n    }\n    return $new_numbers;\n}\n\n/* Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\nsuch that the\
    \ smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given a list of numbers, return the mean\
    \ (average) of the numbers.\n>>> mean(array(1.0, 2.0, 3.0, 4.0, 5.0))\n3.0*/",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n\
    \    $result = array();\n    foreach ($numbers as $number) {\n        $result[]\
    \ = ($number - $min) / $range;\n    }\n    return $result;\n}\n\n/* Given array\
    \ of numbers (of at least two elements), apply a linear transform to that array,\n\
    such that the smallest number will become 0 and the largest will become 1\n>>>\
    \ rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range =\
    \ $max - $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n\
    \        $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n\
    }\n\n/* Given a list of numbers, return the smallest number in the list.\n>>>\
    \ smallest_number(array(1.0, 2.0, 3.0, 4.0, 5.0))\n1.0*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given a list of numbers, return a list where\
    \ each number is the sum of all preceding numbers\n>>> cumulative_sum(array(1,\
    \ 2, 3, 4))\narray(1, 3, 6, 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as\
    \ $number) {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return\
    \ $rescaled;\n}\n\n/* Given a list of numbers, return the mean of the numbers.\n\
    >>> mean(array(1, 2, 3, 4, 5))\n3.0*/", "    $min = min($numbers);\n    $max =\
    \ max($numbers);\n    $range = $max - $min;\n    $result = array();\n    foreach\
    \ ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n  \
    \  }\n    return $result;\n}\n\n/* Given an array of numbers, return the sum of\
    \ all the numbers\n>>> sum_of_numbers(array(1, 2, 3, 4, 5))\n15*/", "    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ $scaled = array();\n    foreach ($numbers as $number) {\n        $scaled[] =\
    \ ($number - $min) / $range;\n    }\n    return $scaled;\n}\n\n/* Given array\
    \ of numbers (of at least two elements), apply a linear transform to that array,\n\
    such that the smallest number will become 0 and the largest will become 1\n>>>\
    \ rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range =\
    \ $max - $min;\n    $result = array();\n    foreach ($numbers as $number) {\n\
    \        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given a list of numbers, return a list where\neach number is the sum of\
    \ all preceding numbers\n>>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6,\
    \ 10)\n*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range\
    \ = $max - $min;\n    $result = array();\n    foreach ($numbers as $number) {\n\
    \        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as\
    \ $number) {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return\
    \ $rescaled;\n}\n\n/* Given array of numbers (of at least two elements), apply\
    \ a linear transform to that array,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n   \
    \ $max = max($numbers);\n    $range = $max - $min;\n    $scaled = array();\n \
    \   foreach ($numbers as $number) {\n        $scaled[] = ($number - $min) / $range;\n\
    \    }\n    return $scaled;\n}\n\n/* Given a list of numbers, return a list of\
    \ numbers that are the cumulative sums of the numbers in the input list.\n>>>\
    \ cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6, 10)*/", "\t$min = min($numbers);\n\
    \t$max = max($numbers);\n\t$range = $max - $min;\n\t$scaled = array();\n\tforeach\
    \ ($numbers as $number) {\n\t\t$scaled[] = ($number - $min) / $range;\n\t}\n\t\
    return $scaled;\n}\n\n/* Given a list of numbers, return a list of the same numbers,\
    \ but with the largest number first,\nthe smallest number last, and all the other\
    \ numbers in between in the same order as they were in the original list.\n>>>\
    \ reorder_to_largest_first(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(5.0, 1.0, 2.0,\
    \ 3.0, 4.0)*/", "\t$min = min($numbers);\n\t$max = max($numbers);\n\t$range =\
    \ $max - $min;\n\t$scaled = array();\n\tforeach ($numbers as $number) {\n\t\t\
    $scaled[] = ($number - $min) / $range;\n\t}\n\treturn $scaled;\n}\n\n/* Given\
    \ array of numbers (of at least two elements), apply a linear transform to that\
    \ array,\nsuch that the smallest number will become 0 and the largest will become\
    \ 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5,\
    \ 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range\
    \ = $max - $min;\n    $result = array();\n    foreach ($numbers as $number) {\n\
    \        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given an array of numbers, return the mean of that array\n>>> mean(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\n3.0*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given a list of numbers, return a list where each number is the sum of\
    \ all preceding numbers\n>>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6,\
    \ 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range =\
    \ $max - $min;\n    $result = array();\n    foreach ($numbers as $number) {\n\
    \        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $scaled = array();\n    foreach ($numbers as $number)\
    \ {\n        $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n\
    }\n\n/* Given a list of numbers, return the smallest number in the list.\n>>>\
    \ min(array(1.0, 2.0, 3.0, 4.0, 5.0))\n1.0*/", "    $min = min($numbers);\n  \
    \  $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given array of numbers (of at\
    \ least two elements), apply a linear transform to that array,\nsuch that the\
    \ smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nsuch that the smallest number will\
    \ become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given array of numbers (of at\
    \ least two elements), apply a linear transform to that array,\nsuch that the\
    \ smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given array of numbers (of at\
    \ least two elements), apply a linear transform to that array,\nsuch that the\
    \ smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given a list of numbers, return the mean\
    \ (average) of the numbers.\n>>> mean(array(1.0, 2.0, 3.0, 4.0, 5.0))\n3.0*/",
  "\t$min = min($numbers);\n\t$max = max($numbers);\n\t$range = $max - $min;\n\t$result\
    \ = array();\n\tforeach ($numbers as $number) {\n\t\t$result[] = ($number - $min)\
    \ / $range;\n\t}\n\treturn $result;\n}\n\n/* Given array of numbers (of at least\
    \ two elements), apply a linear transform to that array,\nsuch that the smallest\
    \ number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given a list of numbers, return a list where\
    \ each number is the sum of all preceding numbers\n>>> cumulative_sum(array(1,\
    \ 2, 3, 4))\narray(1, 3, 6, 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $scaled = array();\n    foreach ($numbers as $number)\
    \ {\n        $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n\
    }\n\n/* Given a list of numbers, return a list of numbers where each number is\
    \ the sum of all the numbers before it.\n>>> cumulative_sum(array(1, 2, 3, 4))\n\
    array(1, 3, 6, 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    if ($range == 0) {\n        return array_fill(0,\
    \ count($numbers), 0.5);\n    }\n    $result = array();\n    foreach ($numbers\
    \ as $number) {\n        $result[] = ($number - $min) / $range;\n    }\n    return\
    \ $result;\n}\n\n/* Given array of numbers (of at least two elements), apply a\
    \ linear transform to that array,\nsuch that the smallest number will become 0\
    \ and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n   \
    \ $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n \
    \   foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $scaled = array();\n    foreach ($numbers as $number)\
    \ {\n        $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given a list of numbers, return a list where each number is the sum of\
    \ all preceding numbers\n>>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6,\
    \ 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $result =\
    \ array();\n    foreach ($numbers as $number) {\n        $result[] = ($number\
    \ - $min) / ($max - $min);\n    }\n    return $result;\n}\n\n/* Given array of\
    \ numbers (of at least two elements), apply a linear transform to that array,\n\
    such that the smallest number will become 0 and the largest will become 1\n>>>\
    \ rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range =\
    \ $max - $min;\n    $result = array();\n    foreach ($numbers as $number) {\n\
    \        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $scaled = array();\n    foreach ($numbers as $number)\
    \ {\n        $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n\
    }\n\n/* Given an array of numbers, return the mean of the numbers\n>>> mean(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\n3.0*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as\
    \ $number) {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return\
    \ $rescaled;\n}\n\n/* Given array of numbers (of at least two elements), apply\
    \ a linear transform to that array,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n   \
    \ $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given a list of numbers, return\
    \ the mean of the numbers\n>>> mean(array(1, 2, 3, 4, 5))\n3.0*/", "    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled\
    \ = array();\n    foreach ($numbers as $number) {\n        $rescaled[] = ($number\
    \ - $min) / $range;\n    }\n    return $rescaled;\n}\n\n/* Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\nsuch that\
    \ the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nsuch that the smallest number will\
    \ become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given array of numbers (of at\
    \ least two elements), apply a linear transform to that array,\nsuch that the\
    \ smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nsuch that the smallest number will\
    \ become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given a list of numbers, return the mean\
    \ of the numbers.\n>>> mean(array(1, 2, 3, 4, 5))\n3.0*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given array of numbers (of at\
    \ least two elements), apply a linear transform to that array,\nsuch that the\
    \ smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given array of numbers (of at\
    \ least two elements), apply a linear transform to that array,\nsuch that the\
    \ smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given a list of numbers, return\
    \ a list of the numbers in the same order,\nbut with each number replaced by the\
    \ sum of all the numbers up to that point.\n>>> cumulative_sum(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(1.0, 3.0, 6.0, 10.0, 15.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nsuch that the smallest number will\
    \ become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $scaled = array();\n\
    \    foreach ($numbers as $number) {\n        $scaled[] = ($number - $min) / $range;\n\
    \    }\n    return $scaled;\n}\n\n/* Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nsuch that the smallest number will\
    \ become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "\t$min = min($numbers);\n\
    \t$max = max($numbers);\n\t$range = $max - $min;\n\t$scaled = array();\n\tforeach\
    \ ($numbers as $number) {\n\t\t$scaled[] = ($number - $min) / $range;\n\t}\n\t\
    return $scaled;\n}\n\n/* Given array of numbers (of at least two elements), apply\
    \ a linear transform to that array,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n   \
    \ $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n \
    \   foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given a list of numbers, return a list of\
    \ the same numbers, but with each number\nrounded to the nearest integer.\n>>>\
    \ round_to_int(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(1, 2, 3, 4, 5)*/", "   \
    \ $min = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n\
    \    $result = array();\n    foreach ($numbers as $number) {\n        $result[]\
    \ = ($number - $min) / $range;\n    }\n    return $result;\n}\n\n/* Given an array\
    \ of numbers, return the mean of the numbers\n>>> mean(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\n3.0*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range\
    \ = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as $number)\
    \ {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $scaled = array();\n    foreach ($numbers as $number)\
    \ {\n        $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n\
    }\n\n/* Given a list of numbers, return the mean of the numbers.\n>>> mean(array(1,\
    \ 2, 3, 4, 5))\n3.0*/", "\t$min = min($numbers);\n\t$max = max($numbers);\n\t\
    $range = $max - $min;\n\t$scaled = array();\n\tforeach ($numbers as $number) {\n\
    \t\t$scaled[] = ($number - $min) / $range;\n\t}\n\treturn $scaled;\n}\n\n/* Given\
    \ a list of numbers, return the mean of the numbers.\n>>> mean(array(1, 2, 3,\
    \ 4, 5))\n3.0*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range\
    \ = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as $number)\
    \ {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $scaled = array();\n    foreach ($numbers as $number)\
    \ {\n        $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n\
    }\n\n/* Given a list of numbers, return a list of the same numbers, but with the\
    \ largest number first\n>>> largest_first([1, 2, 3, 4, 5])\n[5, 1, 2, 3, 4]*/",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n\
    \    $rescaled = array();\n    foreach ($numbers as $number) {\n        $rescaled[]\
    \ = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\n/*Given a list\
    \ of numbers, return the mean of those numbers.\n>>> mean(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0))\n3.0*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers, return array of numbers where each element is\
    \ the sum of all elements\nbefore it.\n>>> cumulative_sum(array(1.0, 2.0, 3.0,\
    \ 4.0, 5.0))\narray(1.0, 3.0, 6.0, 10.0, 15.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nsuch that the smallest number will\
    \ become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nsuch that the smallest number will\
    \ become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "\t$min = min($numbers);\n\
    \t$max = max($numbers);\n\t$range = $max - $min;\n\t$scaled = array();\n\tforeach\
    \ ($numbers as $number) {\n\t\t$scaled[] = ($number - $min) / $range;\n\t}\n\t\
    return $scaled;\n}\n\n/* Given array of numbers (of at least two elements), apply\
    \ a linear transform to that array,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n   \
    \ $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given an array of numbers, return\
    \ the average of those numbers.\n>>> average(array(1.0, 2.0, 3.0, 4.0, 5.0))\n\
    3.0*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max\
    \ - $min;\n    $result = array();\n    foreach ($numbers as $number) {\n     \
    \   $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\n\
    /* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as\
    \ $number) {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return\
    \ $rescaled;\n}\n\n/* Given array of numbers (of at least two elements), apply\
    \ a linear transform to that array,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n   \
    \ $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given array of numbers (of at\
    \ least two elements), apply a linear transform to that array,\nsuch that the\
    \ smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $scaled = array();\n\
    \    foreach ($numbers as $number) {\n        $scaled[] = ($number - $min) / $range;\n\
    \    }\n    return $scaled;\n}\n\n/* Given a list of numbers, return a list of\
    \ the numbers squared\n>>> square_list([1, 2, 3, 4, 5])\n[1, 4, 9, 16, 25]*/",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n\
    \    $rescaled = array();\n    foreach ($numbers as $number) {\n        $rescaled[]\
    \ = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\n/* Given a\
    \ list of numbers, return a list of numbers where each number is the sum of the\
    \ corresponding numbers in the input list.\n>>> cumulative_sum(array(1, 2, 3,\
    \ 4))\narray(1, 3, 6, 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given a list of numbers, return a list where each number is the sum of\
    \ all preceding numbers\n>>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6,\
    \ 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range =\
    \ $max - $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n\
    \        $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $scaled = array();\n    foreach ($numbers as $number)\
    \ {\n        $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as\
    \ $number) {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return\
    \ $rescaled;\n}\n\n/* Given array of numbers (of at least two elements), apply\
    \ a linear transform to that array,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n   \
    \ $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n \
    \   foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nsuch that the smallest number will\
    \ become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given a list of numbers, return\
    \ a list of the numbers, each of which is the sum of the corresponding numbers\
    \ in the input list and the one before it.\n>>> cumulative_sum(array(1, 2, 3,\
    \ 4))\narray(1, 3, 6, 10)*/", "\t$min = min($numbers);\n\t$max = max($numbers);\n\
    \t$range = $max - $min;\n\t$result = array();\n\tforeach ($numbers as $number)\
    \ {\n\t\t$result[] = ($number - $min) / $range;\n\t}\n\treturn $result;\n}\n\n\
    /* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given a list of numbers, return a list where each number is the sum of\
    \ all preceding numbers\n>>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6,\
    \ 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range =\
    \ $max - $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n\
    \        $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n\
    }\n\n/* Given a list of numbers, return a list of numbers where each number is\
    \ the sum of all the numbers before it.\n>>> cumulative_sum(array(1, 2, 3, 4))\n\
    array(1, 3, 6, 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $unit = array();\n    foreach ($numbers as $number)\
    \ {\n        $unit[] = ($number - $min) / $range;\n    }\n    return $unit;\n\
    }\n\n/* Given a list of numbers, return a list of the numbers sorted in descending\
    \ order.\n>>> sort_descending(array(1, 2, 3, 4, 5))\narray(5, 4, 3, 2, 1)*/",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n\
    \    $new_numbers = array();\n    foreach ($numbers as $number) {\n        $new_numbers[]\
    \ = ($number - $min) / $range;\n    }\n    return $new_numbers;\n}\n\n/* Given\
    \ an array of numbers, return an array of the same size, where each element is\
    \ the\nrunning total of the elements up to that point.\n>>> running_total(array(1,\
    \ 2, 3, 4))\narray(1, 3, 6, 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given a list of numbers, return a list where each number is the sum of\
    \ all preceding numbers\n>>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6,\
    \ 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range =\
    \ $max - $min;\n    $result = array();\n    foreach ($numbers as $number) {\n\
    \        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given a list of numbers, return a list where each number is the sum of\
    \ all preceding numbers\n>>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6,\
    \ 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range =\
    \ $max - $min;\n    $result = array();\n    foreach ($numbers as $number) {\n\
    \        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given a list of numbers, return the mean of the numbers\n>>> mean(array(1,\
    \ 2, 3, 4, 5))\n3.0*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $new_numbers = array();\n    foreach ($numbers\
    \ as $number) {\n        $new_numbers[] = ($number - $min) / $range;\n    }\n\
    \    return $new_numbers;\n}\n\n/* Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nsuch that the smallest number will\
    \ become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given a list of numbers, return\
    \ the mean (average) of those numbers.\n>>> mean(array(1.0, 2.0, 3.0, 4.0, 5.0))\n\
    3.0*/", "\t$min = min($numbers);\n\t$max = max($numbers);\n\t$range = $max - $min;\n\
    \t$result = array();\n\tforeach ($numbers as $number) {\n\t\t$result[] = ($number\
    \ - $min) / $range;\n\t}\n\treturn $result;\n}\n\n/* Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\nsuch that the\
    \ smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given a list of numbers, return a list where\
    \ each number is the sum of all preceding numbers\n>>> cumulative_sum(array(1,\
    \ 2, 3, 4))\narray(1, 3, 6, 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as\
    \ $number) {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return\
    \ $rescaled;\n}\n\n/* Given array of numbers (of at least two elements), apply\
    \ a linear transform to that array,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n   \
    \ $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n \
    \   foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given a list of numbers, return a list where\
    \ each number is the sum of all preceding numbers\n>>> cumulative_sum(array(1,\
    \ 2, 3, 4))\narray(1, 3, 6, 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as\
    \ $number) {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return\
    \ $rescaled;\n}\n\n/* Given array of numbers (of at least two elements), apply\
    \ a linear transform to that array,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n   \
    \ $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n \
    \   foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given a list of numbers, return the mean\
    \ (average) of the numbers.\n>>> mean(array(1.0, 2.0, 3.0, 4.0, 5.0))\n3.0*/",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n\
    \    $result = array();\n    foreach ($numbers as $number) {\n        $result[]\
    \ = ($number - $min) / $range;\n    }\n    return $result;\n}\n\n/* Given a list\
    \ of numbers, return a list where each number is the sum of all preceding numbers\n\
    >>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6, 10)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nsuch that the smallest number will\
    \ become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given an array of numbers, return\
    \ the mean (average) of those numbers\n>>> mean(array(1.0, 2.0, 3.0, 4.0, 5.0))\n\
    3.0*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max\
    \ - $min;\n    $result = array();\n    foreach ($numbers as $number) {\n     \
    \   $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\n\
    /* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $scaled = array();\n    foreach ($numbers as $number)\
    \ {\n        $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n\
    }\n\n/* Given a list of numbers, return a list of numbers that are the cumulative\
    \ sum of the input list.\n>>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6,\
    \ 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range =\
    \ $max - $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n\
    \        $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n\
    }\n\n/* Given a list of numbers, return a list of the same numbers, except with\
    \ each number\nrounded to the nearest 10.\n>>> round_to_nearest_10(array(1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))\narray(0,\
    \ 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20)*/",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n\
    \    $result = array();\n    foreach ($numbers as $number) {\n        $result[]\
    \ = ($number - $min) / $range;\n    }\n    return $result;\n}\n\n/* Given array\
    \ of numbers (of at least two elements), apply a linear transform to that array,\n\
    such that the smallest number will become 0 and the largest will become 1\n>>>\
    \ rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)*/", "\t$min = min($numbers);\n\t$max = max($numbers);\n\t$range = $max\
    \ - $min;\n\t$rescaled = array();\n\tforeach ($numbers as $number) {\n\t\t$rescaled[]\
    \ = ($number - $min) / $range;\n\t}\n\treturn $rescaled;\n}\n\n/* Given array\
    \ of numbers (of at least two elements), apply a linear transform to that array,\n\
    such that the smallest number will become 0 and the largest will become 1\n>>>\
    \ rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75,\
    \ 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range =\
    \ $max - $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n\
    \        $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given a list of numbers, return the mean (average) of the numbers.\n>>>\
    \ mean(array(1.0, 2.0, 3.0, 4.0, 5.0))\n3.0*/", "    $min = min($numbers);\n \
    \   $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given an array of numbers, return\
    \ the mean average of that array\n>>> mean_average(array(1.0, 2.0, 3.0, 4.0, 5.0))\n\
    3.0*/", "\t$min = min($numbers);\n\t$max = max($numbers);\n\t$range = $max - $min;\n\
    \t$scaled = array();\n\tforeach ($numbers as $number) {\n\t\t$scaled[] = ($number\
    \ - $min) / $range;\n\t}\n\treturn $scaled;\n}\n\n/* Given array of numbers (of\
    \ at least two elements), apply a linear transform to that array,\nsuch that the\
    \ smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given a list of numbers, return\
    \ a list of the same numbers, but with the last element moved to the front.\n\
    >>> move_to_front(array(1, 2, 3, 4, 5))\narray(5, 1, 2, 3, 4)*/", "    $min =\
    \ min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n    $result\
    \ = array();\n    foreach ($numbers as $number) {\n        $result[] = ($number\
    \ - $min) / $range;\n    }\n    return $result;\n}\n\n/* Given array of numbers\
    \ (of at least two elements), apply a linear transform to that array,\nsuch that\
    \ the smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given a list of numbers, return a list where\
    \ each number is the sum of all preceding numbers\n>>> cumulative_sum(array(1,\
    \ 2, 3, 4))\narray(1, 3, 6, 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as\
    \ $number) {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return\
    \ $rescaled;\n}\n\n/* Given a list of numbers, return a list of numbers where\
    \ each number is the sum of the corresponding numbers in the input list.\n>>>\
    \ cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6, 10)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $new_numbers = array();\n\
    \    foreach ($numbers as $number) {\n        $new_numbers[] = ($number - $min)\
    \ / $range;\n    }\n    return $new_numbers;\n}\n\n/* Given an array of numbers,\
    \ return an array of the same numbers in reverse order\n>>> reverse_array(array(1,\
    \ 2, 3, 4, 5))\narray(5, 4, 3, 2, 1)*/", "    $min = min($numbers);\n    $max\
    \ = max($numbers);\n    $range = $max - $min;\n    $result = array();\n    foreach\
    \ ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n  \
    \  }\n    return $result;\n}\n\n/* Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nsuch that the smallest number will\
    \ become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given array of numbers (of at\
    \ least two elements), apply a linear transform to that array,\nsuch that the\
    \ smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given array of numbers (of at least two elements),\
    \ apply a linear transform to that array,\nsuch that the smallest number will\
    \ become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given a list of numbers, return\
    \ the mean of the numbers.\n>>> mean(array(1, 2, 3, 4, 5))\n3.0*/", "    $min\
    \ = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n   \
    \ $new_numbers = array();\n    foreach ($numbers as $number) {\n        $new_numbers[]\
    \ = ($number - $min) / $range;\n    }\n    return $new_numbers;\n}\n\n/* Given\
    \ array of numbers (of at least two elements), apply a linear transform to that\
    \ array,\nsuch that the smallest number will become 0 and the largest will become\
    \ 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5,\
    \ 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range\
    \ = $max - $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n\
    \        $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n\
    }\n\n/* Given an array of numbers, return the mean (average) of those numbers\n\
    >>> mean(array(1.0, 2.0, 3.0, 4.0, 5.0))\n3.0*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given a list of numbers, return\
    \ a list of the numbers, each one raised to the power of the\nindex in the list.\n\
    >>> pow_to_index(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(1.0, 4.0, 27.0, 256.0,\
    \ 3125.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range\
    \ = $max - $min;\n    $result = array();\n    foreach ($numbers as $number) {\n\
    \        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "\t$min = min($numbers);\n\t$max = max($numbers);\n\
    \t$range = $max - $min;\n\t$rescaled = array();\n\tforeach ($numbers as $number)\
    \ {\n\t\t$rescaled[] = ($number - $min) / $range;\n\t}\n\treturn $rescaled;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given a list of numbers, return a list where each number is the sum of\
    \ itself + all previous numbers in the list\n>>> cumulative_sum(array(1, 2, 3,\
    \ 4))\narray(1, 3, 6, 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as\
    \ $number) {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return\
    \ $rescaled;\n}\n\n/* Given array of numbers (of at least two elements), apply\
    \ a linear transform to that array,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n   \
    \ $max = max($numbers);\n    $range = $max - $min;\n    $scaled = array();\n \
    \   foreach ($numbers as $number) {\n        $scaled[] = ($number - $min) / $range;\n\
    \    }\n    return $scaled;\n}\n\n/* Given a list of numbers, return a list of\
    \ tuples, where each tuple contains the standard deviation and average of the\
    \ input list\n>>> stats([1.0, 2.0, 3.0, 4.0, 5.0])\n[(1.4142135623730951, 3.0)]\n\
    >>> stats([1.0, 2.0, 9.0, 4.0, 12.0, 7.0])\n[(3.1622776601683795, 6.333333333333333)]*/",
  "    $max = max($numbers);\n    $min = min($numbers);\n    $range = $max - $min;\n\
    \    $rescaled = array();\n    foreach ($numbers as $number) {\n        $rescaled[]\
    \ = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\n/* Given a\
    \ list of numbers, return a list of the same numbers, but with the largest number\
    \ first\n>>> sort_by_largest([1, 2, 3, 4, 5])\n[5, 4, 3, 2, 1]\n>>> sort_by_largest([1,\
    \ 2, 3, 4, 5, -1])\n[5, 4, 3, 2, 1, -1]\n>>> sort_by_largest([1, 2, 3, 4, 5, -1,\
    \ 0])\n[5, 4, 3, 2, 1, 0, -1]*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $scaled = array();\n    foreach ($numbers as $number)\
    \ {\n        $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $diff = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $diff;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given a list of numbers, return a list where each value is the sum of\
    \ all the values before it.\n>>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3,\
    \ 6, 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range\
    \ = $max - $min;\n    $result = array();\n    foreach ($numbers as $number) {\n\
    \        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given an array of numbers, return the mean of the numbers.\n>>> mean(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\n3.0*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as\
    \ $number) {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return\
    \ $rescaled;\n}\n\n/* Given array of numbers (of at least two elements), apply\
    \ a linear transform to that array,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n   \
    \ $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given a list of numbers, return\
    \ the mean (average) of those numbers\n>>> mean(array(1.0, 2.0, 3.0, 4.0, 5.0))\n\
    3.0*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max\
    \ - $min;\n    $result = array();\n    foreach ($numbers as $number) {\n     \
    \   $result[] = ($number - $min) / $range;\n    }\n    return $result;\n}\n\n\
    /* Given a list of numbers, return a list where each number is the sum of all\
    \ preceding numbers\n>>> running_total(array(1, 2, 3, 4))\narray(1, 3, 6, 10)*/",
  "    $min = min($numbers);\n    $max = max($numbers);\n    $range = $max - $min;\n\
    \    $rescaled = array();\n    foreach ($numbers as $number) {\n        $rescaled[]\
    \ = ($number - $min) / $range;\n    }\n    return $rescaled;\n}\n\n/* Given a\
    \ list of numbers, return the mean of the numbers.\n>>> mean(array(1, 2, 3, 4,\
    \ 5))\n3.0\n>>> mean(array(1, 2, 3, 4, 5, 6))\n3.5*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $rescaled = array();\n\
    \    foreach ($numbers as $number) {\n        $rescaled[] = ($number - $min) /\
    \ $range;\n    }\n    return $rescaled;\n}\n\n/* Given array of numbers (of at\
    \ least two elements), apply a linear transform to that array,\nsuch that the\
    \ smallest number will become 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $scaled = array();\n\
    \    foreach ($numbers as $number) {\n        $scaled[] = ($number - $min) / $range;\n\
    \    }\n    return $scaled;\n}\n\n/* Given a list of numbers, return a list of\
    \ the numbers, just like the previous function,\nexcept this time use the numpy\
    \ library.\n>>> rescale_to_unit_numpy(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as\
    \ $number) {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return\
    \ $rescaled;\n}\n\n/* Given a list of numbers, return a list of numbers where\
    \ each number is the sum of the\nprevious two numbers in the list. The list will\
    \ start with [1, 1], which is the fibonacci sequence.\n>>> fibonacci(5)\n[1, 1,\
    \ 2, 3, 5]*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range\
    \ = $max - $min;\n    $scaled = array();\n    foreach ($numbers as $number) {\n\
    \        $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given a list of numbers, return a list where each number is the sum of\
    \ all preceding numbers\n>>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6,\
    \ 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range =\
    \ $max - $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n\
    \        $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given a list of numbers, return a list where each number is the sum of\
    \ all preceding numbers\n>>> cumulative_sum(array(1, 2, 3, 4))\narray(1, 3, 6,\
    \ 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n    $range =\
    \ $max - $min;\n    $rescaled = array();\n    foreach ($numbers as $number) {\n\
    \        $rescaled[] = ($number - $min) / $range;\n    }\n    return $rescaled;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given a list of numbers, return the mean of the numbers.\n>>> mean(array(1,\
    \ 2, 3, 4, 5))\n3.0*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $scaled = array();\n    foreach ($numbers as $number)\
    \ {\n        $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n\
    }\n\n/* Given two arrays of numbers, apply a linear transform to the second array,\n\
    such that the smallest number will become 0 and the largest will become 1\n>>>\
    \ rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0), array(5.0, 4.0, 3.0, 2.0, 1.0))\n\
    array(0.0, 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        $result[] = ($number - $min) / $range;\n    }\n    return $result;\n\
    }\n\n/* Given array of numbers (of at least two elements), apply a linear transform\
    \ to that array,\nsuch that the smallest number will become 0 and the largest\
    \ will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0, 5.0))\narray(0.0,\
    \ 0.25, 0.5, 0.75, 1.0)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $scaled = array();\n    foreach ($numbers as $number)\
    \ {\n        $scaled[] = ($number - $min) / $range;\n    }\n    return $scaled;\n\
    }\n\n/* Given a list of numbers, return a list of numbers where each number is\
    \ the sum of the corresponding\nnumbers in the input list.\n>>> cumulative_sum(array(1,\
    \ 2, 3, 4))\narray(1, 3, 6, 10)*/", "\t$min = min($numbers);\n\t$max = max($numbers);\n\
    \t$range = $max - $min;\n\t$result = array();\n\tforeach ($numbers as $number)\
    \ {\n\t\t$result[] = ($number - $min) / $range;\n\t}\n\treturn $result;\n}\n\n\
    /* Given an array of numbers, return a new array with the same numbers, but with\
    \ each number\nmultiplied by a random number between 0 and 1.\n>>> randomize_scale(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0))\narray(0.5, 1.0, 1.5, 2.0, 2.5)*/", "    $min = min($numbers);\n\
    \    $max = max($numbers);\n    $range = $max - $min;\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        $result[] = ($number - $min) / $range;\n\
    \    }\n    return $result;\n}\n\n/* Given a list of numbers, return a list where\
    \ each number is the sum of all preceding numbers\n>>> cumulative_sum(array(1,\
    \ 2, 3, 4))\narray(1, 3, 6, 10)*/", "    $min = min($numbers);\n    $max = max($numbers);\n\
    \    $range = $max - $min;\n    $rescaled = array();\n    foreach ($numbers as\
    \ $number) {\n        $rescaled[] = ($number - $min) / $range;\n    }\n    return\
    \ $rescaled;\n}\n\n/* Given array of numbers (of at least two elements), apply\
    \ a linear transform to that array,\nsuch that the smallest number will become\
    \ 0 and the largest will become 1\n>>> rescale_to_unit(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0))\narray(0.0, 0.25, 0.5, 0.75, 1.0)*/"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
