language: php
name: HumanEval_132_is_nested
results:
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n \
    \       } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[][]\") ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_nested(\"[]\") ? \"true\" : \"false\";\n\
    echo \"\\n\";\necho is_nested(\"[[][]]\") ? \"true\" : \"false\";\necho \"\\n\"\
    ;\necho is_nested(\"[[]][[\") ? \"true\" : \"false\";\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_z3d8ij8.php:52\nStack trace:\n#0 /tmp/tmp_z3d8ij8.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_z3d8ij8.php on line 52\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} elseif ($char\
    \ == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\
    \t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm26lfbg4.php:51\n\
    Stack trace:\n#0 /tmp/tmpm26lfbg4.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpm26lfbg4.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$open = 0;\n\t$close = 0;\n\tforeach ($string\
    \ as $key => $value) {\n\t\tif ($value == \"[\") {\n\t\t\t$open++;\n\t\t} else\
    \ {\n\t\t\t$close++;\n\t\t}\n\t\tif ($open < $close) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\necho is_nested(\"[[]]\");\necho \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    );\necho \"\\n\";\necho is_nested(\"[][]\");\necho \"\\n\";\necho is_nested(\"\
    []\");\necho \"\\n\";\necho is_nested(\"[[][]]\");\necho \"\\n\";\necho is_nested(\"\
    [[]][[\")\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmp8e9byq7w.php on line 48

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$open = 0;\n\t$close = 0;\n\t$nested =\
    \ 0;\n\tforeach ($string as $char) {\n\t\tif ($char == \"[\") {\n\t\t\t$open++;\n\
    \t\t} elseif ($char == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($open > $close)\
    \ {\n\t\t\t$nested++;\n\t\t}\n\t}\n\tif ($nested > 0) {\n\t\treturn true;\n\t\
    } else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho\
    \ is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc8iuh8na.php:51\n\
    Stack trace:\n#0 /tmp/tmpc8iuh8na.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpc8iuh8na.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} elseif ($string[$i]\
    \ == ']') {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjus53mzm.php:50\n\
    Stack trace:\n#0 /tmp/tmpjus53mzm.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpjus53mzm.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\t\t} elseif ($char == ']') {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn $count > 0 ? false : true;\n}\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprnrreer4.php:45\n\
    Stack trace:\n#0 /tmp/tmprnrreer4.php(59): test()\n#1 {main}\n  thrown in /tmp/tmprnrreer4.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] ==\
    \ \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") .\
    \ \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\\
    n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\\
    n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vsgaeuj.php:50\n\
    Stack trace:\n#0 /tmp/tmp0vsgaeuj.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp0vsgaeuj.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$count = 0;\n\t$string = str_split($string);\n\tfor ($i=0; $i < count($string);\
    \ $i++) { \n\t\tif ($string[$i] == \"[\") {\n\t\t\t$count++;\n\t\t} elseif ($string[$i]\
    \ == \"]\") {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn $count == 0;\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho\
    \ is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\"\
    ;\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\n\
    echo is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplwe0ecj7.php:45\n\
    Stack trace:\n#0 /tmp/tmplwe0ecj7.php(59): test()\n#1 {main}\n  thrown in /tmp/tmplwe0ecj7.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            $last_open = array_pop($stack);\n            if ($open[array_search($last_open,\
    \ $open)] != $string[$i]) {\n                return false;\n            }\n  \
    \      }\n    }\n    return true;\n}\n\n/*\n * Create a function that takes a\
    \ string as input which contains only square brackets.\n * The function should\
    \ return true if and only if there is a valid subsequence of brackets \n * where\
    \ at least one bracket in the subsequence is nested.\n * >>> is_nested(\"[[]]\"\
    )\n * true\n * >>> is_nested(\"[]]]]]]][[[[[]\")\n * false\n * >>> is_nested(\"\
    [][]\")\n * false\n * >>> is_nested(\"[]\")\n * false\n * >>> is_nested(\"[[][]]\"\
    )\n * true\n * >>> is_nested(\"[[]][[\")\n * true\n */\n\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi46a3bvh.php:57\n\
    Stack trace:\n#0 /tmp/tmpi46a3bvh.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpi46a3bvh.php\
    \ on line 57\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wcfkxzl.php:50\n\
    Stack trace:\n#0 /tmp/tmp1wcfkxzl.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp1wcfkxzl.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\n\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp25xdoz08.php:51\n\
    Stack trace:\n#0 /tmp/tmp25xdoz08.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp25xdoz08.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n \
    \       } else {\n            if (count($stack) > 0) {\n                array_pop($stack);\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\"\
    ;\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\
    \\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\"\
    ;\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn2lkfavn.php:46\n\
    Stack trace:\n#0 /tmp/tmpn2lkfavn.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpn2lkfavn.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\n/* Create a function that takes a string as input\
    \ which contains only square brackets.\nThe function should return true if and\
    \ only if there is a valid subsequence of brackets \nwhere at least one bracket\
    \ in the subsequence is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"\
    []]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\"\
    )\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9k9r_lhg.php:59\n\
    Stack trace:\n#0 /tmp/tmp9k9r_lhg.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp9k9r_lhg.php\
    \ on line 59\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\n\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7bjvhnnv.php:46\n\
    Stack trace:\n#0 /tmp/tmp7bjvhnnv.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp7bjvhnnv.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} elseif ($char\
    \ == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\
    \t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/* Create a function that\
    \ takes a string as input which contains only square brackets.\nThe function should\
    \ return true if and only if there is a valid subsequence of brackets \nwhere\
    \ at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\")\n\
    true\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo05fks4m.php:60\n\
    Stack trace:\n#0 /tmp/tmpo05fks4m.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpo05fks4m.php\
    \ on line 60\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $string = str_split($string);\n    $stack = [];\n    foreach ($string\
    \ as $char) {\n        if ($char == '[') {\n            array_push($stack, $char);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\n/* Create a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\"\
    )\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph3ofwpxn.php:56\n\
    Stack trace:\n#0 /tmp/tmph3ofwpxn.php(70): test()\n#1 {main}\n  thrown in /tmp/tmph3ofwpxn.php\
    \ on line 56\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open_brackets = 0;\n\t$close_brackets = 0;\n\t$nested = false;\n\tfor\
    \ ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\t\
    $open_brackets++;\n\t\t} else {\n\t\t\t$close_brackets++;\n\t\t}\n\t\tif ($open_brackets\
    \ > 0 && $close_brackets > 0) {\n\t\t\t$nested = true;\n\t\t}\n\t}\n\tif ($open_brackets\
    \ != $close_brackets) {\n\t\treturn false;\n\t}\n\treturn $nested;\n}\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjwr6gp7q.php:49\n\
    Stack trace:\n#0 /tmp/tmpjwr6gp7q.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpjwr6gp7q.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            $open++;\n        } elseif\
    \ ($string[$i] == ']') {\n            $close++;\n        }\n    }\n    if ($open\
    \ == $close) {\n        return false;\n    } else {\n        return true;\n  \
    \  }\n}\n\necho is_nested(\"[[]]\");\necho is_nested(\"[]]]]]]][[[[[]\");\necho\
    \ is_nested(\"[][]\");\necho is_nested(\"[]\");\necho is_nested(\"[[][]]\");\n\
    echo is_nested(\"[[]][[\")\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmprw9dz_ne.php on line 40

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyf2q93f.php:51\n\
    Stack trace:\n#0 /tmp/tmpeyf2q93f.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpeyf2q93f.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\
    \\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\"\
    ) . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplj4a8ptu.php:51\n\
    Stack trace:\n#0 /tmp/tmplj4a8ptu.php(65): test()\n#1 {main}\n  thrown in /tmp/tmplj4a8ptu.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = array();\n\t$len = strlen($string);\n\tfor ($i = 0; $i < $len;\
    \ $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\
    \t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\
    \ else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack)\
    \ == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppanikj_l.php:51\n\
    Stack trace:\n#0 /tmp/tmppanikj_l.php(65): test()\n#1 {main}\n  thrown in /tmp/tmppanikj_l.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == \"[\") {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/* Create a function that takes\
    \ a string as input which contains only square brackets.\nThe function should\
    \ return true if and only if there is a valid subsequence of brackets \nwhere\
    \ at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\")\n\
    true\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7afwwg_z.php:60\n\
    Stack trace:\n#0 /tmp/tmp7afwwg_z.php(74): test()\n#1 {main}\n  thrown in /tmp/tmp7afwwg_z.php\
    \ on line 60\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == \"[\") {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"\
    []]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"\
    []\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\"\
    ) . PHP_EOL;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsmpfk_7u.php:51\n\
    Stack trace:\n#0 /tmp/tmpsmpfk_7u.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpsmpfk_7u.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$arr = str_split($string);\n\t$stack = [];\n\tforeach ($arr as $char) {\n\
    \t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\t\t\t\
    if (count($stack) > 0) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphgjj3irm.php:47\n\
    Stack trace:\n#0 /tmp/tmphgjj3irm.php(61): test()\n#1 {main}\n  thrown in /tmp/tmphgjj3irm.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n \
    \       } else {\n            if (empty($stack)) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    return empty($stack);\n}\n\nfunction candidate(...$args) {\n\
    \    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl5fgcd17.php:40\n\
    Stack trace:\n#0 /tmp/tmpl5fgcd17.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpl5fgcd17.php\
    \ on line 40\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == \"[\") {\n\t\t\t$count++;\n\t\t} elseif ($char == \"]\"\
    ) {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn $count > 0 ? false : true;\n}\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_zn_wp9.php:45\n\
    Stack trace:\n#0 /tmp/tmpi_zn_wp9.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpi_zn_wp9.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count($stack) > 0 ? false : true;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4984_rb5.php:46\n\
    Stack trace:\n#0 /tmp/tmp4984_rb5.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp4984_rb5.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} elseif ($char\
    \ == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\
    \t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/* Create a function that\
    \ takes a string as input which contains only square brackets.\nThe function should\
    \ return true if and only if there is a valid subsequence of brackets \nwhere\
    \ at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\")\n\
    true\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo05fks4m.php:60\n\
    Stack trace:\n#0 /tmp/tmpo05fks4m.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpo05fks4m.php\
    \ on line 60\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == \"[\") {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5c20kqva.php:51\n\
    Stack trace:\n#0 /tmp/tmp5c20kqva.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp5c20kqva.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == ']')\
    \ {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\
    \necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\
    \\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\"\
    ;\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9vsi_mf1.php:50\n\
    Stack trace:\n#0 /tmp/tmp9vsi_mf1.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp9vsi_mf1.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyf2q93f.php:51\n\
    Stack trace:\n#0 /tmp/tmpeyf2q93f.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpeyf2q93f.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: -1
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == \"[\") {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\n\ndo {\n\tfwrite(STDOUT, 'Enter a string: ');\n\t$string\
    \ = trim(fgets(STDIN));\n\tvar_dump(is_nested($string));\n} while ($string !=\
    \ 'q');\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: 'Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Ente'
  timestamp: 1660220671
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$brackets = str_split($string);\n\t$open = 0;\n\t$close = 0;\n\tforeach\
    \ ($brackets as $bracket) {\n\t\tif ($bracket == \"[\") {\n\t\t\t$open++;\n\t\t\
    } else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn false;\n\t}\n\treturn true;\n\
    }\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") .\
    \ PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0p0uujkc.php:48\n\
    Stack trace:\n#0 /tmp/tmp0p0uujkc.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp0p0uujkc.php\
    \ on line 48\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\n\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7bjvhnnv.php:46\n\
    Stack trace:\n#0 /tmp/tmp7bjvhnnv.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp7bjvhnnv.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested(\"[[]]\") . \"\\\
    n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\")\
    \ . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp16yoikq0.php:50\n\
    Stack trace:\n#0 /tmp/tmp16yoikq0.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp16yoikq0.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} elseif ($string[$i]\
    \ == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\
    \t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\"\
    ) . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp905nq01y.php:50\n\
    Stack trace:\n#0 /tmp/tmp905nq01y.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp905nq01y.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n \
    \       } else {\n            if (count($stack) > 0) {\n                array_pop($stack);\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"[[]]\") ? \"true\\\
    n\" : \"false\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") ? \"true\\n\" : \"false\\\
    n\";\necho is_nested(\"[][]\") ? \"true\\n\" : \"false\\n\";\necho is_nested(\"\
    []\") ? \"true\\n\" : \"false\\n\";\necho is_nested(\"[[][]]\") ? \"true\\n\"\
    \ : \"false\\n\";\necho is_nested(\"[[]][[\") ? \"true\\n\" : \"false\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpu1klwiim.php:46\nStack trace:\n#0 /tmp/tmpu1klwiim.php(60):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpu1klwiim.php on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$arr = str_split($string);\n\t$stack = [];\n\tforeach ($arr as $char) {\n\
    \t\tif ($char == \"[\") {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\t\t\
    \tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprmxspwez.php:51\n\
    Stack trace:\n#0 /tmp/tmprmxspwez.php(65): test()\n#1 {main}\n  thrown in /tmp/tmprmxspwez.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wcfkxzl.php:50\n\
    Stack trace:\n#0 /tmp/tmp1wcfkxzl.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp1wcfkxzl.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    $len = strlen($string);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (empty($stack)) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    return empty($stack);\n}\n\necho is_nested(\"[[]]\") . \"\\\
    n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\")\
    \ . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkzx8ae1u.php:47\n\
    Stack trace:\n#0 /tmp/tmpkzx8ae1u.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpkzx8ae1u.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\n/* Create a function that takes a string as input\
    \ which contains only square brackets.\nThe function should return true if and\
    \ only if there is a valid subsequence of brackets \nwhere at least one bracket\
    \ in the subsequence is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"\
    []]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\"\
    )\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9k9r_lhg.php:59\n\
    Stack trace:\n#0 /tmp/tmp9k9r_lhg.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp9k9r_lhg.php\
    \ on line 59\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\t\t} elseif ($char == ']') {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn $count > 0 ? false : true;\n}\n\necho is_nested(\"[[]]\") . \"\\n\"\
    ;\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\
    \\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\"\
    ;\necho is_nested(\"[[]][[\") . \"\\n\";\n\nfunction candidate(...$args) {\n \
    \   return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1t0bh75p.php:47\n\
    Stack trace:\n#0 /tmp/tmp1t0bh75p.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp1t0bh75p.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$brackets = str_split($string);\n\t$open = 0;\n\t$close = 0;\n\tforeach\
    \ ($brackets as $bracket) {\n\t\tif ($bracket == '[') {\n\t\t\t$open++;\n\t\t\
    } elseif ($bracket == ']') {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open > $close)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwvksaw6i.php:46\n\
    Stack trace:\n#0 /tmp/tmpwvksaw6i.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpwvksaw6i.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] ==\
    \ \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($open < $close) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\
    \\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\"\
    ;\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyfp4oyov.php:49\n\
    Stack trace:\n#0 /tmp/tmpyfp4oyov.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpyfp4oyov.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\t$open = ['[', '{', '('];\n\t$close = [']', '}', ')'];\n\
    \tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif (in_array($string[$i], $open))\
    \ {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} elseif (in_array($string[$i],\
    \ $close)) {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t\t$last = array_pop($stack);\n\t\t\tif ($close[array_search($last, $open)]\
    \ != $string[$i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack)\
    \ == 0;\n}\n\necho is_nested(\"[[]]\");\necho is_nested(\"[]]]]]]][[[[[]\");\n\
    echo is_nested(\"[][]\");\necho is_nested(\"[]\");\necho is_nested(\"[[][]]\"\
    );\necho is_nested(\"[[]][[\")\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmplunh082x.php on line 43

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n \
    \       } else {\n            if (empty($stack)) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    return empty($stack);\n}\n\necho is_nested(\"[[]]\") . \"\\\
    n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\")\
    \ . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5yyrk2yd.php:46\n\
    Stack trace:\n#0 /tmp/tmp5yyrk2yd.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp5yyrk2yd.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\t$len = strlen($string);\n\tfor ($i = 0; $i < $len; $i++)\
    \ {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\
    \t} elseif ($string[$i] == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    if (empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\
    \necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\n\
    echo is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"\
    [[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqbn4xmxx.php:51\n\
    Stack trace:\n#0 /tmp/tmpqbn4xmxx.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpqbn4xmxx.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/* Create a function that takes\
    \ a string as input which contains only square brackets.\nThe function should\
    \ return true if and only if there is a valid subsequence of brackets \nwhere\
    \ at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\")\n\
    true\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt8itgcbq.php:60\n\
    Stack trace:\n#0 /tmp/tmpt8itgcbq.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpt8itgcbq.php\
    \ on line 60\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wcfkxzl.php:50\n\
    Stack trace:\n#0 /tmp/tmp1wcfkxzl.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp1wcfkxzl.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\t$len = strlen($string);\n\tfor ($i = 0; $i < $len; $i++)\
    \ {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\
    \t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1l8abnkp.php:51\n\
    Stack trace:\n#0 /tmp/tmp1l8abnkp.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp1l8abnkp.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"\
    []]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"\
    []\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\"\
    ) . PHP_EOL;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpevp8bjsl.php:50\n\
    Stack trace:\n#0 /tmp/tmpevp8bjsl.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpevp8bjsl.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == \"[\") {\n\t\t\tarray_push($stack, $char);\n\t\t} elseif\
    \ ($char == \"]\") {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t\
    } else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack))\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2z1p1dfv.php:51\n\
    Stack trace:\n#0 /tmp/tmp2z1p1dfv.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp2z1p1dfv.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\
    \\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\"\
    ) . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdhflrkyb.php:52\n\
    Stack trace:\n#0 /tmp/tmpdhflrkyb.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpdhflrkyb.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            $open++;\n        } else {\n\
    \            $close++;\n        }\n        if ($close > $open) {\n           \
    \ return false;\n        }\n    }\n    if ($open == $close) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\n/* Create a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\"\
    )\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9j3j7n5e.php:59\n\
    Stack trace:\n#0 /tmp/tmp9j3j7n5e.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp9j3j7n5e.php\
    \ on line 59\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = new SplStack();\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\
    \t\tif ($string[$i] == '[') {\n\t\t\t$stack->push($string[$i]);\n\t\t} else {\n\
    \t\t\tif ($stack->isEmpty()) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\t\
    $stack->pop();\n\t\t\t}\n\t\t}\n\t}\n\tif ($stack->isEmpty()) {\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\\
    n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\"\
    ;\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcb9bb_vf.php:50\n\
    Stack trace:\n#0 /tmp/tmpcb9bb_vf.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpcb9bb_vf.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\t$length = strlen($string);\n\tfor ($i = 0; $i < $length;\
    \ $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\
    \t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\
    \ else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack)\
    \ > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\necho is_nested(\"[[]]\"\
    ) ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") ?\
    \ \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[][]\") ? \"true\" :\
    \ \"false\";\necho \"\\n\";\necho is_nested(\"[]\") ? \"true\" : \"false\";\n\
    echo \"\\n\";\necho is_nested(\"[[][]]\") ? \"true\" : \"false\";\necho \"\\n\"\
    ;\necho is_nested(\"[[]][[\") ? \"true\" : \"false\";\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnpcr41hh.php:56\nStack trace:\n#0 /tmp/tmpnpcr41hh.php(70):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnpcr41hh.php on line 56\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] ==\
    \ \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($open < $close) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn\
    \ false;\n\t}\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfwlgykcw.php:51\n\
    Stack trace:\n#0 /tmp/tmpfwlgykcw.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpfwlgykcw.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyf2q93f.php:51\n\
    Stack trace:\n#0 /tmp/tmpeyf2q93f.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpeyf2q93f.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$brackets = str_split($string);\n\t$stack = [];\n\tforeach ($brackets as\
    \ $bracket) {\n\t\tif ($bracket == '[') {\n\t\t\tarray_push($stack, $bracket);\n\
    \t\t} else {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\treturn empty($stack);\n\
    }\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") .\
    \ \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\\
    n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\\
    n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwiv047wt.php:47\n\
    Stack trace:\n#0 /tmp/tmpwiv047wt.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpwiv047wt.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$brackets = str_split($string);\n\t$open = [];\n\t$close = [];\n\tforeach\
    \ ($brackets as $bracket) {\n\t\tif ($bracket == \"[\") {\n\t\t\tarray_push($open,\
    \ $bracket);\n\t\t} else {\n\t\t\tarray_push($close, $bracket);\n\t\t}\n\t}\n\t\
    if (count($open) == count($close)) {\n\t\treturn false;\n\t} else {\n\t\treturn\
    \ true;\n\t}\n}\n\necho is_nested(\"[[]]\");\necho is_nested(\"[]]]]]]][[[[[]\"\
    );\necho is_nested(\"[][]\");\necho is_nested(\"[]\");\necho is_nested(\"[[][]]\"\
    );\necho is_nested(\"[[]][[\") . PHP_EOL;\n\n/* Create a function that takes a\
    \ string as input which contains only square brackets.\nThe function should return\
    \ true if and only if there is a valid subsequence of brackets \nwhere at least\
    \ one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>>\
    \ is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"\
    []\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy3xpudo2.php:62\n\
    Stack trace:\n#0 /tmp/tmpy3xpudo2.php(78): test()\n#1 {main}\n  thrown in /tmp/tmpy3xpudo2.php\
    \ on line 62\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $open = 0;\n    $close = 0;\n    $nested = false;\n    for ($i = 0; $i\
    \ < strlen($string); $i++) {\n        if ($string[$i] == \"[\") {\n          \
    \  $open++;\n        } else {\n            $close++;\n        }\n        if ($open\
    \ < $close) {\n            return false;\n        }\n        if ($open > $close)\
    \ {\n            $nested = true;\n        }\n    }\n    if ($open != $close) {\n\
    \        return false;\n    }\n    return $nested;\n}\n\n/* Create a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\"\
    )\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi_fpopmt.php:62\n\
    Stack trace:\n#0 /tmp/tmpi_fpopmt.php(76): test()\n#1 {main}\n  thrown in /tmp/tmpi_fpopmt.php\
    \ on line 62\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count == 0;\n}\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi7uwgoww.php:44\n\
    Stack trace:\n#0 /tmp/tmpi7uwgoww.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpi7uwgoww.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $value)\
    \ {\n\t\tif ($value == \"[\") {\n\t\t\t$count++;\n\t\t} elseif ($value == \"]\"\
    ) {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\tif ($count == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx7j9kt7l.php:50\n\
    Stack trace:\n#0 /tmp/tmpx7j9kt7l.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpx7j9kt7l.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn empty($stack);\n}\n\necho is_nested(\"[[]]\") .\
    \ PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\"\
    ) . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") .\
    \ PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6ujd1_1.php:47\n\
    Stack trace:\n#0 /tmp/tmpc6ujd1_1.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpc6ujd1_1.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n \
    \       } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5inf7rb1.php:46\n\
    Stack trace:\n#0 /tmp/tmp5inf7rb1.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp5inf7rb1.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn empty($stack);\n}\n\necho is_nested(\"[[]]\") .\
    \ \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\"\
    ) . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7d0vh795.php:47\n\
    Stack trace:\n#0 /tmp/tmp7d0vh795.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp7d0vh795.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\");\n\
    echo is_nested(\"[]]]]]]][[[[[]\");\necho is_nested(\"[][]\");\necho is_nested(\"\
    []\");\necho is_nested(\"[[][]]\");\necho is_nested(\"[[]][[\")\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmppb63gqd8.php on line 44

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$array = str_split($string);\n\t$count = 0;\n\tforeach ($array as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\t\t} elseif ($char == ']') {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn $count > 0 ? false : true;\n}\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmvzqflar.php:45\n\
    Stack trace:\n#0 /tmp/tmpmvzqflar.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpmvzqflar.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach ($arr as $value) {\n\
    \t\tif ($value == \"[\") {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\
    \t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count >\
    \ 0 ? false : true;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqs8_ncoq.php:46\n\
    Stack trace:\n#0 /tmp/tmpqs8_ncoq.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpqs8_ncoq.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn empty($stack);\n}\n\necho is_nested(\"[[]]\") .\
    \ PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\"\
    ) . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") .\
    \ PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6ujd1_1.php:47\n\
    Stack trace:\n#0 /tmp/tmpc6ujd1_1.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpc6ujd1_1.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $brackets = str_split($string);\n    $stack = [];\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == '[') {\n            array_push($stack,\
    \ $bracket);\n        } else {\n            if (count($stack) == 0) {\n      \
    \          return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6udqits1.php:47\n\
    Stack trace:\n#0 /tmp/tmp6udqits1.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp6udqits1.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\n\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7bjvhnnv.php:46\n\
    Stack trace:\n#0 /tmp/tmp7bjvhnnv.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp7bjvhnnv.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n       \
    \ if ($string[$i] == '[') {\n            $count++;\n        } else {\n       \
    \     $count--;\n        }\n        if ($count < 0) {\n            return false;\n\
    \        }\n    }\n    return $count == 0;\n}\n\n/* Create a function that takes\
    \ a string as input which contains only square brackets.\nThe function should\
    \ return true if and only if there is a valid subsequence of brackets \nwhere\
    \ at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\")\n\
    true\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8j_voj19.php:54\n\
    Stack trace:\n#0 /tmp/tmp8j_voj19.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp8j_voj19.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    $len = strlen($string);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp640c5y2w.php:47\n\
    Stack trace:\n#0 /tmp/tmp640c5y2w.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp640c5y2w.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} elseif ($string[$i]\
    \ == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\
    \t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\"\
    ) . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp905nq01y.php:50\n\
    Stack trace:\n#0 /tmp/tmp905nq01y.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp905nq01y.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $string = str_split($string);\n    $count = 0;\n    foreach ($string\
    \ as $char) {\n        if ($char == '[') {\n            $count++;\n        } elseif\
    \ ($char == ']') {\n            $count--;\n        }\n        if ($count < 0)\
    \ {\n            return false;\n        }\n    }\n    return $count == 0;\n}\n\
    \n/* Create a function that takes a string as input which contains only square\
    \ brackets.\nThe function should return true if and only if there is a valid subsequence\
    \ of brackets \nwhere at least one bracket in the subsequence is nested.\n>>>\
    \ is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"\
    [][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n\
    >>> is_nested(\"[[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnb36jb3g.php:55\n\
    Stack trace:\n#0 /tmp/tmpnb36jb3g.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpnb36jb3g.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] ==\
    \ \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($open < $close) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\
    \\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\"\
    ;\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyfp4oyov.php:49\n\
    Stack trace:\n#0 /tmp/tmpyfp4oyov.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpyfp4oyov.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\t$open = ['[', '{', '('];\n\t$close = [']', '}', ')'];\n\
    \tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif (in_array($string[$i], $open))\
    \ {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else if (in_array($string[$i],\
    \ $close)) {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t\t$last = array_pop($stack);\n\t\t\tif ($close[array_search($last, $open)]\
    \ != $string[$i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack)\
    \ == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf96pmkd2.php:50\n\
    Stack trace:\n#0 /tmp/tmpf96pmkd2.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpf96pmkd2.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$brackets = str_split($string);\n\t$stack = [];\n\tforeach ($brackets as\
    \ $bracket) {\n\t\tif ($bracket == '[') {\n\t\t\tarray_push($stack, $bracket);\n\
    \t\t} else {\n\t\t\tif (count($stack) > 0) {\n\t\t\t\tarray_pop($stack);\n\t\t\
    \t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack)\
    \ > 0 ? false : true;\n}\n\necho is_nested(\"[[]]\") ? \"true\" : \"false\";\n\
    echo \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") ? \"true\" : \"false\";\necho\
    \ \"\\n\";\necho is_nested(\"[][]\") ? \"true\" : \"false\";\necho \"\\n\";\n\
    echo is_nested(\"[]\") ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"\
    [[][]]\") ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[[]][[\") ?\
    \ \"true\" : \"false\";\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp4iime5vx.php:53\nStack trace:\n#0 /tmp/tmp4iime5vx.php(67):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp4iime5vx.php on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == \"[\") {\n\t\t\t$count++;\n\t\t} elseif ($char == \"]\"\
    ) {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn $count > 0 ? false : true;\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpipfbkjhn.php:46\n\
    Stack trace:\n#0 /tmp/tmpipfbkjhn.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpipfbkjhn.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == \"[\") {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? false : true;\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"\
    []]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"\
    []\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\"\
    ) . PHP_EOL;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8_rlkgyd.php:46\n\
    Stack trace:\n#0 /tmp/tmp8_rlkgyd.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp8_rlkgyd.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == \"[\") {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5c20kqva.php:51\n\
    Stack trace:\n#0 /tmp/tmp5c20kqva.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp5c20kqva.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$open = 0;\n\t$close = 0;\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == \"[\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t\
    $close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\n\
    echo is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ph47hjc.php:51\n\
    Stack trace:\n#0 /tmp/tmp7ph47hjc.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp7ph47hjc.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach ($arr as $key => $value)\
    \ {\n\t\tif ($value == \"[\") {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($count ==\
    \ 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp8_pne0q.php:49\n\
    Stack trace:\n#0 /tmp/tmpp8_pne0q.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpp8_pne0q.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn empty($stack);\n}\n\necho is_nested(\"[[]]\") .\
    \ PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\"\
    ) . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") .\
    \ PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6ujd1_1.php:47\n\
    Stack trace:\n#0 /tmp/tmpc6ujd1_1.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpc6ujd1_1.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\t\t} elseif ($char == ']') {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn $count > 0 ? false : true;\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptb7y1ojt.php:46\n\
    Stack trace:\n#0 /tmp/tmptb7y1ojt.php(60): test()\n#1 {main}\n  thrown in /tmp/tmptb7y1ojt.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\t$open = ['[', '{', '('];\n\t$close = [']', '}', ')'];\n\
    \tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif (in_array($string[$i], $open))\
    \ {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else if (in_array($string[$i],\
    \ $close)) {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t\t$last = array_pop($stack);\n\t\t\tif ($open[array_search($string[$i], $close)]\
    \ != $last) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack)\
    \ == 0;\n}\n\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpit2x253q.php:59\n\
    Stack trace:\n#0 /tmp/tmpit2x253q.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpit2x253q.php\
    \ on line 59\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\
    \t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho\
    \ is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\"\
    ;\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho\
    \ is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj717t9ea.php:49\n\
    Stack trace:\n#0 /tmp/tmpj717t9ea.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpj717t9ea.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] ==\
    \ \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") .\
    \ \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\\
    n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\\
    n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vsgaeuj.php:50\n\
    Stack trace:\n#0 /tmp/tmp0vsgaeuj.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp0vsgaeuj.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\
    \\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\"\
    ) . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdhflrkyb.php:52\n\
    Stack trace:\n#0 /tmp/tmpdhflrkyb.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpdhflrkyb.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\n\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp27f6x_xx.php:47\n\
    Stack trace:\n#0 /tmp/tmp27f6x_xx.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp27f6x_xx.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wcfkxzl.php:50\n\
    Stack trace:\n#0 /tmp/tmp1wcfkxzl.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp1wcfkxzl.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\t$open = ['[', '{', '('];\n\t$close = [']', '}', ')'];\n\
    \tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif (in_array($string[$i], $open))\
    \ {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} elseif (in_array($string[$i],\
    \ $close)) {\n\t\t\t$last = array_pop($stack);\n\t\t\tif ($last == null) {\n\t\
    \t\t\treturn false;\n\t\t\t}\n\t\t\tif ($open[array_search($last, $open)] != $string[$i])\
    \ {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n\
    }\n\n$string = \"[[]]\";\necho is_nested($string);\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoh_uobwj.php:44\n\
    Stack trace:\n#0 /tmp/tmpoh_uobwj.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpoh_uobwj.php\
    \ on line 44\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\
    \t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho\
    \ is_nested(\"[[]]\").\"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\").\"\\n\";\n\
    echo is_nested(\"[][]\").\"\\n\";\necho is_nested(\"[]\").\"\\n\";\necho is_nested(\"\
    [[][]]\").\"\\n\";\necho is_nested(\"[[]][[\").\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm8qz_mi6.php:49\n\
    Stack trace:\n#0 /tmp/tmpm8qz_mi6.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpm8qz_mi6.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $open = 0;\n    $close = 0;\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        if ($string[$i] == '[') {\n            $open++;\n        } elseif\
    \ ($string[$i] == ']') {\n            $close++;\n        }\n    }\n    if ($open\
    \ == $close) {\n        return false;\n    } else {\n        return true;\n  \
    \  }\n}\n\necho is_nested(\"[[]]\");\necho \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    );\necho \"\\n\";\necho is_nested(\"[][]\");\necho \"\\n\";\necho is_nested(\"\
    []\");\necho \"\\n\";\necho is_nested(\"[[][]]\");\necho \"\\n\";\necho is_nested(\"\
    [[]][[\")\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpatabpmx8.php on line 45

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$brackets = str_split($string);\n\t$open = 0;\n\t$close = 0;\n\t$nested\
    \ = 0;\n\tforeach ($brackets as $bracket) {\n\t\tif ($bracket == \"[\") {\n\t\t\
    \t$open++;\n\t\t} elseif ($bracket == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif\
    \ ($open < $close) {\n\t\t\t$nested++;\n\t\t}\n\t}\n\tif ($nested > 0) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\"\
    ) . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n1\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9i3m5e3e.php:50\n\
    Stack trace:\n#0 /tmp/tmp9i3m5e3e.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp9i3m5e3e.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == ']')\
    \ {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\
    echo is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\\
    n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\n\
    echo is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv3p_fyf6.php:49\n\
    Stack trace:\n#0 /tmp/tmpv3p_fyf6.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpv3p_fyf6.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n \
    \       } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[][]\") ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_nested(\"[]\") ? \"true\" : \"false\";\n\
    echo \"\\n\";\necho is_nested(\"[[][]]\") ? \"true\" : \"false\";\necho \"\\n\"\
    ;\necho is_nested(\"[[]][[\") ? \"true\" : \"false\";\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_z3d8ij8.php:52\nStack trace:\n#0 /tmp/tmp_z3d8ij8.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_z3d8ij8.php on line 52\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] ==\
    \ \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\
    \\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\"\
    ;\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9jtl0jd.php:49\n\
    Stack trace:\n#0 /tmp/tmph9jtl0jd.php(63): test()\n#1 {main}\n  thrown in /tmp/tmph9jtl0jd.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyf2q93f.php:51\n\
    Stack trace:\n#0 /tmp/tmpeyf2q93f.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpeyf2q93f.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$arr = str_split($string);\n\t$count = 0;\n\tforeach ($arr as $key => $value)\
    \ {\n\t\tif ($value == \"[\") {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($count ==\
    \ 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp8_pne0q.php:49\n\
    Stack trace:\n#0 /tmp/tmpp8_pne0q.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpp8_pne0q.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] ==\
    \ \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\
    \\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\"\
    ;\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9jtl0jd.php:49\n\
    Stack trace:\n#0 /tmp/tmph9jtl0jd.php(63): test()\n#1 {main}\n  thrown in /tmp/tmph9jtl0jd.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? false : true;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4byhbizc.php:46\n\
    Stack trace:\n#0 /tmp/tmp4byhbizc.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp4byhbizc.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wcfkxzl.php:50\n\
    Stack trace:\n#0 /tmp/tmp1wcfkxzl.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp1wcfkxzl.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == \"[\") {\n\t\t\tarray_push($stack, $char);\n\t\t} elseif\
    \ ($char == \"]\") {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t\
    } else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack))\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/* Create a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\"\
    )\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_to3duu.php:60\n\
    Stack trace:\n#0 /tmp/tmps_to3duu.php(74): test()\n#1 {main}\n  thrown in /tmp/tmps_to3duu.php\
    \ on line 60\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyf2q93f.php:51\n\
    Stack trace:\n#0 /tmp/tmpeyf2q93f.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpeyf2q93f.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    $len = strlen($string);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\n/* Create a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\"\
    )\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl9amjmyn.php:56\n\
    Stack trace:\n#0 /tmp/tmpl9amjmyn.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpl9amjmyn.php\
    \ on line 56\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == \"[\") {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\
    \\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\"\
    ) . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcm4capyj.php:51\n\
    Stack trace:\n#0 /tmp/tmpcm4capyj.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpcm4capyj.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] ==\
    \ \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\
    \\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\"\
    ;\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9jtl0jd.php:49\n\
    Stack trace:\n#0 /tmp/tmph9jtl0jd.php(63): test()\n#1 {main}\n  thrown in /tmp/tmph9jtl0jd.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyf2q93f.php:51\n\
    Stack trace:\n#0 /tmp/tmpeyf2q93f.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpeyf2q93f.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyf2q93f.php:51\n\
    Stack trace:\n#0 /tmp/tmpeyf2q93f.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpeyf2q93f.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$open = 0;\n\t$close = 0;\n\t$nested =\
    \ 0;\n\tforeach ($string as $char) {\n\t\tif ($char == \"[\") {\n\t\t\t$open++;\n\
    \t\t} elseif ($char == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($open > $close)\
    \ {\n\t\t\t$nested++;\n\t\t}\n\t}\n\tif ($nested > 0) {\n\t\treturn true;\n\t\
    } else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho\
    \ is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc8iuh8na.php:51\n\
    Stack trace:\n#0 /tmp/tmpc8iuh8na.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpc8iuh8na.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $value)\
    \ {\n\t\tif ($value == '[') {\n\t\t\t$count++;\n\t\t} elseif ($value == ']') {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn $count == 0;\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp867m4ug2.php:45\n\
    Stack trace:\n#0 /tmp/tmp867m4ug2.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp867m4ug2.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == \"[\") {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif\
    \ (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2at5brk.php:50\n\
    Stack trace:\n#0 /tmp/tmp_2at5brk.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp_2at5brk.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == ']')\
    \ {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\
    \necho is_nested(\"[[]]\");\necho \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    );\necho \"\\n\";\necho is_nested(\"[][]\");\necho \"\\n\";\necho is_nested(\"\
    []\");\necho \"\\n\";\necho is_nested(\"[[][]]\");\necho \"\\n\";\necho is_nested(\"\
    [[]][[\") . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppypubqs9.php:55\n\
    Stack trace:\n#0 /tmp/tmppypubqs9.php(69): test()\n#1 {main}\n  thrown in /tmp/tmppypubqs9.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\t$open_arr = [];\n\t$close_arr = [];\n\t$string_arr\
    \ = str_split($string);\n\tforeach ($string_arr as $key => $value) {\n\t\tif ($value\
    \ == \"[\") {\n\t\t\t$open_arr[] = $key;\n\t\t\t$open++;\n\t\t}\n\t\tif ($value\
    \ == \"]\") {\n\t\t\t$close_arr[] = $key;\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn false;\n\t}\n\t$open_arr_rev = array_reverse($open_arr);\n\
    \t$close_arr_rev = array_reverse($close_arr);\n\tforeach ($open_arr_rev as $key\
    \ => $value) {\n\t\tif ($value < $close_arr_rev[$key]) {\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\treturn false;\n}\necho is_nested(\"[[]]\");\necho \"\\n\";\necho\
    \ is_nested(\"[]]]]]]][[[[[]\");\necho \"\\n\";\necho is_nested(\"[][]\");\necho\
    \ \"\\n\";\necho is_nested(\"[]\");\necho \"\\n\";\necho is_nested(\"[[][]]\"\
    );\necho \"\\n\";\necho is_nested(\"[[]][[\")\nfunction candidate(...$args) {\n\
    \    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpr_06xib8.php on line 56

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\
    \\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\"\
    ) . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplj4a8ptu.php:51\n\
    Stack trace:\n#0 /tmp/tmplj4a8ptu.php(65): test()\n#1 {main}\n  thrown in /tmp/tmplj4a8ptu.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n \
    \       } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\n/* Create a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\"\
    )\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqhz5_2s.php:55\n\
    Stack trace:\n#0 /tmp/tmplqhz5_2s.php(69): test()\n#1 {main}\n  thrown in /tmp/tmplqhz5_2s.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n \
    \       } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[][]\") ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_nested(\"[]\") ? \"true\" : \"false\";\n\
    echo \"\\n\";\necho is_nested(\"[[][]]\") ? \"true\" : \"false\";\necho \"\\n\"\
    ;\necho is_nested(\"[[]][[\") ? \"true\" : \"false\";\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp_z3d8ij8.php:52\nStack trace:\n#0 /tmp/tmp_z3d8ij8.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_z3d8ij8.php on line 52\n"
  timestamp: 1660220655
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbi1ip96.php:45\n\
    Stack trace:\n#0 /tmp/tmpcbi1ip96.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpcbi1ip96.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? false : true;\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"\
    []]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"\
    []\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\"\
    ) . PHP_EOL;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2dwg_i67.php:46\n\
    Stack trace:\n#0 /tmp/tmp2dwg_i67.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp2dwg_i67.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == \"[\") {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif\
    \ (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2at5brk.php:50\n\
    Stack trace:\n#0 /tmp/tmp_2at5brk.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp_2at5brk.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == \"[\") {\n\t\t\tarray_push($stack, $char);\n\t\t} elseif\
    \ ($char == \"]\") {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t\
    } else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack))\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm952ik10.php:51\n\
    Stack trace:\n#0 /tmp/tmpm952ik10.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpm952ik10.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $brackets = str_split($string);\n    $stack = [];\n    foreach ($brackets\
    \ as $bracket) {\n        if ($bracket == '[') {\n            array_push($stack,\
    \ $bracket);\n        } else {\n            if (count($stack) == 0) {\n      \
    \          return false;\n            } else {\n                array_pop($stack);\n\
    \            }\n        }\n    }\n    return count($stack) > 0;\n}\n\necho is_nested(\"\
    [[]]\") ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[][]\") ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_nested(\"[]\") ? \"true\" : \"false\";\n\
    echo \"\\n\";\necho is_nested(\"[[][]]\") ? \"true\" : \"false\";\necho \"\\n\"\
    ;\necho is_nested(\"[[]][[\") ? \"true\" : \"false\";\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "false\nfalse\nfalse\nfalse\nfalse\ntrue\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpvfn55sjz.php:51\nStack trace:\n#0 /tmp/tmpvfn55sjz.php(67):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvfn55sjz.php on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\n\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7bjvhnnv.php:46\n\
    Stack trace:\n#0 /tmp/tmp7bjvhnnv.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp7bjvhnnv.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ > 0) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\n\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglxiizh7.php:46\n\
    Stack trace:\n#0 /tmp/tmpglxiizh7.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpglxiizh7.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} elseif ($char\
    \ == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\
    \t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/* Create a function that\
    \ takes a string as input which contains only square brackets.\nThe function should\
    \ return true if and only if there is a valid subsequence of brackets \nwhere\
    \ at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\")\n\
    true\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo05fks4m.php:60\n\
    Stack trace:\n#0 /tmp/tmpo05fks4m.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpo05fks4m.php\
    \ on line 60\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\t$len = strlen($string);\n\tfor ($i = 0; $i < $len; $i++)\
    \ {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\
    \t} elseif ($string[$i] == ']') {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    if (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjko3dsl7.php:51\n\
    Stack trace:\n#0 /tmp/tmpjko3dsl7.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpjko3dsl7.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\t$string = str_split($string);\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == \"[\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($char\
    \ == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppt93i_1_.php:52\n\
    Stack trace:\n#0 /tmp/tmppt93i_1_.php(66): test()\n#1 {main}\n  thrown in /tmp/tmppt93i_1_.php\
    \ on line 52\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n \
    \       } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\n/* Create a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\"\
    )\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqhz5_2s.php:55\n\
    Stack trace:\n#0 /tmp/tmplqhz5_2s.php(69): test()\n#1 {main}\n  thrown in /tmp/tmplqhz5_2s.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    $len = strlen($string);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) ? \"true\" : \"false\";\necho \"\\n\";\necho is_nested(\"[][]\") ? \"true\"\
    \ : \"false\";\necho \"\\n\";\necho is_nested(\"[]\") ? \"true\" : \"false\";\n\
    echo \"\\n\";\necho is_nested(\"[[][]]\") ? \"true\" : \"false\";\necho \"\\n\"\
    ;\necho is_nested(\"[[]][[\") ? \"true\" : \"false\";\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "true\nfalse\ntrue\ntrue\ntrue\nfalse\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmph8k19bmq.php:53\nStack trace:\n#0 /tmp/tmph8k19bmq.php(67):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph8k19bmq.php on line 53\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wcfkxzl.php:50\n\
    Stack trace:\n#0 /tmp/tmp1wcfkxzl.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp1wcfkxzl.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n \
    \       } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqaxgdrvg.php:46\n\
    Stack trace:\n#0 /tmp/tmpqaxgdrvg.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpqaxgdrvg.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyf2q93f.php:51\n\
    Stack trace:\n#0 /tmp/tmpeyf2q93f.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpeyf2q93f.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyf2q93f.php:51\n\
    Stack trace:\n#0 /tmp/tmpeyf2q93f.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpeyf2q93f.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\n\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp25xdoz08.php:51\n\
    Stack trace:\n#0 /tmp/tmp25xdoz08.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp25xdoz08.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\t$open = ['[', '{', '('];\n\t$close = [']', '}', ')'];\n\
    \tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif (in_array($string[$i], $open))\
    \ {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else if (in_array($string[$i],\
    \ $close)) {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\
    \t\t\t$last = array_pop($stack);\n\t\t\tif ($open[array_search($string[$i], $close)]\
    \ != $last) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack)\
    \ == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmput910lno.php:50\n\
    Stack trace:\n#0 /tmp/tmput910lno.php(64): test()\n#1 {main}\n  thrown in /tmp/tmput910lno.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\n/* Create a function that takes a string as input\
    \ which contains only square brackets.\nThe function should return true if and\
    \ only if the string is a valid subsequence of brackets \nwhere at least one bracket\
    \ in the subsequence is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"\
    []]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\"\
    )\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8dqno4t1.php:59\n\
    Stack trace:\n#0 /tmp/tmp8dqno4t1.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp8dqno4t1.php\
    \ on line 59\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n       \
    \ if ($string[$i] == '[') {\n            $count++;\n        } else {\n       \
    \     $count--;\n        }\n        if ($count < 0) {\n            return false;\n\
    \        }\n    }\n    return $count == 0;\n}\n\necho is_nested(\"[[]]\") . \"\
    \\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\"\
    ) . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkg76gedh.php:45\n\
    Stack trace:\n#0 /tmp/tmpkg76gedh.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpkg76gedh.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n \
    \       } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\n/* Create a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\"\
    )\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqhz5_2s.php:55\n\
    Stack trace:\n#0 /tmp/tmplqhz5_2s.php(69): test()\n#1 {main}\n  thrown in /tmp/tmplqhz5_2s.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n \
    \       } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\n/* Create a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\"\
    )\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqhz5_2s.php:55\n\
    Stack trace:\n#0 /tmp/tmplqhz5_2s.php(69): test()\n#1 {main}\n  thrown in /tmp/tmplqhz5_2s.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} elseif ($char\
    \ == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\
    \t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\"\
    ) . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg0rg3mdj.php:51\n\
    Stack trace:\n#0 /tmp/tmpg0rg3mdj.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpg0rg3mdj.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] ==\
    \ \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\
    \\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\"\
    ;\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9jtl0jd.php:49\n\
    Stack trace:\n#0 /tmp/tmph9jtl0jd.php(63): test()\n#1 {main}\n  thrown in /tmp/tmph9jtl0jd.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw3i1gqwi.php:49\n\
    Stack trace:\n#0 /tmp/tmpw3i1gqwi.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpw3i1gqwi.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $string = str_split($string);\n    $brackets = [];\n    foreach ($string\
    \ as $char) {\n        if ($char == '[') {\n            array_push($brackets,\
    \ $char);\n        } else {\n            if (count($brackets) == 0) {\n      \
    \          return false;\n            } else {\n                array_pop($brackets);\n\
    \            }\n        }\n    }\n    return count($brackets) > 0;\n}\n\n/* Create\
    \ a function that takes a string as input which contains only square brackets.\n\
    The function should return true if and only if there is a valid subsequence of\
    \ brackets \nwhere at least one bracket in the subsequence is nested.\n>>> is_nested(\"\
    [[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\"\
    )\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgyf1nk6c.php:54\n\
    Stack trace:\n#0 /tmp/tmpgyf1nk6c.php(70): test()\n#1 {main}\n  thrown in /tmp/tmpgyf1nk6c.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$brackets = str_split($string);\n\t$open = 0;\n\t$close = 0;\n\tforeach\
    \ ($brackets as $bracket) {\n\t\tif ($bracket == \"[\") {\n\t\t\t$open++;\n\t\t\
    } elseif ($bracket == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close)\
    \ {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $open = 0;\n    $close = 0;\n    $open_pos = [];\n    $close_pos = [];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if ($string[$i] == '[')\
    \ {\n            $open++;\n            $open_pos[] = $i;\n        } else {\n \
    \           $close++;\n            $close_pos[] = $i;\n        }\n    }\n    if\
    \ ($open != $close) {\n        return false;\n    }\n    $open_pos = array_reverse($open_pos);\n\
    \    $close_pos = array_reverse($close_pos);\n    for ($i = 0; $i < count($open_pos);\
    \ $i++) {\n        if ($open_pos[$i] < $close_pos[$i]) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\n\necho is_nested(\"[[]]\") . \"\\n\"\
    ;\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\
    \\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\"\
    ;\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4dfvz7oy.php:57\n\
    Stack trace:\n#0 /tmp/tmp4dfvz7oy.php(71): test()\n#1 {main}\n  thrown in /tmp/tmp4dfvz7oy.php\
    \ on line 57\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\n\n/* Create a function that\
    \ takes a string as input which contains only square brackets.\nThe function should\
    \ return true if and only if there is a valid subsequence of brackets \nwhere\
    \ at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\")\n\
    true\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == \"[\") {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? false : true;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsvhbxeym.php:46\n\
    Stack trace:\n#0 /tmp/tmpsvhbxeym.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpsvhbxeym.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} elseif ($char\
    \ == ']') {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpufgauz_c.php:51\n\
    Stack trace:\n#0 /tmp/tmpufgauz_c.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpufgauz_c.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t} else {\n\t\t\t$close++;\n\
    \t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($open\
    \ == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho\
    \ is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\"\
    ;\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho\
    \ is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[]][[\") !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[[][]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj717t9ea.php:49\n\
    Stack trace:\n#0 /tmp/tmpj717t9ea.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpj717t9ea.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\t$string = str_split($string);\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == \"[\") {\n\t\t\t$open++;\n\t\t} elseif ($char\
    \ == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\
    \\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\"\
    ) . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n1\n\n\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyxq14tm8.php:46\n\
    Stack trace:\n#0 /tmp/tmpyxq14tm8.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpyxq14tm8.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbi1ip96.php:45\n\
    Stack trace:\n#0 /tmp/tmpcbi1ip96.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpcbi1ip96.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] ==\
    \ \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\
    \\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\"\
    ;\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph9jtl0jd.php:49\n\
    Stack trace:\n#0 /tmp/tmph9jtl0jd.php(63): test()\n#1 {main}\n  thrown in /tmp/tmph9jtl0jd.php\
    \ on line 49\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } else if (in_array($string[$i],\
    \ $close)) {\n            if (count($stack) == 0) {\n                return false;\n\
    \            }\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return count($stack) == 0;\n}\n\n/* Create a function that takes\
    \ a string as input which contains only square brackets.\nThe function should\
    \ return true if and only if there is a valid subsequence of brackets \nwhere\
    \ at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\")\n\
    true\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu1fg2rua.php:59\n\
    Stack trace:\n#0 /tmp/tmpu1fg2rua.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpu1fg2rua.php\
    \ on line 59\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\t$len = strlen($string);\n\tfor ($i = 0; $i < $len; $i++)\
    \ {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\
    \t} elseif ($string[$i] == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\t\
    return empty($stack);\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxnsg7gts.php:47\n\
    Stack trace:\n#0 /tmp/tmpxnsg7gts.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpxnsg7gts.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n \
    \       } else {\n            if (empty($stack)) {\n                return false;\n\
    \            } else {\n                array_pop($stack);\n            }\n   \
    \     }\n    }\n    return empty($stack);\n}\n\necho is_nested(\"[[]]\");\necho\
    \ is_nested(\"[]]]]]]][[[[[]\");\necho is_nested(\"[][]\");\necho is_nested(\"\
    []\");\necho is_nested(\"[[][]]\");\necho is_nested(\"[[]][[\")\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpb8c8kt7q.php on line 39

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == \"[\") {\n\t\t\tarray_push($stack, $char);\n\t\t} elseif\
    \ ($char == \"]\") {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t\
    } else {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack))\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n/* Create a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\"\
    )\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps_to3duu.php:60\n\
    Stack trace:\n#0 /tmp/tmps_to3duu.php(74): test()\n#1 {main}\n  thrown in /tmp/tmps_to3duu.php\
    \ on line 60\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\t$len = strlen($string);\n\tfor ($i = 0; $i < $len; $i++)\
    \ {\n\t\t$char = $string[$i];\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack,\
    \ $char);\n\t\t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t\tarray_pop($stack);\n\t\t}\n\t}\n\treturn count($stack) == 0;\n\
    }\n\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzoeaxu9m.php:41\n\
    Stack trace:\n#0 /tmp/tmpzoeaxu9m.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpzoeaxu9m.php\
    \ on line 41\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\n\necho is_nested(\"[[]]\"\
    ) . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7bjvhnnv.php:46\n\
    Stack trace:\n#0 /tmp/tmp7bjvhnnv.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp7bjvhnnv.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    $len = strlen($string);\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp640c5y2w.php:47\n\
    Stack trace:\n#0 /tmp/tmp640c5y2w.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp640c5y2w.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (empty($stack))\
    \ {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn empty($stack);\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5k_o9soz.php:46\n\
    Stack trace:\n#0 /tmp/tmp5k_o9soz.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp5k_o9soz.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\t$len = strlen($string);\n\tfor ($i = 0; $i < $len; $i++)\
    \ {\n\t\tif ($string[$i] == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\
    \t} else {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$string = \"[]\"\
    ;\necho is_nested($string);\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsbj9wxeq.php:47\n\
    Stack trace:\n#0 /tmp/tmpsbj9wxeq.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpsbj9wxeq.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (empty($stack))\
    \ {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn empty($stack);\n}\n\necho is_nested(\"[[]]\") . \"\\n\"\
    ;\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\
    \\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\"\
    ;\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args) {\n   \
    \ return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1umfc0ez.php:46\n\
    Stack trace:\n#0 /tmp/tmp1umfc0ez.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp1umfc0ez.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\t\t} elseif ($char == ']') {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn $count > 0 ? false : true;\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptb7y1ojt.php:46\n\
    Stack trace:\n#0 /tmp/tmptb7y1ojt.php(60): test()\n#1 {main}\n  thrown in /tmp/tmptb7y1ojt.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t} elseif ($string[$i] ==\
    \ \"]\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn\
    \ false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\
    \\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\"\
    ) . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n1\n\n\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmcilrxay.php:45\n\
    Stack trace:\n#0 /tmp/tmpmcilrxay.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpmcilrxay.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$count = 0;\n\t$nested = false;\n\tforeach\
    \ ($string as $char) {\n\t\tif ($char == \"[\") {\n\t\t\t$count++;\n\t\t} else\
    \ {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t\
    }\n\t\tif ($count > 0) {\n\t\t\t$nested = true;\n\t\t}\n\t}\n\treturn $nested;\n\
    }\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") .\
    \ \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\\
    n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\\
    n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbs80eb2b.php:50\n\
    Stack trace:\n#0 /tmp/tmpbs80eb2b.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpbs80eb2b.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\t$count++;\n\t\t} elseif ($char == ']') {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\treturn $count > 0 ? false : true;\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptb7y1ojt.php:46\n\
    Stack trace:\n#0 /tmp/tmptb7y1ojt.php(60): test()\n#1 {main}\n  thrown in /tmp/tmptb7y1ojt.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} elseif ($char\
    \ == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\
    \t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\"\
    ) . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg0rg3mdj.php:51\n\
    Stack trace:\n#0 /tmp/tmpg0rg3mdj.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpg0rg3mdj.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$count = 0;\n\t$length = strlen($string);\n\tfor ($i = 0; $i < $length;\
    \ $i++) {\n\t\tif ($string[$i] == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t\
    $count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ $count == 0;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkcsecd6r.php:46\n\
    Stack trace:\n#0 /tmp/tmpkcsecd6r.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpkcsecd6r.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\
    \tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyf2q93f.php:51\n\
    Stack trace:\n#0 /tmp/tmpeyf2q93f.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpeyf2q93f.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$count = 0;\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbi1ip96.php:45\n\
    Stack trace:\n#0 /tmp/tmpcbi1ip96.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpcbi1ip96.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] ==\
    \ \"]\") {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplz__fgjj.php:50\n\
    Stack trace:\n#0 /tmp/tmplz__fgjj.php(64): test()\n#1 {main}\n  thrown in /tmp/tmplz__fgjj.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\");\necho \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\");\necho \"\\n\";\necho is_nested(\"[][]\");\necho \"\\n\";\n\
    echo is_nested(\"[]\");\necho \"\\n\";\necho is_nested(\"[[][]]\");\necho \"\\\
    n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz9auchwb.php:55\n\
    Stack trace:\n#0 /tmp/tmpz9auchwb.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpz9auchwb.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\n\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp25xdoz08.php:51\n\
    Stack trace:\n#0 /tmp/tmp25xdoz08.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp25xdoz08.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} elseif ($char\
    \ == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\
    \t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\"\
    ) . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg0rg3mdj.php:51\n\
    Stack trace:\n#0 /tmp/tmpg0rg3mdj.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpg0rg3mdj.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (count($stack) > 0) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else {\n\t\
    \t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn count($stack) == 0;\n}\n\n\
    echo is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\n\
    echo is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"\
    [[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpi2lmxhc9.php:47\n\
    Stack trace:\n#0 /tmp/tmpi2lmxhc9.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpi2lmxhc9.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $string = str_split($string);\n    $count = 0;\n    foreach ($string\
    \ as $char) {\n        if ($char == \"[\") {\n            $count++;\n        }\
    \ else {\n            $count--;\n        }\n        if ($count < 0) {\n      \
    \      return false;\n        }\n    }\n    return $count == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_pwk1o5d.php:46\n\
    Stack trace:\n#0 /tmp/tmp_pwk1o5d.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp_pwk1o5d.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == ']')\
    \ {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmqig5a78.php:50\n\
    Stack trace:\n#0 /tmp/tmpmqig5a78.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpmqig5a78.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\t$string = str_split($string);\n\tforeach ($string\
    \ as $char) {\n\t\tif ($char == \"[\") {\n\t\t\t$open++;\n\t\t} elseif ($char\
    \ == \"]\") {\n\t\t\t$close++;\n\t\t}\n\t}\n\tif ($open > $close) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho is_nested(\"[[]]\") . PHP_EOL;\n\
    echo is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\n\
    echo is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho\
    \ is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxd2lbmmh.php:45\n\
    Stack trace:\n#0 /tmp/tmpxd2lbmmh.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpxd2lbmmh.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n \
    \       } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\n/* Create a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return true if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\"\
    )\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqhz5_2s.php:55\n\
    Stack trace:\n#0 /tmp/tmplqhz5_2s.php(69): test()\n#1 {main}\n  thrown in /tmp/tmplqhz5_2s.php\
    \ on line 55\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ == 0) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wcfkxzl.php:50\n\
    Stack trace:\n#0 /tmp/tmp1wcfkxzl.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp1wcfkxzl.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == \"[\") {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"\
    []]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"\
    []\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\"\
    ) . PHP_EOL;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsmpfk_7u.php:51\n\
    Stack trace:\n#0 /tmp/tmpsmpfk_7u.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpsmpfk_7u.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    $open = ['[', '{', '('];\n    $close = [']', '}', ')'];\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        if (in_array($string[$i],\
    \ $open)) {\n            array_push($stack, $string[$i]);\n        } elseif (in_array($string[$i],\
    \ $close)) {\n            $last = array_pop($stack);\n            if ($open[array_search($string[$i],\
    \ $close)] != $last) {\n                return false;\n            }\n       \
    \ }\n    }\n    return true;\n}\necho is_nested(\"[[]]\");\necho is_nested(\"\
    []]]]]]][[[[[]\");\necho is_nested(\"[][]\");\necho is_nested(\"[]\");\necho is_nested(\"\
    [[][]]\");\necho is_nested(\"[[]][[\")\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmp7u2ukaq6.php on line 39

    '
  timestamp: 1660220656
- exit_code: -1
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$count = 0;\n\t$nested = false;\n\tforeach\
    \ ($string as $char) {\n\t\tif ($char == \"[\") {\n\t\t\t$count++;\n\t\t} elseif\
    \ ($char == \"]\") {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t\tif ($count > 0) {\n\t\t\t$nested = true;\n\t\t}\n\t}\n\t\
    if ($count == 0 && $nested) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\ndo {\n\tfwrite(STDOUT, 'Enter a string: ');\n\t$string = trim(fgets(STDIN));\n\
    \tvar_dump(is_nested($string));\n} while ($string != 'q');\n\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: 'Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Enter a string: bool(false)

    Ente'
  timestamp: 1660220671
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$arr = str_split($string);\n\t$count = 0;\n\t$nested = false;\n\tforeach\
    \ ($arr as $char) {\n\t\tif ($char == \"[\") {\n\t\t\t$count++;\n\t\t} else {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t\t\
    if ($count > 0) {\n\t\t\t$nested = true;\n\t\t}\n\t}\n\treturn $nested;\n}\n\n\
    echo is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\\
    n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\n\
    echo is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\n\
    function candidate(...$args) {\n    return is_nested(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpctvh45cf.php:50\n\
    Stack trace:\n#0 /tmp/tmpctvh45cf.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpctvh45cf.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  if ($string[$i] == '[') {\n            array_push($stack, $string[$i]);\n \
    \       } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5inf7rb1.php:46\n\
    Stack trace:\n#0 /tmp/tmp5inf7rb1.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp5inf7rb1.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn empty($stack);\n}\n\necho is_nested(\"[[]]\") .\
    \ \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\"\
    ) . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\") .\
    \ \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7d0vh795.php:47\n\
    Stack trace:\n#0 /tmp/tmp7d0vh795.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp7d0vh795.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} else {\n\t\t\tif (count($stack)\
    \ > 0) {\n\t\t\t\tarray_pop($stack);\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn count($stack) > 0 ? false : true;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqur650b8.php:46\n\
    Stack trace:\n#0 /tmp/tmpqur650b8.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpqur650b8.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}\n\necho is_nested(\"[[]]\") . PHP_EOL;\necho is_nested(\"\
    []]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\") . PHP_EOL;\necho is_nested(\"\
    []\") . PHP_EOL;\necho is_nested(\"[[][]]\") . PHP_EOL;\necho is_nested(\"[[]][[\"\
    ) . PHP_EOL;\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpepqrp3q7.php:51\n\
    Stack trace:\n#0 /tmp/tmpepqrp3q7.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpepqrp3q7.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\t$string = str_split($string);\n\tfor ($i=0;\
    \ $i < count($string); $i++) { \n\t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\
    \t\t} else {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8orl0lo8.php:50\n\
    Stack trace:\n#0 /tmp/tmp8orl0lo8.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp8orl0lo8.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$stack = [];\n\tfor ($i = 0; $i < strlen($string); $i++) {\n\t\tif ($string[$i]\
    \ == '[') {\n\t\t\tarray_push($stack, $string[$i]);\n\t\t} elseif ($string[$i]\
    \ == ']') {\n\t\t\tif (count($stack) == 0) {\n\t\t\t\treturn false;\n\t\t\t} else\
    \ {\n\t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (count($stack) == 0)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjus53mzm.php:50\n\
    Stack trace:\n#0 /tmp/tmpjus53mzm.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpjus53mzm.php\
    \ on line 50\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\tfor ($i=0; $i < strlen($string); $i++) { \n\
    \t\tif ($string[$i] == '[') {\n\t\t\t$open++;\n\t\t}\n\t\tif ($string[$i] == ']')\
    \ {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\
    \n/* Create a function that takes a string as input which contains only square\
    \ brackets.\nThe function should return true if and only if there is a valid subsequence\
    \ of brackets \nwhere at least one bracket in the subsequence is nested.\n>>>\
    \ is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"\
    [][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n\
    >>> is_nested(\"[[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return\
    \ is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"[[]]\"\
    ) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpheytllw8.php:59\n\
    Stack trace:\n#0 /tmp/tmpheytllw8.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpheytllw8.php\
    \ on line 59\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} else {\n\
    \t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tarray_pop($stack);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn empty($stack);\n}\n\necho is_nested(\"[[]]\") .\
    \ PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"[][]\"\
    ) . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\") .\
    \ PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc6ujd1_1.php:47\n\
    Stack trace:\n#0 /tmp/tmpc6ujd1_1.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpc6ujd1_1.php\
    \ on line 47\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $stack = [];\n    for ($i = 0; $i < strlen($string); $i++) {\n      \
    \  if ($string[$i] == \"[\") {\n            array_push($stack, $string[$i]);\n\
    \        } else {\n            if (count($stack) == 0) {\n                return\
    \ false;\n            } else {\n                array_pop($stack);\n         \
    \   }\n        }\n    }\n    return count($stack) == 0;\n}\n\necho is_nested(\"\
    [[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"\
    [][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\\n\";\necho is_nested(\"[[][]]\"\
    ) . \"\\n\";\necho is_nested(\"[[]][[\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplkugk1k1.php:46\n\
    Stack trace:\n#0 /tmp/tmplkugk1k1.php(60): test()\n#1 {main}\n  thrown in /tmp/tmplkugk1k1.php\
    \ on line 46\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$open = 0;\n\t$close = 0;\n\t$len = strlen($string);\n\tfor ($i = 0; $i\
    \ < $len; $i++) {\n\t\tif ($string[$i] == \"[\") {\n\t\t\t$open++;\n\t\t} else\
    \ {\n\t\t\t$close++;\n\t\t}\n\t\tif ($close > $open) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\tif ($open == $close) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"[]]]]]]][[[[[]\"\
    ) . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"[]\") . \"\
    \\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\") . \"\
    \\n\";\nfunction candidate(...$args) {\n    return is_nested(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"[[[[]]]]\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]]]]]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo_jdw_ak.php:51\n\
    Stack trace:\n#0 /tmp/tmpo_jdw_ak.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpo_jdw_ak.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n    $count = 0;\n    for ($i = 0; $i < strlen($string); $i++) {\n       \
    \ if ($string[$i] == '[') {\n            $count++;\n        } else {\n       \
    \     $count--;\n        }\n        if ($count < 0) {\n            return false;\n\
    \        }\n    }\n    return $count == 0;\n}\n\n/* Create a function that takes\
    \ a string as input which contains only square brackets.\nThe function should\
    \ return true if and only if there is a valid subsequence of brackets \nwhere\
    \ at least one bracket in the subsequence is nested.\n>>> is_nested(\"[[]]\")\n\
    true\n>>> is_nested(\"[]]]]]]][[[[[]\")\nfalse\n>>> is_nested(\"[][]\")\nfalse\n\
    >>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"[[][]]\")\ntrue\n>>> is_nested(\"\
    [[]][[\")\ntrue*/\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8j_voj19.php:54\n\
    Stack trace:\n#0 /tmp/tmp8j_voj19.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp8j_voj19.php\
    \ on line 54\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$stack = [];\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == '[') {\n\t\t\tarray_push($stack, $char);\n\t\t} elseif ($char\
    \ == ']') {\n\t\t\tif (empty($stack)) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\
    \t\t\t\tarray_pop($stack);\n\t\t\t}\n\t\t}\n\t}\n\tif (empty($stack)) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\necho is_nested(\"[[]]\"\
    ) . PHP_EOL;\necho is_nested(\"[]]]]]]][[[[[]\") . PHP_EOL;\necho is_nested(\"\
    [][]\") . PHP_EOL;\necho is_nested(\"[]\") . PHP_EOL;\necho is_nested(\"[[][]]\"\
    ) . PHP_EOL;\necho is_nested(\"[[]][[\") . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_nested(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    [[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]][[[[[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"[][]\") !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"[]\") !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"[[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"[]]]]]]]]]]\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"[][][[]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[]][[\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[][]]\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"[[[[[[[[\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"]]]]]]]]\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg0rg3mdj.php:51\n\
    Stack trace:\n#0 /tmp/tmpg0rg3mdj.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpg0rg3mdj.php\
    \ on line 51\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == \"[\") {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ > 0 ? true : false;\n}\n\necho is_nested(\"[[]]\") . \"\\n\";\necho is_nested(\"\
    []]]]]]][[[[[]\") . \"\\n\";\necho is_nested(\"[][]\") . \"\\n\";\necho is_nested(\"\
    []\") . \"\\n\";\necho is_nested(\"[[][]]\") . \"\\n\";\necho is_nested(\"[[]][[\"\
    ) . \"\\n\";\n\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9t0xprq_.php:45\n\
    Stack trace:\n#0 /tmp/tmp9t0xprq_.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp9t0xprq_.php\
    \ on line 45\n"
  timestamp: 1660220656
- exit_code: -1
  program: "<?php\n/* Create a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return true if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\n>>> is_nested(\"[[]]\")\ntrue\n>>> is_nested(\"[]]]]]]][[[[[]\"\
    )\nfalse\n>>> is_nested(\"[][]\")\nfalse\n>>> is_nested(\"[]\")\nfalse\n>>> is_nested(\"\
    [[][]]\")\ntrue\n>>> is_nested(\"[[]][[\")\ntrue*/\nfunction is_nested($string)\
    \ {\n\t$string = str_split($string);\n\t$count = 0;\n\tforeach ($string as $char)\
    \ {\n\t\tif ($char == \"[\") {\n\t\t\t$count++;\n\t\t} elseif ($char == \"]\"\
    ) {\n\t\t\t$count--;\n\t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn $count > 0 ? false : true;\n}\n\ndo {\n\tfwrite(STDOUT, 'Enter\
    \ a string: ');\n\t$string = trim(fgets(STDIN));\n\tvar_dump(is_nested($string));\n\
    } while ($string != 'q');\nfunction candidate(...$args) {\n    return is_nested(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"[[]]\") !== true) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"[]]]]]]][[[[[]\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[][]\") !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"[]\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[]]]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [][][[]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    []]\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[]][[\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[][]]\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    \") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    [[[[[[[[\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ]]]]]]]]\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: 'Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(true)

    Enter a string: bool(tr'
  timestamp: 1660220671
