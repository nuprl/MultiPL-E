language: php
name: HumanEval_70_strange_sort_list
results:
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $result = array();\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    unset($lst[array_search($min, $lst)]);\n    unset($lst[array_search($max,\
    \ $lst)]);\n    $lst = array_values($lst);\n    if (!empty($lst)) {\n        $result\
    \ = array_merge($result, strange_sort_list($lst));\n    }\n    return $result;\n\
    }\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\necho \"\\n\"\
    ;\n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\necho \"\\n\"\
    ;\n$lst = array();\nprint_r(strange_sort_list($lst));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Array\n(\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\n\nArray\n\
    (\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdzmvlc0_.php:45\n\
    Stack trace:\n#0 /tmp/tmpdzmvlc0_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpdzmvlc0_.php\
    \ on line 45\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (count($lst) == 0) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result = array();\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    $lst = array_values($lst);\n\
    \    $result = array_merge($result, strange_sort_list($lst));\n    return $result;\n\
    }\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\n$lst = array(5,\
    \ 5, 5, 5);\nprint_r(strange_sort_list($lst));\n\n$lst = array();\nprint_r(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpllrgjeyz.php:41\nStack trace:\n#0 /tmp/tmpllrgjeyz.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpllrgjeyz.php on line 41\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $min_index\
    \ = array_search($min, $lst);\n    $max_index = array_search($max, $lst);\n  \
    \  $result[] = $min;\n    $result[] = $max;\n    unset($lst[$min_index]);\n  \
    \  unset($lst[$max_index]);\n    $lst = array_values($lst);\n    if (count($lst)\
    \ > 0) {\n        $result = array_merge($result, strange_sort_list($lst));\n \
    \   }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\necho \"<pre>\";\nprint_r(strange_sort_list($lst));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdlu3s4dy.php:39\n\
    Stack trace:\n#0 /tmp/tmpdlu3s4dy.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpdlu3s4dy.php\
    \ on line 39\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    $i = 0;\n    while ($i\
    \ < $count) {\n        $min = min($lst);\n        $max = max($lst);\n        if\
    \ ($i % 2 == 0) {\n            $result[] = $min;\n            $key = array_search($min,\
    \ $lst);\n            unset($lst[$key]);\n        } else {\n            $result[]\
    \ = $max;\n            $key = array_search($max, $lst);\n            unset($lst[$key]);\n\
    \        }\n        $i++;\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i\
    \ <= $j) {\n        $result[] = $lst[$i];\n        if ($i != $j) {\n         \
    \   $result[] = $lst[$j];\n        }\n        $i++;\n        $j--;\n    }\n  \
    \  return $result;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp6feimflq.php:38\nStack\
    \ trace:\n#0 /tmp/tmp6feimflq.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp6feimflq.php\
    \ on line 38\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while(count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = min($lst);\n            $key = array_search(min($lst), $lst);\n          \
    \  unset($lst[$key]);\n        } else {\n            $result[] = max($lst);\n\
    \            $key = array_search(max($lst), $lst);\n            unset($lst[$key]);\n\
    \        }\n        $i++;\n    }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\n\
    print_r(strange_sort_list($lst));\nfunction candidate(...$args) {\n    return\
    \ strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at\
    \ least one element in /tmp/tmpu8nluk_u.php:14\nStack trace:\n#0 /tmp/tmpu8nluk_u.php(14):\
    \ min(Array)\n#1 /tmp/tmpu8nluk_u.php(35): strange_sort_list(Array)\n#2 /tmp/tmpu8nluk_u.php(44):\
    \ candidate(Array)\n#3 /tmp/tmpu8nluk_u.php(50): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpu8nluk_u.php on line 14\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return [];\n    }\n    sort($lst);\n    $result\
    \ = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 2 == 0)\
    \ {\n            $result[] = $lst[$i];\n        } else {\n            array_unshift($result,\
    \ $lst[$i]);\n        }\n    }\n    return $result;\n}\n\n/*\n * Given a string,\
    \ return a string where for every char in the original,\n * there are two chars.\n\
    \ * Examples:\n * >>> double_char('The')\n * 'TThhee'\n * >>> double_char('AAbb')\n\
    \ * 'AAAAbbbb'\n * >>> double_char('Hi-There')\n * 'HHii--TThheerree'\n */\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt09rrx72.php:44\n\
    Stack trace:\n#0 /tmp/tmpt09rrx72.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpt09rrx72.php\
    \ on line 44\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    if ($count == 0) {\n  \
    \      return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $result[] = $min;\n    $result[] = $max;\n    $count -= 2;\n    while ($count\
    \ > 0) {\n        $min = min($lst);\n        $max = max($lst);\n        $result[]\
    \ = $min;\n        $result[] = $max;\n        $count -= 2;\n    }\n    return\
    \ $result;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 1\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpnlir4k6p.php:40\nStack\
    \ trace:\n#0 /tmp/tmpnlir4k6p.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpnlir4k6p.php\
    \ on line 40\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $result = [];\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, [$min, $max]);\n    while (!empty($lst))\
    \ {\n        $min = min($lst);\n        $max = max($lst);\n        $result[] =\
    \ $min;\n        $result[] = $max;\n        $lst = array_diff($lst, [$min, $max]);\n\
    \    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\n\
    print_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpoqkquwf0.php:41\nStack trace:\n#0 /tmp/tmpoqkquwf0.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpoqkquwf0.php on line 41\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) return [];\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $res = [];\n    $res[] = $min;\n    $res[] = $max;\n    $lst = array_diff($lst,\
    \ [$min, $max]);\n    if (empty($lst)) return $res;\n    $min = min($lst);\n \
    \   $max = max($lst);\n    $res[] = $min;\n    $res[] = $max;\n    $lst = array_diff($lst,\
    \ [$min, $max]);\n    if (empty($lst)) return $res;\n    $min = min($lst);\n \
    \   $max = max($lst);\n    $res[] = $min;\n    $res[] = $max;\n    $lst = array_diff($lst,\
    \ [$min, $max]);\n    if (empty($lst)) return $res;\n    $min = min($lst);\n \
    \   $max = max($lst);\n    $res[] = $min;\n    $res[] = $max;\n    $lst = array_diff($lst,\
    \ [$min, $max]);\n    if (empty($lst)) return $res;\n    $min = min($lst);\n \
    \   $max = max($lst);\n    $res[] = $min;\n    $res[] = $max;\n    $lst = array_diff($lst,\
    \ [$min, $max]);\n    if (empty($lst)) return $res;\n    $min = min($lst);\n \
    \   $max = max($lst);\n    $res[] = $min;\n    $res[] = $max;\n    $lst = array_diff($lst,\
    \ [$min, $max]);\n    if (empty($lst)) return $res;\n    $min = min($lst);\n \
    \   $max = max($lst);\n    $res[] = $min;\n    $res[] = $max;\n    $lst = array_diff($lst,\
    \ [$min, $max]);\n    if (empty($lst)) return $\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmppsydlvuc.php on line 57

    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $key = array_search($min, $lst);\n            unset($lst[$key]);\n\
    \            $min = min($lst);\n        } else {\n            $result[] = $max;\n\
    \            $key = array_search($max, $lst);\n            unset($lst[$key]);\n\
    \            $max = max($lst);\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmplnl7rryg.php:27\nStack trace:\n#0 /tmp/tmplnl7rryg.php(27):\
    \ max(Array)\n#1 /tmp/tmplnl7rryg.php(34): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmplnl7rryg.php on line 27\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $min_index = array_search($min, $lst);\n    $max_index\
    \ = array_search($max, $lst);\n    $lst[$min_index] = $max;\n    $lst[$max_index]\
    \ = $min;\n    return $lst;\n}\n\n/* Given array of integers, return array in\
    \ strange order.\nStrange sorting, is when you start with the minimum value,\n\
    then maximum of the remaining integers, then minimum and so on.\nExamples:\n>>>\
    \ strange_sort_list(array(1, 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5,\
    \ 5, 5, 5))\narray(5, 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_csfghva.php:40\n\
    Stack trace:\n#0 /tmp/tmp_csfghva.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp_csfghva.php\
    \ on line 40\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $result = [];\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, [$min, $max]);\n    while (!empty($lst))\
    \ {\n        $min = min($lst);\n        $max = max($lst);\n        $result[] =\
    \ $min;\n        $result[] = $max;\n        $lst = array_diff($lst, [$min, $max]);\n\
    \    }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = [5, 5, 5, 5];\nprint_r(strange_sort_list($lst));\necho '<br>';\n\
    $lst = [];\nprint_r(strange_sort_list($lst));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n<br>Array\n\
    (\n    [0] => 5\n    [1] => 5\n)\n<br>Array\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpyb8vz8qj.php:46\nStack trace:\n#0 /tmp/tmpyb8vz8qj.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyb8vz8qj.php on line 46\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $min_index\
    \ = array_search($min, $lst);\n    $max_index = array_search($max, $lst);\n  \
    \  $result[] = $min;\n    $result[] = $max;\n    unset($lst[$min_index]);\n  \
    \  unset($lst[$max_index]);\n    $lst = array_values($lst);\n    while (count($lst)\
    \ > 0) {\n        $min = min($lst);\n        $max = max($lst);\n        $min_index\
    \ = array_search($min, $lst);\n        $max_index = array_search($max, $lst);\n\
    \        $result[] = $min;\n        $result[] = $max;\n        unset($lst[$min_index]);\n\
    \        unset($lst[$max_index]);\n        $lst = array_values($lst);\n    }\n\
    \    return $result;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n    [4] => 5\n    [5]\
    \ => 5\n    [6] => 5\n    [7] => 5\n)\n\nFatal error: Uncaught ValueError: min():\
    \ Argument #1 ($value) must contain at least one element in /tmp/tmphanl7oh2.php:14\n\
    Stack trace:\n#0 /tmp/tmphanl7oh2.php(14): min(Array)\n#1 /tmp/tmphanl7oh2.php(39):\
    \ strange_sort_list(Array)\n#2 {main}\n  thrown in /tmp/tmphanl7oh2.php on line\
    \ 14\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n    $lst_len\
    \ = count($lst);\n    $result = [];\n    $i = 0;\n    $j = $lst_len - 1;\n   \
    \ while ($i <= $j) {\n        $result[] = $lst[$i];\n        if ($i != $j) {\n\
    \            $result[] = $lst[$j];\n        }\n        $i++;\n        $j--;\n\
    \    }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = [5, 5, 5, 5];\nprint_r(strange_sort_list($lst));\necho '<br>';\n\
    $lst = [];\nprint_r(strange_sort_list($lst));\necho '<br>';\n$lst = [1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10];\nprint_r(strange_sort_list($lst));\necho '<br>';\n$lst\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = [1, 2, 3, 4, 5\nfunction candidate(...$args) {\n    return\
    \ strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmpf720o_35.php
    on line 55

    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    if ($count == 0) {\n  \
    \      return $result;\n    }\n    sort($lst);\n    $i = 0;\n    $j = $count -\
    \ 1;\n    while ($i < $j) {\n        $result[] = $lst[$i];\n        $result[]\
    \ = $lst[$j];\n        $i++;\n        $j--;\n    }\n    if ($i == $j) {\n    \
    \    $result[] = $lst[$i];\n    }\n    return $result;\n}\n\n$lst = [1, 2, 3,\
    \ 4];\nprint_r(strange_sort_list($lst));\necho '<br>';\n$lst = [5, 5, 5, 5];\n\
    print_r(strange_sort_list($lst));\necho '<br>';\n$lst = [];\nprint_r(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n<br>Array\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\n<br>Array\n(\n)\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (count($lst) == 0) {\n        return array();\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $new_lst = array();\n    $new_lst[] = $min;\n    $new_lst[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    while (count($lst)\
    \ > 0) {\n        $min = min($lst);\n        $max = max($lst);\n        $new_lst[]\
    \ = $min;\n        $new_lst[] = $max;\n        $lst = array_diff($lst, array($min,\
    \ $max));\n    }\n    return $new_lst;\n}\n\n/* Given a string, return a string\
    \ where for every char in the original,\nthere are two chars.\nExamples:\n>>>\
    \ double_char('The')\n'TThhee'\n>>> double_char('AAbb')\n'AAAAbbbb'\n>>> double_char('Hi-There')\n\
    'HHii--TThheerree'*/\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpttk34d6z.php:47\n\
    Stack trace:\n#0 /tmp/tmpttk34d6z.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpttk34d6z.php\
    \ on line 47\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (count($lst) == 0) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $res = array();\n    $res[] = $min;\n    $res[] =\
    \ $max;\n    $lst = array_diff($lst, array($min, $max));\n    while (count($lst)\
    \ > 0) {\n        $min = min($lst);\n        $max = max($lst);\n        $res[]\
    \ = $min;\n        $res[] = $max;\n        $lst = array_diff($lst, array($min,\
    \ $max));\n    }\n    return $res;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array();\nprint_r(strange_sort_list($lst));\necho \"<br>\"\
    ;\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);\n\
    print\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp9tnyq_ys.php on line 55

    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) return $lst;\n    $result = array();\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result[] = $min;\n    $result[] = $max;\n    $lst\
    \ = array_diff($lst, array($min, $max));\n    while (!empty($lst)) {\n       \
    \ $min = min($lst);\n        $max = max($lst);\n        $result[] = $min;\n  \
    \      $result[] = $max;\n        $lst = array_diff($lst, array($min, $max));\n\
    \    }\n    return $result;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    \n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\n\n$lst = array();\n\
    print_r(strange_sort_list($lst));\nfunction candidate(...$args) {\n    return\
    \ strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpk5_ri6op.php:44\nStack trace:\n#0 /tmp/tmpk5_ri6op.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk5_ri6op.php on line 44\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    sort($lst);\n  \
    \  $result = array();\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <=\
    \ $j) {\n        $result[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n\
    \            $result[] = $lst[$j];\n            $j--;\n        }\n    }\n    return\
    \ $result;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array();\nprint_r(strange_sort_list($lst));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n<br>Array\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\n<br>Array\n(\n)\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $lst = array_diff($lst, [$min]);\n            $min = min($lst);\n\
    \        } else {\n            $result[] = $max;\n            $lst = array_diff($lst,\
    \ [$max]);\n            $max = max($lst);\n        }\n        $i++;\n    }\n \
    \   return $result;\n}\n\n/*\n * Given a string, return a string where for every\
    \ char in the original,\n * there are two chars.\n * Examples:\n * >>> double_char('The')\n\
    \ * 'TThhee'\n * >>> double_char('AAbb')\n * 'AAAAbbbb'\n * >>> double_char('Hi-There')\n\
    \ * 'HHii--TThheerree'\n */\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpgd9d99t9.php:25\nStack trace:\n#0 /tmp/tmpgd9d99t9.php(25):\
    \ max(Array)\n#1 /tmp/tmpgd9d99t9.php(44): strange_sort_list(Array)\n#2 /tmp/tmpgd9d99t9.php(48):\
    \ candidate(Array)\n#3 /tmp/tmpgd9d99t9.php(59): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpgd9d99t9.php on line 25\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return [];\n    }\n    sort($lst);\n    $result\
    \ = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j) {\n    \
    \    $result[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n         \
    \   $result[] = $lst[$j];\n            $j--;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $len = count($lst);\n    $i = 0;\n    while ($i <\
    \ $len) {\n        $min = min($lst);\n        $max = max($lst);\n        $result[]\
    \ = $min;\n        $result[] = $max;\n        $i += 2;\n        $key = array_search($min,\
    \ $lst);\n        unset($lst[$key]);\n        $key = array_search($max, $lst);\n\
    \        unset($lst[$key]);\n    }\n    return $result;\n}\n\n$lst = [1, 2, 3,\
    \ 4];\nprint_r(strange_sort_list($lst));\nfunction candidate(...$args) {\n   \
    \ return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp9twvjkju.php:38\nStack\
    \ trace:\n#0 /tmp/tmp9twvjkju.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp9twvjkju.php\
    \ on line 38\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return [];\n    }\n    sort($lst);\n    $res\
    \ = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j) {\n    \
    \    $res[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n            $res[]\
    \ = $lst[$j];\n            $j--;\n        }\n    }\n    return $res;\n}\n\n$lst\
    \ = [1, 2, 3, 4];\nvar_dump(strange_sort_list($lst));\n$lst = [5, 5, 5, 5];\n\
    var_dump(strange_sort_list($lst));\n$lst = [];\nvar_dump(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(4)\n  [2]=>\n  int(2)\n \
    \ [3]=>\n  int(3)\n}\narray(4) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n  [2]=>\n\
    \  int(5)\n  [3]=>\n  int(5)\n}\narray(0) {\n}\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result = array();\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    while (!empty($lst))\
    \ {\n        $min = min($lst);\n        $max = max($lst);\n        $result[] =\
    \ $min;\n        $result[] = $max;\n        $lst = array_diff($lst, array($min,\
    \ $max));\n    }\n    return $result;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array();\nprint_r(strange_sort_list($lst));\necho \"<br>\"\
    ;\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);\n\
    print_r(strange_\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpbiifbgj0.php
    on line 55

    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $count\
    \ = count($lst);\n    $i = 0;\n    while ($i < $count) {\n        $result[] =\
    \ $min;\n        $result[] = $max;\n        $i++;\n    }\n    return $result;\n\
    }\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 1\n    [3] => 4\n    [4]\
    \ => 1\n    [5] => 4\n    [6] => 1\n    [7] => 4\n)\nArray\n(\n    [0] => 5\n\
    \    [1] => 5\n    [2] => 5\n    [3] => 5\n    [4] => 5\n    [5] => 5\n    [6]\
    \ => 5\n    [7] => 5\n)\n\nFatal error: Uncaught ValueError: min(): Argument #1\
    \ ($value) must contain at least one element in /tmp/tmp0j4s5f__.php:14\nStack\
    \ trace:\n#0 /tmp/tmp0j4s5f__.php(14): min(Array)\n#1 /tmp/tmp0j4s5f__.php(28):\
    \ strange_sort_list(Array)\n#2 {main}\n  thrown in /tmp/tmp0j4s5f__.php on line\
    \ 14\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    $i = 0;\n    $j = 0;\n\
    \    while ($i < $count) {\n        $min = min($lst);\n        $result[$i] = $min;\n\
    \        $i++;\n        $max = max($lst);\n        $result[$i] = $max;\n     \
    \   $i++;\n        $j++;\n    }\n    return $result;\n}\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 1\n    [3] => 4\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpf_l3uwwo.php:36\nStack\
    \ trace:\n#0 /tmp/tmpf_l3uwwo.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpf_l3uwwo.php\
    \ on line 36\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $result[]\
    \ = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, [$min, $max]);\n\
    \    while (count($lst) > 0) {\n        $min = min($lst);\n        $max = max($lst);\n\
    \        $result[] = $min;\n        $result[] = $max;\n        $lst = array_diff($lst,\
    \ [$min, $max]);\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n)\n\nFatal error: Uncaught ValueError: min(): Argument\
    \ #1 ($value) must contain at least one element in /tmp/tmp_rhrlqi0.php:14\nStack\
    \ trace:\n#0 /tmp/tmp_rhrlqi0.php(14): min(Array)\n#1 /tmp/tmp_rhrlqi0.php(31):\
    \ strange_sort_list(Array)\n#2 {main}\n  thrown in /tmp/tmp_rhrlqi0.php on line\
    \ 14\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (count($lst) == 0) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $res = array();\n    $res[] = $min;\n    $res[] =\
    \ $max;\n    $lst = array_diff($lst, array($min, $max));\n    $lst = array_values($lst);\n\
    \    $lst = strange_sort_list($lst);\n    $res = array_merge($res, $lst);\n  \
    \  return $res;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp1pvgorkv.php:36\nStack\
    \ trace:\n#0 /tmp/tmp1pvgorkv.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp1pvgorkv.php\
    \ on line 36\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (count($lst) == 0) {\n        return $lst;\n    }\n    $result = array();\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    $lst = array_values($lst);\n\
    \    $lst = array_merge($result, $lst);\n    return $lst;\n}\n\n/* Given array\
    \ of integers, return array in strange order.\nStrange sorting, is when you start\
    \ with the minimum value,\nthen maximum of the remaining integers, then minimum\
    \ and so on.\nExamples:\n>>> strange_sort_list(array(1, 2, 3, 4))\narray(1, 4,\
    \ 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5, 5, 5, 5)\n>>> strange_sort_list(array())\n\
    array()*/\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxwfmkk5a.php:43\n\
    Stack trace:\n#0 /tmp/tmpxwfmkk5a.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpxwfmkk5a.php\
    \ on line 43\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $result = [];\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, [$min, $max]);\n    while (!empty($lst))\
    \ {\n        $min = min($lst);\n        $max = max($lst);\n        $result[] =\
    \ $min;\n        $result[] = $max;\n        $lst = array_diff($lst, [$min, $max]);\n\
    \    }\n    return $result;\n}\n\n/* Given array of integers, return array in\
    \ strange order.\nStrange sorting, is when you start with the minimum value,\n\
    then maximum of the remaining integers, then minimum and so on.\nExamples:\n>>>\
    \ strange_sort_list(array(1, 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5,\
    \ 5, 5, 5))\narray(5, 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsh9wohsg.php:48\n\
    Stack trace:\n#0 /tmp/tmpsh9wohsg.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpsh9wohsg.php\
    \ on line 48\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    sort($lst);\n  \
    \  $result = array();\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <=\
    \ $j) {\n        $result[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n\
    \            $result[] = $lst[$j];\n            $j--;\n        }\n    }\n    return\
    \ $result;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array();\nprint_r(strange_sort_list($lst));\necho \"<br>\"\
    ;\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n<br>Array\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\n<br>Array\n(\n)\n\
    <br>"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result = array();\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    $lst = array_values($lst);\n\
    \    while (count($lst) > 0) {\n        $min = min($lst);\n        $max = max($lst);\n\
    \        $result[] = $min;\n        $result[] = $max;\n        $lst = array_diff($lst,\
    \ array($min, $max));\n        $lst = array_values($lst);\n    }\n    return $result;\n\
    }\n\n$lst = array(1, 2, 3, 4);\n$lst = strange_sort_list($lst);\nprint_r($lst);\n\
    echo '<br>';\n$lst = array(5, 5, 5, 5);\n$lst = strange_sort_list($lst);\nprint_r($lst);\n\
    echo '<br>';\n$lst = array();\n$lst = strange_sort_list($lst);\nprint_r($lst);\n\
    echo '<br>';\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n$lst = strange_sort_list($lst);\n\
    print_r($lst);\necho '<br>';\n$lst = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\n$lst\
    \ = strange_sort_list($lst);\nprint_r($lst);\necho '<br>';\n$lst = array(1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n$lst = strange_sort_list($lst);\n\
    print_r($lst);\necho '<br>';\n$lst = array\nfunction candidate(...$args) {\n \
    \   return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "(" in /tmp/tmprje8o90_.php
    on line 59

    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return [];\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result = [];\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, [$min, $max]);\n    $lst = array_values($lst);\n\
    \    while (count($lst) > 0) {\n        $min = min($lst);\n        $max = max($lst);\n\
    \        $result[] = $min;\n        $result[] = $max;\n        $lst = array_diff($lst,\
    \ [$min, $max]);\n        $lst = array_values($lst);\n    }\n    return $result;\n\
    }\n\nvar_dump(strange_sort_list([1, 2, 3, 4]));\nvar_dump(strange_sort_list([5,\
    \ 5, 5, 5]));\nvar_dump(strange_sort_list([]));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(4)\n  [2]=>\n  int(2)\n \
    \ [3]=>\n  int(3)\n}\narray(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(0)\
    \ {\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp598up0qd.php:43\n\
    Stack trace:\n#0 /tmp/tmp598up0qd.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp598up0qd.php\
    \ on line 43\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    if ($count == 0) {\n  \
    \      return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $result[] = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, [$min,\
    \ $max]);\n    $count = count($lst);\n    $i = 0;\n    while ($count > 0) {\n\
    \        $min = min($lst);\n        $max = max($lst);\n        if ($i % 2 == 0)\
    \ {\n            $result[] = $min;\n            $lst = array_diff($lst, [$min]);\n\
    \        } else {\n            $result[] = $max;\n            $lst = array_diff($lst,\
    \ [$max]);\n        }\n        $count = count($lst);\n        $i++;\n    }\n \
    \   return $result;\n}\n\n$arr = [1, 2, 3, 4];\nvar_dump(strange_sort_list($arr));\n\
    $arr = [5, 5, 5, 5];\nvar_dump(strange_sort_list($arr));\n$arr = [];\nvar_dump(strange_sort_list($arr));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(4)\n  [2]=>\n  int(2)\n \
    \ [3]=>\n  int(3)\n}\narray(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(0)\
    \ {\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ii8n1cy.php:56\n\
    Stack trace:\n#0 /tmp/tmp3ii8n1cy.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp3ii8n1cy.php\
    \ on line 56\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $arr = [];\n    $len = count($lst);\n    $i = 0;\n    while ($i < $len)\
    \ {\n        $arr[] = min($lst);\n        $arr[] = max($lst);\n        $i += 2;\n\
    \    }\n    return $arr;\n}\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 1\n    [3] => 4\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpx5le659a.php:31\nStack\
    \ trace:\n#0 /tmp/tmpx5le659a.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpx5le659a.php\
    \ on line 31\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $result = array();\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    while (!empty($lst))\
    \ {\n        $min = min($lst);\n        $max = max($lst);\n        $result[] =\
    \ $min;\n        $result[] = $max;\n        $lst = array_diff($lst, array($min,\
    \ $max));\n    }\n    return $result;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array();\nprint_r(strange_sort_list($lst));\necho \"<br>\"\
    ;\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20);\nprint_r(strange_sort_list($lst));\necho \"<br>\";\n$lst\
    \ = array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1);\nprint_r(strange_sort_list($lst));\necho \"<br>\";\n$lst = array(1, 2, 3,\
    \ 4,\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp92mgifx8.php on line 54

    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while(count($lst) > 0) {\n        if($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $key = array_search($min, $lst);\n            unset($lst[$key]);\n\
    \            $min = min($lst);\n        } else {\n            $result[] = $max;\n\
    \            $key = array_search($max, $lst);\n            unset($lst[$key]);\n\
    \            $max = max($lst);\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpoe176jt4.php:27\nStack trace:\n#0 /tmp/tmpoe176jt4.php(27):\
    \ max(Array)\n#1 /tmp/tmpoe176jt4.php(35): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpoe176jt4.php on line 27\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $res = [];\n    $len = count($lst);\n    if ($len == 0) {\n        return\
    \ $res;\n    }\n    sort($lst);\n    $i = 0;\n    $j = $len - 1;\n    while ($i\
    \ < $j) {\n        $res[] = $lst[$i];\n        $res[] = $lst[$j];\n        $i++;\n\
    \        $j--;\n    }\n    if ($i == $j) {\n        $res[] = $lst[$i];\n    }\n\
    \    return $res;\n}\n\n$lst = [1, 2, 3, 4];\n$res = strange_sort_list($lst);\n\
    print_r($res);\necho \"\\n\";\n$lst = [5, 5, 5, 5];\n$res = strange_sort_list($lst);\n\
    print_r($res);\necho \"\\n\";\n$lst = [];\n$res = strange_sort_list($lst);\nprint_r($res);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Array\n(\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\n\nArray\n\
    (\n)\n\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $result = array();\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    while (!empty($lst))\
    \ {\n        $min = min($lst);\n        $max = max($lst);\n        $result[] =\
    \ $min;\n        $result[] = $max;\n        $lst = array_diff($lst, array($min,\
    \ $max));\n    }\n    return $result;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    \n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\n\n$lst = array();\n\
    print_r(strange_sort_list($lst));\nfunction candidate(...$args) {\n    return\
    \ strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpurr70mml.php:46\nStack trace:\n#0 /tmp/tmpurr70mml.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpurr70mml.php on line 46\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) return $lst;\n    sort($lst);\n    $result = [];\n \
    \   $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j) {\n        $result[]\
    \ = $lst[$i];\n        if ($i != $j) $result[] = $lst[$j];\n        $i++;\n  \
    \      $j--;\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1, 2,\
    \ 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $result = array();\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    while (!empty($lst))\
    \ {\n        $min = min($lst);\n        $max = max($lst);\n        $result[] =\
    \ $min;\n        $result[] = $max;\n        $lst = array_diff($lst, array($min,\
    \ $max));\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list(array(1,\
    \ 2, 3, 4)));\nprint_r(strange_sort_list(array(5, 5, 5, 5)));\nprint_r(strange_sort_list(array()));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpvgr5oyd9.php:41\nStack trace:\n#0 /tmp/tmpvgr5oyd9.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvgr5oyd9.php on line 41\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $i = 0;\n    while (count($lst) > 0) {\n        $min\
    \ = min($lst);\n        $max = max($lst);\n        if ($i % 2 == 0) {\n      \
    \      $result[] = $min;\n            $lst = array_diff($lst, [$min]);\n     \
    \   } else {\n            $result[] = $max;\n            $lst = array_diff($lst,\
    \ [$max]);\n        }\n        $i++;\n    }\n    return $result;\n}\n\n$lst =\
    \ [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp6xwxccix.php:41\nStack\
    \ trace:\n#0 /tmp/tmp6xwxccix.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp6xwxccix.php\
    \ on line 41\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    sort($lst);\n  \
    \  $result = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j)\
    \ {\n        $result[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n \
    \           $result[] = $lst[$j];\n            $j--;\n        }\n    }\n    return\
    \ $result;\n}\n\nvar_dump(strange_sort_list([1, 2, 3, 4]));\nvar_dump(strange_sort_list([5,\
    \ 5, 5, 5]));\nvar_dump(strange_sort_list([]));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(4)\n  [2]=>\n  int(2)\n \
    \ [3]=>\n  int(3)\n}\narray(4) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n  [2]=>\n\
    \  int(5)\n  [3]=>\n  int(5)\n}\narray(0) {\n}\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    if ($count == 0) {\n  \
    \      return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $min_index = array_search($min, $lst);\n    $max_index = array_search($max,\
    \ $lst);\n    $result[] = $min;\n    $result[] = $max;\n    unset($lst[$min_index]);\n\
    \    unset($lst[$max_index]);\n    $lst = array_values($lst);\n    $count = count($lst);\n\
    \    if ($count == 0) {\n        return $result;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $min_index = array_search($min, $lst);\n    $max_index\
    \ = array_search($max, $lst);\n    $result[] = $min;\n    $result[] = $max;\n\
    \    unset($lst[$min_index]);\n    unset($lst[$max_index]);\n    $lst = array_values($lst);\n\
    \    $count = count($lst);\n    if ($count == 0) {\n        return $result;\n\
    \    }\n    $min = min($lst);\n    $max = max($lst);\n    $min_index = array_search($min,\
    \ $lst);\n    $max_index = array_search($max, $lst);\n    $result[] = $min;\n\
    \    $result[] = $max;\n    unset($lst[$min_index]);\n    unset($lst[$max_index]);\n\
    \    $lst = array_values($lst);\n    $count = count($lst);\n    if ($count ==\
    \ 0) {\n        return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $min_index = array_search($min, $lst);\n    $max_index = array_search($max,\
    \ $lst);\n    $result[] = $\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpg1dzk7r_.php on line 62

    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    if ($count == 0) {\n  \
    \      return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $result[] = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, [$min,\
    \ $max]);\n    $count = count($lst);\n    if ($count == 0) {\n        return $result;\n\
    \    }\n    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n\
    \    $result[] = $max;\n    $lst = array_diff($lst, [$min, $max]);\n    $count\
    \ = count($lst);\n    if ($count == 0) {\n        return $result;\n    }\n   \
    \ $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, [$min, $max]);\n    $count = count($lst);\n\
    \    if ($count == 0) {\n        return $result;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result[] = $min;\n    $result[] = $max;\n    $lst\
    \ = array_diff($lst, [$min, $max]);\n    $count = count($lst);\n    if ($count\
    \ == 0) {\n        return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $result[] = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, [$min,\
    \ $max]);\n    $count = count($lst);\n    if ($count == 0) {\n        return $result;\n\
    \    }\n    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n\
    \    $result[] = $max;\n    $lst = array_diff($\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp6xdmmzz7.php on line 68

    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $lst = array_unique($lst);\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result = [];\n    $i = 0;\n\
    \    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $key = array_search($min, $lst);\n            unset($lst[$key]);\n\
    \            $min = min($lst);\n        } else {\n            $result[] = $max;\n\
    \            $key = array_search($max, $lst);\n            unset($lst[$key]);\n\
    \            $max = max($lst);\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\necho \"<br>\";\n\
    $lst = [5, 5, 5, 5];\nprint_r(strange_sort_list($lst));\necho \"<br>\";\n$lst\
    \ = [];\nprint_r(strange_sort_list($lst));\necho \"<br>\";\n$lst = [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10];\nprint_r(strange_sort_list($lst));\necho \"<br>\";\n$lst\
    \ = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];\nprint_r(strange_sort_list($lst));\necho\
    \ \"<br>\";\n$lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20];\nprint_r(strange_sort_list($lst));\necho \"<br>\";\n$lst = [20,\
    \ 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1];\nprint_\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp21mai9i3.php
    on line 58

    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result = [];\n    $i = 0;\n    while (count($lst)\
    \ > 0) {\n        if ($i % 2 == 0) {\n            $result[] = $min;\n        \
    \    $key = array_search($min, $lst);\n            unset($lst[$key]);\n      \
    \      $min = min($lst);\n        } else {\n            $result[] = $max;\n  \
    \          $key = array_search($max, $lst);\n            unset($lst[$key]);\n\
    \            $max = max($lst);\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpx_69f6qa.php:30\nStack trace:\n#0 /tmp/tmpx_69f6qa.php(30):\
    \ max(Array)\n#1 /tmp/tmpx_69f6qa.php(37): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpx_69f6qa.php on line 30\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $lst_len = count($lst);\n    if ($lst_len == 0) {\n\
    \        return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $i = 0;\n    while ($i < $lst_len) {\n        if ($i % 2 == 0) {\n      \
    \      $result[] = $min;\n            $lst = array_diff($lst, [$min]);\n     \
    \       $min = min($lst);\n        } else {\n            $result[] = $max;\n \
    \           $lst = array_diff($lst, [$max]);\n            $max = max($lst);\n\
    \        }\n        $i++;\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpw54scyq4.php:29\nStack trace:\n#0 /tmp/tmpw54scyq4.php(29):\
    \ max(Array)\n#1 /tmp/tmpw54scyq4.php(36): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpw54scyq4.php on line 29\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while ($i < count($lst)) {\n        if ($i % 2 == 0) {\n           \
    \ $result[] = $min;\n            $lst = array_diff($lst, [$min]);\n          \
    \  $min = min($lst);\n        } else {\n            $result[] = $max;\n      \
    \      $lst = array_diff($lst, [$max]);\n            $max = max($lst);\n     \
    \   }\n        $i++;\n    }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\n\
    print_r(strange_sort_list($lst));\nfunction candidate(...$args) {\n    return\
    \ strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpyt6g6eg6.php:39\nStack trace:\n#0 /tmp/tmpyt6g6eg6.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyt6g6eg6.php on line 39\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $lst = array_unique($lst);\n    sort($lst);\n    $len\
    \ = count($lst);\n    $i = 0;\n    while ($i < $len) {\n        $result[] = $lst[$i];\n\
    \        $i++;\n        if ($i < $len) {\n            $result[] = $lst[$len -\
    \ $i];\n            $i++;\n        }\n    }\n    return $result;\n}\n\n$lst =\
    \ [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 3\n    [3] => 2\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp1eoband5.php:36\nStack\
    \ trace:\n#0 /tmp/tmp1eoband5.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1eoband5.php\
    \ on line 36\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n    $result\
    \ = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j) {\n    \
    \    $result[] = $lst[$i];\n        if ($i != $j) {\n            $result[] = $lst[$j];\n\
    \        }\n        $i++;\n        $j--;\n    }\n    return $result;\n}\n\n/*\n\
    \ * Given a string, return a new string with the reversed order of characters.\n\
    Examples:\n>>> reverse_string('apple')\n'elppa'\n>>> reverse_string('hello')\n\
    'olleh'\n>>> reverse_string('Greetings!')\n'!sgniteerG'\n */\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbc1513wm.php:47\n\
    Stack trace:\n#0 /tmp/tmpbc1513wm.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpbc1513wm.php\
    \ on line 47\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $res = [];\n    $len = count($lst);\n    $i = 0;\n    while ($i < $len)\
    \ {\n        $min = min($lst);\n        $max = max($lst);\n        $res[] = $min;\n\
    \        $res[] = $max;\n        $i += 2;\n        $lst = array_diff($lst, [$min,\
    \ $max]);\n    }\n    return $res;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\n\
    print_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at\
    \ least one element in /tmp/tmpdsvl9bz4.php:17\nStack trace:\n#0 /tmp/tmpdsvl9bz4.php(17):\
    \ min(Array)\n#1 /tmp/tmpdsvl9bz4.php(28): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpdsvl9bz4.php on line 17\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $lst = array_unique($lst);\n    sort($lst);\n    $result = [];\n    $i\
    \ = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j) {\n        $result[] =\
    \ $lst[$i];\n        if ($i != $j) {\n            $result[] = $lst[$j];\n    \
    \    }\n        $i++;\n        $j--;\n    }\n    return $result;\n}\n\n/* Given\
    \ array of integers, return array in strange order.\nStrange sorting, is when\
    \ you start with the minimum value,\nthen maximum of the remaining integers, then\
    \ minimum and so on.\nExamples:\n>>> strange_sort_list(array(1, 2, 3, 4))\narray(1,\
    \ 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5, 5, 5, 5)\n>>> strange_sort_list(array())\n\
    array()*/\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd4x30kts.php:48\n\
    Stack trace:\n#0 /tmp/tmpd4x30kts.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpd4x30kts.php\
    \ on line 48\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $res = [];\n    $len = count($lst);\n    $i = 0;\n    while ($i < $len)\
    \ {\n        $min = min($lst);\n        $max = max($lst);\n        $res[] = $min;\n\
    \        $res[] = $max;\n        $i += 2;\n        $lst = array_diff($lst, [$min,\
    \ $max]);\n    }\n    return $res;\n}\n\n/*\n * Unit Tests\n * */\necho '<pre>';\n\
    print_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5,\
    \ 5]));\nprint_r(strange_sort_list([]));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n\
    )\n\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmph5qbah6x.php:17\nStack trace:\n#0 /tmp/tmph5qbah6x.php(17):\
    \ min(Array)\n#1 /tmp/tmph5qbah6x.php(32): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmph5qbah6x.php on line 17\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result = [];\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, [$min, $max]);\n    $lst = array_values($lst);\n\
    \    $count = count($lst);\n    $i = 0;\n    while ($i < $count) {\n        $result[]\
    \ = $lst[$i];\n        $i++;\n        if ($i < $count) {\n            $result[]\
    \ = $lst[$count - $i];\n        }\n    }\n    return $result;\n}\n\n$lst = [1,\
    \ 2, 3, 4];\nprint_r(strange_sort_list($lst));\necho \"<br>\";\n$lst = [5, 5,\
    \ 5, 5];\nprint_r(strange_sort_list($lst));\necho \"<br>\";\n$lst = [];\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpmaivai9h.php on line 57

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result = [];\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $i = 1;\n    while (count($lst) > 2) {\n        if ($i % 2 == 0)\
    \ {\n            $result[] = min($lst);\n        } else {\n            $result[]\
    \ = max($lst);\n        }\n        $i++;\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpmen2kgu2.php on line 26

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) return [];\n    $result = [];\n    sort($lst);\n   \
    \ $min = $lst[0];\n    $max = $lst[count($lst) - 1];\n    $result[] = $min;\n\
    \    $result[] = $max;\n    unset($lst[0]);\n    unset($lst[count($lst) - 1]);\n\
    \    $lst = array_values($lst);\n    while (count($lst) > 0) {\n        $min =\
    \ $lst[0];\n        $max = $lst[count($lst) - 1];\n        $result[] = $min;\n\
    \        $result[] = $max;\n        unset($lst[0]);\n        unset($lst[count($lst)\
    \ - 1]);\n        $lst = array_values($lst);\n    }\n    return $result;\n}\n\n\
    $lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 4\n    [4]\
    \ => 4\n    [5] => 4\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxhur9fyr.php:42\n\
    Stack trace:\n#0 /tmp/tmpxhur9fyr.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpxhur9fyr.php\
    \ on line 42\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n\t$result = array();\n\t$min = min($lst);\n\t$max = max($lst);\n\t$i = 0;\n\
    \twhile (count($lst) > 0) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$result[] = $min;\n\
    \t\t\t$min_key = array_search($min, $lst);\n\t\t\tunset($lst[$min_key]);\n\t\t\
    \t$min = min($lst);\n\t\t} else {\n\t\t\t$result[] = $max;\n\t\t\t$max_key = array_search($max,\
    \ $lst);\n\t\t\tunset($lst[$max_key]);\n\t\t\t$max = max($lst);\n\t\t}\n\t\t$i++;\n\
    \t}\n\treturn $result;\n}\n\nprint_r(strange_sort_list(array(1, 2, 3, 4)));\n\
    print_r(strange_sort_list(array(5, 5, 5, 5)));\nprint_r(strange_sort_list(array()));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpixqmdl4v.php:27\nStack trace:\n#0 /tmp/tmpixqmdl4v.php(27):\
    \ max(Array)\n#1 /tmp/tmpixqmdl4v.php(34): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpixqmdl4v.php on line 27\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return [];\n    }\n    sort($lst);\n    $res\
    \ = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j) {\n    \
    \    $res[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n            $res[]\
    \ = $lst[$j];\n            $j--;\n        }\n    }\n    return $res;\n}\n\n/*\n\
    \ * Given a string, return the number of vowels in it.\n * Examples:\n * >>> count_vowels(\"\
    Hello\")\n * 2\n * >>> count_vowels(\"World\")\n * 1\n * >>> count_vowels(\"\"\
    )\n * 0\n */\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $min\
    \ = min($lst);\n            $result[] = $min;\n            $key = array_search($min,\
    \ $lst);\n            unset($lst[$key]);\n        } else {\n            $max =\
    \ max($lst);\n            $result[] = $max;\n            $key = array_search($max,\
    \ $lst);\n            unset($lst[$key]);\n        }\n        $i++;\n    }\n  \
    \  return $result;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\n\nFatal error: Uncaught\
    \ ValueError: min(): Argument #1 ($value) must contain at least one element in\
    \ /tmp/tmpwk_b4frf.php:14\nStack trace:\n#0 /tmp/tmpwk_b4frf.php(14): min(Array)\n\
    #1 /tmp/tmpwk_b4frf.php(36): strange_sort_list(Array)\n#2 {main}\n  thrown in\
    \ /tmp/tmpwk_b4frf.php on line 14\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $result = [];\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, [$min, $max]);\n    while (!empty($lst))\
    \ {\n        $min = min($lst);\n        $max = max($lst);\n        $result[] =\
    \ $min;\n        $result[] = $max;\n        $lst = array_diff($lst, [$min, $max]);\n\
    \    }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\n\
    echo PHP_EOL;\n$lst = [5, 5, 5, 5];\nprint_r(strange_sort_list($lst));\necho PHP_EOL;\n\
    $lst = [];\nprint_r(strange_sort_list($lst));\necho PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    sort($lst);\n  \
    \  $len = count($lst);\n    $res = array();\n    $i = 0;\n    $j = $len - 1;\n\
    \    while ($i <= $j) {\n        $res[] = $lst[$i];\n        if ($i != $j) {\n\
    \            $res[] = $lst[$j];\n        }\n        $i++;\n        $j--;\n   \
    \ }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    sort($lst);\n    $i = 0;\n    $j = count($lst) - 1;\n\
    \    while ($i <= $j) {\n        $result[] = $lst[$i];\n        $i++;\n      \
    \  if ($i <= $j) {\n            $result[] = $lst[$j];\n            $j--;\n   \
    \     }\n    }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    sort($lst);\n  \
    \  $result = array();\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <=\
    \ $j) {\n        $result[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n\
    \            $result[] = $lst[$j];\n            $j--;\n        }\n    }\n    return\
    \ $result;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array();\nprint_r(strange_sort_list($lst));\necho \"<br>\"\
    ;\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\nprint_r(strange\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpg4wlxvge.php
    on line 57

    '
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    sort($lst);\n  \
    \  $result = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j)\
    \ {\n        $result[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n \
    \           $result[] = $lst[$j];\n            $j--;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $key = array_search($min, $lst);\n            unset($lst[$key]);\n\
    \            $min = min($lst);\n        } else {\n            $result[] = $max;\n\
    \            $key = array_search($max, $lst);\n            unset($lst[$key]);\n\
    \            $max = max($lst);\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmplnl7rryg.php:27\nStack trace:\n#0 /tmp/tmplnl7rryg.php(27):\
    \ max(Array)\n#1 /tmp/tmplnl7rryg.php(34): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmplnl7rryg.php on line 27\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    if ($count == 0) {\n  \
    \      return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $result[] = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, [$min,\
    \ $max]);\n    $count = count($lst);\n    if ($count == 0) {\n        return $result;\n\
    \    }\n    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n\
    \    $result[] = $max;\n    $lst = array_diff($lst, [$min, $max]);\n    $count\
    \ = count($lst);\n    if ($count == 0) {\n        return $result;\n    }\n   \
    \ $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, [$min, $max]);\n    $count = count($lst);\n\
    \    if ($count == 0) {\n        return $result;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result[] = $min;\n    $result[] = $max;\n    $lst\
    \ = array_diff($lst, [$min, $max]);\n    $count = count($lst);\n    if ($count\
    \ == 0) {\n        return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $result[] = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, [$min,\
    \ $max]);\n    $count = count($lst);\n    if ($count == 0) {\n        return $result;\n\
    \    }\n    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n\
    \    $result[] = $max;\n    $lst = array_diff($\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp6xdmmzz7.php on line 68

    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $lst\
    \ = array_diff($lst, [$min, $max]);\n    $result[] = $min;\n    $result[] = $max;\n\
    \    while (count($lst) > 0) {\n        $min = min($lst);\n        $max = max($lst);\n\
    \        $lst = array_diff($lst, [$min, $max]);\n        $result[] = $min;\n \
    \       $result[] = $max;\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n)\n\nFatal error: Uncaught ValueError: min(): Argument\
    \ #1 ($value) must contain at least one element in /tmp/tmp3rbcj9z5.php:14\nStack\
    \ trace:\n#0 /tmp/tmp3rbcj9z5.php(14): min(Array)\n#1 /tmp/tmp3rbcj9z5.php(31):\
    \ strange_sort_list(Array)\n#2 {main}\n  thrown in /tmp/tmp3rbcj9z5.php on line\
    \ 14\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $result = [];\n\
    \    $lst = array_unique($lst);\n    sort($lst);\n    $min = $lst[0];\n    $max\
    \ = $lst[count($lst) - 1];\n    $result[] = $min;\n    $result[] = $max;\n   \
    \ $lst = array_slice($lst, 1, count($lst) - 2);\n    $lst = array_reverse($lst);\n\
    \    $result = array_merge($result, $lst);\n    return $result;\n}\n\n/* Given\
    \ array of integers, return array in strange order.\nStrange sorting, is when\
    \ you start with the minimum value,\nthen maximum of the remaining integers, then\
    \ minimum and so on.\nExamples:\n>>> strange_sort_list(array(1, 2, 3, 4))\narray(1,\
    \ 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5, 5, 5, 5)\n>>> strange_sort_list(array())\n\
    array()*/\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmmgb923l.php:44\n\
    Stack trace:\n#0 /tmp/tmpmmgb923l.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpmmgb923l.php\
    \ on line 44\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = array();\n    $min = min($lst);\n    $max = max($lst);\n  \
    \  $result[] = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, array($min,\
    \ $max));\n    $lst = array_values($lst);\n    while (count($lst) > 0) {\n   \
    \     $min = min($lst);\n        $max = max($lst);\n        $result[] = $min;\n\
    \        $result[] = $max;\n        $lst = array_diff($lst, array($min, $max));\n\
    \        $lst = array_values($lst);\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list(array(1,\
    \ 2, 3, 4)));\nprint_r(strange_sort_list(array(5, 5, 5, 5)));\nprint_r(strange_sort_list(array()));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n)\n\nFatal error: Uncaught ValueError: min(): Argument\
    \ #1 ($value) must contain at least one element in /tmp/tmpg05wi54n.php:14\nStack\
    \ trace:\n#0 /tmp/tmpg05wi54n.php(14): min(Array)\n#1 /tmp/tmpg05wi54n.php(33):\
    \ strange_sort_list(Array)\n#2 {main}\n  thrown in /tmp/tmpg05wi54n.php on line\
    \ 14\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    sort($lst);\n  \
    \  $result = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j)\
    \ {\n        $result[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n \
    \           $result[] = $lst[$j];\n            $j--;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result = array($min);\n    $lst = array_diff($lst,\
    \ array($min));\n    while (!empty($lst)) {\n        $max = max($lst);\n     \
    \   $result[] = $max;\n        $lst = array_diff($lst, array($max));\n       \
    \ if (empty($lst)) {\n            break;\n        }\n        $min = min($lst);\n\
    \        $result[] = $min;\n        $lst = array_diff($lst, array($min));\n  \
    \  }\n    return $result;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    $lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\n$lst = array();\n\
    print_r(strange_sort_list($lst));\nfunction candidate(...$args) {\n    return\
    \ strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpuiky2sj5.php:49\nStack trace:\n#0 /tmp/tmpuiky2sj5.php(56): test()\n\
    #1 {main}\n  thrown in /tmp/tmpuiky2sj5.php on line 49\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $res = [];\n    $lst_len = count($lst);\n    $lst_len_half = $lst_len\
    \ / 2;\n    $lst_len_half_ceil = ceil($lst_len_half);\n    $lst_len_half_floor\
    \ = floor($lst_len_half);\n    $lst_len_half_floor_half = $lst_len_half_floor\
    \ / 2;\n    $lst_len_half_floor_half_ceil = ceil($lst_len_half_floor_half);\n\
    \    $lst_len_half_floor_half_floor = floor($lst_len_half_floor_half);\n    $lst_len_half_floor_half_floor_half\
    \ = $lst_len_half_floor_half_floor / 2;\n    $lst_len_half_floor_half_floor_half_ceil\
    \ = ceil($lst_len_half_floor_half_floor_half);\n    $lst_len_half_floor_half_floor_half_floor\
    \ = floor($lst_len_half_floor_half_floor_half);\n    $lst_len_half_floor_half_floor_half_floor_half\
    \ = $lst_len_half_floor_half_floor_half_floor / 2;\n    $lst_len_half_floor_half_floor_half_floor_half_ceil\
    \ = ceil($lst_len_half_floor_half_floor_half_floor_half);\n    $lst_len_half_floor_half_floor_half_floor_half_floor\
    \ = floor($lst_len_half_floor_half_floor_half_floor_half);\n    $lst_len_half_floor_half_floor_half_floor_half_floor_half\
    \ = $lst_len_half_floor_half_floor_half_floor_half_floor / 2;\n    $lst_len_half_floor_half_floor_half_floor_half_floor_half_ceil\
    \ = ceil($lst_len_half_floor_half_floor_half_floor_half_\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp0hd2mkoc.php
    on line 29

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $lst = array_unique($lst);\n    sort($lst);\n    $i\
    \ = 0;\n    while (count($lst) > 0) {\n        $result[] = $lst[$i];\n       \
    \ unset($lst[$i]);\n        $lst = array_values($lst);\n        if (count($lst)\
    \ > 0) {\n            $result[] = $lst[count($lst) - 1];\n            unset($lst[count($lst)\
    \ - 1]);\n            $lst = array_values($lst);\n        }\n    }\n    return\
    \ $result;\n}\n\necho \"<pre>\";\nprint_r(strange_sort_list([1, 2, 3, 4]));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(strange_sort_list([5, 5, 5, 5]));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(strange_sort_list([]));\necho \"\
    </pre>\";\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n\
    )\n</pre><pre>Array\n(\n    [0] => 5\n)\n</pre><pre>Array\n(\n)\n</pre>\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpuay5fuwo.php:50\nStack trace:\n\
    #0 /tmp/tmpuay5fuwo.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpuay5fuwo.php\
    \ on line 50\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $count = count($lst);\n    if ($count == 0) {\n        return $lst;\n\
    \    }\n    $min = min($lst);\n    $max = max($lst);\n    $result = array();\n\
    \    $result[] = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, array($min,\
    \ $max));\n    $count = count($lst);\n    if ($count == 0) {\n        return $result;\n\
    \    }\n    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n\
    \    $result[] = $max;\n    $lst = array_diff($lst, array($min, $max));\n    $count\
    \ = count($lst);\n    if ($count == 0) {\n        return $result;\n    }\n   \
    \ $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    $count = count($lst);\n\
    \    if ($count == 0) {\n        return $result;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result[] = $min;\n    $result[] = $max;\n    $lst\
    \ = array_diff($lst, array($min, $max));\n    $count = count($lst);\n    if ($count\
    \ == 0) {\n        return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $result[] = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, array($min,\
    \ $max));\n    $count = count($lst);\n    if ($count == 0) {\n        return $result;\n\
    \    }\n    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n\
    \    $result[] = $max;\n    $lst = array_\nfunction candidate(...$args) {\n  \
    \  return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpb4_waa6e.php
    on line 68

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $min = min($lst);\n        } else {\n            $result[]\
    \ = $max;\n            $max = max($lst);\n        }\n        $i++;\n    }\n  \
    \  return $result;\n}\n\n$lst = [1, 2, 3, 4];\nvar_dump(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpkqv82bqi.php on line 19

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    sort($lst);\n    $count = count($lst);\n    $i = 0;\n\
    \    while ($i < $count) {\n        $result[] = $lst[$i];\n        $i++;\n   \
    \     if ($i < $count) {\n            $result[] = $lst[$count - $i];\n       \
    \     $i++;\n        }\n    }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\n\
    var_dump(strange_sort_list($lst));\n$lst = [5, 5, 5, 5];\nvar_dump(strange_sort_list($lst));\n\
    $lst = [];\nvar_dump(strange_sort_list($lst));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(4)\n  [2]=>\n  int(3)\n \
    \ [3]=>\n  int(2)\n}\narray(4) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n  [2]=>\n\
    \  int(5)\n  [3]=>\n  int(5)\n}\narray(0) {\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpdt7e57dq.php:39\nStack trace:\n#0 /tmp/tmpdt7e57dq.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdt7e57dq.php on line 39\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $key = array_search($min, $lst);\n            unset($lst[$key]);\n\
    \            $min = min($lst);\n        } else {\n            $result[] = $max;\n\
    \            $key = array_search($max, $lst);\n            unset($lst[$key]);\n\
    \            $max = max($lst);\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\n$lst = [1, 2, 3, 4];\n$result = strange_sort_list($lst);\nprint_r($result);\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpxw49t_mm.php:27\nStack trace:\n#0 /tmp/tmpxw49t_mm.php(27):\
    \ max(Array)\n#1 /tmp/tmpxw49t_mm.php(35): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpxw49t_mm.php on line 27\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    $min = min($lst);\n   \
    \ $max = max($lst);\n    $lst = array_diff($lst, [$min, $max]);\n    $count -=\
    \ 2;\n    $result[] = $min;\n    $result[] = $max;\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        $min = min($lst);\n        $max = max($lst);\n        $lst\
    \ = array_diff($lst, [$min, $max]);\n        $result[] = $min;\n        $result[]\
    \ = $max;\n    }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmppzysjeik.php:22\nStack trace:\n#0 /tmp/tmppzysjeik.php(22):\
    \ min(Array)\n#1 /tmp/tmppzysjeik.php(32): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmppzysjeik.php on line 22\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) return [];\n    $result = [];\n    $max = max($lst);\n\
    \    $min = min($lst);\n    $result[] = $min;\n    $result[] = $max;\n    $lst\
    \ = array_diff($lst, [$min, $max]);\n    while (!empty($lst)) {\n        $max\
    \ = max($lst);\n        $min = min($lst);\n        $result[] = $min;\n       \
    \ $result[] = $max;\n        $lst = array_diff($lst, [$min, $max]);\n    }\n \
    \   return $result;\n}\n\n/*\n * Test code\n */\nassert(strange_sort_list([1,\
    \ 2, 3, 4]) == [1, 4, 2, 3]);\nassert(strange_sort_list([5, 5, 5, 5]) == [5, 5,\
    \ 5, 5]);\nassert(strange_sort_list([]) == []);\nassert(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]);\nassert(strange_sort_list([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6]);\n\
    assert(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 12, 2,\
    \ 11, 3, 10, 4, 9, 5, 8, 6, 7]);\nassert(strange_sort_list([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13]) == [1, 13, 2, 12, 3, 11, 4, 10, 5, 9, 6, 8, 7]);\n\
    assert(strange_sort_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1,\
    \ 14, 2, 13\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmp759pqfnc.php
    on line 41

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return [];\n    }\n    sort($lst);\n    $result\
    \ = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($i % 2 == 0)\
    \ {\n            $result[] = $lst[$i];\n        } else {\n            array_unshift($result,\
    \ $lst[$i]);\n        }\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpxf6di0k3.php:36\nStack\
    \ trace:\n#0 /tmp/tmpxf6di0k3.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpxf6di0k3.php\
    \ on line 36\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $lst = array_unique($lst);\n    sort($lst);\n    $result = [];\n    $i\
    \ = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j) {\n        $result[] =\
    \ $lst[$i];\n        if ($i != $j) {\n            $result[] = $lst[$j];\n    \
    \    }\n        $i++;\n        $j--;\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpyj6dkdao.php:41\nStack trace:\n#0 /tmp/tmpyj6dkdao.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmpyj6dkdao.php on line 41\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    sort($lst);\n  \
    \  $lst_len = count($lst);\n    $result = [];\n    $i = 0;\n    $j = $lst_len\
    \ - 1;\n    while ($i < $lst_len) {\n        $result[] = $lst[$i];\n        if\
    \ ($i < $j) {\n            $result[] = $lst[$j];\n        }\n        $i++;\n \
    \       $j--;\n    }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = [5, 5, 5, 5];\nprint_r(strange_sort_list($lst));\necho\
    \ \"<br>\";\n$lst = [];\nprint_r(strange_sort_list($lst));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n    [4]\
    \ => 3\n    [5] => 4\n)\n<br>Array\n(\n    [0] => 5\n    [1] => 5\n    [2] =>\
    \ 5\n    [3] => 5\n    [4] => 5\n    [5] => 5\n)\n<br>Array\n(\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmppenfahbk.php:45\nStack trace:\n\
    #0 /tmp/tmppenfahbk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmppenfahbk.php\
    \ on line 45\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $lst = array_unique($lst);\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result = [];\n    $i = 0;\n\
    \    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $lst = array_diff($lst, [$min]);\n            $min = min($lst);\n\
    \        } else {\n            $result[] = $max;\n            $lst = array_diff($lst,\
    \ [$max]);\n            $max = max($lst);\n        }\n        $i++;\n    }\n \
    \   return $result;\n}\n\n/*\n * Given array of integers, return array in strange\
    \ order.\nStrange sorting, is when you start with the minimum value,\nthen maximum\
    \ of the remaining integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()\n */\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpzhgfx6qt.php:29\nStack trace:\n#0 /tmp/tmpzhgfx6qt.php(29):\
    \ max(Array)\n#1 /tmp/tmpzhgfx6qt.php(49): strange_sort_list(Array)\n#2 /tmp/tmpzhgfx6qt.php(53):\
    \ candidate(Array)\n#3 /tmp/tmpzhgfx6qt.php(64): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpzhgfx6qt.php on line 29\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (count($lst) == 0) {\n        return $lst;\n    }\n    $result = array();\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    unset($lst[array_search($min, $lst)]);\n    unset($lst[array_search($max,\
    \ $lst)]);\n    $lst = array_values($lst);\n    while (count($lst) > 0) {\n  \
    \      $min = min($lst);\n        $max = max($lst);\n        $result[] = $min;\n\
    \        $result[] = $max;\n        unset($lst[array_search($min, $lst)]);\n \
    \       unset($lst[array_search($max, $lst)]);\n        $lst = array_values($lst);\n\
    \    }\n    return $result;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp3mdxgf1v.php:44\nStack\
    \ trace:\n#0 /tmp/tmp3mdxgf1v.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3mdxgf1v.php\
    \ on line 44\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result = array();\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    while (!empty($lst))\
    \ {\n        $min = min($lst);\n        $max = max($lst);\n        $result[] =\
    \ $min;\n        $result[] = $max;\n        $lst = array_diff($lst, array($min,\
    \ $max));\n    }\n    return $result;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\necho\
    \ '<br>';\n$lst = array();\nprint_r(strange_sort_list($lst));\necho '<br>';\n\
    $lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20);\nprint_r(strange_sort_list($lst));\necho '<br>';\n$lst\
    \ = array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1);\nprint_r(strange_sort_list($lst));\necho '<br>';\n$lst = array(1\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpn6sajno7.php
    on line 54

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $lst = array_unique($lst);\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result = array();\n    $result[]\
    \ = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, array($min, $max));\n\
    \    while (!empty($lst)) {\n        $min = min($lst);\n        $max = max($lst);\n\
    \        $result[] = $min;\n        $result[] = $max;\n        $lst = array_diff($lst,\
    \ array($min, $max));\n    }\n    return $result;\n}\n\n$lst = array(1, 2, 3,\
    \ 4);\nprint_r(strange_sort_list($lst));\necho \"<br>\";\n$lst = array(5, 5, 5,\
    \ 5);\nprint_r(strange_sort_list($lst));\necho \"<br>\";\n$lst = array();\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20);\nprint_r(strange_sort_list($lst));\necho \"<br>\";\n$lst\
    \ = array(20, 19, 18, 17, 16, 15, 14, 13\nfunction candidate(...$args) {\n   \
    \ return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpdo0f2ahn.php
    on line 55

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $lst = array_unique($lst);\n    sort($lst);\n    $len\
    \ = count($lst);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $len && $j\
    \ >= 0) {\n        $result[] = $lst[$i];\n        $i++;\n        if ($i < $len)\
    \ {\n            $result[] = $lst[$j];\n            $j--;\n        }\n    }\n\
    \    return $result;\n}\n\necho '<pre>';\nprint_r(strange_sort_list([1, 2, 3,\
    \ 4]));\necho '</pre>';\necho '<pre>';\nprint_r(strange_sort_list([5, 5, 5, 5]));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(strange_sort_list([]));\necho '</pre>';\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n\
    \    [4] => 3\n    [5] => 2\n    [6] => 4\n)\n</pre><pre>Array\n(\n    [0] =>\
    \ 5\n)\n</pre><pre>Array\n(\n)\n</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp796uf4gn.php:44\nStack trace:\n#0 /tmp/tmp796uf4gn.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp796uf4gn.php on line 44\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    $min = min($lst);\n   \
    \ $max = max($lst);\n    $i = 0;\n    while ($i < $count) {\n        if ($i %\
    \ 2 == 0) {\n            $result[] = $min;\n            $lst = array_diff($lst,\
    \ [$min]);\n            $min = min($lst);\n        } else {\n            $result[]\
    \ = $max;\n            $lst = array_diff($lst, [$max]);\n            $max = max($lst);\n\
    \        }\n        $i++;\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpu8b_zsv5.php:26\nStack trace:\n#0 /tmp/tmpu8b_zsv5.php(26):\
    \ max(Array)\n#1 /tmp/tmpu8b_zsv5.php(33): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpu8b_zsv5.php on line 26\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result = array();\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    $lst = array_values($lst);\n\
    \    $lst = array_merge($lst, array());\n    $lst = array_merge($lst, array());\n\
    \    $lst = array_merge($lst, array());\n    $lst = array_merge($lst, array());\n\
    \    $lst = array_merge($lst, array());\n    $lst = array_merge($lst, array());\n\
    \    $lst = array_merge($lst, array());\n    $lst = array_merge($lst, array());\n\
    \    $lst = array_merge($lst, array());\n    $lst = array_merge($lst, array());\n\
    \    $lst = array_merge($lst, array());\n    $lst = array_merge($lst, array());\n\
    \    $lst = array_merge($lst, array());\n    $lst = array_merge($lst, array());\n\
    \    $lst = array_merge($lst, array());\n    $lst = array_merge($lst, array());\n\
    \    $lst = array_merge($lst, array());\n    $lst = array_merge($lst, array());\n\
    \    $lst = array_merge($lst, array());\n    $lst = array_merge($lst, array());\n\
    \    $lst = array_merge($lst, array());\n    $lst = array_merge($lst, array());\n\
    \    $lst = array_merge($lst, array());\n    $lst = array_merge($lst, array());\n\
    \    $lst = array_merge($lst, array());\n    $lst = array_merge($lst,\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpdmc8r3v0.php on line 49

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $new_lst = [];\n    $i = 0;\n    while (count($lst)\
    \ > 0) {\n        if ($i % 2 == 0) {\n            $new_lst[] = $min;\n       \
    \     $lst = array_diff($lst, [$min]);\n            $min = min($lst);\n      \
    \  } else {\n            $new_lst[] = $max;\n            $lst = array_diff($lst,\
    \ [$max]);\n            $max = max($lst);\n        }\n        $i++;\n    }\n \
    \   return $new_lst;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = [5, 5, 5, 5];\nprint_r(strange_sort_list($lst));\necho\
    \ \"<br>\";\n$lst = [];\nprint_r(strange_sort_list($lst));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmp3cv9r_c5.php:28\nStack trace:\n#0 /tmp/tmp3cv9r_c5.php(28):\
    \ max(Array)\n#1 /tmp/tmp3cv9r_c5.php(36): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmp3cv9r_c5.php on line 28\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if(empty($lst)) {\n        return $lst;\n    }\n    sort($lst);\n   \
    \ $result = array();\n    $i = 0;\n    $j = count($lst) - 1;\n    while($i <=\
    \ $j) {\n        $result[] = $lst[$i];\n        $i++;\n        if($i <= $j) {\n\
    \            $result[] = $lst[$j];\n            $j--;\n        }\n    }\n    return\
    \ $result;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    \n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\n\n$lst = array();\n\
    print_r(strange_sort_list($lst));\nfunction candidate(...$args) {\n    return\
    \ strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $lst = array_unique($lst);\n    sort($lst);\n    $count\
    \ = count($lst);\n    if ($count == 0) {\n        return $result;\n    }\n   \
    \ if ($count == 1) {\n        return $lst;\n    }\n    $i = 0;\n    $j = $count\
    \ - 1;\n    while ($i < $j) {\n        $result[] = $lst[$i];\n        $result[]\
    \ = $lst[$j];\n        $i++;\n        $j--;\n    }\n    if ($i == $j) {\n    \
    \    $result[] = $lst[$i];\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpzvwj38st.php:49\nStack trace:\n#0 /tmp/tmpzvwj38st.php(56): test()\n\
    #1 {main}\n  thrown in /tmp/tmpzvwj38st.php on line 49\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result = array($min);\n    $lst = array_diff($lst,\
    \ array($min));\n    $lst = array_values($lst);\n    $result = array_merge($result,\
    \ strange_sort_list($lst));\n    return $result;\n}\n\n$lst = array(1, 2, 3, 4);\n\
    print_r(strange_sort_list($lst));\n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\n\
    $lst = array();\nprint_r(strange_sort_list($lst));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n    [3] => 4\n)\nArray\n\
    (\n    [0] => 5\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpf1t6jcc5.php:36\nStack trace:\n#0 /tmp/tmpf1t6jcc5.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmpf1t6jcc5.php on line 36\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (count($lst) == 0) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $new_lst = array();\n    $new_lst[] = $min;\n    $new_lst[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    $lst = array_values($lst);\n\
    \    $lst = strange_sort_list($lst);\n    return array_merge($new_lst, $lst);\n\
    }\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\necho '<br>';\n\
    $lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\necho '<br>';\n$lst\
    \ = array();\nprint_r(strange_sort_list($lst));\necho '<br>';\n$lst = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10);\nprint_r(strange_sort_list($lst));\necho '<br>';\n\
    $lst = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = array(1, 3, 5, 7, 9, 2, 4, 6, 8, 10);\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = array(10, 8, 6, 4, 2, 9, 7, 5, 3, 1);\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20);\nprint_r(strange_sort_list($lst));\necho '<br>\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "<br>" in /tmp/tmpen9t6yrt.php
    on line 50

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $lst = array_unique($lst);\n    sort($lst);\n    $count\
    \ = count($lst);\n    $i = 0;\n    $j = $count - 1;\n    while ($i < $count) {\n\
    \        $result[] = $lst[$i];\n        if ($j > $i) {\n            $result[]\
    \ = $lst[$j];\n            $j--;\n        }\n        $i++;\n    }\n    return\
    \ $result;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n    [4]\
    \ => 3\n    [5] => 4\n)\nArray\n(\n    [0] => 5\n)\nArray\n(\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpmopnni0_.php:38\nStack trace:\n\
    #0 /tmp/tmpmopnni0_.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpmopnni0_.php\
    \ on line 38\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (count($lst) == 0) {\n        return $lst;\n    }\n    $result = array();\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    $lst = array_values($lst);\n\
    \    while (count($lst) > 0) {\n        $min = min($lst);\n        $max = max($lst);\n\
    \        $result[] = $min;\n        $result[] = $max;\n        $lst = array_diff($lst,\
    \ array($min, $max));\n        $lst = array_values($lst);\n    }\n    return $result;\n\
    }\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp_hkupu33.php:41\nStack\
    \ trace:\n#0 /tmp/tmp_hkupu33.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp_hkupu33.php\
    \ on line 41\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    $i = 0;\n    while ($i\
    \ < $count) {\n        $min = min($lst);\n        $result[] = $min;\n        $key\
    \ = array_search($min, $lst);\n        unset($lst[$key]);\n        $max = max($lst);\n\
    \        $result[] = $max;\n        $key = array_search($max, $lst);\n       \
    \ unset($lst[$key]);\n        $i += 2;\n    }\n    return $result;\n}\n\n/*\n\
    \ * Given array of integers, return array in strange order.\nStrange sorting,\
    \ is when you start with the minimum value,\nthen maximum of the remaining integers,\
    \ then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1, 2, 3, 4))\n\
    array(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5, 5, 5, 5)\n\
    >>> strange_sort_list(array())\narray()\n */\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmp4w1yrp9x.php:21\nStack trace:\n#0 /tmp/tmp4w1yrp9x.php(21):\
    \ max(Array)\n#1 /tmp/tmp4w1yrp9x.php(43): strange_sort_list(Array)\n#2 /tmp/tmp4w1yrp9x.php(48):\
    \ candidate(Array)\n#3 /tmp/tmp4w1yrp9x.php(58): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmp4w1yrp9x.php on line 21\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $lst_len = count($lst);\n\
    \    $lst_len_half = floor($lst_len / 2);\n    $lst_len_half_plus = $lst_len_half\
    \ + 1;\n    $lst_min = min($lst);\n    $lst_max = max($lst);\n    $lst_min_index\
    \ = array_search($lst_min, $lst);\n    $lst_max_index = array_search($lst_max,\
    \ $lst);\n    $lst_min_index_plus = $lst_min_index + 1;\n    $lst_max_index_plus\
    \ = $lst_max_index + 1;\n    $lst_min_index_plus_half = $lst_min_index_plus +\
    \ $lst_len_half;\n    $lst_max_index_plus_half = $lst_max_index_plus + $lst_len_half;\n\
    \    $lst_min_index_plus_half_plus = $lst_min_index_plus_half + 1;\n    $lst_max_index_plus_half_plus\
    \ = $lst_max_index_plus_half + 1;\n    $lst_min_index_plus_half_plus_minus = $lst_min_index_plus_half_plus\
    \ - 1;\n    $lst_max_index_plus_half_plus_minus = $lst_max_index_plus_half_plus\
    \ - 1;\n    $lst_min_index_plus_half_plus_minus_half = $lst_min_index_plus_half_plus_minus\
    \ - $lst_len_half;\n    $lst_max_index_plus_half_plus_minus_half = $lst_max_index_plus_half_plus_minus\
    \ - $lst_len_half;\n    $lst_min_index_plus_half_plus_minus_half_plus = $lst_min_index_plus_half_plus_minus_half\
    \ + 1;\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmpvi1vm0cq.php on line 50

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    if ($count == 0) {\n  \
    \      return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $result[] = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, [$min,\
    \ $max]);\n    $count = count($lst);\n    if ($count == 0) {\n        return $result;\n\
    \    }\n    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n\
    \    $result[] = $max;\n    $lst = array_diff($lst, [$min, $max]);\n    $count\
    \ = count($lst);\n    if ($count == 0) {\n        return $result;\n    }\n   \
    \ $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, [$min, $max]);\n    $count = count($lst);\n\
    \    if ($count == 0) {\n        return $result;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result[] = $min;\n    $result[] = $max;\n    $lst\
    \ = array_diff($lst, [$min, $max]);\n    $count = count($lst);\n    if ($count\
    \ == 0) {\n        return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $result[] = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, [$min,\
    \ $max]);\n    $count = count($lst);\n    if ($count == 0) {\n        return $result;\n\
    \    }\n    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n\
    \    $result[] = $max;\n    $lst = array_diff($\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp6xdmmzz7.php on line 68

    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n    $result\
    \ = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j) {\n    \
    \    $result[] = $lst[$i];\n        if ($i != $j) {\n            $result[] = $lst[$j];\n\
    \        }\n        $i++;\n        $j--;\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp03yapnrn.php:40\nStack trace:\n#0 /tmp/tmp03yapnrn.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmp03yapnrn.php on line 40\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result = array();\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    $lst = array_values($lst);\n\
    \    $result = array_merge($result, strange_sort_list($lst));\n    return $result;\n\
    }\n\n$lst = array(1, 2, 3, 4);\nvar_dump(strange_sort_list($lst));\n$lst = array(5,\
    \ 5, 5, 5);\nvar_dump(strange_sort_list($lst));\n$lst = array();\nvar_dump(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(4)\n  [2]=>\n  int(2)\n \
    \ [3]=>\n  int(3)\n}\narray(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(0)\
    \ {\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk_no7wig.php:39\n\
    Stack trace:\n#0 /tmp/tmpk_no7wig.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpk_no7wig.php\
    \ on line 39\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $lst = array_unique($lst);\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $lst = array_diff($lst, [$min, $max]);\n    $result[]\
    \ = $min;\n    $result[] = $max;\n    while (count($lst) > 0) {\n        $min\
    \ = min($lst);\n        $max = max($lst);\n        $lst = array_diff($lst, [$min,\
    \ $max]);\n        $result[] = $min;\n        $result[] = $max;\n    }\n    return\
    \ $result;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n)\n\nFatal error: Uncaught ValueError: min(): Argument\
    \ #1 ($value) must contain at least one element in /tmp/tmpv00c7s0n.php:15\nStack\
    \ trace:\n#0 /tmp/tmpv00c7s0n.php(15): min(Array)\n#1 /tmp/tmpv00c7s0n.php(32):\
    \ strange_sort_list(Array)\n#2 {main}\n  thrown in /tmp/tmpv00c7s0n.php on line\
    \ 15\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return [];\n    }\n    sort($lst);\n    $result\
    \ = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j) {\n    \
    \    $result[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n         \
    \   $result[] = $lst[$j];\n            $j--;\n        }\n    }\n    return $result;\n\
    }\n\n/* Given array of integers, return array in strange order.\nStrange sorting,\
    \ is when you start with the minimum value,\nthen maximum of the remaining integers,\
    \ then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1, 2, 3, 4))\n\
    array(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5, 5, 5, 5)\n\
    >>> strange_sort_list(array())\narray()*/\nfunction candidate(...$args) {\n  \
    \  return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = array();\n    $count = count($lst);\n    $i = 0;\n    while\
    \ ($i < $count) {\n        $min = min($lst);\n        $max = max($lst);\n    \
    \    $result[] = $min;\n        $result[] = $max;\n        $i += 2;\n        $lst\
    \ = array_diff($lst, array($min, $max));\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list(array(1,\
    \ 2, 3, 4)));\nprint_r(strange_sort_list(array(5, 5, 5, 5)));\nprint_r(strange_sort_list(array()));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at\
    \ least one element in /tmp/tmp707h2s2j.php:17\nStack trace:\n#0 /tmp/tmp707h2s2j.php(17):\
    \ min(Array)\n#1 /tmp/tmp707h2s2j.php(28): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmp707h2s2j.php on line 17\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    while (!empty($lst)) {\n        $min = min($lst);\n\
    \        $result[] = $min;\n        $lst = array_diff($lst, [$min]);\n       \
    \ $max = max($lst);\n        $result[] = $max;\n        $lst = array_diff($lst,\
    \ [$max]);\n    }\n    return $result;\n}\n\n/* Given a string, return a new string\
    \ where the first and last chars have been exchanged.\nExamples:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpibi6_gz5.php:18\nStack trace:\n#0 /tmp/tmpibi6_gz5.php(18):\
    \ max(Array)\n#1 /tmp/tmpibi6_gz5.php(34): strange_sort_list(Array)\n#2 /tmp/tmpibi6_gz5.php(39):\
    \ candidate(Array)\n#3 /tmp/tmpibi6_gz5.php(49): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpibi6_gz5.php on line 18\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n\tif (count($lst) == 0) return $lst;\n\t$min = min($lst);\n\t$max = max($lst);\n\
    \t$res = array();\n\t$res[] = $min;\n\t$res[] = $max;\n\t$lst = array_diff($lst,\
    \ array($min, $max));\n\twhile (count($lst) > 0) {\n\t\t$min = min($lst);\n\t\t\
    $max = max($lst);\n\t\t$res[] = $min;\n\t\t$res[] = $max;\n\t\t$lst = array_diff($lst,\
    \ array($min, $max));\n\t}\n\treturn $res;\n}\n\n/* Given array of integers, return\
    \ array in strange order.\nStrange sorting, is when you start with the minimum\
    \ value,\nthen maximum of the remaining integers, then minimum and so on.\nExamples:\n\
    >>> strange_sort_list(array(1, 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5,\
    \ 5, 5, 5))\narray(5, 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvzojtgp7.php:46\n\
    Stack trace:\n#0 /tmp/tmpvzojtgp7.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpvzojtgp7.php\
    \ on line 46\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    $i = 0;\n    $j = 0;\n\
    \    while (count($result) < $count) {\n        $min = min($lst);\n        $max\
    \ = max($lst);\n        if ($i % 2 == 0) {\n            $result[] = $min;\n  \
    \          $lst = array_diff($lst, [$min]);\n        } else {\n            $result[]\
    \ = $max;\n            $lst = array_diff($lst, [$max]);\n        }\n        $i++;\n\
    \    }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at\
    \ least one element in /tmp/tmptars0xah.php:18\nStack trace:\n#0 /tmp/tmptars0xah.php(18):\
    \ min(Array)\n#1 /tmp/tmptars0xah.php(35): strange_sort_list(Array)\n#2 /tmp/tmptars0xah.php(43):\
    \ candidate(Array)\n#3 /tmp/tmptars0xah.php(50): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmptars0xah.php on line 18\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $result[]\
    \ = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, [$min, $max]);\n\
    \    while (count($lst) > 0) {\n        $min = min($lst);\n        $max = max($lst);\n\
    \        $result[] = $min;\n        $result[] = $max;\n        $lst = array_diff($lst,\
    \ [$min, $max]);\n    }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpi9b69mhk.php:37\nStack\
    \ trace:\n#0 /tmp/tmpi9b69mhk.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpi9b69mhk.php\
    \ on line 37\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $lst = array_diff($lst, [$min]);\n            $min = min($lst);\n\
    \        } else {\n            $result[] = $max;\n            $lst = array_diff($lst,\
    \ [$max]);\n            $max = max($lst);\n        }\n        $i++;\n    }\n \
    \   return $result;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmptyjx6y5l.php:25\nStack trace:\n#0 /tmp/tmptyjx6y5l.php(25):\
    \ max(Array)\n#1 /tmp/tmptyjx6y5l.php(32): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmptyjx6y5l.php on line 25\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (!$lst) return $lst;\n    $lst = array_unique($lst);\n    sort($lst);\n\
    \    $res = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j)\
    \ {\n        $res[] = $lst[$i];\n        if ($i != $j) {\n            $res[] =\
    \ $lst[$j];\n        }\n        $i++;\n        $j--;\n    }\n    return $res;\n\
    }\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp9axmqgtr.php:42\nStack trace:\n#0 /tmp/tmp9axmqgtr.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9axmqgtr.php on line 42\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $new_lst = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i\
    \ = 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n          \
    \  $new_lst[] = $min;\n            $key = array_search($min, $lst);\n        \
    \    unset($lst[$key]);\n            $min = min($lst);\n        } else {\n   \
    \         $new_lst[] = $max;\n            $key = array_search($max, $lst);\n \
    \           unset($lst[$key]);\n            $max = max($lst);\n        }\n   \
    \     $i++;\n    }\n    return $new_lst;\n}\nprint_r(strange_sort_list([1, 2,\
    \ 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpan_ajkd3.php:27\nStack trace:\n#0 /tmp/tmpan_ajkd3.php(27):\
    \ max(Array)\n#1 /tmp/tmpan_ajkd3.php(33): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpan_ajkd3.php on line 27\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $lst = array_unique($lst);\n    sort($lst);\n    $count\
    \ = count($lst);\n    $i = 0;\n    while ($i < $count) {\n        $result[] =\
    \ $lst[$i];\n        $i++;\n        if ($i < $count) {\n            $result[]\
    \ = $lst[$count - $i];\n            $i++;\n        }\n    }\n    return $result;\n\
    }\n\n/*\n * Tests\n */\nassert_options(ASSERT_BAIL, 1);\n\n$tests = [\n    [[1,\
    \ 2, 3, 4], [1, 4, 2, 3]],\n    [[5, 5, 5, 5], [5, 5, 5, 5]],\n    [[], []],\n\
    \    [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]],\n   \
    \ [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6]],\n\
    \    [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 12, 2, 11, 3, 10, 4, 9, 5,\
    \ 8, 6, 7]],\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 13, 2, 12,\
    \ 3, 11, 4, 10, 5, 9, 6, 8, 7]],\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14], [1, 14, 2, 13, 3, 12, 4, 11, 5, 10, 6, 9, 7, 8]],\n    [[1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [1, 15, 2, 14, 3, 13, 4, 12, 5, 11,\
    \ 6,\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpxmm_65mb.php on line 44

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $result = [];\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, [$min, $max]);\n    while (!empty($lst))\
    \ {\n        $min = min($lst);\n        $max = max($lst);\n        $result[] =\
    \ $min;\n        $result[] = $max;\n        $lst = array_diff($lst, [$min, $max]);\n\
    \    }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpbtukromq.php:40\nStack\
    \ trace:\n#0 /tmp/tmpbtukromq.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpbtukromq.php\
    \ on line 40\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $len = count($lst);\n    $i = 0;\n    $j = $len -\
    \ 1;\n    while ($i <= $j) {\n        $result[] = $lst[$i];\n        if ($i !=\
    \ $j) {\n            $result[] = $lst[$j];\n        }\n        $i++;\n       \
    \ $j--;\n    }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmplhb88h3s.php:38\nStack\
    \ trace:\n#0 /tmp/tmplhb88h3s.php(46): test()\n#1 {main}\n  thrown in /tmp/tmplhb88h3s.php\
    \ on line 38\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) return $lst;\n    $lst = array_unique($lst);\n    $res\
    \ = array();\n    $min = min($lst);\n    $max = max($lst);\n    $res[] = $min;\n\
    \    $lst = array_diff($lst, array($min));\n    while (!empty($lst)) {\n     \
    \   $res[] = $max;\n        $lst = array_diff($lst, array($max));\n        if\
    \ (empty($lst)) break;\n        $res[] = $min;\n        $lst = array_diff($lst,\
    \ array($min));\n        if (empty($lst)) break;\n        $min = min($lst);\n\
    \        $max = max($lst);\n    }\n    return $res;\n}\n\n$lst = array(1, 2, 3,\
    \ 4);\nprint_r(strange_sort_list($lst));\necho \"\\n\";\n$lst = array(5, 5, 5,\
    \ 5);\nprint_r(strange_sort_list($lst));\necho \"\\n\";\n$lst = array();\nprint_r(strange_sort_list($lst));\n\
    echo \"\\n\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nprint_r(strange_sort_list($lst));\n\
    echo \"\\n\";\n$lst = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\nprint_r(strange_sort_list($lst));\n\
    echo \"\\n\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20);\nprint_r(strange_sort_list($lst));\necho \"\\n\";\n$lst\
    \ = array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1);\nprint_r(strange_sort_list\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpw93c1vxg.php
    on line 53

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    $i = 0;\n    while ($i\
    \ < $count) {\n        $min = min($lst);\n        $result[] = $min;\n        $key\
    \ = array_search($min, $lst);\n        unset($lst[$key]);\n        $max = max($lst);\n\
    \        $result[] = $max;\n        $key = array_search($max, $lst);\n       \
    \ unset($lst[$key]);\n        $i += 2;\n    }\n    return $result;\n}\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain at\
    \ least one element in /tmp/tmpiqlp_88p.php:21\nStack trace:\n#0 /tmp/tmpiqlp_88p.php(21):\
    \ max(Array)\n#1 /tmp/tmpiqlp_88p.php(33): strange_sort_list(Array)\n#2 /tmp/tmpiqlp_88p.php(38):\
    \ candidate(Array)\n#3 /tmp/tmpiqlp_88p.php(48): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpiqlp_88p.php on line 21\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    $min = min($lst);\n   \
    \ $max = max($lst);\n    if ($count == 0) {\n        return $result;\n    }\n\
    \    if ($count == 1) {\n        return $lst;\n    }\n    if ($count == 2) {\n\
    \        return [$min, $max];\n    }\n    if ($count == 3) {\n        return [$min,\
    \ $max, $lst[1]];\n    }\n    if ($count == 4) {\n        return [$min, $max,\
    \ $lst[1], $lst[2]];\n    }\n    if ($count == 5) {\n        return [$min, $max,\
    \ $lst[1], $lst[2], $lst[3]];\n    }\n    if ($count == 6) {\n        return [$min,\
    \ $max, $lst[1], $lst[2], $lst[3], $lst[4]];\n    }\n    if ($count == 7) {\n\
    \        return [$min, $max, $lst[1], $lst[2], $lst[3], $lst[4], $lst[5]];\n \
    \   }\n    if ($count == 8) {\n        return [$min, $max, $lst[1], $lst[2], $lst[3],\
    \ $lst[4], $lst[5], $lst[6]];\n    }\n    if ($count == 9) {\n        return [$min,\
    \ $max, $lst[1], $lst[2], $lst[3], $lst[4], $lst[5], $lst[6], $lst[7]];\n    }\n\
    \    if ($count == 10) {\n        return [$min, $max, $lst[1], $lst[2], $lst[3],\
    \ $lst[4], $lst[5], $lst[6], $lst[7], $lst[8]];\n    }\n    if ($count == 11)\
    \ {\n        return [$min, $\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpi7_afd6h.php on line 52

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $min\
    \ = min($lst);\n            $result[] = $min;\n            $key = array_search($min,\
    \ $lst);\n            unset($lst[$key]);\n        } else {\n            $max =\
    \ max($lst);\n            $result[] = $max;\n            $key = array_search($max,\
    \ $lst);\n            unset($lst[$key]);\n        }\n        $i++;\n    }\n  \
    \  return $result;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\n\nFatal error: Uncaught\
    \ ValueError: min(): Argument #1 ($value) must contain at least one element in\
    \ /tmp/tmpwk_b4frf.php:14\nStack trace:\n#0 /tmp/tmpwk_b4frf.php(14): min(Array)\n\
    #1 /tmp/tmpwk_b4frf.php(36): strange_sort_list(Array)\n#2 {main}\n  thrown in\
    \ /tmp/tmpwk_b4frf.php on line 14\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $key = array_search($min, $lst);\n            unset($lst[$key]);\n\
    \            $min = min($lst);\n        } else {\n            $result[] = $max;\n\
    \            $key = array_search($max, $lst);\n            unset($lst[$key]);\n\
    \            $max = max($lst);\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpjklppoqj.php:27\nStack trace:\n#0 /tmp/tmpjklppoqj.php(27):\
    \ max(Array)\n#1 /tmp/tmpjklppoqj.php(34): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpjklppoqj.php on line 27\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = array();\n    $len = count($lst);\n    $i = 0;\n    while ($i\
    \ < $len) {\n        $min = min($lst);\n        $result[] = $min;\n        $lst\
    \ = array_diff($lst, array($min));\n        if ($lst) {\n            $max = max($lst);\n\
    \            $result[] = $max;\n            $lst = array_diff($lst, array($max));\n\
    \        }\n        $i++;\n    }\n    return $result;\n}\n\n$lst = array(1, 2,\
    \ 3, 4);\n$result = strange_sort_list($lst);\nprint_r($result);\n\n$lst = array(5,\
    \ 5, 5, 5);\n$result = strange_sort_list($lst);\nprint_r($result);\n\n$lst = array();\n\
    $result = strange_sort_list($lst);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmprqpstzuh.php:17\nStack trace:\n#0 /tmp/tmprqpstzuh.php(17):\
    \ min(Array)\n#1 /tmp/tmprqpstzuh.php(31): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmprqpstzuh.php on line 17\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    $min = min($lst);\n   \
    \ $max = max($lst);\n    $i = 0;\n    $j = 1;\n    while ($i < $count) {\n   \
    \     $result[$i] = $min;\n        $i += 2;\n        $min = min(array_diff($lst,\
    \ $result));\n    }\n    while ($j < $count) {\n        $result[$j] = $max;\n\
    \        $j += 2;\n        $max = max(array_diff($lst, $result));\n    }\n   \
    \ return $result;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpa79_jdeo.php:27\nStack trace:\n#0 /tmp/tmpa79_jdeo.php(27):\
    \ max(Array)\n#1 /tmp/tmpa79_jdeo.php(32): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpa79_jdeo.php on line 27\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result = array($min);\n    $lst = array_diff($lst,\
    \ array($min));\n    while (!empty($lst)) {\n        $max = max($lst);\n     \
    \   $result[] = $max;\n        $lst = array_diff($lst, array($max));\n       \
    \ if (empty($lst)) {\n            break;\n        }\n        $min = min($lst);\n\
    \        $result[] = $min;\n        $lst = array_diff($lst, array($min));\n  \
    \  }\n    return $result;\n}\n\nprint_r(strange_sort_list(array(1, 2, 3, 4)));\n\
    echo '<br>';\nprint_r(strange_sort_list(array(5, 5, 5, 5)));\necho '<br>';\nprint_r(strange_sort_list(array()));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n<br>Array\n\
    (\n    [0] => 5\n)\n<br>Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_1zwkwkz.php:48\nStack trace:\n#0 /tmp/tmp_1zwkwkz.php(55): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_1zwkwkz.php on line 48\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (count($lst) == 0) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $new_lst = array();\n    $new_lst[] = $min;\n    $new_lst[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    $lst = array_values($lst);\n\
    \    while (count($lst) > 0) {\n        $min = min($lst);\n        $max = max($lst);\n\
    \        $new_lst[] = $min;\n        $new_lst[] = $max;\n        $lst = array_diff($lst,\
    \ array($min, $max));\n        $lst = array_values($lst);\n    }\n    return $new_lst;\n\
    }\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\necho \"\\n\"\
    ;\n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\necho \"\\n\"\
    ;\n$lst = array();\nprint_r(strange_sort_list($lst));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Array\n(\n    [0] => 5\n    [1] => 5\n)\n\nArray\n(\n)\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpeq6kwzv7.php:49\nStack trace:\n#0 /tmp/tmpeq6kwzv7.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpeq6kwzv7.php on line 49\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    $i = 0;\n    while ($i\
    \ < $count) {\n        $min = min($lst);\n        $result[] = $min;\n        $key\
    \ = array_search($min, $lst);\n        unset($lst[$key]);\n        $max = max($lst);\n\
    \        $result[] = $max;\n        $key = array_search($max, $lst);\n       \
    \ unset($lst[$key]);\n        $i += 2;\n    }\n    return $result;\n}\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain at\
    \ least one element in /tmp/tmpiqlp_88p.php:21\nStack trace:\n#0 /tmp/tmpiqlp_88p.php(21):\
    \ max(Array)\n#1 /tmp/tmpiqlp_88p.php(33): strange_sort_list(Array)\n#2 /tmp/tmpiqlp_88p.php(38):\
    \ candidate(Array)\n#3 /tmp/tmpiqlp_88p.php(48): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpiqlp_88p.php on line 21\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    sort($lst);\n    $i = 0;\n    $j = count($lst) - 1;\n\
    \    while ($i <= $j) {\n        $result[] = $lst[$i];\n        $i++;\n      \
    \  if ($i <= $j) {\n            $result[] = $lst[$j];\n            $j--;\n   \
    \     }\n    }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $key = array_search($min, $lst);\n            unset($lst[$key]);\n\
    \            $min = min($lst);\n        } else {\n            $result[] = $max;\n\
    \            $key = array_search($max, $lst);\n            unset($lst[$key]);\n\
    \            $max = max($lst);\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpxxrk98y7.php:27\nStack trace:\n#0 /tmp/tmpxxrk98y7.php(27):\
    \ max(Array)\n#1 /tmp/tmpxxrk98y7.php(35): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpxxrk98y7.php on line 27\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    sort($lst);\n  \
    \  $res = array();\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j)\
    \ {\n        $res[] = $lst[$i];\n        if ($i != $j) {\n            $res[] =\
    \ $lst[$j];\n        }\n        $i++;\n        $j--;\n    }\n    return $res;\n\
    }\n\n/* Given array of integers, return array in strange order.\nStrange sorting,\
    \ is when you start with the minimum value,\nthen maximum of the remaining integers,\
    \ then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1, 2, 3, 4))\n\
    array(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5, 5, 5, 5)\n\
    >>> strange_sort_list(array())\narray()*/\nfunction candidate(...$args) {\n  \
    \  return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $result = array();\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    while (!empty($lst))\
    \ {\n        $min = min($lst);\n        $max = max($lst);\n        $result[] =\
    \ $min;\n        $result[] = $max;\n        $lst = array_diff($lst, array($min,\
    \ $max));\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_sx3pyas.php:38\n\
    Stack trace:\n#0 /tmp/tmp_sx3pyas.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp_sx3pyas.php\
    \ on line 38\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n    $result\
    \ = [];\n    $count = count($lst);\n    $i = 0;\n    while ($i < $count) {\n \
    \       $result[] = $lst[$i];\n        if ($i + 1 < $count) {\n            $result[]\
    \ = $lst[$count - $i - 1];\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n    [4]\
    \ => 3\n    [5] => 2\n    [6] => 4\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpya5dvbx8.php:35\nStack trace:\n#0 /tmp/tmpya5dvbx8.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpya5dvbx8.php on line 35\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $key = array_search($min, $lst);\n            unset($lst[$key]);\n\
    \            $min = min($lst);\n        } else {\n            $result[] = $max;\n\
    \            $key = array_search($max, $lst);\n            unset($lst[$key]);\n\
    \            $max = max($lst);\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\n/* Given array of integers, return array in strange order.\nStrange sorting,\
    \ is when you start with the minimum value,\nthen maximum of the remaining integers,\
    \ then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1, 2, 3, 4))\n\
    array(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5, 5, 5, 5)\n\
    >>> strange_sort_list(array())\narray()*/\nfunction candidate(...$args) {\n  \
    \  return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpap4y7pmn.php:27\nStack trace:\n#0 /tmp/tmpap4y7pmn.php(27):\
    \ max(Array)\n#1 /tmp/tmpap4y7pmn.php(45): strange_sort_list(Array)\n#2 /tmp/tmpap4y7pmn.php(49):\
    \ candidate(Array)\n#3 /tmp/tmpap4y7pmn.php(60): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpap4y7pmn.php on line 27\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $res = [];\n    $len = count($lst);\n    $i = 0;\n    while ($i < $len)\
    \ {\n        $min = min($lst);\n        $max = max($lst);\n        if ($i % 2\
    \ == 0) {\n            $res[] = $min;\n            $lst = array_diff($lst, [$min]);\n\
    \        } else {\n            $res[] = $max;\n            $lst = array_diff($lst,\
    \ [$max]);\n        }\n        $i++;\n    }\n    return $res;\n}\n\n/*\n * Given\
    \ array of integers, return array in strange order.\n * Strange sorting, is when\
    \ you start with the minimum value,\n * then maximum of the remaining integers,\
    \ then minimum and so on.\n * Examples:\n * >>> strange_sort_list(array(1, 2,\
    \ 3, 4))\n * array(1, 4, 2, 3)\n * >>> strange_sort_list(array(5, 5, 5, 5))\n\
    \ * array(5, 5, 5, 5)\n * >>> strange_sort_list(array())\n * array()\n */\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpkxx3nczc.php:17\nStack trace:\n#0 /tmp/tmpkxx3nczc.php(17):\
    \ min(Array)\n#1 /tmp/tmpkxx3nczc.php(44): strange_sort_list(Array)\n#2 /tmp/tmpkxx3nczc.php(52):\
    \ candidate(Array)\n#3 /tmp/tmpkxx3nczc.php(59): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpkxx3nczc.php on line 17\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return [];\n    }\n    sort($lst);\n    $result\
    \ = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j) {\n    \
    \    $result[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n         \
    \   $result[] = $lst[$j];\n            $j--;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (count($lst) == 0) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $new_lst = [];\n    $i = 0;\n    while (count($lst)\
    \ > 0) {\n        if ($i % 2 == 0) {\n            $new_lst[] = min($lst);\n  \
    \          $key = array_search(min($lst), $lst);\n            unset($lst[$key]);\n\
    \        } else {\n            $new_lst[] = max($lst);\n            $key = array_search(max($lst),\
    \ $lst);\n            unset($lst[$key]);\n        }\n        $i++;\n    }\n  \
    \  return $new_lst;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (count($lst) == 0) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result = array();\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    $lst = array_values($lst);\n\
    \    while (count($lst) > 0) {\n        $min = min($lst);\n        $max = max($lst);\n\
    \        $result[] = $min;\n        $result[] = $max;\n        $lst = array_diff($lst,\
    \ array($min, $max));\n        $lst = array_values($lst);\n    }\n    return $result;\n\
    }\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\necho \"<br>\"\
    ;\n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\necho \"<br>\"\
    ;\n$lst = array();\nprint_r(strange_sort_list($lst));\necho \"<br>\";\n$lst =\
    \ array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nprint_r(strange_sort_list($lst));\necho\
    \ \"<br>\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(1, 2,\nfunction candidate(...$args) {\n    return\
    \ strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpch081qy9.php on line 56

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if(empty($lst)) return $lst;\n    $lst = array_unique($lst);\n    $lst\
    \ = array_values($lst);\n    $res = [];\n    $i = 0;\n    $j = count($lst) - 1;\n\
    \    while($i <= $j) {\n        $res[] = $lst[$i];\n        if($i != $j) $res[]\
    \ = $lst[$j];\n        $i++;\n        $j--;\n    }\n    return $res;\n}\n\n$lst\
    \ = [1, 2, 3, 4];\n$lst = [5, 5, 5, 5];\n$lst = [];\nprint_r(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5qj5dy93.php:40\n\
    Stack trace:\n#0 /tmp/tmp5qj5dy93.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp5qj5dy93.php\
    \ on line 40\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    if ($count == 0) {\n  \
    \      return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $result[] = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, [$min,\
    \ $max]);\n    while (count($lst) > 0) {\n        $min = min($lst);\n        $max\
    \ = max($lst);\n        $result[] = $min;\n        $result[] = $max;\n       \
    \ $lst = array_diff($lst, [$min, $max]);\n    }\n    return $result;\n}\n\n$lst\
    \ = [1, 2, 3, 4];\nvar_dump(strange_sort_list($lst));\n$lst = [5, 5, 5, 5];\n\
    var_dump(strange_sort_list($lst));\n$lst = [];\nvar_dump(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [1]=>\n  int(4)\n  [2]=>\n  int(2)\n \
    \ [3]=>\n  int(3)\n}\narray(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(0)\
    \ {\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbch02wf.php:45\n\
    Stack trace:\n#0 /tmp/tmpcbch02wf.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpcbch02wf.php\
    \ on line 45\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result = array();\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    while (!empty($lst))\
    \ {\n        $min = min($lst);\n        $max = max($lst);\n        $result[] =\
    \ $min;\n        $result[] = $max;\n        $lst = array_diff($lst, array($min,\
    \ $max));\n    }\n    return $result;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\necho\
    \ '<br>';\n$lst = array();\nprint_r(strange_sort_list($lst));\necho '<br>';\n\
    $lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20);\nprint_r(strange_sort_list($lst));\necho '<br>';\n$lst\
    \ = array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1);\nprint_r(strange_sort_list($lst));\necho '<br>';\n$lst = array(1\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpn6sajno7.php
    on line 54

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (count($lst) == 0) return $lst;\n    $min = min($lst);\n    $max =\
    \ max($lst);\n    $lst = array_diff($lst, array($min, $max));\n    $lst = array_values($lst);\n\
    \    $lst = array_merge(array($min), $lst);\n    $lst = array_merge($lst, array($max));\n\
    \    return $lst;\n}\n\n/* Given array of integers, return array in strange order.\n\
    Strange sorting, is when you start with the minimum value,\nthen maximum of the\
    \ remaining integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfzhtaj52.php:38\n\
    Stack trace:\n#0 /tmp/tmpfzhtaj52.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpfzhtaj52.php\
    \ on line 38\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $result = [];\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $lst = array_diff($lst, [$min,\
    \ $max]);\n    $result[] = $min;\n    $result[] = $max;\n    while (!empty($lst))\
    \ {\n        $min = min($lst);\n        $max = max($lst);\n        $lst = array_diff($lst,\
    \ [$min, $max]);\n        $result[] = $min;\n        $result[] = $max;\n    }\n\
    \    return $result;\n}\n\n/* Given array of integers, return array in strange\
    \ order.\nStrange sorting, is when you start with the minimum value,\nthen maximum\
    \ of the remaining integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfqr7mfhu.php:48\n\
    Stack trace:\n#0 /tmp/tmpfqr7mfhu.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpfqr7mfhu.php\
    \ on line 48\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $lst = array_unique($lst);\n    sort($lst);\n    $len\
    \ = count($lst);\n    for ($i = 0; $i < $len; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            $result[] = array_shift($lst);\n        } else {\n          \
    \  $result[] = array_pop($lst);\n        }\n    }\n    return $result;\n}\n\n\
    /* Given array of integers, return array in strange order.\nStrange sorting, is\
    \ when you start with the minimum value,\nthen maximum of the remaining integers,\
    \ then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1, 2, 3, 4))\n\
    array(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5, 5, 5, 5)\n\
    >>> strange_sort_list(array())\narray()*/\nfunction candidate(...$args) {\n  \
    \  return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptl335_6r.php:46\n\
    Stack trace:\n#0 /tmp/tmptl335_6r.php(53): test()\n#1 {main}\n  thrown in /tmp/tmptl335_6r.php\
    \ on line 46\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    sort($lst);\n    $result = [];\n    $i = 0;\n    $j = count($lst) - 1;\n\
    \    while ($i <= $j) {\n        $result[] = $lst[$i];\n        $i++;\n      \
    \  if ($i <= $j) {\n            $result[] = $lst[$j];\n            $j--;\n   \
    \     }\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1, 2, 3,\
    \ 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    if ($count == 0) {\n  \
    \      return $result;\n    }\n    sort($lst);\n    $i = 0;\n    $j = $count -\
    \ 1;\n    while ($i <= $j) {\n        $result[] = $lst[$i];\n        $i++;\n \
    \       if ($i <= $j) {\n            $result[] = $lst[$j];\n            $j--;\n\
    \        }\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1, 2,\
    \ 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $lst_len = count($lst);\n    if ($lst_len == 0) {\n        return $lst;\n\
    \    }\n    $min = min($lst);\n    $max = max($lst);\n    $result = array();\n\
    \    $result[] = $min;\n    $lst = array_diff($lst, array($min));\n    $lst_len\
    \ = count($lst);\n    if ($lst_len == 0) {\n        return $result;\n    }\n \
    \   $result[] = $max;\n    $lst = array_diff($lst, array($max));\n    $lst_len\
    \ = count($lst);\n    if ($lst_len == 0) {\n        return $result;\n    }\n \
    \   while (count($lst) > 0) {\n        $min = min($lst);\n        $result[] =\
    \ $min;\n        $lst = array_diff($lst, array($min));\n        $lst_len = count($lst);\n\
    \        if ($lst_len == 0) {\n            return $result;\n        }\n      \
    \  $max = max($lst);\n        $result[] = $max;\n        $lst = array_diff($lst,\
    \ array($max));\n        $lst_len = count($lst);\n        if ($lst_len == 0) {\n\
    \            return $result;\n        }\n    }\n    return $result;\n}\n\n$lst\
    \ = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n$lst = array(5, 5,\
    \ 5, 5);\nprint_r(strange_sort_list($lst));\n$lst = array();\nprint_r(strange_sort_list($lst));\n\
    $lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nprint_r(strange_sort_list($lst));\n\
    $lst = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\nprint_r(strange_sort_list($lst\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp3xwykod6.php
    on line 61

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (count($lst) == 0) {\n        return $lst;\n    }\n    $result = array();\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    while (count($lst)\
    \ > 0) {\n        $min = min($lst);\n        $max = max($lst);\n        $result[]\
    \ = $min;\n        $result[] = $max;\n        $lst = array_diff($lst, array($min,\
    \ $max));\n    }\n    return $result;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array();\nprint_r(strange_sort_list($lst));\necho \"<br>\"\
    ;\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(10, 9, 8, 7, 6, 5, 4, 3, 2, 1);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20);\nprint_r(strange_sort_list($lst));\necho \"<br>\";\n$lst\
    \ = array(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1);\nprint_r(strange_sort_list($lst));\necho \"<br>\";\n$lst = array(1,\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp44hvdgnb.php on line 54

    '
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return [];\n    }\n    sort($lst);\n    $result\
    \ = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j) {\n    \
    \    $result[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n         \
    \   $result[] = $lst[$j];\n            $j--;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return [];\n    }\n    sort($lst);\n    $result\
    \ = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j) {\n    \
    \    $result[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n         \
    \   $result[] = $lst[$j];\n            $j--;\n        }\n    }\n    return $result;\n\
    }\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\n$lst = [5, 5, 5,\
    \ 5];\nprint_r(strange_sort_list($lst));\n$lst = [];\nprint_r(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $lst = array_diff($lst, [$min, $max]);\n    return\
    \ array_merge([$min, $max], strange_sort_list($lst));\n}\n\n$lst = [1, 2, 3, 4];\n\
    print_r(strange_sort_list($lst));\nfunction candidate(...$args) {\n    return\
    \ strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpo3utp_54.php:30\nStack\
    \ trace:\n#0 /tmp/tmpo3utp_54.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpo3utp_54.php\
    \ on line 30\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $lst = array_unique($lst);\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result = [];\n    $i = 0;\n\
    \    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $key = array_search($min, $lst);\n            unset($lst[$key]);\n\
    \            $min = min($lst);\n        } else {\n            $result[] = $max;\n\
    \            $key = array_search($max, $lst);\n            unset($lst[$key]);\n\
    \            $max = max($lst);\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\n$lst = [1, 2, 3, 4];\n$lst = [5, 5, 5, 5];\n$lst = [];\n$lst = [1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\
    \ 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\
    \ 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,\
    \ 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,\
    \ 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100];\n\
    $lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmp18uiz4bn.php
    on line 43

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $key = array_search($min, $lst);\n            unset($lst[$key]);\n\
    \            $min = min($lst);\n        } else {\n            $result[] = $max;\n\
    \            $key = array_search($max, $lst);\n            unset($lst[$key]);\n\
    \            $max = max($lst);\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\necho '<pre>';\nprint_r(strange_sort_list(array(1, 2, 3, 4)));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(strange_sort_list(array(5, 5, 5, 5)));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(strange_sort_list(array()));\necho '</pre>';\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must\
    \ contain at least one element in /tmp/tmpppcz8afe.php:27\nStack trace:\n#0 /tmp/tmpppcz8afe.php(27):\
    \ max(Array)\n#1 /tmp/tmpppcz8afe.php(35): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpppcz8afe.php on line 27\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $min_key = array_search($min, $lst);\n            unset($lst[$min_key]);\n\
    \            $min = min($lst);\n        } else {\n            $result[] = $max;\n\
    \            $max_key = array_search($max, $lst);\n            unset($lst[$max_key]);\n\
    \            $max = max($lst);\n        }\n        $i++;\n    }\n    return $result;\n\
    }\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5, 5,\
    \ 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmp483ckbqu.php:27\nStack trace:\n#0 /tmp/tmp483ckbqu.php(27):\
    \ max(Array)\n#1 /tmp/tmp483ckbqu.php(33): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmp483ckbqu.php on line 27\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $res = [];\n    $res[] = $min;\n    $res[] = $max;\n\
    \    $lst = array_diff($lst, [$min, $max]);\n    $lst = array_values($lst);\n\
    \    $res = array_merge($res, strange_sort_list($lst));\n    return $res;\n}\n\
    \nprint_r(strange_sort_list([1, 2, 3, 4]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp9cjgy_yg.php:34\nStack\
    \ trace:\n#0 /tmp/tmp9cjgy_yg.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp9cjgy_yg.php\
    \ on line 34\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    $i = 0;\n    while ($i\
    \ < $count) {\n        $min = min($lst);\n        $result[] = $min;\n        $key\
    \ = array_search($min, $lst);\n        unset($lst[$key]);\n        $max = max($lst);\n\
    \        $result[] = $max;\n        $key = array_search($max, $lst);\n       \
    \ unset($lst[$key]);\n        $i += 2;\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain at\
    \ least one element in /tmp/tmpoqi5udcv.php:21\nStack trace:\n#0 /tmp/tmpoqi5udcv.php(21):\
    \ max(Array)\n#1 /tmp/tmpoqi5udcv.php(34): strange_sort_list(Array)\n#2 /tmp/tmpoqi5udcv.php(39):\
    \ candidate(Array)\n#3 /tmp/tmpoqi5udcv.php(49): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpoqi5udcv.php on line 21\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $result[]\
    \ = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, [$min, $max]);\n\
    \    while (count($lst) > 0) {\n        $min = min($lst);\n        $max = max($lst);\n\
    \        $result[] = $min;\n        $result[] = $max;\n        $lst = array_diff($lst,\
    \ [$min, $max]);\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxyci96h0.php:35\n\
    Stack trace:\n#0 /tmp/tmpxyci96h0.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpxyci96h0.php\
    \ on line 35\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    $i = 0;\n    while ($i\
    \ < $count) {\n        $min = min($lst);\n        $result[] = $min;\n        $key\
    \ = array_search($min, $lst);\n        unset($lst[$key]);\n        $max = max($lst);\n\
    \        $result[] = $max;\n        $key = array_search($max, $lst);\n       \
    \ unset($lst[$key]);\n        $i += 2;\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain at\
    \ least one element in /tmp/tmpoqi5udcv.php:21\nStack trace:\n#0 /tmp/tmpoqi5udcv.php(21):\
    \ max(Array)\n#1 /tmp/tmpoqi5udcv.php(34): strange_sort_list(Array)\n#2 /tmp/tmpoqi5udcv.php(39):\
    \ candidate(Array)\n#3 /tmp/tmpoqi5udcv.php(49): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpoqi5udcv.php on line 21\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $lst = array_unique($lst);\n\
    \    sort($lst);\n    $result = [];\n    $i = 0;\n    $j = count($lst) - 1;\n\
    \    while ($i <= $j) {\n        $result[] = $lst[$i];\n        $i++;\n      \
    \  if ($i <= $j) {\n            $result[] = $lst[$j];\n            $j--;\n   \
    \     }\n    }\n    return $result;\n}\n\n/* Given array of integers, return array\
    \ in strange order.\nStrange sorting, is when you start with the minimum value,\n\
    then maximum of the remaining integers, then minimum and so on.\nExamples:\n>>>\
    \ strange_sort_list(array(1, 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5,\
    \ 5, 5, 5))\narray(5, 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdl7qbgt9.php:51\n\
    Stack trace:\n#0 /tmp/tmpdl7qbgt9.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpdl7qbgt9.php\
    \ on line 51\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $lst = array_unique($lst);\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result = [];\n    $i = 0;\n\
    \    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $lst = array_diff($lst, [$min]);\n            $min = min($lst);\n\
    \        } else {\n            $result[] = $max;\n            $lst = array_diff($lst,\
    \ [$max]);\n            $max = max($lst);\n        }\n        $i++;\n    }\n \
    \   return $result;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpun6m0iu9.php:29\nStack trace:\n#0 /tmp/tmpun6m0iu9.php(29):\
    \ max(Array)\n#1 /tmp/tmpun6m0iu9.php(36): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpun6m0iu9.php on line 29\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    if ($count == 0) {\n  \
    \      return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $result[] = $min;\n    $lst = array_diff($lst, [$min]);\n    $count--;\n\
    \    if ($count == 0) {\n        return $result;\n    }\n    $result[] = $max;\n\
    \    $lst = array_diff($lst, [$max]);\n    $count--;\n    if ($count == 0) {\n\
    \        return $result;\n    }\n    while (count($lst) > 0) {\n        $min =\
    \ min($lst);\n        $max = max($lst);\n        $result[] = $min;\n        $lst\
    \ = array_diff($lst, [$min]);\n        if (count($lst) == 0) {\n            return\
    \ $result;\n        }\n        $result[] = $max;\n        $lst = array_diff($lst,\
    \ [$max]);\n    }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\n\
    \n$lst = [5, 5, 5, 5];\nprint_r(strange_sort_list($lst));\n\n$lst = [];\nprint_r(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpqw0zm2_d.php:63\nStack trace:\n#0 /tmp/tmpqw0zm2_d.php(70):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpqw0zm2_d.php on line 63\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n\tif (empty($lst)) {\n\t\treturn $lst;\n\t}\n\t$min = min($lst);\n\t$max\
    \ = max($lst);\n\t$new_lst = array();\n\t$new_lst[] = $min;\n\t$new_lst[] = $max;\n\
    \t$lst = array_diff($lst, array($min, $max));\n\t$lst = array_values($lst);\n\t\
    $new_lst = array_merge($new_lst, strange_sort_list($lst));\n\treturn $new_lst;\n\
    }\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\necho \"\\n\"\
    ;\n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\necho \"\\n\"\
    ;\n$lst = array();\nprint_r(strange_sort_list($lst));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Array\n(\n    [0] => 5\n    [1] => 5\n)\n\nArray\n(\n)\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmph504gs30.php:42\nStack trace:\n#0 /tmp/tmph504gs30.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph504gs30.php on line 42\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    sort($lst);\n  \
    \  $result = [];\n    $start = 0;\n    $end = count($lst) - 1;\n    while ($start\
    \ <= $end) {\n        $result[] = $lst[$start];\n        $start++;\n        if\
    \ ($start <= $end) {\n            $result[] = $lst[$end];\n            $end--;\n\
    \        }\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1, 2,\
    \ 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    sort($lst);\n    $result = [];\n    $i = 0;\n    $j = count($lst) - 1;\n\
    \    while ($i <= $j) {\n        $result[] = $lst[$i];\n        $i++;\n      \
    \  if ($i <= $j) {\n            $result[] = $lst[$j];\n            $j--;\n   \
    \     }\n    }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $lst = array_unique($lst);\n    $result = [];\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $i = 0;\n    while (count($lst) > 0) {\n        if\
    \ ($i % 2 == 0) {\n            $result[] = $min;\n            $key = array_search($min,\
    \ $lst);\n            unset($lst[$key]);\n            $min = min($lst);\n    \
    \    } else {\n            $result[] = $max;\n            $key = array_search($max,\
    \ $lst);\n            unset($lst[$key]);\n            $max = max($lst);\n    \
    \    }\n        $i++;\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmp03lpxjev.php:28\nStack trace:\n#0 /tmp/tmp03lpxjev.php(28):\
    \ max(Array)\n#1 /tmp/tmp03lpxjev.php(35): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmp03lpxjev.php on line 28\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    if ($count == 0) {\n  \
    \      return $result;\n    }\n    if ($count == 1) {\n        return $lst;\n\
    \    }\n    $min = min($lst);\n    $max = max($lst);\n    $min_index = array_search($min,\
    \ $lst);\n    $max_index = array_search($max, $lst);\n    $result[] = $min;\n\
    \    $result[] = $max;\n    unset($lst[$min_index]);\n    unset($lst[$max_index]);\n\
    \    $lst = array_values($lst);\n    $count = count($lst);\n    if ($count ==\
    \ 0) {\n        return $result;\n    }\n    if ($count == 1) {\n        $result[]\
    \ = $lst[0];\n        return $result;\n    }\n    $min = min($lst);\n    $max\
    \ = max($lst);\n    $min_index = array_search($min, $lst);\n    $max_index = array_search($max,\
    \ $lst);\n    $result[] = $min;\n    $result[] = $max;\n    unset($lst[$min_index]);\n\
    \    unset($lst[$max_index]);\n    $lst = array_values($lst);\n    $count = count($lst);\n\
    \    if ($count == 0) {\n        return $result;\n    }\n    if ($count == 1)\
    \ {\n        $result[] = $lst[0];\n        return $result;\n    }\n    $min =\
    \ min($lst);\n    $max = max($lst);\n    $min_index = array_search($min, $lst);\n\
    \    $max_index = array_search($max, $lst);\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    unset($lst[$min_index]);\n    unset($lst[$max_index]);\n    $lst\
    \ = array_values($lst);\n    $count = count($lst);\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 12 in /tmp/tmphe5ti6lc.php on line 81

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $lst_len = count($lst);\n    if ($lst_len == 0) {\n        return $lst;\n\
    \    }\n    $min = min($lst);\n    $max = max($lst);\n    $min_index = array_search($min,\
    \ $lst);\n    $max_index = array_search($max, $lst);\n    $lst[$min_index] = $max;\n\
    \    $lst[$max_index] = $min;\n    $lst_len -= 2;\n    if ($lst_len == 0) {\n\
    \        return $lst;\n    }\n    $lst_min = array_slice($lst, 0, $min_index);\n\
    \    $lst_max = array_slice($lst, $min_index + 1, $lst_len);\n    $lst_min = strange_sort_list($lst_min);\n\
    \    $lst_max = strange_sort_list($lst_max);\n    $lst = array_merge($lst_min,\
    \ array($min), $lst_max, array($max));\n    return $lst;\n}\n$lst = array(1, 2,\
    \ 3, 4);\n$lst = strange_sort_list($lst);\nprint_r($lst);\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 3\n    [2] => 2\n    [3] => 4\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpbockudvg.php:42\nStack\
    \ trace:\n#0 /tmp/tmpbockudvg.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpbockudvg.php\
    \ on line 42\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $lst_len = count($lst);\n    if ($lst_len == 0) {\n        return $lst;\n\
    \    }\n    $lst_min = min($lst);\n    $lst_max = max($lst);\n    $lst_min_index\
    \ = array_search($lst_min, $lst);\n    $lst_max_index = array_search($lst_max,\
    \ $lst);\n    $lst_min_index_new = $lst_min_index + 1;\n    $lst_max_index_new\
    \ = $lst_max_index - 1;\n    if ($lst_len == 1) {\n        return $lst;\n    }\n\
    \    if ($lst_len == 2) {\n        return array($lst_min, $lst_max);\n    }\n\
    \    if ($lst_len == 3) {\n        return array($lst_min, $lst_max, $lst[1]);\n\
    \    }\n    $lst_new = array($lst_min);\n    $lst_new_index = 1;\n    while ($lst_new_index\
    \ < $lst_len) {\n        if ($lst_new_index % 2 == 1) {\n            $lst_new[]\
    \ = $lst[$lst_max_index_new];\n            $lst_max_index_new--;\n        } else\
    \ {\n            $lst_new[] = $lst[$lst_min_index_new];\n            $lst_min_index_new++;\n\
    \        }\n        $lst_new_index++;\n    }\n    return $lst_new;\n}\n\n$lst\
    \ = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\necho \"<br>\";\n$lst\
    \ = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\necho \"<br>\";\n$lst\
    \ = array();\nprint_r(strange_sort_list($lst));\necho \"<br>\";\n$lst = array\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "(" in /tmp/tmp6_99n4wk.php
    on line 57

    '
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    if ($count == 0) {\n  \
    \      return $result;\n    }\n    sort($lst);\n    $i = 0;\n    $j = $count -\
    \ 1;\n    while ($i <= $j) {\n        $result[] = $lst[$i];\n        $i++;\n \
    \       if ($i <= $j) {\n            $result[] = $lst[$j];\n            $j--;\n\
    \        }\n    }\n    return $result;\n}\n\n/*\n * Tests\n */\nassert_options(ASSERT_BAIL,\
    \ 1);\n\n$tests = [\n    [[1, 2, 3, 4], [1, 4, 2, 3]],\n    [[5, 5, 5, 5], [5,\
    \ 5, 5, 5]],\n    [[], []],\n];\n\nforeach ($tests as $test) {\n    list($input,\
    \ $expected) = $test;\n    assert(\n        strange_sort_list($input) === $expected,\n\
    \        json_encode($input) . ' expected ' . json_encode($expected)\n    );\n\
    }\n\necho \"DONE\\n\";\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'DONE

    '
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return [];\n    }\n    sort($lst);\n    $result\
    \ = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j) {\n    \
    \    $result[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n         \
    \   $result[] = $lst[$j];\n            $j--;\n        }\n    }\n    return $result;\n\
    }\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $min = min($lst);\n        } else {\n            $result[]\
    \ = $max;\n            $max = max($lst);\n        }\n        $i++;\n    }\n  \
    \  return $result;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpcfp54fz0.php on line 19

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $res = array($min);\n    $lst = array_diff($lst, array($min));\n\
    \    $lst = array_values($lst);\n    while (!empty($lst)) {\n        $res[] =\
    \ $max;\n        $lst = array_diff($lst, array($max));\n        $lst = array_values($lst);\n\
    \        if (empty($lst)) {\n            break;\n        }\n        $res[] = $min;\n\
    \        $lst = array_diff($lst, array($min));\n        $lst = array_values($lst);\n\
    \    }\n    return $res;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    echo \"\\n\";\n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\n\
    echo \"\\n\";\n$lst = array();\nprint_r(strange_sort_list($lst));\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpw1fynmun.php on line 28

    '
  timestamp: 1660220781
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    if ($count == 0) {\n  \
    \      return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $result[] = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, [$min,\
    \ $max]);\n    $count -= 2;\n    $i = 0;\n    while ($count > 0) {\n        if\
    \ ($i % 2 == 0) {\n            $min = min($lst);\n            $result[] = $min;\n\
    \            $lst = array_diff($lst, [$min]);\n        } else {\n            $max\
    \ = max($lst);\n            $result[] = $max;\n            $lst = array_diff($lst,\
    \ [$max]);\n        }\n        $i++;\n        $count--;\n    }\n    return $result;\n\
    }\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at\
    \ least one element in /tmp/tmpb_7po7n3.php:27\nStack trace:\n#0 /tmp/tmpb_7po7n3.php(27):\
    \ min(Array)\n#1 /tmp/tmpb_7po7n3.php(44): strange_sort_list(Array)\n#2 /tmp/tmpb_7po7n3.php(52):\
    \ candidate(Array)\n#3 /tmp/tmpb_7po7n3.php(59): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpb_7po7n3.php on line 27\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $new_lst = [];\n    $new_lst[] = $min;\n    $new_lst[]\
    \ = $max;\n    $lst = array_diff($lst, [$min, $max]);\n    $lst = array_values($lst);\n\
    \    $lst_len = count($lst);\n    for ($i = 0; $i < $lst_len; $i++) {\n      \
    \  if ($i % 2 == 0) {\n            $new_lst[] = min($lst);\n            $lst =\
    \ array_diff($lst, [min($lst)]);\n        } else {\n            $new_lst[] = max($lst);\n\
    \            $lst = array_diff($lst, [max($lst)]);\n        }\n    }\n    return\
    \ $new_lst;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpd8s1w1yt.php:47\nStack\
    \ trace:\n#0 /tmp/tmpd8s1w1yt.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpd8s1w1yt.php\
    \ on line 47\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $count = count($lst);\n    if ($count == 0) {\n        return $lst;\n\
    \    }\n    $min = min($lst);\n    $max = max($lst);\n    $new_lst = array();\n\
    \    $new_lst[] = $min;\n    $new_lst[] = $max;\n    $count -= 2;\n    $lst =\
    \ array_diff($lst, array($min, $max));\n    $lst = array_values($lst);\n    for\
    \ ($i = 0; $i < $count; $i++) {\n        if ($i % 2 == 0) {\n            $new_lst[]\
    \ = min($lst);\n            $lst = array_diff($lst, array(min($lst)));\n     \
    \       $lst = array_values($lst);\n        } else {\n            $new_lst[] =\
    \ max($lst);\n            $lst = array_diff($lst, array(max($lst)));\n       \
    \     $lst = array_values($lst);\n        }\n    }\n    return $new_lst;\n}\n\n\
    $lst = array(1, 2, 3, 4);\n$lst = strange_sort_list($lst);\nprint_r($lst);\n\n\
    $lst = array(5, 5, 5, 5);\n$lst = strange_sort_list($lst);\nprint_r($lst);\n\n\
    $lst = array();\n$lst = strange_sort_list($lst);\nprint_r($lst);\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain at\
    \ least one element in /tmp/tmpxcbbhubz.php:27\nStack trace:\n#0 /tmp/tmpxcbbhubz.php(27):\
    \ min(Array)\n#1 /tmp/tmpxcbbhubz.php(44): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpxcbbhubz.php on line 27\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    sort($lst);\n  \
    \  $result = array();\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <=\
    \ $j) {\n        $result[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n\
    \            $result[] = $lst[$j];\n            $j--;\n        }\n    }\n    return\
    \ $result;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\n\
    echo \"<br>\";\n$lst = array();\nprint_r(strange_sort_list($lst));\necho \"<br>\"\
    ;\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n<br>Array\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\n<br>Array\n(\n)\n\
    <br>"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        $result[$i] = $min;\n        $i++;\n\
    \        $result[$i] = $max;\n        $i++;\n        $lst = array_diff($lst, [$min,\
    \ $max]);\n        $min = min($lst);\n        $max = max($lst);\n    }\n    return\
    \ $result;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: min(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpj6j02c4d.php:23\nStack trace:\n#0 /tmp/tmpj6j02c4d.php(23):\
    \ min(Array)\n#1 /tmp/tmpj6j02c4d.php(29): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpj6j02c4d.php on line 23\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $lst = array_unique($lst);\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result = array($min);\n  \
    \  $lst = array_diff($lst, array($min));\n    $lst = array_values($lst);\n   \
    \ $i = 0;\n    while (!empty($lst)) {\n        if ($i % 2 == 0) {\n          \
    \  $result[] = max($lst);\n            $lst = array_diff($lst, array(max($lst)));\n\
    \        } else {\n            $result[] = min($lst);\n            $lst = array_diff($lst,\
    \ array(min($lst)));\n        }\n        $lst = array_values($lst);\n        $i++;\n\
    \    }\n    return $result;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = array(5, 5, 5, 5);\nprint_r(strange_sort_list($lst));\necho\
    \ '<br>';\n$lst = array();\nprint_r(strange_sort_list($lst));\necho '<br>';\n\
    $lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);\n\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n<br>Array\n\
    (\n    [0] => 5\n)\n<br>Array\n(\n)\n<br>Array\n(\n    [0] => 1\n    [1] => 10\n\
    \    [2] => 2\n    [3] => 9\n    [4] => 3\n    [5] => 8\n    [6] => 4\n    [7]\
    \ => 7\n    [8] => 5\n    [9] => 6\n)\n<br>Array\n(\n    [0] => 1\n    [1] =>\
    \ 11\n    [2] => 2\n    [3] => 10\n    [4] => 3\n    [5] => 9\n    [6] => 4\n\
    \    [7] => 8\n    [8] => 5\n    [9] => 7\n    [10] => 6\n)\n<br>Array\n(\n  \
    \  [0] => 1\n    [1] => 12\n    [2] => 2\n    [3] => 11\n    [4] => 3\n    [5]\
    \ => 10\n    [6] => 4\n    [7] => 9\n    [8] => 5\n    [9] => 8\n    [10] => 6\n\
    \    [11] => 7\n)\n<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3nvs7zwb.php:66\n\
    Stack trace:\n#0 /tmp/tmp3nvs7zwb.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp3nvs7zwb.php\
    \ on line 66\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    sort($lst);\n  \
    \  $result = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j)\
    \ {\n        $result[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n \
    \           $result[] = $lst[$j];\n            $j--;\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    $i = 0;\n    while ($i\
    \ < $count) {\n        $min = min($lst);\n        $max = max($lst);\n        $result[]\
    \ = $min;\n        $result[] = $max;\n        $i += 2;\n        $key = array_search($min,\
    \ $lst);\n        unset($lst[$key]);\n        $key = array_search($max, $lst);\n\
    \        unset($lst[$key]);\n    }\n    return $result;\n}\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpc89q2543.php:38\nStack\
    \ trace:\n#0 /tmp/tmpc89q2543.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpc89q2543.php\
    \ on line 38\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (count($lst) == 0) {\n        return $lst;\n    }\n    $new_lst =\
    \ array();\n    $lst_len = count($lst);\n    $lst_len_half = floor($lst_len /\
    \ 2);\n    $lst_len_half_plus = $lst_len_half + 1;\n    $lst_len_half_minus =\
    \ $lst_len_half - 1;\n    $lst_len_half_plus_mod = $lst_len_half_plus % 2;\n \
    \   $lst_len_half_minus_mod = $lst_len_half_minus % 2;\n    if ($lst_len_half_plus_mod\
    \ == 0) {\n        $lst_len_half_plus_mod = 1;\n    }\n    if ($lst_len_half_minus_mod\
    \ == 0) {\n        $lst_len_half_minus_mod = 1;\n    }\n    $lst_len_half_plus_mod_minus\
    \ = $lst_len_half_plus_mod - 1;\n    $lst_len_half_minus_mod_minus = $lst_len_half_minus_mod\
    \ - 1;\n    $lst_len_half_plus_mod_minus_plus = $lst_len_half_plus_mod_minus +\
    \ 1;\n    $lst_len_half_minus_mod_minus_plus = $lst_len_half_minus_mod_minus +\
    \ 1;\n    $lst_len_half_plus_mod_minus_plus_minus = $lst_len_half_plus_mod_minus_plus\
    \ - 1;\n    $lst_len_half_minus_mod_minus_plus_minus = $lst_len_half_minus_mod_minus_plus\
    \ - 1;\n    $lst_len_half_plus_mod_minus_plus_minus_plus = $lst_len_half_plus_mod_minus_plus_minus\
    \ + 1;\n    $lst_len_half_minus_mod_minus_plus_minus_plus = $lst_len_half_minus\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp55upf_4b.php
    on line 37

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $lst = array_diff($lst, [$min]);\n            $min = min($lst);\n\
    \        } else {\n            $result[] = $max;\n            $lst = array_diff($lst,\
    \ [$max]);\n            $max = max($lst);\n        }\n        $i++;\n    }\n \
    \   return $result;\n}\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmptyjx6y5l.php:25\nStack trace:\n#0 /tmp/tmptyjx6y5l.php(25):\
    \ max(Array)\n#1 /tmp/tmptyjx6y5l.php(32): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmptyjx6y5l.php on line 25\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    $i = 0;\n    while ($i\
    \ < $count) {\n        $min = min($lst);\n        $result[] = $min;\n        $lst\
    \ = array_diff($lst, [$min]);\n        if ($lst) {\n            $max = max($lst);\n\
    \            $result[] = $max;\n            $lst = array_diff($lst, [$max]);\n\
    \        }\n        $i++;\n    }\n    return $result;\n}\n\n/*\n * Tests\n */\n\
    assert_options(ASSERT_BAIL, 1);\n\n$tests = [\n    [[1, 2, 3, 4], [1, 4, 2, 3]],\n\
    \    [[5, 5, 5, 5], [5, 5, 5, 5]],\n    [[], []],\n    [[1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10], [1, 10, 2, 9, 3, 8, 4, 7, 5, 6]],\n    [[1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11], [1, 11, 2, 10, 3, 9, 4, 8, 5, 7, 6]],\n    [[1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12], [1, 12, 2, 11, 3, 10, 4, 9, 5, 8, 6, 7]],\n    [[1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 13, 2, 12, 3, 11, 4, 10, 5, 9, 6, 8,\
    \ 7]],\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 14, 2, 13, 3,\
    \ 12, 4, 11, 5, 10, 6, 9, 7, 8]],\n    [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15], [1, 15, 2,\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp25ab57s9.php on line 45

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    $i = 0;\n    while ($i\
    \ < $count) {\n        $min = min($lst);\n        $max = max($lst);\n        $result[]\
    \ = $min;\n        $result[] = $max;\n        $i += 2;\n        $key = array_search($min,\
    \ $lst);\n        unset($lst[$key]);\n        $key = array_search($max, $lst);\n\
    \        unset($lst[$key]);\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp234x3lor.php:39\nStack\
    \ trace:\n#0 /tmp/tmp234x3lor.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp234x3lor.php\
    \ on line 39\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $result = [];\n\
    \    sort($lst);\n    $start = 0;\n    $end = count($lst) - 1;\n    while ($start\
    \ <= $end) {\n        $result[] = $lst[$start];\n        $start++;\n        if\
    \ ($start <= $end) {\n            $result[] = $lst[$end];\n            $end--;\n\
    \        }\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list([1, 2,\
    \ 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = array();\n    $min = min($lst);\n    $max = max($lst);\n  \
    \  $i = 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n      \
    \      $result[] = $min;\n            $key = array_search($min, $lst);\n     \
    \       unset($lst[$key]);\n            $min = min($lst);\n        } else {\n\
    \            $result[] = $max;\n            $key = array_search($max, $lst);\n\
    \            unset($lst[$key]);\n            $max = max($lst);\n        }\n  \
    \      $i++;\n    }\n    return $result;\n}\n\n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpv5f2vgyj.php:27\nStack trace:\n#0 /tmp/tmpv5f2vgyj.php(27):\
    \ max(Array)\n#1 /tmp/tmpv5f2vgyj.php(35): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpv5f2vgyj.php on line 27\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $min = min($lst);\n        } else {\n            $result[]\
    \ = $max;\n            $max = max($lst);\n        }\n        $i++;\n    }\n  \
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmp0v9yr8rk.php on line 19

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    $i = 0;\n    while ($i\
    \ < $count) {\n        $min = min($lst);\n        $max = max($lst);\n        $result[]\
    \ = $min;\n        $result[] = $max;\n        $i += 2;\n        $lst = array_diff($lst,\
    \ [$min, $max]);\n    }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp97jrz75r.php:35\nStack\
    \ trace:\n#0 /tmp/tmp97jrz75r.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp97jrz75r.php\
    \ on line 35\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    if ($count == 0) {\n  \
    \      return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $result[] = $min;\n    $lst = array_diff($lst, [$min]);\n    $result[] =\
    \ $max;\n    $lst = array_diff($lst, [$max]);\n    $count = count($lst);\n   \
    \ if ($count == 0) {\n        return $result;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result[] = $min;\n    $lst = array_diff($lst, [$min]);\n\
    \    $result[] = $max;\n    $lst = array_diff($lst, [$max]);\n    $count = count($lst);\n\
    \    if ($count == 0) {\n        return $result;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result[] = $min;\n    $lst = array_diff($lst, [$min]);\n\
    \    $result[] = $max;\n    $lst = array_diff($lst, [$max]);\n    $count = count($lst);\n\
    \    if ($count == 0) {\n        return $result;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result[] = $min;\n    $lst = array_diff($lst, [$min]);\n\
    \    $result[] = $max;\n    $lst = array_diff($lst, [$max]);\n    $count = count($lst);\n\
    \    if ($count == 0) {\n        return $result;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result[] = $min;\n    $lst = array_diff($lst, [$min]);\n\
    \    $result[] = $max;\n    $lst = array_diff($lst, [$max]);\n    $count = count\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpuuilll7l.php
    on line 65

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (count($lst) == 0) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $res = array();\n    $res[] = $min;\n    $res[] =\
    \ $max;\n    $lst = array_diff($lst, array($min, $max));\n    while (count($lst)\
    \ > 0) {\n        $min = min($lst);\n        $max = max($lst);\n        $res[]\
    \ = $min;\n        $res[] = $max;\n        $lst = array_diff($lst, array($min,\
    \ $max));\n    }\n    return $res;\n}\n\n/* Given array of integers, return array\
    \ in strange order.\nStrange sorting, is when you start with the minimum value,\n\
    then maximum of the remaining integers, then minimum and so on.\nExamples:\n>>>\
    \ strange_sort_list(array(1, 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5,\
    \ 5, 5, 5))\narray(5, 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp173az9nw.php:48\n\
    Stack trace:\n#0 /tmp/tmp173az9nw.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp173az9nw.php\
    \ on line 48\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $res = array($min);\n    $lst = array_diff($lst, array($min));\n\
    \    $i = 0;\n    while (!empty($lst)) {\n        if ($i % 2 == 0) {\n       \
    \     $res[] = max($lst);\n            $lst = array_diff($lst, array(max($lst)));\n\
    \        } else {\n            $res[] = min($lst);\n            $lst = array_diff($lst,\
    \ array(min($lst)));\n        }\n        $i++;\n    }\n    return $res;\n}\n\n\
    print_r(strange_sort_list(array(1, 2, 3, 4)));\nprint_r(strange_sort_list(array(5,\
    \ 5, 5, 5)));\nprint_r(strange_sort_list(array()));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmphd2xvtd0.php:46\nStack trace:\n#0 /tmp/tmphd2xvtd0.php(53): test()\n\
    #1 {main}\n  thrown in /tmp/tmphd2xvtd0.php on line 46\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = array();\n    $min = min($lst);\n    $max = max($lst);\n  \
    \  $result[] = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, array($min,\
    \ $max));\n    while (count($lst) > 0) {\n        $min = min($lst);\n        $max\
    \ = max($lst);\n        $result[] = $min;\n        $result[] = $max;\n       \
    \ $lst = array_diff($lst, array($min, $max));\n    }\n    return $result;\n}\n\
    \n$lst = array(1, 2, 3, 4);\nprint_r(strange_sort_list($lst));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpkj6k6_bt.php:37\nStack\
    \ trace:\n#0 /tmp/tmpkj6k6_bt.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpkj6k6_bt.php\
    \ on line 37\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return [];\n    }\n    sort($lst);\n    $result\
    \ = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j) {\n    \
    \    $result[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n         \
    \   $result[] = $lst[$j];\n            $j--;\n        }\n    }\n    return $result;\n\
    }\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n    [2] => 5\n    [3] => 5\n)\nArray\n(\n)\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $result = [];\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, [$min, $max]);\n    while (!empty($lst))\
    \ {\n        $min = min($lst);\n        $max = max($lst);\n        $result[] =\
    \ $min;\n        $result[] = $max;\n        $lst = array_diff($lst, [$min, $max]);\n\
    \    }\n    return $result;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = [5, 5, 5, 5];\nprint_r(strange_sort_list($lst));\necho '<br>';\n\
    $lst = [];\nprint_r(strange_sort_list($lst));\necho '<br>';\n$lst = [1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10];\nprint_r(strange_sort_list($lst));\necho '<br>';\n$lst\
    \ = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\nprint_r(strange_sort_list($lst));\n\
    echo '<br>';\n$lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14];\nprint_r(strange_sort_\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmp9ijxvne8.php
    on line 55

    '
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $max = max($lst);\n\
    \    $min = min($lst);\n    $result = array();\n    $result[] = $min;\n    $result[]\
    \ = $max;\n    $lst = array_diff($lst, array($min, $max));\n    while (!empty($lst))\
    \ {\n        $max = max($lst);\n        $min = min($lst);\n        $result[] =\
    \ $min;\n        $result[] = $max;\n        $lst = array_diff($lst, array($min,\
    \ $max));\n    }\n    return $result;\n}\n\nprint_r(strange_sort_list(array(1,\
    \ 2, 3, 4)));\nprint_r(strange_sort_list(array(5, 5, 5, 5)));\nprint_r(strange_sort_list(array()));\n\
    function candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4,\
    \ 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\nArray\n\
    (\n    [0] => 5\n    [1] => 5\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp1murzlfu.php:41\nStack trace:\n#0 /tmp/tmp1murzlfu.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1murzlfu.php on line 41\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $res = array($min);\n    $lst = array_diff($lst, array($min));\n\
    \    while (!empty($lst)) {\n        $max = max($lst);\n        $res[] = $max;\n\
    \        $lst = array_diff($lst, array($max));\n        if (empty($lst)) {\n \
    \           break;\n        }\n        $min = min($lst);\n        $res[] = $min;\n\
    \        $lst = array_diff($lst, array($min));\n    }\n    return $res;\n}\n\n\
    /* Given array of integers, return array in strange order.\nStrange sorting, is\
    \ when you start with the minimum value,\nthen maximum of the remaining integers,\
    \ then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1, 2, 3, 4))\n\
    array(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5, 5, 5, 5)\n\
    >>> strange_sort_list(array())\narray()*/\nfunction candidate(...$args) {\n  \
    \  return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(1,\
    \ 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5)) !==\
    \ array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6,\
    \ 7, 8)) !== array(1, 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(0, 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5,\
    \ 5, 0, 2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(111111))\
    \ !== array(111111)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpur5e6w_p.php:53\n\
    Stack trace:\n#0 /tmp/tmpur5e6w_p.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpur5e6w_p.php\
    \ on line 53\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (count($lst) == 0) {\n        return $lst;\n    }\n    sort($lst);\n\
    \    $result = [];\n    $i = 0;\n    $j = count($lst) - 1;\n    while ($i <= $j)\
    \ {\n        $result[] = $lst[$i];\n        $i++;\n        if ($i <= $j) {\n \
    \           $result[] = $lst[$j];\n            $j--;\n        }\n    }\n    return\
    \ $result;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\nfunction\
    \ candidate(...$args) {\n    return strange_sort_list(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7,\
    \ 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !==\
    \ array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 4\n    [2] => 2\n    [3] => 3\n)\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $count = count($lst);\n    if ($count == 0) {\n  \
    \      return $result;\n    }\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $i = 0;\n    $j = $count - 1;\n    $result[$i] = $min;\n    $result[$j] =\
    \ $max;\n    $i++;\n    $j--;\n    while ($i <= $j) {\n        $min = min($lst);\n\
    \        $max = max($lst);\n        $result[$i] = $max;\n        $result[$j] =\
    \ $min;\n        $i++;\n        $j--;\n    }\n    return $result;\n}\n\n$lst =\
    \ [1, 2, 3, 4];\nvar_dump(strange_sort_list($lst));\nfunction candidate(...$args)\
    \ {\n    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(4) {\n  [0]=>\n  int(1)\n  [3]=>\n  int(4)\n  [1]=>\n  int(4)\n \
    \ [2]=>\n  int(1)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4hp7ssbs.php:44\n\
    Stack trace:\n#0 /tmp/tmp4hp7ssbs.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp4hp7ssbs.php\
    \ on line 44\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $result = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i =\
    \ 0;\n    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $result[]\
    \ = $min;\n            $key = array_search($min, $lst);\n            unset($lst[$key]);\n\
    \            $min = min($lst);\n        } else {\n            $result[] = $max;\n\
    \            $key = array_search($max, $lst);\n            unset($lst[$key]);\n\
    \            $max = max($lst);\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmplnl7rryg.php:27\nStack trace:\n#0 /tmp/tmplnl7rryg.php(27):\
    \ max(Array)\n#1 /tmp/tmplnl7rryg.php(34): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmplnl7rryg.php on line 27\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    $res = [];\n    $min = min($lst);\n    $max = max($lst);\n    $i = 0;\n\
    \    while (count($lst) > 0) {\n        if ($i % 2 == 0) {\n            $res[]\
    \ = $min;\n            $key = array_search($min, $lst);\n            unset($lst[$key]);\n\
    \            $min = min($lst);\n        } else {\n            $res[] = $max;\n\
    \            $key = array_search($max, $lst);\n            unset($lst[$key]);\n\
    \            $max = max($lst);\n        }\n        $i++;\n    }\n    return $res;\n\
    }\n\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));\nfunction candidate(...$args) {\n\
    \    return strange_sort_list(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(array(1, 2, 3, 4)) !== array(1, 4, 2, 3)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9)) !== array(5, 9, 6,\
    \ 8, 7)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
    \ 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(5, 6, 7, 8, 9, 1)) !== array(1, 9, 5, 8, 6, 7))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 5, 5,\
    \ 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array()) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1, 8, 2, 7, 3, 6,\
    \ 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmpruql4eg0.php:27\nStack trace:\n#0 /tmp/tmpruql4eg0.php(27):\
    \ max(Array)\n#1 /tmp/tmpruql4eg0.php(34): strange_sort_list(Array)\n#2 {main}\n\
    \  thrown in /tmp/tmpruql4eg0.php on line 27\n"
  timestamp: 1660220780
- exit_code: 255
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    if (empty($lst)) {\n        return $lst;\n    }\n    $lst = array_unique($lst);\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $result = array();\n    $result[]\
    \ = $min;\n    $result[] = $max;\n    $lst = array_diff($lst, array($min, $max));\n\
    \    $lst = array_values($lst);\n    $i = 0;\n    while (!empty($lst)) {\n   \
    \     if ($i % 2 == 0) {\n            $result[] = min($lst);\n            $lst\
    \ = array_diff($lst, array(min($lst)));\n        } else {\n            $result[]\
    \ = max($lst);\n            $lst = array_diff($lst, array(max($lst)));\n     \
    \   }\n        $i++;\n    }\n    return $result;\n}\n\n/* Given array of integers,\
    \ return array in strange order.\nStrange sorting, is when you start with the\
    \ minimum value,\nthen maximum of the remaining integers, then minimum and so\
    \ on.\nExamples:\n>>> strange_sort_list(array(1, 2, 3, 4))\narray(1, 4, 2, 3)\n\
    >>> strange_sort_list(array(5, 5, 5, 5))\narray(5, 5, 5, 5)\n>>> strange_sort_list(array())\n\
    array()*/\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6d4a_ks8.php:57\n\
    Stack trace:\n#0 /tmp/tmp6d4a_ks8.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp6d4a_ks8.php\
    \ on line 57\n"
  timestamp: 1660220780
- exit_code: 0
  program: "<?php\n/* Given array of integers, return array in strange order.\nStrange\
    \ sorting, is when you start with the minimum value,\nthen maximum of the remaining\
    \ integers, then minimum and so on.\nExamples:\n>>> strange_sort_list(array(1,\
    \ 2, 3, 4))\narray(1, 4, 2, 3)\n>>> strange_sort_list(array(5, 5, 5, 5))\narray(5,\
    \ 5, 5, 5)\n>>> strange_sort_list(array())\narray()*/\nfunction strange_sort_list($lst)\
    \ {\n    sort($lst);\n    $result = [];\n    $i = 0;\n    $j = count($lst) - 1;\n\
    \    while ($i <= $j) {\n        $result[] = $lst[$i];\n        $i++;\n      \
    \  if ($i <= $j) {\n            $result[] = $lst[$j];\n            $j--;\n   \
    \     }\n    }\n    return $result;\n}\n\n/* Given a string, return a new string\
    \ with the reversed order of characters.\nExamples:\n>>> reverse_string('apple')\n\
    'elppa'\n>>> reverse_string('hello')\n'olleh'\n>>> reverse_string('Greetings!')\n\
    '!sgniteerG'*/\nfunction candidate(...$args) {\n    return strange_sort_list(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
    \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
    \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
    \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
    \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
    \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
    \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220780
