name: HumanEval_156_int_to_mini_roman
language: php
prompt: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent as\
  \ a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n\
  >>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"clii\"\n>>> int_to_mini_roman(426)\n\
  \"cdxxvi\"*/\nfunction int_to_mini_roman($number) {\n"
tests: "function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    $roman = \"\";\n    $numerals = array(\n        1000 => \"m\",\n\
    \        900 => \"cm\",\n        500 => \"d\",\n        400 => \"cd\",\n     \
    \   100 => \"c\",\n        90 => \"xc\",\n        50 => \"l\",\n        40 =>\
    \ \"xl\",\n        10 => \"x\",\n        9 => \"ix\",\n        5 => \"v\",\n \
    \       4 => \"iv\",\n        1 => \"i\"\n    );\n    foreach ($numerals as $key\
    \ => $value) {\n        while ($number >= $key) {\n            $roman .= $value;\n\
    \            $number -= $key;\n        }\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo \"<br>\";\necho int_to_mini_roman(152);\necho \"<br>\";\necho int_to_mini_roman(426);\n\
    echo \"<br>\";\necho int_to_mini_roman(999);\necho \"<br>\";\necho int_to_mini_roman(1000);\n\
    echo \"<br>\";\necho int_to_mini_roman(1001);\necho \"<br>\";\necho int_to_mini_roman(1002);\n\
    echo \"<br>\";\necho int_to_mini_roman(1003);\necho \"<br>\";\necho int_to_mini_roman(1004);\n\
    echo \"<br>\";\necho int_to_mini_roman(1005);\necho \"<br>\";\necho int_to_mini_roman(1006);\n\
    echo \"<br>\";\necho int_to_mini_roman(1007);\necho \"<br>\";\necho int_to_mini_roman(1008);\n\
    echo \"<br>\";\necho int_to_mini_roman(1009);\necho \"<br>\";\necho int_to_mini_roman(1010);\n\
    echo \"<br>\";\necho int_to_mini_roman(1011);\necho \"<br>\";\necho int_to_mini_roman(1012);\n\
    echo \"<br>\";\necho int_to_mini_roman(1013);\necho \"<br>\";\necho int_to_mini_roman",
  "    $roman = \"\";\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1];\n    $romans = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        while ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);",
  "    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm' =>\
    \ 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n     \
    \   'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/",
  "    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n    \
    \    'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($roman_numerals as $roman => $int) {\n        $matches =\
    \ intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $roman = array(\n\
    \        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD'\
    \ => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n    \
    \    'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1\n    );\n    $result = '';\n    foreach\
    \ ($roman as $key => $value) {\n        $result .= str_repeat($key, $number /\
    \ $value);\n        $number %= $value;\n    }\n    return $result;\n}\n\n/* Given\
    \ a string, return the first non-repeating character in it.\nFor strings with\
    \ all repeats, return 'sorry'.\nExamples:\n>>> first_non_repeating_letter('aabbcdddee')\n\
    'sorry'\n>>> first_non_repeating_letter('aabbcdddeef')\n'f'\n>>> first_non_repeating_letter('aabbcdddeefg')\n\
    'f'\n>>> first_non_repeating_letter('aabbcdddeefgg')\n'sorry'\n>>> first_non_repeating_letter('aabbcdddeefggg')\n\
    'sorry'\n>>> first_non_repeating_letter('aabbcdddeefgggg')\n'sorry'\n>>> first_non_repeating_letter('aabbcdddeefggggg')\n\
    'sorry'\n>>> first_non_repeating_letter('aabbcdddeefgggggg')\n'sorry'\n>>> first_non_repeating_letter('aabbcdddeefggggggg')\n\
    'sorry'\n>>> first_non_repeating_letter('aabbcdddeefgggggggg')\n'sorry'\n>>> first_non_repeating_letter('aabbcdddeefggggggggg')\n\
    'sorry'\n>>> first_non_repeating_letter('aabbcdddeefgggggggggg')\n'sorry'\n>>>\
    \ first_non_repeating_letter('aabb", "    $roman = '';\n    $numerals = [\n  \
    \      'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd' =>\
    \ 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n       \
    \ 'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n   \
    \     'iv' => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        $matches = intval($number / $value);\n        $roman .=\
    \ str_repeat($numeral, $matches);\n        $number = $number % $value;\n    }\n\
    \    return $roman;\n}\n\n/* Given a string containing a roman numeral, return\
    \ the integer equivalent.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/", "    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n\
    \        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC'\
    \ => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n      \
    \  'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman as $key => $value) {\n        $matches\
    \ = intval($number / $value);\n        $result .= str_repeat($key, $matches);\n\
    \        $number = $number % $value;\n    }\n    return $result;\n}\n\n/* Given\
    \ a positive integer, obtain its roman numeral equivalent as a string,\nand return\
    \ it in lowercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_mini_roman(19)\n\
    \"xix\"\n>>> int_to_mini_roman(152)\n\"clii\"\n>>> int_to_mini_roman(426)\n\"\
    cdxxvi\"*/", "    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n\
    \        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC'\
    \ => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n      \
    \  'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n\
    \    $result = '';\n    foreach ($roman as $key => $value) {\n        $result\
    \ .= str_repeat($key, $number / $value);\n        $number %= $value;\n    }\n\
    \    return $result;\n}\n\n/* Given a string, return a new string with the first\
    \ and last characters\nswapped, except leave the first character in place if it\
    \ is a non-alphabetic\ncharacter.\nExamples:\n>>> front_back('code')\n'eodc'\n\
    >>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/", "    $roman = array(\n\
    \        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD'\
    \ => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n    \
    \    'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1,\n    );\n    $result = '';\n    foreach\
    \ ($roman as $key => $value) {\n        $matches = intval($number / $value);\n\
    \        $result .= str_repeat($key, $matches);\n        $number = $number % $value;\n\
    \    }\n    return $result;\n}\n\n/* Given a positive integer, return its corresponding\
    \ column title as appear in an Excel sheet.\nRestrictions: 1 <= num <= 26^3\n\
    Examples:\n>>> int_to_excel_column(1)\n\"A\"\n>>> int_to_excel_column(28)\n\"\
    AB\"\n>>> int_to_excel_column(701)\n\"ZY\"\n>>> int_to_excel_column(703)\n\"AAA\"\
    */", "    $roman = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1\n    );\n    foreach ($roman_numerals as $key => $value) {\n   \
    \     $matches = intval($number / $value);\n        $roman .= str_repeat($key,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $roman;\n\
    }\necho int_to_mini_roman(19);\necho \"<br>\";\necho int_to_mini_roman(152);\n\
    echo \"<br>\";\necho int_to_mini_roman(426);", "    $roman = '';\n    $numbers\
    \ = [\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n     \
    \   'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n\
    \        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1\n    ];\n    foreach ($numbers as $roman_numeral\
    \ => $value) {\n        $matches = intval($number / $value);\n        $roman .=\
    \ str_repeat($roman_numeral, $matches);\n        $number = $number % $value;\n\
    \    }\n    return $roman;\n}\n\n/* Given a string, return a new string with the\
    \ order of the characters reversed.\nExamples:\n>>> reverse_string('Hello, World!')\n\
    \"!dlroW ,olleH\"\n>>> reverse_string('I love PHP')\n\"HPP evol I\"\n>>> reverse_string('racecar')\n\
    \"racecar\"*/", "    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n\
    \        'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c'\
    \ => 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n    \
    \    'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n \
    \       'i' => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n \
    \       $matches = intval($number / $value);\n        $roman .= str_repeat($numeral,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $roman;\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);",
  "\t$roman = '';\n\t$numerals = array(\n\t\t'M' => 1000,\n\t\t'CM' => 900,\n\t\t\
    'D' => 500,\n\t\t'CD' => 400,\n\t\t'C' => 100,\n\t\t'XC' => 90,\n\t\t'L' => 50,\n\
    \t\t'XL' => 40,\n\t\t'X' => 10,\n\t\t'IX' => 9,\n\t\t'V' => 5,\n\t\t'IV' => 4,\n\
    \t\t'I' => 1\n\t);\n\tforeach ($numerals as $numeral => $value) {\n\t\twhile ($number\
    \ >= $value) {\n\t\t\t$roman .= $numeral;\n\t\t\t$number -= $value;\n\t\t}\n\t\
    }\n\treturn strtolower($roman);\n}\n\n/* Given a string containing a roman numeral,\
    \ return its integer equivalent.\nRestrictions: 1 <= num <= 1000\nExamples:\n\
    >>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>>\
    \ mini_roman_to_int(\"cdxxvi\")\n426*/", "    $roman = array(\n        'M' =>\
    \ 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n   \
    \     'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n\
    \        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n\
    \        'I' => 1\n    );\n    $result = '';\n    foreach ($roman as $key => $value)\
    \ {\n        $matches = intval($number / $value);\n        $result .= str_repeat($key,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $result;\n\
    }\n\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);",
  "    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' =>\
    \ 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n     \
    \   'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n\
    \        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/",
  "    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm' =>\
    \ 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n     \
    \   'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/",
  "    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n    \
    \    'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    $roman\
    \ = '';\n    foreach ($roman_numerals as $roman => $num) {\n        $matches =\
    \ intval($number / $num);\n        $roman .= str_repeat($roman, $matches);\n \
    \       $number = $number % $num;\n    }\n    return $roman;\n}\n\n/* Given a\
    \ string, return a new string that is the reverse of the original.\nExamples:\n\
    >>> reverse_string(\"hello\")\n\"olleh\"\n>>> reverse_string(\"world\")\n\"dlrow\"\
    \n>>> reverse_string(\"\")\n\"\"*/", "    $roman_numerals = array(\n        'm'\
    \ => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n\
    \        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' =>\
    \ 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv'\
    \ => 4,\n        'i' => 1,\n    );\n    $result = '';\n    foreach ($roman_numerals\
    \ as $roman => $num) {\n        $matches = intval($number / $num);\n        $result\
    \ .= str_repeat($roman, $matches);\n        $number = $number % $num;\n    }\n\
    \    return $result;\n}\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);", "    $roman = '';\n    $numbers = [\n        1000\
    \ => 'm',\n        900 => 'cm',\n        500 => 'd',\n        400 => 'cd',\n \
    \       100 => 'c',\n        90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n\
    \        10 => 'x',\n        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n\
    \        1 => 'i'\n    ];\n    foreach ($numbers as $int => $roman_numeral) {\n\
    \        $matches = intval($number / $int);\n        $roman .= str_repeat($roman_numeral,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $roman;\n}\n\
    echo int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);",
  "\t$roman = '';\n\t$numerals = array(\n\t\t'M' => 1000,\n\t\t'D' => 500,\n\t\t'C'\
    \ => 100,\n\t\t'L' => 50,\n\t\t'X' => 10,\n\t\t'V' => 5,\n\t\t'I' => 1\n\t);\n\
    \tforeach ($numerals as $numeral => $value) {\n\t\t$roman .= str_repeat($numeral,\
    \ floor($number / $value));\n\t\t$number %= $value;\n\t}\n\treturn strtolower(str_replace(array('DCCCC',\
    \ 'CCCC', 'LXXXX', 'XXXX', 'VIIII', 'IIII'), array('cm', 'cd', 'xc', 'xl', 'ix',\
    \ 'iv'), $roman));\n}\n\n/* Given a string of roman numerals, return the integer\
    \ equivalent.\nRestrictions: 1 <= num <= 3999\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/", "    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n    \
    \    $roman .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n\
    \    }\n    return $roman;\n}\n\n/* Given a string containing a roman numeral\
    \ representation of a positive integer,\nreturn the integer.\nRestrictions: 1\
    \ <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1,\n    );\n    $result = '';\n    foreach\
    \ ($numerals as $numeral => $value) {\n        $result .= str_repeat($numeral,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $result;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped, except leave the first character in place if it is a non-alphabetic\n\
    character.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n\
    >>> front_back('ab')\n'ba'\n>>> front_back('aavJ')\n'Java'\n>>> front_back('z')\n\
    'z'*/", "    $roman = array(\n        'm' => 1000,\n        'cm' => 900,\n   \
    \     'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' =>\
    \ 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix'\
    \ => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n   \
    \ $result = '';\n    foreach ($roman as $key => $value) {\n        $matches =\
    \ intval($number / $value);\n        $result .= str_repeat($key, $matches);\n\
    \        $number = $number % $value;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $roman = '';\n\
    \    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n        'd'\
    \ => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n  \
    \      'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n\
    \        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    foreach\
    \ ($numerals as $numeral => $value) {\n        $matches = intval($number / $value);\n\
    \        $roman .= str_repeat($numeral, $matches);\n        $number = $number\
    \ % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing a roman\
    \ numeral representation of a positive integer,\nreturn the integer.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $result = '';\n\
    \    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D'\
    \ => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n  \
    \      'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n\
    \        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    foreach\
    \ ($roman as $key => $value) {\n        $matches = intval($number / $value);\n\
    \        $result .= str_repeat($key, $matches);\n        $number = $number % $value;\n\
    \    }\n    return $result;\n}\necho int_to_mini_roman(19);", "    $roman_numerals\
    \ = array(\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n\
    \        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' =>\
    \ 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v'\
    \ => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    $result = '';\n   \
    \ foreach ($roman_numerals as $roman => $num) {\n        $matches = intval($number\
    \ / $num);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $num;\n    }\n    return $result;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/",
  "    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm' =>\
    \ 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n     \
    \   'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\nand return it in uppercase.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\"XIX\"\n>>>\
    \ int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/", "    $roman\
    \ = '';\n    $numerals = array(\n        'm' => 1000,\n        'd' => 500,\n \
    \       'c' => 100,\n        'l' => 50,\n        'x' => 10,\n        'v' => 5,\n\
    \        'i' => 1,\n    );\n    foreach ($numerals as $key => $value) {\n    \
    \    $roman .= str_repeat($key, $number / $value);\n        $number %= $value;\n\
    \    }\n    return $roman;\n}\n\n/* Given a string containing a roman numeral\
    \ representation of a positive integer,\nreturn the integer.\nRestrictions: 1\
    \ <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $result = '';\n\
    \    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $romans\
    \ = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        while ($number >= $numbers[$i])\
    \ {\n            $result .= $romans[$i];\n            $number -= $numbers[$i];\n\
    \        }\n    }\n    return $result;\n}\n\n/* Given a string, return a new string\
    \ with the first and last characters\nswapped, except leave the string unchanged\
    \ if the string's length is less\nthan 2.\nExamples:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/", "    $roman_numerals\
    \ = array(\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n\
    \        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' =>\
    \ 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v'\
    \ => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    $result = '';\n   \
    \ foreach ($roman_numerals as $roman => $num) {\n        $matches = intval($number\
    \ / $num);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $num;\n    }\n    return $result;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/",
  "    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm' =>\
    \ 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n     \
    \   'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $key => $value) {\n        while ($number >=\
    \ $value) {\n            $roman .= $key;\n            $number -= $value;\n   \
    \     }\n    }\n    return $roman;\n}\n\n/* Given a string, return a new string\
    \ with the first and last characters\nswapped.\nExamples:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/", "\t$roman = '';\n\
    \t$numerals = array(\n\t\t'M' => 1000,\n\t\t'D' => 500,\n\t\t'C' => 100,\n\t\t\
    'L' => 50,\n\t\t'X' => 10,\n\t\t'V' => 5,\n\t\t'I' => 1\n\t);\n\tforeach ($numerals\
    \ as $numeral => $value) {\n\t\t$roman .= str_repeat($numeral, $number / $value);\n\
    \t\t$number %= $value;\n\t}\n\treturn strtolower(str_replace(array('DCCCC', 'CCCC',\
    \ 'LXXXX', 'XXXX', 'VIIII', 'IIII'),\n\t\tarray('cm', 'cd', 'xc', 'xl', 'ix',\
    \ 'iv'), $roman));\n}", "    $result = '';\n    $numbers = [\n        'M'  =>\
    \ 1000,\n        'CM' => 900,\n        'D'  => 500,\n        'CD' => 400,\n  \
    \      'C'  => 100,\n        'XC' => 90,\n        'L'  => 50,\n        'XL' =>\
    \ 40,\n        'X'  => 10,\n        'IX' => 9,\n        'V'  => 5,\n        'IV'\
    \ => 4,\n        'I'  => 1\n    ];\n    foreach ($numbers as $key => $value) {\n\
    \        while ($number >= $value) {\n            $result .= $key;\n         \
    \   $number -= $value;\n        }\n    }\n    return strtolower($result);\n}\n\
    \n/* Given a string containing a roman numeral representation of a positive integer,\n\
    return the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/", "\t$roman_numerals = array(\n\t\t'M' => 1000,\n\t\t'CM' => 900,\n\t\
    \t'D' => 500,\n\t\t'CD' => 400,\n\t\t'C' => 100,\n\t\t'XC' => 90,\n\t\t'L' =>\
    \ 50,\n\t\t'XL' => 40,\n\t\t'X' => 10,\n\t\t'IX' => 9,\n\t\t'V' => 5,\n\t\t'IV'\
    \ => 4,\n\t\t'I' => 1\n\t);\n\t$result = '';\n\tforeach ($roman_numerals as $roman\
    \ => $int) {\n\t\t$matches = intval($number / $int);\n\t\t$result .= str_repeat($roman,\
    \ $matches);\n\t\t$number = $number % $int;\n\t}\n\treturn $result;\n}\n\n/* Given\
    \ a string, return a new string with the first and last characters\nswapped, except\
    \ leave the first character in place if it is a non-alphabetic\ncharacter.\nExamples:\n\
    >>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n\
    'ba'\n>>> front_back('aavJ')\n'Java'\n>>> front_back('hello')\n'oellh'*/", " \
    \   $roman = '';\n    $numbers = [\n        1000 => 'm',\n        900 => 'cm',\n\
    \        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 =>\
    \ 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n       \
    \ 9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    ];\n\
    \    foreach ($numbers as $key => $value) {\n        while ($number >= $key) {\n\
    \            $roman .= $value;\n            $number -= $key;\n        }\n    }\n\
    \    return $roman;\n}\n\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);", "    $result = '';\n    $numbers = [1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd',\
    \ 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i\
    \ < count($numbers); $i++) {\n        while ($number >= $numbers[$i]) {\n    \
    \        $result .= $romans[$i];\n            $number -= $numbers[$i];\n     \
    \   }\n    }\n    return $result;\n}\n\n/* Given a string containing a roman numeral\
    \ representation of a positive integer,\nreturn the integer.\nRestrictions: 1\
    \ <= num <= 3999\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $roman = '';\n \
    \   $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n   \
    \     'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' =>\
    \ 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix'\
    \ => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n   \
    \ foreach ($roman_numerals as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($key, $matches);\n        $number =\
    \ $number % $value;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $roman = array(\n\
    \        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD'\
    \ => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n    \
    \    'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1,\n    );\n    $result = '';\n    foreach\
    \ ($roman as $key => $value) {\n        $result .= str_repeat($key, $number /\
    \ $value);\n        $number %= $value;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo \"\\n\";\necho int_to_mini_roman(152);\necho \"\\n\";\necho int_to_mini_roman(426);\n\
    echo \"\\n\";", "    $roman_numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n\
    \        $matches = intval($number / $num);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $num;\n    }\n    return $result;\n\
    }\n\n/* Given a string containing a roman numeral representation of a positive\
    \ integer,\nreturn the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>>\
    \ mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"\
    cdxxvi\")\n426*/", "    $roman = '';\n    $numbers = [1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc',\
    \ 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        while ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped, except leave the string unchanged if the string's length is less\nthan\
    \ 2.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>>\
    \ front_back('ab')\n'ba'*/", "    $roman_numerals = array(\n        'm' => 1000,\n\
    \        'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c'\
    \ => 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n    \
    \    'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n \
    \       'i' => 1,\n    );\n    $result = '';\n    foreach ($roman_numerals as\
    \ $roman => $int) {\n        $matches = intval($number / $int);\n        $result\
    \ .= str_repeat($roman, $matches);\n        $number = $number % $int;\n    }\n\
    \    return $result;\n}", "    $roman = array(\n        'M' => 1000,\n       \
    \ 'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n\
    \        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' =>\
    \ 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I'\
    \ => 1,\n    );\n    $result = '';\n    foreach ($roman as $key => $value) {\n\
    \        $matches = intval($number / $value);\n        $result .= str_repeat($key,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $result;\n\
    }\n\n/* Given a mini-roman numeral string, obtain its integer equivalent and return\
    \ it.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\"\
    )\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/", "    $roman_numerals = array(\n        'm' => 1000,\n        'cm' =>\
    \ 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n     \
    \   'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n\
    \        $matches = intval($number / $num);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $num;\n    }\n    return $result;\n\
    }\n\n/* Given a string containing a roman numeral representation of a positive\
    \ integer,\nreturn the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>>\
    \ mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"\
    cdxxvi\")\n426*/", "    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    $result = '';\n    foreach ($numerals as $numeral => $value) {\n\
    \        $result .= str_repeat($numeral, $number / $value);\n        $number %=\
    \ $value;\n    }\n    return $result;\n}", "    $roman = '';\n    $numbers = [1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm',\
    \ 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i =\
    \ 0; $i < count($numbers); $i++) {\n        while ($number >= $numbers[$i]) {\n\
    \            $roman .= $romans[$i];\n            $number -= $numbers[$i];\n  \
    \      }\n    }\n    return $roman;\n}\n\n/* Given a string, return a new string\
    \ with the first and last characters swapped.\nExamples:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/", "    $roman =\
    \ array(\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n  \
    \      'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' =>\
    \ 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v'\
    \ => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    $result = '';\n   \
    \ foreach ($roman as $key => $value) {\n        $matches = intval($number / $value);\n\
    \        $result .= str_repeat($key, $matches);\n        $number = $number % $value;\n\
    \    }\n    return $result;\n}\n\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);", "    $roman = '';\n    $numerals = array(\n   \
    \     'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd' =>\
    \ 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n       \
    \ 'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n   \
    \     'iv' => 4,\n        'i' => 1\n    );\n    foreach ($numerals as $key =>\
    \ $value) {\n        $matches = intval($number / $value);\n        $roman .= str_repeat($key,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $roman;\n\
    }", "    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n    \
    \    'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($numerals as $key => $value) {\n        while ($number >=\
    \ $value) {\n            $result .= $key;\n            $number -= $value;\n  \
    \      }\n    }\n    return $result;\n}\n\n/* Given a string of roman numerals,\
    \ return the integer equivalent.\nRestrictions:\n- The string will only contain\
    \ valid roman numerals.\n- The string will only contain uppercase roman numerals.\n\
    - The string will only contain numerals in the range 1-3999.\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/", "    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1\n    );\n    foreach ($numerals as $numeral => $value) {\n     \
    \   while ($number >= $value) {\n            $roman .= $numeral;\n           \
    \ $number -= $value;\n        }\n    }\n    return $roman;\n}\n\n/* Given a string\
    \ of roman numerals, return the integer equivalent.\nRestrictions: 1 <= num <=\
    \ 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $roman = '';\n \
    \   $numerals = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D'\
    \ => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n  \
    \      'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n\
    \        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n    );\n    foreach\
    \ ($numerals as $numeral => $value) {\n        $matches = intval($number / $value);\n\
    \        $roman .= str_repeat($numeral, $matches);\n        $number = $number\
    \ % $value;\n    }\n    return strtolower($roman);\n}\n\n/* Given a string, return\
    \ a new string with the first and last characters\nswapped, except leave the first\
    \ character in place if it is a non-alphabetic\ncharacter.\nExamples:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'\n>>> front_back('aavj')\n\
    'java'\n>>> front_back('hello')\n'oellh'*/", "    $roman = '';\n    $numbers =\
    \ [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $romans = ['m',\
    \ 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    for\
    \ ($i = 0; $i < count($numbers); $i++) {\n        while ($number >= $numbers[$i])\
    \ {\n            $roman .= $romans[$i];\n            $number -= $numbers[$i];\n\
    \        }\n    }\n    return $roman;\n}\n\n/* Given a string, return a new string\
    \ with the first and last characters\nswapped, except leave the string unchanged\
    \ if the string's length is less\nthan 2.\nExamples:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/", "    $roman =\
    \ '';\n    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n  \
    \      'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' =>\
    \ 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix'\
    \ => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n   \
    \ foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\nand return it in uppercase.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_maxi_roman(19)\n\"XIX\"\n\
    >>> int_to_maxi_roman(152)\n\"CLII\"\n>>> int_to_maxi_roman(426)\n\"CDXXVI\"*/",
  "    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' =>\
    \ 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n     \
    \   'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n\
    \        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\n/* Given a string, return\
    \ a new string that has transformed based on the input:\nChange case of every\
    \ character, ie. lower case to upper case, upper case to lower case.\nReverse\
    \ the order of words from the input.\nNote: You will have to handle multiple spaces,\
    \ and leading/trailing spaces.\nFor example:\n\"Example Input\" ==> \"iNPUT eXAMPLE\"\
    \nYou may assume the input only contain English alphabet and spaces.\n*/", " \
    \   $result = '';\n    $numbers = [\n        'M' => 1000,\n        'CM' => 900,\n\
    \        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC'\
    \ => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n      \
    \  'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    ];\n\
    \    foreach ($numbers as $roman => $int) {\n        $matches = intval($number\
    \ / $int);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $int;\n    }\n    return $result;\n}\n\n/* Given a string, return\
    \ a new string with the same letters in reverse order.\nExamples:\n>>> reverse_string(\"\
    hello\")\n\"olleh\"\n>>> reverse_string(\"world\")\n\"dlrow\"\n>>> reverse_string(\"\
    \")\n\"\"*/", "    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n\
    \        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC'\
    \ => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n      \
    \  'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman as $key => $value) {\n        $matches\
    \ = intval($number / $value);\n        $result .= str_repeat($key, $matches);\n\
    \        $number = $number % $value;\n    }\n    return $result;\n}\n\n/* Given\
    \ a positive integer, obtain its roman numeral equivalent as a string,\nand return\
    \ it in uppercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\
    \"XIX\"\n>>> int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/",
  "    $roman = '';\n    $numerals = [\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    ];\n\
    \    foreach ($numerals as $key => $value) {\n        while ($number >= $value)\
    \ {\n            $roman .= $key;\n            $number -= $value;\n        }\n\
    \    }\n    return $roman;\n}\n\n/* Given a string containing a roman numeral\
    \ representation of a positive integer,\nreturn the integer.\nRestrictions: 1\
    \ <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $result = '';\n\
    \    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $romans\
    \ = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        while ($number >= $numbers[$i])\
    \ {\n            $result .= $romans[$i];\n            $number -= $numbers[$i];\n\
    \        }\n    }\n    return $result;\n}\n\n/* Given a positive integer, obtain\
    \ its roman numeral equivalent as a string,\nand return it in uppercase.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\"XIX\"\n>>> int_to_roman(152)\n\
    \"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/", "    $roman_numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1,\n    );\n    $result = '';\n    foreach\
    \ ($roman_numerals as $roman => $number_value) {\n        $matches = intval($number\
    \ / $number_value);\n        $result .= str_repeat($roman, $matches);\n      \
    \  $number = $number % $number_value;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);",
  "    $roman = '';\n    $numerals = [\n        'm' => 1000,\n        'd' => 500,\n\
    \        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n        'v' => 5,\n\
    \        'i' => 1\n    ];\n    foreach ($numerals as $numeral => $value) {\n \
    \       $roman .= str_repeat($numeral, $number / $value);\n        $number %=\
    \ $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing a roman\
    \ numeral, return its integer equivalent.\nRestrictions: 1 <= num <= 1000\nExamples:\n\
    >>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>>\
    \ mini_roman_to_int(\"cdxxvi\")\n426*/", "    $roman = array(\n        'm' =>\
    \ 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n   \
    \     'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n\
    \        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n\
    \        'i' => 1\n    );\n    $result = '';\n    foreach ($roman as $key => $value)\
    \ {\n        $matches = intval($number / $value);\n        $result .= str_repeat($key,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $result;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n\
    >>> front_back('ab')\n'ba'*/", "    $roman = '';\n    $numerals = array(\n   \
    \     'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd' =>\
    \ 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n       \
    \ 'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n   \
    \     'iv' => 4,\n        'i' => 1\n    );\n    foreach ($numerals as $numeral\
    \ => $value) {\n        $matches = intval($number / $value);\n        $roman .=\
    \ str_repeat($numeral, $matches);\n        $number = $number % $value;\n    }\n\
    \    return $roman;\n}\n\n/* Given a string containing a roman numeral representation\
    \ of a positive integer,\nreturn the integer.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\"\
    )\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $result = '';\n    $numbers\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $romans = ['m',\
    \ 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    for\
    \ ($i = 0; $i < count($numbers); $i++) {\n        while ($number >= $numbers[$i])\
    \ {\n            $result .= $romans[$i];\n            $number -= $numbers[$i];\n\
    \        }\n    }\n    return $result;\n}\n\n/* Given a positive integer, obtain\
    \ its roman numeral equivalent as a string,\nand return it in uppercase.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\"XIX\"\n>>> int_to_roman(152)\n\
    \"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/", "    $roman = \"\";\n    $roman_numerals\
    \ = array(\n        'M' => 1000,\n        'D' => 500,\n        'C' => 100,\n \
    \       'L' => 50,\n        'X' => 10,\n        'V' => 5,\n        'I' => 1\n\
    \    );\n    foreach ($roman_numerals as $roman => $num) {\n        $matches =\
    \ intval($number / $num);\n        $roman .= str_repeat($roman, $matches);\n \
    \       $number = $number % $num;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $numerals =\
    \ array(\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n  \
    \      'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' =>\
    \ 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v'\
    \ => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    $result = '';\n   \
    \ foreach ($numerals as $key => $value) {\n        while ($number >= $value) {\n\
    \            $result .= $key;\n            $number -= $value;\n        }\n   \
    \ }\n    return $result;\n}\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);", "    $result = '';\n    $numerals = array(\n  \
    \      'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD' =>\
    \ 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n       \
    \ 'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n   \
    \     'IV' => 4,\n        'I' => 1\n    );\n    foreach ($numerals as $numeral\
    \ => $value) {\n        while ($number >= $value) {\n            $result .= $numeral;\n\
    \            $number -= $value;\n        }\n    }\n    return $result;\n}\necho\
    \ int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);",
  "    $roman = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix',\
    \ 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n        while\
    \ ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n          \
    \  $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n}\n\n/* Given\
    \ a string containing a roman numeral representation of a positive integer,\n\
    return the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/", "    $result = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string, return a string with all the vowels removed.\nExamples:\n\
    >>> remove_vowels(\"Hello, world!\")\n\"Hll, wrld!\"\n>>> remove_vowels(\"I am\
    \ a programmer\")\n\" m  prgrmmr\"*/", "    $roman_numerals = array(\n       \
    \ 'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n\
    \        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' =>\
    \ 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv'\
    \ => 4,\n        'i' => 1\n    );\n    $result = '';\n    foreach ($roman_numerals\
    \ as $roman => $num) {\n        $matches = intval($number / $num);\n        $result\
    \ .= str_repeat($roman, $matches);\n        $number = $number % $num;\n    }\n\
    \    return $result;\n}\n\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);", "    $numerals = array(\n        'm' => 1000,\n\
    \        'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c'\
    \ => 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n    \
    \    'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n \
    \       'i' => 1\n    );\n    $result = '';\n    foreach ($numerals as $numeral\
    \ => $value) {\n        while ($number >= $value) {\n            $result .= $numeral;\n\
    \            $number -= $value;\n        }\n    }\n    return $result;\n}\n\n\
    /* Given a string representing a roman numeral, return the integer equivalent.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/",
  "\t$roman = '';\n\t$numerals = [\n\t\t'M' => 1000,\n\t\t'CM' => 900,\n\t\t'D' =>\
    \ 500,\n\t\t'CD' => 400,\n\t\t'C' => 100,\n\t\t'XC' => 90,\n\t\t'L' => 50,\n\t\
    \t'XL' => 40,\n\t\t'X' => 10,\n\t\t'IX' => 9,\n\t\t'V' => 5,\n\t\t'IV' => 4,\n\
    \t\t'I' => 1\n\t];\n\tforeach ($numerals as $numeral => $value) {\n\t\twhile ($number\
    \ >= $value) {\n\t\t\t$roman .= $numeral;\n\t\t\t$number -= $value;\n\t\t}\n\t\
    }\n\treturn strtolower($roman);\n}\n\n/* Given a string, return the string with\
    \ all its letters in alphabetical order.\nExamples:\n>>> alphabet_soup(\"hello\"\
    )\n\"ehllo\"\n>>> alphabet_soup(\"edabit\")\n\"abdeit\"\n>>> alphabet_soup(\"\
    hacker\")\n\"acehkr\"\n>>> alphabet_soup(\"geek\")\n\"eegk\"\n>>> alphabet_soup(\"\
    javascript\")\n\"aacijprstv\"*/", "    $numerals = array(\n        'm' => 1000,\n\
    \        'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c'\
    \ => 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n    \
    \    'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n \
    \       'i' => 1,\n    );\n    $result = '';\n    foreach ($numerals as $numeral\
    \ => $value) {\n        while ($number >= $value) {\n            $result .= $numeral;\n\
    \            $number -= $value;\n        }\n    }\n    return $result;\n}\n\n\
    /* Given a string containing a roman numeral, return the integer equivalent.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/",
  "    $roman = '';\n    $numbers = [\n        'M' => 1000,\n        'CM' => 900,\n\
    \        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC'\
    \ => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n      \
    \  'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    ];\n\
    \    foreach ($numbers as $roman => $int) {\n        $matches = intval($number\
    \ / $int);\n        $roman .= str_repeat($roman, $matches);\n        $number =\
    \ $number % $int;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $roman = array(\n\
    \        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD'\
    \ => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n    \
    \    'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1\n    );\n    $result = '';\n    foreach\
    \ ($roman as $key => $value) {\n        $matches = intval($number / $value);\n\
    \        $result .= str_repeat($key, $matches);\n        $number = $number % $value;\n\
    \    }\n    return $result;\n}\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);", "    $roman = array(\n        'M' => 1000,\n  \
    \      'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' =>\
    \ 100,\n        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n       \
    \ 'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n    \
    \    'I' => 1\n    );\n    $result = '';\n    foreach ($roman as $key => $value)\
    \ {\n        $result .= str_repeat($key, $number / $value);\n        $number %=\
    \ $value;\n    }\n    return $result;\n}\n\n/* Given a string, return a new string\
    \ with the characters in reverse order.\nExamples:\n>>> reverse_string(\"hello\"\
    )\n\"olleh\"\n>>> reverse_string(\"world\")\n\"dlrow\"\n>>> reverse_string(\"\"\
    )\n\"\"*/", "    $roman_numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n\
    \        $matches = intval($number / $num);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $num;\n    }\n    return $result;\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);",
  "    $result = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix',\
    \ 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n        while\
    \ ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n         \
    \   $number -= $numbers[$i];\n        }\n    }\n    return $result;\n}\n\n/* Given\
    \ a string containing a roman numeral representation of a positive integer,\n\
    return the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/", "    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n    \
    \    $matches = intval($number / $value);\n        $roman .= str_repeat($numeral,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $roman;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\
    \ swapped,\nexcept leave the first character in place if it is a non-alphabetic\
    \ character.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n\
    'a'\n>>> front_back('ab')\n'ba'*/", "    $roman = '';\n    $romans = array(\n\
    \        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD'\
    \ => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n    \
    \    'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1,\n    );\n    foreach ($romans as $key =>\
    \ $value) {\n        $matches = intval($number / $value);\n        $roman .= str_repeat($key,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $roman;\n\
    }\n\n/* Given a string containing a roman numeral representation of a positive\
    \ integer,\nreturn the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>>\
    \ mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"\
    cdxxvi\")\n426*/", "    $roman_numerals = array(\n        'm' => 1000,\n     \
    \   'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    $result = '';\n    foreach ($roman_numerals as $roman =>\
    \ $int) {\n        $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\n/* Given a string of roman numerals, return the integer equivalent.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $result = '';\n\
    \    $numbers = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D'\
    \ => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n  \
    \      'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n\
    \        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n    );\n    foreach\
    \ ($numbers as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\n/* Given a string containing a roman\
    \ numeral representation of a positive integer,\nreturn the integer.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $roman = '';\n \
    \   $numerals = array(\n        'm' => 1000,\n        'd' => 500,\n        'c'\
    \ => 100,\n        'l' => 50,\n        'x' => 10,\n        'v' => 5,\n       \
    \ 'i' => 1\n    );\n    foreach ($numerals as $numeral => $value) {\n        $matches\
    \ = intval($number / $value);\n        $roman .= str_repeat($numeral, $matches);\n\
    \        $number = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given\
    \ a string containing a roman numeral representation of a positive integer,\n\
    return the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/", "    $roman_numerals = array(\n        'm' => 1000,\n        'cm' =>\
    \ 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n     \
    \   'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    $result = '';\n    foreach ($roman_numerals as $roman => $number_value)\
    \ {\n        $matches = intval($number / $number_value);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $number_value;\n    }\n    return $result;\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);",
  "    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n    \
    \    'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($roman_numerals as $roman => $number_value) {\n        $matches\
    \ = intval($number / $number_value);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $number_value;\n    }\n    return $result;\n}\n\n\
    /* Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    and return it in uppercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\
    \"XIX\"\n>>> int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/",
  "    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' =>\
    \ 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n     \
    \   'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n\
    \        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $roman = '';\n\
    \    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n        'd'\
    \ => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n  \
    \      'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n\
    \        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    foreach\
    \ ($numerals as $numeral => $value) {\n        $matches = intval($number / $value);\n\
    \        $roman .= str_repeat($numeral, $matches);\n        $number = $number\
    \ % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing a roman\
    \ numeral representation of a positive integer,\nreturn the integer.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $roman_numerals\
    \ = array(\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n\
    \        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' =>\
    \ 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v'\
    \ => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    $result = '';\n   \
    \ foreach ($roman_numerals as $roman => $num) {\n        $matches = intval($number\
    \ / $num);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $num;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "\t$result = '';\n\
    \t$numbers = array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n\t\
    $romans = array('m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv',\
    \ 'i');\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\twhile ($number >= $numbers[$i])\
    \ {\n\t\t\t$result .= $romans[$i];\n\t\t\t$number -= $numbers[$i];\n\t\t}\n\t\
    }\n\treturn $result;\n}", "    $roman_numerals = array(\n        'm' => 1000,\n\
    \        'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c'\
    \ => 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n    \
    \    'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n \
    \       'i' => 1,\n    );\n    $result = '';\n    foreach ($roman_numerals as\
    \ $roman => $number_value) {\n        $matches = intval($number / $number_value);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $number_value;\n    }\n    return $result;\n}\n\n/* Given a string, return a\
    \ new string with the first and last characters\nswapped, except leave the first\
    \ character in place if it is a non-alphabetic\ncharacter.\nExamples:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/", "    $roman =\
    \ array(\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n  \
    \      'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' =>\
    \ 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v'\
    \ => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    $result = '';\n   \
    \ foreach ($roman as $key => $value) {\n        $matches = intval($number / $value);\n\
    \        $result .= str_repeat($key, $matches);\n        $number = $number % $value;\n\
    \    }\n    return $result;\n}\n\n/* Given a string, return a new string where\
    \ the first and last chars have been exchanged.\nExamples:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/", "    $roman =\
    \ '';\n    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n  \
    \      'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' =>\
    \ 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix'\
    \ => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n   \
    \ foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/",
  "    $roman = \"\";\n    $numerals = array(\n        'M' => 1000,\n        'CM'\
    \ => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n  \
    \      'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n\
    \    );\n    foreach ($numerals as $key => $value) {\n        while ($number >=\
    \ $value) {\n            $roman .= $key;\n            $number -= $value;\n   \
    \     }\n    }\n    return strtolower($roman);\n}\n\n/* Given a string, return\
    \ a new string with the characters in reverse order.\nExamples:\n>>> reverse_string(\"\
    hello\")\n\"olleh\"\n>>> reverse_string(\"world\")\n\"dlrow\"\n>>> reverse_string(\"\
    a\")\n\"a\"\n>>> reverse_string(\"\")\n\"\"*/", "    $roman = '';\n    $numbers\
    \ = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $romans = ['m',\
    \ 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    for\
    \ ($i = 0; $i < count($numbers); $i++) {\n        while ($number >= $numbers[$i])\
    \ {\n            $roman .= $romans[$i];\n            $number -= $numbers[$i];\n\
    \        }\n    }\n    return $roman;\n}\n\n/* Given a string, return a new string\
    \ with the first and last characters swapped.\nExamples:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/", "    $roman =\
    \ '';\n    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n  \
    \      'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' =>\
    \ 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix'\
    \ => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n   \
    \ foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/",
  "    $roman = '';\n    $numerals = array(\n        'M' => 1000,\n        'CM' =>\
    \ 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n     \
    \   'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $roman .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return strtolower($roman);\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $roman = \"\"\
    ;\n    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n      \
    \  'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    foreach\
    \ ($numerals as $numeral => $value) {\n        $matches = intval($number / $value);\n\
    \        $roman .= str_repeat($numeral, $matches);\n        $number = $number\
    \ % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing a roman\
    \ numeral representation of a positive integer,\nreturn the integer.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $roman = '';\n \
    \   $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n        'd'\
    \ => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n  \
    \      'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n\
    \        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    foreach\
    \ ($numerals as $numeral => $value) {\n        $matches = intval($number / $value);\n\
    \        $roman .= str_repeat($numeral, $matches);\n        $number = $number\
    \ % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing a roman\
    \ numeral representation of a positive integer,\nreturn the integer.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $roman = '';\n \
    \   $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n        'd'\
    \ => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n  \
    \      'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n\
    \        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    foreach\
    \ ($numerals as $numeral => $value) {\n        $matches = intval($number / $value);\n\
    \        $roman .= str_repeat($numeral, $matches);\n        $number = $number\
    \ % $value;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);", "    $roman = '';\n    $numerals = array(\n   \
    \     'm' => 1000,\n        'd' => 500,\n        'c' => 100,\n        'l' => 50,\n\
    \        'x' => 10,\n        'v' => 5,\n        'i' => 1\n    );\n    foreach\
    \ ($numerals as $key => $value) {\n        $roman .= str_repeat($key, intval($number\
    \ / $value));\n        $number %= $value;\n    }\n    return $roman;\n}\necho\
    \ int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);",
  "    $roman = \"\";\n    $numerals = [\n        \"m\" => 1000,\n        \"d\" =>\
    \ 500,\n        \"c\" => 100,\n        \"l\" => 50,\n        \"x\" => 10,\n  \
    \      \"v\" => 5,\n        \"i\" => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        $roman .= str_repeat($numeral, floor($number / $value));\n\
    \        $number %= $value;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo \"<br>\";\necho int_to_mini_roman(152);\necho \"<br>\";\necho int_to_mini_roman(426);",
  "    $result = '';\n    $numerals = [\n        'm' => 1000,\n        'd' => 500,\n\
    \        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n        'v' => 5,\n\
    \        'i' => 1\n    ];\n    foreach ($numerals as $numeral => $value) {\n \
    \       $result .= str_repeat($numeral, $number / $value);\n        $number %=\
    \ $value;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);", "    $roman = '';\n    $roman_numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    );\n    foreach ($roman_numerals as\
    \ $roman => $number_in_roman) {\n        $matches = intval($number / $number_in_roman);\n\
    \        $roman .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $number_in_roman;\n    }\n    return $roman;\n}\n\n/* Given a string, return\
    \ a new string with the first and last characters\nswapped, except leave the string\
    \ unchanged if the string's length is less\nthan 2.\nExamples:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/", "    $roman =\
    \ '';\n    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n  \
    \      'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' =>\
    \ 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix'\
    \ => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n   \
    \ foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\nand return it in uppercase.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\"XIX\"\n>>>\
    \ int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/", "    $roman\
    \ = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/",
  "    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm' =>\
    \ 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n     \
    \   'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $roman = '';\n\
    \    $numerals = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D'\
    \ => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n  \
    \      'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n\
    \        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    foreach\
    \ ($numerals as $numeral => $value) {\n        while ($number >= $value) {\n \
    \           $roman .= $numeral;\n            $number -= $value;\n        }\n \
    \   }\n    return strtolower($roman);\n}\n\n/* Given a string of roman numerals,\
    \ return the integer equivalent.\nRestrictions: 1 <= num <= 1000\nExamples:\n\
    >>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>>\
    \ mini_roman_to_int(\"cdxxvi\")\n426*/", "    $result = '';\n    $numbers = [1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm',\
    \ 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i =\
    \ 0; $i < count($numbers); $i++) {\n        while ($number >= $numbers[$i]) {\n\
    \            $result .= $romans[$i];\n            $number -= $numbers[$i];\n \
    \       }\n    }\n    return $result;\n}\n\n/* Given a string containing a roman\
    \ numeral, return its integer value.\nRestrictions: 1 <= num <= 1000\nExamples:\n\
    >>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>>\
    \ mini_roman_to_int(\"cdxxvi\")\n426 */", "    $roman = array(\n        'M' =>\
    \ 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n   \
    \     'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n\
    \        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n\
    \        'I' => 1\n    );\n    $result = '';\n    foreach ($roman as $key => $value)\
    \ {\n        $matches = intval($number / $value);\n        $result .= str_repeat($key,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $result;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped, except leave the string unchanged if the string's length is less\nthan\
    \ 2.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>>\
    \ front_back('ab')\n'ba'*/", "    $roman = array(\n        'm' => 1000,\n    \
    \    'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    $result = '';\n    foreach ($roman as $key => $value) {\n\
    \        $matches = intval($number / $value);\n        $result .= str_repeat($key,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $result;\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);",
  "    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n    \
    \    'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($roman_numerals as $roman => $int) {\n        $matches =\
    \ intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $roman = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    );\n    $result = '';\n    foreach\
    \ ($roman as $key => $value) {\n        $matches = intval($number / $value);\n\
    \        $result .= str_repeat($key, $matches);\n        $number = $number % $value;\n\
    \    }\n    return $result;\n}\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);", "    $result = '';\n    $roman_numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1,\n    );\n    foreach ($roman_numerals as\
    \ $roman => $num) {\n        $matches = intval($number / $num);\n        $result\
    \ .= str_repeat($roman, $matches);\n        $number = $number % $num;\n    }\n\
    \    return $result;\n}\n\n/* Given a string, return a new string with the first\
    \ and last characters\nswapped, except leave the first character in place if it\
    \ is a non-alphabetic\ncharacter.\nExamples:\n>>> front_back('code')\n'eodc'\n\
    >>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/", "    $roman_numerals\
    \ = array(\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n\
    \        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' =>\
    \ 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v'\
    \ => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    $result = '';\n  \
    \  foreach ($roman_numerals as $roman => $num) {\n        $matches = intval($number\
    \ / $num);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $num;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "\t$result = '';\n\
    \t$numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n\t$romans\
    \ = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n\
    \tfor ($i = 0; $i < count($numbers); $i++) {\n\t\twhile ($number >= $numbers[$i])\
    \ {\n\t\t\t$result .= $romans[$i];\n\t\t\t$number -= $numbers[$i];\n\t\t}\n\t\
    }\n\treturn $result;\n}\n\n/* Given a string containing a roman numeral, return\
    \ its integer equivalent.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/", "    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1\n    );\n    foreach ($numerals as $numeral => $value) {\n     \
    \   $matches = intval($number / $value);\n        $roman .= str_repeat($numeral,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $roman;\n\
    }\n\n/* Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    and return it in uppercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_maxi_roman(19)\n\
    \"XIX\"\n>>> int_to_maxi_roman(152)\n\"CLII\"\n>>> int_to_maxi_roman(426)\n\"\
    CDXXVI\"*/", "    $result = '';\n    $roman_numerals = array(\n        'M'  =>\
    \ 1000,\n        'CM' => 900,\n        'D'  => 500,\n        'CD' => 400,\n  \
    \      'C'  => 100,\n        'XC' => 90,\n        'L'  => 50,\n        'XL' =>\
    \ 40,\n        'X'  => 10,\n        'IX' => 9,\n        'V'  => 5,\n        'IV'\
    \ => 4,\n        'I'  => 1);\n    foreach ($roman_numerals as $roman => $num)\
    \ {\n        $matches = intval($number / $num);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $num;\n    }\n    return $result;\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);",
  "    $roman = \"\";\n    $numerals = array(\n        \"m\" => 1000,\n        \"\
    d\" => 500,\n        \"c\" => 100,\n        \"l\" => 50,\n        \"x\" => 10,\n\
    \        \"v\" => 5,\n        \"i\" => 1\n    );\n    foreach ($numerals as $numeral\
    \ => $value) {\n        $roman .= str_repeat($numeral, $number / $value);\n  \
    \      $number %= $value;\n    }\n    return $roman;\n}\n\n/* Given a string,\
    \ return a new string with the first and last characters\nswapped.\nExamples:\n\
    >>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n\
    'ba'*/", "  $roman_numerals = array(\n    'm' => 1000,\n    'cm' => 900,\n   \
    \ 'd' => 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' =>\
    \ 50,\n    'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv'\
    \ => 4,\n    'i' => 1,\n  );\n  $result = '';\n  foreach ($roman_numerals as $roman\
    \ => $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\n/* Given\
    \ a string, return the first character that is not repeated anywhere in\nthe string.\n\
    For example, given the string \"stress\", return \"t\".\nGiven the string \"moonmen\"\
    , return \"e\".\nExamples:\n>>> first_non_repeating_letter('stress')\n't'\n>>>\
    \ first_non_repeating_letter('moonmen')\n'e'*/", "\t$roman_numerals = array(\n\
    \t\t'M' => 1000,\n\t\t'CM' => 900,\n\t\t'D' => 500,\n\t\t'CD' => 400,\n\t\t'C'\
    \ => 100,\n\t\t'XC' => 90,\n\t\t'L' => 50,\n\t\t'XL' => 40,\n\t\t'X' => 10,\n\t\
    \t'IX' => 9,\n\t\t'V' => 5,\n\t\t'IV' => 4,\n\t\t'I' => 1\n\t);\n\t$result = '';\n\
    \tforeach ($roman_numerals as $roman => $value) {\n\t\t$matches = intval($number\
    \ / $value);\n\t\t$result .= str_repeat($roman, $matches);\n\t\t$number = $number\
    \ % $value;\n\t}\n\treturn $result;\n}\n\n/* Given a string, return a new string\
    \ with the first and last characters\nswapped, except leave the first character\
    \ in place if it is a non-alphabetic\ncharacter.\nExamples:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'\n>>> front_back('aavJ')\n\
    'Java'\n>>> front_back('hello')\n'oellh'*/", "    $roman = '';\n    $numbers =\
    \ [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000];\n    $romans = ['i',\
    \ 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm'];\n    $i =\
    \ count($numbers) - 1;\n    while ($number > 0) {\n        while ($number >= $numbers[$i])\
    \ {\n            $number -= $numbers[$i];\n            $roman .= $romans[$i];\n\
    \        }\n        $i--;\n    }\n    return $roman;\n}\n\n/* Given a positive\
    \ integer, obtain its roman numeral equivalent as a string,\nand return it in\
    \ lowercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_mini_roman(19)\n\
    \"xix\"\n>>> int_to_mini_roman(152)\n\"clii\"\n>>> int_to_mini_roman(426)\n\"\
    cdxxvi\"*/", "    $roman = '';\n    $numbers = [\n        'M' => 1000,\n     \
    \   'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n\
    \        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' =>\
    \ 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I'\
    \ => 1\n    ];\n    foreach ($numbers as $key => $value) {\n        while ($number\
    \ >= $value) {\n            $roman .= $key;\n            $number -= $value;\n\
    \        }\n    }\n    return strtolower($roman);\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $roman = '';\n\
    \    $romans = array(\n        'm' => 1000,\n        'cm' => 900,\n        'd'\
    \ => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n  \
    \      'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n\
    \        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    foreach\
    \ ($romans as $key => $value) {\n        $matches = intval($number / $value);\n\
    \        $roman .= str_repeat($key, $matches);\n        $number = $number % $value;\n\
    \    }\n    return $roman;\n}\n\n/* Given a string containing a roman numeral\
    \ representation of a positive integer,\nreturn the integer.\nRestrictions: 1\
    \ <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "\t$numerals = array(\n\
    \t\t'M' => 1000,\n\t\t'CM' => 900,\n\t\t'D' => 500,\n\t\t'CD' => 400,\n\t\t'C'\
    \ => 100,\n\t\t'XC' => 90,\n\t\t'L' => 50,\n\t\t'XL' => 40,\n\t\t'X' => 10,\n\t\
    \t'IX' => 9,\n\t\t'V' => 5,\n\t\t'IV' => 4,\n\t\t'I' => 1\n\t);\n\t$result = '';\n\
    \tforeach ($numerals as $numeral => $value) {\n\t\twhile ($number >= $value) {\n\
    \t\t\t$result .= $numeral;\n\t\t\t$number -= $value;\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n\
    >>> front_back('ab')\n'ba'*/", "    $result = '';\n    $numbers = [\n        'M'\
    \ => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n\
    \        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n        'XL' =>\
    \ 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV'\
    \ => 4,\n        'I' => 1\n    ];\n    foreach ($numbers as $roman => $int) {\n\
    \        $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    and return it in uppercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\
    \"XIX\"\n>>> int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/",
  "\t$roman = array(\n\t\t'M' => 1000,\n\t\t'CM' => 900,\n\t\t'D' => 500,\n\t\t'CD'\
    \ => 400,\n\t\t'C' => 100,\n\t\t'XC' => 90,\n\t\t'L' => 50,\n\t\t'XL' => 40,\n\
    \t\t'X' => 10,\n\t\t'IX' => 9,\n\t\t'V' => 5,\n\t\t'IV' => 4,\n\t\t'I' => 1,\n\
    \t);\n\t$result = '';\n\tforeach ($roman as $key => $value) {\n\t\t$matches =\
    \ intval($number / $value);\n\t\t$result .= str_repeat($key, $matches);\n\t\t\
    $number = $number % $value;\n\t}\n\treturn $result;\n}\n\n/* Given a string, return\
    \ a new string that is the reverse of the original.\nExamples:\n>>> reverse_string(\"\
    Hello World\")\n\"dlroW olleH\"\n>>> reverse_string(\"\")\n\"\"\n>>> reverse_string(\"\
    a\")\n\"a\"*/", "    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n\
    \        'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c'\
    \ => 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n    \
    \    'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n \
    \       'i' => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n \
    \       $matches = intval($number / $value);\n        $roman .= str_repeat($numeral,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $roman;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped, except under three conditions:\nIf the length of the string is less than\
    \ two, return \"Incompatible.\".\nIf the argument is not a string, return \"Incompatible.\"\
    .\nIf the first and last characters are the same, return \"Two's a pair.\".\n\
    Examples:\n>>> flip_end_chars(\"Cat, dog, and mouse.\")\n\".at, dog, and mouseC\"\
    \n>>> flip_end_chars(\"ada\")\n\"Two's a pair.\"\n>>> flip_end_chars(\"Ada\")\n\
    \"adA\"\n>>> flip_end_chars(\"z\")\n\"Incompatible.\"\n>>> flip_end_chars([1,\
    \ 2, 3])\n\"Incompatible.\"*/", "    $roman_numerals = array(\n        'm' =>\
    \ 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n   \
    \     'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n\
    \        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n\
    \        'i' => 1,\n    );\n    $result = '';\n    foreach ($roman_numerals as\
    \ $roman => $num) {\n        $matches = intval($number / $num);\n        $result\
    \ .= str_repeat($roman, $matches);\n        $number = $number % $num;\n    }\n\
    \    return $result;\n}\n\n/* Given a string containing a roman numeral representation\
    \ of a positive integer,\nreturn the integer.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\"\
    )\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $result = '';\n    $numerals\
    \ = [\n        'm' => 1000,\n        'd' => 500,\n        'c' => 100,\n      \
    \  'l' => 50,\n        'x' => 10,\n        'v' => 5,\n        'i' => 1\n    ];\n\
    \    foreach ($numerals as $numeral => $value) {\n        $result .= str_repeat($numeral,\
    \ (int)($number / $value));\n        $number %= $value;\n    }\n    return $result;\n\
    }\n\n/* Given a string containing a roman numeral, convert it to an integer and\
    \ return it.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/", "    $roman_numerals = array(\n        'm' => 1000,\n        'cm' =>\
    \ 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n     \
    \   'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n\
    \        $matches = intval($number / $num);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $num;\n    }\n    return $result;\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);",
  "    $result = '';\n    $roman_numerals = array(\n        'M'  => 1000,\n      \
    \  'CM' => 900,\n        'D'  => 500,\n        'CD' => 400,\n        'C'  => 100,\n\
    \        'XC' => 90,\n        'L'  => 50,\n        'XL' => 40,\n        'X'  =>\
    \ 10,\n        'IX' => 9,\n        'V'  => 5,\n        'IV' => 4,\n        'I'\
    \  => 1);\n    foreach ($roman_numerals as $roman => $num) {\n        $matches\
    \ = intval($number / $num);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $result;\n}\n\n/* Given\
    \ a string representing a roman numeral, return its integer value.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $roman = '';\n \
    \   $numbers = [\n        1000 => 'm',\n        900 => 'cm',\n        500 => 'd',\n\
    \        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n        50 =>\
    \ 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n        5\
    \ => 'v',\n        4 => 'iv',\n        1 => 'i'\n    ];\n    foreach ($numbers\
    \ as $key => $value) {\n        while ($number >= $key) {\n            $roman\
    \ .= $value;\n            $number -= $key;\n        }\n    }\n    return $roman;\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);",
  "    $result = '';\n    $romans = array(\n        'M' => 1000,\n        'CM' =>\
    \ 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n     \
    \   'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n\
    \    );\n    foreach ($romans as $roman => $int) {\n        $matches = intval($number\
    \ / $int);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $int;\n    }\n    return $result;\n}\n\n/* Given a string, return\
    \ the first letter of each word in the string,\ncapitalized and in the same order\
    \ as the original string.\nRestrictions:\n- The string will not be empty.\n- The\
    \ string will not contain any numbers.\n- The string will not contain any punctuation\
    \ besides spaces and hyphens.\n- The string will contain nothing but words, spaces,\
    \ and hyphens.\nExamples:\n>>> first_letters(\"Hello world\")\n\"HW\"\n>>> first_letters(\"\
    A b c d-e-f%g\")\n\"AbCdEfG\"\n>>> first_letters(\"What's up, doc?\")\n\"WUD\"\
    */", "    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n   \
    \     'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' =>\
    \ 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix'\
    \ => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n   \
    \ $result = '';\n    foreach ($numerals as $roman => $arabic) {\n        $result\
    \ .= str_repeat($roman, $number / $arabic);\n        $number %= $arabic;\n   \
    \ }\n    return $result;\n}\n\n/* Given a string, return a new string that is\
    \ the reverse of the original.\nExamples:\n>>> reverse_string(\"hello\")\n\"olleh\"\
    \n>>> reverse_string(\"world\")\n\"dlrow\"\n>>> reverse_string(\"\")\n\"\"*/",
  "    $result = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm' =>\
    \ 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n     \
    \   'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $result .= str_repeat($numeral,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $result;\n\
    }\n\n/* Given a string containing a roman numeral, return its integer value.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/",
  "\t$roman_numerals = array(\n\t\t'M'  => 1000,\n\t\t'CM' => 900,\n\t\t'D'  => 500,\n\
    \t\t'CD' => 400,\n\t\t'C'  => 100,\n\t\t'XC' => 90,\n\t\t'L'  => 50,\n\t\t'XL'\
    \ => 40,\n\t\t'X'  => 10,\n\t\t'IX' => 9,\n\t\t'V'  => 5,\n\t\t'IV' => 4,\n\t\t\
    'I'  => 1\n\t);\n\t$result = '';\n\tforeach ($roman_numerals as $roman => $int)\
    \ {\n\t\t$matches = intval($number / $int);\n\t\t$result .= str_repeat($roman,\
    \ $matches);\n\t\t$number = $number % $int;\n\t}\n\treturn $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $roman = '';\n\
    \    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $romans\
    \ = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        while ($number >= $numbers[$i])\
    \ {\n            $roman .= $romans[$i];\n            $number -= $numbers[$i];\n\
    \        }\n    }\n    return $roman;\n}\n\n/* Given a string of roman numerals,\
    \ return the integer equivalent.\nRestrictions: 1 <= num <= 1000\nExamples:\n\
    >>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>>\
    \ mini_roman_to_int(\"cdxxvi\")\n426*/", "    $roman = '';\n    $roman_numerals\
    \ = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n\
    \        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' =>\
    \ 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V'\
    \ => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    foreach ($roman_numerals\
    \ as $key => $value) {\n        $matches = intval($number / $value);\n       \
    \ $roman .= str_repeat($key, $matches);\n        $number = $number % $value;\n\
    \    }\n    return $roman;\n}\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);", "    $roman_numerals = array(\n        'M'  =>\
    \ 1000,\n        'CM' => 900,\n        'D'  => 500,\n        'CD' => 400,\n  \
    \      'C'  => 100,\n        'XC' => 90,\n        'L'  => 50,\n        'XL' =>\
    \ 40,\n        'X'  => 10,\n        'IX' => 9,\n        'V'  => 5,\n        'IV'\
    \ => 4,\n        'I'  => 1);\n    $result = '';\n    foreach ($roman_numerals\
    \ as $roman => $num) {\n        $matches = intval($number / $num);\n        $result\
    \ .= str_repeat($roman, $matches);\n        $number = $number % $num;\n    }\n\
    \    return $result;\n}\n\n/* Given a string, return a new string that is the\
    \ reverse of the original.\nExamples:\n>>> reverse_string(\"hello\")\n\"olleh\"\
    \n>>> reverse_string(\"world\")\n\"dlrow\"\n>>> reverse_string(\"a\")\n\"a\"\n\
    >>> reverse_string(\"\")\n\"\"*/", "    $roman = '';\n    $numbers = [\n     \
    \   'M'  => 1000,\n        'CM' => 900,\n        'D'  => 500,\n        'CD' =>\
    \ 400,\n        'C'  => 100,\n        'XC' => 90,\n        'L'  => 50,\n     \
    \   'XL' => 40,\n        'X'  => 10,\n        'IX' => 9,\n        'V'  => 5,\n\
    \        'IV' => 4,\n        'I'  => 1\n    ];\n    foreach ($numbers as $key\
    \ => $value) {\n        while ($number >= $value) {\n            $roman .= $key;\n\
    \            $number -= $value;\n        }\n    }\n    return strtolower($roman);\n\
    }\n\n/* Given a string containing a roman numeral representation of a positive\
    \ integer,\nreturn the integer.\nRestrictions: 1 <= num <= 3999\nExamples:\n>>>\
    \ mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"\
    cdxxvi\")\n426*/", "    $result = '';\n    $numbers = [1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc',\
    \ 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string containing a roman numeral, return its integer value.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/",
  "    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' =>\
    \ 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n     \
    \   'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n\
    \        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $result .= str_repeat($key,\
    \ (int)($number / $value));\n        $number %= $value;\n    }\n    return $result;\n\
    }\n\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);",
  "    $roman = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix',\
    \ 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n        while\
    \ ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n          \
    \  $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);",
  "    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm' =>\
    \ 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n     \
    \   'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $roman .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return $roman;\n}\n\necho int_to_mini_roman(19);\necho\
    \ int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $roman = \"\";\n\
    \    $num = array(1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1);\n   \
    \ $rom = array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"\
    x\", \"ix\", \"v\", \"iv\", \"i\");\n    for ($i = 0; $i < count($num); $i++)\
    \ {\n        while ($number >= $num[$i]) {\n            $number -= $num[$i];\n\
    \            $roman .= $rom[$i];\n        }\n    }\n    return $roman;\n}\n\n\
    /* Given a string, return a new string with the first and last characters\nswapped.\n\
    Examples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n\
    'ba'*/", "    $roman_numerals = array(\n        'm' => 1000,\n        'cm' =>\
    \ 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n     \
    \   'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n\
    \        $matches = intval($number / $num);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $num;\n    }\n    return $result;\n\
    }\n\n/* Given a string containing a roman numeral representation of a positive\
    \ integer,\nreturn the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>>\
    \ mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"\
    cdxxvi\")\n426*/", "    $result = '';\n    $roman_numerals = array(\n        'm'\
    \ => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n\
    \        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' =>\
    \ 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv'\
    \ => 4,\n        'i' => 1\n    );\n    foreach ($roman_numerals as $key => $value)\
    \ {\n        while ($number >= $value) {\n            $result .= $key;\n     \
    \       $number -= $value;\n        }\n    }\n    return $result;\n}\n\n/* Given\
    \ a string containing a roman numeral representation of a positive integer,\n\
    return the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/", "    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n \
    \       'd' => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n\
    \        'v' => 5,\n        'i' => 1\n    );\n    foreach ($numerals as $key =>\
    \ $value) {\n        $roman .= str_repeat($key, floor($number / $value));\n  \
    \      $number %= $value;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $roman = array(\n\
    \        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD'\
    \ => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n    \
    \    'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1\n    );\n    $result = '';\n    foreach\
    \ ($roman as $key => $value) {\n        $matches = intval($number / $value);\n\
    \        $result .= str_repeat($key, $matches);\n        $number = $number % $value;\n\
    \    }\n    return $result;\n}\n\necho int_to_mini_roman(19);\necho '<br>';\n\
    echo int_to_mini_roman(152);\necho '<br>';\necho int_to_mini_roman(426);\necho\
    \ '<br>';\necho int_to_mini_roman(3999);\necho '<br>';\necho int_to_mini_roman(1);\n\
    echo '<br>';\necho int_to_mini_roman(1000);\necho '<br>';\necho int_to_mini_roman(999);\n\
    echo '<br>';\necho int_to_mini_roman(500);\necho '<br>';\necho int_to_mini_roman(400);\n\
    echo '<br>';\necho int_to_mini_roman(100);\necho '<br>';\necho int_to_mini_roman(90);\n\
    echo '<br>';\necho int_to_mini_roman(50);\necho '<br>';\necho int_to_mini_roman(40);\n\
    echo '<br>';\necho int_to_mini_roman(10);\necho '<br>';\necho int_to_mini_roman(9);\n\
    echo '<br>';\necho int_to_mini_roman(5);\necho '<br>';\necho int_to_mini_roman(4);\n\
    echo '<br>';", "\t$result = '';\n\t$numerals = array(\n\t\t'M' => 1000,\n\t\t\
    'D' => 500,\n\t\t'C' => 100,\n\t\t'L' => 50,\n\t\t'X' => 10,\n\t\t'V' => 5,\n\t\
    \t'I' => 1\n\t);\n\tforeach ($numerals as $numeral => $value) {\n\t\t$result .=\
    \ str_repeat($numeral, floor($number / $value));\n\t\t$number %= $value;\n\t}\n\
    \t$result = str_replace(array('DCCCC', 'CCCC', 'LXXXX', 'XXXX', 'VIIII', 'IIII'),\n\
    \t\tarray('CM', 'CD', 'XC', 'XL', 'IX', 'IV'), $result);\n\treturn strtolower($result);\n\
    }\n\n/* Given a string of roman numerals, return the integer equivalent.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $result = '';\n\
    \    $numbers = [\n        1000 => 'm',\n        900 => 'cm',\n        500 =>\
    \ 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 => 'xc',\n     \
    \   50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n        9 => 'ix',\n\
    \        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    ];\n    foreach\
    \ ($numbers as $key => $value) {\n        while ($number >= $key) {\n        \
    \    $result .= $value;\n            $number -= $key;\n        }\n    }\n    return\
    \ $result;\n}\n\n/* Given a string containing a roman numeral, return its integer\
    \ equivalent.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/", "    $numerals = [\n        'm' => 1000,\n        'cm' => 900,\n  \
    \      'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' =>\
    \ 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix'\
    \ => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    ];\n   \
    \ $result = '';\n    foreach ($numerals as $numeral => $value) {\n        while\
    \ ($number >= $value) {\n            $result .= $numeral;\n            $number\
    \ -= $value;\n        }\n    }\n    return $result;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/",
  "    $result = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm' =>\
    \ 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n     \
    \   'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $result .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);", "    $roman = array(\n        'M' => 1000,\n  \
    \      'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' =>\
    \ 100,\n        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n       \
    \ 'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n    \
    \    'I' => 1\n    );\n    $result = '';\n    foreach ($roman as $key => $value)\
    \ {\n        $matches = intval($number / $value);\n        $result .= str_repeat($key,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $result;\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);",
  "    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n    \
    \    'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman_numerals as $roman => $num) {\n        $matches =\
    \ intval($number / $num);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $result;\n}\n\n/* Given\
    \ a string, return a new string with the first and last characters\nswapped, except\
    \ leave the first character in place if it is a non-alphabetic\ncharacter.\nExamples:\n\
    >>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n\
    'ba'\n>>> front_back('aavj')\n'java'\n>>> front_back('hello')\n'oellh'*/", " \
    \   $result = '';\n    $numbers = array(1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1);\n    $romans = array('m', 'cm', 'd', 'cd', 'c', 'xc', 'l',\
    \ 'xl', 'x', 'ix', 'v', 'iv', 'i');\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string representing a roman numeral, return the integer equivalent.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/",
  "    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm' =>\
    \ 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n     \
    \   'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $result = '';\n\
    \    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $romans\
    \ = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        while ($number >= $numbers[$i])\
    \ {\n            $result .= $romans[$i];\n            $number -= $numbers[$i];\n\
    \        }\n    }\n    return $result;\n}\n\n/* Given a string, return the string\
    \ with all vowels removed.\nRestrictions: only lowercase letters, no spaces\n\
    Examples:\n>>> remove_vowels(\"hello\")\n\"hll\"\n>>> remove_vowels(\"why are\
    \ you asking me this\")\n\"why r y skng m ths\"\n>>> remove_vowels(\"aeiou\")\n\
    \"\"*/", "    $roman = '';\n    $numbers = [\n        'M'  => 1000,\n        'CM'\
    \ => 900,\n        'D'  => 500,\n        'CD' => 400,\n        'C'  => 100,\n\
    \        'XC' => 90,\n        'L'  => 50,\n        'XL' => 40,\n        'X'  =>\
    \ 10,\n        'IX' => 9,\n        'V'  => 5,\n        'IV' => 4,\n        'I'\
    \  => 1\n    ];\n    foreach ($numbers as $key => $value) {\n        while ($number\
    \ >= $value) {\n            $roman .= $key;\n            $number -= $value;\n\
    \        }\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\necho '<br>';\n\
    echo int_to_mini_roman(152);\necho '<br>';\necho int_to_mini_roman(426);\necho\
    \ '<br>';\necho int_to_mini_roman(999);\necho '<br>';\necho int_to_mini_roman(1000);\n\
    echo '<br>';\necho int_to_mini_roman(1001);\necho '<br>';\necho int_to_mini_roman(1002);\n\
    echo '<br>';\necho int_to_mini_roman(1003);\necho '<br>';\necho int_to_mini_roman(1004);\n\
    echo '<br>';\necho int_to_mini_roman(1005);\necho '<br>';\necho int_to_mini_roman(1006);\n\
    echo '<br>';\necho int_to_mini_roman(1007);\necho '<br>';\necho int_to_mini_roman(1008);\n\
    echo '<br>';\necho int_to_mini_roman(1009);\necho '<br>';\necho int_to_mini_roman(1010);\n\
    echo '<br>';\necho int_to_mini_roman(1011);\necho '<br>';\necho int_to_mini_roman(1012);\n\
    echo", "    $roman = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        while ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n\
    }\n\n/* Given a string of roman numerals, return the integer equivalent.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $roman = '';\n \
    \   $numerals = array(\n        'm' => 1000,\n        'd' => 500,\n        'c'\
    \ => 100,\n        'l' => 50,\n        'x' => 10,\n        'v' => 5,\n       \
    \ 'i' => 1\n    );\n    foreach ($numerals as $key => $value) {\n        $roman\
    \ .= str_repeat($key, floor($number / $value));\n        $number %= $value;\n\
    \    }\n    return $roman;\n}\n\n/* Given a string representing a roman numeral,\
    \ return the integer equivalent.\nRestrictions: 1 <= num <= 1000\nExamples:\n\
    >>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>>\
    \ mini_roman_to_int(\"cdxxvi\")\n426*/", "    $roman = '';\n    $numbers = [1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm',\
    \ 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i =\
    \ 0; $i < count($numbers); $i++) {\n        while ($number >= $numbers[$i]) {\n\
    \            $roman .= $romans[$i];\n            $number -= $numbers[$i];\n  \
    \      }\n    }\n    return $roman;\n}\n\n/* Given a positive integer, obtain\
    \ its roman numeral equivalent as a string,\nand return it in uppercase.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\"XIX\"\n>>> int_to_roman(152)\n\
    \"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/", "    $result = '';\n    $roman_numerals\
    \ = array(\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n\
    \        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' =>\
    \ 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v'\
    \ => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    foreach ($roman_numerals\
    \ as $key => $value) {\n        while ($number >= $value) {\n            $result\
    \ .= $key;\n            $number -= $value;\n        }\n    }\n    return $result;\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);",
  "  $roman = '';\n  $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1];\n  $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v',\
    \ 'iv', 'i'];\n  for ($i = 0; $i < count($numbers); $i++) {\n    while ($number\
    \ >= $numbers[$i]) {\n      $roman .= $romans[$i];\n      $number -= $numbers[$i];\n\
    \    }\n  }\n  return $roman;\n}\n\n/* Given a string containing a roman numeral\
    \ representation of a positive integer,\nreturn the integer.\nRestrictions: 1\
    \ <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $roman = '';\n \
    \   $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $romans\
    \ = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        while ($number >= $numbers[$i])\
    \ {\n            $roman .= $romans[$i];\n            $number -= $numbers[$i];\n\
    \        }\n    }\n    return $roman;\n}\n\n/* Given a string, return a new string\
    \ with the first and last characters\nswapped, except leave the string unchanged\
    \ if the string's length is less\nthan 2.\nExamples:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/", "    $result\
    \ = '';\n    $numerals = [\n        'm' => 1000,\n        'd' => 500,\n      \
    \  'c' => 100,\n        'l' => 50,\n        'x' => 10,\n        'v' => 5,\n  \
    \      'i' => 1\n    ];\n    foreach ($numerals as $numeral => $value) {\n   \
    \     $result .= str_repeat($numeral, floor($number / $value));\n        $number\
    \ %= $value;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\necho\
    \ int_to_mini_roman(152);\necho int_to_mini_roman(426);", "\t$roman = '';\n\t\
    $roman_numerals = array(\n\t\t'M'  => 1000,\n\t\t'CM' => 900,\n\t\t'D'  => 500,\n\
    \t\t'CD' => 400,\n\t\t'C'  => 100,\n\t\t'XC' => 90,\n\t\t'L'  => 50,\n\t\t'XL'\
    \ => 40,\n\t\t'X'  => 10,\n\t\t'IX' => 9,\n\t\t'V'  => 5,\n\t\t'IV' => 4,\n\t\t\
    'I'  => 1\n\t);\n\tforeach ($roman_numerals as $roman => $num) {\n\t\t$matches\
    \ = intval($number / $num);\n\t\t$roman .= str_repeat($roman, $matches);\n\t\t\
    $number = $number % $num;\n\t}\n\treturn $roman;\n}\n\n/* Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\nand return it in uppercase.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\"XIX\"\n>>>\
    \ int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/", "    $roman_numerals\
    \ = array(\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n\
    \        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' =>\
    \ 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v'\
    \ => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    $result = '';\n  \
    \  foreach ($roman_numerals as $roman => $int) {\n        $matches = intval($number\
    \ / $int);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $int;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $roman_numerals\
    \ = array(\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n\
    \        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' =>\
    \ 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v'\
    \ => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    $result = '';\n  \
    \  foreach ($roman_numerals as $roman => $num) {\n        $matches = intval($number\
    \ / $num);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $num;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "  $roman = '';\n\
    \  $numerals = array(\n    'm' => 1000,\n    'd' => 500,\n    'c' => 100,\n  \
    \  'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n  );\n  foreach ($numerals\
    \ as $key => $value) {\n    $roman .= str_repeat($key, floor($number / $value));\n\
    \    $number %= $value;\n  }\n  return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral in lowercase, convert it to an\ninteger and return it.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $roman = '';\n \
    \   $numerals = [\n        'm' => 1000,\n        'd' => 500,\n        'c' => 100,\n\
    \        'l' => 50,\n        'x' => 10,\n        'v' => 5,\n        'i' => 1\n\
    \    ];\n    foreach ($numerals as $numeral => $value) {\n        $roman .= str_repeat($numeral,\
    \ intval($number / $value));\n        $number %= $value;\n    }\n    return $roman;\n\
    }\n\n/* Given a string containing a roman numeral, return its integer equivalent.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/",
  "    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n        'D' =>\
    \ 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n     \
    \   'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n\
    \        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $result .= str_repeat($key,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $result;\n\
    }\n\necho int_to_mini_roman(19);\necho \"\\n\";\necho int_to_mini_roman(152);\n\
    echo \"\\n\";\necho int_to_mini_roman(426);\necho \"\\n\";", "    $roman = \"\"\
    ;\n    $roman_numerals = array(\n        'M'  => 1000,\n        'CM' => 900,\n\
    \        'D'  => 500,\n        'CD' => 400,\n        'C'  => 100,\n        'XC'\
    \ => 90,\n        'L'  => 50,\n        'XL' => 40,\n        'X'  => 10,\n    \
    \    'IX' => 9,\n        'V'  => 5,\n        'IV' => 4,\n        'I'  => 1\n \
    \   );\n    foreach ($roman_numerals as $key => $value) {\n        $matches =\
    \ intval($number / $value);\n        $roman .= str_repeat($key, $matches);\n \
    \       $number = $number % $value;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $roman = '';\n\
    \    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n        'd'\
    \ => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n  \
    \      'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n\
    \        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    foreach\
    \ ($numerals as $numeral => $value) {\n        $matches = intval($number / $value);\n\
    \        $roman .= str_repeat($numeral, $matches);\n        $number = $number\
    \ % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing a roman\
    \ numeral representation of a positive integer,\nreturn the integer.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $numerals = array(\n\
    \        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD'\
    \ => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n    \
    \    'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1\n    );\n    $result = '';\n    foreach\
    \ ($numerals as $numeral => $value) {\n        while ($number >= $value) {\n \
    \           $result .= $numeral;\n            $number -= $value;\n        }\n\
    \    }\n    return $result;\n}\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);", "    $roman = '';\n    $roman_numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    );\n    foreach ($roman_numerals as\
    \ $key => $value) {\n        $matches = intval($number / $value);\n        $roman\
    \ .= str_repeat($key, $matches);\n        $number = $number % $value;\n    }\n\
    \    return $roman;\n}\necho int_to_mini_roman(19);\necho \"\\n\";\necho int_to_mini_roman(152);\n\
    echo \"\\n\";\necho int_to_mini_roman(426);\necho \"\\n\";", "    $result = '';\n\
    \    $numerals = array(\n        'm' => 1000,\n        'd' => 500,\n        'c'\
    \ => 100,\n        'l' => 50,\n        'x' => 10,\n        'v' => 5,\n       \
    \ 'i' => 1\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);", "    $roman = '';\n    $numerals = array(\n   \
    \     'm' => 1000,\n        'd' => 500,\n        'c' => 100,\n        'l' => 50,\n\
    \        'x' => 10,\n        'v' => 5,\n        'i' => 1\n    );\n    foreach\
    \ ($numerals as $numeral => $value) {\n        $roman .= str_repeat($numeral,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $roman;\n\
    }\n\n/* Given a string containing a roman numeral, return its integer equivalent.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/",
  "    $roman = '';\n    $numbers = [\n        1000 => 'm',\n        900 => 'cm',\n\
    \        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n        90 =>\
    \ 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n       \
    \ 9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n    ];\n\
    \    foreach ($numbers as $key => $value) {\n        while ($number >= $key) {\n\
    \            $roman .= $value;\n            $number -= $key;\n        }\n    }\n\
    \    return $roman;\n}\n\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);", "    $result = '';\n    $numerals = [\n       \
    \ 'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n\
    \        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' =>\
    \ 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv'\
    \ => 4,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral => $value)\
    \ {\n        $result .= str_repeat($numeral, (int)($number / $value));\n     \
    \   $number %= $value;\n    }\n    return $result;\n}\n\n/* Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\nand return it in uppercase.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\"XIX\"\n>>>\
    \ int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/", "    $roman\
    \ = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n\
    \    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $result = '';\n\
    \    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n  \
    \      'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' =>\
    \ 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix'\
    \ => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n   \
    \ foreach ($roman_numerals as $roman => $int) {\n        $matches = intval($number\
    \ / $int);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $int;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $roman = array(\n\
    \        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD'\
    \ => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n    \
    \    'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1\n    );\n    $result = '';\n    foreach\
    \ ($roman as $key => $value) {\n        $matches = intval($number / $value);\n\
    \        $result .= str_repeat($key, $matches);\n        $number = $number % $value;\n\
    \    }\n    return $result;\n}\n\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);", "    $roman = '';\n    $numbers = [1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd',\
    \ 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        while ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped, except leave the string unchanged if the string's length is less\nthan\
    \ 2.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>>\
    \ front_back('ab')\n'ba'*/", "    $roman = '';\n    $roman_numerals = array(\n\
    \        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n        'cd'\
    \ => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' => 50,\n    \
    \    'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n\
    \        'iv' => 4,\n        'i' => 1\n    );\n    foreach ($roman_numerals as\
    \ $key => $value) {\n        $matches = intval($number / $value);\n        $roman\
    \ .= str_repeat($key, $matches);\n        $number = $number % $value;\n    }\n\
    \    return $roman;\n}\n\necho int_to_mini_roman(19) . \"\\n\";\necho int_to_mini_roman(152)\
    \ . \"\\n\";\necho int_to_mini_roman(426) . \"\\n\";", "    $roman = '';\n   \
    \ $numbers = [\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n\
    \        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' =>\
    \ 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V'\
    \ => 5,\n        'IV' => 4,\n        'I' => 1\n    ];\n    foreach ($numbers as\
    \ $roman => $int) {\n        $matches = intval($number / $int);\n        $roman\
    \ .= str_repeat($roman, $matches);\n        $number = $number % $int;\n    }\n\
    \    return $roman;\n}\n\n/* Given a positive integer, obtain its roman numeral\
    \ equivalent as a string,\nand return it in uppercase.\nRestrictions: 1 <= num\
    \ <= 1000\nExamples:\n>>> int_to_roman(19)\n\"XIX\"\n>>> int_to_roman(152)\n\"\
    CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/", "    $result = '';\n    $numerals\
    \ = array(\n        'm' => 1000,\n        'd' => 500,\n        'c' => 100,\n \
    \       'l' => 50,\n        'x' => 10,\n        'v' => 5,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $result .= str_repeat($numeral,\
    \ intval($number / $value));\n        $number %= $value;\n    }\n    return $result;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n\
    >>> front_back('ab')\n'ba'*/", "    $roman = \"\";\n    $number = (int)$number;\n\
    \    if ($number < 1 || $number > 1000) {\n        return \"Invalid number\";\n\
    \    }\n    while ($number >= 1000) {\n        $roman .= \"m\";\n        $number\
    \ -= 1000;\n    }\n    while ($number >= 900) {\n        $roman .= \"cm\";\n \
    \       $number -= 900;\n    }\n    while ($number >= 500) {\n        $roman .=\
    \ \"d\";\n        $number -= 500;\n    }\n    while ($number >= 400) {\n     \
    \   $roman .= \"cd\";\n        $number -= 400;\n    }\n    while ($number >= 100)\
    \ {\n        $roman .= \"c\";\n        $number -= 100;\n    }\n    while ($number\
    \ >= 90) {\n        $roman .= \"xc\";\n        $number -= 90;\n    }\n    while\
    \ ($number >= 50) {\n        $roman .= \"l\";\n        $number -= 50;\n    }\n\
    \    while ($number >= 40) {\n        $roman .= \"xl\";\n        $number -= 40;\n\
    \    }\n    while ($number >= 10) {\n        $roman .= \"x\";\n        $number\
    \ -= 10;\n    }\n    while ($number >= 9) {\n        $roman .= \"ix\";\n     \
    \   $number -= 9;\n    }\n    while ($number >= 5) {\n        $roman .= \"v\"\
    ;\n        $number -= 5;\n    }\n    while ($number >= 4) {\n        $roman .=\
    \ \"iv\";\n        $number -= 4;\n    }\n    while ($number >= 1) {\n        $roman\
    \ .= \"i\";\n        $number -= 1;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo \"<br>\";\necho int_to_mini_roman(152);\necho \"<br>\";\necho int_to_mini_roman(426);\n\
    echo \"<br>\";\necho int_to_mini_roman(0);\necho \"<br>\";\necho int_to_mini_roman(1001);\n\
    echo \"<br>\";\necho int_to_mini", "    $roman = \"\";\n    $numerals = array(\n\
    \        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD'\
    \ => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n    \
    \    'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1\n    );\n    foreach ($numerals as $key\
    \ => $value) {\n        while ($number >= $value) {\n            $roman .= $key;\n\
    \            $number -= $value;\n        }\n    }\n    return strtolower($roman);\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);",
  "    $result = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix',\
    \ 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n        while\
    \ ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n         \
    \   $number -= $numbers[$i];\n        }\n    }\n    return $result;\n}\n\n/* Given\
    \ a string representing a roman numeral, return the integer equivalent.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $roman = '';\n \
    \   $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n        'd'\
    \ => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n  \
    \      'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n\
    \        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    foreach\
    \ ($numerals as $numeral => $value) {\n        $matches = intval($number / $value);\n\
    \        $roman .= str_repeat($numeral, $matches);\n        $number = $number\
    \ % $value;\n    }\n    return $roman;\n}\n\n/* Given a positive integer, obtain\
    \ its roman numeral equivalent as a string,\nand return it in uppercase.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\"XIX\"\n>>> int_to_roman(152)\n\
    \"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/", "    $result = '';\n    $roman_numerals\
    \ = array(\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n\
    \        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' =>\
    \ 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v'\
    \ => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    foreach ($roman_numerals\
    \ as $roman => $num) {\n        $matches = intval($number / $num);\n        $result\
    \ .= str_repeat($roman, $matches);\n        $number = $number % $num;\n    }\n\
    \    return $result;\n}\n\n/* Given a string containing a roman numeral representation\
    \ of a positive integer,\nreturn the integer.\nRestrictions: 1 <= num <= 3999\n\
    Examples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\"\
    )\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $result = '';\n    $map\
    \ = [\n        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n     \
    \   'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n\
    \        'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1\n    ];\n    foreach ($map as $roman =>\
    \ $int) {\n        $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\n\n/* Given a string of roman numerals, return the integer equivalent.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $result = '';\n\
    \    $roman_numerals = array(\n        'M' => 1000,\n        'CM' => 900,\n  \
    \      'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' =>\
    \ 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX'\
    \ => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n   \
    \ foreach ($roman_numerals as $roman => $num) {\n        $matches = intval($number\
    \ / $num);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $num;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);", "    $roman = \"\"\
    ;\n    $roman_numerals = array(\n        'M'  => 1000,\n        'CM' => 900,\n\
    \        'D'  => 500,\n        'CD' => 400,\n        'C'  => 100,\n        'XC'\
    \ => 90,\n        'L'  => 50,\n        'XL' => 40,\n        'X'  => 10,\n    \
    \    'IX' => 9,\n        'V'  => 5,\n        'IV' => 4,\n        'I'  => 1);\n\
    \    foreach ($roman_numerals as $roman => $number_in_roman){\n        $matches\
    \ = intval($number / $number_in_roman);\n        $roman .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $number_in_roman;\n    }\n    return\
    \ $roman;\n}\necho int_to_mini_roman(19);\necho \"<br>\";\necho int_to_mini_roman(152);\n\
    echo \"<br>\";\necho int_to_mini_roman(426);\necho \"<br>\";\necho int_to_mini_roman(999);\n\
    echo \"<br>\";\necho int_to_mini_roman(1000);\necho \"<br>\";\necho int_to_mini_roman(1001);\n\
    echo \"<br>\";\necho int_to_mini_roman(1002);\necho \"<br>\";\necho int_to_mini_roman(1003);\n\
    echo \"<br>\";\necho int_to_mini_roman(1004);\necho \"<br>\";\necho int_to_mini_roman(1005);\n\
    echo \"<br>\";\necho int_to_mini_roman(1006);\necho \"<br>\";\necho int_to_mini_roman(1007);\n\
    echo \"<br>\";\necho int_to_mini_roman(1008);\necho \"<br>\";\necho int_to_mini_roman(1009);\n\
    echo \"<br>\";\necho int_to_mini_roman(1010);\necho \"<br>\";\necho int_to_mini_roman(1011);\n\
    echo \"<br>\";\necho int_", "    $roman = array(\n        'M' => 1000,\n     \
    \   'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n\
    \        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' =>\
    \ 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I'\
    \ => 1\n    );\n    $result = '';\n    foreach ($roman as $key => $value) {\n\
    \        $result .= str_repeat($key, $number / $value);\n        $number %= $value;\n\
    \    }\n    return $result;\n}\n\n/* Given a string containing a roman numeral\
    \ representation of a positive integer,\nreturn the integer.\nRestrictions: 1\
    \ <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/", "    $romans = array(\n\
    \        'M' => 1000,\n        'CM' => 900,\n        'D' => 500,\n        'CD'\
    \ => 400,\n        'C' => 100,\n        'XC' => 90,\n        'L' => 50,\n    \
    \    'XL' => 40,\n        'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n\
    \        'IV' => 4,\n        'I' => 1,\n    );\n    $result = '';\n    foreach\
    \ ($romans as $key => $value) {\n        $matches = intval($number / $value);\n\
    \        $result .= str_repeat($key, $matches);\n        $number = $number % $value;\n\
    \    }\n    return $result;\n}\n\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);", "  $roman = '';\n  $numerals = array(\n    'm'\
    \ => 1000,\n    'cm' => 900,\n    'd' => 500,\n    'cd' => 400,\n    'c' => 100,\n\
    \    'xc' => 90,\n    'l' => 50,\n    'xl' => 40,\n    'x' => 10,\n    'ix' =>\
    \ 9,\n    'v' => 5,\n    'iv' => 4,\n    'i' => 1,\n  );\n  foreach ($numerals\
    \ as $numeral => $value) {\n    $matches = intval($number / $value);\n    $roman\
    \ .= str_repeat($numeral, $matches);\n    $number = $number % $value;\n  }\n \
    \ return $roman;\n}\n\n/* Given a string, return a new string with the first and\
    \ last characters\nswapped.\nExamples:\n>>> swap_first_last(\"hello\")\n\"oellh\"\
    \n>>> swap_first_last(\"python\")\n\"nthypo\"\n>>> swap_first_last(\"a\")\n\"\
    a\"*/", "    $roman = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        while ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped, except leave the string unchanged if the string's length is less\nthan\
    \ 2.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>>\
    \ front_back('ab')\n'ba'*/", "    $result = '';\n    $numbers = [1000, 900, 500,\
    \ 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd',\
    \ 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string, return a new string that is the reverse of the original.\n\
    Examples:\n>>> reverse_string(\"hello\")\n\"olleh\"\n>>> reverse_string(\"world\"\
    )\n\"dlrow\"\n>>> reverse_string(\"\")\n\"\"*/", "    $roman = '';\n    $numerals\
    \ = array(\n        'm' => 1000,\n        'cm' => 900,\n        'd' => 500,\n\
    \        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n        'l' =>\
    \ 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n        'v'\
    \ => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    foreach ($numerals\
    \ as $numeral => $value) {\n        $matches = intval($number / $value);\n   \
    \     $roman .= str_repeat($numeral, $matches);\n        $number = $number % $value;\n\
    \    }\n    return $roman;\n}\n\n/* Given a positive integer, obtain its roman\
    \ numeral equivalent as a string,\nand return it in uppercase.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\"XIX\"\n>>> int_to_roman(152)\n\
    \"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/", "    $roman = '';\n    $number\
    \ = (int) $number;\n    $roman_numerals = array(\n        'M'  => 1000,\n    \
    \    'CM' => 900,\n        'D'  => 500,\n        'CD' => 400,\n        'C'  =>\
    \ 100,\n        'XC' => 90,\n        'L'  => 50,\n        'XL' => 40,\n      \
    \  'X'  => 10,\n        'IX' => 9,\n        'V'  => 5,\n        'IV' => 4,\n \
    \       'I'  => 1\n    );\n    foreach ($roman_numerals as $roman => $number_value)\
    \ {\n        $matches = intval($number / $number_value);\n        $roman .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $number_value;\n    }\n    return $roman;\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
