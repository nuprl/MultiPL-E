name: HumanEval_25_factorize
language: php
prompt: "<?php\n/* Return array of prime factors of given integer in the order from\
  \ smallest to largest.\nEach of the factors should be arrayed number of times corresponding\
  \ to how many times it appeares in factorization.\nInput number should be equal\
  \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
  array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/\nfunction factorize($n) {\n"
tests: "function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19,\
  \ 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
  \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
  \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n      \
    \  if ($n % $i == 0) {\n            $factors[] = $i;\n            $n = $n / $i;\n\
    \        } else {\n            $i++;\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n        \
    \    $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n        \
    \    $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n\
    \    return $factors;\n}\n\nprint_r(factorize(8));\nprint_r(factorize(25));\n\
    print_r(factorize(70));", "    $factors = array();\n    $divisor = 2;\n    while\
    \ ($n > 1) {\n        while ($n % $divisor == 0) {\n            $factors[] = $divisor;\n\
    \            $n /= $divisor;\n        }\n        $divisor++;\n    }\n    return\
    \ $factors;\n}\n\n/* Return the sum of all numbers from 1 to $n, inclusive.\n\
    >>> sum_numbers(1)\n1\n>>> sum_numbers(2)\n3\n>>> sum_numbers(3)\n6\n>>> sum_numbers(10)\n\
    55*/", "    $result = [];\n    for ($i = 2; $i <= $n; $i++) {\n        while ($n\
    \ % $i == 0) {\n            $result[] = $i;\n            $n /= $i;\n        }\n\
    \    }\n    return $result;\n}\n\n/* Return the sum of all numbers in the array.\n\
    >>> sum_array(array(1, 2, 3))\n6\n>>> sum_array(array(5, 5, 5, 5, 5))\n25\n>>>\
    \ sum_array(array(5, 6, 7, 8, 9, 10))\n45*/", "    $res = [];\n    $i = 2;\n \
    \   while ($n > 1) {\n        if ($n % $i == 0) {\n            $res[] = $i;\n\
    \            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $res;\n}\n\n/* Return array of prime factors of given integer in the\
    \ order from smallest to largest.\nEach of the factors should be arrayed number\
    \ of times corresponding to how many times it appeares in factorization.\nInput\
    \ number should be equal to the product of all factors\n>>> factorize(8)\narray(2,\
    \ 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/",
  "    $factors = array();\n    for ($i = 2; $i <= $n; $i++) {\n        while ($n\
    \ % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n        }\n\
    \    }\n    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    for ($i = 2; $i <= $n; $i++) {\n      \
    \  while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \        }\n    }\n    return $factors;\n}\n\n/*\n * Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n * Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n * Input number should be equal to the product of all factors\n\
    \ * >>> factorize(8)\n * array(2, 2, 2)\n * >>> factorize(25)\n * array(5, 5)\n\
    \ * >>> factorize(70)\n * array(2, 5, 7)\n */", "    $result = [];\n    for ($i\
    \ = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $result[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $result;\n}\n\n/*\n\
    \ * Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n * Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n * Input number should be equal\
    \ to the product of all factors\n * >>> factorize(8)\n * array(2, 2, 2)\n * >>>\
    \ factorize(25)\n * array(5, 5)\n * >>> factorize(70)\n * array(2, 5, 7)\n */",
  "    $result = [];\n    $i = 2;\n    while ($n > 1) {\n        while ($n % $i ==\
    \ 0) {\n            $result[] = $i;\n            $n /= $i;\n        }\n      \
    \  $i++;\n    }\n    return $result;\n}\n\n/*\n * Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n * Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n * Input number should be equal to the product of all factors\n\
    \ * >>> factorize(8)\n * array(2, 2, 2)\n * >>> factorize(25)\n * array(5, 5)\n\
    \ * >>> factorize(70)\n * array(2, 5, 7)\n */", "    $factors = array();\n   \
    \ $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $divisor = 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n\
    \            $factors[] = $divisor;\n            $n /= $divisor;\n        }\n\
    \        $divisor++;\n    }\n    return $factors;\n}\n\n/* Return the number of\
    \ times given integer is contained in the array.\n>>> count_in_array(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10), 5)\n1\n>>> count_in_array(array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10), 10)\n1\n>>> count_in_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 10, 10, 10), 10)\n4*/", "    $factors = array();\n    for ($i = 2; $i <=\
    \ $n; $i++) {\n        while ($n % $i == 0) {\n            $factors[] = $i;\n\
    \            $n /= $i;\n        }\n    }\n    return $factors;\n}\n\n/* Return\
    \ array of prime factors of given integer in the order from smallest to largest.\n\
    Each of the factors should be arrayed number of times corresponding to how many\
    \ times it appeares in factorization.\nInput number should be equal to the product\
    \ of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5,\
    \ 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    $i = 2;\n\
    \    while ($n > 1) {\n        if ($n % $i == 0) {\n            $result[] = $i;\n\
    \            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $result;\n}\n\n/*\n * Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)\n*/", "    $factors = array();\n    for ($i = 2; $i <= $n; $i++) {\n    \
    \    while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \        }\n    }\n    return $factors;\n}\n\n/* Return array of prime factors\
    \ of given integer in the order from smallest to largest.\nEach of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\nInput number should be equal to the product of all factors\n\
    >>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\n\
    array(2, 5, 7)*/", "    $factors = array();\n    $divisor = 2;\n    while ($n\
    \ > 1) {\n        while ($n % $divisor == 0) {\n            $factors[] = $divisor;\n\
    \            $n /= $divisor;\n        }\n        $divisor++;\n    }\n    return\
    \ $factors;\n}\n\n/* Return array of prime factors of given integer in the order\
    \ from smallest to largest.\nEach of the factors should be arrayed number of times\
    \ corresponding to how many times it appeares in factorization.\nInput number\
    \ should be equal to the product of all factors\n>>> factorize(8)\narray(2, 2,\
    \ 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", " \
    \   $factors = array();\n    $i = 2;\n    while ($n > 1) {\n        while ($n\
    \ % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n        }\n\
    \        $i++;\n    }\n    return $factors;\n}\n\n/* Return array of prime factors\
    \ of given integer in the order from smallest to largest.\nEach of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\nInput number should be equal to the product of all factors\n\
    >>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\n\
    array(2, 5, 7)*/", "    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n\
    \        while ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n}\n\n/* Return\
    \ array of prime factors of given integer in the order from smallest to largest.\n\
    Each of the factors should be arrayed number of times corresponding to how many\
    \ times it appeares in factorization.\nInput number should be equal to the product\
    \ of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5,\
    \ 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n    $i =\
    \ 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n\
    }\n\n/*\n * Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n * Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n * Input number should be equal\
    \ to the product of all factors\n * >>> factorize(8)\n * array(2, 2, 2)\n * >>>\
    \ factorize(25)\n * array(5, 5)\n * >>> factorize(70)\n * array(2, 5, 7)\n */",
  "    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n        while ($n %\
    \ $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n        }\n\
    \        $i++;\n    }\n    return $factors;\n}\n\n/* Return array of prime factors\
    \ of given integer in the order from smallest to largest.\nEach of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\nInput number should be equal to the product of all factors\n\
    >>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\n\
    array(2, 5, 7)*/", "    $result = [];\n    for ($i = 2; $i <= $n; $i++) {\n  \
    \      while ($n % $i == 0) {\n            $result[] = $i;\n            $n /=\
    \ $i;\n        }\n    }\n    return $result;\n}\n\n/* Return array of prime factors\
    \ of given integer in the order from smallest to largest.\nEach of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\nInput number should be equal to the product of all factors\n\
    >>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\n\
    array(2, 5, 7)*/", "    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n\
    \        while ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n}\n\n/* Return\
    \ array of prime factors of given integer in the order from smallest to largest.\n\
    Each of the factors should be arrayed number of times corresponding to how many\
    \ times it appeares in factorization.\nInput number should be equal to the product\
    \ of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5,\
    \ 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n    $i =\
    \ 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n\
    }\n\n/* Return the sum of all numbers in the array except the highest and lowest\
    \ element (the value, not the index!).\n(The highest/lowest element is respectively\
    \ only one element at each edge, even if there are more than one with the same\
    \ value!)\n\n>>> sumArray(array(6, 2, 1, 8, 10))\n16\n>>> sumArray(array(-6, -20,\
    \ -1, -10, -12))\n-28\n>>> sumArray(array(6, 2, 1, 8, 10, -1))\n17\n*/", "   \
    \ $result = [];\n    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i ==\
    \ 0) {\n            $result[] = $i;\n            $n /= $i;\n        }\n    }\n\
    \    return $result;\n}\n\n/* Return array of prime factors of given integer in\
    \ the order from smallest to largest.\nEach of the factors should be arrayed number\
    \ of times corresponding to how many times it appeares in factorization.\nInput\
    \ number should be equal to the product of all factors\n>>> factorize(8)\narray(2,\
    \ 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/",
  "    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n        while ($n %\
    \ $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n        }\n\
    \        $i++;\n    }\n    return $factors;\n}\n\n/* Return array of prime factors\
    \ of given integer in the order from smallest to largest.\nEach of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\nInput number should be equal to the product of all factors\n\
    >>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\n\
    array(2, 5, 7)*/", "    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n\
    \        if ($n % $i == 0) {\n            $factors[] = $i;\n            $n = $n\
    \ / $i;\n        } else {\n            $i++;\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n\
    \    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $divisor = 2;\n    while ($n > 1) {\n \
    \       while ($n % $divisor == 0) {\n            $factors[] = $divisor;\n   \
    \         $n /= $divisor;\n        }\n        $divisor++;\n    }\n    return $factors;\n\
    }\n\n/* Return the sum of all elements in the array.\n>>> sum_array(array(1, 2,\
    \ 3))\n6\n>>> sum_array(array(1, 2, 3, 4, 5))\n15\n>>> sum_array(array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10))\n55*/", "    $factors = array();\n    $i = 2;\n    while\
    \ ($n > 1) {\n        while ($n % $i == 0) {\n            $factors[] = $i;\n \
    \           $n /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    $divisor\
    \ = 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n         \
    \   $result[] = $divisor;\n            $n /= $divisor;\n        }\n        $divisor++;\n\
    \    }\n    return $result;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \        }\n        $i++;\n    }\n    return $factors;\n}\n\nprint_r(factorize(70));",
  "    $factors = array();\n    $d = 2;\n    while ($n > 1) {\n        while ($n %\
    \ $d == 0) {\n            $factors[] = $d;\n            $n /= $d;\n        }\n\
    \        $d = $d + 1;\n        if ($d * $d > $n) {\n            if ($n > 1) {\n\
    \                $factors[] = $n;\n                break;\n            }\n   \
    \     }\n    }\n    return $factors;\n}\n\n/* Return array of prime factors of\
    \ given integer in the order from smallest to largest.\nEach of the factors should\
    \ be arrayed number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    for ($i = 2; $i <= $n; $i++) {\n      \
    \  while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \        }\n    }\n    return $factors;\n}\n\n/* Return array of prime factors\
    \ of given integer in the order from smallest to largest.\nEach of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\nInput number should be equal to the product of all factors\n\
    >>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\n\
    array(2, 5, 7)*/", "    $factors = array();\n    $d = 2;\n    while ($n > 1) {\n\
    \        while ($n % $d == 0) {\n            $factors[] = $d;\n            $n\
    \ /= $d;\n        }\n        $d = $d + 1;\n        if ($d * $d > $n) {\n     \
    \       if ($n > 1) {\n                $factors[] = $n;\n                break;\n\
    \            }\n        }\n    }\n    return $factors;\n}\n\n/*\n * Return array\
    \ of prime factors of given integer in the order from smallest to largest.\nEach\
    \ of the factors should be arrayed number of times corresponding to how many times\
    \ it appeares in factorization.\nInput number should be equal to the product of\
    \ all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)\n */", "    $factors = array();\n    $i = 2;\n\
    \    while ($n > 1) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n\
    }\n", "    $result = [];\n    for ($i = 2; $i <= $n; $i++) {\n        while ($n\
    \ % $i == 0) {\n            $result[] = $i;\n            $n /= $i;\n        }\n\
    \    }\n    return $result;\n}\n\n/*\n * Return array of prime factors of given\
    \ integer in the order from smallest to largest.\n * Each of the factors should\
    \ be arrayed number of times corresponding to how many times it appeares in factorization.\n\
    \ * Input number should be equal to the product of all factors\n * >>> factorize(8)\n\
    \ * array(2, 2, 2)\n * >>> factorize(25)\n * array(5, 5)\n * >>> factorize(70)\n\
    \ * array(2, 5, 7)\n */", "    $result = [];\n    $i = 2;\n    while ($n > 1)\
    \ {\n        if ($n % $i == 0) {\n            $result[] = $i;\n            $n\
    \ /= $i;\n        } else {\n            $i++;\n        }\n    }\n    return $result;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n\
    \    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n       \
    \ if ($n % $i == 0) {\n            $factors[] = $i;\n            $n = $n / $i;\n\
    \        } else {\n            $i++;\n        }\n    }\n    return $factors;\n\
    }\n\n/*\n * Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n * Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n * Input number should be equal\
    \ to the product of all factors\n * >>> factorize(8)\n * array(2, 2, 2)\n * >>>\
    \ factorize(25)\n * array(5, 5)\n * >>> factorize(70)\n * array(2, 5, 7)\n */",
  "    $result = [];\n    $i = 2;\n    while ($n > 1) {\n        while ($n % $i ==\
    \ 0) {\n            $result[] = $i;\n            $n /= $i;\n        }\n      \
    \  $i++;\n    }\n    return $result;\n}\n\n/* Return array of prime factors of\
    \ given integer in the order from smallest to largest.\nEach of the factors should\
    \ be arrayed number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $result = [];\n    $i = 2;\n    while ($n > 1) {\n        while\
    \ ($n % $i == 0) {\n            $result[] = $i;\n            $n /= $i;\n     \
    \   }\n        $i++;\n    }\n    return $result;\n}\n\n/* Return the sum of all\
    \ numbers in the array except the highest and lowest element.\nThe array length\
    \ will be at least 2.\n>>> sum_array(array(6, 2, 1, 8, 10))\n16\n>>> sum_array(array(6,\
    \ 0, 1, 10, 10))\n17\n*/", "    $i = 2;\n    $factors = array();\n    while ($i\
    \ <= $n) {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n      \
    \      $n = $n / $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $d = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $d == 0) {\n            $factors[] = $d;\n            $n /= $d;\n\
    \        }\n        $d = $d + 1;\n        if ($d * $d > $n) {\n            if\
    \ ($n > 1) {\n                $factors[] = $n;\n                break;\n     \
    \       }\n        }\n    }\n    return $factors;\n}\n\n/* Return array of prime\
    \ factors of given integer in the order from smallest to largest.\nEach of the\
    \ factors should be arrayed number of times corresponding to how many times it\
    \ appeares in factorization.\nInput number should be equal to the product of all\
    \ factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    $i = 2;\n    while\
    \ ($n > 1) {\n        if ($n % $i == 0) {\n            $result[] = $i;\n     \
    \       $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n   \
    \ return $result;\n}\n\n/* Return the sum of all elements in the array.\n>>> sum_array(array(1,\
    \ 2, 3))\n6\n>>> sum_array(array(5, 5, 5, 5, 5))\n25\n>>> sum_array(array(5, 6,\
    \ 7, 8, 9, 10))\n45*/", "    $factors = array();\n    $i = 2;\n    while ($n >\
    \ 1) {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n          \
    \  $n = $n / $i;\n        } else {\n            $i++;\n        }\n    }\n    return\
    \ $factors;\n}\n\n/* Return the sum of all the numbers in the array.\n>>> sum_array(array(1,\
    \ 2, 3, 4))\n10\n>>> sum_array(array(1, 2, 3, 4, 5))\n15\n>>> sum_array(array(1,\
    \ 2, 3, 4, 5, 6))\n21\n*/", "    $result = [];\n    $i = 2;\n    while ($n > 1)\
    \ {\n        if ($n % $i == 0) {\n            $result[] = $i;\n            $n\
    \ /= $i;\n        } else {\n            $i++;\n        }\n    }\n    return $result;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n\
    \    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $d = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $d == 0) {\n            $factors[] = $d;\n            $n /= $d;\n\
    \        }\n        $d = $d + 1;\n        if ($d * $d > $n) {\n            if\
    \ ($n > 1) {\n                $factors[] = $n;\n                break;\n     \
    \       }\n        }\n    }\n    return $factors;\n}\n\n/* Return array of prime\
    \ factors of given integer in the order from smallest to largest.\nEach of the\
    \ factors should be arrayed number of times corresponding to how many times it\
    \ appeares in factorization.\nInput number should be equal to the product of all\
    \ factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n    for ($i =\
    \ 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n}\n\n\
    /* Return array of prime factors of given integer in the order from smallest to\
    \ largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "\t$factors = array();\n\t\
    $d = 2;\n\twhile ($n > 1) {\n\t\twhile ($n % $d == 0) {\n\t\t\t$factors[] = $d;\n\
    \t\t\t$n /= $d;\n\t\t}\n\t\t$d += 1;\n\t}\n\treturn $factors;\n}\n\n/* Return\
    \ array of prime factors of given integer in the order from smallest to largest.\n\
    Each of the factors should be arrayed number of times corresponding to how many\
    \ times it appeares in factorization.\nInput number should be equal to the product\
    \ of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5,\
    \ 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    for ($i =\
    \ 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $result[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $result;\n}\n\n/*\
    \ Return array of prime factors of given integer in the order from smallest to\
    \ largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    for\
    \ ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $result[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $result;\n}\n\n/*\n\
    \ * Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n * Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n * Input number should be equal\
    \ to the product of all factors\n * >>> factorize(8)\n * array(2, 2, 2)\n * >>>\
    \ factorize(25)\n * array(5, 5)\n * >>> factorize(70)\n * array(2, 5, 7)\n */",
  "    $result = [];\n    $divisor = 2;\n    while ($n > 1) {\n        while ($n %\
    \ $divisor == 0) {\n            $result[] = $divisor;\n            $n /= $divisor;\n\
    \        }\n        $divisor++;\n    }\n    return $result;\n}\n\n/*\n * Return\
    \ array of prime factors of given integer in the order from smallest to largest.\n\
    \ * Each of the factors should be arrayed number of times corresponding to how\
    \ many times it appeares in factorization.\n * Input number should be equal to\
    \ the product of all factors\n * >>> factorize(8)\n * array(2, 2, 2)\n * >>> factorize(25)\n\
    \ * array(5, 5)\n * >>> factorize(70)\n * array(2, 5, 7)\n */", "    $factors\
    \ = array();\n    $d = 2;\n    while ($n > 1) {\n        while ($n % $d == 0)\
    \ {\n            $factors[] = $d;\n            $n /= $d;\n        }\n        $d\
    \ = $d + 1;\n        if ($d * $d > $n) {\n            if ($n > 1) {\n        \
    \        $factors[] = $n;\n                break;\n            }\n        }\n\
    \    }\n    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \        }\n        $i++;\n    }\n    return $factors;\n}\n\n/* Return the sum\
    \ of all integers from 1 to n, inclusive.\n>>> sum_naturals(1)\n1\n>>> sum_naturals(5)\n\
    15\n>>> sum_naturals(10)\n55*/", "    $factors = array();\n    $d = 2;\n    while\
    \ ($n > 1) {\n        while ($n % $d == 0) {\n            $factors[] = $d;\n \
    \           $n /= $d;\n        }\n        $d = $d + 1;\n        if ($d * $d >\
    \ $n) {\n            if ($n > 1) {\n                $factors[] = $n;\n       \
    \         break;\n            }\n        }\n    }\n    return $factors;\n}\n\n\
    /* Return array of prime factors of given integer in the order from smallest to\
    \ largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $divisor = 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n\
    \            $factors[] = $divisor;\n            $n /= $divisor;\n        }\n\
    \        $divisor++;\n    }\n    return $factors;\n}\n\nprint_r(factorize(8));\n\
    print_r(factorize(25));\nprint_r(factorize(70));", "\t$factors = array();\n\t\
    $d = 2;\n\twhile ($n > 1) {\n\t\twhile ($n % $d == 0) {\n\t\t\t$factors[] = $d;\n\
    \t\t\t$n /= $d;\n\t\t}\n\t\t$d = $d + 1;\n\t\tif ($d * $d > $n) {\n\t\t\tif ($n\
    \ > 1) {\n\t\t\t\t$factors[] = $n;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $factors;\n}\n\n/* Return array of prime factors of given integer in the order\
    \ from smallest to largest.\nEach of the factors should be arrayed number of times\
    \ corresponding to how many times it appeares in factorization.\nInput number\
    \ should be equal to the product of all factors\n>>> factorize(8)\narray(2, 2,\
    \ 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", " \
    \   $factors = array();\n    $divisor = 2;\n    while ($n > 1) {\n        while\
    \ ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n /=\
    \ $divisor;\n        }\n        $divisor++;\n    }\n    return $factors;\n}\n\n\
    /* Return array of prime factors of given integer in the order from smallest to\
    \ largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    $i\
    \ = 2;\n    while ($n > 1) {\n        if ($n % $i == 0) {\n            $result[]\
    \ = $i;\n            $n /= $i;\n        } else {\n            $i++;\n        }\n\
    \    }\n    return $result;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $result = [];\n    $i = 2;\n    while ($n > 1) {\n        if ($n\
    \ % $i == 0) {\n            $result[] = $i;\n            $n /= $i;\n        }\
    \ else {\n            $i++;\n        }\n    }\n    return $result;\n}\n\n/* Return\
    \ array of prime factors of given integer in the order from smallest to largest.\n\
    Each of the factors should be arrayed number of times corresponding to how many\
    \ times it appeares in factorization.\nInput number should be equal to the product\
    \ of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5,\
    \ 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    $i = 2;\n\
    \    while ($n > 1) {\n        if ($n % $i == 0) {\n            $result[] = $i;\n\
    \            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $result;\n}\n\n/* Return array of prime factors of given integer in\
    \ the order from smallest to largest.\nEach of the factors should be arrayed number\
    \ of times corresponding to how many times it appeares in factorization.\nInput\
    \ number should be equal to the product of all factors\n>>> factorize(8)\narray(2,\
    \ 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/",
  "    $factors = array();\n    $divisor = 2;\n    while ($n > 1) {\n        while\
    \ ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n /=\
    \ $divisor;\n        }\n        $divisor++;\n    }\n    return $factors;\n}\n\n\
    /* Return array of prime factors of given integer in the order from smallest to\
    \ largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $divisor = 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n\
    \            $factors[] = $divisor;\n            $n /= $divisor;\n        }\n\
    \        $divisor += 1;\n    }\n    return $factors;\n}\n\n/* Return array of\
    \ prime factors of given integer in the order from smallest to largest.\nEach\
    \ of the factors should be arrayed number of times corresponding to how many times\
    \ it appeares in factorization.\nInput number should be equal to the product of\
    \ all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    $i = 2;\n    while\
    \ ($n > 1) {\n        while ($n % $i == 0) {\n            $result[] = $i;\n  \
    \          $n /= $i;\n        }\n        $i++;\n    }\n    return $result;\n}\n\
    \n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "\t$factors = array();\n\t\
    $i = 2;\n\twhile ($n > 1) {\n\t\twhile ($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\
    \t\t\t$n /= $i;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $factors;\n}\n\n/* Return array\
    \ of prime factors of given integer in the order from smallest to largest.\nEach\
    \ of the factors should be arrayed number of times corresponding to how many times\
    \ it appeares in factorization.\nInput number should be equal to the product of\
    \ all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n    $i = 2;\n\
    \    while ($n > 1) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n\
    \    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $result = [];\n    for ($i = 2; $i <= $n; $i++) {\n        while\
    \ ($n % $i == 0) {\n            $result[] = $i;\n            $n /= $i;\n     \
    \   }\n    }\n    return $result;\n}\n\n/* Return array of prime factors of given\
    \ integer in the order from smallest to largest.\nEach of the factors should be\
    \ arrayed number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $d = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $d == 0) {\n            $factors[] = $d;\n            $n /= $d;\n\
    \        }\n        $d += 1;\n    }\n    return $factors;\n}\n\n/* Return array\
    \ of prime factors of given integer in the order from smallest to largest.\nEach\
    \ of the factors should be arrayed number of times corresponding to how many times\
    \ it appeares in factorization.\nInput number should be equal to the product of\
    \ all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "\t$res = array();\n\t$i = 2;\n\twhile ($n\
    \ > 1) {\n\t\twhile ($n % $i == 0) {\n\t\t\t$res[] = $i;\n\t\t\t$n /= $i;\n\t\t\
    }\n\t\t$i++;\n\t}\n\treturn $res;\n}\n\nprint_r(factorize(8));\nprint_r(factorize(25));\n\
    print_r(factorize(70));", "    $factors = array();\n    $i = 2;\n    while ($n\
    \ > 1) {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n        \
    \    $n = $n / $i;\n        } else {\n            $i++;\n        }\n    }\n  \
    \  return $factors;\n}\n\n/* Return array of prime factors of given integer in\
    \ the order from smallest to largest.\nEach of the factors should be arrayed number\
    \ of times corresponding to how many times it appeares in factorization.\nInput\
    \ number should be equal to the product of all factors\n>>> factorize(8)\narray(2,\
    \ 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/",
  "    $factors = array();\n    $divisor = 2;\n    while ($n > 1) {\n        while\
    \ ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n /=\
    \ $divisor;\n        }\n        $divisor++;\n    }\n    return $factors;\n}\n\n\
    /*\n * Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n * Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n * Input number should be equal\
    \ to the product of all factors\n * >>> factorize(8)\n * array(2, 2, 2)\n * >>>\
    \ factorize(25)\n * array(5, 5)\n * >>> factorize(70)\n * array(2, 5, 7)\n */",
  "    $result = [];\n    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i ==\
    \ 0) {\n            $result[] = $i;\n            $n /= $i;\n        }\n    }\n\
    \    return $result;\n}\n\n/* Return array of prime factors of given integer in\
    \ the order from smallest to largest.\nEach of the factors should be arrayed number\
    \ of times corresponding to how many times it appeares in factorization.\nInput\
    \ number should be equal to the product of all factors\n>>> factorize(8)\narray(2,\
    \ 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/",
  "    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n        while ($n %\
    \ $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n        }\n\
    \        $i++;\n    }\n    return $factors;\n}\n\n/* Return array of prime factors\
    \ of given integer in the order from smallest to largest.\nEach of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\nInput number should be equal to the product of all factors\n\
    >>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\n\
    array(2, 5, 7)*/", "    $factors = array();\n    for ($i = 2; $i <= $n; $i++)\
    \ {\n        while ($n % $i == 0) {\n            $factors[] = $i;\n          \
    \  $n /= $i;\n        }\n    }\n    return $factors;\n}\n\n/* Return array of\
    \ prime factors of given integer in the order from smallest to largest.\nEach\
    \ of the factors should be arrayed number of times corresponding to how many times\
    \ it appeares in factorization.\nInput number should be equal to the product of\
    \ all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n    for ($i =\
    \ 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n}\n\n\
    /* Return array of prime factors of given integer in the order from smallest to\
    \ largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $divisor = 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n\
    \            $factors[] = $divisor;\n            $n /= $divisor;\n        }\n\
    \        $divisor++;\n    }\n    return $factors;\n}\n\n/*\n * Return the sum\
    \ of all the numbers in the array except the highest and the lowest element (the\
    \ value, not the index!).\n * (The highest/lowest element is respectively only\
    \ one element at each edge, even if there are more than one with the same value!)\n\
    \ *\n * Example:\n * { 6, 2, 1, 8, 10 } => 16\n * { 1, 1, 11, 2, 3 } => 6\n *\n\
    \ * If array is empty, null or None, or if only 1 Element exists, return 0.\n\
    \ * Note:In C++ instead null an empty vector is used. In C there is no null. ;-)\n\
    \ *\n *\n * -- There's no null in Haskell, therefore Maybe [Int] is used. Nothing\
    \ represents null.\n * Have fun coding it and please don't forget to vote and\
    \ rank this kata! :-)\n *\n * I have created other katas. Have a look if you like\
    \ coding and challenges.\n */", "    $factors = array();\n    $d = 2;\n    while\
    \ ($n > 1) {\n        while ($n % $d == 0) {\n            $factors[] = $d;\n \
    \           $n /= $d;\n        }\n        $d += 1;\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n        \
    \    $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n\
    }\n\n/*\n * Return the sum of the numbers in the array, except ignore sections\
    \ of numbers starting with a 6 and extending to the next 7 (every 6 will be followed\
    \ by at least one 7). Return 0 for no numbers.\n * >>> sum67([1, 2, 2])\n * 5\n\
    \ * >>> sum67([1, 2, 2, 6, 99, 99, 7])\n * 5\n * >>> sum67([1, 1, 6, 7, 2])\n\
    \ * 4\n */", "    $factors = array();\n    $d = 2;\n    while ($n > 1) {\n   \
    \     while ($n % $d == 0) {\n            $factors[] = $d;\n            $n /=\
    \ $d;\n        }\n        $d += 1;\n    }\n    return $factors;\n}\n\n/* Return\
    \ the sum of all the numbers in the array, except ignore sections of numbers starting\
    \ with a 6 and extending to the next 7 (every 6 will be followed by at least one\
    \ 7). Return 0 for no numbers.\n>>> sum67([1, 2, 2])\n5\n>>> sum67([1, 2, 2, 6,\
    \ 99, 99, 7])\n5\n>>> sum67([1, 1, 6, 7, 2])\n4\n*/", "\t$factors = array();\n\
    \t$i = 2;\n\twhile ($n > 1) {\n\t\twhile ($n % $i == 0) {\n\t\t\t$factors[] =\
    \ $i;\n\t\t\t$n /= $i;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $factors;\n}\n\n/* Return\
    \ array of prime factors of given integer in the order from smallest to largest.\n\
    Each of the factors should be arrayed number of times corresponding to how many\
    \ times it appeares in factorization.\nInput number should be equal to the product\
    \ of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5,\
    \ 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n    for\
    \ ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n}\n\n\
    /*\n * Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n * Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n * Input number should be equal\
    \ to the product of all factors\n * >>> factorize(8)\n * array(2, 2, 2)\n * >>>\
    \ factorize(25)\n * array(5, 5)\n * >>> factorize(70)\n * array(2, 5, 7)\n */",
  "    $result = [];\n    $prime = 2;\n    while ($n > 1) {\n        while ($n % $prime\
    \ == 0) {\n            $result[] = $prime;\n            $n /= $prime;\n      \
    \  }\n        $prime++;\n    }\n    return $result;\n}\n\n/* Return the sum of\
    \ all numbers in the array except the highest and lowest element (the value, not\
    \ the index!).\n(The highest/lowest element is respectively only one element at\
    \ each edge, even if there are more than one with the same value!)\n\n>>> sumArray(array(6,\
    \ 2, 1, 8, 10))\n16\n>>> sumArray(array(-6, -20, -1, -10, -12))\n-28\n>>> sumArray(array(6,\
    \ 0, 1, 10, 10))\n17*/", "\t$factors = array();\n\t$i = 2;\n\twhile ($n > 1) {\n\
    \t\twhile ($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\t\t\t$n /= $i;\n\t\t}\n\t\
    \t$i++;\n\t}\n\treturn $factors;\n}\n\n/* Return array of prime factors of given\
    \ integer in the order from smallest to largest.\nEach of the factors should be\
    \ arrayed number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $result = [];\n    for ($i = 2; $i <= $n; $i++) {\n        while\
    \ ($n % $i == 0) {\n            $result[] = $i;\n            $n /= $i;\n     \
    \   }\n    }\n    return $result;\n}\n\n/* Return array of prime factors of given\
    \ integer in the order from smallest to largest.\nEach of the factors should be\
    \ arrayed number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $divisor = 2;\n    while ($n > 1) {\n \
    \       while ($n % $divisor == 0) {\n            $factors[] = $divisor;\n   \
    \         $n /= $divisor;\n        }\n        $divisor++;\n    }\n    return $factors;\n\
    }\n\n/*\n * Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n * Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n * Input number should be equal\
    \ to the product of all factors\n * >>> factorize(8)\n * array(2, 2, 2)\n * >>>\
    \ factorize(25)\n * array(5, 5)\n * >>> factorize(70)\n * array(2, 5, 7)\n */",
  "    $factors = array();\n    $divisor = 2;\n    while ($n > 1) {\n        while\
    \ ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n /=\
    \ $divisor;\n        }\n        $divisor++;\n    }\n    return $factors;\n}\n\n\
    /* Return array of prime factors of given integer in the order from smallest to\
    \ largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n        \
    \    $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $divisor = 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n\
    \            $factors[] = $divisor;\n            $n /= $divisor;\n        }\n\
    \        $divisor++;\n    }\n    return $factors;\n}\n\n/* Return array of prime\
    \ factors of given integer in the order from smallest to largest.\nEach of the\
    \ factors should be arrayed number of times corresponding to how many times it\
    \ appeares in factorization.\nInput number should be equal to the product of all\
    \ factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    $i = 2;\n    while\
    \ ($n > 1) {\n        if ($n % $i == 0) {\n            $result[] = $i;\n     \
    \       $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n   \
    \ return $result;\n}\n\n/* Return array of prime factors of given integer in the\
    \ order from smallest to largest.\nEach of the factors should be arrayed number\
    \ of times corresponding to how many times it appeares in factorization.\nInput\
    \ number should be equal to the product of all factors\n>>> factorize(8)\narray(2,\
    \ 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/",
  "    $result = [];\n    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i ==\
    \ 0) {\n            $result[] = $i;\n            $n /= $i;\n        }\n    }\n\
    \    return $result;\n}\n\n/* Return array of prime factors of given integer in\
    \ the order from smallest to largest.\nEach of the factors should be arrayed number\
    \ of times corresponding to how many times it appeares in factorization.\nInput\
    \ number should be equal to the product of all factors\n>>> factorize(8)\narray(2,\
    \ 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/",
  "    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n        while ($n %\
    \ $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n        }\n\
    \        $i++;\n    }\n    return $factors;\n}\n\necho '<pre>';\nprint_r(factorize(70));\n\
    echo '</pre>';", "    $factors = array();\n    for ($i = 2; $i <= $n; $i++) {\n\
    \        while ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ /= $i;\n        }\n    }\n    return $factors;\n}\n\necho '<pre>';\nprint_r(factorize(8));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(factorize(25));\necho '</pre>';\n\necho\
    \ '<pre>';\nprint_r(factorize(70));\necho '</pre>';", "    $factors = array();\n\
    \    $d = 2;\n    while ($n > 1) {\n        while ($n % $d == 0) {\n         \
    \   $factors[] = $d;\n            $n /= $d;\n        }\n        $d = $d + 1;\n\
    \        if ($d * $d > $n) {\n            if ($n > 1) {\n                $factors[]\
    \ = $n;\n                break;\n            }\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n        \
    \    $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $i = 2;\n    while ($n > 1) {\n        if ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        } else {\n            $i++;\n    \
    \    }\n    }\n    return $factors;\n}\n\n/* Return array of prime factors of\
    \ given integer in the order from smallest to largest.\nEach of the factors should\
    \ be arrayed number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $result = [];\n    for ($i = 2; $i <= $n; $i++) {\n        while\
    \ ($n % $i == 0) {\n            $result[] = $i;\n            $n /= $i;\n     \
    \   }\n    }\n    return $result;\n}\n\n/*\n * Return array of prime factors of\
    \ given integer in the order from smallest to largest.\n * Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n * Input number should be equal to the product of all factors\n\
    \ * >>> factorize(8)\n * array(2, 2, 2)\n * >>> factorize(25)\n * array(5, 5)\n\
    \ * >>> factorize(70)\n * array(2, 5, 7)\n */", "    $factors = array();\n   \
    \ $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    $i\
    \ = 2;\n    while ($n > 1) {\n        if ($n % $i == 0) {\n            $result[]\
    \ = $i;\n            $n /= $i;\n        } else {\n            $i++;\n        }\n\
    \    }\n    return $result;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $d = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $d == 0) {\n            $factors[] = $d;\n            $n /= $d;\n\
    \        }\n        $d += 1;\n    }\n    return $factors;\n}\n\n/* Return the\
    \ sum of all the numbers in the array except the highest and the lowest element\
    \ (the value, not the index!).\n(The highest/lowest element is respectively only\
    \ one element at each edge, even if there are more than one with the same value!)\n\
    \n>>> sumArray(array(6, 2, 1, 8, 10))\n16\n>>> sumArray(array(-6, -20, -1, -10,\
    \ -12))\n-28\n>>> sumArray(array(6, 2, 1, 8, 10, -1))\n17\n*/", "    $result =\
    \ [];\n    $i = 2;\n    while ($n > 1) {\n        if ($n % $i == 0) {\n      \
    \      $result[] = $i;\n            $n /= $i;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return $result;\n}\n\n/* Return array of prime factors\
    \ of given integer in the order from smallest to largest.\nEach of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\nInput number should be equal to the product of all factors\n\
    >>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\n\
    array(2, 5, 7)*/", "    $factors = array();\n    for ($i = 2; $i <= $n; $i++)\
    \ {\n        while ($n % $i == 0) {\n            $factors[] = $i;\n          \
    \  $n /= $i;\n        }\n    }\n    return $factors;\n}\n\n/* Return array of\
    \ prime factors of given integer in the order from smallest to largest.\nEach\
    \ of the factors should be arrayed number of times corresponding to how many times\
    \ it appeares in factorization.\nInput number should be equal to the product of\
    \ all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n    $divisor =\
    \ 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n           \
    \ $factors[] = $divisor;\n            $n /= $divisor;\n        }\n        $divisor++;\n\
    \    }\n    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \        }\n        $i++;\n    }\n    return $factors;\n}\n", "    $factors =\
    \ array();\n    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n\
    \            $factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n\
    \    }\n    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    for ($i = 2; $i <= $n; $i++) {\n      \
    \  while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \        }\n    }\n    return $factors;\n}\n\n/* Return the sum of all the numbers\
    \ in the array, except ignore sections of numbers starting with a 6 and extending\
    \ to the next 7 (every 6 will be followed by at least one 7). Return 0 for no\
    \ numbers.\n>>> sum67([1, 2, 2])\n5\n>>> sum67([1, 2, 2, 6, 99, 99, 7])\n5\n>>>\
    \ sum67([1, 1, 6, 7, 2])\n4\n*/", "    $factors = array();\n    $i = 2;\n    while\
    \ ($n > 1) {\n        while ($n % $i == 0) {\n            $factors[] = $i;\n \
    \           $n /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n\
    }\n\n/* Return a string with the first letter of each word capitalized.\n>>> capitalize(\"\
    i'm a little tea pot\")\n\"I'm A Little Tea Pot\"\n>>> capitalize(\"sHoRt AnD\
    \ sToUt\")\n\"Short And Stout\"\n>>> capitalize(\"HERE IS MY HANDLE HERE IS MY\
    \ SPOUT\")\n\"Here Is My Handle Here Is My Spout\"*/", "    $factors = array();\n\
    \    $divisor = 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n\
    \            $factors[] = $divisor;\n            $n /= $divisor;\n        }\n\
    \        $divisor++;\n    }\n    return $factors;\n}\n\n/* Return the sum of all\
    \ the numbers in the array.\n>>> sum_array(array(1, 2, 3, 4))\n10\n>>> sum_array(array(12,\
    \ 4, 0, -8))\n8\n*/", "    $factors = array();\n    for ($i = 2; $i <= $n; $i++)\
    \ {\n        while ($n % $i == 0) {\n            $factors[] = $i;\n          \
    \  $n /= $i;\n        }\n    }\n    return $factors;\n}\n\n/* Return array of\
    \ prime factors of given integer in the order from smallest to largest.\nEach\
    \ of the factors should be arrayed number of times corresponding to how many times\
    \ it appeares in factorization.\nInput number should be equal to the product of\
    \ all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n    $i = 2;\n\
    \    while ($n > 1) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n\
    }\n\n$n = 70;\nprint_r(factorize($n));", "    $result = [];\n    $i = 2;\n   \
    \ while ($n > 1) {\n        if ($n % $i == 0) {\n            $result[] = $i;\n\
    \            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $result;\n}\n\n/* Return array of prime factors of given integer in\
    \ the order from smallest to largest.\nEach of the factors should be arrayed number\
    \ of times corresponding to how many times it appeares in factorization.\nInput\
    \ number should be equal to the product of all factors\n>>> factorize(8)\narray(2,\
    \ 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/",
  "    $factors = array();\n    $divisor = 2;\n    while ($n > 1) {\n        while\
    \ ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n /=\
    \ $divisor;\n        }\n        $divisor++;\n    }\n    return $factors;\n}\n\n\
    /* Return number of integers in the range [a, b] that are divisible by k.\n>>>\
    \ count_divisibles(6, 11, 2)\n3\n>>> count_divisibles(6, 11, 3)\n2\n>>> count_divisibles(6,\
    \ 11, 7)\n0\n>>> count_divisibles(6, 11, 1)\n6\n>>> count_divisibles(6, 11, 0)\n\
    0\n>>> count_divisibles(6, 11, -1)\n0\n>>> count_divisibles(6, 11, -2)\n0\n>>>\
    \ count_divisibles(6, 11, -3)\n2\n>>> count_divisibles(6, 11, -7)\n0\n>>> count_divisibles(6,\
    \ 11, -8)\n0\n>>> count_divisibles(6, 11, -9)\n0\n>>> count_divisibles(6, 11,\
    \ -10)\n0\n>>> count_divisibles(6, 11, -11)\n0\n>>> count_divisibles(6, 11, -12)\n\
    0\n>>> count_divisibles(6, 11, -13)\n0\n>>> count_divisibles(6, 11, -14)\n0\n\
    >>> count_divisibles(6, 11, -15)\n0\n>>> count_divisibles(6, 11, -16)\n0\n>>>\
    \ count_divisibles(6, 11, -17)\n0\n>>> count_divisibles(6, 11, -18)\n0\n>>> count_divisibles(6,\
    \ 11, -19)\n0\n>>> count_divisibles(6, 11, -20)\n0\n>>> count_divisibles(6, 11,\
    \ -21)\n0\n>>> count_divisibles(6, 11, -22)\n0\n>>>", "    $factors = array();\n\
    \    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n\
    \    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \        }\n        $i++;\n    }\n    return $factors;\n}\n\n/* Return array of\
    \ prime factors of given integer in the order from smallest to largest.\nEach\
    \ of the factors should be arrayed number of times corresponding to how many times\
    \ it appeares in factorization.\nInput number should be equal to the product of\
    \ all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n    $divisor =\
    \ 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n           \
    \ $factors[] = $divisor;\n            $n /= $divisor;\n        }\n        $divisor++;\n\
    \    }\n    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    for ($i = 2; $i <= $n; $i++) {\n      \
    \  while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \        }\n    }\n    return $factors;\n}\n\n/*\n * Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n * Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n * Input number should be equal to the product of all factors\n\
    \ * >>> factorize(8)\n * array(2, 2, 2)\n * >>> factorize(25)\n * array(5, 5)\n\
    \ * >>> factorize(70)\n * array(2, 5, 7)\n */", "    $factors = array();\n   \
    \ $d = 2;\n    while ($n > 1) {\n        while ($n % $d == 0) {\n            $factors[]\
    \ = $d;\n            $n /= $d;\n        }\n        $d = $d + 1;\n        if ($d\
    \ * $d > $n) {\n            if ($n > 1) {\n                $factors[] = $n;\n\
    \                break;\n            }\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n        \
    \    $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $d = 2;\n    while ($n > 1) {\n        while ($n % $d == 0) {\n         \
    \   $factors[] = $d;\n            $n /= $d;\n        }\n        $d = $d + 1;\n\
    \        if ($d * $d > $n) {\n            if ($n > 1) {\n                $factors[]\
    \ = $n;\n                break;\n            }\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $d = 2;\n    while ($n > 1) {\n        while ($n % $d == 0) {\n         \
    \   $factors[] = $d;\n            $n /= $d;\n        }\n        $d = $d + 1;\n\
    \        if ($d * $d > $n) {\n            if ($n > 1) {\n                $factors[]\
    \ = $n;\n                break;\n            }\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $divisor = 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n\
    \            $factors[] = $divisor;\n            $n /= $divisor;\n        }\n\
    \        $divisor++;\n    }\n    return $factors;\n}\n\n/* Return the sum of all\
    \ the numbers in the array.\n>>> sum_array(array(1, 2, 3, 4))\n10\n>>> sum_array(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10))\n55*/", "    $factors = array();\n    $divisor\
    \ = 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n         \
    \   $factors[] = $divisor;\n            $n /= $divisor;\n        }\n        $divisor\
    \ += 1;\n    }\n    return $factors;\n}\nprint_r(factorize(70));", "    $factors\
    \ = array();\n    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0)\
    \ {\n            $factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n\
    \    }\n    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $d = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $d == 0) {\n            $factors[] = $d;\n            $n /= $d;\n\
    \        }\n        $d = $d + 1;\n        if ($d * $d > $n) {\n            if\
    \ ($n > 1) {\n                $factors[] = $n;\n                break;\n     \
    \       }\n        }\n    }\n    return $factors;\n}\n\n/* Return array of prime\
    \ factors of given integer in the order from smallest to largest.\nEach of the\
    \ factors should be arrayed number of times corresponding to how many times it\
    \ appeares in factorization.\nInput number should be equal to the product of all\
    \ factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n    for ($i =\
    \ 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n}\n\n\
    echo \"<pre>\";\nprint_r(factorize(70));\necho \"</pre>\";", "    $factors = array();\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n        \
    \    $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $d = 2;\n    while ($n > 1) {\n        while ($n % $d == 0) {\n         \
    \   $factors[] = $d;\n            $n /= $d;\n        }\n        $d = $d + 1;\n\
    \        if ($d * $d > $n) {\n            if ($n > 1) {\n                $factors[]\
    \ = $n;\n                break;\n            }\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $d = 2;\n    while ($n > 1) {\n        while ($n % $d == 0) {\n         \
    \   $factors[] = $d;\n            $n /= $d;\n        }\n        $d = $d + 1;\n\
    \        if ($d * $d > $n) {\n            if ($n > 1) {\n                $factors[]\
    \ = $n;\n                break;\n            }\n        }\n    }\n    return $factors;\n\
    }\n\n/*\n * Return the sum of all numbers in the given array.\n * >>> sum(array(1,\
    \ 2, 3))\n * 6\n * >>> sum(array(5, 5, 5, 5, 5))\n * 25\n * >>> sum(array(2, 3,\
    \ 8))\n * 13\n */", "    $factors = array();\n    for ($i = 2; $i <= $n; $i++)\
    \ {\n        while ($n % $i == 0) {\n            $factors[] = $i;\n          \
    \  $n /= $i;\n        }\n    }\n    return $factors;\n}\n\n/* Return array of\
    \ prime factors of given integer in the order from smallest to largest.\nEach\
    \ of the factors should be arrayed number of times corresponding to how many times\
    \ it appeares in factorization.\nInput number should be equal to the product of\
    \ all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    for ($i = 2; $i\
    \ <= $n; $i++) {\n        while ($n % $i == 0) {\n            $result[] = $i;\n\
    \            $n /= $i;\n        }\n    }\n    return $result;\n}\n\n/* Return\
    \ array of prime factors of given integer in the order from smallest to largest.\n\
    Each of the factors should be arrayed number of times corresponding to how many\
    \ times it appeares in factorization.\nInput number should be equal to the product\
    \ of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5,\
    \ 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n    for\
    \ ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n}\nprint_r(factorize(70));",
  "    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n        while ($n %\
    \ $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n        }\n\
    \        $i++;\n    }\n    return $factors;\n}\n\n/* Return array of prime factors\
    \ of given integer in the order from smallest to largest.\nEach of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\nInput number should be equal to the product of all factors\n\
    >>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\n\
    array(2, 5, 7)*/", "    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n\
    \        while ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n}\n\n/* Return\
    \ array of prime factors of given integer in the order from smallest to largest.\n\
    Each of the factors should be arrayed number of times corresponding to how many\
    \ times it appeares in factorization.\nInput number should be equal to the product\
    \ of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5,\
    \ 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n    $divisor\
    \ = 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n         \
    \   $factors[] = $divisor;\n            $n /= $divisor;\n        }\n        $divisor++;\n\
    \    }\n    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $d = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $d == 0) {\n            $factors[] = $d;\n            $n /= $d;\n\
    \        }\n        $d += 1;\n    }\n    return $factors;\n}\n\nprint_r(factorize(8));\n\
    print_r(factorize(25));\nprint_r(factorize(70));", "    $result = [];\n    $i\
    \ = 2;\n    while ($n > 1) {\n        if ($n % $i == 0) {\n            $result[]\
    \ = $i;\n            $n /= $i;\n        } else {\n            $i++;\n        }\n\
    \    }\n    return $result;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $result = [];\n    $divider = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $divider == 0) {\n            $result[] = $divider;\n          \
    \  $n /= $divider;\n        }\n        $divider++;\n    }\n    return $result;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n\
    \    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $divisor = 2;\n    while ($n > 1) {\n \
    \       while ($n % $divisor == 0) {\n            $factors[] = $divisor;\n   \
    \         $n /= $divisor;\n        }\n        $divisor++;\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    $i\
    \ = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n            $result[]\
    \ = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\n/* Return the sum of all the numbers in the array except the highest and\
    \ the lowest element (the value, not the index!).\n(The highest/lowest element\
    \ is respectively only one element at each edge, even if there are more than one\
    \ with the same value!)\n\n>>> sumArray(array(6, 2, 1, 8, 10))\n16\n>>> sumArray(array(-6,\
    \ -20, -1, -10, -12))\n-28\n>>> sumArray(array(6, 2, 1, 8, 10, -6, -20, -1, -10,\
    \ -12))\n0\n*/", "    $result = [];\n    $divisor = 2;\n    while ($n > 1) {\n\
    \        while ($n % $divisor == 0) {\n            $result[] = $divisor;\n   \
    \         $n /= $divisor;\n        }\n        $divisor++;\n    }\n    return $result;\n\
    }\n\n/*\n * Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n * Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n * Input number should be equal\
    \ to the product of all factors\n * >>> factorize(8)\n * array(2, 2, 2)\n * >>>\
    \ factorize(25)\n * array(5, 5)\n * >>> factorize(70)\n * array(2, 5, 7)\n */",
  "    $factors = array();\n    for ($i = 2; $i <= $n; $i++) {\n        while ($n\
    \ % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n        }\n\
    \    }\n    return $factors;\n}\n\nprint_r(factorize(8));\nprint_r(factorize(25));\n\
    print_r(factorize(70));", "    $factors = array();\n    $i = 2;\n    while ($n\
    \ > 1) {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n        \
    \    $n = $n / $i;\n        } else {\n            $i++;\n        }\n    }\n  \
    \  return $factors;\n}\n\n$n = 8;\nprint_r(factorize($n));\necho \"<br>\";\n$n\
    \ = 25;\nprint_r(factorize($n));\necho \"<br>\";\n$n = 70;\nprint_r(factorize($n));\n\
    echo \"<br>\";\n\n/*\n * Write a function that takes a string and returns an array\
    \ of all the unique characters in the string.\n * >>> unique_chars(\"aaabbcc\"\
    )\n * array(\"a\", \"b\", \"c\")\n * >>> unique_chars(\"a\")\n * array(\"a\")\n\
    \ * >>> unique_chars(\"\")\n * array()\n */", "    $factors = array();\n    $divisor\
    \ = 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n         \
    \   $factors[] = $divisor;\n            $n /= $divisor;\n        }\n        $divisor++;\n\
    \    }\n    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $result = [];\n    $i = 2;\n    while ($n > 1) {\n        while\
    \ ($n % $i == 0) {\n            $result[] = $i;\n            $n /= $i;\n     \
    \   }\n        $i++;\n    }\n    return $result;\n}\n\n/* Return array of prime\
    \ factors of given integer in the order from smallest to largest.\nEach of the\
    \ factors should be arrayed number of times corresponding to how many times it\
    \ appeares in factorization.\nInput number should be equal to the product of all\
    \ factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n    $d = 2;\n\
    \    while ($n > 1) {\n        while ($n % $d == 0) {\n            $factors[]\
    \ = $d;\n            $n /= $d;\n        }\n        $d = $d + 1;\n        if ($d\
    \ * $d > $n) {\n            if ($n > 1) {\n                $factors[] = $n;\n\
    \                break;\n            }\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n        \
    \    $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n\
    \    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $d = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $d == 0) {\n            $factors[] = $d;\n            $n /= $d;\n\
    \        }\n        $d = $d + 1;\n        if ($d * $d > $n) {\n            if\
    \ ($n > 1) {\n                $factors[] = $n;\n                break;\n     \
    \       }\n        }\n    }\n    return $factors;\n}\n\n/* Return array of prime\
    \ factors of given integer in the order from smallest to largest.\nEach of the\
    \ factors should be arrayed number of times corresponding to how many times it\
    \ appeares in factorization.\nInput number should be equal to the product of all\
    \ factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n    $d = 2;\n\
    \    while ($n > 1) {\n        while ($n % $d == 0) {\n            $factors[]\
    \ = $d;\n            $n /= $d;\n        }\n        $d = $d + 1;\n        if ($d\
    \ * $d > $n) {\n            if ($n > 1) {\n                $factors[] = $n;\n\
    \                break;\n            }\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    for\
    \ ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $result[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $result;\n}\n\n/*\n\
    \ * Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n * Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n * Input number should be equal\
    \ to the product of all factors\n * >>> factorize(8)\n * array(2, 2, 2)\n * >>>\
    \ factorize(25)\n * array(5, 5)\n * >>> factorize(70)\n * array(2, 5, 7)\n */",
  "    $factors = array();\n    $d = 2;\n    while ($n > 1) {\n        while ($n %\
    \ $d == 0) {\n            $factors[] = $d;\n            $n /= $d;\n        }\n\
    \        $d = $d + 1;\n        if ($d * $d > $n) {\n            if ($n > 1) {\n\
    \                $factors[] = $n;\n                break;\n            }\n   \
    \     }\n    }\n    return $factors;\n}\n\n/*\n * Return array of prime factors\
    \ of given integer in the order from smallest to largest.\n * Each of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\n * Input number should be equal to the product of all factors\n\
    \ * >>> factorize(8)\n * array(2, 2, 2)\n * >>> factorize(25)\n * array(5, 5)\n\
    \ * >>> factorize(70)\n * array(2, 5, 7)\n */", "    $factors = array();\n   \
    \ $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n\
    \    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \        }\n        $i++;\n    }\n    return $factors;\n}\n\n/* Return the number\
    \ of prime factors of given integer.\n>>> count_prime_factors(8)\n1\n>>> count_prime_factors(25)\n\
    1\n>>> count_prime_factors(70)\n3*/", "    $factors = array();\n    $i = 2;\n\
    \    while ($n > 1) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n        \
    \    $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n\
    }\nprint_r(factorize(8));\nprint_r(factorize(25));\nprint_r(factorize(70));",
  "    $factors = array();\n    $d = 2;\n    while ($n > 1) {\n        while ($n %\
    \ $d == 0) {\n            $factors[] = $d;\n            $n /= $d;\n        }\n\
    \        $d += 1;\n    }\n    return $factors;\n}\n\n/* Return array of prime\
    \ factors of given integer in the order from smallest to largest.\nEach of the\
    \ factors should be arrayed number of times corresponding to how many times it\
    \ appeares in factorization.\nInput number should be equal to the product of all\
    \ factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n    $i = 2;\n\
    \    while ($n > 1) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $d = 2;\n    while ($n > 1) {\n        while ($n % $d == 0) {\n         \
    \   $factors[] = $d;\n            $n /= $d;\n        }\n        $d = $d + 1;\n\
    \        if ($d * $d > $n) {\n            if ($n > 1) {\n                $factors[]\
    \ = $n;\n                break;\n            }\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    $i\
    \ = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n            $result[]\
    \ = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n        \
    \    $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n\
    \    return $factors;\n}\n\n/* Return the number of integers in the range [a,\
    \ b] that are divisible by k.\n>>> count_divisibles(6, 11, 2)\n3\n>>> count_divisibles(6,\
    \ 11, 3)\n2\n>>> count_divisibles(6, 11, 4)\n1\n>>> count_divisibles(6, 11, 5)\n\
    1\n>>> count_divisibles(6, 11, 6)\n1\n>>> count_divisibles(6, 11, 7)\n0\n>>> count_divisibles(6,\
    \ 11, 8)\n0\n>>> count_divisibles(6, 11, 9)\n0\n>>> count_divisibles(6, 11, 10)\n\
    0\n>>> count_divisibles(6, 11, 11)\n0\n>>> count_divisibles(6, 11, 12)\n0\n>>>\
    \ count_divisibles(6, 11, 13)\n0\n>>> count_divisibles(6, 11, 14)\n0\n>>> count_divisibles(6,\
    \ 11, 15)\n0\n>>> count_divisibles(6, 11, 16)\n0\n>>> count_divisibles(6, 11,\
    \ 17)\n0\n>>> count_divisibles(6, 11, 18)\n0\n>>> count_divisibles(6, 11, 19)\n\
    0\n>>> count_divisibles(6, 11, 20)\n0\n>>> count_divisibles(6, 11, 21)\n0\n>>>\
    \ count_divisibles(6, 11, 22)\n0\n>>> count_divisibles(6, 11, 23)\n0\n>>> count_divisibles(6,\
    \ 11, 24)\n0\n>>> count_divisibles(6, 11, 25)\n0\n>>> count_divisibles(6, 11,\
    \ 26)\n0\n>>> count_divisibles(6, 11, 27)", "    $factors = array();\n    $d =\
    \ 2;\n    while ($n > 1) {\n        while ($n % $d == 0) {\n            $factors[]\
    \ = $d;\n            $n /= $d;\n        }\n        $d = $d + 1;\n        if ($d\
    \ * $d > $n) {\n            if ($n > 1) {\n                $factors[] = $n;\n\
    \                break;\n            }\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    for\
    \ ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $result[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $result;\n}\n\n/*\
    \ Return array of prime factors of given integer in the order from smallest to\
    \ largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n        \
    \    $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $d = 2;\n    while ($n > 1) {\n        while ($n % $d == 0) {\n         \
    \   $factors[] = $d;\n            $n /= $d;\n        }\n        $d += 1;\n   \
    \ }\n    return $factors;\n}\n\n/* Return the number of prime factors of given\
    \ integer.\n>>> count_prime_factors(8)\n1\n>>> count_prime_factors(25)\n1\n>>>\
    \ count_prime_factors(70)\n3*/", "    $factors = array();\n    $d = 2;\n    while\
    \ ($n > 1) {\n        while ($n % $d == 0) {\n            $factors[] = $d;\n \
    \           $n /= $d;\n        }\n        $d = $d + 1;\n        if ($d * $d >\
    \ $n) {\n            if ($n > 1) {\n                $factors[] = $n;\n       \
    \         break;\n            }\n        }\n    }\n    return $factors;\n}\n\n\
    /* Return array of prime factors of given integer in the order from smallest to\
    \ largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n\
    \    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $d = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $d == 0) {\n            $factors[] = $d;\n            $n /= $d;\n\
    \        }\n        $d = $d + 1;\n        if ($d * $d > $n) {\n            if\
    \ ($n > 1) {\n                $factors[] = $n;\n                break;\n     \
    \       }\n        }\n    }\n    return $factors;\n}\n\n/* Return array of prime\
    \ factors of given integer in the order from smallest to largest.\nEach of the\
    \ factors should be arrayed number of times corresponding to how many times it\
    \ appeares in factorization.\nInput number should be equal to the product of all\
    \ factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    $i = 2;\n    while\
    \ ($n > 1) {\n        while ($n % $i == 0) {\n            $result[] = $i;\n  \
    \          $n /= $i;\n        }\n        $i++;\n    }\n    return $result;\n}\n\
    \n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $d = 2;\n    while ($n > 1) {\n        while ($n % $d == 0) {\n         \
    \   $factors[] = $d;\n            $n /= $d;\n        }\n        $d = $d + 1;\n\
    \        if ($d * $d > $n) {\n            if ($n > 1) {\n                $factors[]\
    \ = $n;\n                break;\n            }\n        }\n    }\n    return $factors;\n\
    }\n\n/*\n * Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)\n */", "    $factors = array();\n\
    \    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n\
    \    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    for ($i = 2; $i <= $n; $i++) {\n      \
    \  while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \        }\n    }\n    return $factors;\n}\n\n/*\n * Return array of prime factors\
    \ of given integer in the order from smallest to largest.\nEach of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\nInput number should be equal to the product of all factors\n\
    >>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\n\
    array(2, 5, 7)\n*/", "    $factors = array();\n    $d = 2;\n    while ($n > 1)\
    \ {\n        while ($n % $d == 0) {\n            $factors[] = $d;\n          \
    \  $n /= $d;\n        }\n        $d += 1;\n    }\n    return $factors;\n}\n\n\
    /* Return array of prime factors of given integer in the order from smallest to\
    \ largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    $i\
    \ = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n            $result[]\
    \ = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    for\
    \ ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $result[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $result;\n}\n\n/*\
    \ Return array of prime factors of given integer in the order from smallest to\
    \ largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n        \
    \    $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n        \
    \    $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $i = 2;\n    while ($n > 1) {\n        if ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n = $n / $i;\n        } else {\n            $i++;\n    \
    \    }\n    }\n    return $factors;\n}\n\n/* Return array of prime factors of\
    \ given integer in the order from smallest to largest.\nEach of the factors should\
    \ be arrayed number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \        }\n        $i++;\n    }\n    return $factors;\n}\n\n/* Return array of\
    \ prime factors of given integer in the order from smallest to largest.\nEach\
    \ of the factors should be arrayed number of times corresponding to how many times\
    \ it appeares in factorization.\nInput number should be equal to the product of\
    \ all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n    for ($i =\
    \ 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n}\n\n\
    /* Return array of prime factors of given integer in the order from smallest to\
    \ largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n        \
    \    $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return the sum of all integers in the given array.\n>>> sum(array(1, 2,\
    \ 3))\n6\n>>> sum(array(5, 5, 5, 5, 5))\n25\n>>> sum(array(2, 3, 8))\n13*/", " \
    \   $factors = array();\n    $d = 2;\n    while ($n > 1) {\n        while ($n\
    \ % $d == 0) {\n            $factors[] = $d;\n            $n /= $d;\n        }\n\
    \        $d += 1;\n    }\n    return $factors;\n}\n\n/* Return array of prime\
    \ factors of given integer in the order from smallest to largest.\nEach of the\
    \ factors should be arrayed number of times corresponding to how many times it\
    \ appeares in factorization.\nInput number should be equal to the product of all\
    \ factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n    $divisor =\
    \ 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n           \
    \ $factors[] = $divisor;\n            $n /= $divisor;\n        }\n        $divisor++;\n\
    \    }\n    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $divisor = 2;\n    while ($n > 1) {\n \
    \       while ($n % $divisor == 0) {\n            $factors[] = $divisor;\n   \
    \         $n /= $divisor;\n        }\n        $divisor++;\n    }\n    return $factors;\n\
    }\n\n/*\n * Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n * Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n * Input number should be equal\
    \ to the product of all factors\n * >>> factorize(8)\n * array(2, 2, 2)\n * >>>\
    \ factorize(25)\n * array(5, 5)\n * >>> factorize(70)\n * array(2, 5, 7)\n */",
  "    $factors = array();\n    $divisor = 2;\n    while ($n > 1) {\n        while\
    \ ($n % $divisor == 0) {\n            $factors[] = $divisor;\n            $n /=\
    \ $divisor;\n        }\n        $divisor++;\n    }\n    return $factors;\n}\n\n\
    /* Return the sum of all the numbers in the array.\n>>> sum_array(array(1, 2,\
    \ 3, 4))\n10\n>>> sum_array(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n55*/", "\t\
    $factors = array();\n\tfor ($i = 2; $i <= $n; $i++) {\n\t\twhile ($n % $i == 0)\
    \ {\n\t\t\t$factors[] = $i;\n\t\t\t$n /= $i;\n\t\t}\n\t}\n\treturn $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n\
    \    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    $d = 2;\n    while ($n > 1) {\n       \
    \ while ($n % $d == 0) {\n            $factors[] = $d;\n            $n /= $d;\n\
    \        }\n        $d = $d + 1;\n        if ($d * $d > $n) {\n            if\
    \ ($n > 1) {\n                $factors[] = $n;\n                break;\n     \
    \       }\n        }\n    }\n    return $factors;\n}\n\n/* Return array of prime\
    \ factors of given integer in the order from smallest to largest.\nEach of the\
    \ factors should be arrayed number of times corresponding to how many times it\
    \ appeares in factorization.\nInput number should be equal to the product of all\
    \ factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n\
    >>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n    $d = 2;\n\
    \    while ($n > 1) {\n        while ($n % $d == 0) {\n            $factors[]\
    \ = $d;\n            $n /= $d;\n        }\n        $d = $d + 1;\n        if ($d\
    \ * $d > $n) {\n            if ($n > 1) {\n                $factors[] = $n;\n\
    \                break;\n            }\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return the number of prime factors of given integer.\n>>> factorize(8)\n\
    3\n>>> factorize(25)\n2\n>>> factorize(70)\n3*/", "    $factors = array();\n \
    \   for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n\
    }\n\n/* Return array of prime factors of given integer in the order from smallest\
    \ to largest.\nEach of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\nInput number should be equal\
    \ to the product of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\n\
    array(5, 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $factors = array();\n\
    \    $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n         \
    \   $factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n\
    \    return $factors;\n}\n\n/* Return array of prime factors of given integer\
    \ in the order from smallest to largest.\nEach of the factors should be arrayed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/", "    $factors = array();\n    for ($i = 2; $i <= $n; $i++) {\n      \
    \  while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n\
    \        }\n    }\n    return $factors;\n}\n\n/* Return array of prime factors\
    \ of given integer in the order from smallest to largest.\nEach of the factors\
    \ should be arrayed number of times corresponding to how many times it appeares\
    \ in factorization.\nInput number should be equal to the product of all factors\n\
    >>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\n\
    array(2, 5, 7)*/", "    $factors = array();\n    $i = 2;\n    while ($n > 1) {\n\
    \        while ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n}\n\n/* Return\
    \ array of prime factors of given integer in the order from smallest to largest.\n\
    Each of the factors should be arrayed number of times corresponding to how many\
    \ times it appeares in factorization.\nInput number should be equal to the product\
    \ of all factors\n>>> factorize(8)\narray(2, 2, 2)\n>>> factorize(25)\narray(5,\
    \ 5)\n>>> factorize(70)\narray(2, 5, 7)*/", "    $result = [];\n    $i = 2;\n\
    \    while ($n > 1) {\n        while ($n % $i == 0) {\n            $result[] =\
    \ $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\n/*\n * Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n * Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n * Input number should be equal\
    \ to the product of all factors\n * >>> factorize(8)\n * array(2, 2, 2)\n * >>>\
    \ factorize(25)\n * array(5, 5)\n * >>> factorize(70)\n * array(2, 5, 7)\n */",
  "    $factors = array();\n    $d = 2;\n    while ($n > 1) {\n        while ($n %\
    \ $d == 0) {\n            $factors[] = $d;\n            $n /= $d;\n        }\n\
    \        $d += 1;\n    }\n    return $factors;\n}\n\n/* Return the sum of all\
    \ the numbers in the array except the highest and the lowest element (the value,\
    \ not the index!).\n(The highest/lowest element is respectively only one element\
    \ at each edge, even if there are more than one with the same value!)\nIf array\
    \ is empty, null or None, or if only 1 Element exists, return 0.\n>>> sum_array(array(6,\
    \ 2, 1, 8, 10))\n16\n>>> sum_array(array(6, 0, 1, 10, 10))\n17\n>>> sum_array(array(-6,\
    \ -20, -1, -10, -12))\n-28\n>>> sum_array(array())\n0\n>>> sum_array(array(6))\n\
    0\n>>> sum_array(array(-6, 20))\n14\n>>> sum_array(array(-6, 20, -1, 10, -12))\n\
    3*/", "    $factors = array();\n    for ($i = 2; $i <= $n; $i++) {\n        while\
    \ ($n % $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n    \
    \    }\n    }\n    return $factors;\n}\n\n/* Return array of prime factors of\
    \ given integer in the order from smallest to largest.\nEach of the factors should\
    \ be arrayed number of times corresponding to how many times it appeares in factorization.\n\
    Input number should be equal to the product of all factors\n>>> factorize(8)\n\
    array(2, 2, 2)\n>>> factorize(25)\narray(5, 5)\n>>> factorize(70)\narray(2, 5,\
    \ 7)*/"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
