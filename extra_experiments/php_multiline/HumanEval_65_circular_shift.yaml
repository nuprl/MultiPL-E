name: HumanEval_65_circular_shift
language: php
prompt: "<?php\n/* Circular shift the digits of the integer x, shift the digits right\
  \ by shift\nand return the result as a string.\nIf shift > number of digits, return\
  \ digits reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\
  \"12\"*/\nfunction circular_shift($x, $shift) {\n"
tests: "function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["\t$x = (string)$x;\n\t$shift = (int)$shift;\n\t$len = strlen($x);\n\
    \tif ($shift > $len) {\n\t\treturn strrev($x);\n\t}\n\t$x = substr($x, $shift)\
    \ . substr($x, 0, $shift);\n\treturn $x;\n}\n\n/*\n>>> circular_shift(123, 1)\n\
    \"312\"\n>>> circular_shift(123, 2)\n\"231\"\n>>> circular_shift(123, 3)\n\"123\"\
    \n>>> circular_shift(123, 4)\n\"312\"\n>>> circular_shift(123, 5)\n\"231\"\n>>>\
    \ circular_shift(123, 6)\n\"123\"\n*/\n\n/*\n>>> circular_shift(12345, 1)\n\"\
    51234\"\n>>> circular_shift(12345, 2)\n\"32145\"\n>>> circular_shift(12345, 3)\n\
    \"23451\"\n>>> circular_shift(12345, 4)\n\"12345\"\n>>> circular_shift(12345,\
    \ 5)\n\"51234\"\n>>> circular_shift(12345, 6)\n\"32145\"\n>>> circular_shift(12345,\
    \ 7)\n\"23451\"\n>>> circular_shift(12345, 8)\n\"12345\"\n*/\n\n/*\n>>> circular_shift(123456,\
    \ 1)\n\"612345\"\n>>> circular_shift(123456, 2)\n\"561234\"\n>>> circular_shift(123456,\
    \ 3)\n\"456123\"\n>>> circular_shift(123456, 4)\n\"345612\"\n>>> circular_shift(123456,\
    \ 5)\n\"234561\"\n>>> circular_shift(123456, 6)\n\"123456\"\n>>> circular_shift(123456,\
    \ 7)\n\"612345\"\n>>> circular_shift(123456, 8)\n\"561234\"\n>>> circular_shift(123456,\
    \ 9)\n\"456123\"\n>>> circular_shift(123456, 10)\n\"345612\"\n>>> circular_shift(123456,\
    \ 11)\n\"234561\"\n>>> circular_shift(123456, 12)\n\"123456\"\n*/\n\n/*", "  $x\
    \ = (string)$x;\n  $shift = (int)$shift;\n  $len = strlen($x);\n  if ($shift >\
    \ $len) {\n    return strrev($x);\n  }\n  $left = substr($x, 0, $shift);\n  $right\
    \ = substr($x, $shift);\n  return $right . $left;\n}\n\n/* Return the number of\
    \ digits in the integer x.\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n>>>\
    \ num_digits(-123)\n3\n*/", "    $x = strval($x);\n    $len = strlen($x);\n  \
    \  if ($shift > $len) {\n        return strrev($x);\n    }\n    $y = substr($x,\
    \ $shift, $len - $shift);\n    $y .= substr($x, 0, $shift);\n    return $y;\n\
    }\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n1\n\
    >>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $right = substr($x,\
    \ 0, $len - $shift);\n    $left = substr($x, $len - $shift);\n    return $left\
    \ . $right;\n}\n\n/*\n>>> is_circular_prime(197)\nTrue\n>>> is_circular_prime(1193)\n\
    True\n>>> is_circular_prime(11939)\nFalse\n*/", "    $x = strval($x);\n    $len\
    \ = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n    }\n\
    \    $left = substr($x, 0, $len - $shift);\n    $right = substr($x, $len - $shift);\n\
    \    return $right . $left;\n}\n\n/* Return the sum of the digits of the integer\
    \ x.\n>>> sum_digits(10) # 1 + 0 = 1\n1\n>>> sum_digits(4224) # 4 + 2 + 2 + 4\
    \ = 12\n12\n>>> sum_digits(1234567890)\n45\n*/", "    $x = (string)$x;\n    $len\
    \ = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n    }\n\
    \    $first = substr($x, 0, $len - $shift);\n    $second = substr($x, $len - $shift);\n\
    \    return $second . $first;\n}\n\n/*\n * Test code\n */\nassert_options(ASSERT_BAIL,\
    \ 1);\n\n$tests = array(\n    array(12, 1, \"21\"),\n    array(12, 2, \"12\"),\n\
    \    array(12, 3, \"21\"),\n    array(12, 4, \"12\"),\n    array(12, 5, \"21\"\
    ),\n    array(12, 6, \"12\"),\n    array(12, 7, \"21\"),\n    array(12, 8, \"\
    12\"),\n    array(12, 9, \"21\"),\n    array(12, 10, \"12\"),\n    array(12, 11,\
    \ \"21\"),\n    array(12, 12, \"12\"),\n    array(12, 13, \"21\"),\n    array(12,\
    \ 14, \"12\"),\n    array(12, 15, \"21\"),\n    array(12, 16, \"12\"),\n    array(12,\
    \ 17, \"21\"),\n    array(12, 18, \"12\"),\n    array(12, 19, \"21\"),\n    array(12,\
    \ 20, \"12\"),\n    array(12, 21, \"21\"),\n    array(12, 22, \"12\"),\n    array(12,\
    \ 23, \"21\"),\n    array(12, 24, \"12\"),\n    array(12, 25, \"21\"),\n    array(12,\
    \ 26, \"12\"),\n    array(12, 27, \"21\"),\n    array(12, 28, \"12\"),\n    array(12,\
    \ 29, \"21\"),\n    array(12, 30, \"12\"),\n    array(12, 31, \"21\"),\n    array(12,\
    \ 32, \"12\"),\n    array(12, 33, \"21\"),\n    array(12, 34, \"12\"),\n    array(12,\
    \ 35, \"21\"),\n    array(12, 36, \"12\"),\n   ", "    $digits = str_split($x);\n\
    \    $digits_count = count($digits);\n    if ($shift > $digits_count) {\n    \
    \    return implode('', array_reverse($digits));\n    }\n    $shifted_digits =\
    \ array_slice($digits, $shift);\n    $shifted_digits = array_merge($shifted_digits,\
    \ array_slice($digits, 0, $shift));\n    return implode('', $shifted_digits);\n\
    }\n\n/* Return the number of times the integer x appears in the integer y.\n>>>\
    \ count_occurrences(12, 1234)\n1\n>>> count_occurrences(12, 121212)\n3\n>>> count_occurrences(12,\
    \ 123)\n0\n>>> count_occurrences(12, -1234)\n1*/", "    $x = (string)$x;\n   \
    \ $shift = (int)$shift;\n    if ($shift > strlen($x)) {\n        return strrev($x);\n\
    \    }\n    $x = strrev($x);\n    $x = substr($x, 0, $shift) . substr($x, $shift);\n\
    \    return strrev($x);\n}\n\n/*\n * Write a function that takes a string and\
    \ returns a new string with the vowels removed.\n * >>> remove_vowels(\"hello\"\
    )\n * \"hll\"\n * >>> remove_vowels(\"world\")\n * \"wrld\"\n */", "    $x = (string)$x;\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $left = substr($x, 0, $len - $shift);\n    $right = substr($x, $len\
    \ - $shift);\n    return $right . $left;\n}\n\n/* Return the number of digits\
    \ in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n5*/", "   \
    \ $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n       \
    \ return strrev($x);\n    }\n    $shift = $len - $shift;\n    $x = substr($x,\
    \ $shift) . substr($x, 0, $shift);\n    return $x;\n}\n\n/* Return the number\
    \ of digits in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n\
    5*/", "\t$x = (string)$x;\n\t$len = strlen($x);\n\tif ($shift > $len) {\n\t\t\
    return strrev($x);\n\t}\n\t$shift = $len - $shift;\n\t$left = substr($x, 0, $shift);\n\
    \t$right = substr($x, $shift);\n\treturn $right . $left;\n}\n\n/* Return the number\
    \ of digits in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n\
    5\n*/", "    $digits = str_split($x);\n    $digits_count = count($digits);\n \
    \   if ($shift > $digits_count) {\n        return implode('', array_reverse($digits));\n\
    \    }\n    $shifted_digits = array_slice($digits, $shift);\n    $shifted_digits\
    \ = array_merge($shifted_digits, array_slice($digits, 0, $shift));\n    return\
    \ implode('', $shifted_digits);\n}\n\n/*\n>>> circular_shift(12, 1)\n\"21\"\n\
    >>> circular_shift(12, 2)\n\"12\"\n*/\necho circular_shift(12, 1) . \"\\n\";\n\
    echo circular_shift(12, 2) . \"\\n\";\necho circular_shift(12, 3) . \"\\n\";\n\
    echo circular_shift(12, 4) . \"\\n\";\necho circular_shift(12, 5) . \"\\n\";\n\
    echo circular_shift(12, 6) . \"\\n\";\necho circular_shift(12, 7) . \"\\n\";\n\
    echo circular_shift(12, 8) . \"\\n\";\necho circular_shift(12, 9) . \"\\n\";\n\
    echo circular_shift(12, 10) . \"\\n\";\necho circular_shift(12, 11) . \"\\n\"\
    ;\necho circular_shift(12, 12) . \"\\n\";\necho circular_shift(12, 13) . \"\\\
    n\";\necho circular_shift(12, 14) . \"\\n\";\necho circular_shift(12, 15) . \"\
    \\n\";\necho circular_shift(12, 16) . \"\\n\";\necho circular_shift(12, 17) .\
    \ \"\\n\";\necho circular_shift(12, 18) . \"\\n\";\necho circular_shift(12, 19)\
    \ . \"\\n\";\necho circular_shift(12, 20) . \"\\n\";\necho circular_shift(12,\
    \ 21) . \"\\n\";\necho circular_shift(12, 22) . \"\\n\";\necho circular_shift(12,\
    \ 23) . \"\\n\";\necho circular_shift(12, 24) . \"\\n\";\necho circular_shift(12,\
    \ 25) . \"\\n\";\necho circular_shift(12", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    return substr($x,\
    \ $shift) . substr($x, 0, $shift);\n}\n\n/*\n>>> circular_shift(12, 1)\n\"21\"\
    \n>>> circular_shift(12, 2)\n\"12\"\n*/\necho circular_shift(12, 1) . \"\\n\"\
    ;\necho circular_shift(12, 2) . \"\\n\";\necho circular_shift(12, 3) . \"\\n\"\
    ;\necho circular_shift(12, 4) . \"\\n\";\necho circular_shift(12, 5) . \"\\n\"\
    ;\necho circular_shift(12, 6) . \"\\n\";\necho circular_shift(12, 7) . \"\\n\"\
    ;\necho circular_shift(12, 8) . \"\\n\";\necho circular_shift(12, 9) . \"\\n\"\
    ;\necho circular_shift(12, 10) . \"\\n\";\necho circular_shift(12, 11) . \"\\\
    n\";\necho circular_shift(12, 12) . \"\\n\";\necho circular_shift(12, 13) . \"\
    \\n\";\necho circular_shift(12, 14) . \"\\n\";\necho circular_shift(12, 15) .\
    \ \"\\n\";\necho circular_shift(12, 16) . \"\\n\";\necho circular_shift(12, 17)\
    \ . \"\\n\";\necho circular_shift(12, 18) . \"\\n\";\necho circular_shift(12,\
    \ 19) . \"\\n\";\necho circular_shift(12, 20) . \"\\n\";\necho circular_shift(12,\
    \ 21) . \"\\n\";\necho circular_shift(12, 22) . \"\\n\";\necho circular_shift(12,\
    \ 23) . \"\\n\";\necho circular_shift(12, 24) . \"\\n\";\necho circular_shift(12,\
    \ 25) . \"\\n\";\necho circular_shift(12, 26) . \"\\n\";\necho circular_shift(12,\
    \ 27) . \"\\n\";\necho circular_shift(12, 28) . \"\\n\";\necho circular_shift(12,\
    \ 29) . \"\\n\";\necho circular_shift(12, 30", "    $x = (string)$x;\n    $len\
    \ = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n    }\n\
    \    $shift = $len - $shift;\n    return substr($x, $shift) . substr($x, 0, $shift);\n\
    }\n\n/*\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n\
    */\necho circular_shift(12, 1) . \"\\n\";\necho circular_shift(12, 2) . \"\\n\"\
    ;\necho circular_shift(12, 3) . \"\\n\";\necho circular_shift(12, 4) . \"\\n\"\
    ;\necho circular_shift(12, 5) . \"\\n\";\necho circular_shift(12, 6) . \"\\n\"\
    ;\necho circular_shift(12, 7) . \"\\n\";\necho circular_shift(12, 8) . \"\\n\"\
    ;\necho circular_shift(12, 9) . \"\\n\";\necho circular_shift(12, 10) . \"\\n\"\
    ;\necho circular_shift(12, 11) . \"\\n\";\necho circular_shift(12, 12) . \"\\\
    n\";\necho circular_shift(12, 13) . \"\\n\";\necho circular_shift(12, 14) . \"\
    \\n\";\necho circular_shift(12, 15) . \"\\n\";\necho circular_shift(12, 16) .\
    \ \"\\n\";\necho circular_shift(12, 17) . \"\\n\";\necho circular_shift(12, 18)\
    \ . \"\\n\";\necho circular_shift(12, 19) . \"\\n\";\necho circular_shift(12,\
    \ 20) . \"\\n\";\necho circular_shift(12, 21) . \"\\n\";\necho circular_shift(12,\
    \ 22) . \"\\n\";\necho circular_shift(12, 23) . \"\\n\";\necho circular_shift(12,\
    \ 24) . \"\\n\";\necho circular_shift(12, 25) . \"\\n\";\necho circular_shift(12,\
    \ 26) . \"\\n\";\necho circular_shift(12, 27) . \"\\n\";\necho circular_shift(12,\
    \ 28) . \"\\n\";\necho circular_shift(12, 29) . \"\\", "    $x = (string)$x;\n\
    \    $length = strlen($x);\n    if ($shift > $length) {\n        return strrev($x);\n\
    \    }\n    $first = substr($x, 0, $shift);\n    $second = substr($x, $shift);\n\
    \    return $second . $first;\n}\n\n/* Return the sum of the digits of the integer\
    \ x.\n>>> digit_sum(1234)\n10\n>>> digit_sum(12)\n3\n>>> digit_sum(0)\n0\n>>>\
    \ digit_sum(-123)\n6\n*/", "    $x = (string)$x;\n    $len = strlen($x);\n   \
    \ if ($shift > $len) {\n        return strrev($x);\n    }\n    return substr($x,\
    \ $shift, $len - $shift) . substr($x, 0, $shift);\n}\n\n/*\n * Test code\n */\n\
    assert_options(ASSERT_BAIL, 1);\n\n$tests = array(\n    array(12, 1, \"21\"),\n\
    \    array(12, 2, \"12\"),\n    array(12, 3, \"21\"),\n    array(12, 4, \"12\"\
    ),\n    array(12, 5, \"21\"),\n    array(12, 6, \"12\"),\n    array(12, 7, \"\
    21\"),\n    array(12, 8, \"12\"),\n    array(12, 9, \"21\"),\n    array(12, 10,\
    \ \"12\"),\n    array(12, 11, \"21\"),\n    array(12, 12, \"12\"),\n    array(12,\
    \ 13, \"21\"),\n    array(12, 14, \"12\"),\n    array(12, 15, \"21\"),\n    array(12,\
    \ 16, \"12\"),\n    array(12, 17, \"21\"),\n    array(12, 18, \"12\"),\n    array(12,\
    \ 19, \"21\"),\n    array(12, 20, \"12\"),\n    array(12, 21, \"21\"),\n    array(12,\
    \ 22, \"12\"),\n    array(12, 23, \"21\"),\n    array(12, 24, \"12\"),\n    array(12,\
    \ 25, \"21\"),\n    array(12, 26, \"12\"),\n    array(12, 27, \"21\"),\n    array(12,\
    \ 28, \"12\"),\n    array(12, 29, \"21\"),\n    array(12, 30, \"12\"),\n    array(12,\
    \ 31, \"21\"),\n    array(12, 32, \"12\"),\n    array(12, 33, \"21\"),\n    array(12,\
    \ 34, \"12\"),\n    array(12, 35, \"21\"),\n    array(12, 36, \"12\"),\n    array(12,\
    \ 37, \"21\"),\n    array(12,", "  $digits = str_split($x);\n  $digits_count =\
    \ count($digits);\n  if ($shift >= $digits_count) {\n    return implode('', array_reverse($digits));\n\
    \  }\n  $shifted_digits = array_slice($digits, $shift);\n  $shifted_digits = array_merge($shifted_digits,\
    \ array_slice($digits, 0, $shift));\n  return implode('', $shifted_digits);\n\
    }\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n1\n\
    >>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $shift = $len\
    \ - $shift;\n    $x = substr($x, $shift) . substr($x, 0, $shift);\n    return\
    \ $x;\n}\n\n/*\n * Test code\n */\nassert_options(ASSERT_BAIL, 1);\n\n$tests =\
    \ array(\n    array(12, 1, \"21\"),\n    array(12, 2, \"12\"),\n    array(12,\
    \ 3, \"21\"),\n    array(12, 4, \"12\"),\n    array(12, 5, \"21\"),\n    array(12,\
    \ 6, \"12\"),\n    array(12, 7, \"21\"),\n    array(12, 8, \"12\"),\n    array(12,\
    \ 9, \"21\"),\n    array(12, 10, \"12\"),\n    array(12, 11, \"21\"),\n    array(12,\
    \ 12, \"12\"),\n    array(12, 13, \"21\"),\n    array(12, 14, \"12\"),\n    array(12,\
    \ 15, \"21\"),\n    array(12, 16, \"12\"),\n    array(12, 17, \"21\"),\n    array(12,\
    \ 18, \"12\"),\n    array(12, 19, \"21\"),\n    array(12, 20, \"12\"),\n    array(12,\
    \ 21, \"21\"),\n    array(12, 22, \"12\"),\n    array(12, 23, \"21\"),\n    array(12,\
    \ 24, \"12\"),\n    array(12, 25, \"21\"),\n    array(12, 26, \"12\"),\n    array(12,\
    \ 27, \"21\"),\n    array(12, 28, \"12\"),\n    array(12, 29, \"21\"),\n    array(12,\
    \ 30, \"12\"),\n    array(12, 31, \"21\"),\n    array(12, 32, \"12\"),\n    array(12,\
    \ 33, \"21\"),\n    array(12, 34, \"12\"),\n    array(12, 35, \"21\"),\n    array(12,\
    \ 36, \"12\"),\n    array(", "    $x = (string)$x;\n    $len = strlen($x);\n \
    \   if ($shift > $len) {\n        return strrev($x);\n    }\n    $start = substr($x,\
    \ 0, $len - $shift);\n    $end = substr($x, $len - $shift);\n    return $end .\
    \ $start;\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12, 1) == \"21\"\
    );\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12, 3) ==\
    \ \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12, 26) == \"12\");\nassert", "\t$x =\
    \ (string)$x;\n\t$len = strlen($x);\n\tif ($shift > $len) {\n\t\treturn strrev($x);\n\
    \t}\n\t$shift = $len - $shift;\n\treturn substr($x, $shift) . substr($x, 0, $shift);\n\
    }\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n1\n\
    >>> num_digits(-12345)\n5\n*/", "\t$x = (string)$x;\n\t$len = strlen($x);\n\t\
    if ($shift > $len) {\n\t\treturn strrev($x);\n\t}\n\t$x = substr($x, $shift) .\
    \ substr($x, 0, $shift);\n\treturn $x;\n}\n\n/* Return the number of digits in\
    \ the integer x.\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n>>> num_digits(-123)\n\
    3\n*/", "\t$x = (string)$x;\n\t$shift = (int)$shift;\n\t$len = strlen($x);\n\t\
    if ($shift > $len) {\n\t\treturn strrev($x);\n\t}\n\t$x = substr($x, $shift) .\
    \ substr($x, 0, $shift);\n\treturn $x;\n}\n\n/* Return the number of digits in\
    \ the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n5*/", "    $x\
    \ = strval($x);\n    $len = strlen($x);\n    if ($shift > $len) {\n        return\
    \ strrev($x);\n    }\n    $first = substr($x, 0, $shift);\n    $second = substr($x,\
    \ $shift);\n    return $second . $first;\n}\n\n/*\n>>> is_palindrome(12)\nFalse\n\
    >>> is_palindrome(121)\nTrue\n*/", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $left = substr($x,\
    \ 0, $len - $shift);\n    $right = substr($x, $len - $shift);\n    return $right\
    \ . $left;\n}\n\n/* Return the number of digits in the integer x.\n>>> num_digits(123)\n\
    3\n>>> num_digits(0)\n1\n>>> num_digits(-123)\n3\n*/", "    $x = (string)$x;\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $left = substr($x, 0, $len - $shift);\n    $right = substr($x, $len\
    \ - $shift);\n    return $right . $left;\n}\n\n/*\n * Test code\n */\nassert_options(ASSERT_BAIL,\
    \ 1);\n\n$test_cases = array(\n    array(12, 1, \"21\"),\n    array(12, 2, \"\
    12\"),\n    array(12, 3, \"21\"),\n    array(12, 4, \"12\"),\n    array(12, 5,\
    \ \"21\"),\n    array(12, 6, \"12\"),\n    array(12, 7, \"21\"),\n    array(12,\
    \ 8, \"12\"),\n    array(12, 9, \"21\"),\n    array(12, 10, \"12\"),\n    array(12,\
    \ 11, \"21\"),\n    array(12, 12, \"12\"),\n    array(12, 13, \"21\"),\n    array(12,\
    \ 14, \"12\"),\n    array(12, 15, \"21\"),\n    array(12, 16, \"12\"),\n    array(12,\
    \ 17, \"21\"),\n    array(12, 18, \"12\"),\n    array(12, 19, \"21\"),\n    array(12,\
    \ 20, \"12\"),\n    array(12, 21, \"21\"),\n    array(12, 22, \"12\"),\n    array(12,\
    \ 23, \"21\"),\n    array(12, 24, \"12\"),\n    array(12, 25, \"21\"),\n    array(12,\
    \ 26, \"12\"),\n    array(12, 27, \"21\"),\n    array(12, 28, \"12\"),\n    array(12,\
    \ 29, \"21\"),\n    array(12, 30, \"12\"),\n    array(12, 31, \"21\"),\n    array(12,\
    \ 32, \"12\"),\n    array(12, 33, \"21\"),\n    array(12, 34, \"12\"),\n    array(12,\
    \ 35, \"21\"),\n    array(12, 36, \"12\"),", "    $x = (string)$x;\n    $len =\
    \ strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n    }\n \
    \   $shift = $len - $shift;\n    $x = substr($x, $shift) . substr($x, 0, $shift);\n\
    \    return $x;\n}\n\n/*\n * Test code\n */\nassert_options(ASSERT_BAIL, 1);\n\
    \n$tests = array(\n    array(12, 1, \"21\"),\n    array(12, 2, \"12\"),\n    array(12,\
    \ 3, \"21\"),\n    array(12, 4, \"12\"),\n    array(12, 5, \"21\"),\n    array(12,\
    \ 6, \"12\"),\n    array(12, 7, \"21\"),\n    array(12, 8, \"12\"),\n    array(12,\
    \ 9, \"21\"),\n    array(12, 10, \"12\"),\n    array(12, 11, \"21\"),\n    array(12,\
    \ 12, \"12\"),\n    array(12, 13, \"21\"),\n    array(12, 14, \"12\"),\n    array(12,\
    \ 15, \"21\"),\n    array(12, 16, \"12\"),\n    array(12, 17, \"21\"),\n    array(12,\
    \ 18, \"12\"),\n    array(12, 19, \"21\"),\n    array(12, 20, \"12\"),\n    array(12,\
    \ 21, \"21\"),\n    array(12, 22, \"12\"),\n    array(12, 23, \"21\"),\n    array(12,\
    \ 24, \"12\"),\n    array(12, 25, \"21\"),\n    array(12, 26, \"12\"),\n    array(12,\
    \ 27, \"21\"),\n    array(12, 28, \"12\"),\n    array(12, 29, \"21\"),\n    array(12,\
    \ 30, \"12\"),\n    array(12, 31, \"21\"),\n    array(12, 32, \"12\"),\n    array(12,\
    \ 33, \"21\"),\n    array(12, 34, \"12\"),\n    array(12, 35, \"21\"),\n    array(12,\
    \ 36, \"12\"),\n    array(", "\t$x = (string)$x;\n\t$len = strlen($x);\n\tif ($shift\
    \ > $len) {\n\t\treturn strrev($x);\n\t}\n\t$a = substr($x, $shift);\n\t$b = substr($x,\
    \ 0, $shift);\n\treturn $a.$b;\n}\n\n/*\n>>> circular_shift(12, 1)\n\"21\"\n>>>\
    \ circular_shift(12, 2)\n\"12\"\n*/\necho circular_shift(12, 1).\"\\n\";\necho\
    \ circular_shift(12, 2).\"\\n\";\n\n/*\n>>> circular_shift(123, 1)\n\"312\"\n\
    >>> circular_shift(123, 2)\n\"231\"\n>>> circular_shift(123, 3)\n\"123\"\n*/\n\
    echo circular_shift(123, 1).\"\\n\";\necho circular_shift(123, 2).\"\\n\";\necho\
    \ circular_shift(123, 3).\"\\n\";\n\n/*\n>>> circular_shift(123, 4)\n\"321\"\n\
    >>> circular_shift(123, 5)\n\"123\"\n*/\necho circular_shift(123, 4).\"\\n\";\n\
    echo circular_shift(123, 5).\"\\n\";\n\n/*\n>>> circular_shift(12345, 1)\n\"51234\"\
    \n>>> circular_shift(12345, 2)\n\"42123\"\n>>> circular_shift(12345, 3)\n\"34212\"\
    \n>>> circular_shift(12345, 4)\n\"23412\"\n>>> circular_shift(12345, 5)\n\"12345\"\
    \n*/\necho circular_shift(12345, 1).\"\\n\";\necho circular_shift(12345, 2).\"\
    \\n\";\necho circular_shift(12345, 3).\"\\n\";\necho circular_shift(12345, 4).\"\
    \\n\";\necho circular_shift(12345, 5).\"\\n\";\n\n/*\n>>> circular_shift(12345,\
    \ 6)\n\"54321\"\n>>> circular_shift(12345, 7)\n\"45321\"\n>>> circular_shift(12345,\
    \ 8)\n\"34521\"\n>>> circular_shift(12345, 9)\n\"23451\"\n>>> circular_shift(",
  "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n      \
    \  return strrev($x);\n    }\n    $left = substr($x, 0, $len - $shift);\n    $right\
    \ = substr($x, $len - $shift);\n    return $right . $left;\n}\n\n/*\n>>> circular_shift(1234,\
    \ 1)\n\"4123\"\n>>> circular_shift(1234, 2)\n\"3412\"\n>>> circular_shift(1234,\
    \ 3)\n\"2341\"\n>>> circular_shift(1234, 4)\n\"1234\"\n>>> circular_shift(1234,\
    \ 5)\n\"4321\"\n*/\n\n/*\n>>> circular_shift(1234, 1)\n\"4123\"\n>>> circular_shift(1234,\
    \ 2)\n\"3412\"\n>>> circular_shift(1234, 3)\n\"2341\"\n>>> circular_shift(1234,\
    \ 4)\n\"1234\"\n>>> circular_shift(1234, 5)\n\"4321\"\n*/\n\n/*\n>>> circular_shift(1234,\
    \ 1)\n\"4123\"\n>>> circular_shift(1234, 2)\n\"3412\"\n>>> circular_shift(1234,\
    \ 3)\n\"2341\"\n>>> circular_shift(1234, 4)\n\"1234\"\n>>> circular_shift(1234,\
    \ 5)\n\"4321\"\n*/\n\n/*\n>>> circular_shift(1234, 1)\n\"4123\"\n>>> circular_shift(1234,\
    \ 2)\n\"3412\"\n>>> circular_shift(1234, 3)\n\"2341\"\n>>> circular_shift(1234,\
    \ 4)\n\"1234\"\n>>> circular_shift(1234, 5)\n\"4321\"\n*/\n\n/*\n>>> circular_shift(1234,\
    \ 1)\n\"4123\"\n>>> circular_shift(1234, 2)\n\"3412\"\n>>> circular_shift(1234,\
    \ 3)\n\"2341\"\n>>> circular_shift(1234, 4)\n\"1234\"\n>>> circular_shift(1234,\
    \ 5)\n\"4321\"\n*/\n\n", "    $x = (string)$x;\n    $shift = (int)$shift;\n  \
    \  $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $first = substr($x, 0, $shift);\n    $second = substr($x, $shift);\n\
    \    return $second . $first;\n}\n\n/*\n * Test code\n */\necho circular_shift(12,\
    \ 1) . \"\\n\";\necho circular_shift(12, 2) . \"\\n\";\necho circular_shift(12,\
    \ 3) . \"\\n\";\necho circular_shift(12, 4) . \"\\n\";\necho circular_shift(12,\
    \ 5) . \"\\n\";\necho circular_shift(12, 6) . \"\\n\";\necho circular_shift(12,\
    \ 7) . \"\\n\";\necho circular_shift(12, 8) . \"\\n\";\necho circular_shift(12,\
    \ 9) . \"\\n\";\necho circular_shift(12, 10) . \"\\n\";\necho circular_shift(12,\
    \ 11) . \"\\n\";\necho circular_shift(12, 12) . \"\\n\";\necho circular_shift(12,\
    \ 13) . \"\\n\";\necho circular_shift(12, 14) . \"\\n\";\necho circular_shift(12,\
    \ 15) . \"\\n\";\necho circular_shift(12, 16) . \"\\n\";\necho circular_shift(12,\
    \ 17) . \"\\n\";\necho circular_shift(12, 18) . \"\\n\";\necho circular_shift(12,\
    \ 19) . \"\\n\";\necho circular_shift(12, 20) . \"\\n\";\necho circular_shift(12,\
    \ 21) . \"\\n\";\necho circular_shift(12, 22) . \"\\n\";\necho circular_shift(12,\
    \ 23) . \"\\n\";\necho circular_shift(12, 24) . \"\\n\";\necho circular_shift(12,\
    \ 25) . \"\\n\";\necho circular_shift(12, 26) . \"\\n\";\necho circular_shift(12,\
    \ 27) . \"\\n\";\necho circular_shift(12, 28) . \"\\n\";\necho circular_shift(12,\
    \ 29) . \"\\n\";\necho circular_shift(12", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift >= $len) {\n        return strrev($x);\n    }\n    $first = substr($x,\
    \ 0, $shift);\n    $second = substr($x, $shift);\n    return $second . $first;\n\
    }\n\n/* Return the number of digits in the integer x.\n>>> num_digits(123)\n3\n\
    >>> num_digits(123456789)\n9\n*/", "    $x = strval($x);\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $right = substr($x,\
    \ 0, $len - $shift);\n    $left = substr($x, $len - $shift);\n    return $left\
    \ . $right;\n}\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n\
    1\n>>> num_digits(-12345)\n5*/", "    $x = strval($x);\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $shift = $len\
    \ - $shift;\n    return substr($x, $shift) . substr($x, 0, $shift);\n}\n\n/* Return\
    \ the sum of the digits of the integer x.\n>>> digit_sum(1234)\n10\n>>> digit_sum(12)\n\
    3\n>>> digit_sum(0)\n0\n>>> digit_sum(-123)\n6*/", "    $x = (string)$x;\n   \
    \ $len = strlen($x);\n    if ($shift >= $len) {\n        return strrev($x);\n\
    \    }\n    $right = substr($x, $shift);\n    $left = substr($x, 0, $shift);\n\
    \    return $right . $left;\n}\n\n/* Return the number of digits in the integer\
    \ x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n5*/", "\t$x = strval($x);\n\
    \t$len = strlen($x);\n\tif ($shift > $len) {\n\t\treturn strrev($x);\n\t}\n\t\
    $right = substr($x, 0, $len - $shift);\n\t$left = substr($x, $len - $shift);\n\
    \treturn $left . $right;\n}\n\n/* Return the number of digits in the integer x.\n\
    >>> num_digits(0)\n1\n>>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n  \
    \  $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $left = substr($x, 0, $len - $shift);\n    $right = substr($x, $len\
    \ - $shift);\n    return $right . $left;\n}\n\n/*\n * Return the sum of the digits\
    \ of the integer x.\n * >>> sum_digits(12)\n * 3\n * >>> sum_digits(12345)\n *\
    \ 15\n */", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len)\
    \ {\n        return strrev($x);\n    }\n    $shift = $len - $shift;\n    return\
    \ substr($x, $shift) . substr($x, 0, $shift);\n}\n\n/* Return the number of digits\
    \ in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n5*/", "   \
    \ $x = (string)$x;\n    $shift = (int)$shift;\n    $len = strlen($x);\n    if\
    \ ($shift > $len) {\n        return strrev($x);\n    }\n    $x = substr($x, $shift)\
    \ . substr($x, 0, $shift);\n    return $x;\n}\n\n/*\n>>> is_palindrome(121)\n\
    True\n>>> is_palindrome(123)\nFalse\n*/", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $y = substr($x,\
    \ $shift, $len - $shift);\n    $z = substr($x, 0, $shift);\n    return $y . $z;\n\
    }\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n1\n\
    >>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $first = substr($x,\
    \ 0, $len - $shift);\n    $second = substr($x, $len - $shift);\n    return $second\
    \ . $first;\n}\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n\
    1\n>>> num_digits(-12345)\n5*/", "    $x = strval($x);\n    $x_len = strlen($x);\n\
    \    if ($shift > $x_len) {\n        return strrev($x);\n    }\n    $x_left =\
    \ substr($x, 0, $x_len - $shift);\n    $x_right = substr($x, $x_len - $shift);\n\
    \    return $x_right . $x_left;\n}\n\n/* Return the number of digits in the integer\
    \ x.\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n>>> num_digits(-123)\n3\n\
    */", "    $x = (string)$x;\n    $shift = (int)$shift;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $first = substr($x,\
    \ 0, $shift);\n    $second = substr($x, $shift);\n    return $second . $first;\n\
    }\n\n/*\n * Test code\n */\nassert(circular_shift(12, 1) == \"21\");\nassert(circular_shift(12,\
    \ 2) == \"12\");\nassert(circular_shift(12, 3) == \"21\");\nassert(circular_shift(12,\
    \ 4) == \"12\");\nassert(circular_shift(12, 5) == \"21\");\nassert(circular_shift(12,\
    \ 6) == \"12\");\nassert(circular_shift(12, 7) == \"21\");\nassert(circular_shift(12,\
    \ 8) == \"12\");\nassert(circular_shift(12, 9) == \"21\");\nassert(circular_shift(12,\
    \ 10) == \"12\");\nassert(circular_shift(12, 11) == \"21\");\nassert(circular_shift(12,\
    \ 12) == \"12\");\nassert(circular_shift(12, 13) == \"21\");\nassert(circular_shift(12,\
    \ 14) == \"12\");\nassert(circular_shift(12, 15) == \"21\");\nassert(circular_shift(12,\
    \ 16) == \"12\");\nassert(circular_shift(12, 17) == \"21\");\nassert(circular_shift(12,\
    \ 18) == \"12\");\nassert(circular_shift(12, 19) == \"21\");\nassert(circular_shift(12,\
    \ 20) == \"12\");\nassert(circular_shift(12, 21) == \"21\");\nassert(circular_shift(12,\
    \ 22) == \"12\");\nassert(circular_shift(12, 23) == \"21\");\nassert(circular_shift(12,\
    \ 24) == \"12\");\nassert(circular_shift(12, 25) == \"21\");\nassert(circular_shift(12,\
    \ 26) ==", "    $x = (string)$x;\n    $shift = (int)$shift;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $left = substr($x,\
    \ 0, $shift);\n    $right = substr($x, $shift);\n    return $right . $left;\n\
    }\n\n/*\n * Test code\n */\nassert(circular_shift(12, 1) == \"21\");\nassert(circular_shift(12,\
    \ 2) == \"12\");\nassert(circular_shift(12, 3) == \"21\");\nassert(circular_shift(12,\
    \ 4) == \"12\");\nassert(circular_shift(12, 5) == \"21\");\nassert(circular_shift(12,\
    \ 6) == \"12\");\nassert(circular_shift(12, 7) == \"21\");\nassert(circular_shift(12,\
    \ 8) == \"12\");\nassert(circular_shift(12, 9) == \"21\");\nassert(circular_shift(12,\
    \ 10) == \"12\");\nassert(circular_shift(12, 11) == \"21\");\nassert(circular_shift(12,\
    \ 12) == \"12\");\nassert(circular_shift(12, 13) == \"21\");\nassert(circular_shift(12,\
    \ 14) == \"12\");\nassert(circular_shift(12, 15) == \"21\");\nassert(circular_shift(12,\
    \ 16) == \"12\");\nassert(circular_shift(12, 17) == \"21\");\nassert(circular_shift(12,\
    \ 18) == \"12\");\nassert(circular_shift(12, 19) == \"21\");\nassert(circular_shift(12,\
    \ 20) == \"12\");\nassert(circular_shift(12, 21) == \"21\");\nassert(circular_shift(12,\
    \ 22) == \"12\");\nassert(circular_shift(12, 23) == \"21\");\nassert(circular_shift(12,\
    \ 24) == \"12\");\nassert(circular_shift(12, 25) == \"21\");\nassert(circular_shift(12,\
    \ 26) ==", "\t$x = (string)$x;\n\t$shift = (int)$shift;\n\t$len = strlen($x);\n\
    \tif ($shift > $len) {\n\t\treturn strrev($x);\n\t}\n\treturn substr($x, $shift,\
    \ $len) . substr($x, 0, $shift);\n}\n\n/* Return the number of digits in the integer\
    \ x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n\
    \    $shift = (int)$shift;\n    $len = strlen($x);\n    if ($shift > $len) {\n\
    \        return strrev($x);\n    }\n    $first = substr($x, 0, $shift);\n    $second\
    \ = substr($x, $shift);\n    return $second . $first;\n}\n\n/*\n * Tests:\n */\n\
    assert_options(ASSERT_BAIL, 1);\n\n$tests = array(\n    array(12, 1, \"21\"),\n\
    \    array(12, 2, \"12\"),\n    array(12, 3, \"21\"),\n    array(12, 4, \"12\"\
    ),\n    array(12, 5, \"21\"),\n    array(12, 6, \"12\"),\n    array(12, 7, \"\
    21\"),\n    array(12, 8, \"12\"),\n    array(12, 9, \"21\"),\n    array(12, 10,\
    \ \"12\"),\n    array(12, 11, \"21\"),\n    array(12, 12, \"12\"),\n    array(12,\
    \ 13, \"21\"),\n    array(12, 14, \"12\"),\n    array(12, 15, \"21\"),\n    array(12,\
    \ 16, \"12\"),\n    array(12, 17, \"21\"),\n    array(12, 18, \"12\"),\n    array(12,\
    \ 19, \"21\"),\n    array(12, 20, \"12\"),\n    array(12, 21, \"21\"),\n    array(12,\
    \ 22, \"12\"),\n    array(12, 23, \"21\"),\n    array(12, 24, \"12\"),\n    array(12,\
    \ 25, \"21\"),\n    array(12, 26, \"12\"),\n    array(12, 27, \"21\"),\n    array(12,\
    \ 28, \"12\"),\n    array(12, 29, \"21\"),\n    array(12, 30, \"12\"),\n    array(12,\
    \ 31, \"21\"),\n    array(12, 32, \"12\"),\n    array(12, 33, \"21\"),\n    array(12,\
    \ 34, \"12\"),\n    array(12, 35, \"21\"),\n    array(12, 36,", "\t$x = (string)$x;\n\
    \t$shift = (int)$shift;\n\t$len = strlen($x);\n\tif ($shift > $len) {\n\t\treturn\
    \ strrev($x);\n\t}\n\t$first = substr($x, 0, $shift);\n\t$second = substr($x,\
    \ $shift);\n\treturn $second.$first;\n}\n\n/* Return the number of digits in the\
    \ integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $shift = $len - $shift;\n    return substr($x, $shift) . substr($x,\
    \ 0, $shift);\n}\n\n/*\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12,\
    \ 2)\n\"12\"\n>>> circular_shift(12, 3)\n\"21\"\n>>> circular_shift(12, 4)\n\"\
    12\"\n>>> circular_shift(12, 5)\n\"21\"\n>>> circular_shift(12, 6)\n\"12\"\n>>>\
    \ circular_shift(12, 7)\n\"21\"\n>>> circular_shift(12, 8)\n\"12\"\n>>> circular_shift(12,\
    \ 9)\n\"21\"\n>>> circular_shift(12, 10)\n\"12\"\n>>> circular_shift(12, 11)\n\
    \"21\"\n>>> circular_shift(12, 12)\n\"12\"\n>>> circular_shift(12, 13)\n\"21\"\
    \n>>> circular_shift(12, 14)\n\"12\"\n>>> circular_shift(12, 15)\n\"21\"\n>>>\
    \ circular_shift(12, 16)\n\"12\"\n>>> circular_shift(12, 17)\n\"21\"\n>>> circular_shift(12,\
    \ 18)\n\"12\"\n>>> circular_shift(12, 19)\n\"21\"\n>>> circular_shift(12, 20)\n\
    \"12\"\n>>> circular_shift(12, 21)\n\"21\"\n>>> circular_shift(12, 22)\n\"12\"\
    \n>>> circular_shift(12, 23)\n\"21\"\n>>> circular_shift(12, 24)\n\"12\"\n>>>\
    \ circular_shift(12, 25)\n\"21\"\n>>> circular_shift(12, 26)\n\"12\"\n>>> circular_shift(12,\
    \ 27)\n\"21\"\n>>> circular_shift(12, 28)\n\"12\"\n>>> circular_shift(12, 29)\n\
    \"21\"\n>>> circular_shift(12, 30)\n\"12\"\n>>> circular_shift(12, 31)\n\"21\"",
  "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n      \
    \  return strrev($x);\n    }\n    $shift = $len - $shift;\n    $x = substr($x,\
    \ $shift) . substr($x, 0, $shift);\n    return $x;\n}\n\n/* Return the number\
    \ of digits in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n\
    5\n*/", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len)\
    \ {\n        return strrev($x);\n    }\n    $shift = $len - $shift;\n    $x =\
    \ substr($x, $shift) . substr($x, 0, $shift);\n    return $x;\n}\n\n/* Return\
    \ the number of digits in x.\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n>>>\
    \ num_digits(-123)\n3\n*/", "    $x = (string)$x;\n    $len = strlen($x);\n  \
    \  if ($shift > $len) {\n        return strrev($x);\n    }\n    $a = substr($x,\
    \ $shift);\n    $b = substr($x, 0, $shift);\n    return $a.$b;\n}\n\n/* Return\
    \ the number of digits in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n\
    5*/", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n\
    \        return strrev($x);\n    }\n    $shift = $len - $shift;\n    return substr($x,\
    \ $shift) . substr($x, 0, $shift);\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12,\
    \ 1) == \"21\");\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12,\
    \ 3) == \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12, 26) == \"12\");\nassert(circular_shift(12,\
    \ 27)", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len)\
    \ {\n        return strrev($x);\n    }\n    $y = substr($x, $shift, $len - $shift);\n\
    \    $y .= substr($x, 0, $shift);\n    return $y;\n}\n\n/*\n>>> circular_shift(12,\
    \ 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\necho circular_shift(12, 1)\
    \ . \"\\n\";\necho circular_shift(12, 2) . \"\\n\";\n\n/*\n>>> circular_shift(123,\
    \ 1)\n\"312\"\n>>> circular_shift(123, 2)\n\"231\"\n>>> circular_shift(123, 3)\n\
    \"123\"\n*/\necho circular_shift(123, 1) . \"\\n\";\necho circular_shift(123,\
    \ 2) . \"\\n\";\necho circular_shift(123, 3) . \"\\n\";\n\n/*\n>>> circular_shift(123,\
    \ 4)\n\"321\"\n>>> circular_shift(123, 5)\n\"123\"\n*/\necho circular_shift(123,\
    \ 4) . \"\\n\";\necho circular_shift(123, 5) . \"\\n\";\n\n/*\n>>> circular_shift(12345,\
    \ 1)\n\"54321\"\n>>> circular_shift(12345, 2)\n\"45123\"\n>>> circular_shift(12345,\
    \ 3)\n\"34512\"\n>>> circular_shift(12345, 4)\n\"23451\"\n>>> circular_shift(12345,\
    \ 5)\n\"12345\"\n*/\necho circular_shift(12345, 1) . \"\\n\";\necho circular_shift(12345,\
    \ 2) . \"\\n\";\necho circular_shift(12345, 3) . \"\\n\";\necho circular_shift(12345,\
    \ 4) . \"\\n\";\necho circular_shift(12345, 5) . \"\\n\";\n\n/*\n>>> circular_shift(12345,\
    \ 6)\n\"54321\"\n>>> circular_shift(12345, 7)\n\"45123\"\n>>> circular_shift(12345,\
    \ 8)\n\"34512\"\n>>> circular_shift", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $result = substr($x,\
    \ $shift) . substr($x, 0, $shift);\n    return $result;\n}\n\n/* Return the number\
    \ of digits in the integer x.\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n\
    >>> num_digits(-123)\n3\n*/", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $left = substr($x,\
    \ 0, $len - $shift);\n    $right = substr($x, $len - $shift);\n    return $right\
    \ . $left;\n}\n\n/* Return the integer x with the digits reversed.\n>>> reverse_digits(12)\n\
    21\n>>> reverse_digits(1)\n1\n*/", "    $digits = str_split($x);\n    $digits_count\
    \ = count($digits);\n    if ($shift > $digits_count) {\n        return implode('',\
    \ array_reverse($digits));\n    }\n    $shifted_digits = array_slice($digits,\
    \ -$shift);\n    $shifted_digits = array_merge($shifted_digits, array_slice($digits,\
    \ 0, $digits_count - $shift));\n    return implode('', $shifted_digits);\n}\n\n\
    /*\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n>>>\
    \ circular_shift(12, 3)\n\"21\"\n>>> circular_shift(12, 4)\n\"12\"\n>>> circular_shift(12,\
    \ 5)\n\"21\"\n>>> circular_shift(12, 6)\n\"12\"\n>>> circular_shift(12, 7)\n\"\
    21\"\n>>> circular_shift(12, 8)\n\"12\"\n>>> circular_shift(12, 9)\n\"21\"\n>>>\
    \ circular_shift(12, 10)\n\"12\"\n>>> circular_shift(12, 11)\n\"21\"\n>>> circular_shift(12,\
    \ 12)\n\"12\"\n>>> circular_shift(12, 13)\n\"21\"\n>>> circular_shift(12, 14)\n\
    \"12\"\n>>> circular_shift(12, 15)\n\"21\"\n>>> circular_shift(12, 16)\n\"12\"\
    \n>>> circular_shift(12, 17)\n\"21\"\n>>> circular_shift(12, 18)\n\"12\"\n>>>\
    \ circular_shift(12, 19)\n\"21\"\n>>> circular_shift(12, 20)\n\"12\"\n>>> circular_shift(12,\
    \ 21)\n\"21\"\n>>> circular_shift(12, 22)\n\"12\"\n>>> circular_shift(12, 23)\n\
    \"21\"\n>>> circular_shift(12, 24)\n\"12\"\n>>> circular_shift(12, 25)\n\"21\"\
    \n>>> circular_shift(12, 26)\n\"12\"\n>>> circular_shift(12, 27)\n\"21\"\n>>>",
  "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n      \
    \  return strrev($x);\n    }\n    $y = substr($x, $shift, $len - $shift);\n  \
    \  $y .= substr($x, 0, $shift);\n    return $y;\n}\n\n/*\n>>> circular_shift(12,\
    \ 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\necho circular_shift(12, 1)\
    \ . \"\\n\";\necho circular_shift(12, 2) . \"\\n\";\n\n/*\n>>> circular_shift(123,\
    \ 1)\n\"312\"\n>>> circular_shift(123, 2)\n\"231\"\n>>> circular_shift(123, 3)\n\
    \"123\"\n*/\necho circular_shift(123, 1) . \"\\n\";\necho circular_shift(123,\
    \ 2) . \"\\n\";\necho circular_shift(123, 3) . \"\\n\";\n\n/*\n>>> circular_shift(123,\
    \ 4)\n\"321\"\n>>> circular_shift(123, 5)\n\"123\"\n*/\necho circular_shift(123,\
    \ 4) . \"\\n\";\necho circular_shift(123, 5) . \"\\n\";\n\n/*\n>>> circular_shift(12345,\
    \ 1)\n\"54321\"\n>>> circular_shift(12345, 2)\n\"45123\"\n>>> circular_shift(12345,\
    \ 3)\n\"34512\"\n>>> circular_shift(12345, 4)\n\"23451\"\n>>> circular_shift(12345,\
    \ 5)\n\"12345\"\n*/\necho circular_shift(12345, 1) . \"\\n\";\necho circular_shift(12345,\
    \ 2) . \"\\n\";\necho circular_shift(12345, 3) . \"\\n\";\necho circular_shift(12345,\
    \ 4) . \"\\n\";\necho circular_shift(12345, 5) . \"\\n\";\n\n/*\n>>> circular_shift(12345,\
    \ 6)\n\"54321\"\n>>> circular_shift(12345, 7)\n\"45123\"\n>>> circular_shift(12345,\
    \ 8)\n\"34512\"\n>>> circular_shift", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $left = substr($x,\
    \ 0, $len - $shift);\n    $right = substr($x, $len - $shift);\n    return $right\
    \ . $left;\n}\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n\
    1\n>>> num_digits(-12345)\n5*/", "\t$x = (string)$x;\n\t$len = strlen($x);\n\t\
    if ($shift > $len) {\n\t\treturn strrev($x);\n\t}\n\t$right = substr($x, 0, $len\
    \ - $shift);\n\t$left = substr($x, $len - $shift);\n\treturn $left . $right;\n\
    }\n\n/* Return the number of digits in the integer x.\n>>> num_digits(123)\n3\n\
    >>> num_digits(0)\n1\n>>> num_digits(-123)\n3*/", "    $x = (string)$x;\n    $shift\
    \ = (int)$shift;\n    $len = strlen($x);\n    if ($shift > $len) {\n        return\
    \ strrev($x);\n    }\n    $result = substr($x, $shift, $len - $shift);\n    $result\
    \ .= substr($x, 0, $shift);\n    return $result;\n}\n\n/*\n * Test code\n */\n\
    assert(circular_shift(12, 1) == \"21\");\nassert(circular_shift(12, 2) == \"12\"\
    );\nassert(circular_shift(12, 3) == \"21\");\nassert(circular_shift(12, 4) ==\
    \ \"12\");\nassert(circular_shift(12, 5) == \"21\");\nassert(circular_shift(12,\
    \ 6) == \"12\");\nassert(circular_shift(12, 7) == \"21\");\nassert(circular_shift(12,\
    \ 8) == \"12\");\nassert(circular_shift(12, 9) == \"21\");\nassert(circular_shift(12,\
    \ 10) == \"12\");\nassert(circular_shift(12, 11) == \"21\");\nassert(circular_shift(12,\
    \ 12) == \"12\");\nassert(circular_shift(12, 13) == \"21\");\nassert(circular_shift(12,\
    \ 14) == \"12\");\nassert(circular_shift(12, 15) == \"21\");\nassert(circular_shift(12,\
    \ 16) == \"12\");\nassert(circular_shift(12, 17) == \"21\");\nassert(circular_shift(12,\
    \ 18) == \"12\");\nassert(circular_shift(12, 19) == \"21\");\nassert(circular_shift(12,\
    \ 20) == \"12\");\nassert(circular_shift(12, 21) == \"21\");\nassert(circular_shift(12,\
    \ 22) == \"12\");\nassert(circular_shift(12, 23) == \"21\");\nassert(circular_shift(12,\
    \ 24) == \"12\");\nassert(circular_shift(12, 25) == \"21\");\nassert(circular_shift(12",
  "    $digits = str_split($x);\n    $digits_count = count($digits);\n    if ($shift\
    \ > $digits_count) {\n        return implode('', array_reverse($digits));\n  \
    \  }\n    $shifted_digits = array_slice($digits, $shift);\n    $shifted_digits\
    \ = array_merge($shifted_digits, array_slice($digits, 0, $shift));\n    return\
    \ implode('', $shifted_digits);\n}\n\n/*\n>>> circular_shift(12, 1)\n\"21\"\n\
    >>> circular_shift(12, 2)\n\"12\"\n*/\necho circular_shift(12, 1) . \"\\n\";\n\
    echo circular_shift(12, 2) . \"\\n\";\necho circular_shift(12, 3) . \"\\n\";\n\
    echo circular_shift(12, 4) . \"\\n\";\necho circular_shift(12, 5) . \"\\n\";\n\
    echo circular_shift(12, 6) . \"\\n\";\necho circular_shift(12, 7) . \"\\n\";\n\
    echo circular_shift(12, 8) . \"\\n\";\necho circular_shift(12, 9) . \"\\n\";\n\
    echo circular_shift(12, 10) . \"\\n\";\necho circular_shift(12, 11) . \"\\n\"\
    ;\necho circular_shift(12, 12) . \"\\n\";\necho circular_shift(12, 13) . \"\\\
    n\";\necho circular_shift(12, 14) . \"\\n\";\necho circular_shift(12, 15) . \"\
    \\n\";\necho circular_shift(12, 16) . \"\\n\";\necho circular_shift(12, 17) .\
    \ \"\\n\";\necho circular_shift(12, 18) . \"\\n\";\necho circular_shift(12, 19)\
    \ . \"\\n\";\necho circular_shift(12, 20) . \"\\n\";\necho circular_shift(12,\
    \ 21) . \"\\n\";\necho circular_shift(12, 22) . \"\\n\";\necho circular_shift(12,\
    \ 23) . \"\\n\";\necho circular_shift(12, 24) . \"\\n\";\necho circular_shift(12,\
    \ 25) . \"\\n\";\necho circular_shift(12", "    $x = (string)$x;\n    $shift =\
    \ (int)$shift;\n    $len = strlen($x);\n    if ($shift >= $len) {\n        return\
    \ strrev($x);\n    }\n    $first = substr($x, 0, $shift);\n    $second = substr($x,\
    \ $shift);\n    return $second . $first;\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12,\
    \ 1) == \"21\");\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12,\
    \ 3) == \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12, 26) ==", "    $x = (string)$x;\n\
    \    $length = strlen($x);\n    if ($shift > $length) {\n        return strrev($x);\n\
    \    }\n    $first_part = substr($x, $shift);\n    $second_part = substr($x, 0,\
    \ $shift);\n    return $first_part . $second_part;\n}\n\n/*\n * Test code\n */\n\
    assert(circular_shift(12, 1) == \"21\");\nassert(circular_shift(12, 2) == \"12\"\
    );\nassert(circular_shift(12, 3) == \"21\");\nassert(circular_shift(12, 4) ==\
    \ \"12\");\nassert(circular_shift(12, 5) == \"21\");\nassert(circular_shift(12,\
    \ 6) == \"12\");\nassert(circular_shift(12, 7) == \"21\");\nassert(circular_shift(12,\
    \ 8) == \"12\");\nassert(circular_shift(12, 9) == \"21\");\nassert(circular_shift(12,\
    \ 10) == \"12\");\nassert(circular_shift(12, 11) == \"21\");\nassert(circular_shift(12,\
    \ 12) == \"12\");\nassert(circular_shift(12, 13) == \"21\");\nassert(circular_shift(12,\
    \ 14) == \"12\");\nassert(circular_shift(12, 15) == \"21\");\nassert(circular_shift(12,\
    \ 16) == \"12\");\nassert(circular_shift(12, 17) == \"21\");\nassert(circular_shift(12,\
    \ 18) == \"12\");\nassert(circular_shift(12, 19) == \"21\");\nassert(circular_shift(12,\
    \ 20) == \"12\");\nassert(circular_shift(12, 21) == \"21\");\nassert(circular_shift(12,\
    \ 22) == \"12\");\nassert(circular_shift(12, 23) == \"21\");\nassert(circular_shift(12,\
    \ 24) == \"12\");\nassert(circular_shift(12, 25) == \"21\");\nassert(circular_shift(12,\
    \ 26) == \"12\");", "    $x = strval($x);\n    $len = strlen($x);\n    if ($shift\
    \ > $len) {\n        return strrev($x);\n    }\n    $left = substr($x, 0, $len\
    \ - $shift);\n    $right = substr($x, $len - $shift);\n    return $right . $left;\n\
    }\n\n/* Return the sum of the digits of the integer x.\n>>> sum_digits(12)\n3\n\
    >>> sum_digits(12345)\n15\n*/", "\t$x = (string)$x;\n\t$shift = (int)$shift;\n\
    \t$len = strlen($x);\n\tif ($shift > $len) {\n\t\treturn strrev($x);\n\t}\n\t\
    return substr($x, $shift, $len - $shift) . substr($x, 0, $shift);\n}\n\n/* Return\
    \ the number of digits in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n\
    5*/", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n\
    \        return strrev($x);\n    }\n    $right = substr($x, 0, $len - $shift);\n\
    \    $left = substr($x, $len - $shift);\n    return $left . $right;\n}\n\n/*\n\
    >>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\necho\
    \ circular_shift(12, 1) . \"\\n\";\necho circular_shift(12, 2) . \"\\n\";\necho\
    \ circular_shift(12, 3) . \"\\n\";\necho circular_shift(12, 4) . \"\\n\";\necho\
    \ circular_shift(12, 5) . \"\\n\";\necho circular_shift(12, 6) . \"\\n\";\necho\
    \ circular_shift(12, 7) . \"\\n\";\necho circular_shift(12, 8) . \"\\n\";\necho\
    \ circular_shift(12, 9) . \"\\n\";\necho circular_shift(12, 10) . \"\\n\";\necho\
    \ circular_shift(12, 11) . \"\\n\";\necho circular_shift(12, 12) . \"\\n\";\n\
    echo circular_shift(12, 13) . \"\\n\";\necho circular_shift(12, 14) . \"\\n\"\
    ;\necho circular_shift(12, 15) . \"\\n\";\necho circular_shift(12, 16) . \"\\\
    n\";\necho circular_shift(12, 17) . \"\\n\";\necho circular_shift(12, 18) . \"\
    \\n\";\necho circular_shift(12, 19) . \"\\n\";\necho circular_shift(12, 20) .\
    \ \"\\n\";\necho circular_shift(12, 21) . \"\\n\";\necho circular_shift(12, 22)\
    \ . \"\\n\";\necho circular_shift(12, 23) . \"\\n\";\necho circular_shift(12,\
    \ 24) . \"\\n\";\necho circular_shift(12, 25) . \"\\n\";\necho circular_shift(12,\
    \ 26) . \"\\n\";\necho circular_shift(12, 27) . \"\\n\";\necho circular_shift(12,\
    \ 28) . \"\\n\";\necho", "    $x = (string)$x;\n    $shift = (int)$shift;\n  \
    \  $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    return substr($x, $shift, $len - $shift) . substr($x, 0, $shift);\n\
    }\n\n/*\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n\
    */\necho circular_shift(12, 1);\necho \"\\n\";\necho circular_shift(12, 2);\n\
    echo \"\\n\";\necho circular_shift(12, 3);\necho \"\\n\";\necho circular_shift(12,\
    \ 4);\necho \"\\n\";\necho circular_shift(12, 5);\necho \"\\n\";\necho circular_shift(12,\
    \ 6);\necho \"\\n\";\necho circular_shift(12, 7);\necho \"\\n\";\necho circular_shift(12,\
    \ 8);\necho \"\\n\";\necho circular_shift(12, 9);\necho \"\\n\";\necho circular_shift(12,\
    \ 10);\necho \"\\n\";\necho circular_shift(12, 11);\necho \"\\n\";\necho circular_shift(12,\
    \ 12);\necho \"\\n\";\necho circular_shift(12, 13);\necho \"\\n\";\necho circular_shift(12,\
    \ 14);\necho \"\\n\";\necho circular_shift(12, 15);\necho \"\\n\";\necho circular_shift(12,\
    \ 16);\necho \"\\n\";\necho circular_shift(12, 17);\necho \"\\n\";\necho circular_shift(12,\
    \ 18);\necho \"\\n\";\necho circular_shift(12, 19);\necho \"\\n\";\necho circular_shift(12,\
    \ 20);\necho \"\\n\";\necho circular_shift(12, 21);\necho \"\\n\";\necho circular_shift(12,\
    \ 22);\necho \"\\n\";\necho circular_shift(12, 23);\necho \"\\n\";\necho circular_shift(12,\
    \ 24);\necho \"\\n\";\necho circular_shift(12, 25);\necho \"\\n\";\necho circular_shift(12,\
    \ 26);\necho \"\\n\";\necho circular_shift(12,", "    $x = strval($x);\n    $shift\
    \ = $shift % strlen($x);\n    return substr($x, -$shift) . substr($x, 0, -$shift);\n\
    }\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n1\n\
    >>> num_digits(-12345)\n5\n*/", "    $x = (string)$x;\n    $shift = (int)$shift;\n\
    \    if ($shift > strlen($x)) {\n        return strrev($x);\n    }\n    $first\
    \ = substr($x, 0, $shift);\n    $second = substr($x, $shift);\n    return $second\
    \ . $first;\n}\n\n/*\n * Test code\n */\necho circular_shift(12, 1) . \"\\n\"\
    ;\necho circular_shift(12, 2) . \"\\n\";\necho circular_shift(12, 3) . \"\\n\"\
    ;\necho circular_shift(12, 4) . \"\\n\";\necho circular_shift(12, 5) . \"\\n\"\
    ;\necho circular_shift(12, 6) . \"\\n\";\necho circular_shift(12, 7) . \"\\n\"\
    ;\necho circular_shift(12, 8) . \"\\n\";\necho circular_shift(12, 9) . \"\\n\"\
    ;\necho circular_shift(12, 10) . \"\\n\";\necho circular_shift(12, 11) . \"\\\
    n\";\necho circular_shift(12, 12) . \"\\n\";\necho circular_shift(12, 13) . \"\
    \\n\";\necho circular_shift(12, 14) . \"\\n\";\necho circular_shift(12, 15) .\
    \ \"\\n\";\necho circular_shift(12, 16) . \"\\n\";\necho circular_shift(12, 17)\
    \ . \"\\n\";\necho circular_shift(12, 18) . \"\\n\";\necho circular_shift(12,\
    \ 19) . \"\\n\";\necho circular_shift(12, 20) . \"\\n\";\necho circular_shift(12,\
    \ 21) . \"\\n\";\necho circular_shift(12, 22) . \"\\n\";\necho circular_shift(12,\
    \ 23) . \"\\n\";\necho circular_shift(12, 24) . \"\\n\";\necho circular_shift(12,\
    \ 25) . \"\\n\";\necho circular_shift(12, 26) . \"\\n\";\necho circular_shift(12,\
    \ 27) . \"\\n\";\necho circular_shift(12, 28) . \"\\n\";\necho circular_shift(12,\
    \ 29) . \"\\n\";\necho circular_shift(12, 30) . \"\\n\";\n", "    $x = (string)$x;\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $shift = $len - $shift;\n    return substr($x, $shift) . substr($x,\
    \ 0, $shift);\n}\n\n/*\n * Test code\n */\nassert_options(ASSERT_BAIL, 1);\n\n\
    $test = array(\n    array(12, 1, \"21\"),\n    array(12, 2, \"12\"),\n    array(12,\
    \ 3, \"21\"),\n    array(12, 4, \"12\"),\n    array(12, 5, \"21\"),\n    array(12,\
    \ 6, \"12\"),\n    array(12, 7, \"21\"),\n    array(12, 8, \"12\"),\n    array(12,\
    \ 9, \"21\"),\n    array(12, 10, \"12\"),\n    array(12, 11, \"21\"),\n    array(12,\
    \ 12, \"12\"),\n    array(12, 13, \"21\"),\n    array(12, 14, \"12\"),\n    array(12,\
    \ 15, \"21\"),\n    array(12, 16, \"12\"),\n    array(12, 17, \"21\"),\n    array(12,\
    \ 18, \"12\"),\n    array(12, 19, \"21\"),\n    array(12, 20, \"12\"),\n    array(12,\
    \ 21, \"21\"),\n    array(12, 22, \"12\"),\n    array(12, 23, \"21\"),\n    array(12,\
    \ 24, \"12\"),\n    array(12, 25, \"21\"),\n    array(12, 26, \"12\"),\n    array(12,\
    \ 27, \"21\"),\n    array(12, 28, \"12\"),\n    array(12, 29, \"21\"),\n    array(12,\
    \ 30, \"12\"),\n    array(12, 31, \"21\"),\n    array(12, 32, \"12\"),\n    array(12,\
    \ 33, \"21\"),\n    array(12, 34, \"12\"),\n    array(12, 35, \"21\"),\n    array(12,\
    \ 36, \"12\"),\n    array(12, 37, \"21\"),\n", "    $x = (string)$x;\n    $shift\
    \ = (int)$shift;\n    if ($shift > strlen($x)) {\n        return strrev($x);\n\
    \    }\n    $result = substr($x, $shift) . substr($x, 0, $shift);\n    return\
    \ $result;\n}\n\n/*\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12,\
    \ 2)\n\"12\"\n*/\n\necho circular_shift(12, 1) . PHP_EOL;\necho circular_shift(12,\
    \ 2) . PHP_EOL;", "\t$x = (string)$x;\n\t$shift = (int)$shift;\n\t$len = strlen($x);\n\
    \tif ($shift > $len) {\n\t\treturn strrev($x);\n\t}\n\t$first = substr($x, 0,\
    \ $shift);\n\t$second = substr($x, $shift);\n\treturn $second.$first;\n}\n\n/*\
    \ Return the number of digits in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n\
    5*/", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n\
    \        return strrev($x);\n    }\n    $shift = $len - $shift;\n    $y = substr($x,\
    \ $shift) . substr($x, 0, $shift);\n    return $y;\n}\n\n/*\n>>> circular_shift(12,\
    \ 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/", "    $x = (string)$x;\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $first = substr($x, 0, $len - $shift);\n    $second = substr($x, $len\
    \ - $shift);\n    return $second . $first;\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12,\
    \ 1) == \"21\");\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12,\
    \ 3) == \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12, 26) == \"12\");\nassert", "    $x\
    \ = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n        return\
    \ strrev($x);\n    }\n    $y = substr($x, $shift, $len - $shift);\n    $z = substr($x,\
    \ 0, $shift);\n    return $y . $z;\n}\n\n/* Return the sum of the digits of the\
    \ integer x.\n>>> digit_sum(1234)\n10\n*/", "    $x = (string)$x;\n    $len =\
    \ strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n    }\n \
    \   $right = substr($x, 0, $len - $shift);\n    $left = substr($x, $len - $shift);\n\
    \    return $left . $right;\n}\n\n/* Return the number of digits in the integer\
    \ x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n\
    \    $len = strlen($x);\n    $shift = $shift % $len;\n    if ($shift == 0) {\n\
    \        return $x;\n    }\n    $x = substr($x, $shift) . substr($x, 0, $shift);\n\
    \    return $x;\n}\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n\
    1\n>>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n    $shift = (int)$shift;\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $left = substr($x, 0, $shift);\n    $right = substr($x, $shift);\n\
    \    return $right . $left;\n}\n\n/*\nGiven a string, return a new string with\
    \ the reversed\norder of characters\n>>> reverse('apple')\n'leppa'\n>>> reverse('hello')\n\
    'olleh'\n>>> reverse('Greetings!')\n'!sgniteerG'\n*/", "    $x = (string)$x;\n\
    \    $shift = (int)$shift;\n    $len = strlen($x);\n    if ($shift > $len) {\n\
    \        return strrev($x);\n    }\n    $right = substr($x, 0, $len - $shift);\n\
    \    $left = substr($x, $len - $shift);\n    return $left . $right;\n}\n\n/*\n\
    \ * Test code\n */\nassert(circular_shift(12, 1) == \"21\");\nassert(circular_shift(12,\
    \ 2) == \"12\");\nassert(circular_shift(12, 3) == \"21\");\nassert(circular_shift(12,\
    \ 4) == \"12\");\nassert(circular_shift(12, 5) == \"21\");\nassert(circular_shift(12,\
    \ 6) == \"12\");\nassert(circular_shift(12, 7) == \"21\");\nassert(circular_shift(12,\
    \ 8) == \"12\");\nassert(circular_shift(12, 9) == \"21\");\nassert(circular_shift(12,\
    \ 10) == \"12\");\nassert(circular_shift(12, 11) == \"21\");\nassert(circular_shift(12,\
    \ 12) == \"12\");\nassert(circular_shift(12, 13) == \"21\");\nassert(circular_shift(12,\
    \ 14) == \"12\");\nassert(circular_shift(12, 15) == \"21\");\nassert(circular_shift(12,\
    \ 16) == \"12\");\nassert(circular_shift(12, 17) == \"21\");\nassert(circular_shift(12,\
    \ 18) == \"12\");\nassert(circular_shift(12, 19) == \"21\");\nassert(circular_shift(12,\
    \ 20) == \"12\");\nassert(circular_shift(12, 21) == \"21\");\nassert(circular_shift(12,\
    \ 22) == \"12\");\nassert(circular_shift(12, 23) == \"21\");\nassert(circular_shift(12,\
    \ 24) == \"12\");\nassert(circular_shift(12, 25) == \"21\");\nassert(circular_shift",
  "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n      \
    \  return strrev($x);\n    }\n    $left = substr($x, 0, $len - $shift);\n    $right\
    \ = substr($x, $len - $shift);\n    return $right . $left;\n}\n\n/* Return the\
    \ number of digits in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n\
    5\n*/", "    $x = (string)$x;\n    $len = strlen($x);\n    $shift = $shift % $len;\n\
    \    $x = substr($x, $shift) . substr($x, 0, $shift);\n    return $x;\n}\n\n/*\
    \ Return the number of digits in the integer x.\n>>> num_digits(123)\n3\n>>> num_digits(0)\n\
    1\n>>> num_digits(-123)\n3\n*/", "    $x = (string)$x;\n    $shift = (int)$shift;\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $shift = $len - $shift;\n    $x = substr($x, $shift) . substr($x,\
    \ 0, $shift);\n    return $x;\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12,\
    \ 1) == \"21\");\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12,\
    \ 3) == \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12", "\t$x = (string)$x;\n\t$len = strlen($x);\n\
    \tif ($shift > $len) {\n\t\treturn strrev($x);\n\t}\n\treturn substr($x, $shift)\
    \ . substr($x, 0, $shift);\n}\n\n/* Return the number of digits in the integer\
    \ x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n5*/", "\t$x = (string)$x;\n\
    \t$x_len = strlen($x);\n\tif ($shift > $x_len) {\n\t\treturn strrev($x);\n\t}\n\
    \t$shift_str = substr($x, $x_len - $shift);\n\t$x = substr($x, 0, $x_len - $shift);\n\
    \treturn $shift_str . $x;\n}\n\n/* Return the number of digits in the integer\
    \ x.\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n>>> num_digits(-123)\n3\n\
    */", "\t$x = (string)$x;\n\t$len = strlen($x);\n\tif ($shift > $len) {\n\t\treturn\
    \ strrev($x);\n\t}\n\treturn substr($x, $shift, $len - $shift) . substr($x, 0,\
    \ $shift);\n}\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n\
    1\n>>> num_digits(-12345)\n5\n*/", "    $x = (string)$x;\n    $shift = (int)$shift;\n\
    \    $len = strlen($x);\n    $shift = $shift % $len;\n    $x = substr($x, $shift)\
    \ . substr($x, 0, $shift);\n    return $x;\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12,\
    \ 1) == \"21\");\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12,\
    \ 3) == \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12, 26) == \"12\");\nassert(circular_shift(12,\
    \ 27) == \"", "    $x = strval($x);\n    $len = strlen($x);\n    if ($shift >\
    \ $len) {\n        return strrev($x);\n    }\n    $left = substr($x, 0, $len -\
    \ $shift);\n    $right = substr($x, $len - $shift);\n    return $right . $left;\n\
    }\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n1\n\
    >>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n    $shift = (int)$shift;\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $y = substr($x, $shift);\n    $z = substr($x, 0, $shift);\n    return\
    \ $y.$z;\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12, 1) == \"21\");\n\
    assert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12, 3) == \"21\"\
    );\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12, 5) ==\
    \ \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12, 26) == \"", "    $x = (string)$x;\n\
    \    $shift = (int)$shift;\n    $len = strlen($x);\n    if ($shift > $len) {\n\
    \        return strrev($x);\n    }\n    $shift = $len - $shift;\n    return substr($x,\
    \ $shift) . substr($x, 0, $shift);\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12,\
    \ 1) == \"21\");\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12,\
    \ 3) == \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12, 26) == \"12\");\n", "    $x = (string)$x;\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $left = substr($x, 0, $len - $shift);\n    $right = substr($x, $len\
    \ - $shift);\n    return $right . $left;\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12,\
    \ 1) == \"21\");\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12,\
    \ 3) == \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12, 26) == \"12\");\nassert", "\t$x =\
    \ strval($x);\n\t$len = strlen($x);\n\tif ($shift > $len) {\n\t\treturn strrev($x);\n\
    \t}\n\treturn substr($x, $shift, $len - $shift) . substr($x, 0, $shift);\n}\n\n\
    /* Return the number of digits in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n\
    5*/", "    $x = (string)$x;\n    $shift = (int)$shift;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $left = substr($x,\
    \ 0, $shift);\n    $right = substr($x, $shift);\n    return $right . $left;\n\
    }\n\n/* Return the number of digits in the integer x.\n>>> num_digits(123)\n3\n\
    >>> num_digits(0)\n1\n>>> num_digits(-123)\n3\n*/", "\t$x = (string)$x;\n\t$shift\
    \ = (int)$shift;\n\tif ($shift > strlen($x)) {\n\t\treturn strrev($x);\n\t}\n\t\
    $x = strrev($x);\n\t$x = substr($x, 0, $shift) . substr($x, $shift);\n\treturn\
    \ strrev($x);\n}\n\n/* Return the number of digits in the integer x.\n>>> num_digits(123)\n\
    3\n>>> num_digits(0)\n1\n>>> num_digits(-123)\n3*/", "    $x = (string)$x;\n \
    \   $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $shift = $len - $shift;\n    return substr($x, $shift) . substr($x,\
    \ 0, $shift);\n}\n\n/*\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12,\
    \ 2)\n\"12\"\n*/\n\necho circular_shift(12, 1) . PHP_EOL;\necho circular_shift(12,\
    \ 2) . PHP_EOL;", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift\
    \ > $len) {\n        return strrev($x);\n    }\n    $right = substr($x, 0, $len\
    \ - $shift);\n    $left = substr($x, $len - $shift);\n    return $left . $right;\n\
    }\n\n/*\n * Test code\n */\nassert(circular_shift(12, 1) == \"21\");\nassert(circular_shift(12,\
    \ 2) == \"12\");\nassert(circular_shift(12, 3) == \"21\");\nassert(circular_shift(12,\
    \ 4) == \"12\");\nassert(circular_shift(12, 5) == \"21\");\nassert(circular_shift(12,\
    \ 6) == \"12\");\nassert(circular_shift(12, 7) == \"21\");\nassert(circular_shift(12,\
    \ 8) == \"12\");\nassert(circular_shift(12, 9) == \"21\");\nassert(circular_shift(12,\
    \ 10) == \"12\");\nassert(circular_shift(12, 11) == \"21\");\nassert(circular_shift(12,\
    \ 12) == \"12\");\nassert(circular_shift(12, 13) == \"21\");\nassert(circular_shift(12,\
    \ 14) == \"12\");\nassert(circular_shift(12, 15) == \"21\");\nassert(circular_shift(12,\
    \ 16) == \"12\");\nassert(circular_shift(12, 17) == \"21\");\nassert(circular_shift(12,\
    \ 18) == \"12\");\nassert(circular_shift(12, 19) == \"21\");\nassert(circular_shift(12,\
    \ 20) == \"12\");\nassert(circular_shift(12, 21) == \"21\");\nassert(circular_shift(12,\
    \ 22) == \"12\");\nassert(circular_shift(12, 23) == \"21\");\nassert(circular_shift(12,\
    \ 24) == \"12\");\nassert(circular_shift(12, 25) == \"21\");\nassert(circular_shift(12,\
    \ 26) == \"12\");\nassert", "    $digits = str_split($x);\n    $digits_count =\
    \ count($digits);\n    if ($shift > $digits_count) {\n        return implode('',\
    \ array_reverse($digits));\n    }\n    $digits = array_merge(array_slice($digits,\
    \ $shift), array_slice($digits, 0, $shift));\n    return implode('', $digits);\n\
    }\n\n/*\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n\
    */\necho circular_shift(12, 1) . \"\\n\";\necho circular_shift(12, 2) . \"\\n\"\
    ;\necho circular_shift(12, 3) . \"\\n\";\necho circular_shift(12, 4) . \"\\n\"\
    ;\necho circular_shift(12, 5) . \"\\n\";\necho circular_shift(12, 6) . \"\\n\"\
    ;\necho circular_shift(12, 7) . \"\\n\";\necho circular_shift(12, 8) . \"\\n\"\
    ;\necho circular_shift(12, 9) . \"\\n\";\necho circular_shift(12, 10) . \"\\n\"\
    ;\necho circular_shift(12, 11) . \"\\n\";\necho circular_shift(12, 12) . \"\\\
    n\";\necho circular_shift(12, 13) . \"\\n\";\necho circular_shift(12, 14) . \"\
    \\n\";\necho circular_shift(12, 15) . \"\\n\";\necho circular_shift(12, 16) .\
    \ \"\\n\";\necho circular_shift(12, 17) . \"\\n\";\necho circular_shift(12, 18)\
    \ . \"\\n\";\necho circular_shift(12, 19) . \"\\n\";\necho circular_shift(12,\
    \ 20) . \"\\n\";\necho circular_shift(12, 21) . \"\\n\";\necho circular_shift(12,\
    \ 22) . \"\\n\";\necho circular_shift(12, 23) . \"\\n\";\necho circular_shift(12,\
    \ 24) . \"\\n\";\necho circular_shift(12, 25) . \"\\n\";\necho circular_shift(12,\
    \ 26) . \"\\n\";\necho circular_shift(12, 27) . \"\\n\";", "    $str = strval($x);\n\
    \    $len = strlen($str);\n    if ($shift > $len) {\n        return strrev($str);\n\
    \    }\n    $str = substr($str, $shift) . substr($str, 0, $shift);\n    return\
    \ $str;\n}\n\n/*\n>>> circular_shift(123, 1)\n\"312\"\n>>> circular_shift(123,\
    \ 2)\n\"231\"\n>>> circular_shift(123, 3)\n\"123\"\n>>> circular_shift(123, 4)\n\
    \"321\"\n>>> circular_shift(123, 5)\n\"231\"\n*/\n\n/*\n>>> circular_shift(12345,\
    \ 1)\n\"51234\"\n>>> circular_shift(12345, 2)\n\"32145\"\n>>> circular_shift(12345,\
    \ 3)\n\"23451\"\n>>> circular_shift(12345, 4)\n\"12345\"\n>>> circular_shift(12345,\
    \ 5)\n\"51234\"\n*/\n\n/*\n>>> circular_shift(123456, 1)\n\"612354\"\n>>> circular_shift(123456,\
    \ 2)\n\"321654\"\n>>> circular_shift(123456, 3)\n\"231564\"\n>>> circular_shift(123456,\
    \ 4)\n\"123456\"\n>>> circular_shift(123456, 5)\n\"612354\"\n*/\n\n/*\n>>> circular_shift(1234567,\
    \ 1)\n\"7123546\"\n>>> circular_shift(1234567, 2)\n\"3217456\"\n>>> circular_shift(1234567,\
    \ 3)\n\"2316457\"\n>>> circular_shift(1234567, 4)\n\"1234567\"\n>>> circular_shift(1234567,\
    \ 5)\n\"7123546\"\n*/\n\n/*\n>>> circular_shift(12345678, 1)\n\"81235467\"\n>>>\
    \ circular_shift(12345678, 2)\n\"32184567\"\n>>> circular_shift(12345678, 3)\n\
    \"23174568\"\n>>> circular_shift(12345678, 4)\n\"12345678\"\n>>> circular_shift(12345678,\
    \ 5)\n\"81235467\"\n*/", "    $x = (string)$x;\n    $len = strlen($x);\n    if\
    \ ($shift > $len) {\n        return strrev($x);\n    }\n    $shift = $len - $shift;\n\
    \    return substr($x, $shift) . substr($x, 0, $shift);\n}\n\n/* Return the number\
    \ of digits in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n\
    5*/", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift >= $len) {\n\
    \        return strrev($x);\n    }\n    $left = substr($x, 0, $shift);\n    $right\
    \ = substr($x, $shift);\n    return $right . $left;\n}\n\n/* Return the number\
    \ of digits in the integer x.\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n\
    >>> num_digits(-123)\n3\n*/", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $x = substr($x,\
    \ $shift) . substr($x, 0, $shift);\n    return $x;\n}\n\n/* Return the number\
    \ of digits in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n\
    5*/", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n\
    \        return strrev($x);\n    }\n    $right = substr($x, 0, $len - $shift);\n\
    \    $left = substr($x, $len - $shift);\n    return $left . $right;\n}\n\n/*\n\
    \ * Test code\n */\nassert(circular_shift(12, 1) == \"21\");\nassert(circular_shift(12,\
    \ 2) == \"12\");\nassert(circular_shift(12, 3) == \"21\");\nassert(circular_shift(12,\
    \ 4) == \"12\");\nassert(circular_shift(12, 5) == \"21\");\nassert(circular_shift(12,\
    \ 6) == \"12\");\nassert(circular_shift(12, 7) == \"21\");\nassert(circular_shift(12,\
    \ 8) == \"12\");\nassert(circular_shift(12, 9) == \"21\");\nassert(circular_shift(12,\
    \ 10) == \"12\");\nassert(circular_shift(12, 11) == \"21\");\nassert(circular_shift(12,\
    \ 12) == \"12\");\nassert(circular_shift(12, 13) == \"21\");\nassert(circular_shift(12,\
    \ 14) == \"12\");\nassert(circular_shift(12, 15) == \"21\");\nassert(circular_shift(12,\
    \ 16) == \"12\");\nassert(circular_shift(12, 17) == \"21\");\nassert(circular_shift(12,\
    \ 18) == \"12\");\nassert(circular_shift(12, 19) == \"21\");\nassert(circular_shift(12,\
    \ 20) == \"12\");\nassert(circular_shift(12, 21) == \"21\");\nassert(circular_shift(12,\
    \ 22) == \"12\");\nassert(circular_shift(12, 23) == \"21\");\nassert(circular_shift(12,\
    \ 24) == \"12\");\nassert(circular_shift(12, 25) == \"21\");\nassert(circular_shift(12,\
    \ 26) == \"12\");\nassert", "    $x = (string)$x;\n    $len = strlen($x);\n  \
    \  if ($shift > $len) {\n        return strrev($x);\n    }\n    $left = substr($x,\
    \ 0, $len - $shift);\n    $right = substr($x, $len - $shift);\n    return $right\
    \ . $left;\n}\n\n/*\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12,\
    \ 2)\n\"12\"\n*/\necho circular_shift(12, 1) . \"\\n\";\necho circular_shift(12,\
    \ 2) . \"\\n\";\necho circular_shift(12, 3) . \"\\n\";\necho circular_shift(12,\
    \ 4) . \"\\n\";\necho circular_shift(12, 5) . \"\\n\";\necho circular_shift(12,\
    \ 6) . \"\\n\";\necho circular_shift(12, 7) . \"\\n\";\necho circular_shift(12,\
    \ 8) . \"\\n\";\necho circular_shift(12, 9) . \"\\n\";\necho circular_shift(12,\
    \ 10) . \"\\n\";\necho circular_shift(12, 11) . \"\\n\";\necho circular_shift(12,\
    \ 12) . \"\\n\";\necho circular_shift(12, 13) . \"\\n\";\necho circular_shift(12,\
    \ 14) . \"\\n\";\necho circular_shift(12, 15) . \"\\n\";\necho circular_shift(12,\
    \ 16) . \"\\n\";\necho circular_shift(12, 17) . \"\\n\";\necho circular_shift(12,\
    \ 18) . \"\\n\";\necho circular_shift(12, 19) . \"\\n\";\necho circular_shift(12,\
    \ 20) . \"\\n\";\necho circular_shift(12, 21) . \"\\n\";\necho circular_shift(12,\
    \ 22) . \"\\n\";\necho circular_shift(12, 23) . \"\\n\";\necho circular_shift(12,\
    \ 24) . \"\\n\";\necho circular_shift(12, 25) . \"\\n\";\necho circular_shift(12,\
    \ 26) . \"\\n\";\necho circular_shift(12, 27) . \"\\n\";\necho circular_shift(12,\
    \ 28) . \"\\n\";\necho", "    $x = (string)$x;\n    $len = strlen($x);\n    if\
    \ ($shift > $len) {\n        return strrev($x);\n    }\n    $shift = $len - $shift;\n\
    \    $x = substr($x, $shift) . substr($x, 0, $shift);\n    return $x;\n}\n\n/*\n\
    \ * Test code\n */\nassert(circular_shift(12, 1) == \"21\");\nassert(circular_shift(12,\
    \ 2) == \"12\");\nassert(circular_shift(12, 3) == \"21\");\nassert(circular_shift(12,\
    \ 4) == \"12\");\nassert(circular_shift(12, 5) == \"21\");\nassert(circular_shift(12,\
    \ 6) == \"12\");\nassert(circular_shift(12, 7) == \"21\");\nassert(circular_shift(12,\
    \ 8) == \"12\");\nassert(circular_shift(12, 9) == \"21\");\nassert(circular_shift(12,\
    \ 10) == \"12\");\nassert(circular_shift(12, 11) == \"21\");\nassert(circular_shift(12,\
    \ 12) == \"12\");\nassert(circular_shift(12, 13) == \"21\");\nassert(circular_shift(12,\
    \ 14) == \"12\");\nassert(circular_shift(12, 15) == \"21\");\nassert(circular_shift(12,\
    \ 16) == \"12\");\nassert(circular_shift(12, 17) == \"21\");\nassert(circular_shift(12,\
    \ 18) == \"12\");\nassert(circular_shift(12, 19) == \"21\");\nassert(circular_shift(12,\
    \ 20) == \"12\");\nassert(circular_shift(12, 21) == \"21\");\nassert(circular_shift(12,\
    \ 22) == \"12\");\nassert(circular_shift(12, 23) == \"21\");\nassert(circular_shift(12,\
    \ 24) == \"12\");\nassert(circular_shift(12, 25) == \"21\");\nassert(circular_shift(12,\
    \ 26) == \"12\");\nassert(circ", "    $x_str = strval($x);\n    $x_len = strlen($x_str);\n\
    \    if ($shift > $x_len) {\n        return strrev($x_str);\n    }\n    $x_str_arr\
    \ = str_split($x_str);\n    $x_str_arr_shifted = array_merge(array_slice($x_str_arr,\
    \ $shift), array_slice($x_str_arr, 0, $shift));\n    return implode('', $x_str_arr_shifted);\n\
    }\n\n/* Return the number of digits in the integer x.\n>>> num_digits(123)\n3\n\
    >>> num_digits(0)\n1\n>>> num_digits(-123)\n3\n*/", "    $x = (string)$x;\n  \
    \  $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $left = substr($x, 0, $len - $shift);\n    $right = substr($x, $len\
    \ - $shift);\n    return $right . $left;\n}\n\n/* Return the number of digits\
    \ in the integer x.\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n>>> num_digits(-123)\n\
    3\n*/", "    $x = (string)$x;\n    $shift = (int)$shift;\n    $length = strlen($x);\n\
    \    if ($shift >= $length) {\n        return strrev($x);\n    }\n    $first =\
    \ substr($x, 0, $shift);\n    $second = substr($x, $shift);\n    return $second\
    \ . $first;\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12, 1) == \"21\"\
    );\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12, 3) ==\
    \ \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12, 26) ==", "    $x = (string)$x;\n\
    \    $shift = (int)$shift;\n    $len = strlen($x);\n    if ($shift > $len) {\n\
    \        return strrev($x);\n    }\n    return substr($x, $shift) . substr($x,\
    \ 0, $shift);\n}\n\n/*\n>>> is_palindrome(12)\nFalse\n>>> is_palindrome(121)\n\
    True\n*/", "\t$x = (string)$x;\n\t$len = strlen($x);\n\tif ($shift > $len) {\n\
    \t\treturn strrev($x);\n\t}\n\t$y = substr($x, $shift);\n\t$y .= substr($x, 0,\
    \ $shift);\n\treturn $y;\n}\n\n/* Return the number of digits in the integer x.\n\
    >>> num_digits(0)\n1\n>>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n  \
    \  $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $shift = $len - $shift;\n    $x = substr($x, $shift) . substr($x,\
    \ 0, $shift);\n    return $x;\n}\n\n/*\n * Write a function that takes a string\
    \ and returns a new string with the\n * reversed order of characters.\n * >>>\
    \ reverse_string('apple')\n * 'elppa'\n * >>> reverse_string('hello')\n * 'olleh'\n\
    \ * >>> reverse_string('Greetings!')\n * '!sgniteerG'\n */", "    $x = (string)$x;\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $right = substr($x, $len - $shift);\n    $left = substr($x, 0, $len\
    \ - $shift);\n    return $right . $left;\n}\n\n/*\n>>> circular_shift(12, 1)\n\
    \"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\necho circular_shift(12, 1) . \"\
    \\n\";\necho circular_shift(12, 2) . \"\\n\";\necho circular_shift(12, 3) . \"\
    \\n\";\necho circular_shift(12, 4) . \"\\n\";\necho circular_shift(12, 5) . \"\
    \\n\";\necho circular_shift(12, 6) . \"\\n\";\necho circular_shift(12, 7) . \"\
    \\n\";\necho circular_shift(12, 8) . \"\\n\";\necho circular_shift(12, 9) . \"\
    \\n\";\necho circular_shift(12, 10) . \"\\n\";\necho circular_shift(12, 11) .\
    \ \"\\n\";\necho circular_shift(12, 12) . \"\\n\";\necho circular_shift(12, 13)\
    \ . \"\\n\";\necho circular_shift(12, 14) . \"\\n\";\necho circular_shift(12,\
    \ 15) . \"\\n\";\necho circular_shift(12, 16) . \"\\n\";\necho circular_shift(12,\
    \ 17) . \"\\n\";\necho circular_shift(12, 18) . \"\\n\";\necho circular_shift(12,\
    \ 19) . \"\\n\";\necho circular_shift(12, 20) . \"\\n\";\necho circular_shift(12,\
    \ 21) . \"\\n\";\necho circular_shift(12, 22) . \"\\n\";\necho circular_shift(12,\
    \ 23) . \"\\n\";\necho circular_shift(12, 24) . \"\\n\";\necho circular_shift(12,\
    \ 25) . \"\\n\";\necho circular_shift(12, 26) . \"\\n\";\necho circular_shift(12,\
    \ 27) . \"\\n\";\necho circular_shift(12, 28) . \"\\n\";\necho", "    $x = (string)$x;\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $right = substr($x, 0, $len - $shift);\n    $left = substr($x, $len\
    \ - $shift);\n    return $left . $right;\n}\n\n/*\n>>> circular_shift(12, 1)\n\
    \"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\necho circular_shift(12, 1) . \"\
    \\n\";\necho circular_shift(12, 2) . \"\\n\";\necho circular_shift(12, 3) . \"\
    \\n\";\necho circular_shift(12, 4) . \"\\n\";\necho circular_shift(12, 5) . \"\
    \\n\";\necho circular_shift(12, 6) . \"\\n\";\necho circular_shift(12, 7) . \"\
    \\n\";\necho circular_shift(12, 8) . \"\\n\";\necho circular_shift(12, 9) . \"\
    \\n\";\necho circular_shift(12, 10) . \"\\n\";\necho circular_shift(12, 11) .\
    \ \"\\n\";\necho circular_shift(12, 12) . \"\\n\";\necho circular_shift(12, 13)\
    \ . \"\\n\";\necho circular_shift(12, 14) . \"\\n\";\necho circular_shift(12,\
    \ 15) . \"\\n\";\necho circular_shift(12, 16) . \"\\n\";\necho circular_shift(12,\
    \ 17) . \"\\n\";\necho circular_shift(12, 18) . \"\\n\";\necho circular_shift(12,\
    \ 19) . \"\\n\";\necho circular_shift(12, 20) . \"\\n\";\necho circular_shift(12,\
    \ 21) . \"\\n\";\necho circular_shift(12, 22) . \"\\n\";\necho circular_shift(12,\
    \ 23) . \"\\n\";\necho circular_shift(12, 24) . \"\\n\";\necho circular_shift(12,\
    \ 25) . \"\\n\";\necho circular_shift(12, 26) . \"\\n\";\necho circular_shift(12,\
    \ 27) . \"\\n\";\necho circular_shift(12, 28) . \"\\n\";\necho", "    $x = (string)$x;\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $y = substr($x, $shift, $len);\n    $y .= substr($x, 0, $shift);\n\
    \    return $y;\n}\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n\
    1\n>>> num_digits(-12345)\n5*/", "    $digits = str_split($x);\n    $shift = $shift\
    \ % count($digits);\n    $digits = array_reverse($digits);\n    $digits = array_merge(array_slice($digits,\
    \ $shift), array_slice($digits, 0, $shift));\n    $digits = array_reverse($digits);\n\
    \    return implode('', $digits);\n}\n\n/*\n>>> is_circular_prime(2)\nTrue\n>>>\
    \ is_circular_prime(197)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\n\
    True\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>>\
    \ is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\n\
    True\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>>\
    \ is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\n\
    True\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>>\
    \ is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\n\
    True\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>>\
    \ is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\n\
    True\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>>\
    \ is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\n\
    True\n>>> is_circular_prime", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    $shift = $shift % $len;\n    $shift = $shift < 0 ? $len + $shift : $shift;\n\
    \    return substr($x, $shift) . substr($x, 0, $shift);\n}\n\n/* Return the number\
    \ of digits in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n\
    5*/", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n\
    \        return strrev($x);\n    }\n    $shift = $len - $shift;\n    $a = substr($x,\
    \ 0, $shift);\n    $b = substr($x, $shift);\n    return $b . $a;\n}\n\n/*\n *\
    \ Test code\n */\nassert(circular_shift(12, 1) == \"21\");\nassert(circular_shift(12,\
    \ 2) == \"12\");\nassert(circular_shift(12, 3) == \"21\");\nassert(circular_shift(12,\
    \ 4) == \"12\");\nassert(circular_shift(12, 5) == \"21\");\nassert(circular_shift(12,\
    \ 6) == \"12\");\nassert(circular_shift(12, 7) == \"21\");\nassert(circular_shift(12,\
    \ 8) == \"12\");\nassert(circular_shift(12, 9) == \"21\");\nassert(circular_shift(12,\
    \ 10) == \"12\");\nassert(circular_shift(12, 11) == \"21\");\nassert(circular_shift(12,\
    \ 12) == \"12\");\nassert(circular_shift(12, 13) == \"21\");\nassert(circular_shift(12,\
    \ 14) == \"12\");\nassert(circular_shift(12, 15) == \"21\");\nassert(circular_shift(12,\
    \ 16) == \"12\");\nassert(circular_shift(12, 17) == \"21\");\nassert(circular_shift(12,\
    \ 18) == \"12\");\nassert(circular_shift(12, 19) == \"21\");\nassert(circular_shift(12,\
    \ 20) == \"12\");\nassert(circular_shift(12, 21) == \"21\");\nassert(circular_shift(12,\
    \ 22) == \"12\");\nassert(circular_shift(12, 23) == \"21\");\nassert(circular_shift(12,\
    \ 24) == \"12\");\nassert(circular_shift(12, 25) == \"21\");\nassert(circular_shift(12,\
    \ 26) ==", "    $x = (string)$x;\n    $len = strlen($x);\n    $shift = $shift\
    \ % $len;\n    if ($shift == 0) {\n        return $x;\n    }\n    $x = substr($x,\
    \ $shift) . substr($x, 0, $shift);\n    return $x;\n}\n\n/*\n * Test code\n */\n\
    assert_options(ASSERT_BAIL, 1);\n\n$tests = array(\n    array(12, 1, \"21\"),\n\
    \    array(12, 2, \"12\"),\n    array(12, 3, \"21\"),\n    array(12, 4, \"12\"\
    ),\n    array(12, 5, \"21\"),\n    array(12, 6, \"12\"),\n    array(12, 7, \"\
    21\"),\n    array(12, 8, \"12\"),\n    array(12, 9, \"21\"),\n    array(12, 10,\
    \ \"12\"),\n    array(12, 11, \"21\"),\n    array(12, 12, \"12\"),\n    array(12,\
    \ 13, \"21\"),\n    array(12, 14, \"12\"),\n    array(12, 15, \"21\"),\n    array(12,\
    \ 16, \"12\"),\n    array(12, 17, \"21\"),\n    array(12, 18, \"12\"),\n    array(12,\
    \ 19, \"21\"),\n    array(12, 20, \"12\"),\n    array(12, 21, \"21\"),\n    array(12,\
    \ 22, \"12\"),\n    array(12, 23, \"21\"),\n    array(12, 24, \"12\"),\n    array(12,\
    \ 25, \"21\"),\n    array(12, 26, \"12\"),\n    array(12, 27, \"21\"),\n    array(12,\
    \ 28, \"12\"),\n    array(12, 29, \"21\"),\n    array(12, 30, \"12\"),\n    array(12,\
    \ 31, \"21\"),\n    array(12, 32, \"12\"),\n    array(12, 33, \"21\"),\n    array(12,\
    \ 34, \"12\"),\n    array(12, 35, \"21\"),\n    array(12, 36, \"12\"),\n    array(12,\
    \ 37", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n\
    \        return strrev($x);\n    }\n    $first = substr($x, 0, $len - $shift);\n\
    \    $second = substr($x, $len - $shift);\n    return $second . $first;\n}\n\n\
    /*\n * Test code\n */\nassert(circular_shift(12, 1) == \"21\");\nassert(circular_shift(12,\
    \ 2) == \"12\");\nassert(circular_shift(12, 3) == \"21\");\nassert(circular_shift(12,\
    \ 4) == \"12\");\nassert(circular_shift(12, 5) == \"21\");\nassert(circular_shift(12,\
    \ 6) == \"12\");\nassert(circular_shift(12, 7) == \"21\");\nassert(circular_shift(12,\
    \ 8) == \"12\");\nassert(circular_shift(12, 9) == \"21\");\nassert(circular_shift(12,\
    \ 10) == \"12\");\nassert(circular_shift(12, 11) == \"21\");\nassert(circular_shift(12,\
    \ 12) == \"12\");\nassert(circular_shift(12, 13) == \"21\");\nassert(circular_shift(12,\
    \ 14) == \"12\");\nassert(circular_shift(12, 15) == \"21\");\nassert(circular_shift(12,\
    \ 16) == \"12\");\nassert(circular_shift(12, 17) == \"21\");\nassert(circular_shift(12,\
    \ 18) == \"12\");\nassert(circular_shift(12, 19) == \"21\");\nassert(circular_shift(12,\
    \ 20) == \"12\");\nassert(circular_shift(12, 21) == \"21\");\nassert(circular_shift(12,\
    \ 22) == \"12\");\nassert(circular_shift(12, 23) == \"21\");\nassert(circular_shift(12,\
    \ 24) == \"12\");\nassert(circular_shift(12, 25) == \"21\");\nassert(circular_shift(12,\
    \ 26) == \"12\");\nassert", "    $x = (string)$x;\n    $shift = (int)$shift;\n\
    \    $x_length = strlen($x);\n    if ($shift > $x_length) {\n        return strrev($x);\n\
    \    }\n    $x_array = str_split($x);\n    $x_array_shifted = array_slice($x_array,\
    \ $shift);\n    $x_array_shifted = array_merge($x_array_shifted, array_slice($x_array,\
    \ 0, $shift));\n    return implode($x_array_shifted);\n}\n\n/*\n>>> is_circular_prime(2)\n\
    True\n>>> is_circular_prime(197)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>>\
    \ is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\n\
    True\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>>\
    \ is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\n\
    True\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>>\
    \ is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\n\
    True\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>>\
    \ is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\n\
    True\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>>\
    \ is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\nTrue\n>>> is_circular_prime(1193)\n\
    True\n>>> is_circular", "    $x = strval($x);\n    $len = strlen($x);\n    if\
    \ ($shift > $len) {\n        return strrev($x);\n    }\n    $left = substr($x,\
    \ 0, $len - $shift);\n    $right = substr($x, $len - $shift);\n    return $right\
    \ . $left;\n}\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n\
    1\n>>> num_digits(-12345)\n5*/", "    $x = strval($x);\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $y = substr($x,\
    \ $shift, $len - $shift);\n    $z = substr($x, 0, $shift);\n    return $y . $z;\n\
    }\n\n/* Return the sum of the digits of the integer x.\n>>> digit_sum(1234)\n\
    10\n>>> digit_sum(12)\n3\n>>> digit_sum(0)\n0\n>>> digit_sum(-123)\n6\n*/", "\t\
    $x = (string)$x;\n\t$len = strlen($x);\n\t$shift = $shift % $len;\n\tif ($shift\
    \ == 0) {\n\t\treturn $x;\n\t}\n\treturn substr($x, $shift) . substr($x, 0, $shift);\n\
    }\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n1\n\
    >>> num_digits(-12345)\n5\n*/", "\t$x = (string)$x;\n\t$len = strlen($x);\n\t\
    if ($shift > $len) {\n\t\treturn strrev($x);\n\t}\n\t$first = substr($x, 0, $shift);\n\
    \t$second = substr($x, $shift);\n\treturn $second.$first;\n}\n\n/* Return the\
    \ number of digits in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n\
    5*/", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n\
    \        return strrev($x);\n    }\n    $shift = $len - $shift;\n    return substr($x,\
    \ $shift) . substr($x, 0, $shift);\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12,\
    \ 1) == \"21\");\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12,\
    \ 3) == \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12, 26) == \"12\");\nassert(circular_shift(12,\
    \ 27)", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len)\
    \ {\n        return strrev($x);\n    }\n    $y = substr($x, $shift);\n    $y .=\
    \ substr($x, 0, $shift);\n    return $y;\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12,\
    \ 1) == \"21\");\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12,\
    \ 3) == \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12, 26) == \"12\");\nassert(circular_shift(12,",
  "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n      \
    \  return strrev($x);\n    }\n    $right = substr($x, 0, $len - $shift);\n   \
    \ $left = substr($x, $len - $shift);\n    return $left . $right;\n}\n\n/*\n>>>\
    \ circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\necho circular_shift(12,\
    \ 1) . \"\\n\";\necho circular_shift(12, 2) . \"\\n\";\necho circular_shift(12,\
    \ 3) . \"\\n\";\necho circular_shift(12, 4) . \"\\n\";\necho circular_shift(12,\
    \ 5) . \"\\n\";\necho circular_shift(12, 6) . \"\\n\";\necho circular_shift(12,\
    \ 7) . \"\\n\";\necho circular_shift(12, 8) . \"\\n\";\necho circular_shift(12,\
    \ 9) . \"\\n\";\necho circular_shift(12, 10) . \"\\n\";\necho circular_shift(12,\
    \ 11) . \"\\n\";\necho circular_shift(12, 12) . \"\\n\";\necho circular_shift(12,\
    \ 13) . \"\\n\";\necho circular_shift(12, 14) . \"\\n\";\necho circular_shift(12,\
    \ 15) . \"\\n\";\necho circular_shift(12, 16) . \"\\n\";\necho circular_shift(12,\
    \ 17) . \"\\n\";\necho circular_shift(12, 18) . \"\\n\";\necho circular_shift(12,\
    \ 19) . \"\\n\";\necho circular_shift(12, 20) . \"\\n\";\necho circular_shift(12,\
    \ 21) . \"\\n\";\necho circular_shift(12, 22) . \"\\n\";\necho circular_shift(12,\
    \ 23) . \"\\n\";\necho circular_shift(12, 24) . \"\\n\";\necho circular_shift(12,\
    \ 25) . \"\\n\";\necho circular_shift(12, 26) . \"\\n\";\necho circular_shift(12,\
    \ 27) . \"\\n\";\necho circular_shift(12, 28) . \"\\n\";\necho", "\t$x = (string)$x;\n\
    \t$len = strlen($x);\n\tif ($shift > $len) {\n\t\treturn strrev($x);\n\t}\n\t\
    $right = substr($x, $len - $shift);\n\t$left = substr($x, 0, $len - $shift);\n\
    \treturn $right . $left;\n}\n\n/*\n * Return the number of digits in the integer\
    \ x.\n * >>> num_digits(0)\n * 1\n * >>> num_digits(-12345)\n * 5\n */", "   \
    \ $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n       \
    \ return strrev($x);\n    }\n    $left = substr($x, 0, $len - $shift);\n    $right\
    \ = substr($x, $len - $shift);\n    return $right . $left;\n}\n\n/*\n * Return\
    \ the number of digits in the integer x.\n * >>> num_digits(123)\n * 3\n * >>>\
    \ num_digits(0)\n * 1\n */", "    $x = strval($x);\n    $len = strlen($x);\n \
    \   if ($shift > $len) {\n        return strrev($x);\n    }\n    $left = substr($x,\
    \ 0, $len - $shift);\n    $right = substr($x, $len - $shift);\n    return $right\
    \ . $left;\n}\n\n/*\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12,\
    \ 2)\n\"12\"\n>>> circular_shift(123, 1)\n\"312\"\n>>> circular_shift(123, 2)\n\
    \"231\"\n>>> circular_shift(123, 3)\n\"123\"\n>>> circular_shift(123, 4)\n\"321\"\
    \n>>> circular_shift(123, 5)\n\"312\"\n>>> circular_shift(123, 6)\n\"231\"\n>>>\
    \ circular_shift(123, 7)\n\"123\"\n>>> circular_shift(123, 8)\n\"321\"\n>>> circular_shift(123,\
    \ 9)\n\"312\"\n>>> circular_shift(123, 10)\n\"231\"\n>>> circular_shift(123, 11)\n\
    \"123\"\n>>> circular_shift(123, 12)\n\"321\"\n>>> circular_shift(123, 13)\n\"\
    312\"\n>>> circular_shift(123, 14)\n\"231\"\n>>> circular_shift(123, 15)\n\"123\"\
    \n>>> circular_shift(123, 16)\n\"321\"\n>>> circular_shift(123, 17)\n\"312\"\n\
    >>> circular_shift(123, 18)\n\"231\"\n>>> circular_shift(123, 19)\n\"123\"\n>>>\
    \ circular_shift(123, 20)\n\"321\"\n>>> circular_shift(123, 21)\n\"312\"\n>>>\
    \ circular_shift(123, 22)\n\"231\"\n>>> circular_shift(123, 23)\n\"123\"\n>>>\
    \ circular_shift(123, 24)\n\"321\"\n>>> circular_shift(123, 25)\n\"312\"\n>>>\
    \ circular_shift(123, 26)\n\"231\"\n>>> circular_shift(123, 27)\n\"123\"\n>>>\
    \ circular_shift(123, 28)\n\"321\"\n>>> circular_shift", "    $x = strval($x);\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $res = substr($x, $shift, $len) . substr($x, 0, $shift);\n    return\
    \ $res;\n}\n\n/*\n * Test code\n */\nassert_options(ASSERT_BAIL, 1);\n$tests =\
    \ array(\n    array(12, 1, \"21\"),\n    array(12, 2, \"12\"),\n    array(12,\
    \ 3, \"21\"),\n    array(12, 4, \"12\"),\n    array(12, 5, \"21\"),\n    array(12,\
    \ 6, \"12\"),\n    array(12, 7, \"21\"),\n    array(12, 8, \"12\"),\n    array(12,\
    \ 9, \"21\"),\n    array(12, 10, \"12\"),\n    array(12, 11, \"21\"),\n    array(12,\
    \ 12, \"12\"),\n    array(12, 13, \"21\"),\n    array(12, 14, \"12\"),\n    array(12,\
    \ 15, \"21\"),\n    array(12, 16, \"12\"),\n    array(12, 17, \"21\"),\n    array(12,\
    \ 18, \"12\"),\n    array(12, 19, \"21\"),\n    array(12, 20, \"12\"),\n    array(12,\
    \ 21, \"21\"),\n    array(12, 22, \"12\"),\n    array(12, 23, \"21\"),\n    array(12,\
    \ 24, \"12\"),\n    array(12, 25, \"21\"),\n    array(12, 26, \"12\"),\n    array(12,\
    \ 27, \"21\"),\n    array(12, 28, \"12\"),\n    array(12, 29, \"21\"),\n    array(12,\
    \ 30, \"12\"),\n    array(12, 31, \"21\"),\n    array(12, 32, \"12\"),\n    array(12,\
    \ 33, \"21\"),\n    array(12, 34, \"12\"),\n    array(12, 35, \"21\"),\n    array(12,\
    \ 36, \"12\"),\n    array(12, 37, \"21\"),\n    array", "\t$x = strval($x);\n\t\
    $len = strlen($x);\n\tif ($shift > $len) {\n\t\treturn strrev($x);\n\t}\n\t$y\
    \ = substr($x, $shift, $len - $shift);\n\t$y .= substr($x, 0, $shift);\n\treturn\
    \ $y;\n}\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n\
    1\n>>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n    $shift = $shift %\
    \ strlen($x);\n    if ($shift == 0) {\n        return $x;\n    }\n    return substr($x,\
    \ -$shift) . substr($x, 0, -$shift);\n}\n\n/* Return the number of digits in the\
    \ integer x.\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n>>> num_digits(-123)\n\
    3*/", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n\
    \        return strrev($x);\n    }\n    $first = substr($x, 0, $len - $shift);\n\
    \    $second = substr($x, $len - $shift);\n    return $second . $first;\n}\n\n\
    /* Return the sum of the digits of the integer x.\n>>> sum_digits(10) # 1 + 0\
    \ = 1\n1\n>>> sum_digits(4224) # 4 + 2 + 2 + 4 = 12\n12\n>>> sum_digits(1234567890)\n\
    45\n*/", "    $x = (string)$x;\n    $shift = (int)$shift;\n    if ($shift > strlen($x))\
    \ {\n        return strrev($x);\n    }\n    $y = substr($x, $shift);\n    $z =\
    \ substr($x, 0, $shift);\n    return $y.$z;\n}\n\n/*\n>>> is_palindrome(121)\n\
    True\n>>> is_palindrome(123)\nFalse\n*/", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $left = substr($x,\
    \ 0, $len - $shift);\n    $right = substr($x, $len - $shift);\n    return $right\
    \ . $left;\n}\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n\
    1\n>>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n    $shift = (int)$shift;\n\
    \    $len = strlen($x);\n    if ($shift >= $len) {\n        return strrev($x);\n\
    \    }\n    $y = substr($x, $shift, $len - $shift);\n    $y .= substr($x, 0, $shift);\n\
    \    return $y;\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12, 1) == \"\
    21\");\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12, 3)\
    \ == \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12", "    $x = (string)$x;\n    $len\
    \ = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n    }\n\
    \    $y = substr($x, $shift, $len - $shift);\n    $y .= substr($x, 0, $shift);\n\
    \    return $y;\n}\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n\
    1\n>>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $shift = $len\
    \ - $shift;\n    $a = substr($x, 0, $shift);\n    $b = substr($x, $shift);\n \
    \   return $b . $a;\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12, 1)\
    \ == \"21\");\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12,\
    \ 3) == \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12, 26) ==", "    $x = (string)$x;\n\
    \    $len = strlen($x);\n    $shift = $shift % $len;\n    if ($shift == 0) {\n\
    \        return $x;\n    }\n    $x = substr($x, $shift) . substr($x, 0, $shift);\n\
    \    return $x;\n}\n\n/*\n>>> is_palindrome(1221)\nTrue\n>>> is_palindrome(1234)\n\
    False\n*/", "    $x = strval($x);\n    $len = strlen($x);\n    if ($shift > $len)\
    \ {\n        return strrev($x);\n    }\n    $y = substr($x, $shift) . substr($x,\
    \ 0, $shift);\n    return $y;\n}\n\n/*\n>>> circular_shift(123, 1)\n\"312\"\n\
    >>> circular_shift(123, 2)\n\"231\"\n>>> circular_shift(123, 3)\n\"123\"\n>>>\
    \ circular_shift(123, 4)\n\"321\"\n*/\n\n/*\n>>> circular_shift(12345, 1)\n\"\
    54321\"\n>>> circular_shift(12345, 2)\n\"45123\"\n>>> circular_shift(12345, 3)\n\
    \"34512\"\n>>> circular_shift(12345, 4)\n\"23451\"\n>>> circular_shift(12345,\
    \ 5)\n\"12345\"\n>>> circular_shift(12345, 6)\n\"54321\"\n*/\n\n/*\n>>> circular_shift(123456,\
    \ 1)\n\"654321\"\n>>> circular_shift(123456, 2)\n\"561234\"\n>>> circular_shift(123456,\
    \ 3)\n\"456123\"\n>>> circular_shift(123456, 4)\n\"345612\"\n>>> circular_shift(123456,\
    \ 5)\n\"234561\"\n>>> circular_shift(123456, 6)\n\"123456\"\n>>> circular_shift(123456,\
    \ 7)\n\"654321\"\n*/\n\n/*\n>>> circular_shift(1234567, 1)\n\"7654321\"\n>>> circular_shift(1234567,\
    \ 2)\n\"6751234\"\n>>> circular_shift(1234567, 3)\n\"5671234\"\n>>> circular_shift(1234567,\
    \ 4)\n\"4567123\"\n>>> circular_shift(1234567, 5)\n\"3456712\"\n>>> circular_shift(1234567,\
    \ 6)\n\"2345671\"\n>>> circular_shift(1234567, 7)\n\"1234567\"\n>>> circular_shift(1234567,\
    \ 8)\n\"7654321\"\n*/\n\n/*\n>>> circular", "    $x = (string)$x;\n    $len =\
    \ strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n    }\n \
    \   $shift = $len - $shift;\n    return substr($x, $shift) . substr($x, 0, $shift);\n\
    }\n\n/* Return the integer x with the digits reversed.\n>>> reverse_digits(12)\n\
    21\n>>> reverse_digits(1)\n1\n*/", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $left = substr($x,\
    \ 0, $len - $shift);\n    $right = substr($x, $len - $shift);\n    return $right\
    \ . $left;\n}\n\n/*\n>>> is_palindrome(12)\nFalse\n>>> is_palindrome(121)\nTrue\n\
    >>> is_palindrome(12321)\nTrue\n>>> is_palindrome(12345)\nFalse\n*/", "    $x\
    \ = (string)$x;\n    $shift = (int)$shift;\n    $len = strlen($x);\n    if ($shift\
    \ > $len) {\n        return strrev($x);\n    }\n    $x = substr($x, $shift) .\
    \ substr($x, 0, $shift);\n    return $x;\n}\n\n/* Return the sum of the digits\
    \ of the integer x.\n>>> digit_sum(1234)\n10\n*/", "    $x = (string)$x;\n   \
    \ $shift = (int)$shift;\n    $len = strlen($x);\n    if ($shift > $len) {\n  \
    \      return strrev($x);\n    }\n    $y = substr($x, $shift);\n    $z = substr($x,\
    \ 0, $shift);\n    return $y.$z;\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12,\
    \ 1) == \"21\");\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12,\
    \ 3) == \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12, 26) == \"", "    $x = strval($x);\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    return substr($x, $len - $shift) . substr($x, 0, $len - $shift);\n\
    }\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n1\n\
    >>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $shift = $len\
    \ - $shift;\n    return substr($x, $shift) . substr($x, 0, $shift);\n}\n\n/*\n\
    >>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n\necho\
    \ circular_shift(12, 1) . \"\\n\";\necho circular_shift(12, 2) . \"\\n\";\necho\
    \ circular_shift(12, 3) . \"\\n\";\necho circular_shift(12, 4) . \"\\n\";\necho\
    \ circular_shift(12, 5) . \"\\n\";\necho circular_shift(12, 6) . \"\\n\";\necho\
    \ circular_shift(12, 7) . \"\\n\";\necho circular_shift(12, 8) . \"\\n\";\necho\
    \ circular_shift(12, 9) . \"\\n\";\necho circular_shift(12, 10) . \"\\n\";\necho\
    \ circular_shift(12, 11) . \"\\n\";\necho circular_shift(12, 12) . \"\\n\";\n\
    echo circular_shift(12, 13) . \"\\n\";\necho circular_shift(12, 14) . \"\\n\"\
    ;\necho circular_shift(12, 15) . \"\\n\";\necho circular_shift(12, 16) . \"\\\
    n\";\necho circular_shift(12, 17) . \"\\n\";\necho circular_shift(12, 18) . \"\
    \\n\";\necho circular_shift(12, 19) . \"\\n\";\necho circular_shift(12, 20) .\
    \ \"\\n\";\necho circular_shift(12, 21) . \"\\n\";\necho circular_shift(12, 22)\
    \ . \"\\n\";\necho circular_shift(12, 23) . \"\\n\";\necho circular_shift(12,\
    \ 24) . \"\\n\";\necho circular_shift(12, 25) . \"\\n\";\necho circular_shift(12,\
    \ 26) . \"\\n\";\necho circular_shift(12, 27) . \"\\n\";\necho circular_shift(12,\
    \ 28) . \"\\n\";\necho circular_shift(12, 29) .", "    $x = (string)$x;\n    $len\
    \ = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n    }\n\
    \    $x = strrev($x);\n    $x = substr($x, 0, $shift) . substr($x, $shift);\n\
    \    return strrev($x);\n}\n\n/* Return the number of digits in the integer x.\n\
    >>> num_digits(123)\n3\n>>> num_digits(0)\n1\n>>> num_digits(-123)\n3\n*/", " \
    \   $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n     \
    \   return strrev($x);\n    }\n    $shift = $len - $shift;\n    return substr($x,\
    \ $shift) . substr($x, 0, $shift);\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12,\
    \ 1) == \"21\");\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12,\
    \ 3) == \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12, 26) == \"12\");\nassert(circular_shift(12,\
    \ 27)", "    $x = strval($x);\n    $len = strlen($x);\n    if ($shift > $len)\
    \ {\n        return strrev($x);\n    }\n    $y = substr($x, $shift, $len - $shift);\n\
    \    $y .= substr($x, 0, $shift);\n    return $y;\n}\n\n/* Return the number of\
    \ digits in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n5*/",
  "    $x = (string)$x;\n    $shift = (int)$shift;\n    $len = strlen($x);\n    if\
    \ ($shift > $len) {\n        return strrev($x);\n    }\n    $left = substr($x,\
    \ 0, $shift);\n    $right = substr($x, $shift);\n    return $right . $left;\n\
    }\n\n/* Return the number of times the integer x is divisible by the integer y.\n\
    >>> divisible_count(12, 3)\n4\n>>> divisible_count(12, 4)\n3\n>>> divisible_count(12,\
    \ 5)\n2\n>>> divisible_count(12, 6)\n2\n>>> divisible_count(12, 7)\n1\n>>> divisible_count(12,\
    \ 8)\n1\n>>> divisible_count(12, 9)\n1\n>>> divisible_count(12, 10)\n1\n>>> divisible_count(12,\
    \ 11)\n0\n>>> divisible_count(12, 12)\n1\n*/", "  $digits = str_split($x);\n \
    \ $num_digits = count($digits);\n  $shift = $shift % $num_digits;\n  if ($shift\
    \ == 0) {\n    return $x;\n  }\n  $first_part = array_slice($digits, $shift);\n\
    \  $second_part = array_slice($digits, 0, $shift);\n  return implode('', array_merge($first_part,\
    \ $second_part));\n}\n\n/*\n>>> circular_shift(1234, 1)\n\"4123\"\n>>> circular_shift(1234,\
    \ 2)\n\"3412\"\n>>> circular_shift(1234, 3)\n\"2341\"\n>>> circular_shift(1234,\
    \ 4)\n\"1234\"\n>>> circular_shift(1234, 5)\n\"4123\"\n>>> circular_shift(1234,\
    \ 6)\n\"3412\"\n>>> circular_shift(1234, 7)\n\"2341\"\n>>> circular_shift(1234,\
    \ 8)\n\"1234\"\n*/\n\n/*\n>>> circular_shift(1234, -1)\n\"2341\"\n>>> circular_shift(1234,\
    \ -2)\n\"3412\"\n>>> circular_shift(1234, -3)\n\"4123\"\n>>> circular_shift(1234,\
    \ -4)\n\"1234\"\n>>> circular_shift(1234, -5)\n\"2341\"\n>>> circular_shift(1234,\
    \ -6)\n\"3412\"\n>>> circular_shift(1234, -7)\n\"4123\"\n>>> circular_shift(1234,\
    \ -8)\n\"1234\"\n*/\n\n/*\n>>> circular_shift(1234, -1)\n\"2341\"\n>>> circular_shift(1234,\
    \ -2)\n\"3412\"\n>>> circular_shift(1234, -3)\n\"4123\"\n>>> circular_shift(1234,\
    \ -4)\n\"1234\"\n>>> circular_shift(1234, -5)\n\"2341\"\n>>> circular_shift(1234,\
    \ -6)\n\"3412\"\n>>> circular_shift(1234, -7)\n\"4123\"", "    $digits = str_split($x);\n\
    \    $digits_count = count($digits);\n    if ($shift > $digits_count) {\n    \
    \    return implode('', array_reverse($digits));\n    }\n    $shifted_digits =\
    \ array_slice($digits, $shift);\n    $shifted_digits = array_merge($shifted_digits,\
    \ array_slice($digits, 0, $shift));\n    return implode('', $shifted_digits);\n\
    }\n\n/* Return the number of digits of the integer x.\n>>> num_digits(0)\n1\n\
    >>> num_digits(-12345)\n5*/", "\t$x = (string)$x;\n\t$len = strlen($x);\n\tif\
    \ ($shift > $len) {\n\t\treturn strrev($x);\n\t}\n\treturn substr($x, $shift,\
    \ $len - $shift) . substr($x, 0, $shift);\n}\n\n/* Return the number of digits\
    \ in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n5\n*/", " \
    \   $x = (string)$x;\n    $len = strlen($x);\n    $shift = $shift % $len;\n  \
    \  $x = substr($x, $shift) . substr($x, 0, $shift);\n    return $x;\n}\n\n/*\n\
    >>> is_palindrome(121)\nTrue\n>>> is_palindrome(123)\nFalse\n*/", "    $x = (string)$x;\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $shift = $len - $shift;\n    $x = substr($x, $shift) . substr($x,\
    \ 0, $shift);\n    return $x;\n}\n\n/* Return the number of digits in the integer\
    \ x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n5\n*/", "    $x = (string)$x;\n\
    \    $shift = (int)$shift;\n    $length = strlen($x);\n    if ($shift > $length)\
    \ {\n        return strrev($x);\n    }\n    return substr($x, $shift, $length\
    \ - $shift) . substr($x, 0, $shift);\n}\n\n/* Return the sum of the digits of\
    \ the integer x.\n>>> digit_sum(1234)\n10\n>>> digit_sum(12345678901234567890)\n\
    90\n*/", "    $x = strval($x);\n    $len = strlen($x);\n    if ($shift > $len)\
    \ {\n        return strrev($x);\n    }\n    $left = substr($x, 0, $len - $shift);\n\
    \    $right = substr($x, $len - $shift);\n    return $right . $left;\n}\n\n/*\n\
    >>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\necho\
    \ circular_shift(12, 1) . \"\\n\";\necho circular_shift(12, 2) . \"\\n\";\necho\
    \ circular_shift(12, 3) . \"\\n\";\necho circular_shift(12, 4) . \"\\n\";\n\n\
    /*\n>>> circular_shift(123, 1)\n\"312\"\n>>> circular_shift(123, 2)\n\"231\"\n\
    >>> circular_shift(123, 3)\n\"123\"\n>>> circular_shift(123, 4)\n\"321\"\n*/\n\
    echo circular_shift(123, 1) . \"\\n\";\necho circular_shift(123, 2) . \"\\n\"\
    ;\necho circular_shift(123, 3) . \"\\n\";\necho circular_shift(123, 4) . \"\\\
    n\";\n\n/*\n>>> circular_shift(123, 5)\n\"123\"\n>>> circular_shift(123, 6)\n\"\
    321\"\n*/\necho circular_shift(123, 5) . \"\\n\";\necho circular_shift(123, 6)\
    \ . \"\\n\";\n\n/*\n>>> circular_shift(12345, 1)\n\"54321\"\n>>> circular_shift(12345,\
    \ 2)\n\"45123\"\n>>> circular_shift(12345, 3)\n\"34512\"\n>>> circular_shift(12345,\
    \ 4)\n\"23451\"\n>>> circular_shift(12345, 5)\n\"12345\"\n>>> circular_shift(12345,\
    \ 6)\n\"54321\"\n*/\necho circular_shift(12345, 1) . \"\\n\";\necho circular_shift(12345,\
    \ 2) . \"\\n\";\necho circular_shift(12345, 3) . \"\\n\";\necho circular_shift(12345,\
    \ 4) . \"\\", "\t$x = (string)$x;\n\t$len = strlen($x);\n\tif ($shift > $len)\
    \ {\n\t\treturn strrev($x);\n\t}\n\t$right = substr($x, $len - $shift);\n\t$left\
    \ = substr($x, 0, $len - $shift);\n\treturn $right . $left;\n}\n\n/* Return the\
    \ integer x with the digits reversed.\n>>> reverse_digits(12)\n21\n>>> reverse_digits(0)\n\
    0\n>>> reverse_digits(1)\n1\n>>> reverse_digits(12345)\n54321\n>>> reverse_digits(123456789)\n\
    987654321\n*/", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift\
    \ > $len) {\n        return strrev($x);\n    }\n    $y = substr($x, $shift, $len\
    \ - $shift);\n    $y .= substr($x, 0, $shift);\n    return $y;\n}\n\n/* Return\
    \ the number of digits in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n\
    5*/", "\t$x = (string)$x;\n\t$shift = (int)$shift;\n\t$len = strlen($x);\n\tif\
    \ ($shift > $len) {\n\t\treturn strrev($x);\n\t}\n\t$x = substr($x, $shift) .\
    \ substr($x, 0, $shift);\n\treturn $x;\n}\n\n/* Return the number of digits in\
    \ the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n5*/", "    $x\
    \ = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n        return\
    \ strrev($x);\n    }\n    $left = substr($x, 0, $len - $shift);\n    $right =\
    \ substr($x, $len - $shift);\n    return $right . $left;\n}\n\n/* Return the number\
    \ of digits in the integer x.\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n\
    >>> num_digits(-123)\n3\n*/", "    $x = (string)$x;\n    $shift = (int)$shift;\n\
    \    if ($shift > strlen($x)) {\n        return strrev($x);\n    }\n    return\
    \ substr($x, $shift) . substr($x, 0, $shift);\n}\n\n/* Return the number of digits\
    \ in the integer x.\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n>>> num_digits(-123)\n\
    3*/", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n\
    \        return strrev($x);\n    }\n    $first = substr($x, 0, $len - $shift);\n\
    \    $second = substr($x, $len - $shift);\n    return $second . $first;\n}\n\n\
    /*\n * Test code\n */\nassert(circular_shift(12, 1) == \"21\");\nassert(circular_shift(12,\
    \ 2) == \"12\");\nassert(circular_shift(12, 3) == \"21\");\nassert(circular_shift(12,\
    \ 4) == \"12\");\nassert(circular_shift(12, 5) == \"21\");\nassert(circular_shift(12,\
    \ 6) == \"12\");\nassert(circular_shift(12, 7) == \"21\");\nassert(circular_shift(12,\
    \ 8) == \"12\");\nassert(circular_shift(12, 9) == \"21\");\nassert(circular_shift(12,\
    \ 10) == \"12\");\nassert(circular_shift(12, 11) == \"21\");\nassert(circular_shift(12,\
    \ 12) == \"12\");\nassert(circular_shift(12, 13) == \"21\");\nassert(circular_shift(12,\
    \ 14) == \"12\");\nassert(circular_shift(12, 15) == \"21\");\nassert(circular_shift(12,\
    \ 16) == \"12\");\nassert(circular_shift(12, 17) == \"21\");\nassert(circular_shift(12,\
    \ 18) == \"12\");\nassert(circular_shift(12, 19) == \"21\");\nassert(circular_shift(12,\
    \ 20) == \"12\");\nassert(circular_shift(12, 21) == \"21\");\nassert(circular_shift(12,\
    \ 22) == \"12\");\nassert(circular_shift(12, 23) == \"21\");\nassert(circular_shift(12,\
    \ 24) == \"12\");\nassert(circular_shift(12, 25) == \"21\");\nassert(circular_shift(12,\
    \ 26) == \"12\");\nassert", "    $x = (string)$x;\n    $shift = (int)$shift;\n\
    \    if ($shift > strlen($x)) {\n        return strrev($x);\n    }\n    $x = substr($x,\
    \ $shift) . substr($x, 0, $shift);\n    return $x;\n}\n\n/*\n * Return the integer\
    \ x with the digits reversed.\n * >>> reverse_digits(12)\n * 21\n * >>> reverse_digits(19)\n\
    \ * 91\n */", "    $x = (string)$x;\n    $len = strlen($x);\n    $shift = $shift\
    \ % $len;\n    if ($shift == 0) {\n        return $x;\n    }\n    return substr($x,\
    \ $shift) . substr($x, 0, $shift);\n}\n\n/* Return the number of digits in the\
    \ integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n5*/", "\t$x = (string)$x;\n\
    \t$shift = (int)$shift;\n\t$digits = strlen($x);\n\tif ($shift > $digits) {\n\t\
    \treturn strrev($x);\n\t}\n\t$right = substr($x, $shift);\n\t$left = substr($x,\
    \ 0, $shift);\n\treturn $right.$left;\n}\n\n/* Return the sum of the digits of\
    \ the integer x.\n>>> sum_digits(123)\n6\n>>> sum_digits(12)\n3\n>>> sum_digits(0)\n\
    0\n>>> sum_digits(-123)\n6\n*/", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $left = substr($x,\
    \ 0, $len - $shift);\n    $right = substr($x, $len - $shift);\n    return $right\
    \ . $left;\n}\n\n/* Return the number of digits in the integer x.\n>>> num_digits(123)\n\
    3\n>>> num_digits(0)\n1\n>>> num_digits(-123)\n3\n*/", "    $x = (string)$x;\n\
    \    if ($shift > strlen($x)) {\n        return strrev($x);\n    }\n    return\
    \ substr($x, $shift) . substr($x, 0, $shift);\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12,\
    \ 1) == \"21\");\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12,\
    \ 3) == \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12, 26) == \"12\");\nassert(circular_shift(12,\
    \ 27) == \"21\");\nassert(circular_shift(12, 28) == \"12", "    $x = (string)$x;\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $first = substr($x, 0, $len - $shift);\n    $second = substr($x, $len\
    \ - $shift);\n    return $second . $first;\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12,\
    \ 1) == \"21\");\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12,\
    \ 3) == \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12, 26) == \"12\");\nassert", "\t$x =\
    \ strval($x);\n\t$len = strlen($x);\n\tif ($shift > $len) {\n\t\treturn strrev($x);\n\
    \t}\n\t$first = substr($x, 0, $shift);\n\t$second = substr($x, $shift);\n\treturn\
    \ $second . $first;\n}\n\n/* Return the number of digits in the integer x.\n>>>\
    \ num_digits(0)\n1\n>>> num_digits(-12345)\n5*/", "  $x = (string)$x;\n  $len\
    \ = strlen($x);\n  if ($shift > $len) {\n    return strrev($x);\n  }\n  $right\
    \ = substr($x, 0, $len - $shift);\n  $left = substr($x, $len - $shift);\n  return\
    \ $left . $right;\n}\n\n/* Return the number of digits in the integer x.\n>>>\
    \ num_digits(0)\n1\n>>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n    $shift\
    \ = (int)$shift;\n    $len = strlen($x);\n    if ($shift > $len) {\n        return\
    \ strrev($x);\n    }\n    $left = substr($x, 0, $shift);\n    $right = substr($x,\
    \ $shift);\n    return $right . $left;\n}\n\n/*\n>>> circular_shift(12, 1)\n\"\
    21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\necho circular_shift(12, 1) . \"\\\
    n\";\necho circular_shift(12, 2) . \"\\n\";\necho circular_shift(12, 3) . \"\\\
    n\";\necho circular_shift(12, 4) . \"\\n\";\necho circular_shift(12, 5) . \"\\\
    n\";\necho circular_shift(12, 6) . \"\\n\";\necho circular_shift(12, 7) . \"\\\
    n\";\necho circular_shift(12, 8) . \"\\n\";\necho circular_shift(12, 9) . \"\\\
    n\";\necho circular_shift(12, 10) . \"\\n\";\necho circular_shift(12, 11) . \"\
    \\n\";\necho circular_shift(12, 12) . \"\\n\";\necho circular_shift(12, 13) .\
    \ \"\\n\";\necho circular_shift(12, 14) . \"\\n\";\necho circular_shift(12, 15)\
    \ . \"\\n\";\necho circular_shift(12, 16) . \"\\n\";\necho circular_shift(12,\
    \ 17) . \"\\n\";\necho circular_shift(12, 18) . \"\\n\";\necho circular_shift(12,\
    \ 19) . \"\\n\";\necho circular_shift(12, 20) . \"\\n\";\necho circular_shift(12,\
    \ 21) . \"\\n\";\necho circular_shift(12, 22) . \"\\n\";\necho circular_shift(12,\
    \ 23) . \"\\n\";\necho circular_shift(12, 24) . \"\\n\";\necho circular_shift(12,\
    \ 25) . \"\\n\";\necho circular_shift(12, 26) . \"\\n\";\necho circular_shift(12,\
    \ 27) . \"\\n\";\necho circular_shift(12, 28) .", "    $x = strval($x);\n    $len\
    \ = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n    }\n\
    \    $x = substr($x, $shift) . substr($x, 0, $shift);\n    return $x;\n}\n\n/*\
    \ Return the sum of the digits of the integer x.\n>>> sum_digits(10) # 1 + 0 =\
    \ 1\n1\n>>> sum_digits(4224) # 4 + 2 + 2 + 4 = 12\n12\n>>> sum_digits(1234567890)\n\
    45\n*/", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len)\
    \ {\n        return strrev($x);\n    }\n    $y = substr($x, $shift, $len - $shift);\n\
    \    $y .= substr($x, 0, $shift);\n    return $y;\n}\n\n/* Return the number of\
    \ digits in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n5\n\
    */", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n\
    \        return strrev($x);\n    }\n    $right = substr($x, $len - $shift);\n\
    \    $left = substr($x, 0, $len - $shift);\n    return $right . $left;\n}\n\n\
    /*\n * Return the number of digits in the integer x.\n * >>> num_digits(0)\n *\
    \ 1\n * >>> num_digits(-12345)\n * 5\n */", "    $x = (string)$x;\n    $shift\
    \ = (int)$shift;\n    $len = strlen($x);\n    if ($shift > $len) {\n        return\
    \ strrev($x);\n    }\n    $left = substr($x, 0, $shift);\n    $right = substr($x,\
    \ $shift);\n    return $right . $left;\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12,\
    \ 1) == \"21\");\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12,\
    \ 3) == \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12, 26) ==", "    $x_str = strval($x);\n\
    \    $x_len = strlen($x_str);\n    if ($shift > $x_len) {\n        return strrev($x_str);\n\
    \    }\n    $shift_str = substr($x_str, $shift);\n    $shift_str .= substr($x_str,\
    \ 0, $shift);\n    return $shift_str;\n}\n\n/* Return the number of digits in\
    \ the integer x.\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n>>> num_digits(-123)\n\
    3\n*/", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len)\
    \ {\n        return strrev($x);\n    }\n    $shift = $len - $shift;\n    $x =\
    \ substr($x, $shift) . substr($x, 0, $shift);\n    return $x;\n}\n\n/*\n>>> circular_shift(12,\
    \ 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\necho circular_shift(12, 1)\
    \ . \"\\n\";\necho circular_shift(12, 2) . \"\\n\";\necho circular_shift(12, 3)\
    \ . \"\\n\";\necho circular_shift(12, 4) . \"\\n\";\necho circular_shift(12, 5)\
    \ . \"\\n\";\necho circular_shift(12, 6) . \"\\n\";\necho circular_shift(12, 7)\
    \ . \"\\n\";\necho circular_shift(12, 8) . \"\\n\";\necho circular_shift(12, 9)\
    \ . \"\\n\";\necho circular_shift(12, 10) . \"\\n\";\necho circular_shift(12,\
    \ 11) . \"\\n\";\necho circular_shift(12, 12) . \"\\n\";\necho circular_shift(12,\
    \ 13) . \"\\n\";\necho circular_shift(12, 14) . \"\\n\";\necho circular_shift(12,\
    \ 15) . \"\\n\";\necho circular_shift(12, 16) . \"\\n\";\necho circular_shift(12,\
    \ 17) . \"\\n\";\necho circular_shift(12, 18) . \"\\n\";\necho circular_shift(12,\
    \ 19) . \"\\n\";\necho circular_shift(12, 20) . \"\\n\";\necho circular_shift(12,\
    \ 21) . \"\\n\";\necho circular_shift(12, 22) . \"\\n\";\necho circular_shift(12,\
    \ 23) . \"\\n\";\necho circular_shift(12, 24) . \"\\n\";\necho circular_shift(12,\
    \ 25) . \"\\n\";\necho circular_shift(12, 26) . \"\\n\";\necho circular_shift(12,\
    \ 27) . \"\\n\";\necho circular_shift(12, 28) . \"\\n\";\necho circular_", " \
    \   $x = (string)$x;\n    $shift = $shift % strlen($x);\n    return substr($x,\
    \ -$shift) . substr($x, 0, -$shift);\n}\n\n/* Return the number of digits in the\
    \ integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $x = substr($x, $shift) . substr($x, 0, $shift);\n    return $x;\n\
    }\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n1\n\
    >>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n    $shift = (int)$shift;\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $left = substr($x, 0, $shift);\n    $right = substr($x, $shift);\n\
    \    return $right . $left;\n}\n\n/*\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12,\
    \ 2)\n\"12\"\n*/\n\necho circular_shift(12, 1) . \"\\n\";\necho circular_shift(12,\
    \ 2) . \"\\n\";\necho circular_shift(12, 3) . \"\\n\";\necho circular_shift(12,\
    \ 4) . \"\\n\";\necho circular_shift(12, 5) . \"\\n\";\necho circular_shift(12,\
    \ 6) . \"\\n\";\necho circular_shift(12, 7) . \"\\n\";\necho circular_shift(12,\
    \ 8) . \"\\n\";\necho circular_shift(12, 9) . \"\\n\";\necho circular_shift(12,\
    \ 10) . \"\\n\";\necho circular_shift(12, 11) . \"\\n\";\necho circular_shift(12,\
    \ 12) . \"\\n\";\necho circular_shift(12, 13) . \"\\n\";\necho circular_shift(12,\
    \ 14) . \"\\n\";\necho circular_shift(12, 15) . \"\\n\";\necho circular_shift(12,\
    \ 16) . \"\\n\";\necho circular_shift(12, 17) . \"\\n\";\necho circular_shift(12,\
    \ 18) . \"\\n\";\necho circular_shift(12, 19) . \"\\n\";\necho circular_shift(12,\
    \ 20) . \"\\n\";\necho circular_shift(12, 21) . \"\\n\";\necho circular_shift(12,\
    \ 22) . \"\\n\";\necho circular_shift(12, 23) . \"\\n\";\necho circular_shift(12,\
    \ 24) . \"\\n\";\necho circular_shift(12, 25) . \"\\n\";\necho circular_shift(12,\
    \ 26) . \"\\n\";\necho circular_shift(12, 27) . \"\\n\";\necho circular_shift(12,\
    \ 28)", "    $x = (string)$x;\n    $x_len = strlen($x);\n    if ($shift > $x_len)\
    \ {\n        return strrev($x);\n    }\n    $x_left = substr($x, 0, $x_len - $shift);\n\
    \    $x_right = substr($x, $x_len - $shift);\n    return $x_right . $x_left;\n\
    }\n\n/*\n * Test code\n */\nassert(circular_shift(12, 1) == \"21\");\nassert(circular_shift(12,\
    \ 2) == \"12\");\nassert(circular_shift(12, 3) == \"21\");\nassert(circular_shift(12,\
    \ 4) == \"12\");\nassert(circular_shift(12, 5) == \"21\");\nassert(circular_shift(12,\
    \ 6) == \"12\");\nassert(circular_shift(12, 7) == \"21\");\nassert(circular_shift(12,\
    \ 8) == \"12\");\nassert(circular_shift(12, 9) == \"21\");\nassert(circular_shift(12,\
    \ 10) == \"12\");\nassert(circular_shift(12, 11) == \"21\");\nassert(circular_shift(12,\
    \ 12) == \"12\");\nassert(circular_shift(12, 13) == \"21\");\nassert(circular_shift(12,\
    \ 14) == \"12\");\nassert(circular_shift(12, 15) == \"21\");\nassert(circular_shift(12,\
    \ 16) == \"12\");\nassert(circular_shift(12, 17) == \"21\");\nassert(circular_shift(12,\
    \ 18) == \"12\");\nassert(circular_shift(12, 19) == \"21\");\nassert(circular_shift(12,\
    \ 20) == \"12\");\nassert(circular_shift(12, 21) == \"21\");\nassert(circular_shift(12,\
    \ 22) == \"12\");\nassert(circular_shift(12, 23) == \"21\");\nassert(circular_shift(12,\
    \ 24) == \"12\");\nassert(circular_shift(12, 25) == \"21\");\nassert", "    $x\
    \ = (string)$x;\n    $shift = (int)$shift;\n    $len = strlen($x);\n    if ($shift\
    \ > $len) {\n        return strrev($x);\n    }\n    $left = substr($x, 0, $shift);\n\
    \    $right = substr($x, $shift);\n    return $right . $left;\n}\n\n/*\n * Test\
    \ code\n */\nassert(circular_shift(12, 1) == \"21\");\nassert(circular_shift(12,\
    \ 2) == \"12\");\nassert(circular_shift(12, 3) == \"21\");\nassert(circular_shift(12,\
    \ 4) == \"12\");\nassert(circular_shift(12, 5) == \"21\");\nassert(circular_shift(12,\
    \ 6) == \"12\");\nassert(circular_shift(12, 7) == \"21\");\nassert(circular_shift(12,\
    \ 8) == \"12\");\nassert(circular_shift(12, 9) == \"21\");\nassert(circular_shift(12,\
    \ 10) == \"12\");\nassert(circular_shift(12, 11) == \"21\");\nassert(circular_shift(12,\
    \ 12) == \"12\");\nassert(circular_shift(12, 13) == \"21\");\nassert(circular_shift(12,\
    \ 14) == \"12\");\nassert(circular_shift(12, 15) == \"21\");\nassert(circular_shift(12,\
    \ 16) == \"12\");\nassert(circular_shift(12, 17) == \"21\");\nassert(circular_shift(12,\
    \ 18) == \"12\");\nassert(circular_shift(12, 19) == \"21\");\nassert(circular_shift(12,\
    \ 20) == \"12\");\nassert(circular_shift(12, 21) == \"21\");\nassert(circular_shift(12,\
    \ 22) == \"12\");\nassert(circular_shift(12, 23) == \"21\");\nassert(circular_shift(12,\
    \ 24) == \"12\");\nassert(circular_shift(12, 25) == \"21\");\nassert(circular_shift(12,\
    \ 26) ==", "\t$x = (string)$x;\n\t$shift = (int)$shift;\n\tif ($shift > strlen($x))\
    \ {\n\t\treturn strrev($x);\n\t}\n\t$first = substr($x, 0, $shift);\n\t$second\
    \ = substr($x, $shift);\n\treturn $second.$first;\n}\n\n/* Return the number of\
    \ digits in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n5*/",
  "    $x = strval($x);\n    $shift = $shift % strlen($x);\n    if ($shift == 0) {\n\
    \        return $x;\n    }\n    return substr($x, -$shift) . substr($x, 0, -$shift);\n\
    }\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n1\n\
    >>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $first = substr($x,\
    \ 0, $len - $shift);\n    $second = substr($x, $len - $shift);\n    return $second\
    \ . $first;\n}\n\n/*\n * Test code\n */\nassert_options(ASSERT_BAIL, 1);\n\n$tests\
    \ = array(\n    array(12, 1, \"21\"),\n    array(12, 2, \"12\"),\n    array(12,\
    \ 3, \"21\"),\n    array(12, 4, \"12\"),\n    array(12, 5, \"21\"),\n    array(12,\
    \ 6, \"12\"),\n    array(12, 7, \"21\"),\n    array(12, 8, \"12\"),\n    array(12,\
    \ 9, \"21\"),\n    array(12, 10, \"12\"),\n    array(12, 11, \"21\"),\n    array(12,\
    \ 12, \"12\"),\n    array(12, 13, \"21\"),\n    array(12, 14, \"12\"),\n    array(12,\
    \ 15, \"21\"),\n    array(12, 16, \"12\"),\n    array(12, 17, \"21\"),\n    array(12,\
    \ 18, \"12\"),\n    array(12, 19, \"21\"),\n    array(12, 20, \"12\"),\n    array(12,\
    \ 21, \"21\"),\n    array(12, 22, \"12\"),\n    array(12, 23, \"21\"),\n    array(12,\
    \ 24, \"12\"),\n    array(12, 25, \"21\"),\n    array(12, 26, \"12\"),\n    array(12,\
    \ 27, \"21\"),\n    array(12, 28, \"12\"),\n    array(12, 29, \"21\"),\n    array(12,\
    \ 30, \"12\"),\n    array(12, 31, \"21\"),\n    array(12, 32, \"12\"),\n    array(12,\
    \ 33, \"21\"),\n    array(12, 34, \"12\"),\n    array(12, 35, \"21\"),\n    array(12,\
    \ 36, \"12\"),\n   ", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift\
    \ > $len) {\n        return strrev($x);\n    }\n    $shift = $len - $shift;\n\
    \    return substr($x, $shift) . substr($x, 0, $shift);\n}\n\n/* Return the number\
    \ of digits in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n\
    5\n*/", "    $x = (string)$x;\n    $shift = (int)$shift;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $left = substr($x,\
    \ 0, $shift);\n    $right = substr($x, $shift);\n    return $right . $left;\n\
    }\n\n/* Return the sum of the digits of the integer x.\n>>> digit_sum(1234)\n\
    10\n*/", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len)\
    \ {\n        return strrev($x);\n    }\n    $shift_str = substr($x, $len - $shift);\n\
    \    $x = substr($x, 0, $len - $shift);\n    return $shift_str . $x;\n}\n\n/*\
    \ Return the number of digits in the integer x.\n>>> num_digits(123)\n3\n>>> num_digits(0)\n\
    1\n>>> num_digits(-123)\n3\n*/", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $shift = $len\
    \ - $shift;\n    return substr($x, $shift) . substr($x, 0, $shift);\n}\n\n/* Return\
    \ the number of digits in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n\
    5\n*/", "    $x = (string)$x;\n    $x_len = strlen($x);\n    if ($shift >= $x_len)\
    \ {\n        return strrev($x);\n    }\n    $x_shift = substr($x, $shift, $x_len\
    \ - $shift);\n    $x_shift .= substr($x, 0, $shift);\n    return $x_shift;\n}\n\
    \n/*\n>>> is_palindrome(121)\nTrue\n>>> is_palindrome(123)\nFalse\n*/", "    $x\
    \ = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n        return\
    \ strrev($x);\n    }\n    $left = substr($x, 0, $len - $shift);\n    $right =\
    \ substr($x, $len - $shift);\n    return $right . $left;\n}\n\n/*\n * Test code\n\
    \ */\nassert_options(ASSERT_BAIL, 1);\n\n$tests = array(\n    array(12, 1, \"\
    21\"),\n    array(12, 2, \"12\"),\n    array(12, 3, \"21\"),\n    array(12, 4,\
    \ \"12\"),\n    array(12, 5, \"21\"),\n    array(12, 6, \"12\"),\n    array(12,\
    \ 7, \"21\"),\n    array(12, 8, \"12\"),\n    array(12, 9, \"21\"),\n    array(12,\
    \ 10, \"12\"),\n    array(12, 11, \"21\"),\n    array(12, 12, \"12\"),\n    array(12,\
    \ 13, \"21\"),\n    array(12, 14, \"12\"),\n    array(12, 15, \"21\"),\n    array(12,\
    \ 16, \"12\"),\n    array(12, 17, \"21\"),\n    array(12, 18, \"12\"),\n    array(12,\
    \ 19, \"21\"),\n    array(12, 20, \"12\"),\n    array(12, 21, \"21\"),\n    array(12,\
    \ 22, \"12\"),\n    array(12, 23, \"21\"),\n    array(12, 24, \"12\"),\n    array(12,\
    \ 25, \"21\"),\n    array(12, 26, \"12\"),\n    array(12, 27, \"21\"),\n    array(12,\
    \ 28, \"12\"),\n    array(12, 29, \"21\"),\n    array(12, 30, \"12\"),\n    array(12,\
    \ 31, \"21\"),\n    array(12, 32, \"12\"),\n    array(12, 33, \"21\"),\n    array(12,\
    \ 34, \"12\"),\n    array(12, 35, \"21\"),\n    array(12, 36, \"12\"),\n   ",
  "    $x = (string)$x;\n    $shift = (int)$shift;\n    $len = strlen($x);\n    if\
    \ ($shift >= $len) {\n        return strrev($x);\n    }\n    $left = substr($x,\
    \ 0, $shift);\n    $right = substr($x, $shift);\n    return $right . $left;\n\
    }\n\n/*\n * Test code\n */\necho circular_shift(12, 1) . \"\\n\";\necho circular_shift(12,\
    \ 2) . \"\\n\";\necho circular_shift(12, 3) . \"\\n\";\necho circular_shift(12,\
    \ 4) . \"\\n\";\necho circular_shift(12, 5) . \"\\n\";\necho circular_shift(12,\
    \ 6) . \"\\n\";\necho circular_shift(12, 7) . \"\\n\";\necho circular_shift(12,\
    \ 8) . \"\\n\";\necho circular_shift(12, 9) . \"\\n\";\necho circular_shift(12,\
    \ 10) . \"\\n\";\necho circular_shift(12, 11) . \"\\n\";\necho circular_shift(12,\
    \ 12) . \"\\n\";\necho circular_shift(12, 13) . \"\\n\";\necho circular_shift(12,\
    \ 14) . \"\\n\";\necho circular_shift(12, 15) . \"\\n\";\necho circular_shift(12,\
    \ 16) . \"\\n\";\necho circular_shift(12, 17) . \"\\n\";\necho circular_shift(12,\
    \ 18) . \"\\n\";\necho circular_shift(12, 19) . \"\\n\";\necho circular_shift(12,\
    \ 20) . \"\\n\";\necho circular_shift(12, 21) . \"\\n\";\necho circular_shift(12,\
    \ 22) . \"\\n\";\necho circular_shift(12, 23) . \"\\n\";\necho circular_shift(12,\
    \ 24) . \"\\n\";\necho circular_shift(12, 25) . \"\\n\";\necho circular_shift(12,\
    \ 26) . \"\\n\";\necho circular_shift(12, 27) . \"\\n\";\necho circular_shift(12,\
    \ 28) . \"\\n\";\necho circular_shift(12, 29) . \"\\n\";\necho circular_shift(12",
  "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n      \
    \  return strrev($x);\n    }\n    $y = substr($x, $shift, $len - $shift);\n  \
    \  $y .= substr($x, 0, $shift);\n    return $y;\n}\n\n/*\n * Test code\n */\n\
    assert_options(ASSERT_BAIL, 1);\n\n$tests = array(\n    array(12, 1, \"21\"),\n\
    \    array(12, 2, \"12\"),\n    array(12, 3, \"21\"),\n    array(123, 1, \"312\"\
    ),\n    array(123, 2, \"231\"),\n    array(123, 3, \"123\"),\n    array(123, 4,\
    \ \"312\"),\n    array(123, 5, \"231\"),\n    array(123, 6, \"123\"),\n);\n\n\
    foreach ($tests as $test) {\n    list($x, $shift, $expected) = $test;\n    $result\
    \ = circular_shift($x, $shift);\n    assert($result === $expected);\n}\n\necho\
    \ \"Tests passed.\\n\";", "    $x = (string)$x;\n    $shift = (int)$shift;\n \
    \   $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $left = substr($x, 0, $shift);\n    $right = substr($x, $shift);\n\
    \    return $right . $left;\n}\n\n/*\n>>> is_palindrome(121)\nTrue\n>>> is_palindrome(123)\n\
    False\n*/", "    $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len)\
    \ {\n        return strrev($x);\n    }\n    $shift = $len - $shift;\n    $a =\
    \ substr($x, 0, $shift);\n    $b = substr($x, $shift);\n    return $b . $a;\n\
    }\n\n/* Return the number of digits in the integer x.\n>>> num_digits(0)\n1\n\
    >>> num_digits(-12345)\n5*/", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    $shift = $shift % $len;\n    $x = substr($x, $shift) . substr($x, 0, $shift);\n\
    \    return $x;\n}\n\n/*\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12,\
    \ 2)\n\"12\"\n*/\necho circular_shift(12, 1) . \"\\n\";\necho circular_shift(12,\
    \ 2) . \"\\n\";\n\n/*\n>>> circular_shift(123, 1)\n\"312\"\n>>> circular_shift(123,\
    \ 2)\n\"231\"\n>>> circular_shift(123, 3)\n\"123\"\n*/\necho circular_shift(123,\
    \ 1) . \"\\n\";\necho circular_shift(123, 2) . \"\\n\";\necho circular_shift(123,\
    \ 3) . \"\\n\";\n\n/*\n>>> circular_shift(123, 4)\n\"312\"\n>>> circular_shift(123,\
    \ 5)\n\"231\"\n>>> circular_shift(123, 6)\n\"123\"\n*/\necho circular_shift(123,\
    \ 4) . \"\\n\";\necho circular_shift(123, 5) . \"\\n\";\necho circular_shift(123,\
    \ 6) . \"\\n\";\n\n/*\n>>> circular_shift(123, 7)\n\"312\"\n>>> circular_shift(123,\
    \ 8)\n\"231\"\n>>> circular_shift(123, 9)\n\"123\"\n*/\necho circular_shift(123,\
    \ 7) . \"\\n\";\necho circular_shift(123, 8) . \"\\n\";\necho circular_shift(123,\
    \ 9) . \"\\n\";\n\n/*\n>>> circular_shift(123, 10)\n\"312\"\n>>> circular_shift(123,\
    \ 11)\n\"231\"\n>>> circular_shift(123, 12)\n\"123\"\n*/\necho circular_shift(123,\
    \ 10) . \"\\n\";\necho circular_shift(123, 11) . \"\\n\";\necho circular_shift(123,\
    \ 12) . \"\\n\";\n\n/*\n>>> circular_shift(123, 13)\n\"312\"\n>>> circular_shift(123,\
    \ 14)\n\"231\"\n>>>", "    $x = (string)$x;\n    $shift = (int)$shift;\n    $len\
    \ = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n    }\n\
    \    $left = substr($x, 0, $shift);\n    $right = substr($x, $shift);\n    return\
    \ $right . $left;\n}\n\n/*\n * Test code\n */\nassert(circular_shift(12, 1) ==\
    \ \"21\");\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12,\
    \ 3) == \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\nassert(circular_shift(12,\
    \ 9) == \"21\");\nassert(circular_shift(12, 10) == \"12\");\nassert(circular_shift(12,\
    \ 11) == \"21\");\nassert(circular_shift(12, 12) == \"12\");\nassert(circular_shift(12,\
    \ 13) == \"21\");\nassert(circular_shift(12, 14) == \"12\");\nassert(circular_shift(12,\
    \ 15) == \"21\");\nassert(circular_shift(12, 16) == \"12\");\nassert(circular_shift(12,\
    \ 17) == \"21\");\nassert(circular_shift(12, 18) == \"12\");\nassert(circular_shift(12,\
    \ 19) == \"21\");\nassert(circular_shift(12, 20) == \"12\");\nassert(circular_shift(12,\
    \ 21) == \"21\");\nassert(circular_shift(12, 22) == \"12\");\nassert(circular_shift(12,\
    \ 23) == \"21\");\nassert(circular_shift(12, 24) == \"12\");\nassert(circular_shift(12,\
    \ 25) == \"21\");\nassert(circular_shift(12, 26) ==", "    $x = (string)$x;\n\
    \    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $left = substr($x, 0, $len - $shift);\n    $right = substr($x, $len\
    \ - $shift);\n    return $right . $left;\n}\n\n/* Return the number of digits\
    \ in the integer x.\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n>>> num_digits(-123)\n\
    3*/", "    $x = strval($x);\n    $len = strlen($x);\n    $shift = $shift % $len;\n\
    \    if ($shift == 0) {\n        return $x;\n    }\n    $x = substr($x, $shift)\
    \ . substr($x, 0, $shift);\n    return $x;\n}\n\n/* Return the number of digits\
    \ in the integer x.\n>>> num_digits(0)\n1\n>>> num_digits(-12345)\n5\n*/", " \
    \   $x = (string)$x;\n    $len = strlen($x);\n    if ($shift > $len) {\n     \
    \   return strrev($x);\n    }\n    $left = substr($x, 0, $len - $shift);\n   \
    \ $right = substr($x, $len - $shift);\n    return $right . $left;\n}\n\n/* Return\
    \ the number of digits in the integer x.\n>>> num_digits(123)\n3\n>>> num_digits(0)\n\
    1\n>>> num_digits(-123)\n3*/", "    $x = (string)$x;\n    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    $left = substr($x,\
    \ 0, $len - $shift);\n    $right = substr($x, $len - $shift);\n    return $right\
    \ . $left;\n}\n\n/*\n * Test code\n */\nassert_options(ASSERT_BAIL, 1);\n\n$tests\
    \ = array(\n    array(12, 1, \"21\"),\n    array(12, 2, \"12\"),\n    array(12,\
    \ 3, \"21\"),\n    array(12, 4, \"12\"),\n    array(1234, 1, \"4123\"),\n    array(1234,\
    \ 2, \"3412\"),\n    array(1234, 3, \"2341\"),\n    array(1234, 4, \"1234\"),\n\
    \    array(1234, 5, \"4123\"),\n    array(1234, 6, \"3412\"),\n    array(1234,\
    \ 7, \"2341\"),\n    array(1234, 8, \"1234\"),\n);\n\nforeach ($tests as $test)\
    \ {\n    list($x, $shift, $expected) = $test;\n    assert(circular_shift($x, $shift)\
    \ === $expected);\n}\n\necho \"Tests passed.\\n\";", "    $digits = str_split($x);\n\
    \    $digits_count = count($digits);\n    if ($shift > $digits_count) {\n    \
    \    return implode('', array_reverse($digits));\n    }\n    $shift_digits = array_slice($digits,\
    \ $shift);\n    $shift_digits = array_merge($shift_digits, array_slice($digits,\
    \ 0, $shift));\n    return implode('', $shift_digits);\n}\n\n/*\n * Return the\
    \ number of times the integer x appears in the array a.\n * >>> count_occurrences(12,\
    \ [1, 2, 3, 12, 12, 1, 2, 3, 12, 3, 3])\n * 4\n * >>> count_occurrences(3, [1,\
    \ 2, 3, 12, 12, 1, 2, 3, 12, 3, 3])\n * 4\n * >>> count_occurrences(3, [3, 2,\
    \ 1])\n * 1\n * >>> count_occurrences(42, [])\n * 0\n */"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
