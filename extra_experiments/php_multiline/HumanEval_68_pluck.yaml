name: HumanEval_68_pluck
language: php
prompt: "<?php\n/* \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\nyour task is to pluck one of the nodes and return it.\nThe plucked\
  \ node should be the node with the smallest even value.\nIf multiple nodes with\
  \ the same smallest even value are found return the node that has smallest index.\n\
  The plucked node should be returned in an array, [ smalest_value, its index ],\n\
  If there are no even values or the given array is empty, return [].\nExample 1:\n\
  >>> pluck(array(4, 2, 3))\narray(2, 1)\nExplanation: 2 has the smallest even value,\
  \ and 2 has the smallest index.\nExample 2:\n>>> pluck(array(1, 2, 3))\narray(2,\
  \ 1)\nExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  Example 3:\n>>> pluck(array())\narray()\nExample 4:\n>>> pluck(array(5, 0, 3, 0,\
  \ 4, 2))\narray(0, 1)\nExplanation: 0 is the smallest value, but  there are two\
  \ zeros,\nso we will choose the first zero, which has the smallest index.\nConstraints:\n\
  * 1 <= nodes.length <= 10000\n* 0 <= node.value*/\nfunction pluck($arr) {\n"
tests: "function candidate(...$args) {\n    return pluck(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(4, 2, 3)) !== array(2, 1)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3)) !== array(2,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
  \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 0, 3, 0, 4, 2)) !== array(0, 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(1, 2, 3, 0, 5, 3)) !== array(0, 3)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(5, 4, 8, 4, 8)) !== array(4, 1)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 6, 7, 1)) !== array(6,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 9,\
  \ 7, 1)) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $even = [];\n    $even_index = [];\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n \
    \           $even_index[] = $key;\n        }\n    }\n    if (empty($even)) {\n\
    \        return [];\n    }\n    $min = min($even);\n    $min_index = array_search($min,\
    \ $even);\n    return [$min, $even_index[$min_index]];\n}\n\n$arr = [4, 2, 3];\n\
    print_r(pluck($arr));", "    $min = PHP_INT_MAX;\n    $minIndex = -1;\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0 && $value < $min) {\n\
    \            $min = $value;\n            $minIndex = $key;\n        }\n    }\n\
    \    if ($minIndex == -1) {\n        return [];\n    }\n    return [$min, $minIndex];\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));", "    $evens = [];\n    $indexes\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $indexes[] = $key;\n        }\n\
    \    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $indexes[$minIndex]];\n\
    }\n\n$arr = [4, 2, 3];\n$arr2 = [1, 2, 3];\n$arr3 = [];\n$arr4 = [5, 0, 3, 0,\
    \ 4, 2];\n\nvar_dump(pluck($arr));\nvar_dump(pluck($arr2));\nvar_dump(pluck($arr3));\n\
    var_dump(pluck($arr4));", "    $evens = [];\n    $evens_index = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n            $evens_index[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $min_index = array_search($min,\
    \ $evens);\n    return [$min, $evens_index[$min_index]];\n}\n", "    $evens =\
    \ [];\n    $evensIndex = [];\n    foreach ($arr as $key => $value) {\n       \
    \ if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evensIndex[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n \
    \   return [$min, $evensIndex[$minIndex]];\n}\n\nprint_r(pluck([4, 2, 3]));\n\
    print_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4,\
    \ 2]));", "    $even = [];\n    $even_index = [];\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n \
    \           $even_index[] = $key;\n        }\n    }\n    if (empty($even)) {\n\
    \        return [];\n    }\n    $min = min($even);\n    $min_index = array_search($min,\
    \ $even);\n    return [$min, $even_index[$min_index]];\n}\n\nprint_r(pluck([4,\
    \ 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    $evens = [];\n    $index = [];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (empty($evens)) {\n  \
    \      return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $evens);\n    return [$min, $index[$minIndex]];\n}\n\n$arr = [5, 0, 3, 0, 4,\
    \ 2];\nprint_r(pluck($arr));", "    $evens = [];\n    $indexes = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n            $indexes[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $evens);\n    return [$min, $indexes[$minIndex]];\n}\n\nprint_r(pluck([4, 2,\
    \ 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0,\
    \ 3, 0, 4, 2]));", "    $even = [];\n    $index = [];\n    $result = [];\n   \
    \ if (empty($arr)) {\n        return $result;\n    }\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n   \
    \     return $result;\n    }\n    $min = min($even);\n    $min_index = array_search($min,\
    \ $even);\n    $result[] = $min;\n    $result[] = $index[$min_index];\n    return\
    \ $result;\n}\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\n\
    print_r(pluck([5, 0, 3, 0, 4, 2]));", "    $evens = [];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $min_key = array_search($min, $arr);\n    return [$min,\
    \ $min_key];\n}\n", "    $even = [];\n    $index = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n   \
    \     return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    return [$min, $index[$key]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"<br>\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr\
    \ = [];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    $evens_index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_index[] = $key;\n        }\n    }\n    if (empty($evens)) {\n    \
    \    return [];\n    }\n    $min_even = min($evens);\n    $min_even_index = array_search($min_even,\
    \ $evens);\n    return [$min_even, $evens_index[$min_even_index]];\n}\n\n$arr\
    \ = [4, 2, 3];\nprint_r(pluck($arr));", "    $evens = array_filter($arr, function($value)\
    \ {\n        return $value % 2 == 0;\n    });\n    if (empty($evens)) {\n    \
    \    return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n\n/*\n * Complete the 'getTotalX' function\
    \ below.\n *\n * The function is expected to return an INTEGER.\n * The function\
    \ accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY\
    \ b\n */\n", "    $even = [];\n    $index = [];\n    $result = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[]\
    \ = $value;\n            $index[] = $key;\n        }\n    }\n    if (empty($even))\
    \ {\n        return $result;\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    $result[] = $min;\n    $result[] = $index[$key];\n    return $result;\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [1, 2, 3];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";",
  "    $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $evens[] = [$value, $key];\n        }\n    }\n    if\
    \ (empty($evens)) {\n        return [];\n    }\n    usort($evens, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1] <=> $b[1];\n\
    \        }\n        return $a[0] <=> $b[0];\n    });\n    return $evens[0];\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $even = [];\n    $index = [];\n    $result = [];\n    if (empty($arr)) {\n\
    \        return $result;\n    }\n    foreach ($arr as $key => $value) {\n    \
    \    if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return $result;\n\
    \    }\n    $min = min($even);\n    $key = array_search($min, $even);\n    $result[]\
    \ = $min;\n    $result[] = $index[$key];\n    return $result;\n}\n\n$arr = [5,\
    \ 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even = [];\n    $index = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $even[] = $value;\n            $index[] = $key;\n        }\n    }\n \
    \   if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n \
    \   $key = array_search($min, $even);\n    return [$min, $index[$key]];\n}\n\n\
    $arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [1, 2, 3];\n\
    print_r(pluck($arr));\necho \"<br>\";\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $evens[] = $value;\n        }\n    }\n    if (empty($evens)) {\n\
    \        return [];\n    }\n    $min = min($evens);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1,\
    \ 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));", "    $even\
    \ = [];\n    $index = [];\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n        return\
    \ $result;\n    }\n    $min = min($even);\n    $key = array_search($min, $even);\n\
    \    $result[] = $min;\n    $result[] = $index[$key];\n    return $result;\n}\n\
    \n$arr = [4, 2, 3];\n$arr1 = [1, 2, 3];\n$arr2 = [];\n$arr3 = [5, 0, 3, 0, 4,\
    \ 2];\nprint_r(pluck($arr));\nprint_r(pluck($arr1));\nprint_r(pluck($arr2));\n\
    print_r(pluck($arr3));", "    $evens = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        }\n\
    \    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $key = array_search($min, $arr);\n    return [$min, $key];\n}\n\necho '<pre>';\n\
    print_r(pluck([4, 2, 3]));\necho '</pre>';\necho '<pre>';\nprint_r(pluck([1, 2,\
    \ 3]));\necho '</pre>';\necho '<pre>';\nprint_r(pluck([]));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(pluck([5, 0, 3, 0, 4, 2]));\necho '</pre>';", "    $even\
    \ = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n\
    \        }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n\
    }\n\n$arr = [4, 2, 3];\nvar_dump(pluck($arr));\n$arr = [1, 2, 3];\nvar_dump(pluck($arr));\n\
    $arr = [];\nvar_dump(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));",
  "    $evens = array_filter($arr, function($v) {\n        return $v % 2 == 0;\n \
    \   });\n    if (count($evens) == 0) {\n        return [];\n    }\n    asort($evens);\n\
    \    $min = array_shift($evens);\n    $key = array_search($min, $arr);\n    return\
    \ [$min, $key];\n}\n\n/*\n * Complete the 'find_path' function below.\n *\n *\
    \ The function is expected to return a STRING.\n * The function accepts following\
    \ parameters:\n *  1. STRING maze\n *  2. INTEGER cost\n *  3. INTEGER savings\n\
    \ */\n", "    $evens = [];\n    $index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $index[] = $key;\n        }\n    }\n    if (empty($evens)) {\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n\
    \    return [$min, $index[$minIndex]];\n}\n\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1,\
    \ 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));", "    $even\
    \ = [];\n    $even_index = [];\n    for ($i = 0; $i < count($arr); $i++) {\n \
    \       if ($arr[$i] % 2 == 0) {\n            $even[] = $arr[$i];\n          \
    \  $even_index[] = $i;\n        }\n    }\n    if (count($even) > 0) {\n      \
    \  $min = min($even);\n        $index = array_search($min, $even);\n        return\
    \ [$min, $even_index[$index]];\n    } else {\n        return [];\n    }\n}\n\n\
    $arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";", "    $even = [];\n    $index\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n            $index[] = $key;\n        }\n\
    \    }\n    if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n}\n\n\
    $arr = [4, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return [];\n   \
    \ }\n    $min = min($even);\n    $minIndex = array_search($min, $even);\n    return\
    \ [$min, $index[$minIndex]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));",
  "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return [];\n   \
    \ }\n    $min = min($even);\n    $min_index = array_search($min, $even);\n   \
    \ return [$min, $index[$min_index]];\n}\n\n$arr = [4, 2, 3];\n$arr1 = [1, 2, 3];\n\
    $arr2 = [];\n$arr3 = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\nprint_r(pluck($arr1));\n\
    print_r(pluck($arr2));\nprint_r(pluck($arr3));", "    $even = array_filter($arr,\
    \ function($value) {\n        return $value % 2 == 0;\n    });\n    if (empty($even))\
    \ {\n        return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1,\
    \ 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));", "    $even\
    \ = [];\n    $index = [];\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $index[] = $key;\n        }\n    }\n    if (count($even) > 0) {\n        $min\
    \ = min($even);\n        $key = array_search($min, $even);\n        $result[]\
    \ = $min;\n        $result[] = $index[$key];\n    }\n    return $result;\n}\n\n\
    $arr = [4, 2, 3];\n$arr1 = [1, 2, 3];\n$arr2 = [];\n$arr3 = [5, 0, 3, 0, 4, 2];\n\
    print_r(pluck($arr));\nprint_r(pluck($arr1));\nprint_r(pluck($arr2));\nprint_r(pluck($arr3));",
  "    $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));",
  "    $even = [];\n    $even_index = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $even[] = $value;\n            $even_index[]\
    \ = $key;\n        }\n    }\n    if (count($even) == 0) {\n        return [];\n\
    \    }\n    $min = min($even);\n    $min_index = array_search($min, $even);\n\
    \    return [$min, $even_index[$min_index]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    $arr = [1, 2, 3];\nprint_r(pluck($arr));\n$arr = [];\nprint_r(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even = [];\n    $index\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n            $index[] = $key;\n        }\n\
    \    }\n    if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n}\n\n\
    print_r(pluck([4, 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\n\
    print_r(pluck([5, 0, 3, 0, 4, 2]));", "    $evens = [];\n    $evens_index = [];\n\
    \    $result = [];\n    if(empty($arr)) {\n        return $result;\n    }\n  \
    \  foreach($arr as $key => $value) {\n        if($value % 2 == 0) {\n        \
    \    $evens[] = $value;\n            $evens_index[] = $key;\n        }\n    }\n\
    \    if(empty($evens)) {\n        return $result;\n    }\n    $min_even = min($evens);\n\
    \    $min_even_index = array_search($min_even, $evens);\n    $result[] = $min_even;\n\
    \    $result[] = $evens_index[$min_even_index];\n    return $result;\n}\n\n$arr\
    \ = [4, 2, 3];\nprint_r(pluck($arr));\necho '<br>';\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    echo '<br>';\n$arr = [];\nprint_r(pluck($arr));\necho '<br>';\n$arr = [5, 0, 3,\
    \ 0, 4, 2];\nprint_r(pluck($arr));\necho '<br>';", "    $evens = array_filter($arr,\
    \ function($value) {\n        return $value % 2 == 0;\n    });\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr =\
    \ [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    echo \"\\n\";", "    $even = [];\n    $index = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (count($even) == 0) {\n\
    \        return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    return [$min, $index[$key]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    echo '<br>';\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho '<br>';\n$arr = [];\n\
    print_r(pluck($arr));\necho '<br>';\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $even = [];\n    $index = [];\n    $result = [];\n    if (empty($arr)) {\n\
    \        return $result;\n    }\n    foreach ($arr as $key => $value) {\n    \
    \    if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return $result;\n\
    \    }\n    $min = min($even);\n    $key = array_search($min, $even);\n    $result[]\
    \ = $min;\n    $result[] = $index[$key];\n    return $result;\n}\n\n$arr = [4,\
    \ 2, 3];\n$arr1 = [1, 2, 3];\n$arr2 = [];\n$arr3 = [5, 0, 3, 0, 4, 2];\n\nprint_r(pluck($arr));\n\
    print_r(pluck($arr1));\nprint_r(pluck($arr2));\nprint_r(pluck($arr3));", "   \
    \ $even = [];\n    $evenIndex = [];\n    $result = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $evenIndex[] = $key;\n        }\n    }\n    if (count($even) == 0)\
    \ {\n        return $result;\n    }\n    $min = min($even);\n    $minIndex = array_search($min,\
    \ $even);\n    $result[] = $min;\n    $result[] = $evenIndex[$minIndex];\n   \
    \ return $result;\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\"\
    ;\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [];\nprint_r(pluck($arr));\n\
    echo \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even\
    \ = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n\
    \        }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n\
    }\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even = array_filter($arr,\
    \ function($v) {\n        return $v % 2 == 0;\n    });\n    if (empty($even))\
    \ {\n        return [];\n    }\n    $min = min($even);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1,\
    \ 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));", "    $evens\
    \ = [];\n    $evens_index = [];\n    foreach ($arr as $key => $value) {\n    \
    \    if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evens_index[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min_even = min($evens);\n    $min_even_index = array_search($min_even,\
    \ $evens);\n    return [$min_even, $evens_index[$min_even_index]];\n}\n\n$arr\
    \ = [4, 2, 3];\nvar_dump(pluck($arr));\n\n$arr = [1, 2, 3];\nvar_dump(pluck($arr));\n\
    \n$arr = [];\nvar_dump(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));",
  "    $even = array_filter($arr, function($value) {\n        return $value % 2 ==\
    \ 0;\n    });\n    if (count($even) == 0) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $index = array_search($min, $arr);\n    return [$min, $index];\n\
    }\n\n/*\n * Complete the 'getTotalX' function below.\n *\n * The function is expected\
    \ to return an INTEGER.\n * The function accepts following parameters:\n *  1.\
    \ INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n", "    $evens = [];\n    $evensIndex\
    \ = [];\n    $result = [];\n    if (empty($arr)) {\n        return $result;\n\
    \    }\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $evens[] = $value;\n            $evensIndex[] = $key;\n        }\n\
    \    }\n    if (empty($evens)) {\n        return $result;\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    $result[] = $min;\n    $result[]\
    \ = $evensIndex[$minIndex];\n    return $result;\n}\n\n/*\n * Complete the 'getTotalX'\
    \ function below.\n *\n * The function is expected to return an INTEGER.\n * The\
    \ function accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY\
    \ b\n */\n", "    $evens = [];\n    $evensIndex = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $evensIndex[] = $key;\n        }\n    }\n    if (empty($evens)) {\n\
    \        return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $evens);\n    return [$min, $evensIndex[$minIndex]];\n}\n\nprint_r(pluck([4,\
    \ 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    $even = [];\n    $index = [];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n   \
    \     return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    return [$min, $index[$key]];\n}\n\nprint_r(pluck([4, 2, 3]));\n\
    print_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4,\
    \ 2]));", "    $evens = [];\n    $evens_index = [];\n    $evens_index_min = 0;\n\
    \    $evens_min = 0;\n    $evens_count = 0;\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_index[] = $key;\n            $evens_count++;\n        }\n    }\n \
    \   if ($evens_count == 0) {\n        return [];\n    }\n    $evens_min = min($evens);\n\
    \    $evens_index_min = array_search($evens_min, $evens);\n    return [$evens_min,\
    \ $evens_index[$evens_index_min]];\n}\n\n/*\n * Complete the 'getTotalX' function\
    \ below.\n *\n * The function is expected to return an INTEGER.\n * The function\
    \ accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY\
    \ b\n */\n", "    if (empty($arr)) {\n        return [];\n    }\n    $evens =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $evens[$key] = $value;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    asort($evens);\n    $result = array_keys($evens);\n\
    \    return [$evens[$result[0]], $result[0]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"<br>\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr\
    \ = [];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return [];\n   \
    \ }\n    $min = min($even);\n    $key = array_search($min, $even);\n    return\
    \ [$min, $index[$key]];\n}\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1, 2, 3]));\n\
    print_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));", "    $evens = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $evens[] = $value;\n        }\n    }\n    if (empty($evens)) {\n    \
    \    return [];\n    }\n    $min = min($evens);\n    $minKey = array_search($min,\
    \ $arr);\n    return [$min, $minKey];\n}\n\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1,\
    \ 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));", "    $even\
    \ = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n\
    \        }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n\
    }\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even = [];\n  \
    \  $index = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n   \
    \     }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min =\
    \ min($even);\n    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n\
    }\n\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\n\
    print_r(pluck([5, 0, 3, 0, 4, 2]));", "    $evens = [];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $min_key = array_search($min, $arr);\n    return [$min,\
    \ $min_key];\n}\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\n\
    print_r(pluck([5, 0, 3, 0, 4, 2]));", "    $even = [];\n    $index = [];\n   \
    \ foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n       \
    \     $even[] = $value;\n            $index[] = $key;\n        }\n    }\n    if\
    \ (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n    $key\
    \ = array_search($min, $even);\n    return [$min, $index[$key]];\n}\nprint_r(pluck([4,\
    \ 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "\t$even = [];\n\t$index = [];\n\tforeach ($arr as $key\
    \ => $value) {\n\t\tif ($value % 2 == 0) {\n\t\t\t$even[] = $value;\n\t\t\t$index[]\
    \ = $key;\n\t\t}\n\t}\n\tif (empty($even)) {\n\t\treturn [];\n\t}\n\t$min = min($even);\n\
    \t$key = array_search($min, $even);\n\treturn [$min, $index[$key]];\n}\n\n$arr\
    \ = [4, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    $evens_index = [];\n    $evens_index_sorted = [];\n    $result\
    \ = [];\n    if (empty($arr)) {\n        return $result;\n    }\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n            $evens_index[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return $result;\n    }\n    $evens_sorted = $evens;\n    sort($evens_sorted);\n\
    \    $min_even = $evens_sorted[0];\n    $min_even_key = array_search($min_even,\
    \ $evens);\n    $min_even_index = $evens_index[$min_even_key];\n    $result[]\
    \ = $min_even;\n    $result[] = $min_even_index;\n    return $result;\n}\n\n$arr\
    \ = [4, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";", "    $even = [];\n    $even_index\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n            $even_index[] = $key;\n      \
    \  }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $min_index = array_search($min, $even);\n    return [$min, $even_index[$min_index]];\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    $evens_index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_index[] = $key;\n        }\n    }\n    if (empty($evens)) {\n    \
    \    return [];\n    }\n    $min = min($evens);\n    $min_index = array_search($min,\
    \ $evens);\n    return [$min, $evens_index[$min_index]];\n}\n\n$arr = [4, 2, 3];\n\
    $arr1 = [1, 2, 3];\n$arr2 = [];\n$arr3 = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    print_r(pluck($arr1));\nprint_r(pluck($arr2));\nprint_r(pluck($arr3));", "   \
    \ $even = array_filter($arr, function($val) {\n        return $val % 2 == 0;\n\
    \    });\n    if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $key = array_search($min, $arr);\n    return [$min, $key];\n}\n\n$arr = [4,\
    \ 2, 3];\nprint_r(pluck($arr));\n\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\n\
    $arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return [];\n   \
    \ }\n    $min = min($even);\n    $minIndex = array_search($min, $even);\n    return\
    \ [$min, $index[$minIndex]];\n}\n\n$arr = [4, 2, 3];\nvar_dump(pluck($arr));\n\
    $arr = [1, 2, 3];\nvar_dump(pluck($arr));\n$arr = [];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));", "    $even = [];\n    $index\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n            $index[] = $key;\n        }\n\
    \    }\n    if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $min_index = array_search($min, $even);\n    return [$min, $index[$min_index]];\n\
    }\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n \
    \   $evensIndex = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n            $evensIndex[] = $key;\n\
    \        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n\
    \    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n    return\
    \ [$min, $evensIndex[$minIndex]];\n}\n\n$arr = [4, 2, 3];\n$arr2 = [1, 2, 3];\n\
    $arr3 = [];\n$arr4 = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\nprint_r(pluck($arr2));\n\
    print_r(pluck($arr3));\nprint_r(pluck($arr4));", "\t$evens = array_filter($arr,\
    \ function($n) {\n\t\treturn $n % 2 == 0;\n\t});\n\tif (empty($evens)) {\n\t\t\
    return [];\n\t}\n\t$min = min($evens);\n\t$index = array_search($min, $arr);\n\
    \treturn [$min, $index];\n}\n", "    $even = [];\n    $index = [];\n    $result\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n            $index[] = $key;\n        }\n\
    \    }\n    if (count($even) == 0) {\n        return $result;\n    }\n    $min\
    \ = min($even);\n    $result[] = $min;\n    $result[] = $index[array_search($min,\
    \ $even)];\n    return $result;\n}\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n  \
    \      if ($value % 2 == 0) {\n            $evens[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min = min($evens);\n    $key = array_search($min, $evens);\n    return\
    \ [$min, $index[$key]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"\
    \\n\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    echo \"\\n\";", "    if (empty($arr)) {\n        return [];\n    }\n    $even\
    \ = [];\n    $odd = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[$key] = $value;\n        } else {\n         \
    \   $odd[$key] = $value;\n        }\n    }\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $key = array_search($min, $even);\n\
    \    return [$min, $key];\n}\n\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1,\
    \ 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));", "    $evens\
    \ = [];\n    $evens_index = [];\n    foreach ($arr as $key => $value) {\n    \
    \    if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evens_index[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min_even = min($evens);\n    $min_even_index = array_search($min_even,\
    \ $evens);\n    return [$min_even, $evens_index[$min_even_index]];\n}\n", "  \
    \  $even = [];\n    $index = [];\n    for ($i = 0; $i < count($arr); $i++) {\n\
    \        if ($arr[$i] % 2 == 0) {\n            $even[] = $arr[$i];\n         \
    \   $index[] = $i;\n        }\n    }\n    if (count($even) == 0) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $key = array_search($min, $even);\n\
    \    return [$min, $index[$key]];\n}\n\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1,\
    \ 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));", "    $evens\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = [$value, $key];\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = $evens[0];\n    foreach ($evens as\
    \ $value) {\n        if ($value[0] < $min[0]) {\n            $min = $value;\n\
    \        }\n    }\n    return $min;\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"<br>\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr\
    \ = [];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    $evensIndex = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evensIndex[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n \
    \   return [$min, $evensIndex[$minIndex]];\n}\n\nprint_r(pluck([4, 2, 3]));\n\
    print_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4,\
    \ 2]));", "    $even = [];\n    $index = [];\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] % 2 == 0) {\n            $even[] = $arr[$i];\n\
    \            $index[] = $i;\n        }\n    }\n    if (count($even) == 0) {\n\
    \        return [];\n    }\n    $min = min($even);\n    $min_index = array_search($min,\
    \ $even);\n    return [$min, $index[$min_index]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"<br>\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr\
    \ = [];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return [];\n   \
    \ }\n    $min = min($even);\n    $key = array_search($min, $even);\n    return\
    \ [$min, $index[$key]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"\
    <br>\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [];\n\
    print_r(pluck($arr));\necho \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (count($even) == 0) {\n        return [];\n\
    \    }\n    $min = min($even);\n    $key = array_search($min, $even);\n    return\
    \ [$min, $index[$key]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n$arr =\
    \ [1, 2, 3];\nprint_r(pluck($arr));\n$arr = [];\nprint_r(pluck($arr));\n$arr =\
    \ [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = array_filter($arr,\
    \ function($n) {\n        return $n % 2 == 0;\n    });\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n\n/*\n * Complete the 'getTotalX' function\
    \ below.\n *\n * The function is expected to return an INTEGER.\n * The function\
    \ accepts following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY\
    \ b\n */\n", "    $evens = [];\n    foreach ($arr as $key => $value) {\n     \
    \   if ($value % 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n\
    \    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $min_key = array_search($min, $arr);\n    return [$min, $min_key];\n}\n\n\
    $arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[]\
    \ = $value;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $min_key = array_search($min, $arr);\n  \
    \  return [$min, $min_key];\n}\n\nvar_dump(pluck([4, 2, 3]));\nvar_dump(pluck([1,\
    \ 2, 3]));\nvar_dump(pluck([]));\nvar_dump(pluck([5, 0, 3, 0, 4, 2]));", "   \
    \ $evens = [];\n    $evensIndex = [];\n    $evensValues = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n            $evensIndex[] = $key;\n            $evensValues[] = $value;\n\
    \        }\n    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min\
    \ = min($evens);\n    $minIndex = array_search($min, $evens);\n    return [$evensValues[$minIndex],\
    \ $evensIndex[$minIndex]];\n}\n\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1,\
    \ 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));", "    $even\
    \ = [];\n    $index = [];\n    $result = [];\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] % 2 == 0) {\n            $even[] = $arr[$i];\n\
    \            $index[] = $i;\n        }\n    }\n    if (count($even) == 0) {\n\
    \        return $result;\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    $result[] = $min;\n    $result[] = $index[$key];\n    return $result;\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [1, 2, 3];\n\
    print_r(pluck($arr));\necho \"<br>\";\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even =\
    \ [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n \
    \       }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [1, 2, 3];\n\
    print_r(pluck($arr));\necho \"<br>\";\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens =\
    \ array_filter($arr, function($v) {\n        return $v % 2 == 0;\n    });\n  \
    \  if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $index = array_search($min, $arr);\n    return [$min, $index];\n}\n\n$arr\
    \ = [4, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = array_filter($arr, function($n) {\n        return $n % 2 == 0;\n \
    \   });\n    if (count($evens) == 0) {\n        return [];\n    }\n    $min =\
    \ min($evens);\n    return [$min, array_search($min, $arr)];\n}\n\n$arr = [4,\
    \ 2, 3];\nprint_r(pluck($arr));\n\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\n\
    $arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return [];\n   \
    \ }\n    $min = min($even);\n    $minIndex = array_search($min, $even);\n    return\
    \ [$min, $index[$minIndex]];\n}\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $even = [];\n    $even_index = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $even[] = $value;\n            $even_index[]\
    \ = $key;\n        }\n    }\n    if (count($even) == 0) {\n        return [];\n\
    \    }\n    $min = min($even);\n    $min_index = array_search($min, $even);\n\
    \    return [$min, $even_index[$min_index]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));",
  "    $even = array_filter($arr, function($value) {\n        return $value % 2 ==\
    \ 0;\n    });\n    if (empty($even)) {\n        return [];\n    }\n    $min =\
    \ min($even);\n    $key = array_search($min, $arr);\n    return [$min, $key];\n\
    }\n\necho \"<pre>\";\nprint_r(pluck([4, 2, 3]));\necho \"</pre>\";\n\necho \"\
    <pre>\";\nprint_r(pluck([1, 2, 3]));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(pluck([]));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(pluck([5, 0, 3, 0, 4, 2]));\necho\
    \ \"</pre>\";", "    $even = [];\n    $index = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n   \
    \     return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    return [$min, $index[$key]];\n}\n\n$arr = [4, 2, 3];\nvar_dump(pluck($arr));\n\
    $arr = [1, 2, 3];\nvar_dump(pluck($arr));\n$arr = [];\nvar_dump(pluck($arr));\n\
    $arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));", "    $even = [];\n    $index\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n            $index[] = $key;\n        }\n\
    \    }\n    if (count($even) == 0) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n}\n\n\
    print_r(pluck([4, 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\n\
    print_r(pluck([5, 0, 3, 0, 4, 2]));", "    $even = [];\n    $index = [];\n   \
    \ foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n       \
    \     $even[] = $value;\n            $index[] = $key;\n        }\n    }\n    if\
    \ (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n    $key\
    \ = array_search($min, $even);\n    return [$min, $index[$key]];\n}\n\nprint_r(pluck([4,\
    \ 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    $evens = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = [$value, $key];\n\
    \        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n\
    \    $min = $evens[0];\n    foreach ($evens as $even) {\n        if ($even[0]\
    \ < $min[0]) {\n            $min = $even;\n        }\n    }\n    return $min;\n\
    }\n", "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $key = array_search($min, $even);\n\
    \    return [$min, $index[$key]];\n}\n\n$arr = [4, 2, 3];\n$arr1 = [1, 2, 3];\n\
    $arr2 = [];\n$arr3 = [5, 0, 3, 0, 4, 2];\n\nprint_r(pluck($arr));\nprint_r(pluck($arr1));\n\
    print_r(pluck($arr2));\nprint_r(pluck($arr3));", "    $even = [];\n    $index\
    \ = [];\n    $result = [];\n    if (empty($arr)) {\n        return $result;\n\
    \    }\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $even[] = $value;\n            $index[] = $key;\n        }\n    }\n\
    \    if (empty($even)) {\n        return $result;\n    }\n    $min = min($even);\n\
    \    $result[] = $min;\n    $result[] = $index[array_search($min, $even)];\n \
    \   return $result;\n}\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", " \
    \   $evens = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n \
    \       if ($value % 2 == 0) {\n            $evens[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min = min($evens);\n    $min_index = array_search($min, $evens);\n\
    \    return [$min, $index[$min_index]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));",
  "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return [];\n   \
    \ }\n    $min = min($even);\n    $key = array_search($min, $even);\n    return\
    \ [$min, $index[$key]];\n}\n\n$arr = [4, 2, 3];\n$arr1 = [1, 2, 3];\n$arr2 = [];\n\
    $arr3 = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\nprint_r(pluck($arr1));\nprint_r(pluck($arr2));\n\
    print_r(pluck($arr3));", "    $even = [];\n    $index = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[] =\
    \ $value;\n            $index[] = $key;\n        }\n    }\n    if (empty($even))\
    \ {\n        return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    return [$min, $index[$key]];\n}\n\necho '<pre>';\nprint_r(pluck([4,\
    \ 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5,\
    \ 0, 3, 0, 4, 2]));\necho '</pre>';", "    $even = [];\n    $evenIndex = [];\n\
    \    $result = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[] = $value;\n            $evenIndex[] = $key;\n\
    \        }\n    }\n    if (count($even) == 0) {\n        return [];\n    }\n \
    \   $min = min($even);\n    $index = array_search($min, $even);\n    $result[]\
    \ = $min;\n    $result[] = $evenIndex[$index];\n    return $result;\n}\n\n$arr\
    \ = [4, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"<br>\";\n$arr = [];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [5,\
    \ 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even = [];\n    $index = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $even[] = $value;\n            $index[] = $key;\n        }\n    }\n \
    \   if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n \
    \   $key = array_search($min, $even);\n    return [$min, $index[$key]];\n}\n\n\
    $arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [1, 2, 3];\n\
    print_r(pluck($arr));\necho \"<br>\";\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even =\
    \ [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n \
    \       }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [1, 2, 3];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";",
  "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return [];\n   \
    \ }\n    $min = min($even);\n    $key = array_search($min, $even);\n    return\
    \ [$min, $index[$key]];\n}\n\n$arr = [1, 2, 3];\nprint_r(pluck($arr));", "   \
    \ $evens = array_filter($arr, function($v) {\n        return $v % 2 == 0;\n  \
    \  });\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $key = array_search($min, $arr);\n    return [$min, $key];\n}\n\n$arr = [4,\
    \ 2, 3];\nprint_r(pluck($arr));\n\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\n\
    $arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    $indexes = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $evens[] = $value;\n            $indexes[]\
    \ = $key;\n        }\n    }\n    if (count($evens) == 0) {\n        return [];\n\
    \    }\n    $min = min($evens);\n    $min_index = array_search($min, $evens);\n\
    \    return [$min, $indexes[$min_index]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n    $indexes\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n            $indexes[] = $key;\n        }\n\
    \    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $indexes[$minIndex]];\n\
    }\n\nvar_dump(pluck([4, 2, 3]));\nvar_dump(pluck([1, 2, 3]));\nvar_dump(pluck([]));\n\
    var_dump(pluck([5, 0, 3, 0, 4, 2]));", "    $even = array_filter($arr, function($value)\
    \ {\n        return $value % 2 == 0;\n    });\n    if(empty($even)) {\n      \
    \  return [];\n    }\n    $min = min($even);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n\n$arr = array(4, 2, 3);\nprint_r(pluck($arr));\n\
    echo \"<br>\";\n$arr = array(1, 2, 3);\nprint_r(pluck($arr));\necho \"<br>\";\n\
    $arr = array();\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = array(5, 0, 3,\
    \ 0, 4, 2);\nprint_r(pluck($arr));\necho \"<br>\";", "    $even = [];\n    $index\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n            $index[] = $key;\n        }\n\
    \    }\n    if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n}\n\n\
    $arr = [1, 2, 3];\nprint_r(pluck($arr));", "    $even = [];\n    $index = [];\n\
    \    $result = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n \
    \       }\n    }\n    if (count($even) == 0) {\n        return $result;\n    }\n\
    \    $min = min($even);\n    $key = array_search($min, $even);\n    $result[]\
    \ = $min;\n    $result[] = $index[$key];\n    return $result;\n}\n\n$arr = [5,\
    \ 0, 3, 0, 4, 2];\n$arr1 = [1, 2, 3];\n$arr2 = [4, 2, 3];\n$arr3 = [];\nprint_r(pluck($arr));\n\
    print_r(pluck($arr1));\nprint_r(pluck($arr2));\nprint_r(pluck($arr3));", "   \
    \ $even = [];\n    $index = [];\n    for ($i = 0; $i < count($arr); $i++) {\n\
    \        if ($arr[$i] % 2 == 0) {\n            $even[] = $arr[$i];\n         \
    \   $index[] = $i;\n        }\n    }\n    if (count($even) == 0) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $minIndex = array_search($min, $even);\n\
    \    return [$min, $index[$minIndex]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));",
  "    $even = [];\n    $evenIndex = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $even[] = $value;\n            $evenIndex[]\
    \ = $key;\n        }\n    }\n    if (count($even) == 0) {\n        return [];\n\
    \    }\n    $min = min($even);\n    $index = array_search($min, $even);\n    return\
    \ [$min, $evenIndex[$index]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));",
  "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return [];\n   \
    \ }\n    $min = min($even);\n    $min_index = array_search($min, $even);\n   \
    \ return [$min, $index[$min_index]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));",
  "    $evens = array_filter($arr, function($n) {\n        return $n % 2 == 0;\n \
    \   });\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $index = array_search($min, $arr);\n    return [$min, $index];\n}\n\n$arr\
    \ = [4, 2, 3];\n$arr = [1, 2, 3];\n$arr = [];\n$arr = [5, 0, 3, 0, 4, 2];\n\n\
    print_r(pluck($arr));", "    $evens = [];\n    $indexes = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n            $indexes[] = $key;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $min_index = array_search($min,\
    \ $evens);\n    return [$min, $indexes[$min_index]];\n}\n\n$arr = [4, 2, 3];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";", "    $evens = array_filter($arr,\
    \ function($val) {\n        return $val % 2 == 0;\n    });\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $arr);\n    return [$min, $minIndex];\n}\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $evens[] = [$value, $key];\n        }\n    }\n    if\
    \ (empty($evens)) {\n        return [];\n    }\n    usort($evens, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $a[1] <=> $b[1];\n\
    \        }\n        return $a[0] <=> $b[0];\n    });\n    return $evens[0];\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    $arr = [];\nprint_r(pluck($arr));\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = array_filter($arr, function($n) { return $n % 2 == 0; });\n    if\
    \ (count($evens) == 0) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $key = array_search($min, $arr);\n    return [$min, $key];\n}\n\n$arr = [4,\
    \ 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";", "    $evens = array_filter($arr,\
    \ function($v) {\n        return $v % 2 == 0;\n    });\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n", "    $even = [];\n    $index = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $even[] = $value;\n            $index[] = $key;\n        }\n    }\n \
    \   if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n \
    \   $key = array_search($min, $even);\n    return [$min, $index[$key]];\n}\n\n\
    $arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [1, 2, 3];\n\
    print_r(pluck($arr));\necho \"<br>\";\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even =\
    \ [];\n    $index = [];\n    $res = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n        return\
    \ [];\n    }\n    $min = min($even);\n    $min_index = array_search($min, $even);\n\
    \    $res[] = $min;\n    $res[] = $index[$min_index];\n    return $res;\n}\n\n\
    $arr = [4, 2, 3];\nprint_r(pluck($arr));", "    $result = [];\n    $min = PHP_INT_MAX;\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0 && $value\
    \ < $min) {\n            $min = $value;\n            $result[0] = $value;\n  \
    \          $result[1] = $key;\n        }\n    }\n    return $result;\n}\n\n$arr\
    \ = [4, 2, 3];\n$arr1 = [1, 2, 3];\n$arr2 = [];\n$arr3 = [5, 0, 3, 0, 4, 2];\n\
    \nprint_r(pluck($arr));\nprint_r(pluck($arr1));\nprint_r(pluck($arr2));\nprint_r(pluck($arr3));",
  "    $evens = [];\n    $result = [];\n    foreach ($arr as $key => $value) {\n \
    \       if ($value % 2 == 0) {\n            $evens[] = $value;\n        }\n  \
    \  }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $result[] = $min;\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ == $min) {\n            $result[] = $key;\n            break;\n        }\n \
    \   }\n    return $result;\n}\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1, 2,\
    \ 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));", "    $even_arr\
    \ = [];\n    $index_arr = [];\n    $result = [];\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value % 2 == 0) {\n            $even_arr[] = $value;\n\
    \            $index_arr[] = $key;\n        }\n    }\n    if (empty($even_arr))\
    \ {\n        return $result;\n    }\n    $min_value = min($even_arr);\n    $min_index\
    \ = min($index_arr);\n    $result[] = $min_value;\n    $result[] = $min_index;\n\
    \    return $result;\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\"\
    ;\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [];\nprint_r(pluck($arr));\n\
    echo \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even\
    \ = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n\
    \        }\n    }\n    if (count($even) == 0) {\n        return [];\n    }\n \
    \   $min = min($even);\n    $minIndex = array_search($min, $even);\n    return\
    \ [$min, $index[$minIndex]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));",
  "    $even = array_filter($arr, function($value) {\n        return $value % 2 ==\
    \ 0;\n    });\n    if (empty($even)) {\n        return [];\n    }\n    $min =\
    \ min($even);\n    $key = array_search($min, $arr);\n    return [$min, $key];\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [];\nprint_r(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    $indexes = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $evens[] = $value;\n            $indexes[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min = min($evens);\n    $index = array_search($min, $evens);\n    return\
    \ [$min, $indexes[$index]];\n}\n\n/*\n * Complete the 'getTotalX' function below.\n\
    \ *\n * The function is expected to return an INTEGER.\n * The function accepts\
    \ following parameters:\n *  1. INTEGER_ARRAY a\n *  2. INTEGER_ARRAY b\n */\n",
  "    $evens = [];\n    $evens_index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_index[] = $key;\n        }\n    }\n    if (empty($evens)) {\n    \
    \    return [];\n    }\n    $min_even = min($evens);\n    $min_even_index = array_search($min_even,\
    \ $evens);\n    return [$min_even, $evens_index[$min_even_index]];\n}\n\n$arr\
    \ = [4, 2, 3];\nvar_dump(pluck($arr));\n\n$arr = [1, 2, 3];\nvar_dump(pluck($arr));\n\
    \n$arr = [];\nvar_dump(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));",
  "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return [];\n   \
    \ }\n    $min = min($even);\n    $min_index = array_search($min, $even);\n   \
    \ return [$min, $index[$min_index]];\n}\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $even = [];\n    $index = [];\n    $result = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (!empty($even)) {\n  \
    \      $min = min($even);\n        $key = array_search($min, $even);\n       \
    \ $result[] = $min;\n        $result[] = $index[$key];\n    }\n    return $result;\n\
    }\n$arr = [4, 2, 3];\nprint_r(pluck($arr));", "    $even = [];\n    $index = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $even[] = $value;\n            $index[] = $key;\n        }\n    }\n \
    \   if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n \
    \   $minIndex = array_search($min, $even);\n    return [$min, $index[$minIndex]];\n\
    }\n\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\n\
    print_r(pluck([5, 0, 3, 0, 4, 2]));", "    $evens = array_filter($arr, function($n)\
    \ {\n        return $n % 2 == 0;\n    });\n    if (empty($evens)) {\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $key = array_search($min, $arr);\n\
    \    return [$min, $key];\n}\n", "    $evens = [];\n    $evensIndex = [];\n  \
    \  foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n      \
    \      $evens[] = $value;\n            $evensIndex[] = $key;\n        }\n    }\n\
    \    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $evensIndex[$minIndex]];\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [1, 2, 3];\n\
    print_r(pluck($arr));\necho \"<br>\";\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens =\
    \ [];\n    $indexes = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $evens[] = $value;\n            $indexes[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n \
    \   return [$min, $indexes[$minIndex]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr =\
    \ [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    echo \"\\n\";", "    $evens = array_filter($arr, function($n) {\n        return\
    \ $n % 2 == 0;\n    });\n    if (count($evens) == 0) {\n        return [];\n \
    \   }\n    $min = min($evens);\n    $key = array_search($min, $arr);\n    return\
    \ [$min, $key];\n}\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\n\
    print_r(pluck([5, 0, 3, 0, 4, 2]));", "    $even = [];\n    $index = [];\n   \
    \ $result = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n   \
    \     }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min =\
    \ min($even);\n    $key = array_search($min, $even);\n    $result[] = $min;\n\
    \    $result[] = $index[$key];\n    return $result;\n}\n\n$arr = [4, 2, 3];\n\
    $arr1 = [1, 2, 3];\n$arr2 = [];\n$arr3 = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    print_r(pluck($arr1));\nprint_r(pluck($arr2));\nprint_r(pluck($arr3));", "   \
    \ $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n    \
    \    if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return [];\n   \
    \ }\n    $min = min($even);\n    $min_index = array_search($min, $even);\n   \
    \ return [$min, $index[$min_index]];\n}\n\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1,\
    \ 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));", "    $even\
    \ = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n\
    \        }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [1, 2, 3];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";",
  "    $evens = array_filter($arr, function($item) {\n        return $item % 2 ==\
    \ 0;\n    });\n    if (empty($evens)) {\n        return [];\n    }\n    $min =\
    \ min($evens);\n    $index = array_search($min, $arr);\n    return [$min, $index];\n\
    }\n\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\n\
    print_r(pluck([5, 0, 3, 0, 4, 2]));", "    $even = [];\n    $even_index = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $even[] = $value;\n            $even_index[] = $key;\n        }\n   \
    \ }\n    if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $min_index = array_search($min, $even);\n    return [$min, $even_index[$min_index]];\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));", "    $even = [];\n    $index =\
    \ [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $even[] = $value;\n            $index[] = $key;\n        }\n    }\n\
    \    if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $minIndex = array_search($min, $even);\n    return [$min, $index[$minIndex]];\n\
    }\n\n$arr = [4, 2, 3];\n$arr1 = [1, 2, 3];\n$arr2 = [];\n$arr3 = [5, 0, 3, 0,\
    \ 4, 2];\nprint_r(pluck($arr));\nprint_r(pluck($arr1));\nprint_r(pluck($arr2));\n\
    print_r(pluck($arr3));", "    $even = [];\n    $even_index = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[]\
    \ = $value;\n            $even_index[] = $key;\n        }\n    }\n    if (empty($even))\
    \ {\n        return [];\n    }\n    $min = min($even);\n    $min_index = array_search($min,\
    \ $even);\n    return [$min, $even_index[$min_index]];\n}\n\nprint_r(pluck([4,\
    \ 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    $even = [];\n    $index = [];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (count($even) == 0) {\n\
    \        return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    return [$min, $index[$key]];\n}\n\necho '<pre>';\nprint_r(pluck([4,\
    \ 2, 3]));\necho '</pre>';\n\necho '<pre>';\nprint_r(pluck([1, 2, 3]));\necho\
    \ '</pre>';\n\necho '<pre>';\nprint_r(pluck([]));\necho '</pre>';\n\necho '<pre>';\n\
    print_r(pluck([5, 0, 3, 0, 4, 2]));\necho '</pre>';", "    $even = [];\n    $index\
    \ = [];\n    $result = [];\n    if (empty($arr)) {\n        return $result;\n\
    \    }\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $even[] = $value;\n            $index[] = $key;\n        }\n    }\n\
    \    if (empty($even)) {\n        return $result;\n    }\n    $min = min($even);\n\
    \    $min_index = array_search($min, $even);\n    $result[] = $min;\n    $result[]\
    \ = $index[$min_index];\n    return $result;\n}\n\n$arr = [5, 0, 3, 0, 4, 2];\n\
    print_r(pluck($arr));", "    $even = [];\n    $even_index = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[] =\
    \ $value;\n            $even_index[] = $key;\n        }\n    }\n    if (count($even)\
    \ == 0) {\n        return [];\n    }\n    $min = min($even);\n    $index = array_search($min,\
    \ $even);\n    return [$min, $even_index[$index]];\n}\n\n$arr = [5, 0, 3, 0, 4,\
    \ 2];\nprint_r(pluck($arr));", "    $even = [];\n    $even_index = [];\n    foreach\
    \ ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[]\
    \ = $value;\n            $even_index[] = $key;\n        }\n    }\n    if (empty($even))\
    \ {\n        return [];\n    }\n    $min = min($even);\n    $min_index = array_search($min,\
    \ $even);\n    return [$min, $even_index[$min_index]];\n}\n\nprint_r(pluck([4,\
    \ 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    $even = [];\n    $evenIndex = [];\n    $result = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $even[] = $value;\n            $evenIndex[] = $key;\n        }\n    }\n\
    \    if (count($even) == 0) {\n        return $result;\n    }\n    $min = min($even);\n\
    \    $index = array_search($min, $even);\n    $result[] = $min;\n    $result[]\
    \ = $evenIndex[$index];\n    return $result;\n}\n\n$arr = [4, 2, 3];\n$arr1 =\
    \ [1, 2, 3];\n$arr2 = [];\n$arr3 = [5, 0, 3, 0, 4, 2];\n\nprint_r(pluck($arr));\n\
    print_r(pluck($arr1));\nprint_r(pluck($arr2));\nprint_r(pluck($arr3));", "   \
    \ $even = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2\
    \ == 0) {\n            $even[] = $value;\n        }\n    }\n    if (empty($even))\
    \ {\n        return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr =\
    \ [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    echo \"\\n\";", "    $even = [];\n    $index = [];\n    $result = [];\n    if\
    \ (empty($arr)) {\n        return $result;\n    }\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n \
    \           $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n    \
    \    return $result;\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    $result[] = $min;\n    $result[] = $index[$key];\n    return $result;\n\
    }\n\n$arr = [4, 2, 3];\n$arr1 = [1, 2, 3];\n$arr2 = [];\n$arr3 = [5, 0, 3, 0,\
    \ 4, 2];\nprint_r(pluck($arr));\nprint_r(pluck($arr1));\nprint_r(pluck($arr2));\n\
    print_r(pluck($arr3));", "    $evens = array_filter($arr, function($num) {\n \
    \       return $num % 2 == 0;\n    });\n    if (empty($evens)) {\n        return\
    \ [];\n    }\n    $min = min($evens);\n    $index = array_search($min, $arr);\n\
    \    return [$min, $index];\n}\n\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1,\
    \ 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));", "    $even\
    \ = [];\n    $index = [];\n    $result = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n         \
    \   $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n        return\
    \ $result;\n    }\n    $min = min($even);\n    $key = array_search($min, $even);\n\
    \    $result[] = $min;\n    $result[] = $index[$key];\n    return $result;\n}\n\
    $arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [1, 2, 3];\n\
    print_r(pluck($arr));\necho \"<br>\";\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens =\
    \ [];\n    $evens_index = [];\n    $result = [];\n    if (empty($arr)) {\n   \
    \     return $result;\n    }\n    foreach ($arr as $key => $value) {\n       \
    \ if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evens_index[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return $result;\n\
    \    }\n    $min = min($evens);\n    $min_index = array_search($min, $evens);\n\
    \    $result[] = $min;\n    $result[] = $evens_index[$min_index];\n    return\
    \ $result;\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr\
    \ = [1, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [];\nprint_r(pluck($arr));\n\
    echo \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even\
    \ = [];\n    $evenIndex = [];\n    $result = [];\n    foreach ($arr as $key =>\
    \ $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n \
    \           $evenIndex[] = $key;\n        }\n    }\n    if (empty($even)) {\n\
    \        return [];\n    }\n    $min = min($even);\n    $minIndex = array_search($min,\
    \ $even);\n    $result[] = $min;\n    $result[] = $evenIndex[$minIndex];\n   \
    \ return $result;\n}\n\n$arr = [4, 2, 3];\n$arr1 = [1, 2, 3];\n$arr2 = [];\n$arr3\
    \ = [5, 0, 3, 0, 4, 2];\n\nprint_r(pluck($arr));\nprint_r(pluck($arr1));\nprint_r(pluck($arr2));\n\
    print_r(pluck($arr3));", "    $even = array_filter($arr, function($n) {\n    \
    \    return $n % 2 == 0;\n    });\n    if (empty($even)) {\n        return [];\n\
    \    }\n    $min = min($even);\n    $index = array_search($min, $arr);\n    return\
    \ [$min, $index];\n}\n\n$arr = array(4, 2, 3);\nprint_r(pluck($arr));\n\n$arr\
    \ = array(1, 2, 3);\nprint_r(pluck($arr));\n\n$arr = array();\nprint_r(pluck($arr));\n\
    \n$arr = array(5, 0, 3, 0, 4, 2);\nprint_r(pluck($arr));", "    $evens = [];\n\
    \    $evensIndex = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n            $evensIndex[] = $key;\n\
    \        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n\
    \    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n    return\
    \ [$min, $evensIndex[$minIndex]];\n}\n\necho \"<pre>\";\nprint_r(pluck([4, 2,\
    \ 3]));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(pluck([1, 2, 3]));\necho \"\
    </pre>\";\necho \"<pre>\";\nprint_r(pluck([]));\necho \"</pre>\";\necho \"<pre>\"\
    ;\nprint_r(pluck([5, 0, 3, 0, 4, 2]));\necho \"</pre>\";", "    $even = array_filter($arr,\
    \ function($value) {\n        return $value % 2 == 0;\n    });\n    if (empty($even))\
    \ {\n        return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n\n$arr = array(4, 2, 3);\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = array(1, 2, 3);\nprint_r(pluck($arr));\necho \"\\n\";\n\
    $arr = array();\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = array(5, 0, 3, 0,\
    \ 4, 2);\nprint_r(pluck($arr));\necho \"\\n\";", "\t$evens = [];\n\tforeach ($arr\
    \ as $key => $value) {\n\t\tif ($value % 2 == 0) {\n\t\t\t$evens[] = [$value,\
    \ $key];\n\t\t}\n\t}\n\tif (empty($evens)) {\n\t\treturn [];\n\t}\n\t$min = $evens[0];\n\
    \tforeach ($evens as $key => $value) {\n\t\tif ($value[0] < $min[0]) {\n\t\t\t\
    $min = $value;\n\t\t}\n\t}\n\treturn $min;\n}\n\n$arr = [5, 0, 3, 0, 4, 2];\n\
    print_r(pluck($arr));", "    $evens = [];\n    $index = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] =\
    \ $value;\n            $index[] = $key;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $min = min($evens);\n    $min_index\
    \ = array_search($min, $evens);\n    return [$min, $index[$min_index]];\n}\n\n\
    $arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [1, 2, 3];\n\
    print_r(pluck($arr));\necho \"<br>\";\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"<br>\";",
  "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return [];\n   \
    \ }\n    $min = min($even);\n    $key = array_search($min, $even);\n    return\
    \ [$min, $index[$key]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho '<br>';\n\
    $arr = [1, 2, 3];\nprint_r(pluck($arr));\necho '<br>';\n$arr = [];\nprint_r(pluck($arr));\n\
    echo '<br>';\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $arr);\n    return [$min, $minIndex];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evenArr = [];\n  \
    \  $indexArr = [];\n    $result = [];\n    if (empty($arr)) {\n        return\
    \ $result;\n    }\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evenArr[] = $value;\n            $indexArr[] = $key;\n\
    \        }\n    }\n    if (empty($evenArr)) {\n        return $result;\n    }\n\
    \    $min = min($evenArr);\n    $minIndex = array_search($min, $evenArr);\n  \
    \  $result[] = $min;\n    $result[] = $indexArr[$minIndex];\n    return $result;\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [1, 2, 3];\n\
    print_r(pluck($arr));\necho \"<br>\";\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even =\
    \ [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n \
    \       }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n\
    }\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even = [];\n    $index\
    \ = [];\n    $result = [];\n    if (empty($arr)) {\n        return $result;\n\
    \    }\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n\
    \            $even[] = $value;\n            $index[] = $key;\n        }\n    }\n\
    \    if (empty($even)) {\n        return $result;\n    }\n    $min = min($even);\n\
    \    $key = array_search($min, $even);\n    $result[] = $min;\n    $result[] =\
    \ $index[$key];\n    return $result;\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));",
  "    $even = [];\n    $index = [];\n    $result = [];\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] % 2 == 0) {\n            $even[] = $arr[$i];\n\
    \            $index[] = $i;\n        }\n    }\n    if (count($even) == 0) {\n\
    \        return $result;\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    $result[] = $min;\n    $result[] = $index[$key];\n    return $result;\n\
    }\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\n\
    print_r(pluck([5, 0, 3, 0, 4, 2]));", "    $even = [];\n    $evenIndex = [];\n\
    \    $result = [];\n    if (empty($arr)) {\n        return $result;\n    }\n \
    \   foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n     \
    \       $even[] = $value;\n            $evenIndex[] = $key;\n        }\n    }\n\
    \    if (empty($even)) {\n        return $result;\n    }\n    $min = min($even);\n\
    \    $minIndex = array_search($min, $even);\n    $result[] = $min;\n    $result[]\
    \ = $evenIndex[$minIndex];\n    return $result;\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr =\
    \ [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    echo \"\\n\";", "    $even = [];\n    $index = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n   \
    \     return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    return [$min, $index[$key]];\n}\n\nprint_r(pluck([4, 2, 3]));\n\
    print_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4,\
    \ 2]));", "    $evens = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $evens[] = $value;\n        }\n    }\n    if\
    \ (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n    $key\
    \ = array_search($min, $arr);\n    return [$min, $key];\n}\n\nprint_r(pluck([4,\
    \ 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    $evens = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        }\n\
    \    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $min_key = array_search($min, $arr);\n    return [$min, $min_key];\n}\n\n\
    $arr = [4, 2, 3];\n$arr1 = [1, 2, 3];\n$arr2 = [];\n$arr3 = [5, 0, 3, 0, 4, 2];\n\
    \nprint_r(pluck($arr));\nprint_r(pluck($arr1));\nprint_r(pluck($arr2));\nprint_r(pluck($arr3));",
  "    $evens = [];\n    $evensIndex = [];\n    foreach ($arr as $key => $value) {\n\
    \        if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evensIndex[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min = min($evens);\n    $minIndex = array_search($min, $evens);\n \
    \   return [$min, $evensIndex[$minIndex]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr =\
    \ [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    echo \"\\n\";", "    $evens = [];\n    foreach ($arr as $key => $value) {\n  \
    \      if ($value % 2 == 0) {\n            $evens[] = $value;\n        }\n   \
    \ }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $arr);\n    return [$min, $minIndex];\n}\n\
    $arr = [4, 2, 3];\n$arr1 = [1, 2, 3];\n$arr2 = [];\n$arr3 = [5, 0, 3, 0, 4, 2];\n\
    var_dump(pluck($arr));\nvar_dump(pluck($arr1));\nvar_dump(pluck($arr2));\nvar_dump(pluck($arr3));",
  "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return [];\n   \
    \ }\n    $min = min($even);\n    $key = array_search($min, $even);\n    return\
    \ [$min, $index[$key]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));", "   \
    \ $evens = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2\
    \ == 0) {\n            $evens[] = $value;\n        }\n    }\n    if (count($evens)\
    \ == 0) {\n        return [];\n    }\n    $min = min($evens);\n    $index = array_search($min,\
    \ $arr);\n    return [$min, $index];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    \n$arr = [1, 2, 3];\nprint_r(pluck($arr));\n\n$arr = [];\nprint_r(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "\t$even = [];\n\t$index\
    \ = [];\n\tforeach ($arr as $key => $value) {\n\t\tif ($value % 2 == 0) {\n\t\t\
    \t$even[] = $value;\n\t\t\t$index[] = $key;\n\t\t}\n\t}\n\tif (count($even) ==\
    \ 0) {\n\t\treturn [];\n\t}\n\t$min = min($even);\n\t$min_index = array_search($min,\
    \ $even);\n\treturn [$min, $index[$min_index]];\n}\nprint_r(pluck([4, 2, 3]));\n\
    print_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4,\
    \ 2]));", "    $evens = [];\n    $evensIndex = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \            $evensIndex[] = $key;\n        }\n    }\n    if (empty($evens)) {\n\
    \        return [];\n    }\n    $min = min($evens);\n    $minIndex = array_search($min,\
    \ $evens);\n    return [$min, $evensIndex[$minIndex]];\n}\n", "    $min = PHP_INT_MAX;\n\
    \    $index = -1;\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0 && $value < $min) {\n            $min = $value;\n            $index\
    \ = $key;\n        }\n    }\n    if ($index == -1) {\n        return [];\n   \
    \ }\n    return [$min, $index];\n}\n\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1,\
    \ 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));", "    $evens\
    \ = [];\n    $indexes = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $evens[] = $value;\n            $indexes[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min = min($evens);\n    $min_index = array_search($min, $evens);\n\
    \    return [$min, $indexes[$min_index]];\n}\n\n$arr = [4, 2, 3];\nvar_dump(pluck($arr));\n\
    \n$arr = [1, 2, 3];\nvar_dump(pluck($arr));\n\n$arr = [];\nvar_dump(pluck($arr));\n\
    \n$arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));", "    $even = [];\n    $index\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n            $index[] = $key;\n        }\n\
    \    }\n    if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n}\n\
    print_r(pluck([4, 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\n\
    print_r(pluck([5, 0, 3, 0, 4, 2]));", "    $evens = [];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n\
    \        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n\
    \    $min = min($evens);\n    $minIndex = array_search($min, $arr);\n    return\
    \ [$min, $minIndex];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"\\\
    n\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\"\
    ;", "    $even = [];\n    $index = [];\n    $result = [];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (count($even) == 0) {\n\
    \        return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    $result[] = $min;\n    $result[] = $index[$key];\n    return $result;\n\
    }\n\n$arr = [4, 2, 3];\n$arr1 = [1, 2, 3];\n$arr2 = [];\n$arr3 = [5, 0, 3, 0,\
    \ 4, 2];\nprint_r(pluck($arr));\nprint_r(pluck($arr1));\nprint_r(pluck($arr2));\n\
    print_r(pluck($arr3));", "    $even = [];\n    $index = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[] =\
    \ $value;\n            $index[] = $key;\n        }\n    }\n    if (count($even)\
    \ == 0) {\n        return [];\n    }\n    $min = min($even);\n    $minIndex =\
    \ array_search($min, $even);\n    return [$min, $index[$minIndex]];\n}\n\nprint_r(pluck([4,\
    \ 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5,\
    \ 0, 3, 0, 4, 2]));", "    $evens = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        }\n\
    \    }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $index = array_search($min, $arr);\n    return [$min, $index];\n}\n", " \
    \   $evens = [];\n    $evens_index = [];\n    foreach ($arr as $key => $value)\
    \ {\n        if ($value % 2 == 0) {\n            $evens[] = $value;\n        \
    \    $evens_index[] = $key;\n        }\n    }\n    if (empty($evens)) {\n    \
    \    return [];\n    }\n    $min_even = min($evens);\n    $min_even_index = array_search($min_even,\
    \ $evens);\n    return [$min_even, $evens_index[$min_even_index]];\n}\n\n/*\n\
    \ * Complete the 'getWays' function below.\n *\n * The function is expected to\
    \ return a LONG_INTEGER.\n * The function accepts following parameters:\n *  1.\
    \ INTEGER n\n *  2. LONG_INTEGER_ARRAY c\n */\n", "    $even = [];\n    $index\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $even[] = $value;\n            $index[] = $key;\n        }\n\
    \    }\n    if (count($even) == 0) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n}\n\n\
    $arr = array(4, 2, 3);\necho '<pre>';\nprint_r(pluck($arr));\necho '</pre>';\n\
    \n$arr = array(1, 2, 3);\necho '<pre>';\nprint_r(pluck($arr));\necho '</pre>';\n\
    \n$arr = array();\necho '<pre>';\nprint_r(pluck($arr));\necho '</pre>';\n\n$arr\
    \ = array(5, 0, 3, 0, 4, 2);\necho '<pre>';\nprint_r(pluck($arr));\necho '</pre>';",
  "    $even = array_filter($arr, function($n) {\n        return $n % 2 == 0;\n  \
    \  });\n    if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $key = array_search($min, $arr);\n    return [$min, $key];\n}\n\n$arr = [4,\
    \ 2, 3];\nvar_dump(pluck($arr));\n\n$arr = [1, 2, 3];\nvar_dump(pluck($arr));\n\
    \n$arr = [];\nvar_dump(pluck($arr));\n\n$arr = [5, 0, 3, 0, 4, 2];\nvar_dump(pluck($arr));",
  "\t$even = [];\n\t$index = [];\n\tforeach ($arr as $key => $value) {\n\t\tif ($value\
    \ % 2 == 0) {\n\t\t\t$even[] = $value;\n\t\t\t$index[] = $key;\n\t\t}\n\t}\n\t\
    if (empty($even)) {\n\t\treturn [];\n\t}\n\t$min = min($even);\n\t$key = array_search($min,\
    \ $even);\n\treturn [$min, $index[$key]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr =\
    \ [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    echo \"\\n\";", "    $evens = [];\n    foreach ($arr as $key => $value) {\n  \
    \      if ($value % 2 == 0) {\n            $evens[] = $value;\n        }\n   \
    \ }\n    if (empty($evens)) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $index = array_search($min, $arr);\n    return [$min, $index];\n}\n\n$arr\
    \ = [4, 2, 3];\n$arr1 = [1, 2, 3];\n$arr2 = [];\n$arr3 = [5, 0, 3, 0, 4, 2];\n\
    \nvar_dump(pluck($arr));\nvar_dump(pluck($arr1));\nvar_dump(pluck($arr2));\nvar_dump(pluck($arr3));",
  "    $even = [];\n    $index = [];\n    $result = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (count($even) == 0) {\n\
    \        return $result;\n    }\n    $min = min($even);\n    $min_index = array_search($min,\
    \ $even);\n    $result[] = $min;\n    $result[] = $index[$min_index];\n    return\
    \ $result;\n}\n\n$arr = [4, 2, 3];\nvar_dump(pluck($arr));\n\n$arr = [1, 2, 3];\n\
    var_dump(pluck($arr));\n\n$arr = [];\nvar_dump(pluck($arr));\n\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\nvar_dump(pluck($arr));", "    $even = [];\n    $evenIndex = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $even[] = $value;\n            $evenIndex[] = $key;\n        }\n    }\n\
    \    if (count($even) == 0) {\n        return [];\n    }\n    $min = min($even);\n\
    \    $minIndex = array_search($min, $even);\n    return [$min, $evenIndex[$minIndex]];\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [1, 2, 3];\n\
    print_r(pluck($arr));\necho \"<br>\";\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even =\
    \ [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n \
    \       }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $key = array_search($min, $even);\n    return [$min, $index[$key]];\n\
    }\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\n\
    print_r(pluck([5, 0, 3, 0, 4, 2]));", "    $evens = [];\n    $evens_index = [];\n\
    \    $result = [];\n    foreach ($arr as $key => $value) {\n        if ($value\
    \ % 2 == 0) {\n            $evens[] = $value;\n            $evens_index[] = $key;\n\
    \        }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n\
    \    $min = min($evens);\n    $min_index = array_search($min, $evens);\n    $result[]\
    \ = $min;\n    $result[] = $evens_index[$min_index];\n    return $result;\n}\n\
    \n/*\n * Complete the 'maxDifference' function below.\n *\n * The function is\
    \ expected to return an INTEGER.\n * The function accepts INTEGER_ARRAY arr as\
    \ parameter.\n */\n", "    $even = [];\n    $index = [];\n    foreach ($arr as\
    \ $key => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (count($even) == 0) {\n\
    \        return [];\n    }\n    $min = min($even);\n    $min_index = array_search($min,\
    \ $even);\n    return [$min, $index[$min_index]];\n}\n\nprint_r(pluck([4, 2, 3]));\n\
    print_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4,\
    \ 2]));", "    $even = array_filter($arr, function($n) {\n        return $n %\
    \ 2 == 0;\n    });\n    if (empty($even)) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $index = array_search($min, $arr);\n    return [$min, $index];\n\
    }\n", "    if (empty($arr)) {\n        return [];\n    }\n    $even = [];\n  \
    \  foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n      \
    \      $even[$key] = $value;\n        }\n    }\n    if (empty($even)) {\n    \
    \    return [];\n    }\n    asort($even);\n    $keys = array_keys($even);\n  \
    \  return [$even[$keys[0]], $keys[0]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"\\n\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr =\
    \ [];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\n\
    echo \"\\n\";", "    $even = array_filter($arr, function($v) {\n        return\
    \ $v % 2 == 0;\n    });\n    if (empty($even)) {\n        return [];\n    }\n\
    \    $min = min($even);\n    $key = array_search($min, $arr);\n    return [$min,\
    \ $key];\n}\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $even\
    \ = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n\
    \        }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $minIndex = array_search($min, $even);\n    return [$min,\
    \ $index[$minIndex]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho '<br>';\n\
    $arr = [1, 2, 3];\nprint_r(pluck($arr));\necho '<br>';\n$arr = [];\nprint_r(pluck($arr));\n\
    echo '<br>';\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens\
    \ = [];\n    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0)\
    \ {\n            $evens[] = $value;\n        }\n    }\n    if (empty($evens))\
    \ {\n        return [];\n    }\n    $min = min($evens);\n    $key = array_search($min,\
    \ $arr);\n    return [$min, $key];\n}\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $evens = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n  \
    \      if ($value % 2 == 0) {\n            $evens[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min = min($evens);\n    $key = array_search($min, $evens);\n    return\
    \ [$min, $index[$key]];\n}\n\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1, 2,\
    \ 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));", "    $even\
    \ = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n        if\
    \ ($value % 2 == 0) {\n            $even[] = $value;\n            $index[] = $key;\n\
    \        }\n    }\n    if (empty($even)) {\n        return [];\n    }\n    $min\
    \ = min($even);\n    $min_index = array_search($min, $even);\n    return [$min,\
    \ $index[$min_index]];\n}\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return [];\n   \
    \ }\n    $min = min($even);\n    $minIndex = array_search($min, $even);\n    return\
    \ [$min, $index[$minIndex]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"<br>\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr\
    \ = [];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $even = [];\n    $index = [];\n    foreach ($arr as $key => $value) {\n   \
    \     if ($value % 2 == 0) {\n            $even[] = $value;\n            $index[]\
    \ = $key;\n        }\n    }\n    if (empty($even)) {\n        return [];\n   \
    \ }\n    $min = min($even);\n    $min_index = array_search($min, $even);\n   \
    \ return [$min, $index[$min_index]];\n}\n\nprint_r(pluck([4, 2, 3]));\nprint_r(pluck([1,\
    \ 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4, 2]));", "    $evens\
    \ = [];\n    $evens_index = [];\n    foreach ($arr as $key => $value) {\n    \
    \    if ($value % 2 == 0) {\n            $evens[] = $value;\n            $evens_index[]\
    \ = $key;\n        }\n    }\n    if (empty($evens)) {\n        return [];\n  \
    \  }\n    $min = min($evens);\n    $min_index = array_search($min, $evens);\n\
    \    return [$min, $evens_index[$min_index]];\n}\n\n$arr = [5, 0, 3, 0, 4, 2];\n\
    print_r(pluck($arr));", "    $even = [];\n    $index = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[] =\
    \ $value;\n            $index[] = $key;\n        }\n    }\n    if (empty($even))\
    \ {\n        return [];\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    return [$min, $index[$key]];\n}\n\nprint_r(pluck([4, 2, 3]));\n\
    print_r(pluck([1, 2, 3]));\nprint_r(pluck([]));\nprint_r(pluck([5, 0, 3, 0, 4,\
    \ 2]));", "    $even = [];\n    $index = [];\n    $res = [];\n    foreach ($arr\
    \ as $key => $value) {\n        if ($value % 2 == 0) {\n            $even[] =\
    \ $value;\n            $index[] = $key;\n        }\n    }\n    if (empty($even))\
    \ {\n        return $res;\n    }\n    $min = min($even);\n    $min_index = array_search($min,\
    \ $even);\n    $res[] = $min;\n    $res[] = $index[$min_index];\n    return $res;\n\
    }\n\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));", "    $evens = [];\n \
    \   $index = [];\n    foreach ($arr as $key => $value) {\n        if ($value %\
    \ 2 == 0) {\n            $evens[] = $value;\n            $index[] = $key;\n  \
    \      }\n    }\n    if (count($evens) == 0) {\n        return [];\n    }\n  \
    \  $min = min($evens);\n    $minIndex = array_search($min, $evens);\n    return\
    \ [$min, $index[$minIndex]];\n}\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\n\
    echo \"<br>\";\n$arr = [1, 2, 3];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr\
    \ = [];\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));",
  "    $even = [];\n    $index = [];\n    $result = [];\n    foreach ($arr as $key\
    \ => $value) {\n        if ($value % 2 == 0) {\n            $even[] = $value;\n\
    \            $index[] = $key;\n        }\n    }\n    if (empty($even)) {\n   \
    \     return $result;\n    }\n    $min = min($even);\n    $key = array_search($min,\
    \ $even);\n    $result[] = $min;\n    $result[] = $index[$key];\n    return $result;\n\
    }\n\n$arr = array(4, 2, 3);\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = array(1,\
    \ 2, 3);\nprint_r(pluck($arr));\necho \"<br>\";\n$arr = array();\nprint_r(pluck($arr));\n\
    echo \"<br>\";\n$arr = array(5, 0, 3, 0, 4, 2);\nprint_r(pluck($arr));\necho \"\
    <br>\";", "    $min = PHP_INT_MAX;\n    $min_index = 0;\n    $index = 0;\n   \
    \ foreach ($arr as $value) {\n        if ($value % 2 == 0 && $value < $min) {\n\
    \            $min = $value;\n            $min_index = $index;\n        }\n   \
    \     $index++;\n    }\n    if ($min == PHP_INT_MAX) {\n        return [];\n \
    \   }\n    return [$min, $min_index];\n}\n\n/*\n * Given a number n, return the\
    \ number of positive odd numbers below n, EASY!\n * oddCount(7) //=> 3, i.e [1,\
    \ 3, 5]\n * oddCount(15) //=> 7, i.e [1, 3, 5, 7, 9, 11, 13]\n * Expect large\
    \ Inputs!\n */", "    $even = array_filter($arr, function($v) {\n        return\
    \ $v % 2 == 0;\n    });\n    if (empty($even)) {\n        return [];\n    }\n\
    \    $min = min($even);\n    $key = array_search($min, $arr);\n    return [$min,\
    \ $key];\n}\n\n$arr = [4, 2, 3];\n$arr = [1, 2, 3];\n$arr = [];\n$arr = [5, 0,\
    \ 3, 0, 4, 2];\n$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n$arr = [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n$arr = [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30];\n$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,\
    \ 34, 35, 36, 37, 38, 39, 40];\n$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,\
    \ 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50];\n\
    $arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29", "    $even = [];\n    $index = [];\n  \
    \  foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n      \
    \      $even[] = $value;\n            $index[] = $key;\n        }\n    }\n   \
    \ if (empty($even)) {\n        return [];\n    }\n    $min = min($even);\n   \
    \ $key = array_search($min, $even);\n    return [$min, $index[$key]];\n}\n\n$arr\
    \ = [1, 2, 3];\nprint_r(pluck($arr));", "    $evens = [];\n    $indexes = [];\n\
    \    foreach ($arr as $key => $value) {\n        if ($value % 2 == 0) {\n    \
    \        $evens[] = $value;\n            $indexes[] = $key;\n        }\n    }\n\
    \    if (count($evens) == 0) {\n        return [];\n    }\n    $min = min($evens);\n\
    \    $minIndex = array_search($min, $evens);\n    return [$min, $indexes[$minIndex]];\n\
    }\n\n$arr = [4, 2, 3];\nprint_r(pluck($arr));\necho \"\\n\";\n$arr = [1, 2, 3];\n\
    print_r(pluck($arr));\necho \"\\n\";\n$arr = [];\nprint_r(pluck($arr));\necho\
    \ \"\\n\";\n$arr = [5, 0, 3, 0, 4, 2];\nprint_r(pluck($arr));\necho \"\\n\";"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
