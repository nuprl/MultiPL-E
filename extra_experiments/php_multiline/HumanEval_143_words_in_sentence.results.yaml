language: php
name: HumanEval_143_words_in_sentence
results:
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $prime_words = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime_words[] = $word;\n        }\n    }\n    return implode(\" \", $prime_words);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmppxobuqia.php:20\nStack trace:\n#0 /tmp/tmppxobuqia.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmppxobuqia.php(31): candidate('This is a test')\n#2 /tmp/tmppxobuqia.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmppxobuqia.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpx_cpxwyp.php:20\nStack trace:\n#0 /tmp/tmpx_cpxwyp.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpx_cpxwyp.php(31): candidate('This is a test')\n#2 /tmp/tmpx_cpxwyp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpx_cpxwyp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $prime = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime[] = $word;\n        }\n    }\n    return implode(\" \", $prime);\n}\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpmif2_jxg.php:20\nStack trace:\n#0 /tmp/tmpmif2_jxg.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpmif2_jxg.php(31): candidate('This is a test')\n#2 /tmp/tmpmif2_jxg.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpmif2_jxg.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4ozpwh9a.php:20\nStack trace:\n#0 /tmp/tmp4ozpwh9a.php(28): words_in_sentence(Array)\n\
    #1 /tmp/tmp4ozpwh9a.php(32): candidate('This is a test')\n#2 /tmp/tmp4ozpwh9a.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4ozpwh9a.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $primes[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmprai4dkvk.php:20\nStack trace:\n#0 /tmp/tmprai4dkvk.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmprai4dkvk.php(32): candidate('This is a test')\n#2 /tmp/tmprai4dkvk.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmprai4dkvk.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $primes[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $primes);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8lkr_ijv.php:20\nStack trace:\n#0 /tmp/tmp8lkr_ijv.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8lkr_ijv.php(31): candidate('This is a test')\n#2 /tmp/tmp8lkr_ijv.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8lkr_ijv.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $prime = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime[] = $word;\n        }\n    }\n    return implode(\" \", $prime);\n}\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpmif2_jxg.php:20\nStack trace:\n#0 /tmp/tmpmif2_jxg.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpmif2_jxg.php(31): candidate('This is a test')\n#2 /tmp/tmpmif2_jxg.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpmif2_jxg.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $arr = explode(\" \", $sentence);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(\" \", $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpwtoxw5a6.php:20\nStack trace:\n#0 /tmp/tmpwtoxw5a6.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpwtoxw5a6.php(32): candidate('This is a test')\n#2 /tmp/tmpwtoxw5a6.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpwtoxw5a6.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $prime_words = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime_words[] = $word;\n        }\n    }\n    return implode(\" \", $prime_words);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpuhyfsokg.php:20\nStack trace:\n#0 /tmp/tmpuhyfsokg.php(28): words_in_sentence(Array)\n\
    #1 /tmp/tmpuhyfsokg.php(32): candidate('This is a test')\n#2 /tmp/tmpuhyfsokg.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpuhyfsokg.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $prime_words = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime_words[] = $word;\n        }\n    }\n    return implode(\" \", $prime_words);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpuhyfsokg.php:20\nStack trace:\n#0 /tmp/tmpuhyfsokg.php(28): words_in_sentence(Array)\n\
    #1 /tmp/tmpuhyfsokg.php(32): candidate('This is a test')\n#2 /tmp/tmpuhyfsokg.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpuhyfsokg.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $arr = explode(\" \", $sentence);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(\" \", $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpwtoxw5a6.php:20\nStack trace:\n#0 /tmp/tmpwtoxw5a6.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpwtoxw5a6.php(32): candidate('This is a test')\n#2 /tmp/tmpwtoxw5a6.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpwtoxw5a6.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n  $words = explode(' ', $sentence);\n  $result = [];\n  foreach ($words as\
    \ $word) {\n    if (is_prime(strlen($word))) {\n      $result[] = $word;\n   \
    \ }\n  }\n  return implode(' ', $result);\n}\n\nfunction candidate(...$args) {\n\
    \    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place available\
    \ here\") !== \"there is no place\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpcuktdw4g.php:20\nStack trace:\n#0 /tmp/tmpcuktdw4g.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpcuktdw4g.php(32): candidate('This is a test')\n#2 /tmp/tmpcuktdw4g.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpcuktdw4g.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $arr = explode(\" \", $sentence);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(\" \", $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpwtoxw5a6.php:20\nStack trace:\n#0 /tmp/tmpwtoxw5a6.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpwtoxw5a6.php(32): candidate('This is a test')\n#2 /tmp/tmpwtoxw5a6.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpwtoxw5a6.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $primes[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmprai4dkvk.php:20\nStack trace:\n#0 /tmp/tmprai4dkvk.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmprai4dkvk.php(32): candidate('This is a test')\n#2 /tmp/tmprai4dkvk.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmprai4dkvk.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpx_cpxwyp.php:20\nStack trace:\n#0 /tmp/tmpx_cpxwyp.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpx_cpxwyp.php(31): candidate('This is a test')\n#2 /tmp/tmpx_cpxwyp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpx_cpxwyp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpx_cpxwyp.php:20\nStack trace:\n#0 /tmp/tmpx_cpxwyp.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpx_cpxwyp.php(31): candidate('This is a test')\n#2 /tmp/tmpx_cpxwyp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpx_cpxwyp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4ozpwh9a.php:20\nStack trace:\n#0 /tmp/tmp4ozpwh9a.php(28): words_in_sentence(Array)\n\
    #1 /tmp/tmp4ozpwh9a.php(32): candidate('This is a test')\n#2 /tmp/tmp4ozpwh9a.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4ozpwh9a.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpx_cpxwyp.php:20\nStack trace:\n#0 /tmp/tmpx_cpxwyp.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpx_cpxwyp.php(31): candidate('This is a test')\n#2 /tmp/tmpx_cpxwyp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpx_cpxwyp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = array();\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $primes[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $primes);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpuhlptje3.php:20\nStack trace:\n#0 /tmp/tmpuhlptje3.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpuhlptje3.php(32): candidate('This is a test')\n#2 /tmp/tmpuhlptje3.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpuhlptje3.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpx_cpxwyp.php:20\nStack trace:\n#0 /tmp/tmpx_cpxwyp.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpx_cpxwyp.php(31): candidate('This is a test')\n#2 /tmp/tmpx_cpxwyp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpx_cpxwyp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $prime = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime[] = $word;\n        }\n    }\n    return implode(\" \", $prime);\n}\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpmif2_jxg.php:20\nStack trace:\n#0 /tmp/tmpmif2_jxg.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpmif2_jxg.php(31): candidate('This is a test')\n#2 /tmp/tmpmif2_jxg.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpmif2_jxg.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $arr = explode(\" \", $sentence);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(\" \", $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpwtoxw5a6.php:20\nStack trace:\n#0 /tmp/tmpwtoxw5a6.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpwtoxw5a6.php(32): candidate('This is a test')\n#2 /tmp/tmpwtoxw5a6.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpwtoxw5a6.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = array(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97);\n    $result = array();\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\necho words_in_sentence(\"This is a test\");\necho words_in_sentence(\"\
    lets go for swimming\");\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: isgo for
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpx_cpxwyp.php:20\nStack trace:\n#0 /tmp/tmpx_cpxwyp.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpx_cpxwyp.php(31): candidate('This is a test')\n#2 /tmp/tmpx_cpxwyp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpx_cpxwyp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $prime = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime[] = $word;\n        }\n    }\n    return implode(\" \", $prime);\n}\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpmif2_jxg.php:20\nStack trace:\n#0 /tmp/tmpmif2_jxg.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpmif2_jxg.php(31): candidate('This is a test')\n#2 /tmp/tmpmif2_jxg.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpmif2_jxg.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $prime_words = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime_words[] = $word;\n        }\n    }\n    return implode(\" \", $prime_words);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmppxobuqia.php:20\nStack trace:\n#0 /tmp/tmppxobuqia.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmppxobuqia.php(31): candidate('This is a test')\n#2 /tmp/tmppxobuqia.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmppxobuqia.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $prime = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime[] = $word;\n        }\n    }\n    return implode(\" \", $prime);\n}\n\
    \nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptxvv65yr.php:20\nStack trace:\n#0 /tmp/tmptxvv65yr.php(28): words_in_sentence(Array)\n\
    #1 /tmp/tmptxvv65yr.php(32): candidate('This is a test')\n#2 /tmp/tmptxvv65yr.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptxvv65yr.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\n\necho words_in_sentence(\"This is a test\");\necho '<br>';\n\
    echo words_in_sentence(\"lets go for swimming\");\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: is<br>go for
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpx_cpxwyp.php:20\nStack trace:\n#0 /tmp/tmpx_cpxwyp.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpx_cpxwyp.php(31): candidate('This is a test')\n#2 /tmp/tmpx_cpxwyp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpx_cpxwyp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4ozpwh9a.php:20\nStack trace:\n#0 /tmp/tmp4ozpwh9a.php(28): words_in_sentence(Array)\n\
    #1 /tmp/tmp4ozpwh9a.php(32): candidate('This is a test')\n#2 /tmp/tmp4ozpwh9a.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4ozpwh9a.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n\t$words = explode(' ', $sentence);\n\t$prime_words = [];\n\tforeach ($words\
    \ as $word) {\n\t\tif (is_prime(strlen($word))) {\n\t\t\t$prime_words[] = $word;\n\
    \t\t}\n\t}\n\treturn implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp54vfymq8.php:20\nStack trace:\n#0 /tmp/tmp54vfymq8.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp54vfymq8.php(32): candidate('This is a test')\n#2 /tmp/tmp54vfymq8.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp54vfymq8.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $primes[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $primes);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8lkr_ijv.php:20\nStack trace:\n#0 /tmp/tmp8lkr_ijv.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8lkr_ijv.php(31): candidate('This is a test')\n#2 /tmp/tmp8lkr_ijv.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8lkr_ijv.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpx_cpxwyp.php:20\nStack trace:\n#0 /tmp/tmpx_cpxwyp.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpx_cpxwyp.php(31): candidate('This is a test')\n#2 /tmp/tmpx_cpxwyp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpx_cpxwyp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\necho words_in_sentence(\"This is a test\");\necho '<br>';\n\
    echo words_in_sentence(\"lets go for swimming\");\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: is<br>go for
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $primes[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmprai4dkvk.php:20\nStack trace:\n#0 /tmp/tmprai4dkvk.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmprai4dkvk.php(32): candidate('This is a test')\n#2 /tmp/tmprai4dkvk.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmprai4dkvk.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\necho words_in_sentence(\"This is a test\");\necho words_in_sentence(\"\
    lets go for swimming\");\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: isgo for
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    for ($i\
    \ = 0; $i < count($sentence); $i++) {\n        if (isPrime(strlen($sentence[$i])))\
    \ {\n            $result[] = $sentence[$i];\n        }\n    }\n    return implode(\"\
    \ \", $result);\n}\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpl62qel7f.php:20\nStack trace:\n#0 /tmp/tmpl62qel7f.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpl62qel7f.php(31): candidate('This is a test')\n#2 /tmp/tmpl62qel7f.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpl62qel7f.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4ozpwh9a.php:20\nStack trace:\n#0 /tmp/tmp4ozpwh9a.php(28): words_in_sentence(Array)\n\
    #1 /tmp/tmp4ozpwh9a.php(32): candidate('This is a test')\n#2 /tmp/tmp4ozpwh9a.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4ozpwh9a.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpx_cpxwyp.php:20\nStack trace:\n#0 /tmp/tmpx_cpxwyp.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpx_cpxwyp.php(31): candidate('This is a test')\n#2 /tmp/tmpx_cpxwyp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpx_cpxwyp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $prime_words = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime_words[] = $word;\n        }\n    }\n    return implode(\" \", $prime_words);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmppxobuqia.php:20\nStack trace:\n#0 /tmp/tmppxobuqia.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmppxobuqia.php(31): candidate('This is a test')\n#2 /tmp/tmppxobuqia.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmppxobuqia.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = array(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97);\n    $result = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\necho words_in_sentence(\"This is a test\");\necho words_in_sentence(\"\
    lets go for swimming\");\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: isgo for
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\n\necho words_in_sentence(\"This is a test\");\necho words_in_sentence(\"\
    lets go for swimming\");\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: isgo for
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = \"\";\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result .= $word . \" \";\n        }\n    }\n    return trim($result);\n}\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpgzi_8ntc.php:20\nStack trace:\n#0 /tmp/tmpgzi_8ntc.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpgzi_8ntc.php(31): candidate('This is a test')\n#2 /tmp/tmpgzi_8ntc.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpgzi_8ntc.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $primes[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmprai4dkvk.php:20\nStack trace:\n#0 /tmp/tmprai4dkvk.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmprai4dkvk.php(32): candidate('This is a test')\n#2 /tmp/tmprai4dkvk.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmprai4dkvk.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $arr = explode(\" \", $sentence);\n    $res = [];\n    foreach ($arr\
    \ as $item) {\n        if (isPrime(strlen($item))) {\n            $res[] = $item;\n\
    \        }\n    }\n    return implode(\" \", $res);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmpyt_rim7l.php:20\nStack trace:\n#0 /tmp/tmpyt_rim7l.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpyt_rim7l.php(32): candidate('This is a test')\n#2 /tmp/tmpyt_rim7l.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpyt_rim7l.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $primes[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $primes);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8lkr_ijv.php:20\nStack trace:\n#0 /tmp/tmp8lkr_ijv.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8lkr_ijv.php(31): candidate('This is a test')\n#2 /tmp/tmp8lkr_ijv.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8lkr_ijv.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4ozpwh9a.php:20\nStack trace:\n#0 /tmp/tmp4ozpwh9a.php(28): words_in_sentence(Array)\n\
    #1 /tmp/tmp4ozpwh9a.php(32): candidate('This is a test')\n#2 /tmp/tmp4ozpwh9a.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4ozpwh9a.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $prime_words = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime_words[] = $word;\n        }\n    }\n    return implode(\" \", $prime_words);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpuhyfsokg.php:20\nStack trace:\n#0 /tmp/tmpuhyfsokg.php(28): words_in_sentence(Array)\n\
    #1 /tmp/tmpuhyfsokg.php(32): candidate('This is a test')\n#2 /tmp/tmpuhyfsokg.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpuhyfsokg.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpx_cpxwyp.php:20\nStack trace:\n#0 /tmp/tmpx_cpxwyp.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpx_cpxwyp.php(31): candidate('This is a test')\n#2 /tmp/tmpx_cpxwyp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpx_cpxwyp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $arr = explode(\" \", $sentence);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(\" \", $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpwtoxw5a6.php:20\nStack trace:\n#0 /tmp/tmpwtoxw5a6.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpwtoxw5a6.php(32): candidate('This is a test')\n#2 /tmp/tmpwtoxw5a6.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpwtoxw5a6.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4ozpwh9a.php:20\nStack trace:\n#0 /tmp/tmp4ozpwh9a.php(28): words_in_sentence(Array)\n\
    #1 /tmp/tmp4ozpwh9a.php(32): candidate('This is a test')\n#2 /tmp/tmp4ozpwh9a.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4ozpwh9a.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpx_cpxwyp.php:20\nStack trace:\n#0 /tmp/tmpx_cpxwyp.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpx_cpxwyp.php(31): candidate('This is a test')\n#2 /tmp/tmpx_cpxwyp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpx_cpxwyp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $arr = explode(\" \", $sentence);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(\" \", $result);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpwtoxw5a6.php:20\nStack trace:\n#0 /tmp/tmpwtoxw5a6.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpwtoxw5a6.php(32): candidate('This is a test')\n#2 /tmp/tmpwtoxw5a6.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpwtoxw5a6.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $prime_words = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime_words[] = $word;\n        }\n    }\n    return implode(\" \", $prime_words);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmppxobuqia.php:20\nStack trace:\n#0 /tmp/tmppxobuqia.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmppxobuqia.php(31): candidate('This is a test')\n#2 /tmp/tmppxobuqia.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmppxobuqia.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n  $words = explode(' ', $sentence);\n  $prime_words = [];\n  foreach ($words\
    \ as $word) {\n    if (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n\
    \    }\n  }\n  return implode(' ', $prime_words);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpj5tre6ce.php:20\nStack trace:\n#0 /tmp/tmpj5tre6ce.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpj5tre6ce.php(32): candidate('This is a test')\n#2 /tmp/tmpj5tre6ce.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpj5tre6ce.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4ozpwh9a.php:20\nStack trace:\n#0 /tmp/tmp4ozpwh9a.php(28): words_in_sentence(Array)\n\
    #1 /tmp/tmp4ozpwh9a.php(32): candidate('This is a test')\n#2 /tmp/tmp4ozpwh9a.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4ozpwh9a.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $prime_words = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime_words[] = $word;\n        }\n    }\n    return implode(\" \", $prime_words);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpuhyfsokg.php:20\nStack trace:\n#0 /tmp/tmpuhyfsokg.php(28): words_in_sentence(Array)\n\
    #1 /tmp/tmpuhyfsokg.php(32): candidate('This is a test')\n#2 /tmp/tmpuhyfsokg.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpuhyfsokg.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4ozpwh9a.php:20\nStack trace:\n#0 /tmp/tmp4ozpwh9a.php(28): words_in_sentence(Array)\n\
    #1 /tmp/tmp4ozpwh9a.php(32): candidate('This is a test')\n#2 /tmp/tmp4ozpwh9a.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4ozpwh9a.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = array();\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $primes[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $primes);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpuhlptje3.php:20\nStack trace:\n#0 /tmp/tmpuhlptje3.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpuhlptje3.php(32): candidate('This is a test')\n#2 /tmp/tmpuhlptje3.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpuhlptje3.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpn_isntlp.php:20\nStack trace:\n#0 /tmp/tmpn_isntlp.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpn_isntlp.php(31): candidate('This is a test')\n#2 /tmp/tmpn_isntlp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpn_isntlp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $prime = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime[] = $word;\n        }\n    }\n    return implode(\" \", $prime);\n}\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpmif2_jxg.php:20\nStack trace:\n#0 /tmp/tmpmif2_jxg.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpmif2_jxg.php(31): candidate('This is a test')\n#2 /tmp/tmpmif2_jxg.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpmif2_jxg.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $result = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $result[] = $word;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\n\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for\
    \ swimming\") !== \"go for\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(\"there is no place available here\") !== \"there is no place\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\"\
    ) !== \"Hi am Hussein\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    go for it\") !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"here\") !== \"\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"here is\") !== \"is\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp4ozpwh9a.php:20\nStack trace:\n#0 /tmp/tmp4ozpwh9a.php(28): words_in_sentence(Array)\n\
    #1 /tmp/tmp4ozpwh9a.php(32): candidate('This is a test')\n#2 /tmp/tmp4ozpwh9a.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp4ozpwh9a.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $primes[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $primes);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp8lkr_ijv.php:20\nStack trace:\n#0 /tmp/tmp8lkr_ijv.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp8lkr_ijv.php(31): candidate('This is a test')\n#2 /tmp/tmp8lkr_ijv.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp8lkr_ijv.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $arr = explode(\" \", $sentence);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(\" \", $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpp8qx_08f.php:20\nStack trace:\n#0 /tmp/tmpp8qx_08f.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpp8qx_08f.php(31): candidate('This is a test')\n#2 /tmp/tmpp8qx_08f.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpp8qx_08f.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $prime_words = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime_words[] = $word;\n        }\n    }\n    return implode(\" \", $prime_words);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmppxobuqia.php:20\nStack trace:\n#0 /tmp/tmppxobuqia.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmppxobuqia.php(31): candidate('This is a test')\n#2 /tmp/tmppxobuqia.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmppxobuqia.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\necho words_in_sentence(\"This is a test\");\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: is
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\necho words_in_sentence(\"This is a test\");\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: is
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpx_cpxwyp.php:20\nStack trace:\n#0 /tmp/tmpx_cpxwyp.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpx_cpxwyp.php(31): candidate('This is a test')\n#2 /tmp/tmpx_cpxwyp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpx_cpxwyp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $primes[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $primes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmprai4dkvk.php:20\nStack trace:\n#0 /tmp/tmprai4dkvk.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmprai4dkvk.php(32): candidate('This is a test')\n#2 /tmp/tmprai4dkvk.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmprai4dkvk.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpx_cpxwyp.php:20\nStack trace:\n#0 /tmp/tmpx_cpxwyp.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpx_cpxwyp.php(31): candidate('This is a test')\n#2 /tmp/tmpx_cpxwyp.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpx_cpxwyp.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpukwd7en2.php:20\nStack trace:\n#0 /tmp/tmpukwd7en2.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpukwd7en2.php(31): candidate('This is a test')\n#2 /tmp/tmpukwd7en2.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpukwd7en2.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $prime_words = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime_words[] = $word;\n        }\n    }\n    return implode(\" \", $prime_words);\n\
    }\nfunction candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmppxobuqia.php:20\nStack trace:\n#0 /tmp/tmppxobuqia.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmppxobuqia.php(31): candidate('This is a test')\n#2 /tmp/tmppxobuqia.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmppxobuqia.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $arr = explode(\" \", $sentence);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(\" \", $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpp8qx_08f.php:20\nStack trace:\n#0 /tmp/tmpp8qx_08f.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpp8qx_08f.php(31): candidate('This is a test')\n#2 /tmp/tmpp8qx_08f.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpp8qx_08f.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $sentence = explode(\" \", $sentence);\n    $prime = [];\n    foreach\
    \ ($sentence as $word) {\n        if (is_prime(strlen($word))) {\n           \
    \ $prime[] = $word;\n        }\n    }\n    return implode(\" \", $prime);\n}\n\
    function candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
    ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpmif2_jxg.php:20\nStack trace:\n#0 /tmp/tmpmif2_jxg.php(27): words_in_sentence(Array)\n\
    #1 /tmp/tmpmif2_jxg.php(31): candidate('This is a test')\n#2 /tmp/tmpmif2_jxg.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpmif2_jxg.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $primes = [2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n\
    \    $result = [];\n    foreach ($words as $word) {\n        if (in_array(strlen($word),\
    \ $primes)) {\n            $result[] = $word;\n        }\n    }\n    return implode('\
    \ ', $result);\n}\necho words_in_sentence(\"This is a test\");\necho \"\\n\";\n\
    echo words_in_sentence(\"lets go for swimming\");\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'is

    go for'
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $prime_words = [];\n    foreach\
    \ ($words as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}\n\nfunction\
    \ candidate(...$args) {\n    return words_in_sentence(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"This is a test\") !== \"is\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\")\
    \ !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
    ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\"\
    ) !== \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmptb76yrrf.php:20\nStack trace:\n#0 /tmp/tmptb76yrrf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmptb76yrrf.php(32): candidate('This is a test')\n#2 /tmp/tmptb76yrrf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmptb76yrrf.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $arr = explode(\" \", $sentence);\n    $result = [];\n    foreach ($arr\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(\" \", $result);\n}\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmpp8qx_08f.php:20\nStack trace:\n#0 /tmp/tmpp8qx_08f.php(27): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmpp8qx_08f.php(31): candidate('This is a test')\n#2 /tmp/tmpp8qx_08f.php(40):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpp8qx_08f.php on line 20\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* You are given a string representing a sentence,\nthe sentence\
    \ contains some words separated by a space,\nand you have to return a string that\
    \ contains the words from the original sentence,\nwhose lengths are prime numbers,\n\
    the order of the words in the new string should be the same as the original one.\n\
    Example 1:\n>>> words_in_sentence(\"This is a test\")\n\"is\"\nExample 2:\n>>>\
    \ words_in_sentence(\"lets go for swimming\")\n\"go for\"\nConstraints:\n* 1 <=\
    \ len(sentence) <= 100\n* sentence contains only letters*/\nfunction words_in_sentence($sentence)\
    \ {\n    $words = explode(' ', $sentence);\n    $result = [];\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return implode(' ', $result);\n}\n\nfunction candidate(...$args)\
    \ {\n    return words_in_sentence(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"This is a test\") !== \"is\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"lets go for swimming\") !== \"go for\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"there is no place\
    \ available here\") !== \"there is no place\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\") { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !== \"go for\
    \ it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\"\
    ) !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"here\
    \ is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_prime() in\
    \ /tmp/tmp05fac4qf.php:20\nStack trace:\n#0 /tmp/tmp05fac4qf.php(28): words_in_sentence('This\
    \ is a test')\n#1 /tmp/tmp05fac4qf.php(32): candidate('This is a test')\n#2 /tmp/tmp05fac4qf.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp05fac4qf.php on line 20\n"
  timestamp: 1660220656
