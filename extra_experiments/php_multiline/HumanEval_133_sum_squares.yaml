name: HumanEval_133_sum_squares
language: php
prompt: "<?php\n/* You are given an array of numbers.\nYou need to return the sum\
  \ of squared numbers in the given array,\nround each element in the array to the\
  \ upper int(Ceiling) first.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n14\n>>> lst(array(1.0,\
  \ 4.0, 9.0))\n98\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n84\n>>> lst(array(1.4, 4.2,\
  \ 0.0))\n29\n>>> lst(array(-2.4, 1.0, 1.0))\n6*/\nfunction sum_squares($lst) {\n"
tests: "function candidate(...$args) {\n    return sum_squares(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1.0, 2.0, 3.0)) !== 14) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1.0, 2.0, 3.0)) !== 14) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1.0, 3.0, 5.0, 7.0)) !==\
  \ 84) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1.4, 4.2,\
  \ 0.0)) !== 29) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2.4,\
  \ 1.0, 1.0)) !== 6) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(100.0,\
  \ 1.0, 15.0, 2.0)) !== 10230) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(10000.0, 10000.0)) !== 200000000) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(-1.4, 4.6, 6.3)) !== 75) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-1.4, 17.9, 18.9, 19.9)) !== 1086) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0.0)) !== 0)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1.0)) !==\
  \ 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1.0, 1.0,\
  \ 0.0)) !== 2) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $result = 0;\n    foreach ($lst as $value) {\n        $result +=\
    \ ceil($value) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given an array\
    \ of numbers.\nYou need to return the sum of the numbers in the array,\nexcept\
    \ ignore sections of numbers starting with a 6 and extending to the next 7 (every\
    \ 6 will be followed by at least one 7).\nReturn 0 for no numbers.\nExamples:\n\
    >>> lst(array(1, 2, 2))\n5\n>>> lst(array(1, 2, 2, 6, 99, 99, 7))\n5\n>>> lst(array(1,\
    \ 1, 6, 7, 2))\n4\n>>> lst(array(1, 6, 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> lst(array(1,\
    \ 6, 2, 6, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> lst(array(2, 2, 6, 7, 7))\n11\n>>>\
    \ lst(array(2, 2, 6, 7, 7, 7))\n11\n>>> lst(array(2, 2, 6, 7, 7, 7, 2, 7))\n11\n\
    >>> lst(array(6, 7))\n0\n>>> lst(array(6, 7, 7))\n0\n>>> lst(array(7, 7, 6))\n\
    0\n>>> lst(array(7, 6, 7))\n0\n>>> lst(array(2, 2, 2, 2, 2, 2, 2, 2, 2))\n18\n\
    >>> lst(array(6, 7, 11))\n11\n>>> lst(array(7, 6, 11))\n11\n>>> lst(array(7, 7,\
    \ 6, 11))\n11\n>>> lst(array(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 7, 8))\n\
    26\n>>> lst(array(2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 7, 8))\n",
  "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n\
    \    }\n    return $sum;\n}\n\n/*\nYou are given a string of numbers between 0-9.\n\
    Find the average of these numbers and return it as a floored whole number (ie:\
    \ no decimal places) written out as a string.\nEg:\n\"zero nine five two\" ->\
    \ \"four\"\nIf the string is empty or includes a number greater than 9, return\
    \ \"n/a\"\n*/", "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum +=\
    \ ceil($item) ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given an array\
    \ of numbers.\nYou need to return the sum of the numbers in the array, except\
    \ the first and last elements.\nThe first and last elements are to be excluded\
    \ from the sum.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0,\
    \ 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2,\
    \ 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.6\n*/", "    $result = 0;\n  \
    \  foreach ($lst as $value) {\n        $result += ceil($value) ** 2;\n    }\n\
    \    return $result;\n}\n\n/*\nYou are given an array of numbers.\nYou need to\
    \ return the sum of the numbers in the array,\nexcept ignore sections of numbers\
    \ starting with a 6 and extending to the next 7 (every 6 will be followed by at\
    \ least one 7).\nReturn 0 for no numbers.\nExamples:\n>>> sum67(array(1, 2, 2))\n\
    5\n>>> sum67(array(1, 2, 2, 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1, 6, 7, 2))\n\
    4\n>>> sum67(array(1, 6, 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1, 6,\
    \ 2, 6, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n\
    18\n>>> sum67(array(2, 7, 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n\
    >>> sum67(array(6, 7, 1, 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>>\
    \ sum67(array())\n0\n*/", "    $result = 0;\n    foreach ($lst as $value) {\n\
    \        $result += ceil($value) ** 2;\n    }\n    return $result;\n}\n\n/*\n\
    You are given an array of numbers.\nYou need to return the sum of the numbers\
    \ in the array,\nexcept ignore sections of numbers starting with a 6 and extending\
    \ to the next 7\n(every 6 will be followed by at least one 7).\nReturn 0 for no\
    \ numbers.\nExamples:\n>>> sum67(array(1, 2, 2))\n5\n>>> sum67(array(1, 2, 2,\
    \ 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1, 6, 7, 2))\n4\n>>> sum67(array(1, 6,\
    \ 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1, 6, 2, 6, 2, 7, 1, 6, 99, 99,\
    \ 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n18\n>>> sum67(array(2, 7,\
    \ 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n>>> sum67(array(6, 7, 1,\
    \ 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>> sum67(array())\n0\n>>>\
    \ sum67(array(6, 7, 11))\n11\n>>> sum67(array(11, 6, 7, 11))\n22\n>>> sum67(array(2,\
    \ 2, 6, 7, 7))\n11\n*/", "    $result = 0;\n    foreach ($lst as $value) {\n \
    \       $result += ceil($value) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou\
    \ are given a string.\nYou need to remove all the spaces from the string and return\
    \ it.\nExamples:\n>>> remove_spaces(\"8 j 8   mBliB8g  imjB8B8  jl  B\")\n\"8j8mBliB8gimjB8B8jlB\"\
    \n>>> remove_spaces(\"8 8 Bi fk8h B 8 BB8B B B  B888 c hl8 BhB fd\")\n\"88Bifk8hB8BB8BBBB888chl8BhBfd\"\
    \n>>> remove_spaces(\"8aaaaa dddd r     \")\n\"8aaaaaddddr\"\n*/", "    $result\
    \ = 0;\n    foreach ($lst as $value) {\n        $result += ceil($value) * ceil($value);\n\
    \    }\n    return $result;\n}\n\n/*\nYou are given an array of numbers.\nYou\
    \ need to return the sum of all the numbers in the array,\nexcept the smallest\
    \ and the biggest number.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0,\
    \ 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n15\n>>> lst(array(1.4, 4.2,\
    \ 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.6\n*/", "    $sum = 0;\n    foreach\
    \ ($lst as $value) {\n        $sum += ceil($value) ** 2;\n    }\n    return $sum;\n\
    }\n\n/*\nYou are given a string.\nYou need to return the number of occurrences\
    \ of the character 'a' in the given string.\nExamples:\n>>> string_count(\"abc\"\
    )\n1\n>>> string_count(\"abca\")\n2\n>>> string_count(\"abcaa\")\n3\n>>> string_count(\"\
    abcde\")\n0\n>>> string_count(\"abcdefghijklmnopqrstuvwxyz\")\n1\n*/", "    $sum\
    \ = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) * ceil($item);\n\
    \    }\n    return $sum;\n}\n\n/*\nYou are given a string of numbers.\nYou need\
    \ to return a string where each number is the sum of digits of the adjacent numbers.\n\
    Examples:\n>>> sum_digits(\"123\")\n\"6\"\n>>> sum_digits(\"1234\")\n\"10\"\n\
    >>> sum_digits(\"123425\")\n\"23\"\n>>> sum_digits(\"12342567\")\n\"36\"\n>>>\
    \ sum_digits(\"1234256789\")\n\"45\"\n*/", "    $result = 0;\n    foreach ($lst\
    \ as $item) {\n        $result += ceil($item) ** 2;\n    }\n    return $result;\n\
    }\n\n/*\nYou are given a string.\nYou need to remove all the spaces from the string\
    \ and return it.\nExamples:\n>>> no_space('8 j 8   mBliB8g  imjB8B8  jl  B')\n\
    '8j8mBliB8gimjB8B8jlB'\n>>> no_space('8 8 Bi fk8h B 8 BB8B B B  B888 c hl8 BhB\
    \ fd')\n'88Bifk8hB8BB8BBBB888chl8BhBfd'\n>>> no_space('8aaaaa dddd r     ')\n\
    '8aaaaaddddr'\n>>> no_space('jfBm  gk lf8hg  88lbe8 ')\n'jfBmgklf8hg88lbe8'\n\
    >>> no_space('8j aam')\n'8jaam'\n*/", "    $sum = 0;\n    foreach ($lst as $item)\
    \ {\n        $sum += ceil($item) ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou\
    \ are given an array of numbers.\nYou need to return the sum of the numbers in\
    \ the array, except the first and last elements.\nThe first and last elements\
    \ are to be excluded from the sum.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n\
    5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n\
    >>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.0\n*/",
  "    $result = 0;\n    foreach ($lst as $value) {\n        $result += ceil($value)\
    \ ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given a string.\nYou need\
    \ to remove all the characters from the string that appear more than once.\nExamples:\n\
    >>> remove_duplicates('abbbaccd')\n'abcd'\n>>> remove_duplicates('aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyy')\n\
    'abcdefghijklmnopqrstuvwxy'\n>>> remove_duplicates('11223344556677889900')\n'1234567890'\n\
    >>> remove_duplicates('@@@######$$$$%%%%&&&&((( ))))))***+++,,,,')\n'@#$%&()*+,.'\n\
    */", "    $result = 0;\n    foreach ($lst as $value) {\n        $result += ceil($value)\
    \ ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given a string.\nYou need\
    \ to find the number of occurrences of the character 'a' in the given string.\n\
    Examples:\n>>> count_a(\"abc\")\n1\n>>> count_a(\"abcba\")\n2\n>>> count_a(\"\
    ab\")\n1\n>>> count_a(\"aba\")\n2\n>>> count_a(\"baba\")\n2\n>>> count_a(\"bcd\"\
    )\n0\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n        $result +=\
    \ ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given a string.\n\
    You need to return the number of occurrences of the character 'a' in the given\
    \ string.\nExamples:\n>>> count_a('abc')\n1\n>>> count_a('abcba')\n2\n>>> count_a('abcccc')\n\
    3\n>>> count_a('abcdef')\n1\n>>> count_a('abcdefabcdef')\n2\n*/", "    $sum =\
    \ 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n\
    \    return $sum;\n}\n\n/*\nYou are given an array of numbers.\nYou need to return\
    \ the sum of all the numbers in the array,\nexcept the smallest and the largest\
    \ ones.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n4\n>>> lst(array(1.0, 4.0,\
    \ 9.0))\n6\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n12\n>>> lst(array(1.4, 4.2, 0.0))\n\
    4.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.0\n*/", "    $result = 0;\n    foreach\
    \ ($lst as $value) {\n        $result += ceil($value) ** 2;\n    }\n    return\
    \ $result;\n}\n\n/*\nYou are given a string of numbers.\nYou need to return the\
    \ sum of the numbers in the string.\nExamples:\n>>> sum_numbers(\"1\")\n1\n>>>\
    \ sum_numbers(\"1.1\")\n1\n>>> sum_numbers(\"1.1.1\")\n3\n>>> sum_numbers(\"1.1.1.1\"\
    )\n4\n>>> sum_numbers(\"1.1.1.1.1\")\n5\n>>> sum_numbers(\"1.1.1.1.1.1\")\n6\n\
    >>> sum_numbers(\"1.1.1.1.1.1.1\")\n7\n>>> sum_numbers(\"1.1.1.1.1.1.1.1\")\n\
    8\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1\")\n9\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1\"\
    )\n10\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1\")\n11\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1.1\"\
    )\n12\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1.1.1\")\n13\n>>> sum_numbers(\"\
    1.1.1.1.1.1.1.1.1.1.1.1.1.1\")\n14\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1.1.1.1.1\"\
    )\n15\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1\")\n16\n>>> sum_numbers(\"\
    1.1.1.1.1.1.1.1.1", "    $result = 0;\n    foreach ($lst as $item) {\n       \
    \ $result += ceil($item) * ceil($item);\n    }\n    return $result;\n}\n\n/*\n\
    You are given an array of numbers.\nYou need to return the sum of all the numbers\
    \ in the array except the first and last one.\nExamples:\n>>> lst(array(1.0, 2.0,\
    \ 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n\
    16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.0\n\
    */", "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item)\
    \ ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\n\
    You need to return the sum of the numbers in the array, except the first and last\
    \ elements.\nThe first and last elements are to be added together and the sum\
    \ multiplied by the total number of elements,\nexcluding the first and last.\n\
    Examples:\n>>> lst(array(1.0, 2.0, 3.0))\n20\n>>> lst(array(1.0, 4.0, 9.0))\n\
    50\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n84\n>>> lst(array(1.4, 4.2, 0.0))\n6\n\
    >>> lst(array(-2.4, 1.0, 1.0))\n-4\n*/", "    return array_sum(array_map(function($x)\
    \ {\n        return pow(ceil($x), 2);\n    }, $lst));\n}\n\n/*\nYou are given\
    \ an array of numbers.\nYou need to return the sum of the numbers in the array,\
    \ except the first and last elements.\nThe first and last elements are to be added\
    \ separately.\nExamples:\n>>> sum_except_first_last(array(1.0, 2.0, 3.0))\n5\n\
    >>> sum_except_first_last(array(1.0, 4.0, 9.0))\n12\n>>> sum_except_first_last(array(1.0,\
    \ 3.0, 5.0, 7.0))\n15\n>>> sum_except_first_last(array(1.4, 4.2, 0.0))\n4.2\n\
    >>> sum_except_first_last(array(-2.4, 1.0, 1.0))\n1.0\n*/", "    $sum = 0;\n \
    \   foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n    return\
    \ $sum;\n}\n\n/*\nYou are given an array of numbers.\nYou need to return the sum\
    \ of the numbers in the array, except the first and last elements.\nThe first\
    \ and last elements are to be excluded from the sum.\nExamples:\n>>> lst(array(1.0,\
    \ 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0,\
    \ 7.0))\n16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n\
    1.0\n*/", "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item)\
    \ ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\n\
    You need to return the sum of the numbers in the array, except the first and last\
    \ elements.\nThe first and last elements are to be excluded from the sum.\nExamples:\n\
    >>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0,\
    \ 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4,\
    \ 1.0, 1.0))\n1.0\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n   \
    \     $result += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are\
    \ given a string.\nYou need to remove all the vowels from the given string.\n\
    Examples:\n>>> remove_vowels(\"Hello\")\n\"Hll\"\n>>> remove_vowels(\"Hey\")\n\
    \"Hy\"\n>>> remove_vowels(\"This website is for losers LOL!\")\n\"Ths wbst s fr\
    \ lsrs LL!\"\n*/", "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum\
    \ += ceil($item) ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given a string.\n\
    You need to return the number of occurrences of the letter \"a\" in the given\
    \ string.\nExamples:\n>>> count_a(\"abc\")\n1\n>>> count_a(\"abcab\")\n2\n>>>\
    \ count_a(\"abcabc\")\n3\n>>> count_a(\"abcabca\")\n3\n>>> count_a(\"abcabcab\"\
    )\n4\n*/", "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item)\
    \ ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\n\
    You need to return the sum of all the numbers in the array,\nexcept the first\
    \ and last elements,\nbut only if the first and last elements are the same.\n\
    Examples:\n>>> lst(array(1.0, 2.0, 3.0, 4.0, 5.0))\n14\n>>> lst(array(1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 1.0))\n15\n>>> lst(array(1.0, 2.0, 3.0, 4.0, 5.0, 1.0, 1.0))\n\
    15\n>>> lst(array(1.0, 2.0, 3.0, 4.0, 5.0, 1.0, 1.0, 1.0))\n14\n>>> lst(array(1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 1.0, 1.0, 1.0, 1.0))\n14\n>>> lst(array(1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 1.0, 1.0, 1.0, 1.0, 1.0))\n15\n*/", "    $sum = 0;\n    foreach ($lst as\
    \ $value) {\n        $sum += ceil($value) ** 2;\n    }\n    return $sum;\n}\n\n\
    /*\nYou are given an array of numbers.\nYou need to return the sum of all the\
    \ numbers in the array, except the smallest and the largest ones.\nExamples:\n\
    >>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0,\
    \ 3.0, 5.0, 7.0))\n12\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4,\
    \ 1.0, 1.0))\n0.6\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n   \
    \     $result += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are\
    \ given a string of numbers.\nYou need to return the sum of all numbers in the\
    \ string.\nExamples:\n>>> sum_numbers('1.0 2.0 3.0')\n6\n>>> sum_numbers('1.0\
    \ 4.0 9.0')\n14\n>>> sum_numbers('1.0 3.0 5.0 7.0')\n16\n>>> sum_numbers('1.4\
    \ 4.2 0.0')\n5.6\n>>> sum_numbers('-2.4 1.0 1.0')\n0.6\n*/", "    $sum = 0;\n\
    \    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n   \
    \ return $sum;\n}\n\n/*\nYou are given an array of numbers.\nYou need to return\
    \ the sum of numbers in the given array,\nexcept the first and last elements.\n\
    Examples:\n>>> sum_except_first_last(array(1.0, 2.0, 3.0))\n5\n>>> sum_except_first_last(array(1.0,\
    \ 4.0, 9.0))\n12\n>>> sum_except_first_last(array(1.0, 3.0, 5.0, 7.0))\n15\n>>>\
    \ sum_except_first_last(array(1.4, 4.2, 0.0))\n4.2\n>>> sum_except_first_last(array(-2.4,\
    \ 1.0, 1.0))\n1.0\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n   \
    \     $result += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are\
    \ given a string.\nYou need to remove all characters from the string that appear\
    \ more than once.\nExamples:\n>>> remove_duplicates(\"abbbaccd\")\n\"abcd\"\n\
    >>> remove_duplicates(\"aabbccddeedee\")\n\"abcd\"\n>>> remove_duplicates(\"flabby\
    \ aapples\")\n\"flaby aples\"\n>>> remove_duplicates(\"\")\n\"\"\n*/", "    $sum\
    \ = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n   \
    \ }\n    return $sum;\n}\n\n/*\nYou are given a string.\nYou need to return the\
    \ number of words in the given string.\nExamples:\n>>> count_words(\"Hello World\"\
    )\n2\n>>> count_words(\"Hello World, it's me\")\n4\n>>> count_words(\"Hello World,\
    \ it's me!\")\n4\n>>> count_words(\"Hello World, it's me! How are you?\")\n7\n\
    >>> count_words(\"Hello World, it's me! How are you? I'm fine, thanks!\")\n10\n\
    */", "    $result = 0;\n    foreach ($lst as $item) {\n        $result += ceil($item)\
    \ ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given a string.\nYou need\
    \ to find the number of occurrences of each character in the string.\nExamples:\n\
    >>> count_chars(\"abracadabra\")\n{'a': 5, 'b': 2, 'r': 2, 'c': 1, 'd': 1}\n>>>\
    \ count_chars(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
  "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) * ceil($item);\n\
    \    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\nYou need\
    \ to return the sum of the numbers in the array, except the first and last elements.\n\
    The first and last elements are to be added separately.\nExamples:\n>>> lst(array(1.0,\
    \ 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n12\n>>> lst(array(1.0, 3.0, 5.0,\
    \ 7.0))\n16\n>>> lst(array(1.4, 4.2, 0.0))\n4.6\n>>> lst(array(-2.4, 1.0, 1.0))\n\
    0.6\n*/", "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item)\
    \ ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given a string.\nYou need to\
    \ find the number of words in the given string.\nWords are separated by a space.\n\
    Examples:\n>>> count_words(\"Hello World\")\n2\n>>> count_words(\"Hello World,\
    \ it's me!\")\n4\n>>> count_words(\"Hello  World: it's me!\")\n4\n>>> count_words(\"\
    Hello  World it's me!\")\n4\n>>> count_words(\"Hello  World it's me! \")\n4\n\
    >>> count_words(\"Hello  World it's me!  \")\n4\n>>> count_words(\"Hello  World\
    \ it's me!   \")\n4\n>>> count_words(\"Hello  World it's me!    \")\n4\n>>> count_words(\"\
    Hello  World it's me!     \")\n4\n>>> count_words(\"Hello  World it's me!    \
    \  \")\n4\n>>> count_words(\"Hello  World it's me!       \")\n4\n>>> count_words(\"\
    Hello  World it's me!        \")\n4\n>>> count_words(\"Hello  World it's me! \
    \        \")\n4\n>>> count_words(\"Hello  World it's me!          \")\n4\n>>>\
    \ count_words(\"Hello  World it's me!           \")\n4\n>>> count_words(\"Hello\
    \  World it's me!            \")\n4\n>>> count_words(\"Hello  World it's me! \
    \            \")\n4\n>>> count_words(\"Hello  World it's me!              \")\n\
    4\n>>> count_words(\"Hello  World it's me!               \")\n4\n>>> count_words(\"\
    Hello  World it's me!                \")\n4\n>>> count_words(\"Hello  World it's\
    \ me!                 \")\n4\n>>> count_words(\"Hello  World it's me!        \
    \          \")\n4\n>>> count_words(\"Hello  World it's me!                   \"\
    )\n4\n>>> count_words(\"Hello  World it's me!                    \")\n4\n>>> count_words(\"\
    Hello  World it's me!                     \"", "    $sum = 0;\n    foreach ($lst\
    \ as $item) {\n        $sum += ceil($item) ** 2;\n    }\n    return $sum;\n}\n\
    \n/*\nYou are given an array of numbers.\nYou need to return the sum of the numbers\
    \ in the array, except the first and last elements.\nThe first and last elements\
    \ are to be excluded from the sum.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n\
    5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n\
    >>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.6\n*/",
  "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n\
    \    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\nYou need\
    \ to return the sum of the numbers in the array, except the first and last elements.\n\
    The first and last elements are to be excluded from the sum.\nExamples:\n>>> lst(array(1.0,\
    \ 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0,\
    \ 7.0))\n16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n\
    1.6\n*/", "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item)\
    \ ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\n\
    You need to return the sum of the numbers in the array, except the first and last\
    \ elements.\nThe first and last elements are to be excluded from the sum.\nExamples:\n\
    >>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0,\
    \ 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4,\
    \ 1.0, 1.0))\n1.0\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n   \
    \     $result += ceil($item) ** 2;\n    }\n    return $result;\n}\necho sum_squares([1.0,\
    \ 2.0, 3.0]);", "    $sum = 0;\n    foreach ($lst as $num) {\n        $sum +=\
    \ ceil($num) ** 2;\n    }\n    return $sum;\n}", "    $result = 0;\n    foreach\
    \ ($lst as $value) {\n        $result += ceil($value) ** 2;\n    }\n    return\
    \ $result;\n}\n\n/*\nYou are given an array of numbers.\nYou need to return the\
    \ sum of all the numbers in the array,\nexcept the smallest and the largest number.\n\
    Examples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n\
    >>> lst(array(1.0, 3.0, 5.0, 7.0))\n15\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>>\
    \ lst(array(-2.4, 1.0, 1.0))\n1.4\n*/", "    $result = 0;\n    foreach ($lst as\
    \ $item) {\n        $result += ceil($item) ** 2;\n    }\n    return $result;\n\
    }\n\n/*\nYou are given an array of numbers.\nYou need to return the sum of the\
    \ elements in the given array,\nbased on their original order.\nExamples:\n>>>\
    \ lst(array(1.0, 2.0, 3.0))\n6\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0,\
    \ 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4,\
    \ 1.0, 1.0))\n-0.4\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n  \
    \      $result += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou\
    \ are given an array of numbers.\nYou need to return the sum of the numbers in\
    \ the array, except the first and last elements.\nThe first and last elements\
    \ are to be ignored.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0,\
    \ 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2,\
    \ 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.0\n*/", "    $sum = 0;\n    foreach\
    \ ($lst as $num) {\n        $sum += ceil($num) ** 2;\n    }\n    return $sum;\n\
    }\n\n/*\nYou are given an array of numbers.\nYou need to return the sum of the\
    \ numbers in the array, except the first and last elements.\nThe first and last\
    \ elements are to be excluded from the sum.\nExamples:\n>>> lst(array(1.0, 2.0,\
    \ 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n\
    15\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.6\n\
    */", "    $result = 0;\n    foreach ($lst as $value) {\n        $result += ceil($value)\
    \ ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given an array of numbers.\n\
    You need to return the sum of the numbers in the array, except the first and last\
    \ elements.\nThe first and last elements are to be added separately.\nExamples:\n\
    >>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n12\n>>> lst(array(1.0,\
    \ 3.0, 5.0, 7.0))\n12\n>>> lst(array(1.4, 4.2, 0.0))\n4.6\n>>> lst(array(-2.4,\
    \ 1.0, 1.0))\n0.6\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n   \
    \     $result += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are\
    \ given a string of numbers.\nYou need to find the sum of all numbers in the string.\n\
    Examples:\n>>> sum_numbers(\"1\")\n1\n>>> sum_numbers(\"1.1\")\n1\n>>> sum_numbers(\"\
    1.1.1\")\n3\n>>> sum_numbers(\"1.1.1.1\")\n4\n>>> sum_numbers(\"1.1.1.1.1\")\n\
    5\n>>> sum_numbers(\"1.1.1.1.1.1\")\n6\n>>> sum_numbers(\"1.1.1.1.1.1.1\")\n7\n\
    >>> sum_numbers(\"1.1.1.1.1.1.1.1\")\n8\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1\"\
    )\n9\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1\")\n10\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1\"\
    )\n11\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1.1\")\n12\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1.1.1\"\
    )\n13\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1.1.1.1\")\n14\n>>> sum_numbers(\"\
    1.1.1.1.1.1.1.1.1.1.1.1.1.1.1\")\n15\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1\"\
    )\n16\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1", "    $result = 0;\n    foreach ($lst\
    \ as $item) {\n        $result += ceil($item) ** 2;\n    }\n    return $result;\n\
    }\n\n/*\nYou are given a string of numbers between 0-9.\nFind the average of these\
    \ numbers and return it as a floored whole number (ie: no decimal places) written\
    \ out as a string.\nEg:\n\"zero nine five two\" -> \"four\"\nIf the string is\
    \ empty or includes a number greater than 9, return \"n/a\"\n*/", "    $sum =\
    \ 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n\
    \    return $sum;\n}\n\n/*\nYou are given a string.\nYou need to return the number\
    \ of words in the given string.\nExamples:\n>>> count_words(\"Hello world\")\n\
    2\n>>> count_words(\"Hello world, my name is John\")\n5\n>>> count_words(\"Lorem\
    \ ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\
    \ ut labore et dolore magna aliqua.\")\n18\n>>> count_words(\"\")\n0\n>>> count_words(\"\
    With! Symbol@ #Around! (Every) %Word$\")\n6\n>>> count_words(\"Dear   Victoria,\
    \ I love  to press   space button.\")\n8\n*/", "    $sum = 0;\n    foreach ($lst\
    \ as $item) {\n        $sum += ceil($item) ** 2;\n    }\n    return $sum;\n}\n\
    \n/*\nYou are given an array of numbers.\nYou need to return the sum of the numbers\
    \ in the array, except the first and last elements.\nThe first and last elements\
    \ are to be added together and the sum multiplied by the total number of elements,\n\
    excluding the first and last.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n20\n\
    >>> lst(array(1.0, 4.0, 9.0))\n90\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n84\n>>>\
    \ lst(array(1.4, 4.2, 0.0))\n11.6\n>>> lst(array(-2.4, 1.0, 1.0))\n-4.8\n*/",
  "    $result = 0;\n    foreach ($lst as $item) {\n        $result += ceil($item)\
    \ ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given an array of numbers.\n\
    You need to return the sum of the numbers in the array,\nexcept ignore sections\
    \ of numbers starting with a 6 and extending to the next 7 (every 6 will be followed\
    \ by at least one 7).\nReturn 0 for no numbers.\nExamples:\n>>> sum67(array(1,\
    \ 2, 2))\n5\n>>> sum67(array(1, 2, 2, 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1,\
    \ 6, 7, 2))\n4\n>>> sum67(array(1, 6, 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1,\
    \ 6, 2, 6, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n\
    18\n>>> sum67(array(2, 7, 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n\
    >>> sum67(array(6, 7, 1, 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>>\
    \ sum67(array())\n0\n>>> sum67(array(6, 7, 11))\n11\n>>> sum67(array(11, 6, 7,\
    \ 11))\n22\n>>> sum67(array(2, 2, 6, 7, 7))\n11\n*/", "    $sum = 0;\n    foreach\
    \ ($lst as $num) {\n        $sum += ceil($num) ** 2;\n    }\n    return $sum;\n\
    }\n\n/*\nYou are given an array of numbers.\nYou need to return the sum of the\
    \ numbers in the array, except the first and last elements.\nThe first and last\
    \ elements are to be added together and the sum multiplied by the total number\
    \ of elements,\nexcluding the first and last.\nExamples:\n>>> lst(array(1.0, 2.0,\
    \ 3.0))\n24\n>>> lst(array(1.0, 4.0, 9.0))\n108\n>>> lst(array(1.0, 3.0, 5.0,\
    \ 7.0))\n144\n>>> lst(array(1.4, 4.2, 0.0))\n30.6\n>>> lst(array(-2.4, 1.0, 1.0))\n\
    -4.8\n*/", "    $lst = array_map('ceil', $lst);\n    return array_sum(array_map(function($n)\
    \ { return $n * $n; }, $lst));\n}\n\n/*\nYou are given an array of numbers.\n\
    You need to return the sum of all the numbers in the array,\nexcept the smallest\
    \ and the largest ones.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n4\n>>> lst(array(1.0,\
    \ 4.0, 9.0))\n6\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n12\n>>> lst(array(1.4, 4.2,\
    \ 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.0\n*/", "    $result = 0;\n  \
    \  foreach ($lst as $item) {\n        $result += ceil($item) ** 2;\n    }\n  \
    \  return $result;\n}\n\n/*\nYou are given a string.\nYou need to return the number\
    \ of words in the given string.\nExamples:\n>>> words_count('Hello World')\n2\n\
    >>> words_count('Hello World, how are you?')\n5\n>>> words_count('Hello')\n1\n\
    >>> words_count('Hello, my name is John')\n4\n>>> words_count('Hello, my name\
    \ is John. I am a developer')\n7\n*/", "    $sum = 0;\n    foreach ($lst as $value)\
    \ {\n        $sum += ceil($value) ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou\
    \ are given an array of numbers.\nYou need to return the sum of the numbers in\
    \ the array, except the first and last elements.\nThe first and last elements\
    \ are to be excluded from the sum.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n\
    5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n\
    >>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.0\n*/",
  "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n\
    \    }\n    return $sum;\n}\n\n/*\nYou are given a string.\nYou need to find the\
    \ number of occurrences of the letter \"a\" in the given string.\nExamples:\n\
    >>> count_a(\"aa\")\n2\n>>> count_a(\"abcd\")\n1\n>>> count_a(\"\")\n0\n>>> count_a(\"\
    b\")\n0\n>>> count_a(\"ba\")\n1\n*/", "    $result = 0;\n    foreach ($lst as\
    \ $item) {\n        $result += ceil($item) ** 2;\n    }\n    return $result;\n\
    }\n\n/*\nYou are given a string.\nYou need to remove all the vowels from the string\
    \ and return the string.\nExamples:\n>>> remove_vowels(\"Hello World\")\n\"Hll\
    \ Wrld\"\n>>> remove_vowels(\"How are you today?\")\n\"Hw r y tdy?\"\n>>> remove_vowels(\"\
    aeiou\")\n\"\"\n>>> remove_vowels(\"\")\n\"\"\n*/", "    $result = 0;\n    foreach\
    \ ($lst as $item) {\n        $result += ceil($item) * ceil($item);\n    }\n  \
    \  return $result;\n}\n\n/*\nYou are given an array of numbers.\nYou need to return\
    \ the sum of the numbers in the array, except the first and last elements.\nThe\
    \ first and last elements are to be excluded from the sum.\nExamples:\n>>> lst(array(1.0,\
    \ 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0,\
    \ 7.0))\n15\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n\
    1.0\n*/", "    $sum = 0;\n    foreach ($lst as $value) {\n        $sum += ceil($value)\
    \ ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\n\
    You need to return the sum of the numbers in the array, except the first and last\
    \ elements.\nThe first and last elements are to be removed because they are not\
    \ considered part of the array.\nExample:\n>>> lst(array(1, 2, 3, 4, 5))\n9\n\
    >>> lst(array(1, 2, 3, 4, 5, 6))\n15\n>>> lst(array(1, 2, 3, 4, 5, 6, 7))\n21\n\
    >>> lst(array(1, 2, 3, 4, 5, 6, 7, 8))\n28\n>>> lst(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9))\n36\n*/", "    $result = 0;\n    foreach ($lst as $value) {\n       \
    \ $result += ceil($value) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are\
    \ given an array of numbers.\nYou need to return the sum of the numbers in the\
    \ array, except the first and last elements.\nThe first and last elements are\
    \ to be added together and the sum multiplied by the total number of elements,\n\
    excluding the first and last.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n20\n\
    >>> lst(array(1.0, 4.0, 9.0))\n90\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n84\n>>>\
    \ lst(array(1.4, 4.2, 0.0))\n16.4\n>>> lst(array(-2.4, 1.0, 1.0))\n-4.8\n*/",
  "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n\
    \    }\n    return $sum;\n}\n\n/*\nYou are given a string.\nYou need to find the\
    \ number of occurrences of each letter in the given string.\nExamples:\n>>> count_letters('abacaba')\n\
    a: 4\nb: 2\nc: 1\n>>> count_letters('aaaaa')\na: 5\n>>> count_letters('abc')\n\
    a: 1\nb: 1\nc: 1\n>>> count_letters('bababa')\na: 3\nb: 4\n*/", "    $result =\
    \ 0;\n    foreach ($lst as $item) {\n        $result += ceil($item) * ceil($item);\n\
    \    }\n    return $result;\n}\n\n/*\nYou are given a string.\nYou need to remove\
    \ all the vowels from the string and return the string.\nExamples:\n>>> remove_vowels(\"\
    Hello\")\n\"Hll\"\n>>> remove_vowels(\"How are you today?\")\n\"Hw r y tdy?\"\n\
    >>> remove_vowels(\"aeiou\")\n\"\"\n*/", "    $sum = 0;\n    foreach ($lst as\
    \ $item) {\n        $sum += ceil($item) ** 2;\n    }\n    return $sum;\n}\n\n\
    /*\nYou are given a string.\nYou need to remove all the vowels from the string\
    \ and return the string.\nExamples:\n>>> remove_vowels('Hello World')\n'Hll Wrld'\n\
    >>> remove_vowels('I am a good boy')\n' m  gd b'\n>>> remove_vowels('How are you?')\n\
    'Hw r y?'\n>>> remove_vowels('Python is a very popular language')\n'Pthn s  vry\
    \ ppulr lngg'\n*/", "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum\
    \ += ceil($item) ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given an array\
    \ of numbers.\nYou need to return the sum of the numbers in the array, except\
    \ the first and last elements.\nThe first and last elements are to be excluded\
    \ from the sum.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0,\
    \ 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2,\
    \ 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.0\n*/", "    $result = 0;\n  \
    \  foreach ($lst as $item) {\n        $result += ceil($item) ** 2;\n    }\n  \
    \  return $result;\n}\n\n/*\nYou are given an array of numbers.\nYou need to return\
    \ the sum of the numbers in the array, except the first and last elements.\nThe\
    \ first and last elements are to be ignored.\nExamples:\n>>> lst(array(1.0, 2.0,\
    \ 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n\
    16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.0\n\
    */", "    $result = 0;\n    foreach ($lst as $value) {\n        $result += ceil($value)\
    \ ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given a string.\nYou need\
    \ to return the number of words in the given string.\nExamples:\n>>> count_words(\"\
    Hello world\")\n2\n>>> count_words(\"Hello world, this is a test\")\n5\n>>> count_words(\"\
    Hello world, this is a test, and another test\")\n7\n>>> count_words(\"Hello world,\
    \ this is a test, and another test, and a test after that\")\n9\n>>> count_words(\"\
    Hello world, this is a test, and another test, and a test after that, and a test\
    \ after that too\")\n11\n*/", "    $result = 0;\n    foreach ($lst as $value)\
    \ {\n        $result += ceil($value) * ceil($value);\n    }\n    return $result;\n\
    }\n\n/*\nYou are given an array of numbers.\nYou need to return the sum of the\
    \ numbers in the array,\nexcept the first and last elements. The first and last\
    \ elements are to be excluded.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n\
    >>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n>>>\
    \ lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n-1.4\n*/", " \
    \   $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n\
    \    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\nYou need\
    \ to return the sum of the numbers in the array,\nexcept ignore sections of numbers\
    \ starting with a 6 and extending to the next 7 (every 6 will be followed by at\
    \ least one 7).\nReturn 0 for no numbers.\nExamples:\n>>> sum67(array(1, 2, 2))\n\
    5\n>>> sum67(array(1, 2, 2, 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1, 6, 7, 2))\n\
    4\n>>> sum67(array(1, 6, 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1, 6,\
    \ 2, 6, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n\
    18\n>>> sum67(array(2, 7, 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n\
    >>> sum67(array(6, 7, 1, 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>>\
    \ sum67(array())\n0\n>>> sum67(array(6, 7, 11))\n11\n>>> sum67(array(11, 6, 7,\
    \ 11))\n22\n>>> sum67(array(2, 2, 6, 7, 7))\n11\n*/", "    $sum = 0;\n    foreach\
    \ ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n    return $sum;\n\
    }\n\n/*\nYou are given an array of numbers.\nYou need to return the sum of all\
    \ the numbers in the array,\nexcept the smallest and the largest ones.\nExamples:\n\
    >>> lst(array(1.0, 2.0, 3.0))\n2\n>>> lst(array(1.0, 4.0, 9.0))\n4\n>>> lst(array(1.0,\
    \ 3.0, 5.0, 7.0))\n8\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4,\
    \ 1.0, 1.0))\n0.6\n*/", "    $sum = 0;\n    foreach ($lst as $value) {\n     \
    \   $sum += ceil($value) ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given\
    \ an array of numbers.\nYou need to return the sum of the numbers in the array,\n\
    except ignore sections of numbers starting with a 6 and extending to the next\
    \ 7 (every 6 will be followed by at least one 7).\nReturn 0 for no numbers.\n\
    Examples:\n>>> sum67(array(1, 2, 2))\n5\n>>> sum67(array(1, 2, 2, 6, 99, 99, 7))\n\
    5\n>>> sum67(array(1, 1, 6, 7, 2))\n4\n>>> sum67(array(1, 6, 2, 2, 7, 1, 6, 99,\
    \ 99, 7))\n2\n>>> sum67(array(1, 6, 2, 6, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(2,\
    \ 7, 6, 2, 6, 7, 2, 7))\n18\n>>> sum67(array(2, 7, 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1,\
    \ 6, 7, 7))\n8\n>>> sum67(array(6, 7, 1, 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1,\
    \ 6, 7))\n0\n>>> sum67(array())\n0\n*/", "    $result = 0;\n    foreach ($lst\
    \ as $item) {\n        $result += ceil($item) ** 2;\n    }\n    return $result;\n\
    }\n\n/*\nYou are given an array of numbers.\nYou need to return the sum of all\
    \ the elements in the given array.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n\
    6\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n\
    >>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n-0.4\n*/",
  "    $result = 0;\n    foreach ($lst as $value) {\n        $result += ceil($value)\
    \ * ceil($value);\n    }\n    return $result;\n}\necho sum_squares(array(1.0,\
    \ 2.0, 3.0));\necho \"<br>\";\necho sum_squares(array(1.0, 4.0, 9.0));\necho \"\
    <br>\";\necho sum_squares(array(1.0, 3.0, 5.0, 7.0));\necho \"<br>\";\necho sum_squares(array(1.4,\
    \ 4.2, 0.0));\necho \"<br>\";\necho sum_squares(array(-2.4, 1.0, 1.0));", "  \
    \  $result = 0;\n    foreach ($lst as $item) {\n        $result += ceil($item)\
    \ ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given a string.\nYou need\
    \ to return the number of words in the given string.\nExamples:\n>>> count_words(\"\
    Hello World\")\n2\n>>> count_words(\"Hello World, how are you?\")\n5\n>>> count_words(\"\
    Hello World, how are you? I am fine.\")\n8\n>>> count_words(\"Hello World, how\
    \ are you? I am fine. Thanks.\")\n9\n>>> count_words(\"Hello World, how are you?\
    \ I am fine. Thanks. And you?\")\n11\n*/", "    $sum = 0;\n    foreach ($lst as\
    \ $num) {\n        $sum += ceil($num) ** 2;\n    }\n    return $sum;\n}\n\n/*\n\
    You are given an array of numbers.\nYou need to return the sum of the numbers\
    \ in the array,\nexcept ignore sections of numbers starting with a 6 and extending\
    \ to the next 7 (every 6 will be followed by at least one 7).\nReturn 0 for no\
    \ numbers.\nExamples:\n>>> sum67(array(1, 2, 2))\n5\n>>> sum67(array(1, 2, 2,\
    \ 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1, 6, 7, 2))\n4\n>>> sum67(array(1, 6,\
    \ 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1, 6, 2, 6, 2, 7, 1, 6, 99, 99,\
    \ 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n18\n>>> sum67(array(2, 7,\
    \ 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n>>> sum67(array(6, 7, 1,\
    \ 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>> sum67(array())\n0\n*/",
  "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n\
    \    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\nYou need\
    \ to return the sum of the first and the last elements in the given array.\nExamples:\n\
    >>> first_last(array(1.0, 2.0, 3.0))\n4\n>>> first_last(array(1.0, 4.0, 9.0))\n\
    10\n>>> first_last(array(1.0, 3.0, 5.0, 7.0))\n8\n>>> first_last(array(1.4, 4.2,\
    \ 0.0))\n5.6\n>>> first_last(array(-2.4, 1.0, 1.0))\n-1.4\n*/", "    $sum = 0;\n\
    \    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n   \
    \ return $sum;\n}\n\n/*\nYou are given an array of numbers.\nYou need to return\
    \ the sum of all the numbers in the array except the first and last elements.\n\
    Examples:\n>>> sum_array(array(1.0, 2.0, 3.0))\n5\n>>> sum_array(array(1.0, 4.0,\
    \ 9.0))\n14\n>>> sum_array(array(1.0, 3.0, 5.0, 7.0))\n15\n>>> sum_array(array(1.4,\
    \ 4.2, 0.0))\n5.6\n>>> sum_array(array(-2.4, 1.0, 1.0))\n1.6\n*/", "    $sum =\
    \ 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) * ceil($item);\n\
    \    }\n    return $sum;\n}\n\n/*\nYou are given a string.\nYou need to find the\
    \ number of occurrences of a character in the given string.\nExamples:\n>>> count_char(\"\
    Hello World\", \"o\")\n2\n>>> count_char(\"Hello World\", \"l\")\n3\n>>> count_char(\"\
    \", \"z\")\n0\n>>> count_char(\"Hello World\", \"\")\n0\n*/", "    $sum = 0;\n\
    \    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n   \
    \ return $sum;\n}\n\n/*\nYou are given a string.\nYou need to remove all the vowels\
    \ from the given string.\nExamples:\n>>> remove_vowels(\"Hello\")\n\"Hll\"\n>>>\
    \ remove_vowels(\"Why\")\n\"Wh\"\n>>> remove_vowels(\"welcome\")\n\"wlcm\"\n>>>\
    \ remove_vowels(\"to\")\n\"t\"\n>>> remove_vowels(\"the\")\n\"th\"\n*/", "   \
    \ $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n\
    \    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\nYou need\
    \ to return the sum of the numbers in the array, except the first and last elements.\n\
    The first and last elements are to be excluded from the sum.\nExamples:\n>>> lst(array(1.0,\
    \ 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0,\
    \ 7.0))\n16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n\
    1.0\n*/", "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item)\
    \ ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given a string of numbers.\n\
    You need to find the sum of all numbers in the string.\nExamples:\n>>> sum_numbers('1')\n\
    1\n>>> sum_numbers('1abc2xyz3')\n6\n>>> sum_numbers('abc')\n0\n>>> sum_numbers('123abc')\n\
    123\n>>> sum_numbers('123abc123')\n246\n>>> sum_numbers('123abc123xyz')\n369\n\
    >>> sum_numbers('123abc123xyz456')\n825\n>>> sum_numbers('123abc123xyz456abc')\n\
    825\n>>> sum_numbers('abc123abc')\n123\n>>> sum_numbers('abc123xyz')\n0\n>>> sum_numbers('abc1x2x3')\n\
    6\n>>> sum_numbers('111')\n3\n>>> sum_numbers('111x111')\n6\n>>> sum_numbers('1x2x3x4x5x6')\n\
    21\n>>> sum_numbers('123.123')\n246\n>>> sum_numbers('123.456')\n579\n>>> sum_numbers('0.123')\n\
    0\n>>> sum_numbers('.123')\n0\n>>> sum_numbers('123.123abc')\n246\n>>> sum_numbers('123.abc')\n\
    123\n>>> sum_numbers('123..123')\n246\n>>> sum_numbers('123.456xyz')\n579\n>>>\
    \ sum_numbers('123.456.789')\n1368\n>>> sum_numbers('1.2.3.4.5.6.7.8.9')\n45\n\
    >>> sum_numbers('123.456.abc.def')\n579\n>>> sum_numbers('123.456.789.abc.def')\n\
    1368\n>>> sum_numbers('123.abc.def')\n123\n>>> sum_numbers('123.456.abc')\n579\n\
    >>> sum_numbers('abc.def.123.456')\n579\n>>> sum_numbers('abc", "    $sum = 0;\n\
    \    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n   \
    \ return $sum;\n}\n\n/*\nYou are given an array of numbers.\nYou need to return\
    \ the sum of the numbers in the array, except the first and last elements.\nThe\
    \ first and last elements are to be excluded from the sum.\nExamples:\n>>> lst(array(1.0,\
    \ 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0,\
    \ 7.0))\n16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n\
    1.6\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n        $result +=\
    \ ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given an array\
    \ of numbers.\nYou need to return the sum of the numbers in the array, except\
    \ the first and last elements.\nThe first and last elements are to be excluded\
    \ from the sum.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0,\
    \ 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2,\
    \ 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.0\n*/", "    $sum = 0;\n    foreach\
    \ ($lst as $num) {\n        $sum += ceil($num) ** 2;\n    }\n    return $sum;\n\
    }\n\n$lst = array(1.0, 2.0, 3.0);\necho sum_squares($lst);", "    $result = 0;\n\
    \    foreach ($lst as $item) {\n        $result += ceil($item) * ceil($item);\n\
    \    }\n    return $result;\n}\n\n/*\nYou are given a string of numbers.\nYou\
    \ need to find the sum of all the numbers in the string.\nExamples:\n>>> sum_numbers('1')\n\
    1\n>>> sum_numbers('1abc2xyz3')\n6\n>>> sum_numbers('1x2x3')\n0\n>>> sum_numbers('1\
    \ 2 3')\n6\n>>> sum_numbers('1 2 3 4')\n10\n>>> sum_numbers('')\n0\n*/", "   \
    \ $result = 0;\n    foreach ($lst as $item) {\n        $result += ceil($item)\
    \ ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given an array of numbers.\n\
    You need to return the sum of the numbers in the array, except the first and last\
    \ elements.\nThe first and last elements are to be excluded from the sum.\nExamples:\n\
    >>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0,\
    \ 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4,\
    \ 1.0, 1.0))\n1.6\n*/", "    $result = 0;\n    foreach ($lst as $value) {\n  \
    \      $result += ceil($value) ** 2;\n    }\n    return $result;\n}\n", "    $result\
    \ = 0;\n    foreach ($lst as $item) {\n        $result += ceil($item) ** 2;\n\
    \    }\n    return $result;\n}\n\n/*\nYou are given an array of numbers.\nYou\
    \ need to return the sum of all the numbers in the array,\nexcept the smallest\
    \ and the largest numbers.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0,\
    \ 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n15\n>>> lst(array(1.4, 4.2,\
    \ 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.4\n*/", "\t$sum = 0;\n\tforeach\
    \ ($lst as $value) {\n\t\t$sum += ceil($value) ** 2;\n\t}\n\treturn $sum;\n}\n\
    \n/*\nYou are given an array of numbers.\nYou need to return the sum of the numbers\
    \ in the array, except the first and last elements.\nThe first and last elements\
    \ are to be excluded from the sum.\nExamples:\n>>> sum_except_first_last(array(1.0,\
    \ 2.0, 3.0))\n5\n>>> sum_except_first_last(array(1.0, 4.0, 9.0))\n12\n>>> sum_except_first_last(array(1.0,\
    \ 3.0, 5.0, 7.0))\n12\n>>> sum_except_first_last(array(1.4, 4.2, 0.0))\n4.2\n\
    >>> sum_except_first_last(array(-2.4, 1.0, 1.0))\n1.0\n*/", "    $sum = 0;\n \
    \   foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n    return\
    \ $sum;\n}\n\n/*\nYou are given a string of numbers between 0-9.\nFind the average\
    \ of these numbers and return it as a floored whole number (ie: no decimal places)\
    \ written out as a string.\nEg:\n\"zero nine five two\" -> \"four\"\nIf the string\
    \ is empty or includes a number greater than 9, return \"n/a\"\n*/", "    $sum\
    \ = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) * ceil($item);\n\
    \    }\n    return $sum;\n}\n\n/*\nYou are given a string of numbers.\nYou need\
    \ to return the sum of all numbers in the given string.\nExamples:\n>>> sum_numbers(\"\
    1\")\n1\n>>> sum_numbers(\"1.1\")\n1\n>>> sum_numbers(\"1.1.1\")\n3\n>>> sum_numbers(\"\
    1.1.1.1\")\n4\n>>> sum_numbers(\"1.1.1.1.1\")\n5\n>>> sum_numbers(\"1.1.1.1.1.1\"\
    )\n6\n>>> sum_numbers(\"1.1.1.1.1.1.1\")\n7\n>>> sum_numbers(\"1.1.1.1.1.1.1.1\"\
    )\n8\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1\")\n9\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1\"\
    )\n10\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1\")\n11\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1.1\"\
    )\n12\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1.1.1\")\n13\n>>> sum_numbers(\"\
    1.1.1.1.1.1.1.1.1.1.1.1.1.1\")\n14\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1.1.1.1.1\"\
    )\n15\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1\")\n16\n>>> sum_numbers(\"\
    1.1.1.1.1.1.1", "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum +=\
    \ ceil($item) ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given a string.\n\
    You need to find the number of occurrences of the letter \"a\" in the given string.\n\
    Examples:\n>>> count_a(\"aa\")\n2\n>>> count_a(\"ab\")\n1\n>>> count_a(\"a\")\n\
    1\n>>> count_a(\"\")\n0\n>>> count_a(\"ba\")\n1\n>>> count_a(\"aba\")\n2\n>>>\
    \ count_a(\"baba\")\n2\n>>> count_a(\"babababa\")\n4\n>>> count_a(\"bababababa\"\
    )\n5\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n        $result +=\
    \ ceil($item) * ceil($item);\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ an array of numbers.\nYou need to return the sum of the numbers in the array,\
    \ except the first and last elements.\nThe first and last elements are to be added\
    \ together and the sum is to be returned.\nExamples:\n>>> lst(array(1.0, 2.0,\
    \ 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n12\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n\
    16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n-1.4\n\
    */", "    $sum = 0;\n    foreach ($lst as $value) {\n        $sum += ceil($value)\
    \ * ceil($value);\n    }\n    return $sum;\n}\n\n/*\nYou are given a string.\n\
    You need to find the number of occurrences of a substring in a given string.\n\
    Examples:\n>>> find_substring(\"abc\", \"abc\")\n1\n>>> find_substring(\"abc\"\
    , \"ab\")\n1\n>>> find_substring(\"abc\", \"a\")\n1\n>>> find_substring(\"abc\"\
    , \"b\")\n1\n>>> find_substring(\"abc\", \"c\")\n1\n>>> find_substring(\"abc\"\
    , \"d\")\n0\n>>> find_substring(\"abc\", \"abcd\")\n0\n>>> find_substring(\"abc\"\
    , \"abcabc\")\n1\n>>> find_substring(\"abcabc\", \"abc\")\n2\n>>> find_substring(\"\
    abcabc\", \"ab\")\n2\n>>> find_substring(\"abcabc\", \"a\")\n2\n>>> find_substring(\"\
    abcabc\", \"b\")\n2\n>>> find_substring(\"abcabc\", \"c\")\n2\n>>> find_substring(\"\
    abcabc\", \"d\")\n0\n>>> find_substring(\"abcabc\", \"abcd\")\n0\n>>> find_substring(\"\
    abcabc\", \"abcabc\")\n1\n>>> find_substring(\"abcabc\", \"abcabcabc\")\n0\n>>>\
    \ find_substring(\"abcabcabc\", \"abc\")\n3\n>>> find_substring(\"abcabcabc\"\
    , \"ab\")\n3\n>>> find_substring(\"abcabcabc\", \"a\")\n3\n>>> find_substring(\"\
    abcabcabc\", \"b\")\n3\n>>> find_substring(\"abcabcabc\", \"c\")\n3\n>>> find_substring(\"\
    abcabcabc\", \"d\")\n0\n>>> find_substring(\"abcabcabc\", \"abcd\")\n0\n>>> find_substring(\"\
    abcabcabc\", \"abcabc\")\n1\n>>> find_substring(\"abcabcabc\", \"abcabcabc\")\n\
    1\n>>> find_substring(\"abcabcabc\", \"abcabcabcabc\")\n0\n>>> find_substring(\"\
    abcabcabcabc\", \"abc\")", "    $sum = 0;\n    foreach ($lst as $item) {\n   \
    \     $sum += ceil($item) ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given\
    \ an array of numbers.\nYou need to return the sum of the numbers in the array,\
    \ except the first and last elements.\nThe first and last elements are to be excluded\
    \ from the sum.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0,\
    \ 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2,\
    \ 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n-1.4\n*/", "    $sum = 0;\n    foreach\
    \ ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n    return $sum;\n\
    }\n\n/*\nYou are given a string.\nYou need to remove all characters from the string\
    \ that are not a letter, a digit or a space.\nExamples:\n>>> remove_chars(\"a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z\")\n\"a b c d e f g h i j\
    \ k l m n o p q r s t u v w x y z\"\n>>> remove_chars(\"a b c d e f g h i j k\
    \ l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0\")\n\"a b c d e f g h i j\
    \ k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0\"\n>>> remove_chars(\"a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0 ! @ #\
    \ $ % ^ & * ( ) - _ + = [ ] { } | \\ : ; \\\" ' < > , . ? /\")\n\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0\"\n>>> remove_chars(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0 ! @ #\
    \ $ % ^ & * ( ) - _ + = [ ] { } | \\ : ; \\\" ' < > , . ? /\")\n\"a b c d e f\
    \ g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0\"\n>>> remove_chars(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0 ! @ #\
    \ $ % ^ & * ( ) - _ + = [ ] { } |", "    $result = 0;\n    foreach ($lst as $value)\
    \ {\n        $result += ceil($value) ** 2;\n    }\n    return $result;\n}\n\n\
    /*\nYou are given a string of numbers.\nYou need to find the sum of all the digits\
    \ in the string.\nExamples:\n>>> sum_digits(\"1\")\n1\n>>> sum_digits(\"123\"\
    )\n6\n>>> sum_digits(\"12345\")\n15\n>>> sum_digits(\"123456789\")\n45\n>>> sum_digits(\"\
    12345678901234567890\")\n135\n*/", "    $result = 0;\n    foreach ($lst as $item)\
    \ {\n        $result += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\n\
    You are given an array of numbers.\nYou need to return the sum of the numbers\
    \ in the array, except the first and last elements.\nThe first and last elements\
    \ are to be added to the result as strings.\nExamples:\n>>> sum_except_first_last(array(1,\
    \ 2, 3, 4, 5))\n\"9\"\n>>> sum_except_first_last(array(1, 2, 3, 4, 5, 6))\n\"\
    15\"\n>>> sum_except_first_last(array(1, 2, 3, 4, 5, 6, 7))\n\"21\"\n>>> sum_except_first_last(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8))\n\"29\"\n>>> sum_except_first_last(array(1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9))\n\"37\"\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n\
    \        $result += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou\
    \ are given an array of numbers.\nYou need to return the sum of the numbers in\
    \ the array,\nexcept ignore sections of numbers starting with a 6 and extending\
    \ to the next 7 (every 6 will be followed by at least one 7).\nReturn 0 for no\
    \ numbers.\nExamples:\n>>> sum67(array(1, 2, 2))\n5\n>>> sum67(array(1, 2, 2,\
    \ 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1, 6, 7, 2))\n4\n>>> sum67(array(1, 6,\
    \ 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1, 6, 2, 6, 2, 7, 1, 6, 99, 99,\
    \ 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n18\n>>> sum67(array(2, 7,\
    \ 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n>>> sum67(array(6, 7, 1,\
    \ 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>> sum67(array())\n0\n>>>\
    \ sum67(array(6, 7, 11))\n11\n>>> sum67(array(11, 6, 7, 11))\n22\n>>> sum67(array(2,\
    \ 2, 6, 7, 7))\n11\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n  \
    \      $result += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou\
    \ are given an array of numbers.\nYou need to return the sum of numbers in the\
    \ given array,\nexcept the numbers that are divisible by 3.\nExamples:\n>>> lst(array(1,\
    \ 2, 3))\n5\n>>> lst(array(1, 2, 3, 4, 5))\n9\n>>> lst(array(1, 2, 3, 4, 5, 6))\n\
    12\n>>> lst(array(1, 2, 3, 4, 5, 6, 7))\n15\n>>> lst(array(1, 2, 3, 4, 5, 6, 7,\
    \ 8))\n18\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n        $result\
    \ += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given an\
    \ array of numbers.\nYou need to return the sum of the numbers in the array,\n\
    except the first and last elements.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n\
    5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n\
    >>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.6\n*/",
  "  $sum = 0;\n  foreach ($lst as $value) {\n    $sum += ceil($value)**2;\n  }\n\
    \  return $sum;\n}\n\n/*\nYou are given an array of numbers.\nYou need to return\
    \ the sum of the numbers in the array, except the first and last elements.\nThe\
    \ first and last elements are to be removed because they are not considered part\
    \ of the array.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0,\
    \ 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2,\
    \ 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n0.6\n*/", "    $result = 0;\n  \
    \  foreach ($lst as $value) {\n        $result += ceil($value) ** 2;\n    }\n\
    \    return $result;\n}\n\n/*\nYou are given an array of numbers.\nYou need to\
    \ return the sum of the numbers in the array,\nexcept ignore sections of numbers\
    \ starting with a 6 and extending to the next 7 (every 6 will be followed by at\
    \ least one 7).\nReturn 0 for no numbers.\nExamples:\n>>> sum67(array(1, 2, 2))\n\
    5\n>>> sum67(array(1, 2, 2, 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1, 6, 7, 2))\n\
    4\n>>> sum67(array(1, 6, 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1, 6,\
    \ 2, 6, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n\
    18\n>>> sum67(array(2, 7, 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n\
    >>> sum67(array(6, 7, 1, 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>>\
    \ sum67(array())\n0\n>>> sum67(array(6, 7, 11))\n11\n>>> sum67(array(11, 6, 7,\
    \ 11))\n22\n>>> sum67(array(2, 2, 6, 7, 7))\n11\n*/", "    $result = 0;\n    foreach\
    \ ($lst as $item) {\n        $result += ceil($item) ** 2;\n    }\n    return $result;\n\
    }\n\n/*\nYou are given an array of numbers.\nYou need to return the sum of the\
    \ numbers in the array, except the first and last elements.\nThe first and last\
    \ elements are to be excluded from the sum.\nExamples:\n>>> lst(array(1.0, 2.0,\
    \ 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n\
    16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.0\n\
    */", "    $sum = 0;\n    foreach ($lst as $num) {\n        $sum += ceil($num)\
    \ ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\n\
    You need to return the sum of the numbers in the array,\nexcept ignore sections\
    \ of numbers starting with a 6 and extending to the next 7 (every 6 will be followed\
    \ by at least one 7).\nReturn 0 for no numbers.\nExamples:\n>>> sum67(array(1,\
    \ 2, 2))\n5\n>>> sum67(array(1, 2, 2, 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1,\
    \ 6, 7, 2))\n4\n>>> sum67(array(1, 6, 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1,\
    \ 6, 2, 6, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n\
    18\n>>> sum67(array(2, 7, 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n\
    >>> sum67(array(6, 7, 1, 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>>\
    \ sum67(array())\n0\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n \
    \       $result += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou\
    \ are given a string of numbers between 0-9.\nFind the average of these numbers\
    \ and return it as a floored whole number (ie: no decimal places) written out\
    \ as a string.\nEg:\n\"zero nine five two\" -> \"four\"\nIf the string is empty\
    \ or includes a number greater than 9, return \"n/a\"\n*/", "    $sum = 0;\n \
    \   foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n    return\
    \ $sum;\n}\n\n/*\nYou are given a string of numbers.\nYou need to return the sum\
    \ of all digits in the string.\nExamples:\n>>> sum_digits(\"1\")\n1\n>>> sum_digits(\"\
    12\")\n3\n>>> sum_digits(\"123\")\n6\n>>> sum_digits(\"1234\")\n10\n>>> sum_digits(\"\
    12345\")\n15\n*/", "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum\
    \ += ceil($item) * ceil($item);\n    }\n    return $sum;\n}\n\n/*\nYou are given\
    \ an array of numbers.\nYou need to return the sum of numbers in the given array,\n\
    except the smallest and the largest number.\nExamples:\n>>> lst(array(1.0, 2.0,\
    \ 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n\
    12\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.0\n\
    */", "    $result = 0;\n    foreach ($lst as $value) {\n        $result += ceil($value)\
    \ ** 2;\n    }\n    return $result;\n}\n\n/*\n * \u0422\u0435\u0441\u0442\u044B\
    \n */\nassert(14 == sum_squares([1.0, 2.0, 3.0]));\nassert(98 == sum_squares([1.0,\
    \ 4.0, 9.0]));\nassert(84 == sum_squares([1.0, 3.0, 5.0, 7.0]));\nassert(29 ==\
    \ sum_squares([1.4, 4.2, 0.0]));\nassert(6 == sum_squares([-2.4, 1.0, 1.0]));",
  "    $result = 0;\n    foreach ($lst as $item) {\n        $result += ceil($item)\
    \ * ceil($item);\n    }\n    return $result;\n}\n\n/*\nYou are given a string\
    \ of words separated by whitespace.\nThe words contain only the characters a-z,\
    \ A-Z and digits 0-9.\nYour task is to sort the string in the following way:\n\
    All words containing a digit should come first.\nThen, all words containing only\
    \ letters.\nThe ordering among the words containing a digit should be the same\
    \ as the ordering among the words containing only letters.\nExamples:\n>>> order(\"\
    is2 Thi1s T4est 3a\")\n\"Thi1s is2 3a T4est\"\n>>> order(\"4of Fo1r pe6ople g3ood\
    \ th5e the2\")\n\"Fo1r the2 g3ood 4of th5e pe6ople\"\n>>> order(\"\")\n\"\"\n\
    */", "    $arr = [];\n    foreach ($lst as $value) {\n        $arr[] = ceil($value);\n\
    \    }\n    $sum = 0;\n    foreach ($arr as $value) {\n        $sum += $value\
    \ * $value;\n    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\n\
    You need to return the sum of the numbers in the array, except the first and last\
    \ elements.\nThe first and last elements are to be added together and the sum\
    \ multiplied by the total number of elements,\nexcluding the first and last.\n\
    Examples:\n>>> lst(array(1.0, 2.0, 3.0))\n12\n>>> lst(array(1.0, 4.0, 9.0))\n\
    54\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n72\n>>> lst(array(1.4, 4.2, 0.0))\n6.6\n\
    >>> lst(array(-2.4, 1.0, 1.0))\n-4.8\n*/", "    $sum = 0;\n    foreach ($lst as\
    \ $item) {\n        $sum += ceil($item) * ceil($item);\n    }\n    return $sum;\n\
    }\n\n/*\nYou are given a string of numbers.\nYou need to return the sum of all\
    \ numbers in the given string.\nExamples:\n>>> sum_numbers(\"1\")\n1\n>>> sum_numbers(\"\
    1 2 3\")\n6\n>>> sum_numbers(\"1 2 3 4\")\n10\n>>> sum_numbers(\"1 2 3 4 5\")\n\
    15\n>>> sum_numbers(\"1 2 3 4 5 6\")\n21\n>>> sum_numbers(\"1 2 3 4 5 6 7\")\n\
    28\n>>> sum_numbers(\"1 2 3 4 5 6 7 8\")\n36\n>>> sum_numbers(\"1 2 3 4 5 6 7\
    \ 8 9\")\n45\n>>> sum_numbers(\"1 2 3 4 5 6 7 8 9 10\")\n55\n*/", "    $sum =\
    \ 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) * ceil($item);\n\
    \    }\n    return $sum;\n}\n\n$arr = [1.0, 2.0, 3.0];\necho sum_squares($arr);",
  "    $result = 0;\n    foreach ($lst as $item) {\n        $result += ceil($item)\
    \ * ceil($item);\n    }\n    return $result;\n}\n\n/*\nYou are given an array\
    \ of numbers.\nYou need to return the sum of the numbers in the array, except\
    \ the first and last elements.\nThe first and last elements are to be added separately.\n\
    Examples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n12\n\
    >>> lst(array(1.0, 3.0, 5.0, 7.0))\n15\n>>> lst(array(1.4, 4.2, 0.0))\n4.6\n>>>\
    \ lst(array(-2.4, 1.0, 1.0))\n0.6\n*/", "    $result = 0;\n    foreach ($lst as\
    \ $value) {\n        $result += ceil($value) * ceil($value);\n    }\n    return\
    \ $result;\n}\n\n/*\nYou are given an array of numbers.\nYou need to return the\
    \ sum of the numbers in the array, except the first and last elements.\nThe first\
    \ and last elements are to be added together and the sum is to be returned.\n\
    Examples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n12\n\
    >>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>>\
    \ lst(array(-2.4, 1.0, 1.0))\n-0.4\n*/", "    $result = 0;\n    foreach ($lst\
    \ as $value) {\n        $result += ceil($value) ** 2;\n    }\n    return $result;\n\
    }\n\necho sum_squares([1.0, 2.0, 3.0]);", "    $result = 0;\n    foreach ($lst\
    \ as $item) {\n        $result += ceil($item) ** 2;\n    }\n    return $result;\n\
    }\n\n/*\nYou are given an array of numbers.\nYou need to return the sum of the\
    \ numbers in the array, except the first and last elements.\nThe first and last\
    \ elements are to be excluded from the sum.\nExamples:\n>>> lst(array(1.0, 2.0,\
    \ 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n\
    16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.6\n\
    */", "    $result = 0;\n    foreach ($lst as $value) {\n        $result += ceil($value)\
    \ ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given a string.\nYou need\
    \ to remove all the vowels from the string and return the string.\nExamples:\n\
    >>> remove_vowels(\"Hello World\")\n\"Hll Wrld\"\n>>> remove_vowels(\"This is\
    \ a test\")\n\"Ths s tst\"\n>>> remove_vowels(\"This is a very long test\")\n\"\
    Ths s  vry lng tst\"\n>>> remove_vowels(\"This is a very long test with a lot\
    \ of vowels\")\n\"Ths s  vry lng tst wth  lt f vwls\"\n*/", "    $result = 0;\n\
    \    foreach ($lst as $item) {\n        $result += ceil($item) ** 2;\n    }\n\
    \    return $result;\n}\n\n$lst = array(1.0, 2.0, 3.0);\necho sum_squares($lst);",
  "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n\
    \    }\n    return $sum;\n}\n\n/*\nYou are given a string of numbers.\nYou need\
    \ to return a string, where each number is the sum of digits of the corresponding\
    \ number.\nExamples:\n>>> sum_digits(\"123\")\n\"6\"\n>>> sum_digits(\"1\")\n\"\
    1\"\n>>> sum_digits(\"\")\n\"\"\n>>> sum_digits(\"0123\")\n\"6\"\n>>> sum_digits(\"\
    01\")\n\"1\"\n>>> sum_digits(\"0123456789\")\n\"45\"\n*/", "    $sum = 0;\n  \
    \  foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n    return\
    \ $sum;\n}\n\n/*\nYou are given an array of numbers.\nYou need to return the sum\
    \ of the numbers in the array, except the first and last elements.\nThe first\
    \ and last elements are to be excluded from the sum.\nExamples:\n>>> lst(array(1.0,\
    \ 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0,\
    \ 7.0))\n16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n\
    1.6\n*/", "    $result = 0;\n    foreach ($lst as $value) {\n        $result +=\
    \ ceil($value) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given a string.\n\
    You need to remove all the duplicate characters from the given string.\nExamples:\n\
    >>> remove_duplicate_characters(\"abcd\")\n\"abcd\"\n>>> remove_duplicate_characters(\"\
    aabbccdd\")\n\"abcd\"\n>>> remove_duplicate_characters(\"aabbccddee\")\n\"abcde\"\
    \n>>> remove_duplicate_characters(\"aabbccddeeff\")\n\"abcdef\"\n>>> remove_duplicate_characters(\"\
    aabbccddeeffgg\")\n\"abcdefg\"\n*/", "    $result = 0;\n    foreach ($lst as $item)\
    \ {\n        $result += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\n\
    You are given a string, which contains entirely of decimal digits (0-9).\nEach\
    \ digit is made of a certain number of dashes, as it is shown in a conversion\
    \ table.\nThe dashes are used to translate a decimal number into a binary number\
    \ as it is shown below:\n\nYou should convert every digit in the given string\
    \ into binary using the table,\nreplace every dash with 0 and every mark with\
    \ 1. After that you should calculate the sum of all numbers\nthat you got from\
    \ the replaced dashes and marks and return it as a binary string.\n\nExample:\n\
    For str = \"2-4A0r7-4k\" the output should be \"1011008\"\n\nFor str = \"2-4A0r7-4k\"\
    \ the sum is calculated as follows:\n\n2-4A0r7-4k\n\n20247\n\n20247\n\n20247\n\
    \n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\
    \n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\
    \n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\
    \n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\
    \n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\
    \n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\
    \n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\n20247\n\
    \n20247\n\n20247\n\n20247\n\n20247\n\n", "    $result = 0;\n    foreach ($lst\
    \ as $item) {\n        $result += ceil($item) ** 2;\n    }\n    return $result;\n\
    }\n\n/*\nYou are given an array of numbers.\nYou need to return the sum of the\
    \ numbers in the array, except the first and last elements.\nThe first and last\
    \ elements are to be added together and the sum is to be multiplied by the total\
    \ number of elements, excluding the first and last elements.\nExamples:\n>>> lst(array(1.0,\
    \ 2.0, 3.0))\n24\n>>> lst(array(1.0, 4.0, 9.0))\n108\n>>> lst(array(1.0, 3.0,\
    \ 5.0, 7.0))\n120\n>>> lst(array(1.4, 4.2, 0.0))\n12.6\n>>> lst(array(-2.4, 1.0,\
    \ 1.0))\n-2.4\n*/", "    $result = 0;\n    foreach ($lst as $value) {\n      \
    \  $result += ceil($value) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are\
    \ given a string.\nYou need to find the number of occurrences of each letter in\
    \ the string.\nExamples:\n>>> count_letters(\"abc\")\na: 1\nb: 1\nc: 1\n>>> count_letters(\"\
    abbccc\")\na: 1\nb: 2\nc: 3\n>>> count_letters(\"abbcccdddd\")\na: 1\nb: 2\nc:\
    \ 3\nd: 4\n>>> count_letters(\"\")\n*/", "  $lst = array_map('ceil', $lst);\n\
    \  $lst = array_map('pow', $lst, array_fill(0, count($lst), 2));\n  return array_sum($lst);\n\
    }\n\n/*\nYou are given an array of numbers.\nYou need to return the sum of the\
    \ numbers in the array,\nexcept the number 13 is very unlucky, so it does not\
    \ count and numbers that come immediately after a 13 also do not count.\nExamples:\n\
    >>> sum13(array(1, 2, 2, 1))\n6\n>>> sum13(array(1, 1))\n2\n>>> sum13(array(1,\
    \ 2, 2, 1, 13))\n6\n>>> sum13(array(1, 2, 13, 2, 1, 13))\n4\n>>> sum13(array(13,\
    \ 1, 2, 13, 2, 1, 13))\n3\n>>> sum13(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13))\n78\n>>> sum13(array(13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\n\
    65\n>>> sum13(array(13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13))\n0\n\
    >>> sum13(array(13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13))\n65\n>>> sum13(array(13,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13, 13))\n65\n>>> sum13(array(13,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13, 13, 13))\n65\n>>> sum13(array(13,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13, 13, 13, 13))\n65\n>>> sum13(array(13,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,", "    $sum = 0;\n    foreach ($lst as $value)\
    \ {\n        $sum += ceil($value) ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou\
    \ are given an array of numbers.\nYou need to return the sum of all the numbers\
    \ in the array,\nexcept the smallest and the largest number.\nExamples:\n>>> lst(array(1.0,\
    \ 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0,\
    \ 7.0))\n16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n\
    0.6\n*/", "    $result = 0;\n    foreach ($lst as $value) {\n        $result +=\
    \ ceil($value) ** 2;\n    }\n    return $result;\n}\n\necho sum_squares([1.0,\
    \ 2.0, 3.0]);\necho \"<br>\";\necho sum_squares([1.0, 4.0, 9.0]);\necho \"<br>\"\
    ;\necho sum_squares([1.0, 3.0, 5.0, 7.0]);\necho \"<br>\";\necho sum_squares([1.4,\
    \ 4.2, 0.0]);\necho \"<br>\";\necho sum_squares([-2.4, 1.0, 1.0]);", "    $result\
    \ = 0;\n    foreach ($lst as $value) {\n        $result += ceil($value) ** 2;\n\
    \    }\n    return $result;\n}\n\n/*\nYou are given an array of numbers.\nYou\
    \ need to return the sum of the numbers in the array,\nexcept the number 13 and\
    \ its immediate neighbors.\nExamples:\n>>> sum13(array(1, 2, 2, 1))\n6\n>>> sum13(array(1,\
    \ 1))\n2\n>>> sum13(array(1, 2, 2, 1, 13))\n6\n>>> sum13(array(1, 2, 13, 2, 1,\
    \ 13))\n4\n>>> sum13(array(13, 1, 2, 13, 2, 1, 13))\n3\n>>> sum13(array(1, 2,\
    \ 13, 2, 1, 13, 2, 1, 13))\n3\n>>> sum13(array(1, 2, 13, 2, 1, 13, 2, 1, 13, 2,\
    \ 1, 13))\n3\n>>> sum13(array(13, 1, 2, 13, 2, 1, 13, 2, 1, 13, 2, 1, 13))\n0\n\
    >>> sum13(array(13, 1, 2, 13, 2, 1, 13, 2, 1, 13, 2, 1, 13, 2, 1, 13))\n0\n*/",
  "\t$lst = array_map('ceil', $lst);\n\t$sum = 0;\n\tforeach ($lst as $value) {\n\t\
    \t$sum += $value * $value;\n\t}\n\treturn $sum;\n}\n\n/*\nYou are given an array\
    \ of numbers.\nYou need to return the sum of the numbers in the array, except\
    \ the first and last elements.\nThe first and last elements are to be excluded\
    \ from the sum.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0,\
    \ 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2,\
    \ 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.0\n*/", "    $sum = 0;\n    foreach\
    \ ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n    return $sum;\n\
    }\n\n/*\nYou are given an array of numbers.\nYou need to return the sum of the\
    \ numbers in the array, except the first and last elements.\nThe first and last\
    \ elements are to be excluded from the sum.\nExamples:\n>>> lst(array(1.0, 2.0,\
    \ 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n\
    16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.0\n\
    */", "    $result = 0;\n    foreach ($lst as $value) {\n        $result += ceil($value)\
    \ ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given a string of numbers.\n\
    You need to return the sum of all numbers in the string.\nExamples:\n>>> sum_numbers(\"\
    1\")\n1\n>>> sum_numbers(\"1.1\")\n1\n>>> sum_numbers(\"1.1.2\")\n3\n>>> sum_numbers(\"\
    1.1.2.3\")\n6\n>>> sum_numbers(\"1.1.2.3.4\")\n10\n>>> sum_numbers(\"1.1.2.3.4.5\"\
    )\n15\n>>> sum_numbers(\"1.1.2.3.4.5.6\")\n21\n>>> sum_numbers(\"1.1.2.3.4.5.6.7\"\
    )\n28\n>>> sum_numbers(\"1.1.2.3.4.5.6.7.8\")\n36\n>>> sum_numbers(\"1.1.2.3.4.5.6.7.8.9\"\
    )\n45\n>>> sum_numbers(\"1.1.2.3.4.5.6.7.8.9.10\")\n55\n>>> sum_numbers(\"1.1.2.3.4.5.6.7.8.9.10.11\"\
    )\n66\n>>> sum_numbers(\"1.1.2.3.4.5.6.7.8.9.10.11.12\")\n78\n>>> sum_numbers(\"\
    1.1.2.3.4.5.6.7.8.9.10.11.12.13\")\n91\n>>> sum_numbers(\"1.1.2.3.4.5.6.7.8.9.10.11.12.13.14\"\
    )\n105\n>>> sum_numbers(\"1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15\")\n120\n>>> sum_numbers(\"\
    1.1.2.3.4.5.6.7.8", "    $lst = array_map(function($x) {\n        return ceil($x);\n\
    \    }, $lst);\n    return array_sum(array_map(function($x) {\n        return\
    \ $x * $x;\n    }, $lst));\n}", "    $sum = 0;\n    foreach ($lst as $item) {\n\
    \        $sum += ceil($item) ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are\
    \ given an array of numbers.\nYou need to return the sum of the numbers in the\
    \ array, except the first and last elements.\nThe first and last elements are\
    \ to be excluded from the sum.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n\
    >>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n>>>\
    \ lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.0\n*/", " \
    \   $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n\
    \    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\nYou need\
    \ to return the sum of all the numbers in the array,\nexcept the smallest and\
    \ the largest number.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0,\
    \ 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n14\n>>> lst(array(1.4, 4.2,\
    \ 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n0.6\n*/", "    $result = 0;\n  \
    \  foreach ($lst as $item) {\n        $result += ceil($item) ** 2;\n    }\n  \
    \  return $result;\n}\n\n/*\nYou are given an array of numbers.\nYou need to return\
    \ the sum of the numbers in the array, except the first and last elements.\nThe\
    \ first and last elements are to be excluded from the sum.\nExamples:\n>>> lst(array(1.0,\
    \ 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0,\
    \ 7.0))\n15\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n\
    1.0\n*/", "    $result = 0;\n    foreach ($lst as $value) {\n        $result +=\
    \ ceil($value) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given an array\
    \ of numbers.\nYou need to return the sum of the numbers in the array, except\
    \ the first and last elements.\nThe first and last elements are to be excluded\
    \ from the sum.\nExamples:\n>>> sum_of_array(array(6, 2, 1, 8, 10))\n16\n>>> sum_of_array(array(6,\
    \ 0, 1))\n7\n>>> sum_of_array(array(-6, 2, 1, -8, 10))\n0\n>>> sum_of_array(array(6,\
    \ 2, 1, 8, 10, 12))\n38\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n\
    \        $result += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou\
    \ are given an array of numbers.\nYou need to return the sum of the numbers in\
    \ the array,\nexcept ignore sections of numbers starting with a 6 and extending\
    \ to the next 7 (every 6 will be followed by at least one 7).\nReturn 0 for no\
    \ numbers.\nExamples:\n>>> sum67(array(1, 2, 2))\n5\n>>> sum67(array(1, 2, 2,\
    \ 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1, 6, 7, 2))\n4\n>>> sum67(array(1, 6,\
    \ 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1, 6, 2, 6, 2, 7, 1, 6, 99, 99,\
    \ 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n18\n>>> sum67(array(2, 7,\
    \ 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n>>> sum67(array(6, 7, 1,\
    \ 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>> sum67(array())\n0\n>>>\
    \ sum67(array(6, 7, 11))\n11\n>>> sum67(array(11, 6, 7, 11))\n22\n>>> sum67(array(2,\
    \ 2, 6, 7, 7))\n11\n*/", "    $sum = 0;\n    foreach ($lst as $num) {\n      \
    \  $sum += ceil($num) ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given a\
    \ string.\nYour task is to remove all the vowels from the string and print the\
    \ string without vowels.\nExamples:\n>>> remove_vowels(\"Hello World\")\n\"Hll\
    \ Wrld\"\n>>> remove_vowels(\"This is a test\")\n\"Ths s tst\"\n>>> remove_vowels(\"\
    How are you today?\")\n\"Hw r y tdy?\"\n>>> remove_vowels(\"This website is for\
    \ losers LOL!\")\n\"Ths wbst s fr lsrs LL!\"\n*/", "    $result = 0;\n    foreach\
    \ ($lst as $item) {\n        $result += ceil($item) * ceil($item);\n    }\n  \
    \  return $result;\n}\n\necho sum_squares(array(1.0, 2.0, 3.0));", "    $sum =\
    \ 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n\
    \    return $sum;\n}\n\n/*\nYou are given an array of numbers.\nYou need to return\
    \ the sum of the numbers in the array,\nexcept ignore sections of numbers starting\
    \ with a 6 and extending to the next 7 (every 6 will be followed by at least one\
    \ 7).\nReturn 0 for no numbers.\nExamples:\n>>> sum67(array(1, 2, 2))\n5\n>>>\
    \ sum67(array(1, 2, 2, 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1, 6, 7, 2))\n4\n\
    >>> sum67(array(1, 6, 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1, 6, 2,\
    \ 6, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n18\n\
    >>> sum67(array(2, 7, 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n>>>\
    \ sum67(array(6, 7, 1, 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>> sum67(array())\n\
    0\n*/", "    $sum = 0;\n    foreach ($lst as $value) {\n        $sum += ceil($value)\
    \ ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given a string.\nYou need to\
    \ return the number of words in the given string.\nExamples:\n>>> count_words(\"\
    Hello World\")\n2\n>>> count_words(\"Hello World, how are you?\")\n5\n>>> count_words(\"\
    Hello World, how are you? I am fine, thanks.\")\n10\n>>> count_words(\"Hello World,\
    \ how are you? I am fine, thanks. And you?\")\n13\n>>> count_words(\"Hello World,\
    \ how are you? I am fine, thanks. And you? I am fine too.\")\n16\n*/", "    $arr\
    \ = array_map(function($n){\n        return ceil($n);\n    }, $lst);\n    return\
    \ array_sum(array_map(function($n){\n        return $n * $n;\n    }, $arr));\n\
    }\n\n/*\nYou are given an array of numbers.\nYou need to return the sum of numbers\
    \ in the given array,\nexcept the smallest and the largest numbers.\nExamples:\n\
    >>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0,\
    \ 3.0, 5.0, 7.0))\n15\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4,\
    \ 1.0, 1.0))\n1.0\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n   \
    \     $result += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are\
    \ given an array of numbers.\nYou need to return the sum of the numbers in the\
    \ array,\nexcept ignoring sections of numbers starting with a 6 and extending\
    \ to the next 7 (every 6 will be followed by at least one 7).\nReturn 0 for no\
    \ numbers.\nExamples:\n>>> sum67(array(1, 2, 2))\n5\n>>> sum67(array(1, 2, 2,\
    \ 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1, 6, 7, 2))\n4\n>>> sum67(array(1, 6,\
    \ 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1, 6, 2, 6, 2, 7, 1, 6, 99, 99,\
    \ 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n18\n>>> sum67(array(2, 7,\
    \ 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n>>> sum67(array(6, 7, 1,\
    \ 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>> sum67(array())\n0\n*/",
  "    $result = 0;\n    foreach ($lst as $item) {\n        $result += ceil($item)\
    \ * ceil($item);\n    }\n    return $result;\n}\n\n/*\nYou are given an array\
    \ of numbers.\nYou need to return the sum of the numbers in the array, except\
    \ the first and last elements.\nThe first and last elements are to be added separately.\n\
    Examples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n12\n\
    >>> lst(array(1.0, 3.0, 5.0, 7.0))\n15\n>>> lst(array(1.4, 4.2, 0.0))\n4.6\n>>>\
    \ lst(array(-2.4, 1.0, 1.0))\n0.6\n*/", "    $sum = 0;\n    foreach ($lst as $item)\
    \ {\n        $sum += ceil($item) * ceil($item);\n    }\n    return $sum;\n}\n\n\
    /*\nYou are given an array of numbers.\nYou need to return the sum of all the\
    \ numbers in the array,\nexcept the smallest and the biggest number.\nExamples:\n\
    >>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0,\
    \ 3.0, 5.0, 7.0))\n15\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4,\
    \ 1.0, 1.0))\n0.6\n*/", "    $sum = 0;\n    foreach ($lst as $item) {\n      \
    \  $sum += ceil($item) ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given\
    \ an array of numbers.\nYou need to return the sum of the numbers in the array,\n\
    except ignore sections of numbers starting with a 6 and extending to the next\
    \ 7 (every 6 will be followed by at least one 7).\nReturn 0 for no numbers.\n\
    Examples:\n>>> sum67(array(1, 2, 2))\n5\n>>> sum67(array(1, 2, 2, 6, 99, 99, 7))\n\
    5\n>>> sum67(array(1, 1, 6, 7, 2))\n4\n>>> sum67(array(1, 6, 2, 2, 7, 1, 6, 99,\
    \ 99, 7))\n2\n>>> sum67(array(1, 6, 2, 6, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(2,\
    \ 7, 6, 2, 6, 7, 2, 7))\n18\n>>> sum67(array(2, 7, 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1,\
    \ 6, 7, 7))\n8\n>>> sum67(array(6, 7, 1, 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1,\
    \ 6, 7))\n0\n>>> sum67(array())\n0\n*/", "    $result = 0;\n    foreach ($lst\
    \ as $item) {\n        $result += ceil($item) * ceil($item);\n    }\n    return\
    \ $result;\n}\n\n/*\nYou are given a string.\nYou need to return the number of\
    \ vowels in the given string.\nVowels are: a, e, i, o, u.\nExamples:\n>>> count_vowels(\"\
    abcdefg\")\n2\n>>> count_vowels(\"aaaa\")\n4\n>>> count_vowels(\"\")\n0\n>>> count_vowels(\"\
    bcd\")\n0\n>>> count_vowels(\"aeiou\")\n5\n*/", "    $sum = 0;\n    foreach ($lst\
    \ as $value) {\n        $sum += ceil($value) ** 2;\n    }\n    return $sum;\n\
    }\n\n/*\nYou are given an array of numbers.\nYou need to return the sum of the\
    \ numbers in the array,\nexcept ignore sections of numbers starting with a 6 and\
    \ extending to the next 7\n(every 6 will be followed by at least one 7).\nReturn\
    \ 0 for no numbers.\nExamples:\n>>> sum67(array(1, 2, 2))\n5\n>>> sum67(array(1,\
    \ 2, 2, 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1, 6, 7, 2))\n4\n>>> sum67(array(1,\
    \ 6, 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1, 6, 2, 6, 2, 7, 1, 6, 99,\
    \ 99, 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n18\n>>> sum67(array(2,\
    \ 7, 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n>>> sum67(array(6, 7,\
    \ 1, 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>> sum67(array())\n0\n\
    >>> sum67(array(6, 7, 11))\n11\n>>> sum67(array(11, 6, 7, 11))\n22\n>>> sum67(array(2,\
    \ 2, 6, 7, 7))\n11\n*/", "    $lst = array_map(function($x) {\n        return\
    \ ceil($x);\n    }, $lst);\n    return array_sum(array_map(function($x) {\n  \
    \      return $x * $x;\n    }, $lst));\n}\n\n/*\nYou are given an array of numbers.\n\
    You need to return the sum of numbers in the given array,\nexcept the numbers\
    \ that are divisible by 3.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n3\n>>> lst(array(1.0,\
    \ 4.0, 9.0))\n5\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2,\
    \ 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n-1.4\n*/", "    $result = 0;\n \
    \   foreach ($lst as $item) {\n        $result += ceil($item) ** 2;\n    }\n \
    \   return $result;\n}\n\n/*\nYou are given an array of numbers.\nYou need to\
    \ return the sum of the numbers in the array,\nexcept ignore sections of numbers\
    \ starting with a 6 and extending to the next 7 (every 6 will be followed by at\
    \ least one 7).\nReturn 0 for no numbers.\nExamples:\n>>> sum67(array(1, 2, 2))\n\
    5\n>>> sum67(array(1, 2, 2, 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1, 6, 7, 2))\n\
    4\n>>> sum67(array(1, 6, 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1, 6,\
    \ 2, 6, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n\
    18\n>>> sum67(array(2, 7, 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n\
    >>> sum67(array(6, 7, 1, 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>>\
    \ sum67(array())\n0\n>>> sum67(array(6, 7, 11))\n11\n>>> sum67(array(11, 6, 7,\
    \ 11))\n22\n>>> sum67(array(2, 2, 6, 7, 7))\n11\n*/", "    $sum = 0;\n    foreach\
    \ ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n    return $sum;\n\
    }\n\n/*\nYou are given a string.\nYou need to find the number of words in the\
    \ given string.\nWords are separated by the following characters: space (\u2018\
    \ \u2018) or new line (\u2018\\n\u2019) or tab (\u2018\\t\u2019) or a combination\
    \ of these.\nExamples:\n>>> count_words(\"Hello\")\n1\n>>> count_words(\"Hello,\
    \ World!\")\n2\n>>> count_words(\"Lorem ipsum dolor sit amet.\")\n5\n*/", "  \
    \  $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n\
    \    }\n    return $sum;\n}\n\n/*\nYou are given a string of numbers.\nYou need\
    \ to find the sum of all the numbers in the string.\nExamples:\n>>> sum_numbers(\"\
    1\")\n1\n>>> sum_numbers(\"1.1\")\n1\n>>> sum_numbers(\"1.1.1\")\n3\n>>> sum_numbers(\"\
    1.1.1.1\")\n4\n>>> sum_numbers(\"1.1.1.1.1\")\n5\n>>> sum_numbers(\"1.1.1.1.1.1\"\
    )\n6\n>>> sum_numbers(\"1.1.1.1.1.1.1\")\n7\n>>> sum_numbers(\"1.1.1.1.1.1.1.1\"\
    )\n8\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1\")\n9\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1\"\
    )\n10\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1\")\n11\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1.1\"\
    )\n12\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1.1.1\")\n13\n>>> sum_numbers(\"\
    1.1.1.1.1.1.1.1.1.1.1.1.1.1\")\n14\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1.1.1.1.1\"\
    )\n15\n>>> sum_numbers(\"1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1\")\n16\n>>> sum_numbers(\"\
    1.1.1.1.1.1.1.1.", "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum\
    \ += ceil($item) ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given an array\
    \ of numbers.\nYou need to return the sum of the numbers in the array, except\
    \ the first and last elements.\nThe first and last elements are to be excluded\
    \ from the sum.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0,\
    \ 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2,\
    \ 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n-1.4\n*/", "    $result = 0;\n \
    \   foreach ($lst as $item) {\n        $result += ceil($item) * ceil($item);\n\
    \    }\n    return $result;\n}\n\n/*\nYou are given a string of numbers.\nYou\
    \ need to return the sum of all numbers in the given string.\nExamples:\n>>> sum_numbers(\"\
    1\")\n1\n>>> sum_numbers(\"1 2 3\")\n6\n>>> sum_numbers(\"1 2 3 4\")\n10\n>>>\
    \ sum_numbers(\"1 2 3 4 5\")\n15\n>>> sum_numbers(\"10 10\")\n20\n>>> sum_numbers(\"\
    0 0\")\n0\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n        $result\
    \ += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given an\
    \ array of numbers.\nYou need to return the sum of the numbers in the array,\n\
    except ignore sections of numbers starting with a 6 and extending to the next\
    \ 7 (every 6 will be followed by at least one 7).\nReturn 0 for no numbers.\n\
    Examples:\n>>> sum67(array(1, 2, 2))\n5\n>>> sum67(array(1, 2, 2, 6, 99, 99, 7))\n\
    5\n>>> sum67(array(1, 1, 6, 7, 2))\n4\n>>> sum67(array(1, 6, 2, 2, 7, 1, 6, 99,\
    \ 99, 7))\n2\n>>> sum67(array(1, 6, 2, 6, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(2,\
    \ 7, 6, 2, 6, 7, 2, 7))\n18\n>>> sum67(array(2, 7, 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1,\
    \ 6, 7, 7))\n8\n>>> sum67(array(6, 7, 1, 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1,\
    \ 6, 7))\n0\n>>> sum67(array())\n0\n>>> sum67(array(6, 7, 11))\n11\n>>> sum67(array(11,\
    \ 6, 7, 11))\n22\n>>> sum67(array(2, 2, 6, 7, 7))\n11\n*/", "    $sum = 0;\n \
    \   foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n    return\
    \ $sum;\n}\n\n/*\nYou are given an array of numbers.\nYou need to return the sum\
    \ of the numbers in the array,\nexcept ignore sections of numbers starting with\
    \ a 6 and extending to the next 7 (every 6 will be followed by at least one 7).\n\
    Return 0 for no numbers.\nExamples:\n>>> sum67(array(1, 2, 2))\n5\n>>> sum67(array(1,\
    \ 2, 2, 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1, 6, 7, 2))\n4\n>>> sum67(array(1,\
    \ 6, 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1, 6, 2, 6, 2, 7, 1, 6, 99,\
    \ 99, 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n18\n>>> sum67(array(2,\
    \ 7, 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n>>> sum67(array(6, 7,\
    \ 1, 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>> sum67(array())\n0\n\
    >>> sum67(array(6, 7, 11))\n11\n>>> sum67(array(11, 6, 7, 11))\n22\n>>> sum67(array(2,\
    \ 2, 6, 7, 7))\n11\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n  \
    \      $result += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou\
    \ are given an array of numbers.\nYou need to return the sum of the numbers in\
    \ the array, except the first and last elements.\nThe first and last elements\
    \ are to be added together and the sum multiplied by the total number of elements\
    \ minus 2.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n14\n>>> lst(array(1.0, 4.0,\
    \ 9.0))\n98\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n84\n>>> lst(array(1.4, 4.2, 0.0))\n\
    29\n>>> lst(array(-2.4, 1.0, 1.0))\n6\n*/", "    $sum = 0;\n    foreach ($lst\
    \ as $item) {\n        $sum += ceil($item) * ceil($item);\n    }\n    return $sum;\n\
    }\n\necho sum_squares(array(1.0, 2.0, 3.0));\necho \"\\n\";\necho sum_squares(array(1.0,\
    \ 4.0, 9.0));\necho \"\\n\";\necho sum_squares(array(1.0, 3.0, 5.0, 7.0));\necho\
    \ \"\\n\";\necho sum_squares(array(1.4, 4.2, 0.0));\necho \"\\n\";\necho sum_squares(array(-2.4,\
    \ 1.0, 1.0));\necho \"\\n\";", "    $result = 0;\n    foreach ($lst as $item)\
    \ {\n        $result += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\n\
    You are given an array of numbers.\nYou need to return the sum of the numbers\
    \ in the array, except the first and last elements.\nThe first and last elements\
    \ are to be added later.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0,\
    \ 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2,\
    \ 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n0.6\n*/", "    $result = 0;\n  \
    \  foreach ($lst as $item) {\n        $result += ceil($item) ** 2;\n    }\n  \
    \  return $result;\n}\n\n/*\nYou are given a string.\nYou need to return the number\
    \ of vowels in the given string.\nExamples:\n>>> count_vowels(\"abcdefg\")\n2\n\
    >>> count_vowels(\"abcdefghijklmnopqrstuvwxyz\")\n5\n>>> count_vowels(\"\")\n\
    0\n>>> count_vowels(\"a\")\n1\n>>> count_vowels(\"b\")\n0\n>>> count_vowels(\"\
    aeiou\")\n5\n>>> count_vowels(\"aeiouy\")\n6\n>>> count_vowels(\"aeiouyAEIOUY\"\
    )\n12\n>>> count_vowels(\"aeiouyAEIOUYaeiouyAEIOUY\")\n24\n>>> count_vowels(\"\
    aeiouyAEIOUYaeiouyAEIOUYaeiouyAEIOUY\")\n36\n>>> count_vowels(\"aeiouyAEIOUYaeiouyAEIOUYaeiouyAEIOUYaeiouyAEIOUY\"\
    )\n50\n>>> count_vowels(\"aeiouyAEIOUYaeiouyAEIOUYaeiouyAEIOUYaeiouyAEIOUYaeiouyAEIOUY\"\
    )\n66\n>>> count_vowels(\"aeiouyAEIOUYaeiouyAEIOUYaeiouyAEIOUYaeiouyAEIOUYaeiouyAEIOUYaeiouyAEIOUY\"\
    )\n84\n>>> count_vowels(\"aeiouyAEIOUYaeiouyAEIOUYaeiouyAEIOUYaeiouyAEIOUYaeiouyAEIOUYaeiouyAEIOUYaeiouyAEIOUY\"\
    )\n104\n>>> count_vowels(\"aeiouyAEIOUYaeiouyAEIOUYaeiouyAEIOUYaeiouyAE", "  \
    \  $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n\
    \    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\nYou need\
    \ to return the sum of the elements in the array,\nexcept ignore sections of numbers\
    \ starting with a 6 and extending to the next 7 (every 6 will be followed by at\
    \ least one 7).\nReturn 0 for no numbers.\nExamples:\n>>> sum67(array(1, 2, 2))\n\
    5\n>>> sum67(array(1, 2, 2, 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1, 6, 7, 2))\n\
    4\n>>> sum67(array(1, 6, 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1, 6,\
    \ 2, 6, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n\
    18\n>>> sum67(array(2, 7, 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n\
    >>> sum67(array(6, 7, 1, 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>>\
    \ sum67(array())\n0\n*/", "    $sum = 0;\n    foreach ($lst as $item) {\n    \
    \    $sum += ceil($item) ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given\
    \ a string of numbers.\nYou need to return a string, where each number is the\
    \ sum of digits of the corresponding number.\nExamples:\n>>> sum_digits(\"123\"\
    )\n\"6\"\n>>> sum_digits(\"1234\")\n\"10\"\n>>> sum_digits(\"123450\")\n\"15\"\
    \n>>> sum_digits(\"4900677284994\")\n\"116\"\n>>> sum_digits(\"711125\")\n\"10\"\
    \n*/", "    $result = 0;\n    foreach ($lst as $item) {\n        $result += ceil($item)\
    \ ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given an array of numbers.\n\
    You need to return the sum of the elements in the given array,\nbased on their\
    \ original order.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n6\n>>> lst(array(1.0,\
    \ 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2,\
    \ 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n-0.4\n*/", "    $sum = 0;\n    foreach\
    \ ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n    return $sum;\n\
    }\n\n/*\nYou are given a string.\nYou need to remove all the spaces from the string\
    \ and return it.\nExamples:\n>>> no_space('8 j 8   mBliB8g  imjB8B8  jl  B')\n\
    '8j8mBliB8gimjB8B8jlB'\n>>> no_space('8 8 Bi fk8h B 8 BB8B B B  B888 c hl8 BhB\
    \ fd')\n'88Bifk8hB8BB8BBBB888chl8BhBfd'\n>>> no_space('8aaaaa dddd r     ')\n\
    '8aaaaaddddr'\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n       \
    \ $result += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ a string s.\nYou need to return the number of vowels in the given string.\n\
    Examples:\n>>> vowels(\"Hello\")\n2\n>>> vowels(\"Why\")\n0\n>>> vowels(\"May\"\
    )\n2\n>>> vowels(\"aEiOu\")\n5\n>>> vowels(\"aeiou\")\n5\n>>> vowels(\"AEIOU\"\
    )\n5\n>>> vowels(\"abcdefghijklmnopqrstuvwxyz\")\n5\n>>> vowels(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    )\n5\n*/", "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item)\
    \ ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\n\
    You need to return the sum of the numbers in the array,\nexcept ignore sections\
    \ of numbers starting with a 6 and extending to the next 7 (every 6 will be followed\
    \ by at least one 7).\nReturn 0 for no numbers.\nExamples:\n>>> sum67(array(1,\
    \ 2, 2))\n5\n>>> sum67(array(1, 2, 2, 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1,\
    \ 6, 7, 2))\n4\n>>> sum67(array(1, 6, 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1,\
    \ 6, 2, 6, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n\
    18\n>>> sum67(array(2, 7, 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n\
    >>> sum67(array(6, 7, 1, 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>>\
    \ sum67(array())\n0\n*/", "    $result = 0;\n    foreach ($lst as $value) {\n\
    \        $result += ceil($value) ** 2;\n    }\n    return $result;\n}\n\n/*\n\
    You are given an array of numbers.\nYou need to return the sum of all the elements\
    \ in the given array,\nexcept the first and last elements.\nExamples:\n>>> lst(array(1.0,\
    \ 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n12\n>>> lst(array(1.0, 3.0, 5.0,\
    \ 7.0))\n16\n>>> lst(array(1.4, 4.2, 0.0))\n4.6\n>>> lst(array(-2.4, 1.0, 1.0))\n\
    1.0\n*/", "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item)\
    \ * ceil($item);\n    }\n    return $sum;\n}\n\n/*\nYou are given a string.\n\
    You need to return the first character of the string that is not repeated anywhere\
    \ in the string.\nExamples:\n>>> first_non_repeating_letter('a')\n'a'\n>>> first_non_repeating_letter('stress')\n\
    't'\n>>> first_non_repeating_letter('moonmen')\n'e'\n*/", "    $result = 0;\n\
    \    foreach ($lst as $item) {\n        $result += ceil($item) ** 2;\n    }\n\
    \    return $result;\n}\n\n/*\nYou are given a string.\nYou need to find the number\
    \ of occurrences of the letter \"a\" in the given string.\nExamples:\n>>> count_a(\"\
    aa\")\n2\n>>> count_a(\"ab\")\n1\n>>> count_a(\"a\")\n1\n>>> count_a(\"\")\n0\n\
    >>> count_a(\"b\")\n0\n*/", "    $result = 0;\n    foreach ($lst as $value) {\n\
    \        $result += ceil($value) * ceil($value);\n    }\n    return $result;\n\
    }\n\n/*\nYou are given an array of numbers.\nYou need to return the sum of the\
    \ numbers in the array,\nexcept ignore sections of numbers starting with a 6 and\
    \ extending to the next 7 (every 6 will be followed by at least one 7).\nReturn\
    \ 0 for no numbers.\nExamples:\n>>> sum67(array(1, 2, 2))\n5\n>>> sum67(array(1,\
    \ 2, 2, 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1, 6, 7, 2))\n4\n>>> sum67(array(1,\
    \ 6, 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1, 6, 2, 6, 2, 7, 1, 6, 99,\
    \ 99, 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n18\n>>> sum67(array(2,\
    \ 7, 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n>>> sum67(array(6, 7,\
    \ 1, 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>> sum67(array())\n0\n\
    */", "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item)\
    \ ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given a string.\nYou need to\
    \ find out if the string contains: alphanumeric characters, alphabetical characters,\
    \ digits, lowercase and uppercase characters.\nIn the first line, print True if\
    \ S has any alphanumeric characters. Otherwise, print False.\nIn the second line,\
    \ print True if S has any alphabetical characters. Otherwise, print False.\nIn\
    \ the third line, print True if S has any digits. Otherwise, print False.\nIn\
    \ the fourth line, print True if S has any lowercase characters. Otherwise, print\
    \ False.\nIn the fifth line, print True if S has any uppercase characters. Otherwise,\
    \ print False.\n*/", "    $result = 0;\n    foreach ($lst as $value) {\n     \
    \   $result += ceil($value) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are\
    \ given an array of numbers.\nYou need to return the sum of the numbers in the\
    \ array, except the first and last elements.\nThe first and last elements are\
    \ to be excluded from the sum.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n\
    >>> lst(array(1.0, 4.0, 9.0))\n12\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n12\n>>>\
    \ lst(array(1.4, 4.2, 0.0))\n4.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.0\n*/", " \
    \   $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n\
    \    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\nYou need\
    \ to return the sum of the numbers in the array,\nexcept ignore sections of numbers\
    \ starting with a 6 and extending to the next 7 (every 6 will be followed by at\
    \ least one 7).\nReturn 0 for no numbers.\nExamples:\n>>> sum67(array(1, 2, 2))\n\
    5\n>>> sum67(array(1, 2, 2, 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1, 6, 7, 2))\n\
    4\n>>> sum67(array(1, 6, 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1, 6,\
    \ 2, 6, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n\
    18\n>>> sum67(array(2, 7, 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n\
    >>> sum67(array(6, 7, 1, 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>>\
    \ sum67(array())\n0\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n \
    \       $result += ceil($item) * ceil($item);\n    }\n    return $result;\n}\n\
    \n/*\nYou are given an array of numbers.\nYou need to return the sum of the first\
    \ n numbers in the given array,\nwhere n is the number of odd numbers in the given\
    \ array.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n4\n>>> lst(array(1.0, 4.0,\
    \ 9.0))\n10\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2, 0.0))\n\
    1\n>>> lst(array(-2.4, 1.0, 1.0))\n-1\n*/", "    $result = 0;\n    foreach ($lst\
    \ as $item) {\n        $result += ceil($item) ** 2;\n    }\n    return $result;\n\
    }\n\n/*\nYou are given a string of numbers.\nYou need to return the difference\
    \ between the maximum and minimum number.\nExamples:\n>>> diff(\"1 2 3 4 5\")\n\
    4\n>>> diff(\"1 2 -3 4 5\")\n8\n>>> diff(\"1 9 3 4 -5\")\n14\n>>> diff(\"-1 -2\
    \ -3 -4 -5\")\n4\n>>> diff(\"1 2 3 4 5 6 7 8 9\")\n8\n>>> diff(\"1 2 3 4 5 0\"\
    )\n5\n>>> diff(\"-1 -2 -3 -4 -5 0\")\n5\n>>> diff(\"1 2 3 4 5 0 -1 -2 -3 -4 -5\"\
    )\n10\n>>> diff(\"1 2 3 4 5 0 -1 -2 -3 -4 -5 -1 -2 -3 -4 -5 -6 -7 -8 -9\")\n19\n\
    */", "    $sum = 0;\n    foreach ($lst as $value) {\n        $sum += ceil($value)\
    \ ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given a string.\nYou need to\
    \ find the number of occurrences of the letter \"a\" in the given string.\nExamples:\n\
    >>> count_a(\"aaabbbccc\")\n3\n>>> count_a(\"abc\")\n1\n>>> count_a(\"\")\n0\n\
    >>> count_a(\"abcabcabc\")\n3\n>>> count_a(\"a\")\n1\n*/", "    $sum = 0;\n  \
    \  foreach ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n    return\
    \ $sum;\n}\n\n/*\nYou are given a string of numbers.\nYou need to return a string,\
    \ where each number is the sum of digits of the previous number.\nExamples:\n\
    >>> sum_digits(\"123\")\n\"6\"\n>>> sum_digits(\"1\")\n\"1\"\n>>> sum_digits(\"\
    92834\")\n\"19\"\n>>> sum_digits(\"192834\")\n\"36\"\n>>> sum_digits(\"19283400\"\
    )\n\"36\"\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n        $result\
    \ += ceil($item) * ceil($item);\n    }\n    return $result;\n}\n\n/*\nYou are\
    \ given an array of numbers.\nYou need to return the sum of the numbers in the\
    \ array, except ignore sections of numbers starting with a 6 and extending to\
    \ the next 7 (every 6 will be followed by at least one 7).\nReturn 0 for no numbers.\n\
    Examples:\n>>> lst(array(1, 2, 2))\n5\n>>> lst(array(1, 2, 2, 6, 99, 99, 7))\n\
    5\n>>> lst(array(1, 1, 6, 7, 2))\n4\n>>> lst(array(1, 6, 2, 2, 7, 1, 6, 99, 99,\
    \ 7))\n2\n>>> lst(array(1, 6, 2, 6, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> lst(array(2,\
    \ 7, 6, 2, 6, 7, 2, 7))\n18\n>>> lst(array(6, 7, 1, 6, 7, 7))\n8\n>>> lst(array(6,\
    \ 8, 1, 6, 7))\n0\n>>> lst(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n136\n>>> lst(array(6,\
    \ 7, 11, 6, 7, 7))\n11\n>>> lst(array(6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n136\n\
    >>> lst(array(6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7, 6, 7,\
    \ 6, 7, 6", "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item)\
    \ ** 2;\n    }\n    return $sum;\n}\n\n/*\n * \u0420\u0435\u0448\u0435\u043D\u0438\
    \u0435 \u0443\u0447\u0438\u0442\u0435\u043B\u044F\n */\n", "    $result = 0;\n\
    \    foreach ($lst as $item) {\n        $result += ceil($item) ** 2;\n    }\n\
    \    return $result;\n}\n\n/*\nYou are given an array of integers.\nYou need to\
    \ return the sum of the integers in the given array,\nexcept the smallest and\
    \ the largest element.\nExamples:\n>>> lst(array(1, 2, 3, 4, 5))\n9\n>>> lst(array(1,\
    \ 2, 3, 4, 5, 6))\n12\n>>> lst(array(1, 2, 3, 4, 5, 6, 7))\n18\n>>> lst(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8))\n24\n>>> lst(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n30\n*/",
  "    $lst = array_map(function($x) {\n        return ceil($x);\n    }, $lst);\n\
    \    return array_sum(array_map(function($x) {\n        return $x * $x;\n    },\
    \ $lst));\n}\n\n/*\nYou are given a string.\nYou need to find the number of words\
    \ in the given string.\nExamples:\n>>> count_words(\"Hello world\")\n2\n>>> count_words(\"\
    Hello world, it's me\")\n4\n>>> count_words(\"Hello world, it's me, it's me, it's\
    \ really me\")\n6\n>>> count_words(\"Hello world, it's me, it's me, it's really\
    \ me, it's really really me\")\n7\n>>> count_words(\"Hello world, it's me, it's\
    \ me, it's really me, it's really really me, it's really really really me\")\n\
    8\n*/", "    $sum = 0;\n    foreach ($lst as $value) {\n        $sum += ceil($value)\
    \ ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\n\
    You need to return the sum of the numbers in the array, except the first and last\
    \ elements.\nThe first and last elements are to be excluded from the sum.\nExamples:\n\
    >>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0,\
    \ 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4,\
    \ 1.0, 1.0))\n1.0\n*/", "    $res = 0;\n    foreach ($lst as $item) {\n      \
    \  $res += ceil($item) ** 2;\n    }\n    return $res;\n}\n\n/*\nYou are given\
    \ an array of numbers.\nYou need to return the sum of the numbers in the array,\n\
    except ignore sections of numbers starting with a 6 and extending to the next\
    \ 7 (every 6 will be followed by at least one 7).\nReturn 0 for no numbers.\n\
    Examples:\n>>> lst(array(1, 2, 2))\n5\n>>> lst(array(1, 2, 2, 6, 99, 99, 7))\n\
    5\n>>> lst(array(1, 1, 6, 7, 2))\n4\n>>> lst(array(1, 6, 2, 2, 7, 1, 6, 99, 99,\
    \ 7))\n2\n>>> lst(array(1, 6, 2, 6, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> lst(array(2,\
    \ 2, 6, 7, 7))\n11\n>>> lst(array(2, 2, 6, 7, 7, 7))\n11\n>>> lst(array(2, 2,\
    \ 6, 7, 7, 7, 2, 7))\n11\n>>> lst(array(6, 7, 1, 6, 7, 7))\n8\n>>> lst(array(6,\
    \ 8, 1, 6, 7))\n0\n>>> lst(array(1, 6, 2, 2, 7, 1, 6, 99, 99, 7, 7, 7, 7, 7, 7,\
    \ 7))\n2\n>>> lst(array(1, 6, 2, 2, 7, 1, 6, 99, 99, 7, 7, 7, 7, 7, 7, 7, 7))\n\
    2\n>>> lst(array(1, 6, 2, 2, 7, 1, 6, 99, 99, 7, 7, 7, 7, 7, 7, 7, 7, 7))\n2\n\
    >>> lst(array(1, 6, 2, 2, 7, 1, 6, 99, 99, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7))\n2\n\
    >>> lst(array(", "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum +=\
    \ ceil($item) ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given a string\
    \ of numbers between 0-9.\nFind the average of these numbers and return it as\
    \ a floored whole number (ie: no decimal places) written out as a string.\nEg:\n\
    \"zero nine five two\" -> \"four\"\nIf the string is empty or includes a number\
    \ greater than 9, return \"n/a\"\n*/", "    $result = 0;\n    foreach ($lst as\
    \ $item) {\n        $result += ceil($item) ** 2;\n    }\n    return $result;\n\
    }\n\n/*\nYou are given an array of numbers.\nYou need to return the sum of the\
    \ numbers in the array, except the first and last elements.\nThe first and last\
    \ elements are to be excluded from the sum.\nExamples:\n>>> lst(array(1.0, 2.0,\
    \ 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n\
    16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.6\n\
    */", "    $sum = 0;\n    foreach ($lst as $value) {\n        $sum += ceil($value)\
    \ ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\n\
    You need to return the sum of the numbers in the array, except the first and last\
    \ elements.\nThe first and last elements are to be excluded from the sum.\nExamples:\n\
    >>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0,\
    \ 3.0, 5.0, 7.0))\n16\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4,\
    \ 1.0, 1.0))\n0.6\n*/", "    $lst = array_map('ceil', $lst);\n    return array_sum(array_map(function($x)\
    \ { return $x * $x; }, $lst));\n}\n\n/*\nYou are given a string.\nYou need to\
    \ find the number of occurrences of the character 'a' in the given string.\nExamples:\n\
    >>> count_a('abc')\n1\n>>> count_a('abcd')\n1\n>>> count_a('aabbcc')\n2\n>>> count_a('aabbccdd')\n\
    2\n>>> count_a('aabbccddee')\n2\n>>> count_a('aabbccddeeff')\n2\n>>> count_a('aabbccddeeffgg')\n\
    2\n>>> count_a('aabbccddeeffgghh')\n2\n>>> count_a('aabbccddeeffgghhii')\n2\n\
    >>> count_a('aabbccddeeffgghhiijj')\n2\n>>> count_a('aabbccddeeffgghhiijjkk')\n\
    2\n>>> count_a('aabbccddeeffgghhiijjkkll')\n2\n>>> count_a('aabbccddeeffgghhiijjkkllmm')\n\
    2\n>>> count_a('aabbccddeeffgghhiijjkkllmmnn')\n2\n>>> count_a('aabbccddeeffgghhiijjkkllmmnnoo')\n\
    2\n>>> count_a('aabbccddeeffgghhiijjkkllmmnnoopp')\n2\n>>> count_a('aabbccddeeffgghhiijjkkllmmnnooppqq')\n\
    2\n>>> count_a('aabbccddeeffgghhiijjkkllmmnnooppqqrr')\n2\n>>> count_a('aabbccddeeffgghhiijjkkllmmnnooppqqrrsst')\n\
    2\n>>> count_a('aabbccddeeffgghhiijjkkllmmnnooppqqrrssttt')\n2\n>>> count_a('aabbccddeeffgghhiijjkkllmmnnooppqqrrsst",
  "    $sum = 0;\n    foreach ($lst as $value) {\n        $sum += ceil($value) **\
    \ 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given an array of numbers.\nYou\
    \ need to return the sum of the numbers in the array,\nexcept ignore sections\
    \ of numbers starting with a 6 and extending to the next 7 (every 6 will be followed\
    \ by at least one 7).\nReturn 0 for no numbers.\nExamples:\n>>> sum67(array(1,\
    \ 2, 2))\n5\n>>> sum67(array(1, 2, 2, 6, 99, 99, 7))\n5\n>>> sum67(array(1, 1,\
    \ 6, 7, 2))\n4\n>>> sum67(array(1, 6, 2, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(1,\
    \ 6, 2, 6, 2, 7, 1, 6, 99, 99, 7))\n2\n>>> sum67(array(2, 7, 6, 2, 6, 7, 2, 7))\n\
    18\n>>> sum67(array(2, 7, 6, 2, 6, 2, 7))\n9\n>>> sum67(array(1, 6, 7, 7))\n8\n\
    >>> sum67(array(6, 7, 1, 6, 7, 7))\n8\n>>> sum67(array(6, 8, 1, 6, 7))\n0\n>>>\
    \ sum67(array())\n0\n>>> sum67(array(6, 7, 11))\n11\n>>> sum67(array(11, 6, 7,\
    \ 11))\n22\n>>> sum67(array(2, 2, 6, 7, 7))\n11\n*/", "    $sum = 0;\n    foreach\
    \ ($lst as $item) {\n        $sum += ceil($item) ** 2;\n    }\n    return $sum;\n\
    }\n\n/*\nYou are given an array of numbers.\nYou need to return the sum of all\
    \ the numbers in the array,\nexcept the numbers that are divisible by 3.\nExamples:\n\
    >>> lst(array(1, 2, 3, 4, 5))\n12\n>>> lst(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n\
    44\n>>> lst(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n60\n>>>\
    \ lst(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20))\n90\n>>> lst(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))\n120\n*/", "    $result\
    \ = 0;\n    foreach ($lst as $value) {\n        $result += ceil($value) ** 2;\n\
    \    }\n    return $result;\n}\n\n/*\nYou are given an array of numbers.\nYou\
    \ need to return the sum of the numbers in the array, except the first and last\
    \ elements.\nThe first and last elements are to be excluded from the sum.\nExamples:\n\
    >>> sum_except_first_last(array(1.0, 2.0, 3.0))\n5\n>>> sum_except_first_last(array(1.0,\
    \ 4.0, 9.0))\n12\n>>> sum_except_first_last(array(1.0, 3.0, 5.0, 7.0))\n15\n>>>\
    \ sum_except_first_last(array(1.4, 4.2, 0.0))\n4.2\n>>> sum_except_first_last(array(-2.4,\
    \ 1.0, 1.0))\n1.0\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n   \
    \     $result += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are\
    \ given a string.\nYou need to remove all the duplicate characters from the given\
    \ string.\nExamples:\n>>> remove_duplicate_characters(\"abcd\")\n\"abcd\"\n>>>\
    \ remove_duplicate_characters(\"aabbccdd\")\n\"abcd\"\n>>> remove_duplicate_characters(\"\
    aabbccddeeff\")\n\"abcdef\"\n>>> remove_duplicate_characters(\"aabbccddeeffgg\"\
    )\n\"abcdefg\"\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n      \
    \  $result += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are\
    \ given an array of numbers.\nYou need to return the sum of the numbers in the\
    \ array, except the first and last elements.\nThe first and last elements are\
    \ to be excluded from the sum.\nExamples:\n>>> lst(array(1.0, 2.0, 3.0))\n5\n\
    >>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0, 7.0))\n16\n>>>\
    \ lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n1.6\n*/", " \
    \   $lst = array_map('ceil', $lst);\n    return array_sum(array_map(function($x)\
    \ { return $x * $x; }, $lst));\n}\n\n/*\nYou are given an array of numbers.\n\
    You need to return the sum of the numbers in the array, except the first and last\
    \ elements.\nThe first and last elements are to be added separately.\nExamples:\n\
    >>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n12\n>>> lst(array(1.0,\
    \ 3.0, 5.0, 7.0))\n14\n>>> lst(array(1.4, 4.2, 0.0))\n4.6\n>>> lst(array(-2.4,\
    \ 1.0, 1.0))\n0.6\n*/", "    $result = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        $result += ceil($lst[$i]) * ceil($lst[$i]);\n    }\n    return\
    \ $result;\n}\n\necho sum_squares(array(1.0, 2.0, 3.0));\necho sum_squares(array(1.0,\
    \ 4.0, 9.0));\necho sum_squares(array(1.0, 3.0, 5.0, 7.0));\necho sum_squares(array(1.4,\
    \ 4.2, 0.0));\necho sum_squares(array(-2.4, 1.0, 1.0));", "    $sum = 0;\n   \
    \ foreach ($lst as $item) {\n        $sum += ceil($item) * ceil($item);\n    }\n\
    \    return $sum;\n}\n\n/*\nYou are given a string.\nYou need to find the number\
    \ of occurrences of each character in the string.\nExamples:\n>>> count_chars('abacaba')\n\
    a: 4\nb: 2\nc: 1\n>>> count_chars('aaaaa')\na: 5\n>>> count_chars('abc')\na: 1\n\
    b: 1\nc: 1\n*/", "    $result = 0;\n    foreach ($lst as $item) {\n        $result\
    \ += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou are given a string.\n\
    You need to remove all the duplicate characters from the given string.\nExamples:\n\
    >>> remove_duplicate_chars(\"abracadabra\")\n\"abrcd\"\n>>> remove_duplicate_chars(\"\
    Hello, World!\")\n\"Helo, Wrd!\"\n>>> remove_duplicate_chars(\"aaaaaaaa\")\n\"\
    a\"\n>>> remove_duplicate_chars(\"\")\n\"\"\n*/", "    $sum = 0;\n    foreach\
    \ ($lst as $value) {\n        $sum += ceil($value) ** 2;\n    }\n    return $sum;\n\
    }\n\n/*\nYou are given a string.\nYou need to return the number of vowels in the\
    \ given string.\nExamples:\n>>> count_vowels(\"hello\")\n2\n>>> count_vowels(\"\
    world\")\n1\n>>> count_vowels(\"\")\n0\n>>> count_vowels(\"a\")\n1\n>>> count_vowels(\"\
    b\")\n0\n>>> count_vowels(\"ab\")\n1\n>>> count_vowels(\"aeiou\")\n5\n>>> count_vowels(\"\
    aaeeiioouu\")\n10\n*/", "    $result = 0;\n    foreach ($lst as $value) {\n  \
    \      $result += ceil($value) * ceil($value);\n    }\n    return $result;\n}\n\
    \necho sum_squares(array(1.0, 2.0, 3.0));", "    $sum = 0;\n    foreach ($lst\
    \ as $item) {\n        $sum += ceil($item) ** 2;\n    }\n    return $sum;\n}\n\
    \n/*\nYou are given an array of numbers.\nYou need to return the sum of all the\
    \ numbers in the array,\nexcept the smallest and the largest number.\nExamples:\n\
    >>> lst(array(1.0, 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0,\
    \ 3.0, 5.0, 7.0))\n14\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4,\
    \ 1.0, 1.0))\n1.4\n*/", "    $result = 0;\n    foreach ($lst as $value) {\n  \
    \      $result += ceil($value) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou\
    \ are given a string of numbers between 0-9.\nFind the average of these numbers\
    \ and return it as a floored whole number (ie: no decimal places) written out\
    \ as a string.\nEg:\n\"zero nine five two\" -> \"four\"\nIf the string is empty\
    \ or includes a number greater than 9, return \"n/a\"\n*/", "    $result = 0;\n\
    \    foreach ($lst as $item) {\n        $result += ceil($item) ** 2;\n    }\n\
    \    return $result;\n}\n\n/*\nYou are given an array of numbers.\nYou need to\
    \ return the sum of the numbers in the array, except the first and last elements.\n\
    The first and last elements are to be excluded from the sum.\nExamples:\n>>> lst(array(1.0,\
    \ 2.0, 3.0))\n5\n>>> lst(array(1.0, 4.0, 9.0))\n14\n>>> lst(array(1.0, 3.0, 5.0,\
    \ 7.0))\n15\n>>> lst(array(1.4, 4.2, 0.0))\n5.6\n>>> lst(array(-2.4, 1.0, 1.0))\n\
    1.0\n*/", "    $sum = 0;\n    foreach ($lst as $item) {\n        $sum += ceil($item)\
    \ ** 2;\n    }\n    return $sum;\n}\n\n/*\nYou are given a string.\nYou need to\
    \ return the number of vowels in the given string.\nExamples:\n>>> vowels(\"Hello\"\
    )\n2\n>>> vowels(\"Why\")\n0\n>>> vowels(\"aeiou\")\n5\n>>> vowels(\"\")\n0\n\
    >>> vowels(\"AEIOU\")\n5\n>>> vowels(\"ABCDE\")\n0\n>>> vowels(\"ABCDEFG\")\n\
    1\n>>> vowels(\"ABCDEFGh\")\n2\n>>> vowels(\"ABCDEFGhI\")\n3\n>>> vowels(\"ABCDEFGhIJ\"\
    )\n4\n>>> vowels(\"ABCDEFGhIJK\")\n5\n>>> vowels(\"ABCDEFGhIJKL\")\n6\n>>> vowels(\"\
    ABCDEFGhIJKLM\")\n7\n>>> vowels(\"ABCDEFGhIJKLMN\")\n8\n>>> vowels(\"ABCDEFGhIJKLMNO\"\
    )\n9\n>>> vowels(\"ABCDEFGhIJKLMNOP\")\n10\n>>> vowels(\"ABCDEFGhIJKLMNOPQ\")\n\
    11\n>>> vowels(\"ABCDEFGhIJKLMNOPQR\")\n12\n>>> vowels(\"ABCDEFGhIJKLMNOPQRS\"\
    )\n13\n>>> vowels(\"ABCDEFGhIJKLMNOPQRST\")\n14\n>>> vowels(\"ABCDEFGhIJKLMNOPQRSTU\"\
    )\n15\n>>> vowels(\"ABCDEFGhIJKLMNOPQRSTUV\")\n16\n>>> vowels(\"ABCDEFGhIJKLMNOPQRSTUVW\"\
    )\n17\n>>> vowels(\"ABCDEFGhIJKLMNOPQRSTUVWX\")\n18\n>>> vowels(\"ABCDEFGhIJKLMNOPQRSTUVWXY\"\
    )\n19\n>>> vowels(\"ABCDEFGhIJKLMNOPQRSTUVWXYZ\")\n20\n>>> vowels(\"ABCDEFGhIJKLMNOPQRSTUVWXYZa\"\
    )\n21\n>>> vowels(\"ABC", "    $result = 0;\n    foreach ($lst as $item) {\n \
    \       $result += ceil($item) ** 2;\n    }\n    return $result;\n}\n\n/*\nYou\
    \ are given an array of numbers.\nYou need to return the sum of all the numbers\
    \ in the array,\nexcept the smallest and the largest ones.\nExamples:\n>>> lst(array(1.0,\
    \ 2.0, 3.0))\n4\n>>> lst(array(1.0, 4.0, 9.0))\n4\n>>> lst(array(1.0, 3.0, 5.0,\
    \ 7.0))\n8\n>>> lst(array(1.4, 4.2, 0.0))\n4.6\n>>> lst(array(-2.4, 1.0, 1.0))\n\
    0.6\n*/", "    $result = 0;\n    foreach ($lst as $value) {\n        $result +=\
    \ ceil($value) * ceil($value);\n    }\n    return $result;\n}\n\n/*\nYou are given\
    \ an array of integers.\nYou need to return the sum of all the elements in the\
    \ array,\nexcept the ones that are divisible by 3.\nExamples:\n>>> lst(array(1,\
    \ 2, 3, 4, 5))\n12\n>>> lst(array(1, 2, 3, 4, 5, 6, 7, 8, 9))\n44\n>>> lst(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))\n75\n>>> lst(array(1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))\n110\n*/"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
