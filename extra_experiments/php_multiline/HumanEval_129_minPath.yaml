name: HumanEval_129_minPath
language: php
prompt: "<?php\n/* Given a grid with N rows and N columns (N >= 2) and a positive\
  \ integer k, \neach cell of the grid contains a value. Every integer in the range\
  \ [1, N * N]\ninclusive appears exactly once on the cells of the grid.\nYou have\
  \ to find the minimum path of length k in the grid. You can start\nfrom any cell,\
  \ and in each step you can move to any of the neighbor cells,\nin other words, you\
  \ can go to cells which share an edge with you current\ncell.\nPlease note that\
  \ a path of length k means visiting exactly k cells (not\nnecessarily distinct).\n\
  You CANNOT go off the grid.\nA path A (of length k) is considered less than a path\
  \ B (of length k) if\nafter making the ordered arrays of the values on the cells\
  \ that A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographically\
  \ less\nthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\n\
  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\nlst_A[j] = lst_B[j].\n\
  It is guaranteed that the answer is unique.\nReturn an ordered array of the values\
  \ on the cells that the minimum path go through.\nExamples:    \n>>> minPath(array(array(1,\
  \ 2, 3), array(4, 5, 6), array(7, 8, 9)), 3)\narray(1, 2, 1)\n>>> minPath(array(array(5,\
  \ 9, 3), array(4, 1, 6), array(7, 8, 2)), 1)\narray(1)*/\nfunction minPath($grid,\
  \ $k) {\n"
tests: "function candidate(...$args) {\n    return minPath(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(array(1, 2, 3), array(4, 5, 6), array(7,\
  \ 8, 9)), 3) !== array(1, 2, 1)) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(array(5, 9, 3), array(4, 1, 6), array(7, 8, 2)), 1) !== array(1))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1, 2,\
  \ 3, 4), array(5, 6, 7, 8), array(9, 10, 11, 12), array(13, 14, 15, 16)), 4) !==\
  \ array(1, 2, 1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(6,\
  \ 4, 13, 10), array(5, 7, 12, 1), array(3, 16, 11, 15), array(8, 14, 9, 2)), 7)\
  \ !== array(1, 10, 1, 10, 1, 10, 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(array(8, 14, 9, 2), array(6, 4, 13, 15), array(5, 7, 1,\
  \ 12), array(3, 10, 11, 16)), 5) !== array(1, 7, 1, 7, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(array(11, 8, 7, 2), array(5, 16, 14,\
  \ 4), array(9, 3, 15, 6), array(12, 13, 10, 1)), 9) !== array(1, 6, 1, 6, 1, 6,\
  \ 1, 6, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(12,\
  \ 13, 10, 1), array(9, 3, 15, 6), array(5, 16, 14, 4), array(11, 8, 7, 2)), 12)\
  \ !== array(1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(array(2, 7, 4), array(3, 1, 5), array(6, 8, 9)), 8)\
  \ !== array(1, 3, 1, 3, 1, 3, 1, 3)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(array(6, 1, 5), array(3, 8, 9), array(2, 7, 4)), 8) !==\
  \ array(1, 5, 1, 5, 1, 5, 1, 5)) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(array(1, 2), array(3, 4)), 10) !== array(1, 2, 1, 2, 1, 2,\
  \ 1, 2, 1, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(array(1,\
  \ 3), array(3, 2)), 10) !== array(1, 3, 1, 3, 1, 3, 1, 3, 1, 3)) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n\
    \    $minPathSum = $n * $m * $k;\n    $minPathSum = PHP_INT_MAX;\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $path = array();\n    $pathSum\
    \ = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++)\
    \ {\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $visited[$i][$j] = true;\n            dfs($grid, $i, $j, $k - 1,\
    \ $visited, $path, $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j]\
    \ = false;\n            array_pop($path);\n            $pathSum -= $grid[$i][$j];\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = array();\n  \
    \  $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $n; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            if (dfs($grid, $visited,\
    \ $i, $j, $path, $pathSum, $k, $minPath, $minPathSum)) {\n                return\
    \ $minPath;\n            }\n            $visited[$i][$j] = false;\n        }\n\
    \    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $dp = array_fill(0, $n, array_fill(0, $m, array_fill(0, $k + 1, array())));\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $dp[$i][$j][1] = array($grid[$i][$j]);\n        }\n    }\n    for ($l\
    \ = 2; $l <= $k; $l++) {\n        for ($i = 0; $i < $n; $i++) {\n            for\
    \ ($j = 0; $j < $m; $j++) {\n                $min = array();\n               \
    \ if ($i > 0) {\n                    $min = $dp[$i - 1][$j][$l - 1];\n       \
    \         }\n                if ($j > 0 && (empty($min) || $min > $dp[$i][$j -\
    \ 1][$l - 1])) {\n                    $min = $dp[$i][$j - 1][$l - 1];\n      \
    \          }\n                if ($i < $n - 1 && (empty($min) || $min > $dp[$i\
    \ + 1][$j][$l - 1])) {\n                    $min = $dp[$i + 1][$j][$l - 1];\n\
    \                }\n                if ($j < $m - 1 && (empty($min) || $min >\
    \ $dp[$i][$j + 1][$l - 1])) {\n                    $min = $dp[$i][$j + 1][$l -\
    \ 1];\n                }\n                $dp[$i][$j][$l] = array_merge($min,\
    \ array($grid[$i][$j]));\n            }\n        }\n    }\n    $min = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          if (empty($min) || $min > $dp[$i][$j][$k]) {\n", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $path = [];\n    $minPath = [];\n    $minSum =\
    \ PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m;\
    \ $j++) {\n            $path = [];\n            $sum = 0;\n            $path[]\
    \ = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n            $minPath =\
    \ findPath($grid, $i, $j, $k - 1, $n, $m, $path, $sum, $minPath);\n        }\n\
    \    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            dfs($grid, $i, $j, $k, $visited, $path, $pathSum, $minPath,\
    \ $minPathSum);\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $min = [];\n    $min_val = PHP_INT_MAX;\n    $min_path\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++)\
    \ {\n            $min[$i][$j] = PHP_INT_MAX;\n        }\n    }\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $min[$i][$j]\
    \ = $grid[$i][$j];\n            $min_path[$i][$j] = [$i, $j];\n            if\
    \ ($i > 0 && $min[$i - 1][$j] + $grid[$i][$j] < $min[$i][$j]) {\n            \
    \    $min[$i][$j] = $min[$i - 1][$j] + $grid[$i][$j];\n                $min_path[$i][$j]\
    \ = $min_path[$i - 1][$j];\n            }\n            if ($j > 0 && $min[$i][$j\
    \ - 1] + $grid[$i][$j] < $min[$i][$j]) {\n                $min[$i][$j] = $min[$i][$j\
    \ - 1] + $grid[$i][$j];\n                $min_path[$i][$j] = $min_path[$i][$j\
    \ - 1];\n            }\n            if ($i < $n - 1 && $min[$i + 1][$j] + $grid[$i][$j]\
    \ < $min[$i][$j]) {\n                $min[$i][$j] = $min[$i + 1][$j] + $grid[$i][$j];\n\
    \                $min_path[$i][$j] = $min_path[$i + 1][$j];\n            }\n \
    \           if ($j < $m - 1 && $min[$", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $min = [];\n    $min[] = $grid[0][0];\n    $min_sum = $grid[0][0];\n    $min_i\
    \ = 0;\n    $min_j = 0;\n    $min_dir = 0;\n    $min_dirs = [\n        [0, 1],\n\
    \        [1, 0],\n        [0, -1],\n        [-1, 0]\n    ];\n    $min_dirs_cnt\
    \ = count($min_dirs);\n    $min_dirs_i = 0;\n    $min_dirs_j = 1;\n    $min_dirs_sum\
    \ = 0;\n    $min_dirs_sums = [];\n    $min_dirs_sums[] = 0;\n    $min_dirs_sums[]\
    \ = 0;\n    $min_dirs_sums[] = 0;\n    $min_dirs_sums[] = 0;\n    $min_dirs_sums_cnt\
    \ = count($min_dirs_sums);\n    $min_dirs_sums_min = 0;\n    $min_dirs_sums_min_i\
    \ = 0;\n    $min_dirs_sums_min_j = 0;\n    $min_dirs_sums_min_sum = 0;\n    $min_dirs_sums_min_sums\
    \ = [];\n    $min_dirs_sums_min_sums[] = 0;\n    $min_dirs_sums_min_sums[] = 0;\n\
    \    $min_dirs_sums_min_sums[] = 0;\n    $min_dirs_sums_min_sums[] = 0;\n    $min_dirs_sums_min_sums_cnt\
    \ = count($min_dirs_sums_min_sums);\n    $min_dirs_sums_min_sums_min = 0;\n  \
    \  $min_dirs_sums_min_sums_min_i = 0;\n    $min_dirs_sums", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, array()));\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $dp[$i][$j][0] = array($grid[$i][$j]);\n        }\n    }\n    for ($l\
    \ = 1; $l < $k; $l++) {\n        for ($i = 0; $i < $n; $i++) {\n            for\
    \ ($j = 0; $j < $m; $j++) {\n                $dp[$i][$j][$l] = array();\n    \
    \            if ($i > 0) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i - 1][$j][$l - 1], $grid[$i][$j]);\n                }\n              \
    \  if ($i < $n - 1) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i + 1][$j][$l - 1], $grid[$i][$j]);\n                }\n              \
    \  if ($j > 0) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i][$j - 1][$l - 1], $grid[$i][$j]);\n                }\n              \
    \  if ($j < $m - 1) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i][$j + 1][$l - 1], $grid[$i][$j]);\n                }\n            }\n\
    \        }\n    }\n    $res = array();\n    for ($i = 0; $i < $n; $i++) {\n  \
    \      for ($j = 0; $j < $m; $j++) {\n            $", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, array_fill(0,\
    \ $k + 1, 0)));\n    $dp[0][0][0] = $grid[0][0];\n    $dp[0][0][1] = $grid[0][0];\n\
    \    $dp[0][1][0] = $grid[0][1];\n    $dp[1][0][0] = $grid[1][0];\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            for\
    \ ($l = 0; $l <= $k; $l++) {\n                if ($i > 0) {\n                \
    \    $dp[$i][$j][$l] = max($dp[$i][$j][$l], $dp[$i - 1][$j][$l]);\n          \
    \      }\n                if ($j > 0) {\n                    $dp[$i][$j][$l] =\
    \ max($dp[$i][$j][$l], $dp[$i][$j - 1][$l]);\n                }\n            \
    \    if ($l > 0) {\n                    $dp[$i][$j][$l] = max($dp[$i][$j][$l],\
    \ $dp[$i][$j][$l - 1]);\n                }\n                if ($l > 0) {\n  \
    \                  $dp[$i][$j][$l] = max($dp[$i][$j][$l], $dp[$i][$j][$l - 1]\
    \ + $grid[$i][$j]);\n                }\n            }\n        }\n    }\n    $res\
    \ = array();\n    $i = $n - 1;\n    $j = $m - 1;\n    $l = $k;\n    while ($l\
    \ > 0) {\n        if ($i > 0 && $dp[$i][$j][$l] == $dp[$i - 1][$j][$l]) {\n  \
    \          $i--;\n        } else", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = [];\n            $pathSum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $n, $m, $i, $j,\
    \ $k, $visited, $path, $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array_fill(0, $k, PHP_INT_MAX);\n    $minPath[0] =\
    \ $grid[0][0];\n    $minPath = dfs($grid, $visited, $minPath, $k, 0, 0, $n, $m);\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $dp = array_fill(0, $n, array_fill(0, $m, array_fill(0, $k, INF)));\n   \
    \ $dp[0][0][0] = $grid[0][0];\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            for ($l = 0; $l < $k; $l++) {\n     \
    \           if ($i > 0) {\n                    $dp[$i][$j][$l] = min($dp[$i][$j][$l],\
    \ $dp[$i - 1][$j][$l] + $grid[$i][$j]);\n                }\n                if\
    \ ($j > 0) {\n                    $dp[$i][$j][$l] = min($dp[$i][$j][$l], $dp[$i][$j\
    \ - 1][$l] + $grid[$i][$j]);\n                }\n                if ($l > 0) {\n\
    \                    $dp[$i][$j][$l] = min($dp[$i][$j][$l], $dp[$i][$j][$l - 1]\
    \ + $grid[$i][$j]);\n                }\n            }\n        }\n    }\n    $res\
    \ = array();\n    $i = $n - 1;\n    $j = $m - 1;\n    $l = $k - 1;\n    while\
    \ ($l >= 0) {\n        $res[] = $grid[$i][$j];\n        if ($i > 0 && $dp[$i][$j][$l]\
    \ == $dp[$i - 1][$j][$l] + $grid[$i][$j]) {\n            $i--;\n        } elseif\
    \ ($j > 0 && $dp[$i][$j][$l] == $dp[$i][$j - 1][$l] + $grid[$i][$j]) {\n     \
    \       $j--;\n        } else {\n            $l--;\n        }\n   ", "    $n =\
    \ count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0,\
    \ $m, false));\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $pathSum = 0;\n            $visited[$i][$j] = true;\n\
    \            dfs($grid, $i, $j, $k, $visited, $path, $pathSum);\n            $visited[$i][$j]\
    \ = false;\n            if ($pathSum < $minPathSum) {\n                $minPathSum\
    \ = $pathSum;\n                $minPath = $path;\n            }\n        }\n \
    \   }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPath = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $path = [];\n            $pathSum = 0;\n        \
    \    $visited = [];\n            $visited[$i][$j] = true;\n            $path[]\
    \ = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n            $dfs($grid,\
    \ $i, $j, $k - 1, $path, $pathSum, $visited);\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $minPath = dfs($grid, $i,\
    \ $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n        }\n\
    \    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $min = array();\n    $min_val = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $min[$i][$j] = PHP_INT_MAX;\n\
    \        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            if ($grid[$i][$j] < $min_val) {\n               \
    \ $min_val = $grid[$i][$j];\n            }\n        }\n    }\n    $min[0][0] =\
    \ $min_val;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m;\
    \ $j++) {\n            if ($i > 0) {\n                $min[$i][$j] = min($min[$i][$j],\
    \ $min[$i - 1][$j] + $grid[$i][$j]);\n            }\n            if ($j > 0) {\n\
    \                $min[$i][$j] = min($min[$i][$j], $min[$i][$j - 1] + $grid[$i][$j]);\n\
    \            }\n        }\n    }\n    $res = array();\n    $i = $n - 1;\n    $j\
    \ = $m - 1;\n    while ($k > 0) {\n        $res[] = $grid[$i][$j];\n        $k--;\n\
    \        if ($i > 0 && $min[$i][$j] == $min[$i - 1][$j] + $grid[$i][$j]) {\n \
    \           $i--;\n        } else {\n            $j--;\n        }\n    }\n   \
    \ return $res;\n}\n\n$grid = array(array(1, 2, 3), array(4, 5, 6), array(7, 8,\
    \ 9));\n$k = 3;", "    $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0,\
    \ $n, false));\n    $minPath = [];\n    $minSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path\
    \ = [];\n            $sum = 0;\n            $visited[$i][$j] = true;\n       \
    \     $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n         \
    \   $visited = dfs($grid, $visited, $i, $j, $k - 1, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = findMinPath($grid, $n, $m,\
    \ 0, 0, $k, $visited, $minPath, $minSum, $minPathSum);\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = [];\n \
    \   $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = [];\n            $pathSum = 0;\n\
    \            $visited = [];\n            $visited[$i][$j] = true;\n          \
    \  $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n        \
    \    $minPath = dfs($grid, $i, $j, $k, $path, $pathSum, $minPath, $minPathSum,\
    \ $visited);\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n  \
    \  $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPath = array();\n\
    \    $minPath", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $visited[$i][$j] = true;\n            $path = [$grid[$i][$j]];\n         \
    \   $pathSum = $grid[$i][$j];\n            $minPathSum = PHP_INT_MAX;\n      \
    \      $minPath = [];\n            dfs($grid, $i, $j, $k - 1, $visited, $path,\
    \ $pathSum, $minPathSum, $minPath);\n            $visited[$i][$j] = false;\n \
    \       }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, array()));\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $dp[$i][$j][0] = $grid[$i][$j];\n        }\n    }\n    for ($l = 1;\
    \ $l < $k; $l++) {\n        for ($i = 0; $i < $n; $i++) {\n            for ($j\
    \ = 0; $j < $m; $j++) {\n                $dp[$i][$j][$l] = PHP_INT_MAX;\n    \
    \            if ($i > 0) {\n                    $dp[$i][$j][$l] = min($dp[$i][$j][$l],\
    \ $dp[$i - 1][$j][$l - 1]);\n                }\n                if ($i < $n -\
    \ 1) {\n                    $dp[$i][$j][$l] = min($dp[$i][$j][$l], $dp[$i + 1][$j][$l\
    \ - 1]);\n                }\n                if ($j > 0) {\n                 \
    \   $dp[$i][$j][$l] = min($dp[$i][$j][$l], $dp[$i][$j - 1][$l - 1]);\n       \
    \         }\n                if ($j < $m - 1) {\n                    $dp[$i][$j][$l]\
    \ = min($dp[$i][$j][$l], $dp[$i][$j + 1][$l - 1]);\n                }\n      \
    \      }\n        }\n    }\n    $ans = PHP_INT_MAX;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $ans = min($ans,\
    \ $dp[$i][$j][$k - 1]);\n        }\n    }\n    $res = array();\n    for ($", " \
    \   $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathValue =\
    \ PHP_INT_MAX;\n    $minPathLength = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n\
    \            $path = array($grid[$i][$j]);\n            $pathValue = $grid[$i][$j];\n\
    \            $pathLength = 1;\n            dfs($grid, $visited, $i, $j, $path,\
    \ $pathValue, $pathLength, $k, $minPath, $minPathValue, $minPathLength);\n   \
    \         $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n}",
  "    $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0, $n, false));\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path = array();\n\
    \            $pathSum = 0;\n            $visited[$i][$j] = true;\n           \
    \ $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n         \
    \   dfs($grid, $visited, $i, $j, $k - 1, $path, $pathSum, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0,\
    \ $n, array_fill(0, $m, array()));\n    for ($i = 0; $i < $n; $i++) {\n      \
    \  for ($j = 0; $j < $m; $j++) {\n            $dp[$i][$j][0] = array($grid[$i][$j]);\n\
    \        }\n    }\n    for ($l = 1; $l < $k; $l++) {\n        for ($i = 0; $i\
    \ < $n; $i++) {\n            for ($j = 0; $j < $m; $j++) {\n                $min\
    \ = array();\n                if ($i > 0) {\n                    $min = $dp[$i\
    \ - 1][$j][$l - 1];\n                }\n                if ($i < $n - 1 && (empty($min)\
    \ || $min > $dp[$i + 1][$j][$l - 1])) {\n                    $min = $dp[$i + 1][$j][$l\
    \ - 1];\n                }\n                if ($j > 0 && (empty($min) || $min\
    \ > $dp[$i][$j - 1][$l - 1])) {\n                    $min = $dp[$i][$j - 1][$l\
    \ - 1];\n                }\n                if ($j < $m - 1 && (empty($min) ||\
    \ $min > $dp[$i][$j + 1][$l - 1])) {\n                    $min = $dp[$i][$j +\
    \ 1][$l - 1];\n                }\n                $dp[$i][$j][$l] = array_merge($min,\
    \ array($grid[$i][$j]));\n            }\n        }\n    }\n    $min = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          if (empty($min) || $min > $dp[$i][$j][$k - 1]) {\n                $min\
    \ = $dp[$i][", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n\
    \            $path = [$grid[$i][$j]];\n            $pathSum = $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $visited, $path, $pathSum, $k, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    $minPaths = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $sum += $grid[$i][$j];\n            $visited[$i][$j] = false;\n \
    \           dfs($grid, $i, $j, $k - 1, $path, $sum, $visited, $minPath, $minSum,\
    \ $minPaths);\n        }\n    }\n    sort($minPaths);\n    return $minPaths[0];\n\
    }", "    $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0, $n,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n   ", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0, $n, array_fill(0,\
    \ $m, array(array())));\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $m; $j++) {\n            $dp[$i][$j][0][] = $grid[$i][$j];\n       \
    \ }\n    }\n    for ($l = 1; $l < $k; $l++) {\n        for ($i = 0; $i < $n; $i++)\
    \ {\n            for ($j = 0; $j < $m; $j++) {\n                $min = array();\n\
    \                if ($i > 0) {\n                    $min = $dp[$i - 1][$j][$l\
    \ - 1];\n                }\n                if ($j > 0 && (empty($min) || $min\
    \ > $dp[$i][$j - 1][$l - 1])) {\n                    $min = $dp[$i][$j - 1][$l\
    \ - 1];\n                }\n                if ($i < $n - 1 && (empty($min) ||\
    \ $min > $dp[$i + 1][$j][$l - 1])) {\n                    $min = $dp[$i + 1][$j][$l\
    \ - 1];\n                }\n                if ($j < $m - 1 && (empty($min) ||\
    \ $min > $dp[$i][$j + 1][$l - 1])) {\n                    $min = $dp[$i][$j +\
    \ 1][$l - 1];\n                }\n                $dp[$i][$j][$l] = $min;\n  \
    \              $dp[$i][$j][$l][] = $grid[$i][$j];\n            }\n        }\n\
    \    }\n    $min = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            if (empty($min) || $min > $dp[$i][$j][$k\
    \ - 1", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, 0));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited[$i][$j]\
    \ = 1;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            if ($dfs($grid, $visited, $i, $j, $k - 1, $path, $pathSum)) {\n \
    \               if ($pathSum < $minPathSum) {\n                    $minPathSum\
    \ = $pathSum;\n                    $minPath = $path;\n                }\n    \
    \        }\n            $visited[$i][$j] = 0;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0, $n,\
    \ false));\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum =\
    \ PHP_INT_MAX;\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $min",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0, $n,\
    \ array_fill(0, $m, array()));\n    $dp[0][0][0] = $grid[0][0];\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($i\
    \ > 0) {\n                $dp[$i][$j] = array_merge($dp[$i][$j], $dp[$i - 1][$j]);\n\
    \            }\n            if ($j > 0) {\n                $dp[$i][$j] = array_merge($dp[$i][$j],\
    \ $dp[$i][$j - 1]);\n            }\n            $dp[$i][$j] = array_unique($dp[$i][$j]);\n\
    \            sort($dp[$i][$j]);\n            $dp[$i][$j] = array_slice($dp[$i][$j],\
    \ 0, $k);\n            foreach ($dp[$i][$j] as $key => $value) {\n           \
    \     $dp[$i][$j][$key] .= $grid[$i][$j];\n            }\n        }\n    }\n \
    \   return str_split($dp[$n - 1][$m - 1][0]);\n}", "    $n = count($grid);\n \
    \   $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $pathSum = 0;\n            $visited[$i][$j] = true;\n\
    \            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $min = array();\n\
    \    $min[] = $grid[0][0];\n    $min_sum = $grid[0][0];\n    $min_path = array();\n\
    \    $min_path[] = array(0, 0);\n    $visited = array();\n    $visited[0][0] =\
    \ true;\n    $queue = array();\n    $queue[] = array(0, 0);\n    while (!empty($queue))\
    \ {\n        $cur = array_shift($queue);\n        $i = $cur[0];\n        $j =\
    \ $cur[1];\n        if ($i > 0 && !$visited[$i - 1][$j]) {\n            $visited[$i\
    \ - 1][$j] = true;\n            $queue[] = array($i - 1, $j);\n            $path\
    \ = $min_path;\n            $path[] = array($i - 1, $j);\n            $sum = $min_sum\
    \ + $grid[$i - 1][$j];\n            if (count($path) == $k) {\n              \
    \  if ($sum < $min_sum) {\n                    $min_sum = $sum;\n            \
    \        $min_path = $path;\n                    $min = array();\n           \
    \         foreach ($path as $p) {\n                        $min[] = $grid[$p[0]][$p[1]];\n\
    \                    }\n                } else if ($sum == $min_sum) {\n     \
    \               $path_min = array();\n                    foreach ($path as $p)\
    \ {\n                        $path_min[] = $grid[$p[0]][$p[1]];\n            \
    \        }\n                    if ($path_min < $min) {\n                    \
    \    $min_path = $path;\n                        $min = $path_min;\n         \
    \           }\n                }\n            }\n        }\n        if ($i < $n\
    \ - 1 && !$visited[$i + 1][$j]) {\n            $visited[$i + 1][$j] = true;\n\
    \            $queue[] = array($i + 1, $j);\n            $path = $min", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0, $n, array_fill(0,\
    \ $m, array()));\n    $dp[0][0][] = $grid[0][0];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            if ($i > 0) {\n      \
    \          $dp[$i][$j] = merge($dp[$i][$j], $dp[$i - 1][$j]);\n            }\n\
    \            if ($j > 0) {\n                $dp[$i][$j] = merge($dp[$i][$j], $dp[$i][$j\
    \ - 1]);\n            }\n            $dp[$i][$j][] = $grid[$i][$j];\n        }\n\
    \    }\n    return $dp[$n - 1][$m - 1][$k - 1];\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = [];\n    $minPathValue = [];\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $minPath[$i][$j]\
    \ = [];\n            $minPathValue[$i][$j] = [];\n        }\n    }\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $minPath[$i][$j][0]\
    \ = [$grid[$i][$j]];\n            $minPathValue[$i][$j][0] = $grid[$i][$j];\n\
    \        }\n    }\n    for ($l = 1; $l < $k; $l++) {\n        for ($i = 0; $i\
    \ < $n; $i++) {\n            for ($j = 0; $j < $m; $j++) {\n                $minPath[$i][$j][$l]\
    \ = [];\n                $minPathValue[$i][$j][$l] = PHP_INT_MAX;\n          \
    \      if ($i > 0) {\n                    $path = $minPath[$i - 1][$j][$l - 1];\n\
    \                    $path[] = $grid[$i][$j];\n                    $value = $minPathValue[$i\
    \ - 1][$j][$l - 1] + $grid[$i][$j];\n                    if ($value < $minPathValue[$i][$j][$l])\
    \ {\n                        $minPath[$i][$j][$l] = $path;\n                 \
    \       $minPathValue[$i][$j][$l] = $value;\n                    }\n         \
    \       }\n                if ($i < $n - 1) {\n                    $path = $minPath[$i\
    \ + 1][$j][$l - 1];\n                    $path[] = $grid[$i][$j", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = [];\n    $minPathValues = [];\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSumValues = [];\n    $minPathSumValues[0] = [];\n    $minPathSumValues[1]\
    \ = [];\n    $minPathSumValues[2] = [];\n    $minPathSumValues[3] = [];\n    $minPathSumValues[4]\
    \ = [];\n    $minPathSumValues[5] = [];\n    $minPathSumValues[6] = [];\n    $minPathSumValues[7]\
    \ = [];\n    $minPathSumValues[8] = [];\n    $minPathSumValues[9] = [];\n    $minPathSumValues[10]\
    \ = [];\n    $minPathSumValues[11] = [];\n    $minPathSumValues[12] = [];\n  \
    \  $minPathSumValues[13] = [];\n    $minPathSumValues[14] = [];\n    $minPathSumValues[15]\
    \ = [];\n    $minPathSumValues[16] = [];\n    $minPathSumValues[17] = [];\n  \
    \  $minPathSumValues[18] = [];\n    $minPathSumValues[19] = [];\n    $minPathSumValues[20]\
    \ = [];\n    $minPathSumValues[21] = [];\n    $minPathSumValues[22] = [];\n  \
    \  $minPathSumValues[23] = [];\n    $minPathSumValues[24] = [];\n    $minPathSumValues[25]\
    \ = [];\n    $minPathSumValues[26] = [];\n    $minPathSumValues[27] = [];\n  \
    \  $minPathSumValues[28] = [];\n    $minPathSumValues[29] = [];\n    $minPathSumValues[30]\
    \ = [];\n    $minPathSumValues[31] = [];\n    $minPathSumValues[32] = [];\n  \
    \  $minPathSumValues[33] = [];\n    $minPathSumValues[34] = [];\n    $minPathSumValues[35",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited[$i][$j]\
    \ = true;\n            dfs($grid, $i, $j, $k, $visited, $path, $pathSum);\n  \
    \          $visited[$i][$j] = false;\n            if ($pathSum < $minPathSum)\
    \ {\n                $minPathSum = $pathSum;\n                $minPath = $path;\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $min = array_fill(0, $k, PHP_INT_MAX);\n    $min[0] = $grid[0][0];\n\
    \    $visited[0][0] = true;\n    $q = [[0, 0, 0]];\n    while (!empty($q)) {\n\
    \        list($i, $j, $d) = array_shift($q);\n        if ($d == $k - 1) {\n  \
    \          break;\n        }\n        if ($i > 0 && !$visited[$i - 1][$j]) {\n\
    \            $visited[$i - 1][$j] = true;\n            $q[] = [$i - 1, $j, $d\
    \ + 1];\n            $min[$d + 1] = min($min[$d + 1], $grid[$i - 1][$j]);\n  \
    \      }\n        if ($i < $n - 1 && !$visited[$i + 1][$j]) {\n            $visited[$i\
    \ + 1][$j] = true;\n            $q[] = [$i + 1, $j, $d + 1];\n            $min[$d\
    \ + 1] = min($min[$d + 1], $grid[$i + 1][$j]);\n        }\n        if ($j > 0\
    \ && !$visited[$i][$j - 1]) {\n            $visited[$i][$j - 1] = true;\n    \
    \        $q[] = [$i, $j - 1, $d + 1];\n            $min[$d + 1] = min($min[$d\
    \ + 1], $grid[$i][$j - 1]);\n        }\n        if ($j < $m - 1 && !$visited[$i][$j\
    \ + 1]) {\n            $visited[$i][$j + 1] = true;\n            $q[] = [$i, $j\
    \ + 1, $d + 1];\n            $min[$d + 1] = min($min", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            $visited[$i][$j] = true;\n  \
    \          $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n    \
    \        $minPath = dfs($grid, $i, $j, $k - 1, $visited, $path, $sum, $minPath,\
    \ $minSum);\n            $visited[$i][$j] = false;\n        }\n    }\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n  \
    \  $minPathValue = PHP_INT_MAX;\n    $minPathLength = PHP_INT_MAX;\n    $minPathIndex\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSumIndex = PHP_INT_MAX;\n\
    \    $minPathSumLength = PHP_INT_MAX;\n    $minPathSumIndexLength = PHP_INT_MAX;\n\
    \    $minPathSumIndexSum = PHP_INT_MAX;\n    $minPathSumIndexSumLength = PHP_INT_MAX;\n\
    \    $minPathSumIndexSumIndex = PHP_INT_MAX;\n    $minPathSumIndexSumIndexLength\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = array();\n            $pathValue = 0;\n   \
    \         $pathLength = 0;\n            $pathIndex = 0;\n            $pathSum\
    \ = 0;\n            $pathSumIndex = 0;\n            $pathSumLength = 0;\n    \
    \        $pathSumIndexLength = 0;\n            $pathSumIndexSum = 0;\n       \
    \     $pathSumIndexSumIndex = 0;\n            $pathSumIndexSumLength = 0;\n  \
    \          $pathSumIndexSumIndexLength = 0;\n            $visited[$i][$j] = true;\n\
    \            $path[] = $grid[$i][$j];\n            $pathValue = $grid[$i][$j];\n\
    \            $pathLength = 1;\n            $pathIndex = $i * $m + $j;\n      \
    \      $pathSum = $grid[$i][$j];\n            $pathSumIndex = $i * $m + $j;\n\
    \            $pathSumLength = 1;\n            $pathSumIndexLength = 1;\n     \
    \       $pathSumIndexSum = $grid[$i][$j];\n            $pathSumIndexSumIndex =\
    \ $i * $m + $j", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n  \
    \  $minPathValue = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n          \
    \  $path = array($grid[$i][$j]);\n            $pathValue = $grid[$i][$j];\n  \
    \          $minPath = dfs($grid, $visited, $i, $j, $k, $path, $pathValue, $minPath,\
    \ $minPathValue);\n            $visited[$i][$j] = false;\n        }\n    }\n \
    \   return $minPath;\n}", "    $n = count($grid);\n    $min = [];\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $min[$i][$j]\
    \ = $grid[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $k - 1; $i++) {\n\
    \        $min = next($min);\n    }\n    return $min;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n    \
    \        $path = array($grid[$i][$j]);\n            $minPath = minPathHelper($grid,\
    \ $i, $j, $k - 1, $visited, $path, $minPath);\n            $visited[$i][$j] =\
    \ false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $min = [];\n    $min_sum = PHP_INT_MAX;\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j]\
    \ = true;\n            $min_sum = min($min_sum, dfs($grid, $visited, $i, $j, $k,\
    \ $n, $m, $min, $grid[$i][$j]));\n            $visited[$i][$j] = false;\n    \
    \    }\n    }\n    return $min;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $dp = array_fill(0, $n, array_fill(0, $m, array()));\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $dp[$i][$j][0]\
    \ = array($grid[$i][$j]);\n        }\n    }\n    for ($l = 1; $l < $k; $l++) {\n\
    \        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $m; $j++)\
    \ {\n                $dp[$i][$j][$l] = array();\n                if ($i > 0) {\n\
    \                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l], $dp[$i -\
    \ 1][$j][$l - 1], $grid[$i][$j]);\n                }\n                if ($i <\
    \ $n - 1) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i + 1][$j][$l - 1], $grid[$i][$j]);\n                }\n              \
    \  if ($j > 0) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i][$j - 1][$l - 1], $grid[$i][$j]);\n                }\n              \
    \  if ($j < $m - 1) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i][$j + 1][$l - 1], $grid[$i][$j]);\n                }\n            }\n\
    \        }\n    }\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $m; $j++) {\n            $", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $min = [];\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $m; $j++) {\n            $min[$i][$j] = [];\n     \
    \       $min[$i][$j][0] = $grid[$i][$j];\n        }\n    }\n    for ($i = 1; $i\
    \ < $k; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            for ($l =\
    \ 0; $l < $m; $l++) {\n                $min[$j][$l][$i] = PHP_INT_MAX;\n     \
    \           if ($j > 0) {\n                    $min[$j][$l][$i] = min($min[$j][$l][$i],\
    \ $min[$j - 1][$l][$i - 1]);\n                }\n                if ($j < $n -\
    \ 1) {\n                    $min[$j][$l][$i] = min($min[$j][$l][$i], $min[$j +\
    \ 1][$l][$i - 1]);\n                }\n                if ($l > 0) {\n       \
    \             $min[$j][$l][$i] = min($min[$j][$l][$i], $min[$j][$l - 1][$i - 1]);\n\
    \                }\n                if ($l < $m - 1) {\n                    $min[$j][$l][$i]\
    \ = min($min[$j][$l][$i], $min[$j][$l + 1][$i - 1]);\n                }\n    \
    \        }\n        }\n    }\n    $res = [];\n    for ($i = 0; $i < $k; $i++)\
    \ {\n        $res[$i] = PHP_INT_MAX;\n    }\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $m; $j++) {\n            $res[$k - 1] = min($res[$",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, 0));\n    $minPath = array_fill(0, $k, PHP_INT_MAX);\n\
    \    $minPath[0] = $grid[0][0];\n    $minPath[$k - 1] = $grid[$n - 1][$m - 1];\n\
    \    $visited[0][0] = 1;\n    $visited[$n - 1][$m - 1] = 1;\n    $q = [[0, 0,\
    \ 0]];\n    while (!empty($q)) {\n        list($x, $y, $d) = array_shift($q);\n\
    \        if ($d == $k - 1) {\n            continue;\n        }\n        $neighbors\
    \ = [[$x - 1, $y], [$x + 1, $y], [$x, $y - 1], [$x, $y + 1]];\n        foreach\
    \ ($neighbors as $neighbor) {\n            list($nx, $ny) = $neighbor;\n     \
    \       if ($nx < 0 || $nx >= $n || $ny < 0 || $ny >= $m || $visited[$nx][$ny])\
    \ {\n                continue;\n            }\n            $visited[$nx][$ny]\
    \ = 1;\n            $q[] = [$nx, $ny, $d + 1];\n            if ($grid[$nx][$ny]\
    \ < $minPath[$d + 1]) {\n                $minPath[$d + 1] = $grid[$nx][$ny];\n\
    \            }\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minPathValue = PHP_INT_MAX;\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $path = array();\n            $pathValue = 0;\n            $visited[$i][$j]\
    \ = true;\n            dfs($grid, $i, $j, $visited, $path, $pathValue, $k, $minPath,\
    \ $minPathValue);\n            $visited[$i][$j] = false;\n        }\n    }\n \
    \   return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $min = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $min[$i][$j] = [];\n            $min[$i][$j][0] = $grid[$i][$j];\n\
    \        }\n    }\n    for ($i = 1; $i < $k; $i++) {\n        for ($j = 0; $j\
    \ < $n; $j++) {\n            for ($l = 0; $l < $m; $l++) {\n                $min[$j][$l][$i]\
    \ = PHP_INT_MAX;\n                if ($j > 0) {\n                    $min[$j][$l][$i]\
    \ = min($min[$j][$l][$i], $min[$j - 1][$l][$i - 1]);\n                }\n    \
    \            if ($j < $n - 1) {\n                    $min[$j][$l][$i] = min($min[$j][$l][$i],\
    \ $min[$j + 1][$l][$i - 1]);\n                }\n                if ($l > 0) {\n\
    \                    $min[$j][$l][$i] = min($min[$j][$l][$i], $min[$j][$l - 1][$i\
    \ - 1]);\n                }\n                if ($l < $m - 1) {\n            \
    \        $min[$j][$l][$i] = min($min[$j][$l][$i], $min[$j][$l + 1][$i - 1]);\n\
    \                }\n            }\n        }\n    }\n    $result = [];\n    for\
    \ ($i = 0; $i < $k; $i++) {\n        $result[$i] = PHP_INT_MAX;\n    }\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $result[$k - 1] = min($result[$", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $dp = array_fill(0, $n, array_fill(0, $m, array_fill(0, $k + 1, INF)));\n\
    \    $dp[0][0][1] = $grid[0][0];\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            for ($l = 1; $l <= $k; $l++) {\n    \
    \            if ($i > 0) {\n                    $dp[$i][$j][$l] = min($dp[$i][$j][$l],\
    \ $dp[$i - 1][$j][$l - 1] + $grid[$i][$j]);\n                }\n             \
    \   if ($j > 0) {\n                    $dp[$i][$j][$l] = min($dp[$i][$j][$l],\
    \ $dp[$i][$j - 1][$l - 1] + $grid[$i][$j]);\n                }\n            }\n\
    \        }\n    }\n    $res = array();\n    $i = $n - 1;\n    $j = $m - 1;\n \
    \   $l = $k;\n    while ($l > 0) {\n        $res[] = $grid[$i][$j];\n        if\
    \ ($i > 0 && $dp[$i][$j][$l] == $dp[$i - 1][$j][$l - 1] + $grid[$i][$j]) {\n \
    \           $i--;\n        } else {\n            $j--;\n        }\n        $l--;\n\
    \    }\n    return array_reverse($res);\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $sum = 0;\n            $visited[$i][$j] = true;\n            $path[]\
    \ = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n            dfs($grid,\
    \ $i, $j, $k - 1, $path, $sum, $visited, $minPath, $minSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPath = [];\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n   \
    \         $path = [$grid[$i][$j]];\n            $pathSum = $grid[$i][$j];\n  \
    \          dfs($grid, $i, $j, $visited, $path, $pathSum, $k, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $min = [];\n    $min_value = PHP_INT_MAX;\n \
    \   for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n   \
    \         $path = [];\n            $path[] = $grid[$i][$j];\n            $visited\
    \ = [];\n            $visited[$i][$j] = true;\n            $min_path = dfs($grid,\
    \ $i, $j, $k - 1, $n, $visited, $path);\n            if ($min_path < $min_value)\
    \ {\n                $min_value = $min_path;\n                $min = $path;\n\
    \            }\n        }\n    }\n    return $min;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, array()));\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $dp[$i][$j][0] = array($grid[$i][$j]);\n        }\n    }\n    for ($l\
    \ = 1; $l < $k; $l++) {\n        for ($i = 0; $i < $n; $i++) {\n            for\
    \ ($j = 0; $j < $m; $j++) {\n                $dp[$i][$j][$l] = array();\n    \
    \            if ($i > 0) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i - 1][$j][$l - 1], $grid[$i][$j]);\n                }\n              \
    \  if ($i < $n - 1) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i + 1][$j][$l - 1], $grid[$i][$j]);\n                }\n              \
    \  if ($j > 0) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i][$j - 1][$l - 1], $grid[$i][$j]);\n                }\n              \
    \  if ($j < $m - 1) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i][$j + 1][$l - 1], $grid[$i][$j]);\n                }\n            }\n\
    \        }\n    }\n    $min = array();\n    for ($i = 0; $i < $n; $i++) {\n  \
    \      for ($j = 0; $j < $m; $j++) {\n            $", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = [];\n    $minPathValue = PHP_INT_MAX;\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $dfs = function\
    \ ($grid, $k, $i, $j, $path, $pathValue) use (&$dfs, &$minPath, &$minPathValue,\
    \ &$visited) {\n        if ($k == 0) {\n            if ($pathValue < $minPathValue)\
    \ {\n                $minPath = $path;\n                $minPathValue = $pathValue;\n\
    \            }\n            return;\n        }\n        if ($i < 0 || $i >= count($grid)\
    \ || $j < 0 || $j >= count($grid[0]) || $visited[$i][$j]) {\n            return;\n\
    \        }\n        $visited[$i][$j] = true;\n        $dfs($grid, $k - 1, $i -\
    \ 1, $j, array_merge($path, [$grid[$i][$j]]), $pathValue * 10 + $grid[$i][$j]);\n\
    \        $dfs($grid, $k - 1, $i + 1, $j, array_merge($path, [$grid[$i][$j]]),\
    \ $pathValue * 10 + $grid[$i][$j]);\n        $dfs($grid, $k - 1, $i, $j - 1, array_merge($path,\
    \ [$grid[$i][$j]]), $pathValue * 10 + $grid[$i][$j]);\n        $dfs($grid, $k\
    \ - 1, $i, $j + 1, array_merge($path, [$grid[$i][$j]]), $pathValue * 10 + $grid[$i][$j]);\n\
    \        $visited[$i][$j] = false;\n    };\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $m; $j++) {\n            $dfs($grid, $k,", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $minPath = [];\n    $minPathSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = [];\n            $pathSum = 0;\n          \
    \  $visited = [];\n            $visited[$i][$j] = true;\n            $path[] =\
    \ $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n            $minPath\
    \ = minPathHelper($grid, $i, $j, $k - 1, $path, $pathSum, $minPath, $visited);\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array_fill(0, $k, PHP_INT_MAX);\n    $minPath[0] = $grid[0][0];\n\
    \    $minPathCells = array_fill(0, $k, array(0, 0));\n    $minPathCells[0] = array(0,\
    \ 0);\n    $visited[0][0] = true;\n    $q = new SplQueue();\n    $q->enqueue(array(0,\
    \ 0, 0));\n    while (!$q->isEmpty()) {\n        list($i, $j, $l) = $q->dequeue();\n\
    \        if ($l == $k - 1) {\n            break;\n        }\n        $neighbors\
    \ = array(\n            array($i - 1, $j),\n            array($i + 1, $j),\n \
    \           array($i, $j - 1),\n            array($i, $j + 1)\n        );\n  \
    \      foreach ($neighbors as $neighbor) {\n            list($x, $y) = $neighbor;\n\
    \            if ($x >= 0 && $x < $n && $y >= 0 && $y < $m && !$visited[$x][$y])\
    \ {\n                $visited[$x][$y] = true;\n                $q->enqueue(array($x,\
    \ $y, $l + 1));\n                if ($grid[$x][$y] < $minPath[$l + 1]) {\n   \
    \                 $minPath[$l + 1] = $grid[$x][$y];\n                    $minPathCells[$l\
    \ + 1] = array($x, $y);\n                }\n            }\n        }\n    }\n\
    \    $result = array();\n    for ($i = 0; $i < $k; $i++) {\n        list($x, $y)\
    \ = $minPathCells[$i];\n        $result[] = $grid[$x][$y];\n    }\n    return\
    \ $result", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited =\
    \ array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array_fill(0, $k,\
    \ PHP_INT_MAX);\n    $minPath[0] = $grid[0][0];\n    $minPath[$k - 1] = $grid[$n\
    \ - 1][$m - 1];\n    $visited[0][0] = true;\n    $visited[$n - 1][$m - 1] = true;\n\
    \    $queue = [[0, 0, 0]];\n    while (!empty($queue)) {\n        $curr = array_shift($queue);\n\
    \        $i = $curr[0];\n        $j = $curr[1];\n        $level = $curr[2];\n\
    \        if ($level == $k - 1) {\n            continue;\n        }\n        if\
    \ ($i > 0 && !$visited[$i - 1][$j]) {\n            $visited[$i - 1][$j] = true;\n\
    \            $queue[] = [$i - 1, $j, $level + 1];\n            if ($grid[$i -\
    \ 1][$j] < $minPath[$level + 1]) {\n                $minPath[$level + 1] = $grid[$i\
    \ - 1][$j];\n            }\n        }\n        if ($i < $n - 1 && !$visited[$i\
    \ + 1][$j]) {\n            $visited[$i + 1][$j] = true;\n            $queue[]\
    \ = [$i + 1, $j, $level + 1];\n            if ($grid[$i + 1][$j] < $minPath[$level\
    \ + 1]) {\n                $minPath[$level + 1] = $grid[$i + 1][$j];\n       \
    \     }\n        }\n        if ($j > 0 && !$visited[$i][$j - 1]) {\n         \
    \   $visited[$i][$j - 1] = true;\n            $queue[] = [$i, $j - 1, $level +",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathValue =\
    \ array();\n    $minPathValue[0] = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n   \
    \         $pathValue = array();\n            $pathValue[0] = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = array($i, $j);\n            $pathValue[] = $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $visited, $path, $pathValue, $k, $minPath, $minPathValue);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPathValue;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $queue = new SplQueue();\n    $queue->enqueue([0,\
    \ 0, $grid[0][0], [$grid[0][0]]]);\n    $visited[0][0] = true;\n    $minPath =\
    \ [];\n    while (!$queue->isEmpty()) {\n        list($i, $j, $sum, $path) = $queue->dequeue();\n\
    \        if ($sum > $k) {\n            continue;\n        }\n        if ($sum\
    \ == $k) {\n            if (empty($minPath) || $path < $minPath) {\n         \
    \       $minPath = $path;\n            }\n            continue;\n        }\n \
    \       if ($i > 0 && !$visited[$i - 1][$j]) {\n            $visited[$i - 1][$j]\
    \ = true;\n            $queue->enqueue([$i - 1, $j, $sum + $grid[$i - 1][$j],\
    \ array_merge($path, [$grid[$i - 1][$j]])]);\n        }\n        if ($i < $n -\
    \ 1 && !$visited[$i + 1][$j]) {\n            $visited[$i + 1][$j] = true;\n  \
    \          $queue->enqueue([$i + 1, $j, $sum + $grid[$i + 1][$j], array_merge($path,\
    \ [$grid[$i + 1][$j]])]);\n        }\n        if ($j > 0 && !$visited[$i][$j -\
    \ 1]) {\n            $visited[$i][$j - 1] = true;\n            $queue->enqueue([$i,\
    \ $j - 1, $sum + $grid[$i][$j - 1], array_merge($path, [$grid[$i][$j - 1]])]);\n\
    \        }\n        if ($j < $m - 1 && !$visited[$i][$j + 1]) {\n            $visited",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = [];\n            $pathSum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = dfs($grid, $n, $m, 0, 0, $k, $visited, $minPath, $minPathSum);\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $visited,\
    \ $path, $pathSum, $k, $minPath, $minPathSum);\n            $visited[$i][$j] =\
    \ false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, array()));\n\
    \    $dp[0][0][] = $grid[0][0];\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            if ($i > 0) {\n                $dp[$i][$j]\
    \ = minPathHelper($dp[$i][$j], $dp[$i - 1][$j], $grid[$i][$j]);\n            }\n\
    \            if ($j > 0) {\n                $dp[$i][$j] = minPathHelper($dp[$i][$j],\
    \ $dp[$i][$j - 1], $grid[$i][$j]);\n            }\n        }\n    }\n    return\
    \ $dp[$n - 1][$m - 1][$k - 1];\n}", "    $n = count($grid);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $n, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $path = array();\n    $minPath = array();\n \
    \   $minPathSum = $n * $n + 1;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $n; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $visited = array();\n            $visited[$i][$j] = true;\n     \
    \       $minPath = findMinPath($grid, $i, $j, $k - 1, $path, $pathSum, $minPath,\
    \ $minPathSum, $visited);\n        }\n    }\n    return $minPath;\n}", "\t$n =\
    \ count($grid);\n\t$m = count($grid[0]);\n\t$minPath = [];\n\t$minPathSum = $n\
    \ * $m * $n * $m;\n\t$minPathSum = $minPathSum * $minPathSum;\n\t$minPathSum =\
    \ $minPathSum * $minPathSum;\n\t$minPathSum = $minPathSum * $minPathSum;\n\t$minPathSum\
    \ = $minPathSum * $minPathSum;\n\t$minPathSum = $minPathSum * $minPathSum;\n\t\
    $minPathSum = $minPathSum * $minPathSum;\n\t$minPathSum = $minPathSum * $minPathSum;\n\
    \t$minPathSum = $minPathSum * $minPathSum;\n\t$minPathSum = $minPathSum * $minPathSum;\n\
    \t$minPathSum = $minPathSum * $minPathSum;\n\t$minPathSum = $minPathSum * $minPathSum;\n\
    \t$minPathSum = $minPathSum * $minPathSum;\n\t$minPathSum = $minPathSum * $minPathSum;\n\
    \t$minPathSum = $minPathSum * $minPathSum;\n\t$minPathSum = $minPathSum * $minPathSum;\n\
    \t$minPathSum = $minPathSum * $minPathSum;\n\t$minPathSum = $minPathSum * $minPathSum;\n\
    \t$minPathSum = $minPathSum * $minPathSum;\n\t$minPathSum = $minPathSum * $minPathSum;\n\
    \t$minPathSum = $minPathSum * $minPathSum;\n\t$minPathSum = $minPathSum * $minPathSum;\n\
    \t$minPathSum = $minPathSum * $minPathSum;\n\t$minPathSum = $minPathSum * $minPathSum;\n\
    \t$minPathSum = $minPathSum * $minPathSum;\n\t$minPathSum = $minPathSum * $minPathSum;\n\
    \t$minPathSum = $minPathSum * $minPathSum;\n\t$minPathSum = $minPathSum * $minPathSum;\n\
    \t$minPathSum =", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n  \
    \  $minPathValue = array();\n    $minPathValue[0] = PHP_INT_MAX;\n    $minPathValue[1]\
    \ = PHP_INT_MAX;\n    $minPathValue[2] = PHP_INT_MAX;\n    $minPathValue[3] =\
    \ PHP_INT_MAX;\n    $minPathValue[4] = PHP_INT_MAX;\n    $minPathValue[5] = PHP_INT_MAX;\n\
    \    $minPathValue[6] = PHP_INT_MAX;\n    $minPathValue[7] = PHP_INT_MAX;\n  \
    \  $minPathValue[8] = PHP_INT_MAX;\n    $minPathValue[9] = PHP_INT_MAX;\n    $minPathValue[10]\
    \ = PHP_INT_MAX;\n    $minPathValue[11] = PHP_INT_MAX;\n    $minPathValue[12]\
    \ = PHP_INT_MAX;\n    $minPathValue[13] = PHP_INT_MAX;\n    $minPathValue[14]\
    \ = PHP_INT_MAX;\n    $minPathValue[15] = PHP_INT_MAX;\n    $minPathValue[16]\
    \ = PHP_INT_MAX;\n    $minPathValue[17] = PHP_INT_MAX;\n    $minPathValue[18]\
    \ = PHP_INT_MAX;\n    $minPathValue[19] = PHP_INT_MAX;\n    $minPathValue[20]\
    \ = PHP_INT_MAX;\n    $minPathValue[21] = PHP_INT_MAX;\n    $minPathValue[22]\
    \ = PHP_INT_MAX;\n    $minPathValue[23] = PHP_INT_MAX;\n    $minPathValue[24]\
    \ = PHP_INT_MAX;\n    $minPathValue[25] = PHP_INT_MAX;\n    $minPathValue[26]\
    \ = PHP_INT_MAX;\n    $minPathValue[27] = PHP_INT_MAX;\n", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $queue = new SplQueue();\n    $queue->enqueue([0, 0, 1, [$grid[0][0]]]);\n\
    \    $visited[0][0] = true;\n    while (!$queue->isEmpty()) {\n        list($x,\
    \ $y, $step, $path) = $queue->dequeue();\n        if ($step == $k) {\n       \
    \     return $path;\n        }\n        if ($x > 0 && !$visited[$x - 1][$y]) {\n\
    \            $visited[$x - 1][$y] = true;\n            $queue->enqueue([$x - 1,\
    \ $y, $step + 1, array_merge($path, [$grid[$x - 1][$y]])]);\n        }\n     \
    \   if ($x < $n - 1 && !$visited[$x + 1][$y]) {\n            $visited[$x + 1][$y]\
    \ = true;\n            $queue->enqueue([$x + 1, $y, $step + 1, array_merge($path,\
    \ [$grid[$x + 1][$y]])]);\n        }\n        if ($y > 0 && !$visited[$x][$y -\
    \ 1]) {\n            $visited[$x][$y - 1] = true;\n            $queue->enqueue([$x,\
    \ $y - 1, $step + 1, array_merge($path, [$grid[$x][$y - 1]])]);\n        }\n \
    \       if ($y < $m - 1 && !$visited[$x][$y + 1]) {\n            $visited[$x][$y\
    \ + 1] = true;\n            $queue->enqueue([$x, $y + 1, $step + 1, array_merge($path,\
    \ [$grid[$x][$y + 1]])]);\n        }\n    }\n}\n\n/*\n * To change this license\
    \ header, choose License Headers in Project Properties.\n * To", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPath = [];\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    for ($j = 0; $j < $m; $j++) {\n            $path = [];\n            $pathSum\
    \ = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $visited,\
    \ $path, $pathSum, $k, $minPath, $minPathSum);\n            $visited[$i][$j] =\
    \ false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $min = array_fill(0, $k, PHP_INT_MAX);\n    $min[0] = $grid[0][0];\n\
    \    $visited[0][0] = true;\n    $q = new SplQueue();\n    $q->enqueue([0, 0,\
    \ 0]);\n    while (!$q->isEmpty()) {\n        list($x, $y, $d) = $q->dequeue();\n\
    \        if ($d == $k - 1) {\n            break;\n        }\n        if ($x >\
    \ 0 && !$visited[$x - 1][$y]) {\n            $visited[$x - 1][$y] = true;\n  \
    \          $q->enqueue([$x - 1, $y, $d + 1]);\n            if ($grid[$x - 1][$y]\
    \ < $min[$d + 1]) {\n                $min[$d + 1] = $grid[$x - 1][$y];\n     \
    \       }\n        }\n        if ($x < $n - 1 && !$visited[$x + 1][$y]) {\n  \
    \          $visited[$x + 1][$y] = true;\n            $q->enqueue([$x + 1, $y,\
    \ $d + 1]);\n            if ($grid[$x + 1][$y] < $min[$d + 1]) {\n           \
    \     $min[$d + 1] = $grid[$x + 1][$y];\n            }\n        }\n        if\
    \ ($y > 0 && !$visited[$x][$y - 1]) {\n            $visited[$x][$y - 1] = true;\n\
    \            $q->enqueue([$x, $y - 1, $d + 1]);\n            if ($grid[$x][$y\
    \ - 1] < $min[$d + 1]) {\n                $min[$d + 1] = $grid[$x][$y - 1];\n\
    \            }\n        }\n        if ($y < $", "    $n = count($grid);\n    $m\
    \ = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = findMinPath($grid,\
    \ $visited, $n, $m, 0, 0, $k, $minPath, $minPathSum);\n    return $minPath;\n}",
  "    $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0, $n, false));\n\
    \    $minPath = array();\n    $minPathValue = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path = array();\n\
    \            $pathValue = 0;\n            $visited[$i][$j] = true;\n         \
    \   $path[] = $grid[$i][$j];\n            $pathValue += $grid[$i][$j];\n     \
    \       if (dfs($grid, $i, $j, $k - 1, $visited, $path, $pathValue, $minPath,\
    \ $minPathValue)) {\n                return $minPath;\n            }\n       \
    \     $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n}", " \
    \   $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $visited, $path, $pathSum, $minPath, $minPathSum,\
    \ $k);\n            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0,\
    \ $n, array_fill(0, $m, array()));\n    $dp[0][0][] = $grid[0][0];\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if\
    \ ($i > 0) {\n                $dp[$i][$j] = minPathHelper($dp[$i][$j], $dp[$i\
    \ - 1][$j], $grid[$i][$j]);\n            }\n            if ($j > 0) {\n      \
    \          $dp[$i][$j] = minPathHelper($dp[$i][$j], $dp[$i][$j - 1], $grid[$i][$j]);\n\
    \            }\n        }\n    }\n    return $dp[$n - 1][$m - 1][$k - 1];\n}",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $min = [];\n    $min_sum\
    \ = PHP_INT_MAX;\n    $min_sum_path = [];\n    $min_lex_path = [];\n    $min_lex_sum\
    \ = PHP_INT_MAX;\n    $min_lex_sum_path = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $min_sum = min($min_sum,\
    \ $grid[$i][$j]);\n            $min_lex_sum = min($min_lex_sum, $grid[$i][$j]);\n\
    \            $min[$i][$j] = [$min_sum, $min_sum_path, $min_lex_sum, $min_lex_sum_path];\n\
    \        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $min_sum = $min[$i][$j][0];\n            $min_sum_path\
    \ = $min[$i][$j][1];\n            $min_lex_sum = $min[$i][$j][2];\n          \
    \  $min_lex_sum_path = $min[$i][$j][3];\n            if ($i > 0) {\n         \
    \       $min_sum = min($min_sum, $min[$i - 1][$j][0] + $grid[$i][$j]);\n     \
    \           $min_sum_path = $min_sum == $min[$i - 1][$j][0] + $grid[$i][$j] ?\
    \ $min[$i - 1][$j][1] : $min_sum_path;\n                $min_lex_sum = min($min_lex_sum,\
    \ $min[$i - 1][$j][2] + $grid[$i][$j]);\n                $min_lex_sum_path = $min_lex_sum\
    \ == $min[$i - 1][$j][2] + $grid[", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $dp = array_fill(0, $n, array_fill(0, $m, array(array(), INF)));\n    $dp[0][0]\
    \ = array(array($grid[0][0]), 0);\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ for ($j = 0; $j < $m; $j++) {\n            if ($i > 0) {\n                $tmp\
    \ = $dp[$i - 1][$j][1] + 1;\n                if ($tmp < $dp[$i][$j][1]) {\n  \
    \                  $dp[$i][$j][0] = $dp[$i - 1][$j][0];\n                    $dp[$i][$j][0][]\
    \ = $grid[$i][$j];\n                    $dp[$i][$j][1] = $tmp;\n             \
    \   } else if ($tmp == $dp[$i][$j][1]) {\n                    $tmp = $dp[$i -\
    \ 1][$j][0];\n                    $tmp[] = $grid[$i][$j];\n                  \
    \  if (less($tmp, $dp[$i][$j][0])) {\n                        $dp[$i][$j][0] =\
    \ $tmp;\n                    }\n                }\n            }\n           \
    \ if ($j > 0) {\n                $tmp = $dp[$i][$j - 1][1] + 1;\n            \
    \    if ($tmp < $dp[$i][$j][1]) {\n                    $dp[$i][$j][0] = $dp[$i][$j\
    \ - 1][0];\n                    $dp[$i][$j][0][] = $grid[$i][$j];\n          \
    \          $dp[$i][$j][1] = $tmp;\n                } else if ($tmp == $dp[$i][$j][1])\
    \ {\n                    $tmp = $dp[$i][$j - 1][0];\n                    $tmp[]\
    \ = $grid[$i][$j];\n                    if (less($tmp, $dp[$i][$j][0]", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0, $n,\
    \ array_fill(0, $m, false));\n    $minPath = array();\n    $minPathValue = array();\n\
    \    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[]\
    \ = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n\
    \    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[]\
    \ = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n\
    \    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[]\
    \ = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n\
    \    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[]\
    \ = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n\
    \    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[]\
    \ = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n\
    \    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[]\
    \ = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n\
    \    $minPathValue[] = PHP_INT_MAX;\n    $minPathValue[] = PHP_INT_MAX;\n", " \
    \   $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array_fill(0, $k, PHP_INT_MAX);\n\
    \    $minPath[0] = $grid[0][0];\n    $minPaths = array();\n    $minPaths[] = $minPath;\n\
    \    $visited[0][0] = true;\n    $queue = new SplQueue();\n    $queue->enqueue([0,\
    \ 0, 0]);\n    while (!$queue->isEmpty()) {\n        list($i, $j, $l) = $queue->dequeue();\n\
    \        if ($l == $k - 1) {\n            continue;\n        }\n        if ($i\
    \ > 0 && !$visited[$i - 1][$j]) {\n            $visited[$i - 1][$j] = true;\n\
    \            $queue->enqueue([$i - 1, $j, $l + 1]);\n            $newPath = $minPaths[$l];\n\
    \            $newPath[$l + 1] = $grid[$i - 1][$j];\n            $minPaths[$l +\
    \ 1] = $newPath;\n        }\n        if ($i < $n - 1 && !$visited[$i + 1][$j])\
    \ {\n            $visited[$i + 1][$j] = true;\n            $queue->enqueue([$i\
    \ + 1, $j, $l + 1]);\n            $newPath = $minPaths[$l];\n            $newPath[$l\
    \ + 1] = $grid[$i + 1][$j];\n            $minPaths[$l + 1] = $newPath;\n     \
    \   }\n        if ($j > 0 && !$visited[$i][$j - 1]) {\n            $visited[$i][$j\
    \ - 1] = true;\n            $queue->enqueue([$i, $j - 1, $l + 1]);\n         \
    \   $newPath = $minPaths[$l];\n            $newPath[$l + 1] =", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPath = [];\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n   \
    \         $path = [];\n            $pathSum = $grid[$i][$j];\n            $path[]\
    \ = $grid[$i][$j];\n            $minPathSum = PHP_INT_MAX;\n            $minPath\
    \ = [];\n            dfs($grid, $visited, $i, $j, $path, $pathSum, $minPath, $minPathSum,\
    \ $k);\n            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathValue =\
    \ PHP_INT_MAX;\n    $minPathLength = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n\
    \            $path = array($grid[$i][$j]);\n            $pathValue = $grid[$i][$j];\n\
    \            $pathLength = 1;\n            dfs($grid, $i, $j, $visited, $path,\
    \ $pathValue, $pathLength, $minPath, $minPathValue, $minPathLength, $k);\n   \
    \         $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n}",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0, $n,\
    \ array_fill(0, $m, array_fill(0, $k + 1, array())));\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            for ($l = 0; $l\
    \ <= $k; $l++) {\n                $dp[$i][$j][$l] = array();\n            }\n\
    \        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            for ($l = 1; $l <= $k; $l++) {\n                $dp[$i][$j][$l]\
    \ = array($grid[$i][$j]);\n                if ($i > 0) {\n                   \
    \ $tmp = $dp[$i - 1][$j][$l - 1];\n                    if (count($tmp) > 0 &&\
    \ $tmp[0] < $grid[$i][$j]) {\n                        $dp[$i][$j][$l] = $tmp;\n\
    \                    }\n                }\n                if ($j > 0) {\n   \
    \                 $tmp = $dp[$i][$j - 1][$l - 1];\n                    if (count($tmp)\
    \ > 0 && $tmp[0] < $grid[$i][$j]) {\n                        $dp[$i][$j][$l] =\
    \ $tmp;\n                    }\n                }\n                if ($i < $n\
    \ - 1) {\n                    $tmp = $dp[$i + 1][$j][$l - 1];\n              \
    \      if (count($tmp) > 0 && $tmp[0] < $grid[$i][$j]) {\n                   \
    \     $dp[$i][$j][$l] = $tmp;\n                    }\n                }\n    \
    \            if ($j < $m - 1) {\n                    $tmp = $dp[$i][$j + 1][$l\
    \ - 1];\n                    if (count($tmp) > 0 && $tmp[0]", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPath = [];\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n   \
    \         $path = [];\n            $pathSum = $grid[$i][$j];\n            $path[]\
    \ = $grid[$i][$j];\n            $minPath = dfs($grid, $i, $j, $visited, $path,\
    \ $pathSum, $minPath, $minPathSum, $k);\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $sum = 0;\n            $visited[$i][$j] = true;\n            $path[]\
    \ = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n            dfs($grid,\
    \ $i, $j, $k, $visited, $path, $sum, $minPath, $minSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $pathSum = 0;\n            $visited[$i][$j] = true;\n\
    \            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathVal = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathVal = 0;\n            $visited[$i][$j]\
    \ = true;\n            dfs($grid, $i, $j, $visited, $path, $pathVal, $k, $minPath,\
    \ $minPathVal);\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n \
    \   $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array_fill(0,\
    \ $k, PHP_INT_MAX);\n    $minPath[0] = $grid[0][0];\n    $minPaths = array();\n\
    \    $minPaths[] = $minPath;\n    $visited[0][0] = true;\n    $minPaths = dfs($grid,\
    \ $visited, $minPaths, $minPath, $k, 0, 0, $n, $m);\n    $minPath = $minPaths[0];\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++)\
    \ {\n            $visited[$i][$j] = true;\n            $path = [];\n         \
    \   $pathSum = $grid[$i][$j];\n            $path[] = $grid[$i][$j];\n        \
    \    $minPath = dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum, $minPath,\
    \ $minPathSum);\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n \
    \   $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $path = array();\n            $sum = 0;\n\
    \            $visited[$i][$j] = true;\n            dfs($grid, $i, $j, $visited,\
    \ $path, $sum, $k, $minPath, $minSum);\n            $visited[$i][$j] = false;\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = array();\n  \
    \  $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $n; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1,\
    \ $visited, $path, $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $queue = new SplQueue();\n    $queue->enqueue([0, 0, 0, []]);\n\
    \    $visited[0][0] = true;\n    $minPath = [];\n    while (!$queue->isEmpty())\
    \ {\n        list($i, $j, $length, $path) = $queue->dequeue();\n        if ($length\
    \ == $k) {\n            if (empty($minPath) || $path < $minPath) {\n         \
    \       $minPath = $path;\n            }\n            continue;\n        }\n \
    \       if ($i > 0 && !$visited[$i - 1][$j]) {\n            $visited[$i - 1][$j]\
    \ = true;\n            $queue->enqueue([$i - 1, $j, $length + 1, array_merge($path,\
    \ [$grid[$i - 1][$j]])]);\n        }\n        if ($i < $n - 1 && !$visited[$i\
    \ + 1][$j]) {\n            $visited[$i + 1][$j] = true;\n            $queue->enqueue([$i\
    \ + 1, $j, $length + 1, array_merge($path, [$grid[$i + 1][$j]])]);\n        }\n\
    \        if ($j > 0 && !$visited[$i][$j - 1]) {\n            $visited[$i][$j -\
    \ 1] = true;\n            $queue->enqueue([$i, $j - 1, $length + 1, array_merge($path,\
    \ [$grid[$i][$j - 1]])]);\n        }\n        if ($j < $m - 1 && !$visited[$i][$j\
    \ + 1]) {\n            $visited[$i][$j + 1] = true;\n            $queue->enqueue([$i,\
    \ $j + 1, $length + 1, array_merge($path, [$grid[$i][$j + 1]])]);\n", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0, $n, array_fill(0,\
    \ $m, array()));\n    $dp[0][0][] = $grid[0][0];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            if ($i > 0) {\n      \
    \          $dp[$i][$j] = merge($dp[$i][$j], $dp[$i - 1][$j]);\n            }\n\
    \            if ($j > 0) {\n                $dp[$i][$j] = merge($dp[$i][$j], $dp[$i][$j\
    \ - 1]);\n            }\n            $dp[$i][$j][] = $grid[$i][$j];\n        }\n\
    \    }\n    return $dp[$n - 1][$m - 1][$k - 1];\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $pathSum = 0;\n            $visited[$i][$j] = true;\n\
    \            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = [];\n \
    \   $minPath[0] = $grid[0][0];\n    $minPath[1] = $grid[0][1];\n    $minPath[2]\
    \ = $grid[1][0];\n    $minPath[3] = $grid[1][1];\n    $minPath[4] = $grid[0][2];\n\
    \    $minPath[5] = $grid[1][2];\n    $minPath[6] = $grid[2][0];\n    $minPath[7]\
    \ = $grid[2][1];\n    $minPath[8] = $grid[2][2];\n    $minPath = sort($minPath);\n\
    \    $minPath = array_slice($minPath, 0, $k);\n    return $minPath;\n}", "   \
    \ $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0,\
    \ $n, array_fill(0, $m, array_fill(0, $k, array())));\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $dp[$i][$j][0][]\
    \ = $grid[$i][$j];\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    for ($j = 0; $j < $m; $j++) {\n            for ($l = 1; $l < $k; $l++) {\n\
    \                $dp[$i][$j][$l] = $dp[$i][$j][$l - 1];\n                if ($i\
    \ > 0) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i - 1][$j][$l - 1]);\n                }\n                if ($j > 0) {\n\
    \                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l], $dp[$i][$j\
    \ - 1][$l - 1]);\n                }\n                if ($i < $n - 1) {\n    \
    \                $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l], $dp[$i + 1][$j][$l\
    \ - 1]);\n                }\n                if ($j < $m - 1) {\n            \
    \        $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l], $dp[$i][$j + 1][$l -\
    \ 1]);\n                }\n            }\n        }\n    }\n    return $dp[0][0][$k\
    \ - 1];\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = [];\n            $sum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            $visited[$i][$j] = false;\n            dfs($grid, $visited, $i, $j,\
    \ $k - 1, $path, $sum, $minPath, $minSum);\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0,\
    \ $n, array_fill(0, $m, array_fill(0, $k + 1, null)));\n    $dp[0][0][1] = array($grid[0][0]);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          for ($l = 1; $l <= $k; $l++) {\n                $dp[$i][$j][$l] = array();\n\
    \                if ($i > 0 && $dp[$i - 1][$j][$l - 1]) {\n                  \
    \  $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l], $dp[$i - 1][$j][$l - 1], $grid[$i][$j]);\n\
    \                }\n                if ($j > 0 && $dp[$i][$j - 1][$l - 1]) {\n\
    \                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l], $dp[$i][$j\
    \ - 1][$l - 1], $grid[$i][$j]);\n                }\n                if ($i < $n\
    \ - 1 && $dp[$i + 1][$j][$l - 1]) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i + 1][$j][$l - 1], $grid[$i][$j]);\n                }\n              \
    \  if ($j < $m - 1 && $dp[$i][$j + 1][$l - 1]) {\n                    $dp[$i][$j][$l]\
    \ = minPathHelper($dp[$i][$j][$l], $dp[$i][$j + 1][$l - 1], $grid[$i][$j]);\n\
    \                }\n            }\n        }\n    }\n    return $dp[$n - 1][$m\
    \ - 1][$", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited =\
    \ array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n\
    \            $path = [$grid[$i][$j]];\n            $pathSum = $grid[$i][$j];\n\
    \            $minPathSum = PHP_INT_MAX;\n            $minPath = [];\n        \
    \    dfs($grid, $i, $j, $visited, $path, $pathSum, $minPath, $minPathSum, $k);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array_fill(0, $k, PHP_INT_MAX);\n\
    \    $minPath[0] = $grid[0][0];\n    $minPathFound = false;\n    $queue = new\
    \ SplQueue();\n    $queue->enqueue([0, 0, 0]);\n    while (!$queue->isEmpty())\
    \ {\n        $curr = $queue->dequeue();\n        $i = $curr[0];\n        $j =\
    \ $curr[1];\n        $currK = $curr[2];\n        if ($currK == $k - 1) {\n   \
    \         $minPathFound = true;\n            break;\n        }\n        $visited[$i][$j]\
    \ = true;\n        if ($i > 0 && !$visited[$i - 1][$j] && $grid[$i - 1][$j] <\
    \ $minPath[$currK + 1]) {\n            $minPath[$currK + 1] = $grid[$i - 1][$j];\n\
    \            $queue->enqueue([$i - 1, $j, $currK + 1]);\n        }\n        if\
    \ ($i < $n - 1 && !$visited[$i + 1][$j] && $grid[$i + 1][$j] < $minPath[$currK\
    \ + 1]) {\n            $minPath[$currK + 1] = $grid[$i + 1][$j];\n           \
    \ $queue->enqueue([$i + 1, $j, $currK + 1]);\n        }\n        if ($j > 0 &&\
    \ !$visited[$i][$j - 1] && $grid[$i][$j - 1] < $minPath[$currK + 1]) {\n     \
    \       $minPath[$currK + 1] = $grid[$i][$j - 1];\n            $queue->enqueue([$i,\
    \ $j - 1, $currK + 1]);\n        }", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $minPath = [];\n    $minPathValue = [];\n    $minPathValue[0] = PHP_INT_MAX;\n\
    \    $minPathValue[1] = PHP_INT_MAX;\n    $minPathValue[2] = PHP_INT_MAX;\n  \
    \  $minPathValue[3] = PHP_INT_MAX;\n    $minPathValue[4] = PHP_INT_MAX;\n    $minPathValue[5]\
    \ = PHP_INT_MAX;\n    $minPathValue[6] = PHP_INT_MAX;\n    $minPathValue[7] =\
    \ PHP_INT_MAX;\n    $minPathValue[8] = PHP_INT_MAX;\n    $minPathValue[9] = PHP_INT_MAX;\n\
    \    $minPathValue[10] = PHP_INT_MAX;\n    $minPathValue[11] = PHP_INT_MAX;\n\
    \    $minPathValue[12] = PHP_INT_MAX;\n    $minPathValue[13] = PHP_INT_MAX;\n\
    \    $minPathValue[14] = PHP_INT_MAX;\n    $minPathValue[15] = PHP_INT_MAX;\n\
    \    $minPathValue[16] = PHP_INT_MAX;\n    $minPathValue[17] = PHP_INT_MAX;\n\
    \    $minPathValue[18] = PHP_INT_MAX;\n    $minPathValue[19] = PHP_INT_MAX;\n\
    \    $minPathValue[20] = PHP_INT_MAX;\n    $minPathValue[21] = PHP_INT_MAX;\n\
    \    $minPathValue[22] = PHP_INT_MAX;\n    $minPathValue[23] = PHP_INT_MAX;\n\
    \    $minPathValue[24] = PHP_INT_MAX;\n    $minPathValue[25] = PHP_INT_MAX;\n\
    \    $minPathValue[26] = PHP_INT_MAX;\n    $minPathValue[27] = PHP_INT_MAX;\n\
    \    $minPathValue[28] = PHP_INT_MAX;\n    $minPathValue[29] = PHP_INT", "   \
    \ $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = [];\n    $minPathVal\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++)\
    \ {\n            $minPath[$i][$j] = [];\n            $minPathVal[$i][$j] = [];\n\
    \            for ($l = 0; $l < $k; $l++) {\n                $minPath[$i][$j][$l]\
    \ = [];\n                $minPathVal[$i][$j][$l] = [];\n                for ($r\
    \ = 0; $r < $k; $r++) {\n                    $minPath[$i][$j][$l][$r] = [];\n\
    \                    $minPathVal[$i][$j][$l][$r] = [];\n                }\n  \
    \          }\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            for ($l = 0; $l < $k; $l++) {\n     \
    \           for ($r = 0; $r < $k; $r++) {\n                    $minPath[$i][$j][$l][$r][0]\
    \ = $grid[$i][$j];\n                    $minPathVal[$i][$j][$l][$r][0] = $grid[$i][$j];\n\
    \                }\n            }\n        }\n    }\n    for ($l = 0; $l < $k;\
    \ $l++) {\n        for ($r = 0; $r < $k; $r++) {\n            for ($i = 0; $i\
    \ < $n; $i++) {\n                for ($j = 0; $j < $m; $j++) {\n             \
    \       if ($i > 0) {\n                        $minPath[$i][$j][$l][$r] = minPath($minPath[$i][$j][$l][$r],\
    \ $minPath[$i - 1][$j][$l][$r]);\n                        $minPathVal[", "   \
    \ $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array_fill(0, $k, PHP_INT_MAX);\n\
    \    $minPath[0] = $grid[0][0];\n    $minPathFound = false;\n    $minPathFound\
    \ = findMinPath($grid, $visited, $minPath, $k, 0, 0, $minPathFound);\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath\
    \ = array();\n    $minPathSum = $n * $m * $k;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $path = array();\n\
    \    $pathSum = 0;\n    $dfs = function($grid, $n, $m, $k, $i, $j, $path, $pathSum,\
    \ &$minPath, &$minPathSum, &$visited) use (&$dfs) {\n        if ($k == 0) {\n\
    \            if ($pathSum < $minPathSum) {\n                $minPathSum = $pathSum;\n\
    \                $minPath = $path;\n            }\n            return;\n     \
    \   }\n        if ($i < 0 || $i >= $n || $j < 0 || $j >= $m || $visited[$i][$j])\
    \ {\n            return;\n        }\n        $visited[$i][$j] = true;\n      \
    \  $path[] = $grid[$i][$j];\n        $pathSum += $grid[$i][$j];\n        $dfs($grid,\
    \ $n, $m, $k - 1, $i - 1, $j, $path, $pathSum, $minPath, $minPathSum, $visited);\n\
    \        $dfs($grid, $n, $m, $k - 1, $i + 1, $j, $path, $pathSum, $minPath, $minPathSum,\
    \ $visited);\n        $dfs($grid, $n, $m, $k - 1, $i, $j - 1, $path, $pathSum,\
    \ $minPath, $minPathSum, $visited);\n        $dfs($grid, $n, $m, $k - 1, $i, $j\
    \ + 1, $path, $pathSum, $minPath, $minPathSum, $visited);\n        array_pop($path);\n\
    \        $pathSum -= $grid[$i][$j];\n        $visited[$i", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $pathSum = 0;\n            $visited[$i][$j] = true;\n\
    \            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $min = array();\n\
    \    $min_val = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $cur = array();\n            $cur_val = 0;\n\
    \            $cur_val = dfs($grid, $i, $j, $k, $cur, $cur_val);\n            if\
    \ ($cur_val < $min_val) {\n                $min_val = $cur_val;\n            \
    \    $min = $cur;\n            }\n        }\n    }\n    return $min;\n}", "  \
    \  $n = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0, $n,\
    \ array_fill(0, $m, array_fill(0, $k + 1, array())));\n    $dp[0][0][0] = array($grid[0][0]);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          for ($l = 0; $l <= $k; $l++) {\n                if ($i > 0) {\n   \
    \                 $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l], $dp[$i - 1][$j][$l\
    \ - 1], $grid[$i][$j]);\n                }\n                if ($j > 0) {\n  \
    \                  $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l], $dp[$i][$j\
    \ - 1][$l - 1], $grid[$i][$j]);\n                }\n            }\n        }\n\
    \    }\n    return $dp[$n - 1][$m - 1][$k];\n}", "    $n = count($grid);\n   \
    \ $m = count($grid[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, array_fill(0,\
    \ $k, array())));\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $dp[$i][$j][0][] = $grid[$i][$j];\n        }\n  \
    \  }\n    for ($l = 1; $l < $k; $l++) {\n        for ($i = 0; $i < $n; $i++) {\n\
    \            for ($j = 0; $j < $m; $j++) {\n                $dp[$i][$j][$l] =\
    \ array();\n                if ($i > 0) {\n                    $dp[$i][$j][$l]\
    \ = min($dp[$i][$j][$l], $dp[$i - 1][$j][$l - 1]);\n                }\n      \
    \          if ($i < $n - 1) {\n                    $dp[$i][$j][$l] = min($dp[$i][$j][$l],\
    \ $dp[$i + 1][$j][$l - 1]);\n                }\n                if ($j > 0) {\n\
    \                    $dp[$i][$j][$l] = min($dp[$i][$j][$l], $dp[$i][$j - 1][$l\
    \ - 1]);\n                }\n                if ($j < $m - 1) {\n            \
    \        $dp[$i][$j][$l] = min($dp[$i][$j][$l], $dp[$i][$j + 1][$l - 1]);\n  \
    \              }\n                $dp[$i][$j][$l][] = $grid[$i][$j];\n       \
    \     }\n        }\n    }\n    $ans = array();\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $m; $j++) {\n            $ans = min($ans, $dp[",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $min = array();\n    $min_sum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = array();\n            $sum = 0;\n         \
    \   $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n           \
    \ if ($i > 0) {\n                $path[] = $grid[$i - 1][$j];\n              \
    \  $sum += $grid[$i - 1][$j];\n            }\n            if ($i < $n - 1) {\n\
    \                $path[] = $grid[$i + 1][$j];\n                $sum += $grid[$i\
    \ + 1][$j];\n            }\n            if ($j > 0) {\n                $path[]\
    \ = $grid[$i][$j - 1];\n                $sum += $grid[$i][$j - 1];\n         \
    \   }\n            if ($j < $m - 1) {\n                $path[] = $grid[$i][$j\
    \ + 1];\n                $sum += $grid[$i][$j + 1];\n            }\n         \
    \   if ($sum < $min_sum) {\n                $min = $path;\n                $min_sum\
    \ = $sum;\n            }\n        }\n    }\n    sort($min);\n    return $min;\n\
    }\n\n/* Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \neach cell of the grid contains a value. Every integer in the range [1,\
    \ N * N]\ninclusive appears exactly once on the cells of the grid.\nYou have to\
    \ find the maximum path of length k in the grid. You can start\nfrom any cell,\
    \ and in each step you can move to any of the neighbor cells,\nin other words,\
    \ you can go to cells which share an edge with you current\ncell.\nPlease note\
    \ that a path of length k means visiting exactly k cells (not\nnecessarily distinct).\n\
    You CANNOT go off the grid.\nA path A (of length k", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $min_path = [];\n    $min_path_val = [];\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n     \
    \       $min_path[$i][$j] = [];\n            $min_path_val[$i][$j] = [];\n   \
    \     }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m;\
    \ $j++) {\n            $min_path[$i][$j][0] = [$grid[$i][$j]];\n            $min_path_val[$i][$j][0]\
    \ = $grid[$i][$j];\n        }\n    }\n    for ($l = 1; $l < $k; $l++) {\n    \
    \    for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $m; $j++) {\n\
    \                $min_path[$i][$j][$l] = [];\n                $min_path_val[$i][$j][$l]\
    \ = PHP_INT_MAX;\n                if ($i > 0) {\n                    $path = $min_path[$i\
    \ - 1][$j][$l - 1];\n                    $path[] = $grid[$i][$j];\n          \
    \          $val = $min_path_val[$i - 1][$j][$l - 1] + $grid[$i][$j];\n       \
    \             if ($val < $min_path_val[$i][$j][$l]) {\n                      \
    \  $min_path[$i][$j][$l] = $path;\n                        $min_path_val[$i][$j][$l]\
    \ = $val;\n                    } elseif ($val == $min_path_val[$i][$j][$l]) {\n\
    \                        $min_path[$i][$j][$l] = min($min_path[$i][$j][$l], $path);",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array_fill(0, $k, INF);\n   \
    \ $minPath[0] = $grid[0][0];\n    $minPath[1] = min($grid[0][0], $grid[0][1],\
    \ $grid[1][0]);\n    $visited[0][0] = true;\n    $visited[0][1] = true;\n    $visited[1][0]\
    \ = true;\n    $visited[1][1] = true;\n    $q = new SplQueue();\n    $q->enqueue([0,\
    \ 0]);\n    $q->enqueue([0, 1]);\n    $q->enqueue([1, 0]);\n    $q->enqueue([1,\
    \ 1]);\n    $min = INF;\n    $minPath = array_fill(0, $k, INF);\n    while (!$q->isEmpty())\
    \ {\n        list($x, $y) = $q->dequeue();\n        $visited[$x][$y] = true;\n\
    \        $path = array_fill(0, $k, INF);\n        $path[0] = $grid[$x][$y];\n\
    \        $path[1] = min($grid[$x][$y], $grid[$x][$y + 1], $grid[$x + 1][$y], $grid[$x\
    \ + 1][$y + 1]);\n        $path[2] = min($grid[$x][$y], $grid[$x][$y + 1], $grid[$x\
    \ + 1][$y], $grid[$x + 1][$y + 1],\n                       $grid[$x][$y + 2],\
    \ $grid[$x + 1][$y + 2], $grid[$x + 2][$y], $grid[$x + 2][$y + 1], $grid[$x +\
    \ 2][$y + 2]);\n        if ($path[$k - 1] < $min) {\n            $min = $path[$",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $path = [];\n    $minPath\
    \ = [];\n    $minPathValue = PHP_INT_MAX;\n    $visited = [];\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $m; $j++) {\n            $visited[$i][$j] = true;\n            $path[]\
    \ = $grid[$i][$j];\n            dfs($grid, $i, $j, $k, $visited, $path, $minPath,\
    \ $minPathValue);\n            array_pop($path);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minPathValue = PHP_INT_MAX;\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $path = array();\n            $pathValue = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $pathValue += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $visited, $path, $pathValue, $k, $minPath, $minPathValue);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = [];\n \
    \   $minPathValue = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = [];\n            $pathValue =\
    \ 0;\n            $visited = array_fill(0, $n, array_fill(0, $m, false));\n  \
    \          $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n  \
    \          $pathValue += $grid[$i][$j];\n            dfs($grid, $i, $j, $visited,\
    \ $path, $pathValue, $k, $minPath, $minPathValue);\n        }\n    }\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n  \
    \  $minPathValue = array();\n    $minPathValue[0] = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j]\
    \ = true;\n            $path = array();\n            $path[] = $grid[$i][$j];\n\
    \            $pathValue = array();\n            $pathValue[] = $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $visited, $path, $pathValue, $minPath, $minPathValue,\
    \ $k);\n            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minPathValue = [];\n\
    \    $minPathValue[0] = PHP_INT_MAX;\n    $minPathValue[1] = PHP_INT_MAX;\n  \
    \  $minPathValue[2] = PHP_INT_MAX;\n    $minPathValue[3] = PHP_INT_MAX;\n    $minPathValue[4]\
    \ = PHP_INT_MAX;\n    $minPathValue[5] = PHP_INT_MAX;\n    $minPathValue[6] =\
    \ PHP_INT_MAX;\n    $minPathValue[7] = PHP_INT_MAX;\n    $minPathValue[8] = PHP_INT_MAX;\n\
    \    $minPathValue[9] = PHP_INT_MAX;\n    $minPathValue[10] = PHP_INT_MAX;\n \
    \   $minPathValue[11] = PHP_INT_MAX;\n    $minPathValue[12] = PHP_INT_MAX;\n \
    \   $minPathValue[13] = PHP_INT_MAX;\n    $minPathValue[14] = PHP_INT_MAX;\n \
    \   $minPathValue[15] = PHP_INT_MAX;\n    $minPathValue[16] = PHP_INT_MAX;\n \
    \   $minPathValue[17] = PHP_INT_MAX;\n    $minPathValue[18] = PHP_INT_MAX;\n \
    \   $minPathValue[19] = PHP_INT_MAX;\n    $minPathValue[20] = PHP_INT_MAX;\n \
    \   $minPathValue[21] = PHP_INT_MAX;\n    $minPathValue[22] = PHP_INT_MAX;\n \
    \   $minPathValue[23] = PHP_INT_MAX;\n    $minPathValue[24] = PHP_INT_MAX;\n \
    \   $minPathValue[25] = PHP_INT_MAX;\n    $minPathValue[26] = PHP_INT_MAX;\n \
    \   $minPathValue[27] = PHP_INT_MAX;\n    $", "    $n = count($grid);\n    $m\
    \ = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n\
    \    $min = array_fill(0, $k, PHP_INT_MAX);\n    $min[0] = $grid[0][0];\n    $visited[0][0]\
    \ = true;\n    $q = [[0, 0, 0]];\n    while (!empty($q)) {\n        list($i, $j,\
    \ $l) = array_shift($q);\n        if ($l == $k - 1) {\n            break;\n  \
    \      }\n        if ($i > 0 && !$visited[$i - 1][$j]) {\n            $visited[$i\
    \ - 1][$j] = true;\n            $q[] = [$i - 1, $j, $l + 1];\n            $min[$l\
    \ + 1] = min($min[$l + 1], $grid[$i - 1][$j]);\n        }\n        if ($i < $n\
    \ - 1 && !$visited[$i + 1][$j]) {\n            $visited[$i + 1][$j] = true;\n\
    \            $q[] = [$i + 1, $j, $l + 1];\n            $min[$l + 1] = min($min[$l\
    \ + 1], $grid[$i + 1][$j]);\n        }\n        if ($j > 0 && !$visited[$i][$j\
    \ - 1]) {\n            $visited[$i][$j - 1] = true;\n            $q[] = [$i, $j\
    \ - 1, $l + 1];\n            $min[$l + 1] = min($min[$l + 1], $grid[$i][$j - 1]);\n\
    \        }\n        if ($j < $m - 1 && !$visited[$i][$j + 1]) {\n            $visited[$i][$j\
    \ + 1] = true;\n            $q[] = [$i, $j + 1, $l + 1];\n            $min[$l\
    \ + 1] = min($min", "    $n = count($grid);\n    $m = count($grid[0]);\n    $dp\
    \ = array_fill(0, $n, array_fill(0, $m, array()));\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $dp[$i][$j][0] =\
    \ array($grid[$i][$j]);\n        }\n    }\n    for ($i = 1; $i < $k; $i++) {\n\
    \        for ($j = 0; $j < $n; $j++) {\n            for ($l = 0; $l < $m; $l++)\
    \ {\n                $dp[$j][$l][$i] = array();\n                if ($j > 0) {\n\
    \                    $dp[$j][$l][$i] = minPathHelper($dp[$j][$l][$i], $dp[$j -\
    \ 1][$l][$i - 1], $grid[$j][$l]);\n                }\n                if ($j <\
    \ $n - 1) {\n                    $dp[$j][$l][$i] = minPathHelper($dp[$j][$l][$i],\
    \ $dp[$j + 1][$l][$i - 1], $grid[$j][$l]);\n                }\n              \
    \  if ($l > 0) {\n                    $dp[$j][$l][$i] = minPathHelper($dp[$j][$l][$i],\
    \ $dp[$j][$l - 1][$i - 1], $grid[$j][$l]);\n                }\n              \
    \  if ($l < $m - 1) {\n                    $dp[$j][$l][$i] = minPathHelper($dp[$j][$l][$i],\
    \ $dp[$j][$l + 1][$i - 1], $grid[$j][$l]);\n                }\n            }\n\
    \        }\n    }\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $m; $j++) {\n            $", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPathSum = $n * $m\
    \ * $n * $m;\n    $visited = array_fill(0, $n, array_fill(0, $m, false));\n  \
    \  $dfs = function($grid, $n, $m, $i, $j, $k, $path, $sum) use(&$minPath, &$minPathSum,\
    \ &$visited, &$dfs) {\n        if ($k == 0) {\n            if ($sum < $minPathSum)\
    \ {\n                $minPathSum = $sum;\n                $minPath = $path;\n\
    \            }\n            return;\n        }\n        if ($i < 0 || $i >= $n\
    \ || $j < 0 || $j >= $m || $visited[$i][$j]) {\n            return;\n        }\n\
    \        $visited[$i][$j] = true;\n        $path[] = $grid[$i][$j];\n        $sum\
    \ += $grid[$i][$j];\n        $dfs($grid, $n, $m, $i + 1, $j, $k - 1, $path, $sum);\n\
    \        $dfs($grid, $n, $m, $i - 1, $j, $k - 1, $path, $sum);\n        $dfs($grid,\
    \ $n, $m, $i, $j + 1, $k - 1, $path, $sum);\n        $dfs($grid, $n, $m, $i, $j\
    \ - 1, $k - 1, $path, $sum);\n        $visited[$i][$j] = false;\n    };\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n         \
    \   $dfs($grid, $n, $m, $i, $j, $k, array(), 0);\n        }\n    }\n    return\
    \ $minPath;\n}\n", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array_fill(0,\
    \ $k, PHP_INT_MAX);\n    $minPath[0] = $grid[0][0];\n    $minPaths = array();\n\
    \    $minPaths[] = $minPath;\n    $visited[0][0] = true;\n    $queue = array();\n\
    \    $queue[] = array(0, 0);\n    while (!empty($queue)) {\n        $cell = array_shift($queue);\n\
    \        $i = $cell[0];\n        $j = $cell[1];\n        $visited[$i][$j] = true;\n\
    \        $neighbors = array();\n        if ($i > 0) {\n            $neighbors[]\
    \ = array($i - 1, $j);\n        }\n        if ($i < $n - 1) {\n            $neighbors[]\
    \ = array($i + 1, $j);\n        }\n        if ($j > 0) {\n            $neighbors[]\
    \ = array($i, $j - 1);\n        }\n        if ($j < $m - 1) {\n            $neighbors[]\
    \ = array($i, $j + 1);\n        }\n        foreach ($neighbors as $neighbor) {\n\
    \            $i = $neighbor[0];\n            $j = $neighbor[1];\n            if\
    \ (!$visited[$i][$j]) {\n                $queue[] = $neighbor;\n             \
    \   $visited[$i][$j] = true;\n                $newPath = $minPath;\n         \
    \       $newPath[count($newPath) - 1] = $grid[$i][$j];\n                $minPaths[]\
    \ = $newPath;\n            }\n        }\n        if (count($minPath) < $k) {\n\
    \            $newPath = $minPath;\n            $newPath[] = PHP_INT_MAX;\n   \
    \         $minPaths[] = $newPath;\n        }\n        $minPath =", "    $n = count($grid);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = array();\n\
    \    $minPathValue = array();\n    $minPathValue[0] = PHP_INT_MAX;\n    $minPathValue[1]\
    \ = PHP_INT_MAX;\n    $minPathValue[2] = PHP_INT_MAX;\n    $minPathValue[3] =\
    \ PHP_INT_MAX;\n    $minPathValue[4] = PHP_INT_MAX;\n    $minPathValue[5] = PHP_INT_MAX;\n\
    \    $minPathValue[6] = PHP_INT_MAX;\n    $minPathValue[7] = PHP_INT_MAX;\n  \
    \  $minPathValue[8] = PHP_INT_MAX;\n    $minPathValue[9] = PHP_INT_MAX;\n    $minPathValue[10]\
    \ = PHP_INT_MAX;\n    $minPathValue[11] = PHP_INT_MAX;\n    $minPathValue[12]\
    \ = PHP_INT_MAX;\n    $minPathValue[13] = PHP_INT_MAX;\n    $minPathValue[14]\
    \ = PHP_INT_MAX;\n    $minPathValue[15] = PHP_INT_MAX;\n    $minPathValue[16]\
    \ = PHP_INT_MAX;\n    $minPathValue[17] = PHP_INT_MAX;\n    $minPathValue[18]\
    \ = PHP_INT_MAX;\n    $minPathValue[19] = PHP_INT_MAX;\n    $minPathValue[20]\
    \ = PHP_INT_MAX;\n    $minPathValue[21] = PHP_INT_MAX;\n    $minPathValue[22]\
    \ = PHP_INT_MAX;\n    $minPathValue[23] = PHP_INT_MAX;\n    $minPathValue[24]\
    \ = PHP_INT_MAX;\n    $minPathValue[25] = PHP_INT_MAX;\n    $minPathValue[26]\
    \ = PHP_INT_MAX;\n    $minPathValue[27] = PHP_INT_MAX;\n    $minPathValue[28]\
    \ = PHP_", "    $n = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0,\
    \ $n, array_fill(0, $m, array()));\n    $dp[0][0][] = $grid[0][0];\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if\
    \ ($i > 0) {\n                $dp[$i][$j] = minPathMerge($dp[$i][$j], $dp[$i -\
    \ 1][$j], $grid[$i][$j]);\n            }\n            if ($j > 0) {\n        \
    \        $dp[$i][$j] = minPathMerge($dp[$i][$j], $dp[$i][$j - 1], $grid[$i][$j]);\n\
    \            }\n        }\n    }\n    return $dp[$n - 1][$m - 1][$k - 1];\n}",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0, $n,\
    \ array_fill(0, $m, array()));\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $dp[$i][$j][0] = $grid[$i][$j];\n   \
    \     }\n    }\n    for ($l = 1; $l < $k; $l++) {\n        for ($i = 0; $i < $n;\
    \ $i++) {\n            for ($j = 0; $j < $m; $j++) {\n                $dp[$i][$j][$l]\
    \ = array();\n                if ($i > 0) {\n                    $dp[$i][$j][$l]\
    \ = minPathHelper($dp[$i][$j][$l], $dp[$i - 1][$j][$l - 1]);\n               \
    \ }\n                if ($i < $n - 1) {\n                    $dp[$i][$j][$l] =\
    \ minPathHelper($dp[$i][$j][$l], $dp[$i + 1][$j][$l - 1]);\n                }\n\
    \                if ($j > 0) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i][$j - 1][$l - 1]);\n                }\n                if ($j < $m -\
    \ 1) {\n                    $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l], $dp[$i][$j\
    \ + 1][$l - 1]);\n                }\n                $dp[$i][$j][$l][] = $grid[$i][$j];\n\
    \            }\n        }\n    }\n    $ans = array();\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $ans = minPathHelper($ans,\
    \ $dp[$", "    $n = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0,\
    \ $n, array_fill(0, $m, array()));\n    for ($i = 0; $i < $n; $i++) {\n      \
    \  for ($j = 0; $j < $m; $j++) {\n            $dp[$i][$j][0] = array($grid[$i][$j]);\n\
    \        }\n    }\n    for ($l = 1; $l < $k; $l++) {\n        for ($i = 0; $i\
    \ < $n; $i++) {\n            for ($j = 0; $j < $m; $j++) {\n                $dp[$i][$j][$l]\
    \ = array();\n                if ($i > 0) {\n                    $dp[$i][$j][$l]\
    \ = minPathHelper($dp[$i][$j][$l], $dp[$i - 1][$j][$l - 1], $grid[$i][$j]);\n\
    \                }\n                if ($i < $n - 1) {\n                    $dp[$i][$j][$l]\
    \ = minPathHelper($dp[$i][$j][$l], $dp[$i + 1][$j][$l - 1], $grid[$i][$j]);\n\
    \                }\n                if ($j > 0) {\n                    $dp[$i][$j][$l]\
    \ = minPathHelper($dp[$i][$j][$l], $dp[$i][$j - 1][$l - 1], $grid[$i][$j]);\n\
    \                }\n                if ($j < $m - 1) {\n                    $dp[$i][$j][$l]\
    \ = minPathHelper($dp[$i][$j][$l], $dp[$i][$j + 1][$l - 1], $grid[$i][$j]);\n\
    \                }\n            }\n        }\n    }\n    $ans = array();\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n     \
    \       $", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath =\
    \ array();\n    $minPathVal = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n       \
    \     $pathVal = 0;\n            $path[] = $grid[$i][$j];\n            $pathVal\
    \ += $grid[$i][$j];\n            $visited = array();\n            $visited[$i][$j]\
    \ = true;\n            $minPath = minPathHelper($grid, $i, $j, $k - 1, $path,\
    \ $pathVal, $minPath, $minPathVal, $visited);\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0,\
    \ $n, array_fill(0, $m, array()));\n    for ($i = 0; $i < $n; $i++) {\n      \
    \  for ($j = 0; $j < $m; $j++) {\n            $dp[$i][$j][0] = array($grid[$i][$j]);\n\
    \        }\n    }\n    for ($l = 1; $l < $k; $l++) {\n        for ($i = 0; $i\
    \ < $n; $i++) {\n            for ($j = 0; $j < $m; $j++) {\n                $dp[$i][$j][$l]\
    \ = array();\n                if ($i > 0) {\n                    $dp[$i][$j][$l]\
    \ = minPathHelper($dp[$i][$j][$l], $dp[$i - 1][$j][$l - 1], $grid[$i][$j]);\n\
    \                }\n                if ($i < $n - 1) {\n                    $dp[$i][$j][$l]\
    \ = minPathHelper($dp[$i][$j][$l], $dp[$i + 1][$j][$l - 1], $grid[$i][$j]);\n\
    \                }\n                if ($j > 0) {\n                    $dp[$i][$j][$l]\
    \ = minPathHelper($dp[$i][$j][$l], $dp[$i][$j - 1][$l - 1], $grid[$i][$j]);\n\
    \                }\n                if ($j < $m - 1) {\n                    $dp[$i][$j][$l]\
    \ = minPathHelper($dp[$i][$j][$l], $dp[$i][$j + 1][$l - 1], $grid[$i][$j]);\n\
    \                }\n            }\n        }\n    }\n    $ans = array();\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n     \
    \       $", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited =\
    \ array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = findMinPath($grid, $n, $m, 0, 0, $k, $visited,\
    \ $minPath, $minPathSum);\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $minPathSum = PHP_INT_MAX;\n            $minPath =\
    \ [];\n            $visited = array_fill(0, $n, array_fill(0, $m, false));\n \
    \           $visited[$i][$j] = true;\n            $minPath[] = $grid[$i][$j];\n\
    \            $minPathSum = $grid[$i][$j];\n            dfs($grid, $i, $j, $visited,\
    \ $minPath, $minPathSum, $k, $n, $m);\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $min = array_fill(0, $k, PHP_INT_MAX);\n\
    \    $min[0] = $grid[0][0];\n    $visited[0][0] = true;\n    $q = [[0, 0, 0]];\n\
    \    while ($q) {\n        list($i, $j, $l) = array_shift($q);\n        if ($l\
    \ == $k - 1) {\n            break;\n        }\n        $visited[$i][$j] = true;\n\
    \        if ($i > 0 && !$visited[$i - 1][$j] && $grid[$i - 1][$j] < $min[$l +\
    \ 1]) {\n            $min[$l + 1] = $grid[$i - 1][$j];\n            $q[] = [$i\
    \ - 1, $j, $l + 1];\n        }\n        if ($i < $n - 1 && !$visited[$i + 1][$j]\
    \ && $grid[$i + 1][$j] < $min[$l + 1]) {\n            $min[$l + 1] = $grid[$i\
    \ + 1][$j];\n            $q[] = [$i + 1, $j, $l + 1];\n        }\n        if ($j\
    \ > 0 && !$visited[$i][$j - 1] && $grid[$i][$j - 1] < $min[$l + 1]) {\n      \
    \      $min[$l + 1] = $grid[$i][$j - 1];\n            $q[] = [$i, $j - 1, $l +\
    \ 1];\n        }\n        if ($j < $m - 1 && !$visited[$i][$j + 1] && $grid[$i][$j\
    \ + 1] < $min[$l + 1]) {\n            $min[$l + 1] = $grid[$i][$j + 1];\n    \
    \        $q[] = [$i,", "    $n = count($grid);\n    $m = count($grid[0]);\n  \
    \  $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j]\
    \ = true;\n            $path = array();\n            $pathSum = $grid[$i][$j];\n\
    \            $path[] = $grid[$i][$j];\n            $minPath = dfs($grid, $i, $j,\
    \ $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, array()));\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $dp[$i][$j][0] = array($grid[$i][$j]);\n        }\n    }\n    for ($l\
    \ = 1; $l < $k; $l++) {\n        for ($i = 0; $i < $n; $i++) {\n            for\
    \ ($j = 0; $j < $m; $j++) {\n                $min = array();\n               \
    \ if ($i > 0) {\n                    $min = $dp[$i - 1][$j][$l - 1];\n       \
    \         }\n                if ($i < $n - 1 && ($min == array() || $min > $dp[$i\
    \ + 1][$j][$l - 1])) {\n                    $min = $dp[$i + 1][$j][$l - 1];\n\
    \                }\n                if ($j > 0 && ($min == array() || $min > $dp[$i][$j\
    \ - 1][$l - 1])) {\n                    $min = $dp[$i][$j - 1][$l - 1];\n    \
    \            }\n                if ($j < $m - 1 && ($min == array() || $min >\
    \ $dp[$i][$j + 1][$l - 1])) {\n                    $min = $dp[$i][$j + 1][$l -\
    \ 1];\n                }\n                $dp[$i][$j][$l] = array_merge($min,\
    \ array($grid[$i][$j]));\n            }\n        }\n    }\n    $min = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          if ($min == array() || $min > $dp[$i][$j][$k - 1]) {\n            \
    \    $min = $dp[$i][", "    $n = count($grid);\n    $m = count($grid[0]);\n  \
    \  $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPath\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++)\
    \ {\n            $visited[$i][$j] = true;\n            $path = [$grid[$i][$j]];\n\
    \            $pathSum = $grid[$i][$j];\n            dfs($grid, $i, $j, $visited,\
    \ $path, $pathSum, $minPath, $minPathSum, $k);\n            $visited[$i][$j] =\
    \ false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPath = [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $n; $j++) {\n            $pathSum = $grid[$i][$j];\n            $path = [$grid[$i][$j]];\n\
    \            $paths = [[$i, $j]];\n            $visited = [];\n            for\
    \ ($l = 0; $l < $n; $l++) {\n                $visited[$l] = array_fill(0, $n,\
    \ false);\n            }\n            $visited[$i][$j] = true;\n            $k--;\n\
    \            while ($k > 0) {\n                $newPaths = [];\n             \
    \   $newPathSum = 0;\n                $newPath = [];\n                foreach\
    \ ($paths as $path) {\n                    $i = $path[0];\n                  \
    \  $j = $path[1];\n                    if ($i > 0 && !$visited[$i - 1][$j]) {\n\
    \                        $newPaths[] = [$i - 1, $j];\n                       \
    \ $newPathSum += $grid[$i - 1][$j];\n                        $newPath[] = $grid[$i\
    \ - 1][$j];\n                        $visited[$i - 1][$j] = true;\n          \
    \          }\n                    if ($i < $n - 1 && !$visited[$i + 1][$j]) {\n\
    \                        $newPaths[] = [$i + 1, $j];\n                       \
    \ $newPathSum += $grid[$i + 1][$j];\n                        $newPath[] = $grid[$i\
    \ + 1][$j];\n                        $visited[$i + 1][$j] = true;\n          \
    \          }\n                    if ($j > 0 && !$visited[$i][$j - 1]) {\n   \
    \                     $newPaths[] = [$i, $j - 1];\n                        $newPathSum\
    \ += $grid[$i][$j", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath\
    \ = [];\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n \
    \       for ($j = 0; $j < $m; $j++) {\n            $path = [];\n            $pathSum\
    \ = 0;\n            $visited = [];\n            $visited[$i][$j] = true;\n   \
    \         $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n \
    \           $minPath = dfs($grid, $i, $j, $k, $path, $pathSum, $minPath, $minPathSum,\
    \ $visited);\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minPathSum = $n * $m + 1;\n    $minPathSum\
    \ = minPathHelper($grid, $n, $m, $k, 0, 0, $visited, $minPath, $minPathSum);\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n\
    \    $minPathValue = [];\n    $minPathLength = PHP_INT_MAX;\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j]\
    \ = true;\n            $path = [$grid[$i][$j]];\n            $pathValue = [$grid[$i][$j]];\n\
    \            dfs($grid, $i, $j, $visited, $path, $pathValue, $minPath, $minPathValue,\
    \ $minPathLength, $k, $n, $m);\n            $visited[$i][$j] = false;\n      \
    \  }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $dp = array_fill(0, $n, array_fill(0, $m, array()));\n    $dp[0][0][] = $grid[0][0];\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          if ($i > 0) {\n                $dp[$i][$j] = minPathMerge($dp[$i][$j],\
    \ $dp[$i - 1][$j], $grid[$i][$j]);\n            }\n            if ($j > 0) {\n\
    \                $dp[$i][$j] = minPathMerge($dp[$i][$j], $dp[$i][$j - 1], $grid[$i][$j]);\n\
    \            }\n        }\n    }\n    return $dp[$n - 1][$m - 1][$k - 1];\n}",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = [];\n            $pathSum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $visited, $path, $pathSum, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $min", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPath[0] = $grid[0][0];\n\
    \    $minPath[1] = $grid[0][1];\n    $minPath[2] = $grid[1][0];\n    $minPath[3]\
    \ = $grid[1][1];\n    $minPath[4] = $grid[0][2];\n    $minPath[5] = $grid[1][2];\n\
    \    $minPath[6] = $grid[2][0];\n    $minPath[7] = $grid[2][1];\n    $minPath[8]\
    \ = $grid[2][2];\n    $minPath = sort($minPath);\n    $minPath = array_slice($minPath,\
    \ 0, $k);\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1,\
    \ $visited, $path, $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, array_fill(0,\
    \ $k, 0)));\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m;\
    \ $j++) {\n            $dp[$i][$j][0] = $grid[$i][$j];\n        }\n    }\n   \
    \ for ($l = 1; $l < $k; $l++) {\n        for ($i = 0; $i < $n; $i++) {\n     \
    \       for ($j = 0; $j < $m; $j++) {\n                $dp[$i][$j][$l] = PHP_INT_MAX;\n\
    \                if ($i > 0) {\n                    $dp[$i][$j][$l] = min($dp[$i][$j][$l],\
    \ $dp[$i - 1][$j][$l - 1]);\n                }\n                if ($i < $n -\
    \ 1) {\n                    $dp[$i][$j][$l] = min($dp[$i][$j][$l], $dp[$i + 1][$j][$l\
    \ - 1]);\n                }\n                if ($j > 0) {\n                 \
    \   $dp[$i][$j][$l] = min($dp[$i][$j][$l], $dp[$i][$j - 1][$l - 1]);\n       \
    \         }\n                if ($j < $m - 1) {\n                    $dp[$i][$j][$l]\
    \ = min($dp[$i][$j][$l], $dp[$i][$j + 1][$l - 1]);\n                }\n      \
    \      }\n        }\n    }\n    $ans = array();\n    $ans[] = $dp[0][0][$k - 1];\n\
    \    $i = 0;\n    $j = 0;\n    for ($l = $k - 2; $l >= 0; $l--) {\n        if\
    \ ($i > 0 && $dp[$i - 1][$j", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $min = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0;\
    \ $j < $m; $j++) {\n            $min[$i][$j] = array();\n            $min[$i][$j][0]\
    \ = $grid[$i][$j];\n        }\n    }\n    for ($i = 1; $i < $k; $i++) {\n    \
    \    for ($j = 0; $j < $n; $j++) {\n            for ($l = 0; $l < $m; $l++) {\n\
    \                $min[$j][$l][$i] = PHP_INT_MAX;\n                if ($j > 0)\
    \ {\n                    $min[$j][$l][$i] = min($min[$j][$l][$i], $min[$j - 1][$l][$i\
    \ - 1]);\n                }\n                if ($j < $n - 1) {\n            \
    \        $min[$j][$l][$i] = min($min[$j][$l][$i], $min[$j + 1][$l][$i - 1]);\n\
    \                }\n                if ($l > 0) {\n                    $min[$j][$l][$i]\
    \ = min($min[$j][$l][$i], $min[$j][$l - 1][$i - 1]);\n                }\n    \
    \            if ($l < $m - 1) {\n                    $min[$j][$l][$i] = min($min[$j][$l][$i],\
    \ $min[$j][$l + 1][$i - 1]);\n                }\n            }\n        }\n  \
    \  }\n    $result = array();\n    for ($i = 0; $i < $k; $i++) {\n        $result[$i]\
    \ = PHP_INT_MAX;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $m; $j++) {\n            $result[$k - 1] = min($", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $min = array();\n    $min_sum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            dfs($grid, $i,\
    \ $j, $path, $sum, $k, $min, $min_sum);\n        }\n    }\n    return $min;\n}",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n  \
    \  $minPath[] = $grid[0][0];\n    $minPathVal = $grid[0][0];\n    $minPathValIndex\
    \ = 0;\n    $minPathValIndexes = array();\n    $minPathValIndexes[] = 0;\n   \
    \ $minPathValIndexes[] = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[]\
    \ = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[]\
    \ = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[]\
    \ = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[]\
    \ = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[]\
    \ = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[]\
    \ = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[]\
    \ = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[]\
    \ = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[]\
    \ = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[]\
    \ = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[]\
    \ = 0;\n    $minPathValIndexes[] = 0;\n    $minPathValIndexes[] = 0;\n    $",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $n, $m, $i, $j, $k, $visited, $path, $pathSum, $minPath,\
    \ $minPathSum);\n            $visited[$i][$j] = false;\n        }\n    }\n   \
    \ return $minPath;\n}", "  $n = count($grid);\n  $m = count($grid[0]);\n  $dp\
    \ = array_fill(0, $n, array_fill(0, $m, array()));\n  $dp[0][0][] = $grid[0][0];\n\
    \  for ($i = 0; $i < $n; $i++) {\n    for ($j = 0; $j < $m; $j++) {\n      if\
    \ ($i > 0) {\n        $dp[$i][$j] = minPathMerge($dp[$i][$j], $dp[$i - 1][$j],\
    \ $grid[$i][$j]);\n      }\n      if ($j > 0) {\n        $dp[$i][$j] = minPathMerge($dp[$i][$j],\
    \ $dp[$i][$j - 1], $grid[$i][$j]);\n      }\n    }\n  }\n  return $dp[$n - 1][$m\
    \ - 1][$k - 1];\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited\
    \ = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array_fill(0,\
    \ $k, PHP_INT_MAX);\n    $minPath[0] = $grid[0][0];\n    $minPathSum = PHP_INT_MAX;\n\
    \    $queue = new SplQueue();\n    $queue->enqueue([0, 0, 0]);\n    while (!$queue->isEmpty())\
    \ {\n        list($i, $j, $len) = $queue->dequeue();\n        if ($len == $k)\
    \ {\n            $sum = 0;\n            for ($l = 0; $l < $k; $l++) {\n      \
    \          $sum += $minPath[$l];\n            }\n            if ($sum < $minPathSum)\
    \ {\n                $minPathSum = $sum;\n                $minPath = array_slice($minPath,\
    \ 0, $k);\n            }\n            continue;\n        }\n        if ($visited[$i][$j])\
    \ {\n            continue;\n        }\n        $visited[$i][$j] = true;\n    \
    \    $minPath[$len] = $grid[$i][$j];\n        if ($i > 0) {\n            $queue->enqueue([$i\
    \ - 1, $j, $len + 1]);\n        }\n        if ($i < $n - 1) {\n            $queue->enqueue([$i\
    \ + 1, $j, $len + 1]);\n        }\n        if ($j > 0) {\n            $queue->enqueue([$i,\
    \ $j - 1, $len + 1]);\n        }\n        if ($j < $m - 1) {\n            $queue->enqueue([$i,\
    \ $j + 1, $len + 1]);\n        }\n    }\n    return $minPath;\n}\n\n/*\n>>> minPath(array(array(1,\
    \ 2, 3), array(4, 5, 6), array(7, 8, 9)), 3)\narray(1, 2, 1)\n>>> minPath(array(array(5,\
    \ 9,", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathValue =\
    \ PHP_INT_MAX;\n    $curPath = array();\n    $curPathValue = 0;\n    $curRow =\
    \ 0;\n    $curCol = 0;\n    $visited[$curRow][$curCol] = true;\n    $curPath[]\
    \ = $grid[$curRow][$curCol];\n    $curPathValue += $grid[$curRow][$curCol];\n\
    \    $curK = 1;\n    while (true) {\n        if ($curK == $k) {\n            if\
    \ ($curPathValue < $minPathValue) {\n                $minPathValue = $curPathValue;\n\
    \                $minPath = $curPath;\n            }\n            $curK--;\n \
    \           $curPathValue -= $curPath[$curK];\n            $visited[$curRow][$curCol]\
    \ = false;\n            $curPath = array_slice($curPath, 0, $curK);\n        \
    \    $curRow = $curPath[$curK - 1][0];\n            $curCol = $curPath[$curK -\
    \ 1][1];\n            continue;\n        }\n        if ($curRow > 0 && !$visited[$curRow\
    \ - 1][$curCol]) {\n            $curRow--;\n            $curPath[] = array($curRow,\
    \ $curCol);\n            $curPathValue += $grid[$curRow][$curCol];\n         \
    \   $visited[$curRow][$curCol] = true;\n            $curK++;\n            continue;\n\
    \        }\n        if ($curRow < $n - 1 && !$visited[$curRow + 1][$curCol]) {\n\
    \            $curRow++;\n            $curPath[] = array($curRow, $curCol);\n \
    \           $curPathValue += $grid[$curRow][$curCol];\n            $visited[$curRow][$curCol]\
    \ = true;\n            $curK++;\n            continue;\n       ", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPath[] = $grid[0][0];\n\
    \    $minPathSum = $grid[0][0];\n    $minPathSum = $minPathSum + $grid[0][1];\n\
    \    $minPath[] = $grid[0][1];\n    $minPathSum = $minPathSum + $grid[1][1];\n\
    \    $minPath[] = $grid[1][1];\n    $minPathSum = $minPathSum + $grid[1][0];\n\
    \    $minPath[] = $grid[1][0];\n    $minPathSum = $minPathSum + $grid[1][2];\n\
    \    $minPath[] = $grid[1][2];\n    $minPathSum = $minPathSum + $grid[0][2];\n\
    \    $minPath[] = $grid[0][2];\n    $minPathSum = $minPathSum + $grid[2][2];\n\
    \    $minPath[] = $grid[2][2];\n    $minPathSum = $minPathSum + $grid[2][1];\n\
    \    $minPath[] = $grid[2][1];\n    $minPathSum = $minPathSum + $grid[2][0];\n\
    \    $minPath[] = $grid[2][0];\n    $minPathSum = $minPathSum + $grid[0][0];\n\
    \    $minPath[] = $grid[0][0];\n    $minPathSum = $minPathSum + $grid[1][0];\n\
    \    $minPath[] = $grid[1][0];\n    $minPathSum = $minPathSum + $grid[2][0];\n\
    \    $minPath[] = $grid[2][0];\n    $minPathSum = $minPathSum + $grid[2][1];\n\
    \    $minPath[] = $grid[2][1];\n    $minPathSum = $minPathSum + $grid[2][2];\n\
    \    $minPath[] = $grid[2][2];\n    $minPathSum = $minPathSum + $grid[1][2];\n\
    \    $minPath[] = $", "    $n = count($grid);\n    $m = count($grid[0]);\n   \
    \ $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = [];\n            $pathSum = 0;\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $visited,\
    \ $path, $pathSum, $k, $minPath, $minPathSum);\n            $visited[$i][$j] =\
    \ false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = [];\n    $minPathValue = [];\n    $minPathLength =\
    \ PHP_INT_MAX;\n    $dfs = function($i, $j, $path, $pathValue, $pathLength) use\
    \ ($n, $m, $k, $grid, &$visited, &$minPath, &$minPathValue, &$minPathLength) {\n\
    \        if ($pathLength > $k) {\n            return;\n        }\n        if ($pathLength\
    \ == $k) {\n            if ($pathValue < $minPathValue) {\n                $minPath\
    \ = $path;\n                $minPathValue = $pathValue;\n                $minPathLength\
    \ = $pathLength;\n            }\n            return;\n        }\n        $visited[$i][$j]\
    \ = true;\n        $path[] = $grid[$i][$j];\n        $pathValue = $pathValue *\
    \ 10 + $grid[$i][$j];\n        $pathLength++;\n        if ($i > 0 && !$visited[$i\
    \ - 1][$j]) {\n            $dfs($i - 1, $j, $path, $pathValue, $pathLength);\n\
    \        }\n        if ($i < $n - 1 && !$visited[$i + 1][$j]) {\n            $dfs($i\
    \ + 1, $j, $path, $pathValue, $pathLength);\n        }\n        if ($j > 0 &&\
    \ !$visited[$i][$j - 1]) {\n            $dfs($i, $j - 1, $path, $pathValue, $pathLength);\n\
    \        }\n        if ($j < $m - 1 && !$visited[$i][$j + 1]) {\n            $dfs($i,\
    \ $j + 1, $path, $pathValue, $pathLength);\n        }\n        $visited[$i][$j]\
    \ = false;\n    };\n    for ($i = 0; $i < $n; $i++) {", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = [];\n            $pathSum = 0;\n            $visited = [];\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $minPath = dfs($grid, $i,\
    \ $j, $k, $path, $pathSum, $minPath, $minPathSum, $visited);\n        }\n    }\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $dp = array_fill(0, $n, array_fill(0, $m, array()));\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $dp[$i][$j][0]\
    \ = array($grid[$i][$j]);\n        }\n    }\n    for ($l = 1; $l < $k; $l++) {\n\
    \        for ($i = 0; $i < $n; $i++) {\n            for ($j = 0; $j < $m; $j++)\
    \ {\n                $min = array();\n                if ($i > 0) {\n        \
    \            $min = $dp[$i - 1][$j][$l - 1];\n                }\n            \
    \    if ($i < $n - 1 && (empty($min) || $min > $dp[$i + 1][$j][$l - 1])) {\n \
    \                   $min = $dp[$i + 1][$j][$l - 1];\n                }\n     \
    \           if ($j > 0 && (empty($min) || $min > $dp[$i][$j - 1][$l - 1])) {\n\
    \                    $min = $dp[$i][$j - 1][$l - 1];\n                }\n    \
    \            if ($j < $m - 1 && (empty($min) || $min > $dp[$i][$j + 1][$l - 1]))\
    \ {\n                    $min = $dp[$i][$j + 1][$l - 1];\n                }\n\
    \                $dp[$i][$j][$l] = array_merge($min, array($grid[$i][$j]));\n\
    \            }\n        }\n    }\n    $min = array();\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if (empty($min)\
    \ || $min > $dp[$i][$j][$k - 1]) {\n                $min = $dp[$i][", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0, $n, array_fill(0,\
    \ $m, array_fill(0, $k + 1, 0)));\n    $dp[0][0][0] = $grid[0][0];\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            for\
    \ ($l = 0; $l < $k; $l++) {\n                if ($i > 0) {\n                 \
    \   $dp[$i][$j][$l + 1] = max($dp[$i][$j][$l + 1], $dp[$i - 1][$j][$l] + $grid[$i][$j]);\n\
    \                }\n                if ($j > 0) {\n                    $dp[$i][$j][$l\
    \ + 1] = max($dp[$i][$j][$l + 1], $dp[$i][$j - 1][$l] + $grid[$i][$j]);\n    \
    \            }\n            }\n        }\n    }\n    $ans = array();\n    $i =\
    \ $n - 1;\n    $j = $m - 1;\n    $l = $k;\n    while ($l > 0) {\n        $ans[]\
    \ = $grid[$i][$j];\n        if ($i > 0 && $dp[$i][$j][$l] - $grid[$i][$j] == $dp[$i\
    \ - 1][$j][$l - 1]) {\n            $i--;\n        } else {\n            $j--;\n\
    \        }\n        $l--;\n    }\n    $ans[] = $grid[0][0];\n    return array_reverse($ans);\n\
    }\n\n/* Given a grid with N rows and N columns (N >= 2) and a positive integer\
    \ k, \neach cell of the grid contains a value. Every integer in the range [1,\
    \ N * N]\ninclusive appears exactly once on the cells of the grid.\nYou have to\
    \ find the maximum path of length k in the grid. You can start", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = [];\n            $pathSum = 0;\n            $visited = [];\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            $minPath = dfs($grid, $i,\
    \ $j, $k, $path, $pathSum, $minPath, $minPathSum, $visited);\n        }\n    }\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $min = $grid[0][0];\n    $max = $grid[$n - 1][$m - 1];\n    $minPath = array();\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $path = array();\n\
    \    $minPath = dfs($grid, $visited, $min, $max, $minPath, $path, $k, 0, 0);\n\
    \    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1,\
    \ $visited, $path, $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $path = [];\n    $min = [];\n    $min_path = [];\n    $min_sum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          $path = [];\n            $path[] = $grid[$i][$j];\n            $sum\
    \ = $grid[$i][$j];\n            $min = find_min_path($grid, $i, $j, $n, $k - 1,\
    \ $sum, $path);\n            if ($min[0] < $min_sum) {\n                $min_sum\
    \ = $min[0];\n                $min_path = $min[1];\n            }\n        }\n\
    \    }\n    return $min_path;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array_fill(0,\
    \ $k, PHP_INT_MAX);\n    $minPath[0] = $grid[0][0];\n    $minPathFound = false;\n\
    \    $dfs = function($i, $j, $path, $pathLen) use ($n, $m, &$visited, &$minPath,\
    \ &$minPathFound, $grid) {\n        if ($pathLen == $k) {\n            $minPathFound\
    \ = true;\n            $minPath = $path;\n            return;\n        }\n   \
    \     $visited[$i][$j] = true;\n        if ($i > 0 && !$visited[$i - 1][$j]) {\n\
    \            $path[$pathLen] = $grid[$i - 1][$j];\n            $dfs($i - 1, $j,\
    \ $path, $pathLen + 1);\n        }\n        if ($i < $n - 1 && !$visited[$i +\
    \ 1][$j]) {\n            $path[$pathLen] = $grid[$i + 1][$j];\n            $dfs($i\
    \ + 1, $j, $path, $pathLen + 1);\n        }\n        if ($j > 0 && !$visited[$i][$j\
    \ - 1]) {\n            $path[$pathLen] = $grid[$i][$j - 1];\n            $dfs($i,\
    \ $j - 1, $path, $pathLen + 1);\n        }\n        if ($j < $m - 1 && !$visited[$i][$j\
    \ + 1]) {\n            $path[$pathLen] = $grid[$i][$j + 1];\n            $dfs($i,\
    \ $j + 1, $path, $pathLen + 1);\n        }\n        $visited[$i][$j] = false;\n\
    \    };\n    $dfs(0, 0, $minPath, 1);\n    return $minPath;\n}\n", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = array();\n    $minPathValue = array();\n\
    \    $minPathValue[0] = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    for ($j = 0; $j < $m; $j++) {\n            $path = array();\n           \
    \ $pathValue = array();\n            $pathValue[0] = 0;\n            $path[0]\
    \ = array($i, $j);\n            $visited = array();\n            for ($x = 0;\
    \ $x < $n; $x++) {\n                $visited[$x] = array();\n                for\
    \ ($y = 0; $y < $m; $y++) {\n                    $visited[$x][$y] = false;\n \
    \               }\n            }\n            $visited[$i][$j] = true;\n     \
    \       $pathValue[0] += $grid[$i][$j];\n            $pathLength = 1;\n      \
    \      while ($pathLength <= $k) {\n                $minValue = PHP_INT_MAX;\n\
    \                $minIndex = -1;\n                for ($x = 0; $x < $pathLength;\
    \ $x++) {\n                    $i = $path[$x][0];\n                    $j = $path[$x][1];\n\
    \                    if ($i > 0 && !$visited[$i - 1][$j]) {\n                \
    \        $value = $pathValue[$x] + $grid[$i - 1][$j];\n                      \
    \  if ($value < $minValue) {\n                            $minValue = $value;\n\
    \                            $minIndex = $x;\n                        }\n    \
    \                }\n                    if ($i < $n - 1 && !$visited[$i + 1][$j])\
    \ {\n                        $value = $pathValue[$x] + $grid[$i + 1][$j];\n  \
    \                      if ($value < $minValue) {\n                           \
    \ $minValue = $value;\n                            $minIndex = $x;\n         \
    \               }\n                    }\n                    if ($j > 0 && !$visited[$i][$j",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $min = array();\n    $min_sum\
    \ = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $m; $j++) {\n            $path = array();\n            $sum = 0;\n         \
    \   $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n           \
    \ $visited = array();\n            $visited[$i][$j] = true;\n            $min_path\
    \ = dfs($grid, $i, $j, $path, $sum, $visited, $k, $n, $m);\n            if ($min_path[1]\
    \ < $min_sum) {\n                $min = $min_path[0];\n                $min_sum\
    \ = $min_path[1];\n            }\n        }\n    }\n    return $min;\n}", "  \
    \  $n = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0, $n,\
    \ array_fill(0, $m, array()));\n    $dp[0][0][] = $grid[0][0];\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            if ($i\
    \ > 0) {\n                $dp[$i][$j] = array_merge($dp[$i][$j], $dp[$i - 1][$j]);\n\
    \            }\n            if ($j > 0) {\n                $dp[$i][$j] = array_merge($dp[$i][$j],\
    \ $dp[$i][$j - 1]);\n            }\n            $dp[$i][$j][] = $grid[$i][$j];\n\
    \            usort($dp[$i][$j], function($a, $b) {\n                return $a\
    \ - $b;\n            });\n            $dp[$i][$j] = array_slice($dp[$i][$j], 0,\
    \ $k);\n        }\n    }\n    return $dp[$n - 1][$m - 1];\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, array()));\n\
    \    $dp[0][0][] = $grid[0][0];\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            if ($i > 0) {\n                $dp[$i][$j]\
    \ = minPathHelper($dp[$i][$j], $dp[$i - 1][$j], $grid[$i][$j]);\n            }\n\
    \            if ($j > 0) {\n                $dp[$i][$j] = minPathHelper($dp[$i][$j],\
    \ $dp[$i][$j - 1], $grid[$i][$j]);\n            }\n        }\n    }\n    return\
    \ $dp[$n - 1][$m - 1][$k - 1];\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array_fill(0,\
    \ $k, PHP_INT_MAX);\n    $minPath[0] = $grid[0][0];\n    $minPath[$k - 1] = $grid[$n\
    \ - 1][$m - 1];\n    $visited[0][0] = true;\n    $visited[$n - 1][$m - 1] = true;\n\
    \    $q = new SplQueue();\n    $q->enqueue([0, 0, 0]);\n    $q->enqueue([$n -\
    \ 1, $m - 1, $k - 1]);\n    while (!$q->isEmpty()) {\n        $cur = $q->dequeue();\n\
    \        $i = $cur[0];\n        $j = $cur[1];\n        $idx = $cur[2];\n     \
    \   $neighbors = [\n            [$i - 1, $j],\n            [$i + 1, $j],\n   \
    \         [$i, $j - 1],\n            [$i, $j + 1]\n        ];\n        foreach\
    \ ($neighbors as $neighbor) {\n            $x = $neighbor[0];\n            $y\
    \ = $neighbor[1];\n            if ($x >= 0 && $x < $n && $y >= 0 && $y < $m &&\
    \ !$visited[$x][$y]) {\n                $visited[$x][$y] = true;\n           \
    \     $q->enqueue([$x, $y, $idx + 1]);\n                if ($grid[$x][$y] < $minPath[$idx\
    \ + 1]) {\n                    $minPath[$idx + 1] = $grid[$x][$y];\n         \
    \       }\n            }\n        }\n    }\n    return $minPath;\n}", "    $n\
    \ = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0, $n,\
    \ array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            dfs($grid,\
    \ $i, $j, $k, $visited, $path, $pathSum, $minPath, $minPathSum);\n        }\n\
    \    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = [];\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $visited[$i][$j]\
    \ = true;\n            $path = [];\n            $pathSum = 0;\n            $path[]\
    \ = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n            if ($i\
    \ > 0 && !$visited[$i - 1][$j]) {\n                $path[] = $grid[$i - 1][$j];\n\
    \                $pathSum += $grid[$i - 1][$j];\n            }\n            if\
    \ ($i < $n - 1 && !$visited[$i + 1][$j]) {\n                $path[] = $grid[$i\
    \ + 1][$j];\n                $pathSum += $grid[$i + 1][$j];\n            }\n \
    \           if ($j > 0 && !$visited[$i][$j - 1]) {\n                $path[] =\
    \ $grid[$i][$j - 1];\n                $pathSum += $grid[$i][$j - 1];\n       \
    \     }\n            if ($j < $m - 1 && !$visited[$i][$j + 1]) {\n           \
    \     $path[] = $grid[$i][$j + 1];\n                $pathSum += $grid[$i][$j +\
    \ 1];\n            }\n            if (count($path) == $k && $pathSum < $minPathSum)\
    \ {\n                $minPath = $path;\n                $minPathSum = $pathSum;\n\
    \            }\n            $visited[$i][$j] = false;\n        }\n    }\n    return\
    \ $minPath;\n}\n$grid = [\n    [1, 2, 3],\n    [4, 5,", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $min = [];\n    $visited = [];\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        $visited[$i] = [];\n        for ($j = 0; $j < $m;\
    \ $j++) {\n            $visited[$i][$j] = false;\n        }\n    }\n    $min =\
    \ [];\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++)\
    \ {\n            $min = minPathHelper($grid, $i, $j, $k, $visited, $min);\n  \
    \      }\n    }\n    return $min;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $visited,\
    \ $path, $pathSum, $minPath, $minPathSum, $k);\n            $visited[$i][$j] =\
    \ false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = array_fill(0,\
    \ $k, 0);\n    $minPath[0] = $grid[0][0];\n    $minPath[$k - 1] = $grid[$n - 1][$n\
    \ - 1];\n    $minPathSum = $grid[0][0] + $grid[$n - 1][$n - 1];\n    $visited[0][0]\
    \ = true;\n    $visited[$n - 1][$n - 1] = true;\n    $q = new SplQueue();\n  \
    \  $q->enqueue([0, 0, $grid[0][0], 1]);\n    $q->enqueue([$n - 1, $n - 1, $grid[$n\
    \ - 1][$n - 1], $k - 1]);\n    while (!$q->isEmpty()) {\n        list($i, $j,\
    \ $sum, $len) = $q->dequeue();\n        if ($len == $k) {\n            if ($sum\
    \ < $minPathSum) {\n                $minPathSum = $sum;\n                $minPath[0]\
    \ = $grid[0][0];\n                $minPath[$k - 1] = $grid[$n - 1][$n - 1];\n\
    \            }\n            continue;\n        }\n        if ($sum > $minPathSum)\
    \ {\n            continue;\n        }\n        $visited[$i][$j] = true;\n    \
    \    if ($i > 0 && !$visited[$i - 1][$j]) {\n            $q->enqueue([$i - 1,\
    \ $j, $sum + $grid[$i - 1][$j], $len + 1]);\n        }\n        if ($i < $n -\
    \ 1 && !$visited[$i + 1][$j]) {\n            $q->enqueue([$i + 1, $j, $sum + $grid[$i\
    \ + 1][$j], $len + 1]);\n        }\n        if ($j > 0 && !$visited[$i][$j - 1",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0, $n,\
    \ array_fill(0, $m, array_fill(0, $k + 1, array())));\n    $dp[0][0][0] = array($grid[0][0]);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          for ($l = 0; $l <= $k; $l++) {\n                if ($i > 0) {\n   \
    \                 if ($l > 0) {\n                        $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i - 1][$j][$l - 1], $grid[$i][$j]);\n                    }\n          \
    \          $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l], $dp[$i - 1][$j][$l],\
    \ $grid[$i][$j]);\n                }\n                if ($j > 0) {\n        \
    \            if ($l > 0) {\n                        $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i][$j - 1][$l - 1], $grid[$i][$j]);\n                    }\n          \
    \          $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l], $dp[$i][$j - 1][$l],\
    \ $grid[$i][$j]);\n                }\n            }\n        }\n    }\n    return\
    \ $dp[$n - 1][$m - 1][$k];\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1,\
    \ $visited, $path, $pathSum, $minPath, $minPathSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $minPath = [];\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = [];\n            $pathSum = 0;\n            $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n            $visited[$i][$j] = true;\n     \
    \       $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n   \
    \         dfs($grid, $i, $j, $k - 1, $path, $pathSum, $visited, $minPath, $minPathSum);\n\
    \        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n    $m =\
    \ count($grid[0]);\n    $dp = array_fill(0, $n, array_fill(0, $m, array()));\n\
    \    $dp[0][0][$grid[0][0]] = 1;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            if ($i > 0) {\n                $dp[$i][$j]\
    \ = merge($dp[$i][$j], $dp[$i - 1][$j]);\n            }\n            if ($j >\
    \ 0) {\n                $dp[$i][$j] = merge($dp[$i][$j], $dp[$i][$j - 1]);\n \
    \           }\n            $dp[$i][$j][$grid[$i][$j]] = 1;\n        }\n    }\n\
    \    $ans = array();\n    for ($i = 1; $i <= $n * $m; $i++) {\n        if (isset($dp[$n\
    \ - 1][$m - 1][$i])) {\n            $ans[] = $i;\n        }\n    }\n    return\
    \ array_slice($ans, 0, $k);\n}", "    $n = count($grid);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $n, false));\n    $queue = new SplQueue();\n    $queue->enqueue([0,\
    \ 0, $grid[0][0]]);\n    $visited[0][0] = true;\n    $minPath = [];\n    $minSum\
    \ = PHP_INT_MAX;\n    while (!$queue->isEmpty()) {\n        list($row, $col, $sum)\
    \ = $queue->dequeue();\n        if ($sum > $minSum) {\n            continue;\n\
    \        }\n        if ($row == $n - 1 && $col == $n - 1) {\n            if ($sum\
    \ < $minSum) {\n                $minSum = $sum;\n                $minPath = [$grid[$row][$col]];\n\
    \            } elseif ($sum == $minSum) {\n                $minPath[] = $grid[$row][$col];\n\
    \            }\n            continue;\n        }\n        if ($row > 0 && !$visited[$row\
    \ - 1][$col]) {\n            $queue->enqueue([$row - 1, $col, $sum + $grid[$row\
    \ - 1][$col]]);\n            $visited[$row - 1][$col] = true;\n        }\n   \
    \     if ($row < $n - 1 && !$visited[$row + 1][$col]) {\n            $queue->enqueue([$row\
    \ + 1, $col, $sum + $grid[$row + 1][$col]]);\n            $visited[$row + 1][$col]\
    \ = true;\n        }\n        if ($col > 0 && !$visited[$row][$col - 1]) {\n \
    \           $queue->enqueue([$row, $col - 1, $sum + $grid[$row][$col - 1]]);\n\
    \            $visited[$row][$col - 1] = true;\n        }\n        if ($col < $n\
    \ - 1 && !$visited[$row][$col + 1]) {\n            $queue->enqueue([$row, $col\
    \ + 1, $sum + $grid[$row][", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathLen = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $pathSum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $k - 1, $path, $pathSum, $visited, $minPath, $minPathSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $visited = array_fill(0, $n, array_fill(0, $n,\
    \ false));\n    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $path\
    \ = array();\n            $pathSum = 0;\n            $visited[$i][$j] = true;\n\
    \            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $visited, $path, $pathSum, $minPath, $minPathSum,\
    \ $k);\n            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            $visited[$i][$j]\
    \ = true;\n            $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $visited, $path, $sum, $minPath, $minSum, $k);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array_fill(0, $k, PHP_INT_MAX);\n\
    \    $minPath[0] = $grid[0][0];\n    $minPath[$k - 1] = $grid[$n - 1][$m - 1];\n\
    \    $visited[0][0] = true;\n    $visited[$n - 1][$m - 1] = true;\n    $queue\
    \ = [[0, 0, 0]];\n    while (!empty($queue)) {\n        list($i, $j, $l) = array_shift($queue);\n\
    \        if ($l == $k - 1) {\n            break;\n        }\n        if ($i >\
    \ 0 && !$visited[$i - 1][$j]) {\n            $visited[$i - 1][$j] = true;\n  \
    \          $queue[] = [$i - 1, $j, $l + 1];\n            if ($grid[$i - 1][$j]\
    \ < $minPath[$l + 1]) {\n                $minPath[$l + 1] = $grid[$i - 1][$j];\n\
    \            }\n        }\n        if ($i < $n - 1 && !$visited[$i + 1][$j]) {\n\
    \            $visited[$i + 1][$j] = true;\n            $queue[] = [$i + 1, $j,\
    \ $l + 1];\n            if ($grid[$i + 1][$j] < $minPath[$l + 1]) {\n        \
    \        $minPath[$l + 1] = $grid[$i + 1][$j];\n            }\n        }\n   \
    \     if ($j > 0 && !$visited[$i][$j - 1]) {\n            $visited[$i][$j - 1]\
    \ = true;\n            $queue[] = [$i, $j - 1, $l + 1];\n            if ($grid[$i][$j\
    \ - 1] < $minPath[$l + 1])", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $path = array();\n\
    \    $minPath = array();\n    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path = array();\n\
    \            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            dfs($grid, $i, $j, $visited, $path, $minPath, $minPathSum, $k);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $queue = new SplQueue();\n    $queue->enqueue([0,\
    \ 0, [$grid[0][0]]]);\n    $visited[0][0] = true;\n    $minPath = [];\n    while\
    \ (!$queue->isEmpty()) {\n        list($i, $j, $path) = $queue->dequeue();\n \
    \       if (count($path) == $k) {\n            if (empty($minPath) || $path <\
    \ $minPath) {\n                $minPath = $path;\n            }\n            continue;\n\
    \        }\n        if ($i > 0 && !$visited[$i - 1][$j]) {\n            $visited[$i\
    \ - 1][$j] = true;\n            $queue->enqueue([$i - 1, $j, array_merge($path,\
    \ [$grid[$i - 1][$j]])]);\n        }\n        if ($i < $n - 1 && !$visited[$i\
    \ + 1][$j]) {\n            $visited[$i + 1][$j] = true;\n            $queue->enqueue([$i\
    \ + 1, $j, array_merge($path, [$grid[$i + 1][$j]])]);\n        }\n        if ($j\
    \ > 0 && !$visited[$i][$j - 1]) {\n            $visited[$i][$j - 1] = true;\n\
    \            $queue->enqueue([$i, $j - 1, array_merge($path, [$grid[$i][$j - 1]])]);\n\
    \        }\n        if ($j < $m - 1 && !$visited[$i][$j + 1]) {\n            $visited[$i][$j\
    \ + 1] = true;\n            $queue->enqueue([$i, $j + 1, array_merge($path, [$grid[$i][$j\
    \ + 1]])]);\n        }\n    }\n    return $minPath;\n}\n\n", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = [];\n    $minPathValue = [];\n    $minPathLength =\
    \ PHP_INT_MAX;\n    $minPathValue[0] = $grid[0][0];\n    $visited[0][0] = true;\n\
    \    $minPath[0] = [0, 0];\n    $path = [0, 0];\n    $pathValue = [$grid[0][0]];\n\
    \    $pathLength = 1;\n    while (true) {\n        if ($pathLength > $minPathLength)\
    \ {\n            break;\n        }\n        if ($pathLength == $k) {\n       \
    \     if ($pathValue < $minPathValue) {\n                $minPath = $path;\n \
    \               $minPathValue = $pathValue;\n                $minPathLength =\
    \ $pathLength;\n            }\n            $pathLength--;\n            $pathValue\
    \ = array_slice($pathValue, 0, $pathLength);\n            $path = array_slice($path,\
    \ 0, $pathLength);\n            $visited[$path[$pathLength - 1][0]][$path[$pathLength\
    \ - 1][1]] = false;\n            continue;\n        }\n        $x = $path[$pathLength\
    \ - 1][0];\n        $y = $path[$pathLength - 1][1];\n        $visited[$x][$y]\
    \ = true;\n        if ($x > 0 && !$visited[$x - 1][$y]) {\n            $path[$pathLength]\
    \ = [$x - 1, $y];\n            $pathValue[$pathLength] = $grid[$x - 1][$y];\n\
    \            $pathLength++;\n            continue;\n        }\n        if ($x\
    \ < $n - 1 && !$visited[$x + 1][$y]) {\n            $path[$pathLength] = [$x +\
    \ 1, $y];\n            $pathValue[$pathLength] = $grid[$x + 1][$y];\n        \
    \    $pathLength", "    $n = count($grid);\n    $m = count($grid[0]);\n    $min\
    \ = array();\n    $min[] = $grid[0][0];\n    $min_sum = $grid[0][0];\n    $min_sum_idx\
    \ = 0;\n    $min_sum_jdx = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            if ($grid[$i][$j] < $min[0]) {\n    \
    \            $min = array();\n                $min[] = $grid[$i][$j];\n      \
    \          $min_sum = $grid[$i][$j];\n                $min_sum_idx = $i;\n   \
    \             $min_sum_jdx = $j;\n            } elseif ($grid[$i][$j] == $min[0])\
    \ {\n                $min[] = $grid[$i][$j];\n                $min_sum += $grid[$i][$j];\n\
    \                if ($min_sum > $grid[$i][$j]) {\n                    $min_sum\
    \ = $grid[$i][$j];\n                    $min_sum_idx = $i;\n                 \
    \   $min_sum_jdx = $j;\n                }\n            }\n        }\n    }\n \
    \   $min_path = array();\n    $min_path[] = $min[0];\n    $min_path_sum = $min[0];\n\
    \    $min_path_idx = 0;\n    $min_path_jdx = 0;\n    $min_path_len = 1;\n    $min_path_len_idx\
    \ = 0;\n    $min_path_len_jdx = 0;\n    $visited = array();\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $visited[] = array();\n        for ($j = 0; $j < $m;\
    \ $j++) {\n            $visited[$i][] = false;\n        }\n    }\n    $visited[$min_sum_idx][$min_sum_j",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minPathValue =\
    \ PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m;\
    \ $j++) {\n            $path = array();\n            $pathValue = 0;\n       \
    \     $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n       \
    \     $pathValue += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1, $visited,\
    \ $path, $pathValue, $minPath, $minPathValue);\n            $visited[$i][$j] =\
    \ false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $m = count($grid[0]);\n    $visited = array_fill(0, $n, array_fill(0, $m,\
    \ false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n    for ($i =\
    \ 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n            $path\
    \ = array();\n            $sum = 0;\n            $visited[$i][$j] = true;\n  \
    \          $path[] = $grid[$i][$j];\n            $sum += $grid[$i][$j];\n    \
    \        dfs($grid, $i, $j, $k - 1, $visited, $path, $sum, $minPath, $minSum);\n\
    \            $visited[$i][$j] = false;\n        }\n    }\n    return $minPath;\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array_fill(0, $k, PHP_INT_MAX);\n\
    \    $minPath[0] = $grid[0][0];\n    $minPaths = array();\n    $minPaths[] = $minPath;\n\
    \    $visited[0][0] = true;\n    $queue = array();\n    $queue[] = array(0, 0);\n\
    \    while (!empty($queue)) {\n        $cur = array_shift($queue);\n        $x\
    \ = $cur[0];\n        $y = $cur[1];\n        $visited[$x][$y] = true;\n      \
    \  $neighbors = array();\n        if ($x > 0) {\n            $neighbors[] = array($x\
    \ - 1, $y);\n        }\n        if ($x < $n - 1) {\n            $neighbors[] =\
    \ array($x + 1, $y);\n        }\n        if ($y > 0) {\n            $neighbors[]\
    \ = array($x, $y - 1);\n        }\n        if ($y < $m - 1) {\n            $neighbors[]\
    \ = array($x, $y + 1);\n        }\n        foreach ($neighbors as $neighbor) {\n\
    \            $nx = $neighbor[0];\n            $ny = $neighbor[1];\n          \
    \  if (!$visited[$nx][$ny]) {\n                $queue[] = $neighbor;\n       \
    \         $visited[$nx][$ny] = true;\n                $newPaths = array();\n \
    \               foreach ($minPaths as $minPath) {\n                    $newPath\
    \ = $minPath;\n                    $newPath[count($newPath) - 1] = $grid[$nx][$ny];\n\
    \                    if (count($newPath) < $k) {\n                        $newPath[]\
    \ = PHP_INT_MAX;\n                    }\n                    $newPaths[] = $newPath;\n\
    \                }\n                $min", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $visited[$i][$j] = true;\n            $path[] = $grid[$i][$j];\n\
    \            $pathSum += $grid[$i][$j];\n            dfs($grid, $i, $j, $k - 1,\
    \ $path, $pathSum, $visited, $minPath, $minPathSum);\n            $visited[$i][$j]\
    \ = false;\n        }\n    }\n    return $minPath;\n}", "    $n = count($grid);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $n, false));\n    $minPath = array();\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum\
    \ = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPathSum = PHP_INT_MAX;\n", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $visited = array_fill(0, $n, array_fill(0, $m, 0));\n    $minPath = array_fill(0,\
    \ $k, INF);\n    $minPath[0] = $grid[0][0];\n    $minPath[1] = $grid[0][1];\n\
    \    $minPath[2] = $grid[1][0];\n    $minPath[3] = $grid[1][1];\n    $visited[0][0]\
    \ = 1;\n    $visited[0][1] = 1;\n    $visited[1][0] = 1;\n    $visited[1][1] =\
    \ 1;\n    $minPath = dfs($grid, $visited, $minPath, $k, 0, 0, 0);\n    return\
    \ $minPath;\n}", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath\
    \ = array();\n    $minPathSum = PHP_INT_MAX;\n    $minPathSum = PHP_INT_MAX;\n\
    \    $minPath = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum = 0;\n\
    \            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $visited = array();\n            for ($x = 0; $x < $n; $x++) {\n\
    \                $visited[$x] = array();\n                for ($y = 0; $y < $m;\
    \ $y++) {\n                    $visited[$x][$y] = false;\n                }\n\
    \            }\n            $visited[$i][$j] = true;\n            $q = array();\n\
    \            $q[] = array($i, $j);\n            $len = 1;\n            while (!empty($q))\
    \ {\n                $size = count($q);\n                for ($z = 0; $z < $size;\
    \ $z++) {\n                    $cur = array_shift($q);\n                    $x\
    \ = $cur[0];\n                    $y = $cur[1];\n                    if ($len\
    \ == $k) {\n                        if ($pathSum < $minPathSum) {\n          \
    \                  $minPathSum = $pathSum;\n                            $minPath\
    \ = $path;\n                        } else if ($pathSum == $minPathSum) {\n  \
    \                          $minPath = min($minPath, $path);\n                \
    \        }\n                        break;\n                    }\n          \
    \          if ($x > 0 && !$visited[$x - 1][$y]) {\n                        $visited[$x\
    \ - 1][$y] = true;\n                        $q[] = array($x - 1, $y);\n      \
    \                  $path[] = $grid[$x - 1][$y];\n                        $pathSum\
    \ += $grid[$x - 1][$y];\n                    }\n                    if ($x < $",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0, $n,\
    \ array_fill(0, $m, array()));\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $dp[$i][$j][0] = array($grid[$i][$j]);\n\
    \        }\n    }\n    for ($l = 1; $l < $k; $l++) {\n        for ($i = 0; $i\
    \ < $n; $i++) {\n            for ($j = 0; $j < $m; $j++) {\n                $min\
    \ = array();\n                if ($i > 0) {\n                    $min = $dp[$i\
    \ - 1][$j][$l - 1];\n                }\n                if ($i < $n - 1 && ($min\
    \ == array() || $min > $dp[$i + 1][$j][$l - 1])) {\n                    $min =\
    \ $dp[$i + 1][$j][$l - 1];\n                }\n                if ($j > 0 && ($min\
    \ == array() || $min > $dp[$i][$j - 1][$l - 1])) {\n                    $min =\
    \ $dp[$i][$j - 1][$l - 1];\n                }\n                if ($j < $m - 1\
    \ && ($min == array() || $min > $dp[$i][$j + 1][$l - 1])) {\n                \
    \    $min = $dp[$i][$j + 1][$l - 1];\n                }\n                $dp[$i][$j][$l]\
    \ = array_merge($min, array($grid[$i][$j]));\n            }\n        }\n    }\n\
    \    $min = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0;\
    \ $j < $m; $j++) {\n            if ($min == array() || $min > $dp[$i][$j][$k -\
    \ 1]) {\n                $min = $dp[$i][", "    $n = count($grid);\n    $m = count($grid[0]);\n\
    \    $dp = array();\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $m; $j++) {\n            $dp[$i][$j] = array();\n            $dp[$i][$j][0]\
    \ = array($grid[$i][$j]);\n        }\n    }\n    for ($i = 1; $i < $k; $i++) {\n\
    \        for ($j = 0; $j < $n; $j++) {\n            for ($l = 0; $l < $m; $l++)\
    \ {\n                $dp[$j][$l][$i] = array();\n                if ($j > 0) {\n\
    \                    $dp[$j][$l][$i] = minPathHelper($dp[$j][$l][$i], $dp[$j -\
    \ 1][$l][$i - 1]);\n                }\n                if ($j < $n - 1) {\n  \
    \                  $dp[$j][$l][$i] = minPathHelper($dp[$j][$l][$i], $dp[$j + 1][$l][$i\
    \ - 1]);\n                }\n                if ($l > 0) {\n                 \
    \   $dp[$j][$l][$i] = minPathHelper($dp[$j][$l][$i], $dp[$j][$l - 1][$i - 1]);\n\
    \                }\n                if ($l < $m - 1) {\n                    $dp[$j][$l][$i]\
    \ = minPathHelper($dp[$j][$l][$i], $dp[$j][$l + 1][$i - 1]);\n               \
    \ }\n                $dp[$j][$l][$i][] = $grid[$j][$l];\n            }\n     \
    \   }\n    }\n    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    for ($j = 0; $j < $m; $j++) {\n            $result = minPathHelper($result,\
    \ $dp[$i][$j", "    $n = count($grid);\n    $m = count($grid[0]);\n    $dp = array_fill(0,\
    \ $n, array_fill(0, $m, array_fill(0, $k + 1, array())));\n    $dp[0][0][0] =\
    \ array($grid[0][0]);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0;\
    \ $j < $m; $j++) {\n            for ($l = 0; $l <= $k; $l++) {\n             \
    \   if ($l == 0) {\n                    $dp[$i][$j][$l] = array($grid[$i][$j]);\n\
    \                } else {\n                    $dp[$i][$j][$l] = array();\n  \
    \                  if ($i > 0) {\n                        $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i - 1][$j][$l - 1], $grid[$i][$j]);\n                    }\n          \
    \          if ($j > 0) {\n                        $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i][$j - 1][$l - 1], $grid[$i][$j]);\n                    }\n          \
    \          if ($i < $n - 1) {\n                        $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i + 1][$j][$l - 1], $grid[$i][$j]);\n                    }\n          \
    \          if ($j < $m - 1) {\n                        $dp[$i][$j][$l] = minPathHelper($dp[$i][$j][$l],\
    \ $dp[$i][$j + 1][$l - 1], $grid[$i][$j]);\n                    }\n          \
    \      }\n            }\n        }\n    }\n    return $dp[$n - 1][$m - 1][$k];\n\
    }", "    $n = count($grid);\n    $m = count($grid[0]);\n    $minPath = array();\n\
    \    $minPathSum = $n * $m * $k;\n    for ($i = 0; $i < $n; $i++) {\n        for\
    \ ($j = 0; $j < $m; $j++) {\n            $path = array();\n            $pathSum\
    \ = 0;\n            $path[] = $grid[$i][$j];\n            $pathSum += $grid[$i][$j];\n\
    \            $visited = array();\n            $visited[$i][$j] = true;\n     \
    \       $queue = array();\n            $queue[] = array($i, $j);\n           \
    \ while (!empty($queue)) {\n                $cur = array_shift($queue);\n    \
    \            $x = $cur[0];\n                $y = $cur[1];\n                if\
    \ (count($path) == $k) {\n                    if ($pathSum < $minPathSum) {\n\
    \                        $minPathSum = $pathSum;\n                        $minPath\
    \ = $path;\n                    }\n                    break;\n              \
    \  }\n                if ($x > 0 && !$visited[$x - 1][$y]) {\n               \
    \     $visited[$x - 1][$y] = true;\n                    $path[] = $grid[$x - 1][$y];\n\
    \                    $pathSum += $grid[$x - 1][$y];\n                    $queue[]\
    \ = array($x - 1, $y);\n                    array_pop($path);\n              \
    \      $pathSum -= $grid[$x - 1][$y];\n                }\n                if ($x\
    \ < $n - 1 && !$visited[$x + 1][$y]) {\n                    $visited[$x + 1][$y]\
    \ = true;\n                    $path[] = $grid[$x + 1][$y];\n                \
    \    $pathSum += $grid[$x + 1][$y];\n                    $queue[] = array($x +\
    \ 1, $y);\n                    array_pop($path);\n                    $pathSum\
    \ -= $grid[$x + 1][$y];\n                }\n                if ($y > 0 && !$visited[",
  "    $n = count($grid);\n    $m = count($grid[0]);\n    $visited = array_fill(0,\
    \ $n, array_fill(0, $m, false));\n    $minPath = array();\n    $minSum = PHP_INT_MAX;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $m; $j++) {\n  \
    \          $path = array();\n            $sum = 0;\n            dfs($grid, $i,\
    \ $j, $visited, $path, $sum, $minPath, $minSum, $k);\n        }\n    }\n    return\
    \ $minPath;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
