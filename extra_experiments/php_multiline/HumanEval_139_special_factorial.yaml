name: HumanEval_139_special_factorial
language: php
prompt: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
  \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
  288\nThe function will receive an integer as input and should return the special\n\
  factorial of this integer.*/\nfunction special_factorial($n) {\n"
tests: "function candidate(...$args) {\n    return special_factorial(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial\
    \ *= $i;\n  }\n  return $factorial;\n}\n", "    $factorial = 1;\n    for ($i =\
    \ 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n\
    }\n", "  $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n", "    $factorial = 1;\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n", " \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n", "  $factorial = 1;\n  for ($i = 1; $i <= $n;\
    \ $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n", "  $factorial\
    \ = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return\
    \ $factorial;\n}\n", "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $factorial *= $i;\n    }\n    return $factorial;\n}\n\n/* The function\
    \ will receive an integer as input and should return the special\nfactorial of\
    \ this integer.*/", "  $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result\
    \ *= $i;\n  }\n  return $result;\n}\necho special_factorial(4);", "  $factorial\
    \ = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return\
    \ $factorial;\n}\n", "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $factorial *= $i;\n    }\n    return $factorial;\n}\n", "  $factorial\
    \ = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return\
    \ $factorial;\n}\n", "  $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n   \
    \ $factorial *= $i;\n  }\n  return $factorial;\n}\necho special_factorial(4);",
  "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\necho special_factorial(4);", "  $factorial\
    \ = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return\
    \ $factorial;\n}\n", "  $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n   \
    \ $factorial *= $i;\n  }\n  return $factorial;\n}\n\n/* The function will receive\
    \ an integer as input and should return the special\nfactorial of this integer.*/",
  "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\n/* The function will receive an integer\
    \ as input and should return the special\nfactorial of this integer.*/", "  $factorial\
    \ = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return\
    \ $factorial;\n}\n", "    $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n\
    \        $factorial *= $i;\n    }\n    return $factorial;\n}\n\n/* The function\
    \ will receive an integer as input and should return the special\nfactorial of\
    \ this integer.*/", "  $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result\
    \ *= factorial($i);\n  }\n  return $result;\n}\n", "  $result = 1;\n  for ($i\
    \ = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return $result;\n\
    }", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n\
    \  }\n  return $factorial;\n}\n", "    $factorial = 1;\n    for ($i = 1; $i <=\
    \ $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n",
  "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n", "  $factorial = 1;\n  for ($i = $n;\
    \ $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n\n/* The\
    \ function will receive a string as input and should return the string\nreversed.\n\
    For example:\n>>> reverse_string('hello')\n'olleh'\n>>> reverse_string('world')\n\
    'dlrow'*/", "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n       \
    \ $factorial *= $i;\n    }\n    return $factorial;\n}\n", "  $result = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  return $result;\n}\n\n\
    echo special_factorial(4);", "    $factorial = 1;\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\necho special_factorial(4);",
  "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\n/* The function will receive an integer\
    \ as input and should return the special\nfactorial of this integer.*/", "  $result\
    \ = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n\
    \  return $result;\n}\n", "    $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n\
    \        $result *= $i;\n    }\n    return $result;\n}\necho special_factorial(4);",
  "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\n/* The function will receive an integer as input and\
    \ should return the special\nfactorial of this integer.*/", "  $factorial = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/", "    $factorial = 1;\n    for ($i = $n; $i > 0;\
    \ $i--) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\n/* The\
    \ function will receive an integer as input and should return the special\nfactorial\
    \ of this integer.*/", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n\
    \    $factorial *= $i;\n  }\n  return $factorial;\n}\n", "    $factorial = 1;\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n", "  $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n   \
    \ $factorial *= $i;\n  }\n  return $factorial;\n}\n\necho special_factorial(4);",
  "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n", "  $factorial = 1;\n  for ($i = 1;\
    \ $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n", " \
    \   $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n\
    \    }\n    return $result;\n}\n", "  $factorial = 1;\n  for ($i = 1; $i <= $n;\
    \ $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n", "  $result\
    \ = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/", "    $factorial = 1;\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\n/* The\
    \ function will receive an integer as input and should return the special\nfactorial\
    \ of this integer.*/", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n\
    \    $factorial *= $i;\n  }\n  return $factorial;\n}\n", "    $factorial = 1;\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n\necho special_factorial(4);", "  $result = 1;\n  for ($i =\
    \ $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return $result;\n\
    }\n", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *=\
    \ $i;\n  }\n  return $factorial;\n}\n", "    $factorial = 1;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n\
    }\necho special_factorial(4);", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n", "    $factorial =\
    \ 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n \
    \   return $factorial;\n}\n", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n\n/* The function will\
    \ receive an integer as input and should return the special\nfactorial of this\
    \ integer.*/", "    $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n     \
    \   $factorial *= $i;\n    }\n    return $factorial;\n}\n", "  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}", "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n   \
    \     $factorial *= $i;\n    }\n    return $factorial;\n}\necho special_factorial(4);",
  "  $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n", "  $result = 1;\n  for ($i = $n; $i > 0; $i--)\
    \ {\n    $result *= $i;\n  }\n  return $result;\n}\n\n/* The function will receive\
    \ an integer as input and should return the special\nfactorial of this integer.*/",
  "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n", "  $result = 1;\n  for ($i = 1; $i\
    \ <= $n; $i++) {\n    $result *= $i;\n  }\n  return $result;\n}\n\necho special_factorial(4);",
  "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\n/* The function will receive an integer as input and\
    \ should return the special\nfactorial of this integer.*/", "    $factorial =\
    \ 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n \
    \   return $factorial;\n}\n", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n", "  $factorial = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\necho special_factorial(4);", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n", "    $result = 1;\n\
    \    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\necho special_factorial(4);", "  $factorial = 1;\n  for ($i = 1;\
    \ $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n", " \
    \   $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\n/* The function will receive an integer as input\
    \ and should return the\nspecial factorial of this integer.*/", "    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\necho special_factorial(4);", "  $result = 1;\n \
    \ for ($i = 1; $i <= $n; $i++) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n", "    $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n  \
    \      $factorial *= $i;\n    }\n    return $factorial;\n}\n", "  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n", "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\n\necho special_factorial(4);", " \
    \ $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n\n/* The function will\
    \ receive an integer as input and should return the special\nfactorial of this\
    \ integer.*/", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial\
    \ *= $i;\n  }\n  return $factorial;\n}\n\n/* The function will receive an integer\
    \ as input and should return the special\nfactorial of this integer.*/", "   \
    \ $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n\
    \    }\n    return $factorial;\n}\n", "    $factorial = 1;\n    for ($i = $n;\
    \ $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n", "    $result = 1;\n\
    \    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\n\n/* The function will receive an integer as input and should return\
    \ the special\nfactorial of this integer.*/", "  $factorial = 1;\n  for ($i =\
    \ 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n",
  "  $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return\
    \ $result;\n}", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial\
    \ *= $i;\n  }\n  return $factorial;\n}\n", "  $factorial = 1;\n  for ($i = 1;\
    \ $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\necho\
    \ special_factorial(4);", "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++)\
    \ {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n\n/* The function\
    \ will receive an integer as input and should return the special\nfactorial of\
    \ this integer.*/", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n   \
    \ $factorial *= $i;\n  }\n  return $factorial;\n}\n\n/* The function will receive\
    \ an integer as input and should return the special\nfactorial of this integer.*/",
  "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n", "    $factorial = 1;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n\
    }\n", "    $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *=\
    \ $i;\n    }\n    return $result;\n}\n\n/* The function will receive an integer\
    \ as input and should return the special\nfactorial of this integer.*/", "  $result\
    \ = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\necho special_factorial(4);", "  $result = 1;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    $result *= $i;\n  }\n  return $result;\n}\n\necho special_factorial(4);",
  "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4);", "    $factorial = 1;\n\
    \    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\n", "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $factorial *= $i;\n    }\n    return $factorial;\n}\n", "  $factorial\
    \ = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return\
    \ $factorial;\n}\n\n/* The function will receive an integer as input and should\
    \ return the special\nfactorial of this integer.*/", "  $factorial = 1;\n  for\
    \ ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n", "  $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n", "    $factorial = 1;\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n", " \
    \   $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= $i;\n\
    \    }\n    return $result;\n}\n\necho special_factorial(4);", "  $result = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n", "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n \
    \       $factorial *= $i;\n    }\n    return $factorial;\n}\n", "  $factorial\
    \ = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return\
    \ $factorial;\n}\n", "    $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n\
    \        $factorial *= $i;\n    }\n    return $factorial;\n}\n\n/* The function\
    \ will receive an integer as input and should return the special\nfactorial of\
    \ this integer.*/", "    $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n   \
    \     $result *= factorial($i);\n    }\n    return $result;\n}\n", "  $factorial\
    \ = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return\
    \ $factorial;\n}\n", "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $factorial *= $i;\n    }\n    return $factorial;\n}\necho special_factorial(4);",
  "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n", "    $result = 1;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $result *= $i;\n    }\n    return $result;\n}\n\n\
    /* Write a function that takes a string and returns the number of vowels in the\n\
    string. The vowels are: a, e, i, o, u.\nFor example:\n>>> count_vowels(\"hello\"\
    )\n2\n>>> count_vowels(\"world\")\n1\n>>> count_vowels(\"\")\n0\n>>> count_vowels(\"\
    aaaa\")\n4\n>>> count_vowels(\"bbbb\")\n0\n>>> count_vowels(\"aeiou\")\n5\n>>>\
    \ count_vowels(\"aeiouaeiou\")\n10\n>>> count_vowels(\"aeiouaeiouaeiou\")\n15\n\
    >>> count_vowels(\"aeiouaeiouaeiouaeiou\")\n20\n>>> count_vowels(\"aeiouaeiouaeiouaeiouaeiou\"\
    )\n25\n>>> count_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiou\")\n30\n>>> count_vowels(\"\
    aeiouaeiouaeiouaeiouaeiouaeiouaeiou\")\n35\n>>> count_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"\
    )\n40\n>>> count_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\")\n45\n\
    >>> count_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\")\n50\n\
    >>> count_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\")\n\
    55\n>>> count_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"\
    )\n60", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *=\
    \ $i;\n  }\n  return $factorial;\n}\n", "    $factorial = 1;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n\
    }\necho special_factorial(4);", "  $factorial = 1;\n  for ($i = $n; $i > 0; $i--)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\necho special_factorial(4);",
  "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n", "    $factorial = 1;\n    for ($i = $n; $i > 0; $i--)\
    \ {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n", "  $factorial\
    \ = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return\
    \ $factorial;\n}\n", "    $factorial = 1;\n    for ($i = $n; $i > 0; $i--) {\n\
    \        $factorial *= $i;\n    }\n    return $factorial;\n}\n\n/* The Brazilian\
    \ factorial is defined as:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ...\
    \ * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n288\nThe function\
    \ will receive an integer as input and should return the special\nfactorial of\
    \ this integer.*/", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n   \
    \ $factorial *= $i;\n  }\n  return $factorial;\n}\n", "    $factorial = 1;\n \
    \   for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return\
    \ $factorial;\n}\necho special_factorial(4);", "    $result = 1;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $result *= $i;\n    }\n    for ($i = 1; $i <\
    \ $n; $i++) {\n        $result *= $i;\n    }\n    return $result;\n}\necho special_factorial(4);",
  "  $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\n/* The function will receive an integer as input and\
    \ should return the\nspecial factorial of this integer.*/", "  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n", "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n \
    \       $factorial *= $i;\n    }\n    return $factorial;\n}\n", "    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n", "    $factorial = 1;\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n", " \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\n/* The function will receive an integer\
    \ as input and should return the special\nfactorial of this integer.*/", "   \
    \ $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n\
    \    }\n    return $factorial;\n}\necho special_factorial(4);", "    $factorial\
    \ = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n\n/* The function will\
    \ receive an integer as input and should return the special\nfactorial of this\
    \ integer.*/", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial\
    \ *= $i;\n  }\n  return $factorial;\n}\n", "  $factorial = 1;\n  for ($i = 1;\
    \ $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n\necho\
    \ special_factorial(4);", "  $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n \
    \   $result *= factorial($i);\n  }\n  return $result;\n}\n", "    $factorial =\
    \ 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n  \
    \  return $factorial;\n}\n\n/* The function will receive an integer as input and\
    \ should return the special\nfactorial of this integer.*/", "    $factorial =\
    \ 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n \
    \   return $factorial;\n}\n", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n", "  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}", "    $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n       \
    \ $result *= factorial($i);\n    }\n    return $result;\n}\n", "    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n", "  $factorial = 1;\n  for ($i = $n; $i > 0; $i--)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\necho special_factorial(4);",
  "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n\necho special_factorial(4);", "  $factorial\
    \ = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return\
    \ $factorial;\n}\n", "    $result = 1;\n    for ($i = 1; $i <= $n; $i++) {\n \
    \       $result *= $i;\n    }\n    return $result;\n}\n\n/* The function will\
    \ receive an integer as input and should return the special\nfactorial of this\
    \ integer.*/", "  $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial\
    \ *= $i;\n  }\n  return $factorial;\n}\n\necho special_factorial(4);", "    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n", "  $factorial = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\necho special_factorial(4);", "  $factorial = 1;\n  for ($i = $n; $i > 0; $i--)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n\n/* The function will\
    \ receive an integer as input and should return the special\nfactorial of this\
    \ integer.*/", "    $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result\
    \ *= factorial($i);\n    }\n    return $result;\n}\n", "  $result = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return $result;\n\
    }\n", "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\n", "  $factorial = 1;\n  for ($i =\
    \ 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n",
  "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\necho special_factorial(4);", "  $result = 1;\n  for\
    \ ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n}\necho\
    \ special_factorial(4);", "  $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n\
    \    $factorial *= $i;\n  }\n  return $factorial;\n}\n\necho special_factorial(4);",
  "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n", "  $factorial = 1;\n  for ($i = $n; $i > 0; $i--)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\necho special_factorial(4);",
  "    if ($n == 0) {\n        return 1;\n    }\n    $factorial = 1;\n    for ($i\
    \ = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return $factorial\
    \ * special_factorial($n - 1);\n}\necho special_factorial(4);", "  $factorial\
    \ = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return\
    \ $factorial;\n}\n", "  $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result\
    \ *= factorial($i);\n  }\n  return $result;\n}\n", "    $factorial = 1;\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/", "  $factorial = 1;\n  for ($i = $n; $i > 0; $i--)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n", "    $factorial =\
    \ 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n \
    \   return $factorial;\n}\n", "    $factorial = 1;\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n", " \
    \ $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n", "  $factorial = 1;\n  for ($i = $n; $i > 0; $i--)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n\n/*\nThe function will\
    \ receive an integer as input and should return the special\nfactorial of this\
    \ integer.\n*/", "  $result = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result\
    \ *= $i;\n  }\n  return $result;\n}", "    $factorial = 1;\n    for ($i = $n;\
    \ $i > 0; $i--) {\n        $factorial *= $i;\n    }\n    return $factorial;\n\
    }\n\necho special_factorial(4);", "    $result = 1;\n    for ($i = $n; $i > 0;\
    \ $i--) {\n        $result *= $i;\n    }\n    return $result;\n}\necho special_factorial(4);",
  "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n\
    \  return $factorial;\n}\n\n/* The function will receive an integer as input and\
    \ should return the special\nfactorial of this integer.*/", "  $factorial = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n", "    $result = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *=\
    \ factorial($i);\n    }\n    return $result;\n}", "    $factorial = 1;\n    for\
    \ ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/", "    $result = 1;\n    for ($i = $n; $i > 0; $i--)\
    \ {\n        $result *= $i;\n    }\n    return $result;\n}\n\n/* The function\
    \ will receive an integer as input and should return the special\nfactorial of\
    \ this integer.*/", "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        $factorial *= $i;\n    }\n    return $factorial;\n}\n", "    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n", "  $result = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/", "    $factorial = 1;\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\necho special_factorial(4);",
  "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n", "    $factorial = 1;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/", "    $factorial = 1;\n    for ($i = 1; $i <= $n;\
    \ $i++) {\n        $factorial *= $i;\n    }\n    return $factorial;\n}\n", " \
    \ $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n \
    \ }\n  return $factorial;\n}\n\necho special_factorial(4);", "    $factorial =\
    \ 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n  \
    \  return $factorial;\n}\n", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n", "    $factorial =\
    \ 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n  \
    \  return $factorial;\n}\n\n/* The function will receive an integer as input and\
    \ should return the special\nfactorial of this integer.*/", "  $factorial = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n", "  $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n\
    \  }\n  return $factorial;\n}\n", "  $result = 1;\n  for ($i = $n; $i > 0; $i--)\
    \ {\n    $result *= factorial($i);\n  }\n  return $result;\n}\n", "  $factorial\
    \ = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return\
    \ $factorial;\n}\n", "  $factorial = 1;\n  for ($i = $n; $i > 0; $i--) {\n   \
    \ $factorial *= $i;\n  }\n  return $factorial;\n}\necho special_factorial(4);",
  "  $result = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $result *= factorial($i);\n\
    \  }\n  return $result;\n}\n", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial * special_factorial($n -\
    \ 1);\n}\necho special_factorial(4);", "  $result = 1;\n  for ($i = 1; $i <= $n;\
    \ $i++) {\n    $result *= $i;\n  }\n  return $result;\n}\n\n/* The function will\
    \ receive an integer as input and should return the special\nfactorial of this\
    \ integer. */", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial\
    \ *= $i;\n  }\n  return $factorial;\n}\n", "    $result = 1;\n    for ($i = 1;\
    \ $i <= $n; $i++) {\n        $result *= $i;\n    }\n    return $result;\n}\n\n\
    /* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/", "  $factorial = 1;\n  for ($i = $n; $i > 0; $i--)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n\necho special_factorial(4);",
  "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\n", "  $factorial = 1;\n  for ($i = 1;\
    \ $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n", " \
    \   $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *=\
    \ $i;\n    }\n    return $factorial;\n}\necho special_factorial(4);", "  $result\
    \ = 1;\n  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/", "  $factorial = 1;\n  for ($i = 1; $i <= $n; $i++)\
    \ {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n", "  $factorial = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n", "    $factorial = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial\
    \ *= $i;\n    }\n    return $factorial;\n}\n", "  $factorial = 1;\n  for ($i =\
    \ $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n}\n\n\
    /* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
