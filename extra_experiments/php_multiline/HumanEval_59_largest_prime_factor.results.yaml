language: php
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\necho largest_prime_factor(13195);\necho \"\\n\";\necho largest_prime_factor(2048);\n\
    echo \"\\n\";\n\n/* Return the sum of all the primes below n.\n>>> sum_primes(10)\n\
    17\n>>> sum_primes(100)\n1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the sum of all the primes below n.\n>>> sum_of_primes(10)\n\
    17\n>>> sum_of_primes(100)\n1060\n>>> sum_of_primes(1000)\n76127\n>>> sum_of_primes(10000)\n\
    5736396\n*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all primes below n.\n>>> sum_primes_below(10)\n17\n>>> sum_primes_below(2000000)\n\
    142913828922*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the sum of the digits of n.\n>>> sum_digits(123)\n\
    6\n>>> sum_digits(0)\n0\n>>> sum_digits(123456789)\n45*/\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060\n>>> sum_of_primes(1000)\n76127\n>>> sum_of_primes(10000)\n5736396*/\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\necho largest_prime_factor(13195);\necho \"\\n\";\necho largest_prime_factor(2048);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060\n>>> sum_of_primes(1000)\n76127\n>>> sum_of_primes(10000)\n5736396*/\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060\n>>> sum_of_primes(1000)\n76127\n>>> sum_of_primes(10000)\n5736396\n*/\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060\n>>> sum_of_primes(1000)\n76127\n>>> sum_of_primes(10000)\n5736396*/\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the sum of all primes below n.\n>>> sum_primes(10)\n\
    17\n>>> sum_primes(100)\n1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i <= $n) {\n\t\t\
    if ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t}\n\t\
    return $i;\n}\n\n/* Return the sum of all the multiples of 3 or 5 below n.\n>>>\
    \ sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n233168*/\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\necho largest_prime_factor(13195);\necho \"\\n\";\necho largest_prime_factor(2048);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i <= $n) {\n\t\t\
    if ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t}\n\t\
    return $i;\n}\n\n/* Return the sum of all the multiples of 3 or 5 below n.\n>>>\
    \ sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n233168*/\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\necho largest_prime_factor(600851475143);\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857'
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the sum of all the primes below n.\n>>> sum_of_primes(10)\n\
    17\n>>> sum_of_primes(100)\n1060*/\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060\n>>> sum_of_primes(1000)\n76127\n>>> sum_of_primes(10000)\n5736396\n*/\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of all\
    \ the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ the digits of n.\n>>> sum_digits(2**1000)\n1366\n*/\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all primes below n.\n>>> sum_primes_below(10)\n17\n>>> sum_primes_below(2000000)\n\
    142913828922*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the sum of all the multiples of 3 or 5 below n.\n\
    >>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n233168*/\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of all\
    \ the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n1060*/\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060\n>>> sum_of_primes(1000)\n76127\n>>> sum_of_primes(10000)\n5736396\n*/\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all primes below n.\n>>> sum_primes_below(10)\n17\n>>> sum_primes_below(2000000)\n\
    142913828922*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the sum of all the primes below n.\n>>> sum_of_primes(10)\n\
    17\n>>> sum_of_primes(100)\n1060\n>>> sum_of_primes(1000)\n76127\n>>> sum_of_primes(10000)\n\
    5736396*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\necho largest_prime_factor(13195);\necho \"\\n\";\necho largest_prime_factor(2048);\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\necho largest_prime_factor(13195);\necho \"\\n\";\necho largest_prime_factor(2048);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060\n>>> sum_of_primes(1000)\n76127\n>>> sum_of_primes(10000)\n5736396*/\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_multiples_3_5(10)\n23\n>>> sum_multiples_3_5(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\ndo {\n    fscanf(STDIN,\
    \ \"%d\\n\", $n);\n    if ($n != 0) {\n        echo largest_prime_factor($n) .\
    \ \"\\n\";\n    }\n} while ($n != 0);\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the sum of all primes below n.\n>>> sum_primes(10)\n\
    17\n>>> sum_primes(100)\n1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of all\
    \ the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\necho largest_prime_factor(13195);\necho \"\\n\";\necho largest_prime_factor(2048);\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of all\
    \ the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n1060*/\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_multiples_3_5(10)\n23\n>>> sum_multiples_3_5(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060\n>>> sum_of_primes(1000)\n76127\n>>> sum_of_primes(10000)\n5736396*/\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all primes below n.\n>>> sum_primes_below(10)\n17\n>>> sum_primes_below(2000000)\n\
    142913828922*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\necho largest_prime_factor(13195);\necho \"\\n\";\necho largest_prime_factor(2048);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060\n>>> sum_of_primes(1000)\n76127\n>>> sum_of_primes(10000)\n5736396*/\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(1000)\n\
    76127*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 255
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the nth prime\
    \ number.\n>>> nth_prime(1)\n2\n>>> nth_prime(2)\n3\n>>> nth_prime(3)\n5\n>>>\
    \ nth_prime(4)\n7\n>>> nth_prime(5)\n11\n>>> nth_prime(6)\n13\n>>> nth_prime(7)\n\
    17\n>>> nth_prime(8)\n19\n>>> nth_prime(9)\n23\n>>> nth_prime(10)\n29\n>>> nth_prime(11)\n\
    31\n>>> nth_prime(12)\n37\n>>> nth_prime(13)\n41\n>>> nth_prime(14)\n43\n>>> nth_prime(15)\n\
    47\n>>> nth_prime(16)\n53\n>>> nth_prime(17)\n59\n>>> nth_prime(18)\n61\n>>> nth_prime(19)\n\
    67\n>>> nth_prime(20)\n71\n>>> nth_prime(21)\n73\n>>> nth_prime(22)\n79\n>>> nth_prime(23)\n\
    83\n>>> nth_prime(24)\n89\n>>> nth_prime(25)\n97\n>>> nth_prime(26)\n101\n>>>\
    \ nth_prime(27)\n103\n>>> nth_prime(28)\n107\n>>> nth_prime(29)\n109\n>>> nth_prime(30)\n\
    113\n>>> nth_prime(31)\n127\n>>> nth_prime(32)\n131\n>>> nth_prime(33)\n137\n\
    >>> nth_prime(34)\n139\n>>> nth_prime(35)\n149\n>>> nth_prime(36)\n151\n>>> nth_prime(37)\n\
    157\n>>> nth_prime(38)\n163\n>>> nth_prime(39)\n167\n>>> nth_prime(40\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 19 in /tmp/tmpw5ubjuz8.php on
    line 19

    '
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(2000000)\n\
    142913828922*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of all\
    \ the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(1000)\n\
    76127*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the sum of the first n primes.\n>>> sum_of_primes(10)\n\
    129\n>>> sum_of_primes(100)\n24133*/\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of all\
    \ the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the sum of all the primes below n.\n>>> sum_of_primes(10)\n\
    17\n>>> sum_of_primes(100)\n1060\n>>> sum_of_primes(1000)\n76127\n>>> sum_of_primes(10000)\n\
    5736396*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all primes below n.\n>>> sum_primes(10)\n17\n>>> sum_primes(100)\n1060*/\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060\n>>> sum_of_primes(1000)\n76127\n>>> sum_of_primes(10000)\n5736396*/\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\necho largest_prime_factor(13195);\necho \"\\n\";\necho largest_prime_factor(2048);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\ndo {\n    fscanf(STDIN,\
    \ \"%d\\n\", $n);\n    if ($n != 0) {\n        echo largest_prime_factor($n) .\
    \ \"\\n\";\n    }\n} while ($n != 0);\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the sum of all primes below n.\n>>> sum_primes(10)\n\
    17\n>>> sum_primes(100)\n1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\necho largest_prime_factor(13195);\necho \"\\n\";\necho largest_prime_factor(2048);\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of all\
    \ the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all primes below n.\n>>> sum_primes_below(10)\n17\n>>> sum_primes_below(2000000)\n\
    142913828922*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all prime numbers less than n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\necho largest_prime_factor(13195);\n\
    echo \"\\n\";\necho largest_prime_factor(2048);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\necho largest_prime_factor(600851475143);\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6857'
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060\n>>> sum_of_primes(1000)\n76127\n>>> sum_of_primes(10000)\n5736396*/\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the sum of all the primes below n.\n>>> sum_of_primes(10)\n\
    17\n>>> sum_of_primes(100)\n1060*/\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the sum of all the multiples of 3 or 5 below n.\n\
    >>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n233168*/\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of all\
    \ the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n1060*/\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060\n>>> sum_of_primes(1000)\n76127\n>>> sum_of_primes(10000)\n5736396*/\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_multiples_3_5(10)\n23\n>>> sum_multiples_3_5(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of all\
    \ the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ the digits of n.\n>>> sum_digits(123)\n6\n>>> sum_digits(0)\n0\n>>> sum_digits(12345678901234567890)\n\
    90*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ the digits of n.\n>>> sum_digits(123)\n6\n>>> sum_digits(12345678901234567890)\n\
    90*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the largest palindrome that is a product of two\
    \ 3-digit numbers.\n>>> largest_palindrome_product()\n906609*/\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\ndo {\n    fscanf(STDIN,\
    \ \"%d\\n\", $n);\n    if ($n != 0) {\n        echo largest_prime_factor($n) .\
    \ \"\\n\";\n    }\n} while ($n != 0);\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the sum of all the multiples of 3 or 5 below n.\n\
    >>> sum_multiples_3_5(10)\n23\n>>> sum_multiples_3_5(1000)\n233168*/\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of all\
    \ the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(2000000)\n\
    142913828922*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_multiples_3_5(10)\n23\n>>> sum_multiples_3_5(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ the digits of n.\n>>> sum_digits(123)\n6\n>>> sum_digits(0)\n0\n>>> sum_digits(12345678901234567890)\n\
    90*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ the digits of n.\n>>> sum_digits(2**1000)\n1366\n>>> sum_digits(12345)\n15*/\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060\n>>> sum_of_primes(1000)\n76127\n>>> sum_of_primes(10000)\n5736396*/\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of the\
    \ digits of n.\n>>> sum_digits(123)\n6\n>>> sum_digits(1)\n1\n>>> sum_digits(0)\n\
    0*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of all\
    \ the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ the digits of n.\n>>> sum_digits(123)\n6\n>>> sum_digits(0)\n0\n>>> sum_digits(1)\n\
    1\n>>> sum_digits(10)\n1\n>>> sum_digits(12345678901234567890)\n90*/\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of all\
    \ the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n1060*/\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of all\
    \ the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n1060*/\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060\n>>> sum_of_primes(1000)\n76127\n>>> sum_of_primes(10000)\n5736396*/\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(2000000)\n\
    142913828922*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of all\
    \ the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\necho largest_prime_factor(13195);\necho \"\\n\";\necho largest_prime_factor(2048);\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\necho largest_prime_factor(13195);\necho \"\\n\";\necho largest_prime_factor(2048);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(1000)\n\
    76127*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\ndo {\n    fscanf(STDIN,\
    \ \"%d\\n\", $n);\n    if ($n != 0) {\n        echo largest_prime_factor($n) .\
    \ \"\\n\";\n    }\n} while ($n != 0);\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of the\
    \ digits of n.\n>>> sum_digits(123)\n6\n>>> sum_digits(123456789)\n45*/\nfunction\
    \ candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the sum of all the multiples of 3 or 5 below n.\n\
    >>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n233168*/\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\ndo {\n    fscanf(STDIN,\
    \ \"%d\\n\", $n);\n    if ($n != 0) {\n        echo largest_prime_factor($n) .\
    \ \"\\n\";\n    }\n} while ($n != 0);\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the sum of all the primes below n.\n>>> sum_of_primes(10)\n\
    17\n>>> sum_of_primes(100)\n1060*/\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_multiples_3_5(10)\n23\n>>> sum_multiples_3_5(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of all\
    \ the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of all\
    \ the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n1060*/\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_multiples_3_5(10)\n23\n>>> sum_multiples_3_5(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_multiples_3_5(10)\n23\n>>> sum_multiples_3_5(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the largest\
    \ palindrome made from the product of two 3-digit numbers.\n>>> largest_palindrome_product()\n\
    906609*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the sum of the digits of n.\n>>> sum_digits(123)\n\
    6\n>>> sum_digits(123456789)\n45*/\nfunction candidate(...$args) {\n    return\
    \ largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n    if (candidate(15)\
    \ !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(27) !==\
    \ 3) { throw new Exception(\"Test failed!\"); }\n    if (candidate(63) !== 7)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(330) !== 11) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(13195) !== 29) {\
    \ throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(1000)\n\
    76127*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ the digits of n.\n>>> sum_digits(2**1000)\n1366\n*/\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\necho largest_prime_factor(13195);\n\
    echo \"\\n\";\necho largest_prime_factor(2048);\necho \"\\n\";\n\n/* Return the\
    \ sum of the first n primes.\n>>> sum_of_primes(3)\n10\n>>> sum_of_primes(5)\n\
    28*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ the digits of n.\n>>> sum_digits(123)\n6\n>>> sum_digits(123456789)\n45*/\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the sum of all the primes below n.\n>>> sum_of_primes(10)\n\
    17\n>>> sum_of_primes(100)\n1060\n>>> sum_of_primes(1000)\n76127\n>>> sum_of_primes(10000)\n\
    5736396*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i <= $n) {\n\
    \        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n      \
    \      $i++;\n        }\n    }\n    return $i;\n}\n\n/* Return the sum of all\
    \ the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ the digits of n.\n>>> sum_digits(123)\n6\n>>> sum_digits(123456789)\n45*/\n\
    function candidate(...$args) {\n    return largest_prime_factor(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\necho largest_prime_factor(13195);\necho \"\\n\";\necho largest_prime_factor(2048);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(1000)\n\
    76127\n>>> sum_of_primes(1000000)\n37550402023*/\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the multiples of 3 or 5 below n.\n>>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n\
    233168*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\n/* Return the sum of\
    \ all the primes below n.\n>>> sum_of_primes(10)\n17\n>>> sum_of_primes(100)\n\
    1060*/\nfunction candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n\t$i = 2;\n\twhile ($i * $i <= $n) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t\
    }\n\treturn $n;\n}\n\n/* Return the sum of all the multiples of 3 or 5 below n.\n\
    >>> sum_of_multiples(10)\n23\n>>> sum_of_multiples(1000)\n233168*/\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220777
- exit_code: 0
  program: "<?php\n/* Return the largest prime factor of n. Assume n > 1 and is not\
    \ a prime.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n\
    2*/\nfunction largest_prime_factor($n) {\n    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}\n\necho largest_prime_factor(13195);\n\
    echo \"\\n\";\necho largest_prime_factor(2048);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return largest_prime_factor(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(15) !== 5) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n    if (candidate(330)\
    \ !== 11) { throw new Exception(\"Test failed!\"); }\n    if (candidate(13195)\
    \ !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '29

    2

    '
  timestamp: 1660220777
