name: HumanEval_131_digits
language: php
prompt: "<?php\n/* Given a positive integer n, return the product of the odd digits.\n\
  Return 0 if all digits are even.\nFor example:\n>>> digits(1)\n1\n>>> digits(4)\n\
  0\n>>> digits(235)\n15*/\nfunction digits($n) {\n"
tests: "function candidate(...$args) {\n    return digits(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(5) !== 5) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(54) !== 5) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(120) !== 1) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(5014) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(98765)\
  \ !== 315) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5576543)\
  \ !== 2625) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2468)\
  \ !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $odds = 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n);\
    \ $i++) {\n        if ($n[$i] % 2 != 0) {\n            $odds *= $n[$i];\n    \
    \    }\n    }\n    return $odds;\n}\necho digits(1);\necho digits(4);\necho digits(235);",
  "    $odd_digits = [];\n    $n = str_split($n);\n    foreach ($n as $digit) {\n\
    \        if ($digit % 2 != 0) {\n            $odd_digits[] = $digit;\n       \
    \ }\n    }\n    if (count($odd_digits) == 0) {\n        return 0;\n    }\n   \
    \ return array_product($odd_digits);\n}\n\n/* Given a positive integer n, return\
    \ the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\n\
    >>> digits(1)\n1\n>>> digits(4)\n0\n>>> digits(235)\n15*/", "    $n = str_split($n);\n\
    \    $result = 1;\n    foreach ($n as $value) {\n        if ($value % 2 != 0)\
    \ {\n            $result *= $value;\n        }\n    }\n    return $result;\n}\n\
    echo digits(235);", "\t$digits = str_split($n);\n\t$odd_digits = array_filter($digits,\
    \ function($digit) {\n\t\treturn $digit % 2 != 0;\n\t});\n\tif (count($odd_digits)\
    \ == 0) {\n\t\treturn 0;\n\t}\n\treturn array_product($odd_digits);\n}\n\n/* Given\
    \ a positive integer n, return the sum of the first n odd digits.\nReturn 0 if\
    \ n is 0.\nFor example:\n>>> sum_odd_digits(1)\n1\n>>> sum_odd_digits(4)\n10\n\
    >>> sum_odd_digits(235)\n15*/", "\t$n = str_split($n);\n\t$odds = array();\n\t\
    foreach ($n as $digit) {\n\t\tif ($digit % 2 != 0) {\n\t\t\t$odds[] = $digit;\n\
    \t\t}\n\t}\n\tif (empty($odds)) {\n\t\treturn 0;\n\t}\n\treturn array_product($odds);\n\
    }\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;",
  "    $result = 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++)\
    \ {\n        if ($n[$i] % 2 != 0) {\n            $result *= $n[$i];\n        }\n\
    \    }\n    return $result;\n}\necho digits(1);\necho digits(4);\necho digits(235);",
  "    $result = 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++)\
    \ {\n        if ($n[$i] % 2 != 0) {\n            $result *= $n[$i];\n        }\n\
    \    }\n    return $result;\n}\necho digits(235);", "    $n = str_split($n);\n\
    \    $odd = 1;\n    foreach ($n as $digit) {\n        if ($digit % 2 != 0) {\n\
    \            $odd *= $digit;\n        }\n    }\n    return $odd;\n}\n\necho digits(1)\
    \ . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "\t$n =\
    \ str_split($n);\n\t$sum = 1;\n\tforeach ($n as $key => $value) {\n\t\tif ($value\
    \ % 2 != 0) {\n\t\t\t$sum *= $value;\n\t\t}\n\t}\n\treturn $sum;\n}\necho digits(235);",
  "    $n = str_split($n);\n    $result = 1;\n    foreach ($n as $value) {\n     \
    \   if ($value % 2 != 0) {\n            $result *= $value;\n        }\n    }\n\
    \    return $result;\n}\n\necho digits(1);\necho \"<br>\";\necho digits(4);\n\
    echo \"<br>\";\necho digits(235);\necho \"<br>\";\necho digits(123456789);\necho\
    \ \"<br>\";\necho digits(1234567890123456789);\necho \"<br>\";\necho digits(12345678901234567890123456789);\n\
    echo \"<br>\";\necho digits(123456789012345678901234567890123456789);\necho \"\
    <br>\";\necho digits(1234567890123456789012345678901234567890123456789);\necho\
    \ \"<br>\";\necho digits(12345678901234567890123456789012345678901234567890123456789);\n\
    echo \"<br>\";\necho digits(123456789012345678901234567890123456789012345678901234567890123456789);\n\
    echo \"<br>\";\necho digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789);\n\
    echo \"<br>\";\necho digits(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789);\n\
    echo \"<br>\";\necho digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789);\n\
    echo \"<br>\";\necho digits(1234567890123456789012345678901234567890123456789012345678901234567",
  "    $product = 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++)\
    \ {\n        if ($n[$i] % 2 != 0) {\n            $product *= $n[$i];\n       \
    \ }\n    }\n    return $product;\n}\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(235) . \"\\n\";", "    $n = str_split($n);\n    $result\
    \ = 1;\n    foreach ($n as $value) {\n        if ($value % 2 != 0) {\n       \
    \     $result *= $value;\n        }\n    }\n    return $result;\n}\necho digits(1);\n\
    echo digits(4);\necho digits(235);", "    $digits = str_split($n);\n    $odd_digits\
    \ = [];\n    foreach ($digits as $digit) {\n        if ($digit % 2 !== 0) {\n\
    \            $odd_digits[] = $digit;\n        }\n    }\n    if (count($odd_digits)\
    \ === 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n\
    }\n\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) .\
    \ PHP_EOL;", "\t$n = str_split($n);\n\t$sum = 1;\n\tforeach ($n as $value) {\n\
    \t\tif ($value % 2 != 0) {\n\t\t\t$sum *= $value;\n\t\t}\n\t}\n\treturn $sum;\n\
    }\necho digits(1);\necho \"\\n\";\necho digits(4);\necho \"\\n\";\necho digits(235);\n\
    echo \"\\n\";", "    $result = 1;\n    while ($n > 0) {\n        $digit = $n %\
    \ 10;\n        if ($digit % 2 == 1) {\n            $result *= $digit;\n      \
    \  }\n        $n = (int)($n / 10);\n    }\n    return $result;\n}\n\necho digits(1)\
    \ . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\\n\";", "    $sum\
    \ = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit %\
    \ 2 != 0) {\n            $sum *= $digit;\n        }\n        $n = floor($n / 10);\n\
    \    }\n    return $sum;\n}\necho digits(235);", "    $result = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $value) {\n        if ($value % 2 != 0) {\n            $result\
    \ *= $value;\n        }\n    }\n    return $result;\n}\necho digits(1);\necho\
    \ \"\\n\";\necho digits(4);\necho \"\\n\";\necho digits(235);\necho \"\\n\";",
  "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $digit) {\n    \
    \    if ($digit % 2 == 1) {\n            $product *= $digit;\n        }\n    }\n\
    \    return $product;\n}\n\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(235) . PHP_EOL;", "\t$n = str_split($n);\n\t$sum = 1;\n\tforeach ($n\
    \ as $number) {\n\t\tif ($number % 2 != 0) {\n\t\t\t$sum *= $number;\n\t\t}\n\t\
    }\n\treturn $sum;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho\
    \ digits(235) . PHP_EOL;", "    $odd_digits = [];\n    $digits = str_split($n);\n\
    \    foreach ($digits as $digit) {\n        if ($digit % 2 !== 0) {\n        \
    \    $odd_digits[] = $digit;\n        }\n    }\n    if (empty($odd_digits)) {\n\
    \        return 0;\n    }\n    return array_product($odd_digits);\n}", "    $n\
    \ = str_split($n);\n    $product = 1;\n    foreach ($n as $digit) {\n        if\
    \ ($digit % 2 != 0) {\n            $product *= $digit;\n        }\n    }\n   \
    \ if ($product == 1) {\n        return 0;\n    }\n    return $product;\n}\necho\
    \ digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;",
  "    $digits = str_split($n);\n    $odd_digits = array_filter($digits, function($digit)\
    \ {\n        return $digit % 2 == 1;\n    });\n    return array_product($odd_digits);\n\
    }\n\n/* Given a string, return a new string with the first and last characters\
    \ swapped.\nFor example:\n>>> swap_first_last('hello')\n'oellh'\n>>> swap_first_last('hi')\n\
    'ih'\n>>> swap_first_last('a')\n'a'*/", "    $n = str_split($n);\n    $product\
    \ = 1;\n    foreach ($n as $value) {\n        if ($value % 2 != 0) {\n       \
    \     $product *= $value;\n        }\n    }\n    if ($product == 1) {\n      \
    \  return 0;\n    }\n    return $product;\n}\necho digits(1);\necho \"<br>\";\n\
    echo digits(4);\necho \"<br>\";\necho digits(235);", "    $result = 1;\n    while\
    \ ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n    \
    \        $result *= $digit;\n        }\n        $n = (int)($n / 10);\n    }\n\
    \    return $result;\n}", "    $n = str_split($n);\n    $result = 1;\n    foreach\
    \ ($n as $digit) {\n        if ($digit % 2 != 0) {\n            $result *= $digit;\n\
    \        }\n    }\n    return $result;\n}\necho digits(1);\necho digits(4);\n\
    echo digits(235);", "  $digits = str_split($n);\n  $odd_digits = array_filter($digits,\
    \ function($digit) {\n    return $digit % 2 !== 0;\n  });\n  if (empty($odd_digits))\
    \ {\n    return 0;\n  }\n  return array_product($odd_digits);\n}\n\n/* Given a\
    \ string, return the first character that is not repeated.\nFor example:\n>>>\
    \ first_non_repeated('aabbc')\n'c'\n>>> first_non_repeated('aabbcc')\n''\n>>>\
    \ first_non_repeated('aabbccdde')\n'e'*/", "    $sum = 1;\n    while ($n > 0)\
    \ {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n            $sum\
    \ *= $digit;\n        }\n        $n = floor($n / 10);\n    }\n    return $sum;\n\
    }\necho digits(1);\necho digits(4);\necho digits(235);", "    $result = 1;\n \
    \   while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0)\
    \ {\n            $result *= $digit;\n        }\n        $n = (int)($n / 10);\n\
    \    }\n    return $result;\n}", "    $odd = 1;\n    $n = str_split($n);\n   \
    \ foreach ($n as $number) {\n        if ($number % 2 != 0) {\n            $odd\
    \ *= $number;\n        }\n    }\n    return $odd;\n}\necho digits(1) . \"\\n\"\
    ;\necho digits(4) . \"\\n\";\necho digits(235) . \"\\n\";", "  $sum = 1;\n  while\
    \ ($n > 0) {\n    $digit = $n % 10;\n    if ($digit % 2 != 0) {\n      $sum *=\
    \ $digit;\n    }\n    $n = floor($n / 10);\n  }\n  return $sum;\n}\necho digits(1)\
    \ . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\\n\";", "    $n\
    \ = str_split($n);\n    $product = 1;\n    foreach ($n as $digit) {\n        if\
    \ ($digit % 2 !== 0) {\n            $product *= $digit;\n        }\n    }\n  \
    \  return $product;\n}\necho digits(1);\necho digits(4);\necho digits(235);",
  "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $digit) {\n    \
    \    if ($digit % 2 != 0) {\n            $product *= $digit;\n        }\n    }\n\
    \    if ($product == 1) {\n        return 0;\n    }\n    return $product;\n}\n\
    \n/* Given a positive integer n, return the sum of the first n positive integers.\n\
    For example:\n>>> sum_n(1)\n1\n>>> sum_n(2)\n3\n>>> sum_n(3)\n6\n>>> sum_n(4)\n\
    10\n>>> sum_n(5)\n15*/", "    $sum = 1;\n    while ($n > 0) {\n        $digit\
    \ = $n % 10;\n        if ($digit % 2 != 0) {\n            $sum *= $digit;\n  \
    \      }\n        $n = (int)($n / 10);\n    }\n    return $sum;\n}\necho digits(1)\
    \ . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\\n\";", "    $result\
    \ = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit %\
    \ 2 != 0) {\n            $result *= $digit;\n        }\n        $n = (int)($n\
    \ / 10);\n    }\n    return $result;\n}\necho digits(1);\necho digits(4);\necho\
    \ digits(235);", "    $odd_digits = array();\n    $digits = str_split($n);\n \
    \   foreach ($digits as $digit) {\n        if ($digit % 2 != 0) {\n          \
    \  $odd_digits[] = $digit;\n        }\n    }\n    if (count($odd_digits) == 0)\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}", " \
    \   $n = str_split($n);\n    $result = 1;\n    foreach ($n as $value) {\n    \
    \    if ($value % 2 != 0) {\n            $result *= $value;\n        }\n    }\n\
    \    return $result;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\n\
    echo digits(235) . \"\\n\";", "    $n = str_split($n);\n    $result = 1;\n   \
    \ foreach ($n as $value) {\n        if ($value % 2 != 0) {\n            $result\
    \ *= $value;\n        }\n    }\n    return $result;\n}\necho digits(1);\necho\
    \ digits(4);\necho digits(235);", "    $n = str_split($n);\n    $product = 1;\n\
    \    foreach ($n as $value) {\n        if ($value % 2 != 0) {\n            $product\
    \ *= $value;\n        }\n    }\n    if ($product == 1) {\n        return 0;\n\
    \    }\n    return $product;\n}\necho digits(1);\necho \"\\n\";\necho digits(4);\n\
    echo \"\\n\";\necho digits(235);\necho \"\\n\";", "  $n = str_split($n);\n  $product\
    \ = 1;\n  foreach ($n as $number) {\n    if ($number % 2 == 1) {\n      $product\
    \ *= $number;\n    }\n  }\n  return $product;\n}\necho digits(235);", "\t$n =\
    \ str_split($n);\n\t$product = 1;\n\tforeach ($n as $digit) {\n\t\tif ($digit\
    \ % 2 != 0) {\n\t\t\t$product *= $digit;\n\t\t}\n\t}\n\treturn $product;\n}\n\
    echo digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;",
  "    $result = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit\
    \ % 2 != 0) {\n            $result *= $digit;\n        }\n        $n = (int)($n\
    \ / 10);\n    }\n    return $result;\n}\n\necho digits(1);\necho \"\\n\";\necho\
    \ digits(4);\necho \"\\n\";\necho digits(235);\necho \"\\n\";", "\t$sum = 1;\n\
    \t$n = str_split($n);\n\tforeach ($n as $value) {\n\t\tif ($value % 2 != 0) {\n\
    \t\t\t$sum *= $value;\n\t\t}\n\t}\n\treturn $sum;\n}\necho digits(1);\necho \"\
    \\n\";\necho digits(4);\necho \"\\n\";\necho digits(235);\necho \"\\n\";", " \
    \   $odds = 1;\n    $n = str_split($n);\n    foreach ($n as $digit) {\n      \
    \  if ($digit % 2 != 0) {\n            $odds *= $digit;\n        }\n    }\n  \
    \  return $odds;\n}\necho digits(1);\necho digits(4);\necho digits(235);", " \
    \ $n = str_split($n);\n  $odd = array();\n  foreach ($n as $digit) {\n    if ($digit\
    \ % 2 != 0) {\n      $odd[] = $digit;\n    }\n  }\n  if (empty($odd)) {\n    return\
    \ 0;\n  }\n  return array_product($odd);\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $n = str_split($n);\n    $result\
    \ = 1;\n    foreach ($n as $value) {\n        if ($value % 2 != 0) {\n       \
    \     $result *= $value;\n        }\n    }\n    return $result;\n}\necho digits(1);\n\
    echo digits(4);\necho digits(235);", "    $result = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $value) {\n        if ($value % 2 != 0) {\n            $result\
    \ *= $value;\n        }\n    }\n    return $result;\n}\necho digits(1);\necho\
    \ \"<br>\";\necho digits(4);\necho \"<br>\";\necho digits(235);", "  $product\
    \ = 1;\n  $n = str_split($n);\n  foreach ($n as $number) {\n    if ($number %\
    \ 2 == 1) {\n      $product *= $number;\n    }\n  }\n  return $product;\n}\necho\
    \ digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;",
  "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $num) {\n      \
    \  if ($num % 2 != 0) {\n            $product *= $num;\n        }\n    }\n   \
    \ return $product;\n}\necho digits(235);", "    $n = str_split($n);\n    $sum\
    \ = 1;\n    foreach ($n as $value) {\n        if ($value % 2 == 1) {\n       \
    \     $sum *= $value;\n        }\n    }\n    if ($sum == 1) {\n        return\
    \ 0;\n    }\n    return $sum;\n}\necho digits(1);\necho \"\\n\";\necho digits(4);\n\
    echo \"\\n\";\necho digits(235);\necho \"\\n\";", "    $odd = 1;\n    while ($n\
    \ > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 == 1) {\n        \
    \    $odd *= $digit;\n        }\n        $n = floor($n / 10);\n    }\n    return\
    \ $odd;\n}", "    $n = str_split($n);\n    $total = 1;\n    foreach ($n as $num)\
    \ {\n        if ($num % 2 != 0) {\n            $total *= $num;\n        }\n  \
    \  }\n    return $total;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(235) . PHP_EOL;", "    $odd_digits = array();\n    $digits = str_split($n);\n\
    \    foreach ($digits as $digit) {\n        if ($digit % 2 != 0) {\n         \
    \   $odd_digits[] = $digit;\n        }\n    }\n    if (count($odd_digits) == 0)\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}\necho\
    \ digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\\n\";",
  "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $number) {\n   \
    \     if ($number % 2 == 1) {\n            $product *= $number;\n        }\n \
    \   }\n    return $product;\n}\n\necho digits(1) . \"\\n\";\necho digits(4) .\
    \ \"\\n\";\necho digits(235) . \"\\n\";", "    $n = str_split($n);\n    $odds\
    \ = [];\n    foreach ($n as $num) {\n        if ($num % 2 !== 0) {\n         \
    \   $odds[] = $num;\n        }\n    }\n    if (empty($odds)) {\n        return\
    \ 0;\n    }\n    return array_product($odds);\n}\n\necho digits(1) . PHP_EOL;\n\
    echo digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "\t$digits = str_split($n);\n\
    \t$odd_digits = array_filter($digits, function($digit) {\n\t\treturn $digit %\
    \ 2 !== 0;\n\t});\n\tif (count($odd_digits) === 0) {\n\t\treturn 0;\n\t}\n\treturn\
    \ array_product($odd_digits);\n}\n\n/* Given a string, return a new string that\
    \ has the first and last characters\nremoved.\nFor example:\n>>> remove_first_last(\"\
    hello\")\n\"ell\"\n>>> remove_first_last(\"maybe\")\n\"ayb\"\n>>> remove_first_last(\"\
    benefit\")\n\"enefi\"\n>>> remove_first_last(\"a\")\n\"\"\n>>> remove_first_last(\"\
    \")\n\"\"*/", "    $n = str_split($n);\n    $result = 1;\n    foreach ($n as $num)\
    \ {\n        if ($num % 2 != 0) {\n            $result *= $num;\n        }\n \
    \   }\n    return $result;\n}", "    $product = 1;\n    while ($n > 0) {\n   \
    \     $digit = $n % 10;\n        if ($digit % 2 == 1) {\n            $product\
    \ *= $digit;\n        }\n        $n = floor($n / 10);\n    }\n    return $product;\n\
    }\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\
    \\n\";", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 != 0;\n    });\n    if (count($odd_digits)\
    \ == 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n}",
  "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $num) {\n      \
    \  if ($num % 2 != 0) {\n            $product *= $num;\n        }\n    }\n   \
    \ return $product;\n}\necho digits(235);", "    $n = str_split($n);\n    $product\
    \ = 1;\n    foreach ($n as $value) {\n        if ($value % 2 != 0) {\n       \
    \     $product *= $value;\n        }\n    }\n    if ($product == 1) {\n      \
    \  return 0;\n    }\n    return $product;\n}", "    $result = 1;\n    while ($n\
    \ > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n        \
    \    $result *= $digit;\n        }\n        $n = floor($n / 10);\n    }\n    return\
    \ $result;\n}\n\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235)\
    \ . \"\\n\";", "    $n = str_split($n);\n    $result = 1;\n    foreach ($n as\
    \ $value) {\n        if ($value % 2 == 1) {\n            $result *= $value;\n\
    \        }\n    }\n    return $result;\n}\necho digits(1);\necho digits(4);\n\
    echo digits(235);", "\t$n = str_split($n);\n\t$product = 1;\n\tforeach ($n as\
    \ $value) {\n\t\tif ($value % 2 != 0) {\n\t\t\t$product *= $value;\n\t\t}\n\t\
    }\n\tif ($product == 1) {\n\t\treturn 0;\n\t}\n\treturn $product;\n}\necho digits(235);",
  "    $result = 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++)\
    \ {\n        if ($n[$i] % 2 != 0) {\n            $result *= $n[$i];\n        }\n\
    \    }\n    return $result;\n}\necho digits(1);\necho digits(4);\necho digits(235);",
  "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $digit) {\n    \
    \    if ($digit % 2 != 0) {\n            $product *= $digit;\n        }\n    }\n\
    \    if ($product == 1) {\n        return 0;\n    }\n    return $product;\n}\n\
    echo digits(1);\necho \"\\n\";\necho digits(4);\necho \"\\n\";\necho digits(235);\n\
    echo \"\\n\";", "    $n = str_split($n);\n    $result = 1;\n    foreach ($n as\
    \ $v) {\n        if ($v % 2 == 1) {\n            $result *= $v;\n        }\n \
    \   }\n    return $result;\n}\necho digits(1);\necho digits(4);\necho digits(235);",
  "  $n = str_split($n);\n  $odd = 1;\n  foreach ($n as $value) {\n    if ($value\
    \ % 2 != 0) {\n      $odd *= $value;\n    }\n  }\n  return $odd;\n}\necho digits(1);\n\
    echo digits(4);\necho digits(235);", "    $n = str_split($n);\n    $total = 1;\n\
    \    foreach ($n as $number) {\n        if ($number % 2 != 0) {\n            $total\
    \ *= $number;\n        }\n    }\n    return $total;\n}\necho digits(1) . PHP_EOL;\n\
    echo digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $n = str_split($n);\n\
    \    $sum = 1;\n    foreach ($n as $digit) {\n        if ($digit % 2 !== 0) {\n\
    \            $sum *= $digit;\n        }\n    }\n    return $sum;\n}\necho digits(1)\
    \ . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $digits\
    \ = str_split($n);\n    $odds = array_filter($digits, function($digit) {\n   \
    \     return $digit % 2 !== 0;\n    });\n    if (count($odds) === 0) {\n     \
    \   return 0;\n    }\n    return array_product($odds);\n}\n\n/* Given a positive\
    \ integer n, return the product of the odd digits.\nReturn 0 if all digits are\
    \ even.\nFor example:\n>>> digits(1)\n1\n>>> digits(4)\n0\n>>> digits(235)\n15*/",
  "    $n = str_split($n);\n    $prod = 1;\n    foreach ($n as $num) {\n        if\
    \ ($num % 2 != 0) {\n            $prod *= $num;\n        }\n    }\n    return\
    \ $prod;\n}\necho digits(1);\necho \"\\n\";\necho digits(4);\necho \"\\n\";\n\
    echo digits(235);\necho \"\\n\";", "    $odds = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $digit) {\n        if ($digit % 2 == 1) {\n            $odds\
    \ *= $digit;\n        }\n    }\n    return $odds;\n}\necho digits(1) . PHP_EOL;\n\
    echo digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $odd = 1;\n    while\
    \ ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 == 1) {\n    \
    \        $odd *= $digit;\n        }\n        $n = (int)($n / 10);\n    }\n   \
    \ return $odd;\n}\n\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho\
    \ digits(235) . \"\\n\";", "    $result = 1;\n    $n = (string)$n;\n    for ($i\
    \ = 0; $i < strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n            $result\
    \ *= $n[$i];\n        }\n    }\n    return $result;\n}\necho digits(1);\necho\
    \ digits(4);\necho digits(235);", "  $product = 1;\n  $n = str_split($n);\n  foreach\
    \ ($n as $digit) {\n    if ($digit % 2 != 0) {\n      $product *= $digit;\n  \
    \  }\n  }\n  return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4) .\
    \ PHP_EOL;\necho digits(235) . PHP_EOL;", "    $n = str_split($n);\n    $product\
    \ = 1;\n    foreach ($n as $number) {\n        if ($number % 2 != 0) {\n     \
    \       $product *= $number;\n        }\n    }\n    if ($product == 1) {\n   \
    \     return 0;\n    }\n    return $product;\n}\n\necho digits(1) . \"\\n\";\n\
    echo digits(4) . \"\\n\";\necho digits(235) . \"\\n\";", "    $product = 1;\n\
    \    $n = str_split($n);\n    foreach ($n as $digit) {\n        if ($digit % 2\
    \ != 0) {\n            $product *= $digit;\n        }\n    }\n    return $product;\n\
    }\necho digits(1);\necho \"\\n\";\necho digits(4);\necho \"\\n\";\necho digits(235);\n\
    echo \"\\n\";", "\t$n = str_split($n);\n\t$product = 1;\n\tforeach ($n as $number)\
    \ {\n\t\tif ($number % 2 != 0) {\n\t\t\t$product *= $number;\n\t\t}\n\t}\n\tif\
    \ ($product == 1) {\n\t\treturn 0;\n\t}\n\treturn $product;\n}\necho digits(1)\
    \ . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $product\
    \ = 1;\n    $n = str_split($n);\n    foreach ($n as $digit) {\n        if ($digit\
    \ % 2 != 0) {\n            $product *= $digit;\n        }\n    }\n    return $product;\n\
    }\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\
    \\n\";", "    $result = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n\
    \        if ($digit % 2 != 0) {\n            $result *= $digit;\n        }\n \
    \       $n = (int)($n / 10);\n    }\n    return $result;\n}", "    $result = 1;\n\
    \    $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i]\
    \ % 2 != 0) {\n            $result *= $n[$i];\n        }\n    }\n    return $result;\n\
    }\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\
    \\n\";", "    $n = str_split($n);\n    $odds = [];\n    foreach ($n as $num) {\n\
    \        if ($num % 2 !== 0) {\n            $odds[] = $num;\n        }\n    }\n\
    \    if (empty($odds)) {\n        return 0;\n    }\n    return array_product($odds);\n\
    }\n\n/* Given a string, return the first character that does not repeat.\nFor\
    \ example:\n>>> firstNonRepeating(\"aabbccdde\")\n'e'\n>>> firstNonRepeating(\"\
    aabbcddee\")\n'c'*/", "    $sum = 1;\n    while ($n > 0) {\n        $digit = $n\
    \ % 10;\n        if ($digit % 2 != 0) {\n            $sum *= $digit;\n       \
    \ }\n        $n = (int)($n / 10);\n    }\n    return $sum;\n}\necho digits(235);",
  "  $n = str_split($n);\n  $result = 1;\n  foreach ($n as $value) {\n    if ($value\
    \ % 2 != 0) {\n      $result *= $value;\n    }\n  }\n  return $result;\n}\necho\
    \ digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\\n\";",
  "    $result = 1;\n    $n = str_split($n);\n    foreach ($n as $value) {\n     \
    \   if ($value % 2 != 0) {\n            $result *= $value;\n        }\n    }\n\
    \    return $result;\n}\necho digits(235);", "    $result = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $num) {\n        if ($num % 2 !== 0) {\n            $result\
    \ *= $num;\n        }\n    }\n    return $result;\n}\n\necho digits(235);", " \
    \   $n = str_split($n);\n    $product = 1;\n    foreach ($n as $digit) {\n   \
    \     if ($digit % 2 !== 0) {\n            $product *= $digit;\n        }\n  \
    \  }\n    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(235) . PHP_EOL;", "  $product = 1;\n  $n = str_split($n);\n  foreach\
    \ ($n as $number) {\n    if ($number % 2 == 1) {\n      $product *= $number;\n\
    \    }\n  }\n  return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $result = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $key => $value) {\n        if ($value % 2 != 0) {\n      \
    \      $result *= $value;\n        }\n    }\n    return $result;\n}\necho digits(235);",
  "    $n = str_split($n);\n    $result = 1;\n    foreach ($n as $digit) {\n     \
    \   if ($digit % 2 != 0) {\n            $result *= $digit;\n        }\n    }\n\
    \    return $result;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\n\
    echo digits(235) . \"\\n\";", "    $n = str_split($n);\n    $result = 1;\n   \
    \ foreach ($n as $value) {\n        if ($value % 2 != 0) {\n            $result\
    \ *= $value;\n        }\n    }\n    return $result;\n}\necho digits(1);\necho\
    \ \"<br>\";\necho digits(4);\necho \"<br>\";\necho digits(235);", "    $arr =\
    \ str_split($n);\n    $result = 1;\n    foreach ($arr as $value) {\n        if\
    \ ($value % 2 != 0) {\n            $result *= $value;\n        }\n    }\n    return\
    \ $result;\n}\necho digits(235);", "    $n = str_split($n);\n    $result = 1;\n\
    \    foreach ($n as $value) {\n        if ($value % 2 != 0) {\n            $result\
    \ *= $value;\n        }\n    }\n    return $result;\n}\necho digits(1);\necho\
    \ \"\\n\";\necho digits(4);\necho \"\\n\";\necho digits(235);\necho \"\\n\";",
  "    $n = str_split($n);\n    $result = 1;\n    foreach ($n as $value) {\n     \
    \   if ($value % 2 != 0) {\n            $result *= $value;\n        }\n    }\n\
    \    return $result;\n}\necho digits(1);\necho \"\\n\";\necho digits(4);\necho\
    \ \"\\n\";\necho digits(235);\necho \"\\n\";", "    $product = 1;\n    while ($n\
    \ > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n        \
    \    $product *= $digit;\n        }\n        $n = (int)($n / 10);\n    }\n   \
    \ return $product;\n}", "    $n = str_split($n);\n    $product = 1;\n    foreach\
    \ ($n as $num) {\n        if ($num % 2 != 0) {\n            $product *= $num;\n\
    \        }\n    }\n    return $product;\n}", "    $n = str_split($n);\n    $result\
    \ = 1;\n    foreach ($n as $value) {\n        if ($value % 2 != 0) {\n       \
    \     $result *= $value;\n        }\n    }\n    return $result;\n}\necho digits(1);\n\
    echo digits(4);\necho digits(235);", "  $n = str_split($n);\n  $odd = 1;\n  foreach\
    \ ($n as $digit) {\n    if ($digit % 2 == 1) {\n      $odd *= $digit;\n    }\n\
    \  }\n  return $odd;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(235) . PHP_EOL;", "\t$n = str_split($n);\n\t$result = 1;\n\tforeach\
    \ ($n as $value) {\n\t\tif ($value % 2 != 0) {\n\t\t\t$result *= $value;\n\t\t\
    }\n\t}\n\treturn $result;\n}\necho digits(1);\necho \"<br>\";\necho digits(4);\n\
    echo \"<br>\";\necho digits(235);", "    $digits = str_split($n);\n    $odd_digits\
    \ = array_filter($digits, function($digit) {\n        return $digit % 2 !== 0;\n\
    \    });\n    if (empty($odd_digits)) {\n        return 0;\n    }\n    return\
    \ array_product($odd_digits);\n}\n\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(235) . \"\\n\";", "    $n = str_split($n);\n    $product\
    \ = 1;\n    foreach ($n as $num) {\n        if ($num % 2 != 0) {\n           \
    \ $product *= $num;\n        }\n    }\n    return $product;\n}\necho digits(1)\
    \ . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $result\
    \ = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit %\
    \ 2 == 1) {\n            $result *= $digit;\n        }\n        $n = floor($n\
    \ / 10);\n    }\n    return $result;\n}\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(235) . \"\\n\";", "    $n = str_split($n);\n    $sum\
    \ = 1;\n    foreach ($n as $value) {\n        if ($value % 2 != 0) {\n       \
    \     $sum *= $value;\n        }\n    }\n    return $sum;\n}\necho digits(235);",
  "    $n = (string)$n;\n    $product = 1;\n    for ($i = 0; $i < strlen($n); $i++)\
    \ {\n        if ($n[$i] % 2 != 0) {\n            $product *= $n[$i];\n       \
    \ }\n    }\n    return $product;\n}\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(235) . \"\\n\";", "    $product = 1;\n    $n = str_split($n);\n\
    \    foreach ($n as $digit) {\n        if ($digit % 2 != 0) {\n            $product\
    \ *= $digit;\n        }\n    }\n    return $product;\n}", "    $n = str_split($n);\n\
    \    $result = 1;\n    foreach ($n as $value) {\n        if ($value % 2 != 0)\
    \ {\n            $result *= $value;\n        }\n    }\n    return $result;\n}\n\
    echo digits(1);\necho \"<br>\";\necho digits(4);\necho \"<br>\";\necho digits(235);",
  "    $n = str_split($n);\n    $result = 1;\n    foreach ($n as $value) {\n     \
    \   if ($value % 2 != 0) {\n            $result *= $value;\n        }\n    }\n\
    \    return $result;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\n\
    echo digits(235) . \"\\n\";", "    $n = str_split($n);\n    $result = 1;\n   \
    \ foreach ($n as $value) {\n        if ($value % 2 != 0) {\n            $result\
    \ *= $value;\n        }\n    }\n    return $result;\n}\necho digits(4);", "  \
    \  $n = str_split($n);\n    $result = 1;\n    foreach ($n as $value) {\n     \
    \   if ($value % 2 != 0) {\n            $result *= $value;\n        }\n    }\n\
    \    return $result;\n}\necho digits(1);\necho digits(4);\necho digits(235);",
  "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as $digit) {\n    \
    \    if ($digit % 2 != 0) {\n            $product *= $digit;\n        }\n    }\n\
    \    return $product;\n}\n\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(235) . PHP_EOL;", "  $n = str_split($n);\n  $product = 1;\n  foreach\
    \ ($n as $value) {\n    if ($value % 2 != 0) {\n      $product *= $value;\n  \
    \  }\n  }\n  if ($product == 1) {\n    return 0;\n  }\n  return $product;\n}\n\
    echo digits(1);\necho \"<br>\";\necho digits(4);\necho \"<br>\";\necho digits(235);\n\
    echo \"<br>\";\necho digits(123456789);", "    $n = str_split($n);\n    $product\
    \ = 1;\n    foreach ($n as $number) {\n        if ($number % 2 != 0) {\n     \
    \       $product *= $number;\n        }\n    }\n    if ($product == 1) {\n   \
    \     return 0;\n    }\n    return $product;\n}\necho digits(235);", "    $product\
    \ = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit %\
    \ 2 != 0) {\n            $product *= $digit;\n        }\n        $n = (int)($n\
    \ / 10);\n    }\n    return $product;\n}\n\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(235) . \"\\n\";", "    $result = 1;\n    while ($n >\
    \ 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n          \
    \  $result *= $digit;\n        }\n        $n = (int)($n / 10);\n    }\n    return\
    \ $result;\n}\necho digits(1);\necho \"<br>\";\necho digits(4);\necho \"<br>\"\
    ;\necho digits(235);\necho \"<br>\";\necho digits(123456789);\necho \"<br>\";\n\
    echo digits(1234567890);\necho \"<br>\";\necho digits(12345678901);\necho \"<br>\"\
    ;\necho digits(123456789012);\necho \"<br>\";\necho digits(1234567890123);\necho\
    \ \"<br>\";\necho digits(12345678901234);\necho \"<br>\";\necho digits(123456789012345);\n\
    echo \"<br>\";\necho digits(1234567890123456);\necho \"<br>\";\necho digits(12345678901234567);\n\
    echo \"<br>\";\necho digits(123456789012345678);\necho \"<br>\";\necho digits(1234567890123456789);\n\
    echo \"<br>\";\necho digits(12345678901234567890);\necho \"<br>\";\necho digits(123456789012345678901);\n\
    echo \"<br>\";\necho digits(1234567890123456789012);\necho \"<br>\";\necho digits(12345678901234567890123);\n\
    echo \"<br>\";\necho digits(123456789012345678901234);\necho \"<br>\";\necho digits(1234567890123456789012345);\n\
    echo \"<br>\";\necho digits(12345678901234567890123456);\necho \"<br>\";\necho\
    \ digits(123456789012345678901234567);\necho \"<br>\";\necho digits(1234567890123456789012345678);\n\
    echo \"<br>\";\necho digits(1234567890123456789", "    $product = 1;\n    $n =\
    \ (string)$n;\n    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i] %\
    \ 2 != 0) {\n            $product *= $n[$i];\n        }\n    }\n    return $product;\n\
    }\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\
    \\n\";", "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $value)\
    \ {\n        if ($value % 2 == 1) {\n            $product *= $value;\n       \
    \ }\n    }\n    return $product;\n}\necho digits(235);", "  $digits = str_split($n);\n\
    \  $odd_digits = [];\n  foreach ($digits as $digit) {\n    if ($digit % 2 != 0)\
    \ {\n      $odd_digits[] = $digit;\n    }\n  }\n  if (count($odd_digits) == 0)\
    \ {\n    return 0;\n  }\n  return array_product($odd_digits);\n}\n\necho digits(1)\
    \ . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $n\
    \ = str_split($n);\n    $odd = 1;\n    foreach ($n as $number) {\n        if ($number\
    \ % 2 != 0) {\n            $odd *= $number;\n        }\n    }\n    return $odd;\n\
    }\necho digits(235);", "    $product = 1;\n    $n = str_split($n);\n    foreach\
    \ ($n as $digit) {\n        if ($digit % 2 != 0) {\n            $product *= $digit;\n\
    \        }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $n = str_split($n);\n    $result\
    \ = 1;\n    foreach ($n as $digit) {\n        if ($digit % 2 != 0) {\n       \
    \     $result *= $digit;\n        }\n    }\n    return $result;\n}\necho digits(1);\n\
    echo digits(4);\necho digits(235);", "    $product = 1;\n    while ($n > 0) {\n\
    \        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n            $product\
    \ *= $digit;\n        }\n        $n = floor($n / 10);\n    }\n    return $product;\n\
    }\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\
    \\n\";", "  $n = str_split($n);\n  $result = 1;\n  foreach ($n as $digit) {\n\
    \    if ($digit % 2 != 0) {\n      $result *= $digit;\n    }\n  }\n  return $result;\n\
    }\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;",
  "    $sum = 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++) {\n\
    \        if ($n[$i] % 2 != 0) {\n            $sum *= $n[$i];\n        }\n    }\n\
    \    return $sum;\n}\n\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(235) . PHP_EOL;", "    $n = str_split($n);\n    $sum = 1;\n    foreach\
    \ ($n as $value) {\n        if ($value % 2 == 1) {\n            $sum *= $value;\n\
    \        }\n    }\n    return $sum;\n}\necho digits(1);\necho digits(4);\necho\
    \ digits(235);", "\t$n = str_split($n);\n\t$product = 1;\n\tforeach ($n as $num)\
    \ {\n\t\tif ($num % 2 != 0) {\n\t\t\t$product *= $num;\n\t\t}\n\t}\n\treturn $product;\n\
    }\necho digits(235);", "\t$n = str_split($n);\n\t$odd = 1;\n\tforeach ($n as $digit)\
    \ {\n\t\tif ($digit % 2 != 0) {\n\t\t\t$odd *= $digit;\n\t\t}\n\t}\n\treturn $odd;\n\
    }\necho digits(1);\necho \"\\n\";\necho digits(4);\necho \"\\n\";\necho digits(235);\n\
    echo \"\\n\";", "    $result = 1;\n    $n = (string)$n;\n    for ($i = 0; $i <\
    \ strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n            $result *=\
    \ $n[$i];\n        }\n    }\n    return $result;\n}\necho digits(1);\necho digits(4);\n\
    echo digits(235);", "    $product = 1;\n    $n = str_split($n);\n    foreach ($n\
    \ as $num) {\n        if ($num % 2 != 0) {\n            $product *= $num;\n  \
    \      }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $odd_digits = 1;\n    $n = (string)$n;\n\
    \    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i] % 2 != 0) {\n \
    \           $odd_digits *= $n[$i];\n        }\n    }\n    return $odd_digits;\n\
    }\n\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) .\
    \ \"\\n\";", "    $odd_digits = array();\n    $n = str_split($n);\n    foreach\
    \ ($n as $digit) {\n        if ($digit % 2 != 0) {\n            $odd_digits[]\
    \ = $digit;\n        }\n    }\n    if (empty($odd_digits)) {\n        return 0;\n\
    \    } else {\n        return array_product($odd_digits);\n    }\n}\necho digits(1)\
    \ . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "  $n =\
    \ str_split($n);\n  $product = 1;\n  foreach ($n as $num) {\n    if ($num % 2\
    \ !== 0) {\n      $product *= $num;\n    }\n  }\n  return $product;\n}\necho digits(1)\
    \ . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $product\
    \ = 1;\n    $n = str_split($n);\n    foreach ($n as $digit) {\n        if ($digit\
    \ % 2 != 0) {\n            $product *= $digit;\n        }\n    }\n    return $product;\n\
    }\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;",
  "    $n = str_split($n);\n    $result = 1;\n    foreach ($n as $value) {\n     \
    \   if ($value % 2 != 0) {\n            $result *= $value;\n        }\n    }\n\
    \    return $result;\n}\necho digits(1);\necho digits(4);\necho digits(235);",
  "\t$n = str_split($n);\n\t$total = 1;\n\tforeach ($n as $number) {\n\t\tif ($number\
    \ % 2 == 1) {\n\t\t\t$total *= $number;\n\t\t}\n\t}\n\treturn $total;\n}\necho\
    \ digits(1);\necho \"\\n\";\necho digits(4);\necho \"\\n\";\necho digits(235);\n\
    echo \"\\n\";", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 != 0;\n    });\n    if (empty($odd_digits))\
    \ {\n        return 0;\n    }\n    return array_product($odd_digits);\n}", " \
    \   $n = str_split($n);\n    $product = 1;\n    foreach ($n as $num) {\n     \
    \   if ($num % 2 != 0) {\n            $product *= $num;\n        }\n    }\n  \
    \  return $product;\n}", "    $digits = str_split($n);\n    $product = 1;\n  \
    \  foreach ($digits as $digit) {\n        if ($digit % 2 != 0) {\n           \
    \ $product *= $digit;\n        }\n    }\n    return $product;\n}\necho digits(235);",
  "    $digits = str_split($n);\n    $product = 1;\n    foreach ($digits as $digit)\
    \ {\n        if ($digit % 2 == 1) {\n            $product *= $digit;\n       \
    \ }\n    }\n    return $product;\n}\n\necho digits(1) . \"\\n\";\necho digits(4)\
    \ . \"\\n\";\necho digits(235) . \"\\n\";", "    $result = 1;\n    while ($n >\
    \ 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n          \
    \  $result *= $digit;\n        }\n        $n = floor($n / 10);\n    }\n    return\
    \ $result;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235)\
    \ . \"\\n\";", "    $product = 1;\n    $n = str_split($n);\n    foreach ($n as\
    \ $digit) {\n        if ($digit % 2 !== 0) {\n            $product *= $digit;\n\
    \        }\n    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4)\
    \ . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $product = 1;\n    while ($n\
    \ > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n        \
    \    $product *= $digit;\n        }\n        $n = (int)($n / 10);\n    }\n   \
    \ return $product;\n}\n\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\n\
    echo digits(235) . \"\\n\";", "    $n = str_split($n);\n    $product = 1;\n  \
    \  foreach ($n as $digit) {\n        if ($digit % 2 != 0) {\n            $product\
    \ *= $digit;\n        }\n    }\n    if ($product == 1) {\n        return 0;\n\
    \    }\n    return $product;\n}\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\n\
    echo digits(235) . PHP_EOL;", "    $product = 1;\n    while ($n > 0) {\n     \
    \   $digit = $n % 10;\n        if ($digit % 2 != 0) {\n            $product *=\
    \ $digit;\n        }\n        $n = (int)($n / 10);\n    }\n    return $product;\n\
    }\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\
    \\n\";", "    $product = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n\
    \        if ($digit % 2 != 0) {\n            $product *= $digit;\n        }\n\
    \        $n = (int)($n / 10);\n    }\n    return $product;\n}\n\necho digits(1)\
    \ . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\\n\";", "    $odd\
    \ = 0;\n    $even = 0;\n    while ($n > 0) {\n        $digit = $n % 10;\n    \
    \    if ($digit % 2 == 0) {\n            $even++;\n        } else {\n        \
    \    $odd *= $digit;\n        }\n        $n = (int)($n / 10);\n    }\n    if ($even\
    \ == 0) {\n        return $odd;\n    } else {\n        return 0;\n    }\n}\necho\
    \ digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\\n\";",
  "    $n = str_split($n);\n    $result = 1;\n    foreach ($n as $value) {\n     \
    \   if ($value % 2 != 0) {\n            $result *= $value;\n        }\n    }\n\
    \    return $result;\n}\necho digits(1);\necho digits(4);\necho digits(235);",
  "    $n = str_split($n);\n    $result = 1;\n    foreach ($n as $value) {\n     \
    \   if ($value % 2 != 0) {\n            $result *= $value;\n        }\n    }\n\
    \    return $result;\n}\necho digits(1);\necho \"<br>\";\necho digits(4);\necho\
    \ \"<br>\";\necho digits(235);", "    $n = str_split($n);\n    $product = 1;\n\
    \    foreach ($n as $num) {\n        if ($num % 2 !== 0) {\n            $product\
    \ *= $num;\n        }\n    }\n    return $product;\n}", "    $result = 1;\n  \
    \  while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n\
    \            $result *= $digit;\n        }\n        $n = (int)($n / 10);\n   \
    \ }\n    return $result;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\\\
    n\";\necho digits(235) . \"\\n\";", "    $n = str_split($n);\n    $result = 1;\n\
    \    foreach ($n as $value) {\n        if ($value % 2 != 0) {\n            $result\
    \ *= $value;\n        }\n    }\n    return $result;\n}\necho digits(1);\necho\
    \ digits(4);\necho digits(235);", "    $n = str_split($n);\n    $result = 1;\n\
    \    foreach ($n as $value) {\n        if ($value % 2 != 0) {\n            $result\
    \ *= $value;\n        }\n    }\n    return $result;\n}\necho digits(235);", " \
    \   $n = str_split($n);\n    $product = 1;\n    foreach ($n as $digit) {\n   \
    \     if ($digit % 2 != 0) {\n            $product *= $digit;\n        }\n   \
    \ }\n    if ($product == 1) {\n        return 0;\n    }\n    return $product;\n\
    }\necho digits(1);\necho \"\\n\";\necho digits(4);\necho \"\\n\";\necho digits(235);\n\
    echo \"\\n\";", "    $n = str_split($n);\n    $result = 1;\n    foreach ($n as\
    \ $value) {\n        if ($value % 2 != 0) {\n            $result *= $value;\n\
    \        }\n    }\n    return $result;\n}\necho digits(1);\necho \"<br>\";\necho\
    \ digits(4);\necho \"<br>\";\necho digits(235);", "    $product = 1;\n    while\
    \ ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n    \
    \        $product *= $digit;\n        }\n        $n = (int)($n / 10);\n    }\n\
    \    return $product;\n}", "    $digits = str_split($n);\n    $odd_digits = array_filter($digits,\
    \ function($digit) {\n        return $digit % 2 == 1;\n    });\n    if (count($odd_digits)\
    \ == 0) {\n        return 0;\n    }\n    return array_product($odd_digits);\n\
    }\n\n/* Given a positive integer n, return the sum of the digits.\nFor example:\n\
    >>> digits(1)\n1\n>>> digits(4)\n4\n>>> digits(235)\n10*/", "    $result = 1;\n\
    \    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0)\
    \ {\n            $result *= $digit;\n        }\n        $n = (int)($n / 10);\n\
    \    }\n    return $result;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\
    \\n\";\necho digits(235) . \"\\n\";", "    $arr = str_split($n);\n    $product\
    \ = 1;\n    foreach ($arr as $number) {\n        if ($number % 2 != 0) {\n   \
    \         $product *= $number;\n        }\n    }\n    if ($product == 1) {\n \
    \       return 0;\n    }\n    return $product;\n}", "  $odds = 1;\n  $n = (string)$n;\n\
    \  for ($i = 0; $i < strlen($n); $i++) {\n    if ($n[$i] % 2 != 0) {\n      $odds\
    \ *= $n[$i];\n    }\n  }\n  return $odds;\n}\necho digits(1) . PHP_EOL;\necho\
    \ digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $sum = 1;\n    $n =\
    \ (string)$n;\n    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i] %\
    \ 2 != 0) {\n            $sum *= $n[$i];\n        }\n    }\n    return $sum;\n\
    }\necho digits(1);\necho digits(4);\necho digits(235);", "  $result = 1;\n  $n\
    \ = (string)$n;\n  for ($i = 0; $i < strlen($n); $i++) {\n    if ($n[$i] % 2 !=\
    \ 0) {\n      $result *= $n[$i];\n    }\n  }\n  return $result;\n}", "    $result\
    \ = 1;\n    $n = str_split($n);\n    foreach ($n as $digit) {\n        if ($digit\
    \ % 2 != 0) {\n            $result *= $digit;\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer n, return the product of the odd digits.\nReturn\
    \ 0 if all digits are even.\nFor example:\n>>> digits(1)\n1\n>>> digits(4)\n0\n\
    >>> digits(235)\n15*/", "    $n = str_split($n);\n    $result = 1;\n    foreach\
    \ ($n as $value) {\n        if ($value % 2 != 0) {\n            $result *= $value;\n\
    \        }\n    }\n    return $result;\n}\necho digits(1);\necho digits(4);\n\
    echo digits(235);", "    $digits = str_split($n);\n    $odd_digits = [];\n   \
    \ foreach ($digits as $digit) {\n        if ($digit % 2 != 0) {\n            $odd_digits[]\
    \ = $digit;\n        }\n    }\n    if (empty($odd_digits)) {\n        return 0;\n\
    \    }\n    return array_product($odd_digits);\n}\n\n/* Given a positive integer\
    \ n, return the sum of the digits.\nFor example:\n>>> digits(1)\n1\n>>> digits(4)\n\
    4\n>>> digits(235)\n10*/", "    $result = 1;\n    $n = str_split($n);\n    foreach\
    \ ($n as $digit) {\n        if ($digit % 2 != 0) {\n            $result *= $digit;\n\
    \        }\n    }\n    return $result;\n}\n\n/* Given a positive integer n, return\
    \ the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\n\
    >>> digits(1)\n1\n>>> digits(4)\n0\n>>> digits(235)\n15*/", "    $digits = str_split($n);\n\
    \    $odd_digits = array_filter($digits, function($digit) {\n        return $digit\
    \ % 2;\n    });\n    if (count($odd_digits) == 0) {\n        return 0;\n    }\n\
    \    return array_product($odd_digits);\n}", "\t$n = str_split($n);\n\t$product\
    \ = 1;\n\tforeach ($n as $key => $value) {\n\t\tif ($value % 2 != 0) {\n\t\t\t\
    $product *= $value;\n\t\t}\n\t}\n\tif ($product == 1) {\n\t\treturn 0;\n\t}\n\t\
    return $product;\n}\necho digits(1);\necho \"<br>\";\necho digits(4);\necho \"\
    <br>\";\necho digits(235);\necho \"<br>\";\necho digits(123456789);\necho \"<br>\"\
    ;\necho digits(1234567890123456789);\necho \"<br>\";\necho digits(12345678901234567890123456789);\n\
    echo \"<br>\";\necho digits(123456789012345678901234567890123456789);\necho \"\
    <br>\";\necho digits(1234567890123456789012345678901234567890123456789);\necho\
    \ \"<br>\";\necho digits(12345678901234567890123456789012345678901234567890123456789);\n\
    echo \"<br>\";\necho digits(123456789012345678901234567890123456789012345678901234567890123456789);\n\
    echo \"<br>\";\necho digits(1234567890123456789012345678901234567890123456789012345678901234567890123456789);\n\
    echo \"<br>\";\necho digits(12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789);\n\
    echo \"<br>\";\necho digits(123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789);\n\
    echo \"<br>\";\necho digits(1234567890123456789", "  $result = 1;\n  $n = str_split($n);\n\
    \  foreach ($n as $value) {\n    if ($value % 2 != 0) {\n      $result *= $value;\n\
    \    }\n  }\n  if ($result == 1) {\n    return 0;\n  }\n  return $result;\n}\n\
    echo digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;",
  "    $result = 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++)\
    \ {\n        if ($n[$i] % 2 != 0) {\n            $result *= $n[$i];\n        }\n\
    \    }\n    return $result;\n}\necho digits(1);\necho digits(4);\necho digits(235);",
  "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $num) {\n      \
    \  if ($num % 2 !== 0) {\n            $product *= $num;\n        }\n    }\n  \
    \  return $product;\n}\n\n/* Given a positive integer n, return the product of\
    \ the odd digits.\nReturn 0 if all digits are even.\nFor example:\n>>> digits(1)\n\
    1\n>>> digits(4)\n0\n>>> digits(235)\n15*/", "    $result = 1;\n    while ($n\
    \ > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n        \
    \    $result *= $digit;\n        }\n        $n = (int)($n / 10);\n    }\n    return\
    \ $result;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235)\
    \ . \"\\n\";", "    $odds = 1;\n    $str = strval($n);\n    for ($i = 0; $i <\
    \ strlen($str); $i++) {\n        if ($str[$i] % 2 != 0) {\n            $odds *=\
    \ $str[$i];\n        }\n    }\n    return $odds;\n}\necho digits(1);\necho \"\\\
    n\";\necho digits(4);\necho \"\\n\";\necho digits(235);\necho \"\\n\";", "   \
    \ $n = str_split($n);\n    $result = 1;\n    foreach ($n as $value) {\n      \
    \  if ($value % 2 != 0) {\n            $result *= $value;\n        }\n    }\n\
    \    return $result;\n}\necho digits(1);\necho digits(4);\necho digits(235);",
  "    $n = str_split($n);\n    $sum = 1;\n    foreach ($n as $value) {\n        if\
    \ ($value % 2 != 0) {\n            $sum *= $value;\n        }\n    }\n    return\
    \ $sum;\n}\necho digits(235);", "    $n = str_split($n);\n    $result = 1;\n \
    \   foreach ($n as $digit) {\n        if ($digit % 2 !== 0) {\n            $result\
    \ *= $digit;\n        }\n    }\n    return $result;\n}\necho digits(1);\necho\
    \ digits(4);\necho digits(235);", "    $n = str_split($n);\n    $product = 1;\n\
    \    foreach ($n as $digit) {\n        if ($digit % 2 != 0) {\n            $product\
    \ *= $digit;\n        }\n    }\n    if ($product == 1) {\n        return 0;\n\
    \    }\n    return $product;\n}\n\n/* Given a positive integer n, return the sum\
    \ of the first n positive integers.\nFor example:\n>>> sum_n(1)\n1\n>>> sum_n(4)\n\
    10\n>>> sum_n(10)\n55*/", "    $product = 1;\n    while ($n > 0) {\n        $digit\
    \ = $n % 10;\n        if ($digit % 2 == 1) {\n            $product *= $digit;\n\
    \        }\n        $n = (int)($n / 10);\n    }\n    return $product;\n}\necho\
    \ digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\\n\";",
  "    $result = 1;\n    while ($n > 0) {\n        $digit = $n % 10;\n        if ($digit\
    \ % 2 != 0) {\n            $result *= $digit;\n        }\n        $n = (int)($n\
    \ / 10);\n    }\n    return $result;\n}\n\n/* Given a positive integer n, return\
    \ the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\n\
    >>> digits(1)\n1\n>>> digits(4)\n0\n>>> digits(235)\n15*/", "    $n = str_split($n);\n\
    \    $product = 1;\n    foreach ($n as $digit) {\n        if ($digit % 2 != 0)\
    \ {\n            $product *= $digit;\n        }\n    }\n    if ($product == 1)\
    \ {\n        return 0;\n    }\n    return $product;\n}\n\necho digits(1) . PHP_EOL;\n\
    echo digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "  $n = str_split($n);\n\
    \  $result = 1;\n  foreach ($n as $number) {\n    if ($number % 2 != 0) {\n  \
    \    $result *= $number;\n    }\n  }\n  return $result;\n}\necho digits(1) . PHP_EOL;\n\
    echo digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $sum = 1;\n    $n\
    \ = (string)$n;\n    for ($i = 0; $i < strlen($n); $i++) {\n        if ($n[$i]\
    \ % 2 != 0) {\n            $sum *= $n[$i];\n        }\n    }\n    return $sum;\n\
    }\necho digits(1) . \"\\n\";\necho digits(4) . \"\\n\";\necho digits(235) . \"\
    \\n\";", "    $odd_digits = array();\n    $n_string = strval($n);\n    $n_array\
    \ = str_split($n_string);\n    foreach ($n_array as $digit) {\n        if ($digit\
    \ % 2 != 0) {\n            array_push($odd_digits, $digit);\n        }\n    }\n\
    \    if (count($odd_digits) == 0) {\n        return 0;\n    } else {\n       \
    \ $product = 1;\n        foreach ($odd_digits as $odd_digit) {\n            $product\
    \ *= $odd_digit;\n        }\n        return $product;\n    }\n}", "    $n = str_split($n);\n\
    \    $product = 1;\n    foreach ($n as $digit) {\n        if ($digit % 2 == 1)\
    \ {\n            $product *= $digit;\n        }\n    }\n    return $product;\n\
    }\necho digits(1);\necho digits(4);\necho digits(235);", "    $sum = 1;\n    while\
    \ ($n > 0) {\n        $digit = $n % 10;\n        if ($digit % 2 != 0) {\n    \
    \        $sum *= $digit;\n        }\n        $n = floor($n / 10);\n    }\n   \
    \ return $sum;\n}\necho digits(235);", "    $n = str_split($n);\n    $product\
    \ = 1;\n    foreach ($n as $number) {\n        if ($number % 2 != 0) {\n     \
    \       $product *= $number;\n        }\n    }\n    if ($product == 1) {\n   \
    \     return 0;\n    }\n    return $product;\n}\n\necho digits(1) . PHP_EOL;\n\
    echo digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "\t$n = str_split($n);\n\
    \t$product = 1;\n\tforeach ($n as $digit) {\n\t\tif ($digit % 2 == 1) {\n\t\t\t\
    $product *= $digit;\n\t\t}\n\t}\n\treturn $product;\n}\necho digits(1) . PHP_EOL;\n\
    echo digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;", "    $digits = str_split($n);\n\
    \    $odds = array_filter($digits, function($digit) {\n        return $digit %\
    \ 2 !== 0;\n    });\n    if (count($odds) === 0) {\n        return 0;\n    }\n\
    \    return array_product($odds);\n}\n\n/* Given a string, return the first character\
    \ that does not repeat.\nFor example:\n>>> first_non_repeating_letter('a')\n'a'\n\
    >>> first_non_repeating_letter('stress')\n't'\n>>> first_non_repeating_letter('moonmen')\n\
    'e'*/", "    $n = str_split($n);\n    $result = 1;\n    foreach ($n as $value)\
    \ {\n        if ($value % 2 != 0) {\n            $result *= $value;\n        }\n\
    \    }\n    return $result;\n}\necho digits(1) . \"\\n\";\necho digits(4) . \"\
    \\n\";\necho digits(235) . \"\\n\";", "    $n = str_split($n);\n    $result =\
    \ 1;\n    foreach ($n as $digit) {\n        if ($digit % 2 != 0) {\n         \
    \   $result *= $digit;\n        }\n    }\n    return $result;\n}\n\n/* Given a\
    \ positive integer n, return the sum of the first n odd digits.\nReturn 0 if n\
    \ is 0.\nFor example:\n>>> first_odds(1)\n1\n>>> first_odds(4)\n10\n>>> first_odds(235)\n\
    15*/", "    $n = str_split($n);\n    $product = 1;\n    foreach ($n as $digit)\
    \ {\n        if ($digit % 2 != 0) {\n            $product *= $digit;\n       \
    \ }\n    }\n    if ($product == 1) {\n        return 0;\n    }\n    return $product;\n\
    }\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;",
  "  $digits = str_split($n);\n  $odd_digits = array_filter($digits, function($digit)\
    \ {\n    return $digit % 2 == 1;\n  });\n  if (empty($odd_digits)) {\n    return\
    \ 0;\n  }\n  return array_product($odd_digits);\n}\n\n/* Given a string, return\
    \ the first character that is unique.\nFor example:\n>>> unique(\"aabbccddeefghi\"\
    )\n\"e\"\n>>> unique(\"hello\")\n\"h\"\n>>> unique(\"this is a test\")\n\"s\"\
    */", "    $n = str_split($n);\n    $sum = 1;\n    foreach ($n as $value) {\n \
    \       if ($value % 2 != 0) {\n            $sum *= $value;\n        }\n    }\n\
    \    if ($sum == 1) {\n        return 0;\n    }\n    return $sum;\n}\n\n/* Given\
    \ a positive integer n, return the sum of the first n odd numbers.\nFor example:\n\
    >>> sum_odds(1)\n1\n>>> sum_odds(2)\n4\n>>> sum_odds(3)\n9*/", "    $digits =\
    \ str_split($n);\n    $odd_digits = array_filter($digits, function($digit) {\n\
    \        return $digit % 2 !== 0;\n    });\n    if (empty($odd_digits)) {\n  \
    \      return 0;\n    }\n    return array_product($odd_digits);\n}\n\n/* Given\
    \ a string, return a new string that has the same characters in the\nsame order,\
    \ but with a dash between each pair of consecutive characters.\nFor example:\n\
    >>> dasherize('12345')\n'1-2-3-4-5'\n>>> dasherize('1234')\n'1-2-3-4'\n>>> dasherize('123')\n\
    '1-2-3'\n>>> dasherize('12')\n'1-2'\n>>> dasherize('1')\n'1'\n>>> dasherize('')\n\
    ''*/", "    $result = 1;\n    $n = (string)$n;\n    for ($i = 0; $i < strlen($n);\
    \ $i++) {\n        if ($n[$i] % 2 != 0) {\n            $result *= $n[$i];\n  \
    \      }\n    }\n    return $result;\n}\necho digits(1);\necho digits(4);\necho\
    \ digits(235);", "\t$digits = str_split($n);\n\t$odd_digits = array_filter($digits,\
    \ function($digit) {\n\t\treturn $digit % 2 == 1;\n\t});\n\treturn array_product($odd_digits);\n\
    }\n\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) .\
    \ PHP_EOL;", "    $sum = 1;\n    $n = str_split($n);\n    foreach ($n as $num)\
    \ {\n        if ($num % 2 != 0) {\n            $sum *= $num;\n        }\n    }\n\
    \    return $sum;\n}\necho digits(235);", "    $odd = 1;\n    while ($n > 0) {\n\
    \        $digit = $n % 10;\n        if ($digit % 2 == 1) {\n            $odd *=\
    \ $digit;\n        }\n        $n = (int)($n / 10);\n    }\n    return $odd;\n}",
  "  $n = str_split($n);\n  $product = 1;\n  foreach ($n as $digit) {\n    if ($digit\
    \ % 2 != 0) {\n      $product *= $digit;\n    }\n  }\n  return $product;\n}\n\
    echo digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235) . PHP_EOL;",
  "    $n = str_split($n);\n    $odd = 1;\n    foreach ($n as $digit) {\n        if\
    \ ($digit % 2 != 0) {\n            $odd *= $digit;\n        }\n    }\n    return\
    \ $odd;\n}\n\necho digits(1) . PHP_EOL;\necho digits(4) . PHP_EOL;\necho digits(235)\
    \ . PHP_EOL;", "\t$n = str_split($n);\n\t$result = 1;\n\tforeach ($n as $value)\
    \ {\n\t\tif ($value % 2 != 0) {\n\t\t\t$result *= $value;\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\necho digits(1);\necho \"\\n\";\necho digits(4);\necho \"\\n\";\n\
    echo digits(235);\necho \"\\n\";", "    $sum = 1;\n    while ($n > 0) {\n    \
    \    $digit = $n % 10;\n        if ($digit % 2 != 0) {\n            $sum *= $digit;\n\
    \        }\n        $n = (int)($n / 10);\n    }\n    return $sum;\n}\necho digits(1);\n\
    echo digits(4);\necho digits(235);"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
