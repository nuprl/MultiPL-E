name: HumanEval_102_choose_num
language: php
prompt: "<?php\n/* This function takes two positive numbers x and y and returns the\n\
  biggest even integer number that is in the range [x, y] inclusive. If \nthere's\
  \ no such number, then the function should return -1.\nFor example:\n>>> choose_num(12,\
  \ 15)\n14\n>>> choose_num(13, 12)\n-1*/\nfunction choose_num($x, $y) {\n"
tests: "function candidate(...$args) {\n    return choose_num(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(12, 15) !== 14) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(13, 12) !== -1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(33, 12354) !== 12354) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(5234, 5233) !== -1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(6, 29) !== 28) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(27, 10) !== -1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(7, 7) !== -1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(546, 546) !== 546) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["\t$even = 0;\n\tif ($x > $y) {\n\t\t$temp = $x;\n\t\t$x = $y;\n\t\t\
    $y = $temp;\n\t}\n\tfor ($i = $x; $i <= $y; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\
    \t\t$even = $i;\n\t\t}\n\t}\n\tif ($even == 0) {\n\t\treturn -1;\n\t}\n\treturn\
    \ $even;\n}\n\n/* This function takes a positive integer n and returns the sum\
    \ of all\nthe odd numbers from 1 to n inclusive.\nFor example:\n>>> sum_odd(5)\n\
    9\n>>> sum_odd(10)\n25*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t}\n\telseif\
    \ ($y % 2 == 0) {\n\t\treturn $y;\n\t}\n\telse {\n\t\treturn -1;\n\t}\n}\necho\
    \ choose_num(12, 15);\necho \"\\n\";\necho choose_num(13, 12);\necho \"\\n\";",
  "\tif ($x > $y) {\n\t\treturn -1;\n\t}\n\tfor ($i = $y; $i >= $x; $i--) {\n\t\t\
    if ($i % 2 == 0) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\treturn -1;\n}\necho choose_num(12,\
    \ 15);\necho \"\\n\";\necho choose_num(13, 12);\necho \"\\n\";", "    if ($x %\
    \ 2 == 0) {\n        return $x;\n    } else {\n        $x++;\n        if ($x >\
    \ $y) {\n            return -1;\n        } else {\n            return $x;\n  \
    \      }\n    }\n}\n\n/* This function takes a positive integer number n and returns\
    \ the\nnumber of digits in the number.\nFor example:\n>>> num_digits(123)\n3\n\
    >>> num_digits(0)\n1\n>>> num_digits(1234)\n4*/", "\tif ($x % 2 == 0) {\n\t\t\
    return $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x <= $y) {\n\t\t\treturn $x;\n\t\t\
    } else {\n\t\t\treturn -1;\n\t\t}\n\t}\n}\n\n/* This function takes a positive\
    \ integer n and returns the sum of all\nthe odd integers between 1 and n inclusive.\n\
    For example:\n>>> sum_odd(5)\n9\n>>> sum_odd(10)\n25*/", "\tif ($x > $y) {\n\t\
    \treturn -1;\n\t}\n\tfor ($i = $y; $i >= $x; $i--) {\n\t\tif ($i % 2 == 0) {\n\
    \t\t\treturn $i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/* This function takes a positive\
    \ integer n and returns the sum of the\nsquares of all positive integers that\
    \ are less than n.\nFor example:\n>>> sum_squares(3)\n5\n>>> sum_squares(5)\n\
    30*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x\
    \ > $y) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn choose_num($x, $y);\n\t\
    \t}\n\t}\n}\necho choose_num(12, 15) . \"\\n\";\necho choose_num(13, 12) . \"\\\
    n\";\n\n/* This function takes a positive integer n and returns the sum of the\n\
    digits of n.\nFor example:\n>>> sum_digits(1234)\n10\n>>> sum_digits(0)\n0*/",
  "    $result = -1;\n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            $result = $i;\n        }\n    }\n    return $result;\n}\n\n/*\
    \ This function takes a positive number x and returns the biggest\ninteger number\
    \ that is in the range [0, x] inclusive and is divisible\nby 3. If there's no\
    \ such number, then the function should return -1.\nFor example:\n>>> choose_num_div_3(12)\n\
    9\n>>> choose_num_div_3(13)\n-1*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t\
    } else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\t\
    return choose_num($x, $y);\n\t\t}\n\t}\n}\n\necho choose_num(12, 15);\necho \"\
    <br>\";\necho choose_num(13, 12);\necho \"<br>\";\necho choose_num(12, 12);\n\
    echo \"<br>\";\necho choose_num(13, 15);\necho \"<br>\";\necho choose_num(14,\
    \ 15);\necho \"<br>\";\necho choose_num(15, 15);\necho \"<br>\";\necho choose_num(16,\
    \ 15);\necho \"<br>\";\necho choose_num(17, 15);\necho \"<br>\";\necho choose_num(18,\
    \ 15);\necho \"<br>\";\necho choose_num(19, 15);\necho \"<br>\";\necho choose_num(20,\
    \ 15);\necho \"<br>\";\necho choose_num(21, 15);\necho \"<br>\";\necho choose_num(22,\
    \ 15);\necho \"<br>\";\necho choose_num(23, 15);\necho \"<br>\";\necho choose_num(24,\
    \ 15);\necho \"<br>\";\necho choose_num(25, 15);\necho \"<br>\";\necho choose_num(26,\
    \ 15);\necho \"<br>\";\necho choose_num(27, 15);\necho \"<br>\";\necho choose_num(28,\
    \ 15);\necho \"<br>\";\necho choose_num(29, 15);\necho \"<br>\";\necho choose_num(30,\
    \ 15);\necho \"<br>\";\necho choose_num(31, 15);\necho \"<br>\";\necho choose_num(32,\
    \ 15);\necho \"<br>\";\necho choose_num(33, 15);\necho \"<br>\";\necho choose_num(34,\
    \ 15);\necho \"<br>\";\necho choose_num(35, 15);\necho \"<br>\";\necho choose_num(36,\
    \ 15);\necho \"<br>\";\necho", "\tif ($x > $y) {\n\t\treturn -1;\n\t}\n\t$biggest_even\
    \ = -1;\n\tfor ($i = $x; $i <= $y; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$biggest_even\
    \ = $i;\n\t\t}\n\t}\n\treturn $biggest_even;\n}\n\n/* This function takes a positive\
    \ integer number n and returns the \nsum of all the numbers in the range [1, n]\
    \ inclusive.\nFor example:\n>>> sum_of_numbers(3)\n6\n>>> sum_of_numbers(5)\n\
    15*/", "\t$num = -1;\n\tfor ($i = $x; $i <= $y; $i++) {\n\t\tif ($i % 2 == 0)\
    \ {\n\t\t\t$num = $i;\n\t\t}\n\t}\n\treturn $num;\n}\n\n/* This function takes\
    \ a positive integer number n and returns the\nsmallest prime number that is bigger\
    \ than n. If there's no such number,\nthen the function should return -1.\nFor\
    \ example:\n>>> choose_prime(7)\n11\n>>> choose_prime(100)\n101*/", "    $numbers\
    \ = range($x, $y);\n    $evens = array_filter($numbers, function($number) {\n\
    \        return $number % 2 == 0;\n    });\n    if (count($evens) == 0) {\n  \
    \      return -1;\n    }\n    return max($evens);\n}\n\n/* This function takes\
    \ a string and returns a new string with the first\nletter of each word capitalized.\n\
    For example:\n>>> capitalize_words(\"hello world\")\n\"Hello World\"\n>>> capitalize_words(\"\
    hello world, how are you?\")\n\"Hello World, How Are You?\"*/", "\tif ($x % 2\
    \ == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\twhile ($x <= $y) {\n\t\t\
    \tif ($x % 2 == 0) {\n\t\t\t\treturn $x;\n\t\t\t}\n\t\t\t$x++;\n\t\t}\n\t}\n\t\
    return -1;\n}\n\n/* This function takes a string and returns the number of vowels\
    \ in it.\nFor example:\n>>> count_vowels(\"hello\")\n2\n>>> count_vowels(\"world\"\
    )\n1*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\twhile\
    \ ($x <= $y) {\n\t\t\tif ($x % 2 == 0) {\n\t\t\t\treturn $x;\n\t\t\t}\n\t\t\t\
    $x++;\n\t\t}\n\t}\n\treturn -1;\n}\necho choose_num(12, 15);\necho \"\\n\";\n\
    echo choose_num(13, 12);\necho \"\\n\";", "    $even_numbers = [];\n    for ($i\
    \ = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            array_push($even_numbers,\
    \ $i);\n        }\n    }\n    if (count($even_numbers) == 0) {\n        return\
    \ -1;\n    } else {\n        return max($even_numbers);\n    }\n}\n\n/* This function\
    \ takes a positive integer number n and returns the \nnumber of digits in n.\n\
    For example:\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n>>> num_digits(123456789)\n\
    9*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x % 2 == 1 && $y %\
    \ 2 == 0) {\n\t\treturn $y;\n\t} else {\n\t\treturn -1;\n\t}\n}\necho choose_num(12,\
    \ 15) . \"\\n\";\necho choose_num(13, 12) . \"\\n\";\n\n/* This function takes\
    \ a positive integer n and returns the sum of the \nfirst n odd numbers.\nFor\
    \ example:\n>>> sum_odd(3)\n9\n>>> sum_odd(5)\n25*/", "\tif ($x > $y) {\n\t\t\
    return -1;\n\t}\n\tfor ($i = $y; $i >= $x; $i--) {\n\t\tif ($i % 2 == 0) {\n\t\
    \t\treturn $i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/* This function takes a positive\
    \ integer number n and returns the sum\nof all the numbers from 1 to n inclusive.\n\
    For example:\n>>> sum_nums(3)\n6\n>>> sum_nums(5)\n15*/", "\tif ($x % 2 == 0)\
    \ {\n\t\treturn $x;\n\t} else {\n\t\t$x = $x + 1;\n\t\tif ($x > $y) {\n\t\t\t\
    return -1;\n\t\t} else {\n\t\t\treturn $x;\n\t\t}\n\t}\n}\necho choose_num(12,\
    \ 15);\necho \"<br>\";\necho choose_num(13, 12);", "\tif ($x % 2 == 0) {\n\t\t\
    return $x;\n\t} else {\n\t\t$x = $x + 1;\n\t\tif ($x <= $y) {\n\t\t\treturn $x;\n\
    \t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n}\n\n/* This function takes a positive\
    \ integer number n and returns the \nnumber of digits in n.\nFor example:\n>>>\
    \ num_digits(123)\n3\n>>> num_digits(123456789)\n9*/", "\tif ($x % 2 == 0) {\n\
    \t\treturn $x;\n\t} else if ($x % 2 != 0 && $y % 2 == 0) {\n\t\treturn $y;\n\t\
    } else {\n\t\treturn -1;\n\t}\n}\necho choose_num(12, 15) . \"\\n\";\necho choose_num(13,\
    \ 12) . \"\\n\";", "    if ($x % 2 == 0) {\n        return $x;\n    } else {\n\
    \        $x++;\n        if ($x > $y) {\n            return -1;\n        } else\
    \ {\n            return $x;\n        }\n    }\n}\necho choose_num(12, 15);\necho\
    \ \"<br>\";\necho choose_num(13, 12);", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\
    \t} else if ($x + 1 == $y) {\n\t\treturn -1;\n\t} else {\n\t\treturn choose_num($x\
    \ + 1, $y);\n\t}\n}\necho choose_num(12, 15) . \"\\n\";\necho choose_num(13, 12)\
    \ . \"\\n\";", "    if ($x % 2 == 0) {\n        return $x;\n    } else if ($x\
    \ + 1 <= $y) {\n        return $x + 1;\n    } else {\n        return -1;\n   \
    \ }\n}\n\n/* This function takes a string and returns the number of times the\
    \ \nletter 'a' appears in the string.\nFor example:\n>>> count_a(\"banana\")\n\
    3\n>>> count_a(\"apple\")\n1\n>>> count_a(\"\")\n0*/", "\tif ($x % 2 == 0) {\n\
    \t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x <= $y) {\n\t\t\treturn $x;\n\
    \t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n}\necho choose_num(12, 15);\necho\
    \ \"<br>\";\necho choose_num(13, 12);", "    if ($x % 2 == 0) {\n        return\
    \ $x;\n    } else if ($x + 1 <= $y) {\n        return $x + 1;\n    } else {\n\
    \        return -1;\n    }\n}\n\n/* This function takes a positive integer number\
    \ n and returns the\nsum of all the numbers from 1 to n inclusive.\nFor example:\n\
    >>> sum_nums(3)\n6\n>>> sum_nums(5)\n15*/", "    $biggest = -1;\n    for ($i =\
    \ $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $biggest = $i;\n\
    \        }\n    }\n    return $biggest;\n}\n\n/* This function takes a positive\
    \ integer number n and returns the\nnumber of digits in n.\nFor example:\n>>>\
    \ num_digits(123)\n3\n>>> num_digits(1)\n1\n>>> num_digits(0)\n1*/", "\t$biggest\
    \ = -1;\n\tfor ($i = $x; $i <= $y; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$biggest\
    \ = $i;\n\t\t}\n\t}\n\treturn $biggest;\n}\n\n/* This function takes a string\
    \ and returns the number of times the \nletter 'a' appears in the string.\nFor\
    \ example:\n>>> count_a(\"banana\")\n3\n>>> count_a(\"apple\")\n1*/", "\tif ($x\
    \ % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x % 2 == 1) {\n\t\t$x = $x + 1;\n\
    \t\treturn $x;\n\t}\n}\necho choose_num(12, 15);\necho \"\\n\";\necho choose_num(13,\
    \ 12);\necho \"\\n\";", "\t$biggest = -1;\n\tfor ($i = $x; $i <= $y; $i++) {\n\
    \t\tif ($i % 2 == 0) {\n\t\t\t$biggest = $i;\n\t\t}\n\t}\n\treturn $biggest;\n\
    }\n\n/* This function takes a positive integer number n and returns the\nsum of\
    \ all even numbers in the range [1, n] inclusive.\nFor example:\n>>> sum_even(5)\n\
    6\n>>> sum_even(10)\n30*/", "    $even_numbers = array();\n    for ($i = $x; $i\
    \ <= $y; $i++) {\n        if ($i % 2 == 0) {\n            array_push($even_numbers,\
    \ $i);\n        }\n    }\n    if (count($even_numbers) == 0) {\n        return\
    \ -1;\n    } else {\n        return max($even_numbers);\n    }\n}\n\n/* This function\
    \ takes a positive integer number n and returns the\nnumber of digits in the number.\n\
    For example:\n>>> num_digits(1234)\n4\n>>> num_digits(0)\n1*/", "    if ($x %\
    \ 2 == 0) {\n        return $x;\n    } else if ($x + 1 == $y) {\n        return\
    \ -1;\n    } else {\n        return choose_num($x + 1, $y);\n    }\n}\n\n/* This\
    \ function takes a positive integer n and returns the sum of all \nthe positive\
    \ integers that are less than or equal to n.\nFor example:\n>>> sum_nums(3)\n\
    6\n>>> sum_nums(5)\n15*/", "\tif ($x > $y) {\n\t\treturn -1;\n\t}\n\tfor ($i =\
    \ $y; $i >= $x; $i--) {\n\t\tif ($i % 2 == 0) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\
    \treturn -1;\n}\n\n/* This function takes a positive integer number n and returns\
    \ the\nnumber of digits in it.\nFor example:\n>>> num_of_digits(123)\n3\n>>> num_of_digits(123456789)\n\
    9*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x % 2 == 1 && $y %\
    \ 2 == 0) {\n\t\treturn $y;\n\t} else {\n\t\treturn -1;\n\t}\n}\necho choose_num(12,\
    \ 15);\necho \"\\n\";\necho choose_num(13, 12);\necho \"\\n\";\n\n/* This function\
    \ takes a positive integer number and returns the \nnumber of digits in it.\n\
    For example:\n>>> num_digits(123)\n3\n>>> num_digits(1)\n1*/", "\tif ($x > $y)\
    \ {\n\t\treturn -1;\n\t}\n\tfor ($i = $y; $i >= $x; $i--) {\n\t\tif ($i % 2 ==\
    \ 0) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/* This function takes\
    \ a positive integer n and returns the sum of all\nthe digits of n.\nFor example:\n\
    >>> sum_digits(123)\n6\n>>> sum_digits(45)\n9*/", "    if ($x % 2 == 0) {\n  \
    \      return $x;\n    } else {\n        return choose_num($x + 1, $y);\n    }\n\
    }\necho choose_num(12, 15);\necho \"<br>\";\necho choose_num(13, 12);", "\t$biggest\
    \ = -1;\n\tfor ($i = $x; $i <= $y; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$biggest\
    \ = $i;\n\t\t}\n\t}\n\treturn $biggest;\n}\n\n/* This function takes a positive\
    \ integer number n and returns the\nsum of all the even numbers in the range [1,\
    \ n] inclusive.\nFor example:\n>>> sum_even(5)\n6\n>>> sum_even(10)\n30*/", "\t\
    if ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x + 1 == $y) {\n\t\treturn -1;\n\
    \t} else {\n\t\treturn choose_num($x + 1, $y);\n\t}\n}\n\necho choose_num(12,\
    \ 15);\necho \"\\n\";\necho choose_num(13, 12);\necho \"\\n\";\necho choose_num(13,\
    \ 14);\necho \"\\n\";\necho choose_num(14, 14);\necho \"\\n\";\necho choose_num(15,\
    \ 15);\necho \"\\n\";\necho choose_num(16, 16);\necho \"\\n\";\necho choose_num(17,\
    \ 17);\necho \"\\n\";", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t\
    $x = $x + 1;\n\t\tif ($x <= $y) {\n\t\t\treturn $x;\n\t\t} else {\n\t\t\treturn\
    \ -1;\n\t\t}\n\t}\n}\n\necho choose_num(12, 15);\necho \"\\n\";\necho choose_num(13,\
    \ 12);\necho \"\\n\";", "\tif ($x > $y) {\n\t\treturn -1;\n\t}\n\tfor ($i = $y;\
    \ $i >= $x; $i--) {\n\t\tif ($i % 2 == 0) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\t\
    return -1;\n}\n\n/* This function takes a positive integer number n and returns\
    \ the\nsum of all the numbers from 1 to n inclusive.\nFor example:\n>>> sum_nums(5)\n\
    15\n>>> sum_nums(10)\n55*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if\
    \ ($x + 1 == $y) {\n\t\treturn -1;\n\t} else {\n\t\treturn choose_num($x + 1,\
    \ $y);\n\t}\n}\necho choose_num(12, 15);\necho \"\\n\";\necho choose_num(13, 12);\n\
    echo \"\\n\";", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\
    \t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn choose_num($x,\
    \ $y);\n\t\t}\n\t}\n}\n\n/* This function takes a positive integer number x and\
    \ returns the\nnumber of digits in x.\nFor example:\n>>> num_digits(123)\n3\n\
    >>> num_digits(123456789)\n9*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else\
    \ if ($x + 1 == $y) {\n\t\treturn -1;\n\t} else {\n\t\treturn choose_num($x +\
    \ 1, $y);\n\t}\n}\n\necho choose_num(12, 15);\necho \"<br>\";\necho choose_num(13,\
    \ 12);", "    $result = -1;\n    for ($i = $x; $i <= $y; $i++) {\n        if ($i\
    \ % 2 == 0) {\n            $result = $i;\n        }\n    }\n    return $result;\n\
    }\n\n/* This function takes a positive integer number n and returns the \nsum\
    \ of all the numbers from 1 to n inclusive.\nFor example:\n>>> sum_nums(5)\n15\n\
    >>> sum_nums(10)\n55*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\
    \t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn choose_num($x,\
    \ $y);\n\t\t}\n\t}\n}\n\n/* This function takes two positive numbers x and y and\
    \ returns the\nbiggest odd integer number that is in the range [x, y] inclusive.\
    \ If \nthere's no such number, then the function should return -1.\nFor example:\n\
    >>> choose_num(12, 15)\n15\n>>> choose_num(13, 12)\n-1*/", "\tif ($x % 2 == 0)\
    \ {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x <= $y) {\n\t\t\treturn\
    \ $x;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n}\n\n/* This function takes\
    \ a positive integer number n and returns the\nnumber of digits in the number.\n\
    For example:\n>>> count_digits(123)\n3\n>>> count_digits(0)\n1*/", "    $even\
    \ = [];\n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n   \
    \         $even[] = $i;\n        }\n    }\n    if (count($even) == 0) {\n    \
    \    return -1;\n    } else {\n        return max($even);\n    }\n}\n\n/* This\
    \ function takes a positive integer number n and returns the\nsum of all the digits\
    \ of n.\nFor example:\n>>> sum_of_digits(123)\n6\n>>> sum_of_digits(1)\n1\n>>>\
    \ sum_of_digits(0)\n0*/", "\tif ($x > $y) {\n\t\treturn -1;\n\t}\n\tfor ($i =\
    \ $y; $i >= $x; $i--) {\n\t\tif ($i % 2 == 0) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\
    \treturn -1;\n}\n\n/* This function takes a positive integer number and returns\
    \ the sum of\nall its digits.\nFor example:\n>>> sum_digits(1234)\n10\n>>> sum_digits(1)\n\
    1*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x % 2 == 1 && $y %\
    \ 2 == 0) {\n\t\treturn $y;\n\t} else {\n\t\treturn -1;\n\t}\n}\n\n/* This function\
    \ takes a positive integer x and returns the number of \ndigits in the number.\n\
    For example:\n>>> num_digits(123)\n3\n>>> num_digits(1)\n1\n>>> num_digits(0)\n\
    1*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x % 2 != 0 && $y %\
    \ 2 == 0) {\n\t\treturn $y;\n\t} else {\n\t\treturn -1;\n\t}\n}\n\n/* This function\
    \ takes a positive integer number n and returns the\nnumber of digits in n.\n\
    For example:\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n>>> num_digits(123456789)\n\
    9*/", "\t$biggest = -1;\n\tfor ($i = $x; $i <= $y; $i++) {\n\t\tif ($i % 2 ==\
    \ 0) {\n\t\t\t$biggest = $i;\n\t\t}\n\t}\n\treturn $biggest;\n}\necho choose_num(12,\
    \ 15) . \"\\n\";\necho choose_num(13, 12) . \"\\n\";", "\tif ($x % 2 == 0) {\n\
    \t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\
    \t} else {\n\t\t\treturn choose_num($x, $y);\n\t\t}\n\t}\n}\n\n/* This function\
    \ takes a positive integer n and returns the sum of all\nthe digits in n.\nFor\
    \ example:\n>>> sum_digits(123)\n6\n>>> sum_digits(45)\n9*/", "\tif ($x % 2 ==\
    \ 0) {\n\t\treturn $x;\n\t}\n\telseif ($y % 2 == 0) {\n\t\treturn $y;\n\t}\n\t\
    else {\n\t\treturn -1;\n\t}\n}\necho choose_num(12, 15);\necho \"<br>\";\necho\
    \ choose_num(13, 12);\necho \"<br>\";\necho choose_num(14, 15);\necho \"<br>\"\
    ;\necho choose_num(13, 14);\necho \"<br>\";\necho choose_num(13, 13);\necho \"\
    <br>\";\necho choose_num(12, 12);\necho \"<br>\";\necho choose_num(12, 13);\n\
    echo \"<br>\";\necho choose_num(15, 12);\necho \"<br>\";\necho choose_num(15,\
    \ 15);\necho \"<br>\";\necho choose_num(14, 14);\necho \"<br>\";\necho choose_num(14,\
    \ 13);\necho \"<br>\";\necho choose_num(14, 12);\necho \"<br>\";\necho choose_num(13,\
    \ 15);\necho \"<br>\";\necho choose_num(12, 14);\necho \"<br>\";\necho choose_num(15,\
    \ 13);\necho \"<br>\";\necho choose_num(13, 14);\necho \"<br>\";\necho choose_num(14,\
    \ 13);\necho \"<br>\";\necho choose_num(13, 13);\necho \"<br>\";\necho choose_num(12,\
    \ 12);\necho \"<br>\";\necho choose_num(12, 13);\necho \"<br>\";\necho choose_num(15,\
    \ 12);\necho \"<br>\";\necho choose_num(15, 15);\necho \"<br>\";\necho choose_num(14,\
    \ 14);\necho \"<br>\";\necho choose_num(14, 13);\necho \"<br>\";\necho choose_num(14,\
    \ 12);\necho \"<br>\";\necho choose_num(13, 15);\necho \"<br>\";\necho choose_num(12,\
    \ 14);\necho \"<br>\";\necho choose_num(15, 13);\necho \"<br>\";\necho choose_num",
  "\t$i = $x;\n\twhile ($i <= $y) {\n\t\tif ($i % 2 == 0) {\n\t\t\treturn $i;\n\t\t\
    }\n\t\t$i++;\n\t}\n\treturn -1;\n}\n\n/* This function takes a positive integer\
    \ number n and returns the\nsum of all the numbers from 1 to n inclusive.\nFor\
    \ example:\n>>> sum_nums(5)\n15\n>>> sum_nums(10)\n55*/", "    if ($x % 2 == 0)\
    \ {\n        return $x;\n    } else if ($x + 1 == $y) {\n        return -1;\n\
    \    } else {\n        return choose_num($x + 1, $y);\n    }\n}\n\n/* This function\
    \ takes a positive integer n and returns the sum of the\nfirst n positive integers.\n\
    For example:\n>>> sum_n(3)\n6\n>>> sum_n(5)\n15*/", "\t$biggest_even = -1;\n\t\
    for ($i = $x; $i <= $y; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$biggest_even =\
    \ $i;\n\t\t}\n\t}\n\treturn $biggest_even;\n}\n\n/* This function takes a positive\
    \ integer number n and returns the \nsum of all the numbers from 1 to n inclusive.\n\
    For example:\n>>> sum_numbers(3)\n6\n>>> sum_numbers(5)\n15*/", "    $max = -1;\n\
    \    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n           \
    \ $max = $i;\n        }\n    }\n    return $max;\n}", "    for ($i = $x; $i <=\
    \ $y; $i++) {\n        if ($i % 2 == 0) {\n            return $i;\n        }\n\
    \    }\n    return -1;\n}\n\n/* This function takes a positive integer number\
    \ n and returns the \nnumber of digits in n.\nFor example:\n>>> num_digits(123)\n\
    3\n>>> num_digits(12345)\n5*/", "    if ($x % 2 == 0) {\n        return $x;\n\
    \    } else {\n        $x++;\n        if ($x > $y) {\n            return -1;\n\
    \        } else {\n            return $x;\n        }\n    }\n}\n\n/* This function\
    \ takes a positive integer number n and returns the\nnumber of digits in n.\n\
    For example:\n>>> num_digits(123)\n3\n>>> num_digits(1)\n1\n>>> num_digits(0)\n\
    1*/", "    if ($x % 2 == 0) {\n        return $x;\n    } else if ($x + 1 <= $y)\
    \ {\n        return $x + 1;\n    } else {\n        return -1;\n    }\n}\n\n/*\
    \ This function takes a positive integer number n and returns the\nnumber of digits\
    \ in n.\nFor example:\n>>> num_digits(123)\n3\n>>> num_digits(12345)\n5\n>>> num_digits(0)\n\
    1*/", "    if ($x % 2 == 0) {\n        return $x;\n    } else {\n        $x++;\n\
    \        if ($x > $y) {\n            return -1;\n        } else {\n          \
    \  return $x;\n        }\n    }\n}", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t\
    } else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\t\
    return choose_num($x, $y);\n\t\t}\n\t}\n}\n\necho choose_num(12, 15);\necho \"\
    \\n\";\necho choose_num(13, 12);\necho \"\\n\";", "    $biggest = -1;\n    for\
    \ ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $biggest\
    \ = $i;\n        }\n    }\n    return $biggest;\n}\n\n/* This function takes a\
    \ positive integer number and returns the sum of \nall its digits.\nFor example:\n\
    >>> sum_digits(1234)\n10\n>>> sum_digits(0)\n0*/", "\t$biggest = -1;\n\tfor ($i\
    \ = $x; $i <= $y; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$biggest = $i;\n\t\t\
    }\n\t}\n\treturn $biggest;\n}\n\n/* This function takes a positive integer number\
    \ n and returns the \nnumber of digits in n.\nFor example:\n>>> num_digits(123)\n\
    3\n>>> num_digits(0)\n1\n>>> num_digits(1234)\n4*/", "\tif ($x % 2 == 0) {\n\t\
    \treturn $x;\n\t} else if ($x % 2 != 0 && $y % 2 == 0) {\n\t\treturn $y;\n\t}\
    \ else {\n\t\treturn -1;\n\t}\n}\n\n/* This function takes a positive integer\
    \ x and returns the number of\ndigits in the number x.\nFor example:\n>>> num_digits(123)\n\
    3\n>>> num_digits(0)\n1\n>>> num_digits(1234)\n4*/", "\t$max = -1;\n\tfor ($i\
    \ = $x; $i <= $y; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$max = $i;\n\t\t}\n\t\
    }\n\treturn $max;\n}\necho choose_num(12, 15);\necho \"\\n\";\necho choose_num(13,\
    \ 12);\necho \"\\n\";", "    if ($x % 2 == 0) {\n        return $x;\n    } else\
    \ if ($x % 2 != 0 && $y % 2 == 0) {\n        return $y;\n    } else {\n      \
    \  return -1;\n    }\n}\n\n/* This function takes a positive integer number and\
    \ returns the number \nof digits in it.\nFor example:\n>>> num_digits(123)\n3\n\
    >>> num_digits(123456789)\n9*/", "\tif ($x > $y) {\n\t\treturn -1;\n\t}\n\tfor\
    \ ($i = $y; $i >= $x; $i--) {\n\t\tif ($i % 2 == 0) {\n\t\t\treturn $i;\n\t\t\
    }\n\t}\n\treturn -1;\n}\n\n/* This function takes a string and returns the number\
    \ of words in it.\nFor example:\n>>> count_words(\"Hello world!\")\n2\n>>> count_words(\"\
    Hello\")\n1\n>>> count_words(\"\")\n0*/", "    if ($x > $y) {\n        return\
    \ -1;\n    }\n    if ($x % 2 == 0) {\n        return $x;\n    }\n    return choose_num($x\
    \ + 1, $y);\n}\n\n/* This function takes a positive integer n and returns the\
    \ sum of all\nthe integers from 1 to n inclusive.\nFor example:\n>>> sum_nums(5)\n\
    15\n>>> sum_nums(1)\n1*/", "    $biggest_even = -1;\n    for ($i = $x; $i <= $y;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $biggest_even = $i;\n     \
    \   }\n    }\n    return $biggest_even;\n}\n\n/* This function takes a positive\
    \ integer number n and returns the \nsmallest prime number that is bigger than\
    \ n. If there's no such number, \nthen the function should return -1.\nFor example:\n\
    >>> next_prime(5)\n7\n>>> next_prime(7)\n11\n>>> next_prime(8)\n11\n>>> next_prime(11)\n\
    13\n>>> next_prime(12)\n13\n>>> next_prime(13)\n17\n>>> next_prime(17)\n19\n>>>\
    \ next_prime(19)\n23\n>>> next_prime(23)\n29\n>>> next_prime(29)\n31\n>>> next_prime(31)\n\
    37\n>>> next_prime(37)\n41\n>>> next_prime(41)\n43\n>>> next_prime(43)\n47\n>>>\
    \ next_prime(47)\n53\n>>> next_prime(53)\n59\n>>> next_prime(59)\n61\n>>> next_prime(61)\n\
    67\n>>> next_prime(67)\n71\n>>> next_prime(71)\n73\n>>> next_prime(73)\n79\n>>>\
    \ next_prime(79)\n83\n>>> next_prime(83)\n89\n>>> next_prime(89)\n97\n>>> next_prime(97)\n\
    101\n>>> next_prime(101)\n103\n>>> next_prime(103)\n107\n>>> next_prime(107)\n\
    109\n>>> next_prime(109)\n113\n>>> next_prime(113)\n127\n>>> next_prime(127)\n\
    131\n>>> next_prime(131)\n137\n>>> next_prime(137)\n139\n>>> next_prime(139)\n\
    149\n>>> next_prime(149)\n151\n>>> next_prime(151)\n157\n>>> next_prime(157)\n\
    163\n>>> next_prime(163)\n167\n>>> next_prime(167)\n173\n>>> next_prime(", " \
    \   if ($x % 2 == 0) {\n        return $x;\n    } else if ($x + 1 <= $y) {\n \
    \       return $x + 1;\n    } else {\n        return -1;\n    }\n}\n\n/* This\
    \ function takes a positive integer n and returns the sum of all \nthe odd numbers\
    \ between 0 and n inclusive.\nFor example:\n>>> sum_odds(5)\n9\n>>> sum_odds(10)\n\
    25*/", "    if ($x % 2 == 0) {\n        return $x;\n    } else {\n        $x++;\n\
    \        return choose_num($x, $y);\n    }\n}\n\necho choose_num(12, 15);\necho\
    \ \"\\n\";\necho choose_num(13, 12);\necho \"\\n\";", "\tif ($x % 2 == 0) {\n\t\
    \treturn $x;\n\t} else if ($x + 1 == $y) {\n\t\treturn -1;\n\t} else {\n\t\treturn\
    \ choose_num($x + 1, $y);\n\t}\n}\n\necho choose_num(12, 15);\necho \"\\n\";\n\
    echo choose_num(13, 12);\necho \"\\n\";\necho choose_num(13, 14);\necho \"\\n\"\
    ;\necho choose_num(13, 15);\necho \"\\n\";\necho choose_num(13, 16);\necho \"\\\
    n\";\necho choose_num(13, 17);\necho \"\\n\";\necho choose_num(13, 18);\necho\
    \ \"\\n\";\necho choose_num(13, 19);\necho \"\\n\";\necho choose_num(13, 20);\n\
    echo \"\\n\";\necho choose_num(13, 21);\necho \"\\n\";\necho choose_num(13, 22);\n\
    echo \"\\n\";\necho choose_num(13, 23);\necho \"\\n\";\necho choose_num(13, 24);\n\
    echo \"\\n\";\necho choose_num(13, 25);\necho \"\\n\";\necho choose_num(13, 26);\n\
    echo \"\\n\";\necho choose_num(13, 27);\necho \"\\n\";\necho choose_num(13, 28);\n\
    echo \"\\n\";\necho choose_num(13, 29);\necho \"\\n\";\necho choose_num(13, 30);\n\
    echo \"\\n\";\necho choose_num(13, 31);\necho \"\\n\";\necho choose_num(13, 32);\n\
    echo \"\\n\";\necho choose_num(13, 33);\necho \"\\n\";\necho choose_num(13, 34);\n\
    echo \"\\n\";\necho choose_num(13, 35);\necho \"\\n\";\necho choose_num(13, 36);\n\
    echo \"\\n\";\necho choose_num(13, 37);\necho \"\\n\";\necho choose_num(13, 38);\n\
    echo \"\\n\";\necho choose_num(13, 39);\necho \"\\n\";\necho choose_num(13, 40);\n\
    echo \"\\n\";\necho choose_num(13, 41);\necho", "\t$biggest = -1;\n\tfor ($i =\
    \ $x; $i <= $y; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$biggest = $i;\n\t\t}\n\
    \t}\n\treturn $biggest;\n}", "    if ($x > $y) {\n        return -1;\n    }\n\
    \    if ($x % 2 == 0) {\n        return $x;\n    }\n    return choose_num($x +\
    \ 1, $y);\n}\n\n/* This function takes a positive number n and returns the sum\
    \ of the\nfirst n odd numbers.\nFor example:\n>>> sum_odd(5)\n25\n>>> sum_odd(3)\n\
    9*/", "\tif ($x > $y) {\n\t\treturn -1;\n\t}\n\tfor ($i = $y; $i >= $x; $i--)\
    \ {\n\t\tif ($i % 2 == 0) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n\
    /* This function takes a string and returns the number of times that\nthe letter\
    \ 'a' appears in the string.\nFor example:\n>>> count_a(\"apple\")\n1\n>>> count_a(\"\
    banana\")\n3*/", "    if ($x % 2 == 0) {\n        return $x;\n    } else if ($x\
    \ + 1 <= $y) {\n        return $x + 1;\n    } else {\n        return -1;\n   \
    \ }\n}\n\n/* This function takes a positive integer number n and returns the \n\
    number of digits in n.\nFor example:\n>>> num_digits(123)\n3\n>>> num_digits(123456789)\n\
    9*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x\
    \ > $y) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn choose_num($x, $y);\n\t\
    \t}\n\t}\n}\n\n/* This function takes a positive integer number n and returns\
    \ the \nsum of all the digits in n.\nFor example:\n>>> sum_digits(123)\n6\n>>>\
    \ sum_digits(45)\n9*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t\
    $x++;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn choose_num($x,\
    \ $y);\n\t\t}\n\t}\n}\n\necho choose_num(12, 15);\necho \"\\n\";\necho choose_num(13,\
    \ 12);\necho \"\\n\";\necho choose_num(12, 12);\necho \"\\n\";\necho choose_num(13,\
    \ 13);\necho \"\\n\";\necho choose_num(13, 14);\necho \"\\n\";\necho choose_num(14,\
    \ 13);\necho \"\\n\";\necho choose_num(14, 14);\necho \"\\n\";\necho choose_num(14,\
    \ 15);\necho \"\\n\";\necho choose_num(15, 14);\necho \"\\n\";\necho choose_num(15,\
    \ 15);\necho \"\\n\";\necho choose_num(15, 16);\necho \"\\n\";\necho choose_num(16,\
    \ 15);\necho \"\\n\";\necho choose_num(16, 16);\necho \"\\n\";\necho choose_num(16,\
    \ 17);\necho \"\\n\";\necho choose_num(17, 16);\necho \"\\n\";\necho choose_num(17,\
    \ 17);\necho \"\\n\";\necho choose_num(17, 18);\necho \"\\n\";\necho choose_num(18,\
    \ 17);\necho \"\\n\";\necho choose_num(18, 18);\necho \"\\n\";\necho choose_num(18,\
    \ 19);\necho \"\\n\";\necho choose_num(19, 18);\necho \"\\n\";\necho choose_num(19,\
    \ 19);\necho \"\\n\";\necho choose_num(19, 20);\necho \"\\n\";\necho choose_num(20,\
    \ 19);\necho \"\\n\";\necho choose_num(20, 20);\necho \"\\n\";\necho choose_num(20,\
    \ 21);\necho \"\\n\";\necho choose_num(21, 20);\necho \"\\n\";\necho choose_num(21,\
    \ 21);\necho \"\\n\";\necho choose_num(21, 22);\necho \"\\n", "\tif ($x % 2 ==\
    \ 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn\
    \ -1;\n\t\t} else {\n\t\t\treturn choose_num($x, $y);\n\t\t}\n\t}\n}\necho choose_num(12,\
    \ 15);\necho \"<br>\";\necho choose_num(13, 12);", "\tif ($x % 2 == 0) {\n\t\t\
    return $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\t\
    } else {\n\t\t\treturn choose_num($x, $y);\n\t\t}\n\t}\n}\necho choose_num(12,\
    \ 15);\necho \"<br>\";\necho choose_num(13, 12);", "\t$i = $x;\n\twhile ($i <=\
    \ $y) {\n\t\tif ($i % 2 == 0) {\n\t\t\treturn $i;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ -1;\n}\n\n/* This function takes a positive integer x and returns the sum of\
    \ all\nthe digits in x.\nFor example:\n>>> sum_digits(123)\n6\n>>> sum_digits(12)\n\
    3\n>>> sum_digits(0)\n0*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t}\n\telse\
    \ {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\t}\n\t\telse {\n\t\t\t\
    return $x;\n\t\t}\n\t}\n}\n\n/* This function takes a positive integer number\
    \ n and returns the\nnumber of digits in n.\nFor example:\n>>> num_digits(123)\n\
    3\n>>> num_digits(0)\n1\n>>> num_digits(1234)\n4*/", "\tif ($x % 2 == 0) {\n\t\
    \treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x <= $y) {\n\t\t\treturn $x;\n\t\
    \t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n}\n\necho choose_num(12, 15);\necho\
    \ \"\\n\";\necho choose_num(13, 12);\necho \"\\n\";\necho choose_num(12, 12);\n\
    echo \"\\n\";\necho choose_num(13, 13);\necho \"\\n\";\necho choose_num(14, 14);\n\
    echo \"\\n\";\necho choose_num(15, 15);\necho \"\\n\";\necho choose_num(16, 16);\n\
    echo \"\\n\";\necho choose_num(17, 17);\necho \"\\n\";\necho choose_num(18, 18);\n\
    echo \"\\n\";\necho choose_num(19, 19);\necho \"\\n\";\necho choose_num(20, 20);\n\
    echo \"\\n\";\necho choose_num(21, 21);\necho \"\\n\";\necho choose_num(22, 22);\n\
    echo \"\\n\";\necho choose_num(23, 23);\necho \"\\n\";\necho choose_num(24, 24);\n\
    echo \"\\n\";\necho choose_num(25, 25);\necho \"\\n\";\necho choose_num(26, 26);\n\
    echo \"\\n\";\necho choose_num(27, 27);\necho \"\\n\";\necho choose_num(28, 28);\n\
    echo \"\\n\";\necho choose_num(29, 29);\necho \"\\n\";\necho choose_num(30, 30);\n\
    echo \"\\n\";\necho choose_num(31, 31);\necho \"\\n\";\necho choose_num(32, 32);\n\
    echo \"\\n\";\necho choose_num(33, 33);\necho \"\\n\";\necho choose_num(34, 34);\n\
    echo \"\\n\";\necho choose_num(35, 35);\necho \"\\n\";\necho choose_num(36, 36);\n\
    echo \"\\n\";\necho choose_num(37, 37);\necho \"\\n\";\necho choose_num(38, 38);\n\
    echo \"\\n\";\necho choose_num", "\tif ($x > $y) {\n\t\treturn -1;\n\t}\n\tfor\
    \ ($i = $y; $i >= $x; $i--) {\n\t\tif ($i % 2 == 0) {\n\t\t\treturn $i;\n\t\t\
    }\n\t}\n\treturn -1;\n}\n\n/* This function takes a positive integer number n\
    \ and returns the \nsum of all the digits of n.\nFor example:\n>>> sum_digits(123)\n\
    6\n>>> sum_digits(12)\n3\n>>> sum_digits(0)\n0\n>>> sum_digits(1)\n1*/", "\tif\
    \ ($x > $y) {\n\t\treturn -1;\n\t}\n\tfor ($i = $y; $i >= $x; $i--) {\n\t\tif\
    \ ($i % 2 == 0) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\treturn -1;\n}\necho choose_num(12,\
    \ 15);\necho \"\\n\";\necho choose_num(13, 12);\necho \"\\n\";", "    if ($x %\
    \ 2 == 0) {\n        return $x;\n    } else {\n        return choose_num($x +\
    \ 1, $y);\n    }\n}\n\necho choose_num(12, 15);\necho \"\\n\";\necho choose_num(13,\
    \ 12);\necho \"\\n\";", "\tif ($x % 2 != 0) {\n\t\t$x++;\n\t}\n\tif ($y % 2 !=\
    \ 0) {\n\t\t$y--;\n\t}\n\tif ($x > $y) {\n\t\treturn -1;\n\t}\n\treturn $y;\n\
    }\n\necho choose_num(12, 15);\necho \"<br>\";\necho choose_num(13, 12);\necho\
    \ \"<br>\";\necho choose_num(13, 13);\necho \"<br>\";\necho choose_num(13, 14);\n\
    echo \"<br>\";\necho choose_num(13, 15);\necho \"<br>\";\necho choose_num(13,\
    \ 16);\necho \"<br>\";\necho choose_num(13, 17);\necho \"<br>\";\necho choose_num(13,\
    \ 18);\necho \"<br>\";\necho choose_num(13, 19);\necho \"<br>\";\necho choose_num(13,\
    \ 20);\necho \"<br>\";\necho choose_num(13, 21);\necho \"<br>\";\necho choose_num(13,\
    \ 22);\necho \"<br>\";\necho choose_num(13, 23);\necho \"<br>\";\necho choose_num(13,\
    \ 24);\necho \"<br>\";\necho choose_num(13, 25);\necho \"<br>\";\necho choose_num(13,\
    \ 26);\necho \"<br>\";\necho choose_num(13, 27);\necho \"<br>\";\necho choose_num(13,\
    \ 28);\necho \"<br>\";\necho choose_num(13, 29);\necho \"<br>\";\necho choose_num(13,\
    \ 30);\necho \"<br>\";\necho choose_num(13, 31);\necho \"<br>\";\necho choose_num(13,\
    \ 32);\necho \"<br>\";\necho choose_num(13, 33);\necho \"<br>\";\necho choose_num(13,\
    \ 34);\necho \"<br>\";\necho choose_num(13, 35);\necho \"<br>\";\necho choose_num(13,\
    \ 36);\necho \"<br>\";\necho choose_num(13, 37);\necho \"<br>\";\necho choose_num(13,\
    \ 38);", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x + 1 == $y) {\n\
    \t\treturn -1;\n\t} else {\n\t\treturn choose_num($x + 1, $y);\n\t}\n}\n\necho\
    \ choose_num(12, 15);\necho \"<br>\";\necho choose_num(13, 12);", "    $max =\
    \ -1;\n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n     \
    \       $max = $i;\n        }\n    }\n    return $max;\n}\n\n/* This function\
    \ takes a positive integer n and returns the sum of all\nthe digits of the number.\n\
    For example:\n>>> sum_digits(123)\n6\n>>> sum_digits(12)\n3*/", "\tif ($x % 2\
    \ == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn\
    \ -1;\n\t\t} else {\n\t\t\treturn choose_num($x, $y);\n\t\t}\n\t}\n}\n\necho choose_num(12,\
    \ 15);\necho \"\\n\";\necho choose_num(13, 12);\necho \"\\n\";\necho choose_num(12,\
    \ 12);\necho \"\\n\";\necho choose_num(13, 13);\necho \"\\n\";\necho choose_num(14,\
    \ 14);\necho \"\\n\";\necho choose_num(15, 15);\necho \"\\n\";\necho choose_num(16,\
    \ 16);\necho \"\\n\";\necho choose_num(17, 17);\necho \"\\n\";\necho choose_num(18,\
    \ 18);\necho \"\\n\";\necho choose_num(19, 19);\necho \"\\n\";\necho choose_num(20,\
    \ 20);\necho \"\\n\";\necho choose_num(21, 21);\necho \"\\n\";\necho choose_num(22,\
    \ 22);\necho \"\\n\";\necho choose_num(23, 23);\necho \"\\n\";\necho choose_num(24,\
    \ 24);\necho \"\\n\";\necho choose_num(25, 25);\necho \"\\n\";\necho choose_num(26,\
    \ 26);\necho \"\\n\";\necho choose_num(27, 27);\necho \"\\n\";\necho choose_num(28,\
    \ 28);\necho \"\\n\";\necho choose_num(29, 29);\necho \"\\n\";\necho choose_num(30,\
    \ 30);\necho \"\\n\";\necho choose_num(31, 31);\necho \"\\n\";\necho choose_num(32,\
    \ 32);\necho \"\\n\";\necho choose_num(33, 33);\necho \"\\n\";\necho choose_num(34,\
    \ 34);\necho \"\\n\";\necho choose_num(35, 35);\necho \"\\n\";\necho choose_num(36,\
    \ 36);\necho \"\\n\";\necho choose_num(37, 37);\necho \"\\n\";\necho choose_num(38,\
    \ 38);\necho \"\\n", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\
    \t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn choose_num($x,\
    \ $y);\n\t\t}\n\t}\n}\necho choose_num(12, 15);\necho \"<br>\";\necho choose_num(13,\
    \ 12);", "\tif ($x > $y) {\n\t\treturn -1;\n\t}\n\tfor ($i = $y; $i >= $x; $i--)\
    \ {\n\t\tif ($i % 2 == 0) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n\
    /* This function takes a positive integer number n and returns the\nnumber of\
    \ digits in n.\nFor example:\n>>> num_digits(123)\n3\n>>> num_digits(1)\n1*/",
  "    if ($x % 2 == 0) {\n        return $x;\n    } else {\n        $x++;\n     \
    \   return choose_num($x, $y);\n    }\n}\n\necho choose_num(12, 15);", "    if\
    \ ($x % 2 == 0) {\n        return $x;\n    } else if ($x + 1 <= $y) {\n      \
    \  return $x + 1;\n    } else {\n        return -1;\n    }\n}\n\n/* This function\
    \ takes a positive integer n and returns the sum of the \nfirst n odd numbers.\n\
    For example:\n>>> sum_odd(5)\n25\n>>> sum_odd(3)\n9*/", "\tif ($x % 2 == 0) {\n\
    \t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\
    \t} else {\n\t\t\treturn choose_num($x, $y);\n\t\t}\n\t}\n}\n\necho choose_num(12,\
    \ 15);\necho \"\\n\";\necho choose_num(13, 12);\necho \"\\n\";", "    if ($x >\
    \ $y) {\n        return -1;\n    }\n    if ($x % 2 == 0) {\n        return $x;\n\
    \    }\n    if ($x % 2 == 1) {\n        return choose_num($x + 1, $y);\n    }\n\
    }\n\n/* This function takes a positive integer number n and returns the\nnumber\
    \ of digits in the number.\nFor example:\n>>> num_digits(123)\n3\n>>> num_digits(12345)\n\
    5*/", "\t$even = 0;\n\tif ($x % 2 == 0) {\n\t\t$even = $x;\n\t} else {\n\t\t$even\
    \ = $x + 1;\n\t}\n\tif ($even > $y) {\n\t\treturn -1;\n\t} else {\n\t\treturn\
    \ $even;\n\t}\n}\n\n/* This function takes a string and returns the number of\
    \ vowels in it.\nFor example:\n>>> count_vowels(\"hello\")\n2\n>>> count_vowels(\"\
    world\")\n1*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x % 2 !=\
    \ 0 && $y % 2 == 0) {\n\t\treturn $y;\n\t} else {\n\t\treturn -1;\n\t}\n}\n\n\
    /* This function takes a positive integer number n and returns the \nnumber of\
    \ digits in n.\nFor example:\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n>>>\
    \ num_digits(123456789)\n9*/", "    if ($x % 2 == 0) {\n        return $x;\n \
    \   } else if ($x % 2 != 0 && $y % 2 == 0) {\n        return $y;\n    } else {\n\
    \        return -1;\n    }\n}\n\n/* This function takes a positive integer number\
    \ and returns the sum of \nall the digits of that number.\nFor example:\n>>> sum_digits(123)\n\
    6\n>>> sum_digits(12)\n3\n>>> sum_digits(0)\n0\n*/", "\t$max = -1;\n\tfor ($i\
    \ = $x; $i <= $y; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$max = $i;\n\t\t}\n\t\
    }\n\treturn $max;\n}\n\n/* This function takes a positive integer number n and\
    \ returns the \nsum of all the numbers in the range [1, n] inclusive.\nFor example:\n\
    >>> sum_nums(3)\n6\n>>> sum_nums(5)\n15*/", "\tif ($x % 2 == 0) {\n\t\treturn\
    \ $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\t} else\
    \ {\n\t\t\treturn choose_num($x, $y);\n\t\t}\n\t}\n}\n\necho choose_num(12, 15);\n\
    echo \"\\n\";\necho choose_num(13, 12);\necho \"\\n\";", "\tif ($x % 2 == 0) {\n\
    \t\treturn $x;\n\t} else if ($x % 2 != 0 && $y % 2 == 0) {\n\t\treturn $y;\n\t\
    } else {\n\t\treturn -1;\n\t}\n}\n\necho choose_num(12, 15);\necho \"\\n\";\n\
    echo choose_num(13, 12);\necho \"\\n\";", "    if ($x % 2 == 0) {\n        return\
    \ $x;\n    } else if ($x + 1 <= $y) {\n        return $x + 1;\n    } else {\n\
    \        return -1;\n    }\n}\n\n/* This function takes a positive integer n and\
    \ returns the sum of all\nthe integers from 1 to n inclusive.\nFor example:\n\
    >>> sum_of_n(3)\n6\n>>> sum_of_n(5)\n15*/", "\t$biggest = -1;\n\tfor ($i = $x;\
    \ $i <= $y; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$biggest = $i;\n\t\t}\n\t}\n\
    \treturn $biggest;\n}\n\n/* This function takes a positive integer number n and\
    \ returns the \nsum of the first n odd numbers.\nFor example:\n>>> sum_odd(3)\n\
    9\n>>> sum_odd(5)\n25*/", "\t$max = -1;\n\tfor ($i = $x; $i <= $y; $i++) {\n\t\
    \tif ($i % 2 == 0) {\n\t\t\t$max = $i;\n\t\t}\n\t}\n\treturn $max;\n}\n\n/* This\
    \ function takes a positive integer number n and returns the \nnumber of digits\
    \ in the number.\nFor example:\n>>> digits_count(123)\n3\n>>> digits_count(0)\n\
    1*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x\
    \ <= $y) {\n\t\t\treturn $x;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n}\n\n\
    echo choose_num(12, 15);\necho \"\\n\";\necho choose_num(13, 12);\necho \"\\n\"\
    ;", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x % 2 == 1) {\n\t\t$x\
    \ = $x + 1;\n\t\treturn $x;\n\t}\n}\necho choose_num(12, 15);\necho \"\\n\";\n\
    echo choose_num(13, 12);\necho \"\\n\";", "\tif ($x > $y) {\n\t\treturn -1;\n\t\
    }\n\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t}\n\treturn choose_num($x + 1, $y);\n\
    }\n\n/* This function takes a positive integer n and returns the sum of all\n\
    the positive integers that are less than n.\nFor example:\n>>> sum_less(5)\n10\n\
    >>> sum_less(10)\n45*/", "\tif ($x > $y) {\n\t\treturn -1;\n\t}\n\tfor ($i = $y;\
    \ $i >= $x; $i--) {\n\t\tif ($i % 2 == 0) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\t\
    return -1;\n}\n\n/* This function takes a string and returns the number of vowels\
    \ in it.\nFor example:\n>>> count_vowels(\"hello\")\n2\n>>> count_vowels(\"world\"\
    )\n1*/", "    if ($x > $y) {\n        return -1;\n    }\n    for ($i = $y; $i\
    \ >= $x; $i--) {\n        if ($i % 2 == 0) {\n            return $i;\n       \
    \ }\n    }\n    return -1;\n}\n\n/* This function takes a positive integer number\
    \ n and returns the \nbiggest even integer number that is in the range [1, n]\
    \ inclusive. If \nthere's no such number, then the function should return -1.\n\
    For example:\n>>> choose_num_2(12)\n12\n>>> choose_num_2(13)\n-1*/", "\tif ($x\
    \ % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x % 2 != 0 && $y % 2 == 0) {\n\t\t\
    return $y;\n\t} else {\n\t\treturn -1;\n\t}\n}\n\n/* This function takes a positive\
    \ integer number n and returns the\nnumber of digits in the number.\nFor example:\n\
    >>> num_digits(123)\n3\n>>> num_digits(123456789)\n9*/", "\tif ($x % 2 == 0) {\n\
    \t\treturn $x;\n\t}\n\telseif ($y % 2 == 0) {\n\t\treturn $y;\n\t}\n\telse {\n\
    \t\treturn -1;\n\t}\n}\necho choose_num(12, 15);\necho \"<br>\";\necho choose_num(13,\
    \ 12);", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x = $x + 1;\n\
    \t\tif ($x <= $y) {\n\t\t\treturn $x;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\
    \t}\n}\n\necho choose_num(12, 15);\necho \"\\n\";\necho choose_num(13, 12);\n\
    echo \"\\n\";", "    if ($x % 2 == 0) {\n        return $x;\n    } else if ($x\
    \ + 1 <= $y) {\n        return $x + 1;\n    } else {\n        return -1;\n   \
    \ }\n}\n\n/* This function takes a positive integer n and returns the sum of all\n\
    the positive integers that are less than or equal to n.\nFor example:\n>>> sum_nums(3)\n\
    6\n>>> sum_nums(5)\n15*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if\
    \ ($x + 1 <= $y) {\n\t\treturn $x + 1;\n\t} else {\n\t\treturn -1;\n\t}\n}\n\n\
    /* This function takes a positive integer n and returns the sum of all\nthe positive\
    \ integers that are less than n.\nFor example:\n>>> sum_of_less_nums(5)\n10\n\
    >>> sum_of_less_nums(10)\n45*/", "\t$max = -1;\n\tfor ($i = $x; $i <= $y; $i++)\
    \ {\n\t\tif ($i % 2 == 0) {\n\t\t\t$max = $i;\n\t\t}\n\t}\n\treturn $max;\n}\n\
    \necho choose_num(12, 15);\necho \"\\n\";\necho choose_num(13, 12);\necho \"\\\
    n\";\n\n/* This function takes a positive integer number n and returns the \n\
    number of digits in n.\nFor example:\n>>> num_digits(123)\n3\n>>> num_digits(123456789)\n\
    9*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\twhile\
    \ ($x <= $y) {\n\t\t\tif ($x % 2 == 0) {\n\t\t\t\treturn $x;\n\t\t\t}\n\t\t\t\
    $x++;\n\t\t}\n\t}\n\treturn -1;\n}\necho choose_num(12, 15);\necho \"<br>\";\n\
    echo choose_num(13, 12);\necho \"<br>\";\necho choose_num(12, 12);\necho \"<br>\"\
    ;\necho choose_num(13, 13);\necho \"<br>\";\necho choose_num(14, 14);\necho \"\
    <br>\";\necho choose_num(15, 15);\necho \"<br>\";\necho choose_num(16, 16);\n\
    echo \"<br>\";\necho choose_num(17, 17);\necho \"<br>\";\necho choose_num(18,\
    \ 18);\necho \"<br>\";\necho choose_num(19, 19);\necho \"<br>\";\necho choose_num(20,\
    \ 20);\necho \"<br>\";\necho choose_num(21, 21);\necho \"<br>\";\necho choose_num(22,\
    \ 22);\necho \"<br>\";\necho choose_num(23, 23);\necho \"<br>\";\necho choose_num(24,\
    \ 24);\necho \"<br>\";\necho choose_num(25, 25);\necho \"<br>\";\necho choose_num(26,\
    \ 26);\necho \"<br>\";\necho choose_num(27, 27);\necho \"<br>\";\necho choose_num(28,\
    \ 28);\necho \"<br>\";\necho choose_num(29, 29);\necho \"<br>\";\necho choose_num(30,\
    \ 30);\necho \"<br>\";\necho choose_num(31, 31);\necho \"<br>\";\necho choose_num(32,\
    \ 32);\necho \"<br>\";\necho choose_num(33, 33);\necho \"<br>\";\necho choose_num(34,\
    \ 34);\necho \"<br>\";\necho choose_num(35, 35);\necho \"<br>\";\necho choose_num(36",
  "\t$numbers = range($x, $y);\n\t$evens = array();\n\tforeach ($numbers as $number)\
    \ {\n\t\tif ($number % 2 == 0) {\n\t\t\t$evens[] = $number;\n\t\t}\n\t}\n\tif\
    \ (empty($evens)) {\n\t\treturn -1;\n\t} else {\n\t\treturn max($evens);\n\t}\n\
    }\n\necho choose_num(12, 15);\necho \"\\n\";\necho choose_num(13, 12);\necho \"\
    \\n\";", "\tif ($x > $y) {\n\t\treturn -1;\n\t}\n\tif ($x % 2 == 0) {\n\t\treturn\
    \ $x;\n\t}\n\treturn choose_num($x + 1, $y);\n}\n\necho choose_num(12, 15);\n\
    echo \"\\n\";\necho choose_num(13, 12);\necho \"\\n\";", "\tif ($x % 2 == 0) {\n\
    \t\treturn $x;\n\t} else if ($x % 2 != 0 && $y % 2 == 0) {\n\t\treturn $y;\n\t\
    } else {\n\t\treturn -1;\n\t}\n}\necho choose_num(12, 15);\necho \"\\n\";\necho\
    \ choose_num(13, 12);\necho \"\\n\";\n\n/* This function takes a string and returns\
    \ the number of vowels in it.\nFor example:\n>>> count_vowels(\"hello\")\n2\n\
    >>> count_vowels(\"world\")\n1*/", "    if ($x % 2 == 0) {\n        $even = $x;\n\
    \    } else {\n        $even = $x + 1;\n    }\n    if ($even > $y) {\n       \
    \ return -1;\n    } else {\n        return $even;\n    }\n}\n\n/* This function\
    \ takes a string and returns a new string with the same\ncharacters but in reverse\
    \ order.\nFor example:\n>>> reverse_string(\"Hello\")\n\"olleH\"\n>>> reverse_string(\"\
    Goodbye\")\n\"eybdooG\"*/", "    if ($x % 2 == 0) {\n        return $x;\n    }\
    \ else {\n        $x++;\n        if ($x <= $y) {\n            return $x;\n   \
    \     } else {\n            return -1;\n        }\n    }\n}\n\n/* This function\
    \ takes a positive integer number n and returns the\nnumber of digits in n.\n\
    For example:\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n>>> num_digits(123456789)\n\
    9*/", "    $max = -1;\n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2\
    \ == 0) {\n            $max = $i;\n        }\n    }\n    return $max;\n}\n\n/*\
    \ This function takes a positive integer number and returns the number \nof digits\
    \ in it.\nFor example:\n>>> num_digits(123)\n3\n>>> num_digits(12)\n2\n>>> num_digits(0)\n\
    1\n>>> num_digits(-123)\n-1*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t}\n\t\
    else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\t}\n\t\telse {\n\t\
    \t\treturn $x;\n\t\t}\n\t}\n}\necho choose_num(12, 15) . \"\\n\";\necho choose_num(13,\
    \ 12) . \"\\n\";", "  $biggest = -1;\n  for ($i = $x; $i <= $y; $i++) {\n    if\
    \ ($i % 2 == 0) {\n      $biggest = $i;\n    }\n  }\n  return $biggest;\n}\n\n\
    /* This function takes a positive integer n and returns the sum of all\nthe even\
    \ numbers in the range [1, n] inclusive.\nFor example:\n>>> sum_even(5)\n6\n>>>\
    \ sum_even(10)\n30*/", "    if ($x % 2 == 0) {\n        return $x;\n    } else\
    \ {\n        $x++;\n        if ($x > $y) {\n            return -1;\n        }\
    \ else {\n            return $x;\n        }\n    }\n}\n\n/* This function takes\
    \ two positive numbers x and y and returns the\nsmallest odd integer number that\
    \ is in the range [x, y] inclusive. If \nthere's no such number, then the function\
    \ should return -1.\nFor example:\n>>> choose_num(12, 15)\n13\n>>> choose_num(13,\
    \ 12)\n-1*/", "\t$max = -1;\n\tfor ($i = $x; $i <= $y; $i++) {\n\t\tif ($i % 2\
    \ == 0) {\n\t\t\t$max = $i;\n\t\t}\n\t}\n\treturn $max;\n}\n\n/* This function\
    \ takes a positive integer number n and returns the \nnumber of digits in n.\n\
    For example:\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n>>> num_digits(1234)\n\
    4*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x\
    \ > $y) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn choose_num($x, $y);\n\t\
    \t}\n\t}\n}\n\necho choose_num(12, 15);\necho \"\\n\";\necho choose_num(13, 12);\n\
    echo \"\\n\";", "    if ($x > $y) {\n        $temp = $x;\n        $x = $y;\n \
    \       $y = $temp;\n    }\n    for ($i = $y; $i >= $x; $i--) {\n        if ($i\
    \ % 2 == 0) {\n            return $i;\n        }\n    }\n    return -1;\n}\n\n\
    /* This function takes a positive integer n and returns the sum of all \nthe integers\
    \ from 1 to n inclusive.\nFor example:\n>>> sum_to(5)\n15\n>>> sum_to(10)\n55*/",
  "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x + 1 == $y) {\n\t\treturn\
    \ -1;\n\t} else {\n\t\treturn choose_num($x + 1, $y);\n\t}\n}\n\n/* This function\
    \ takes a positive integer number n and returns the\nsum of all the numbers in\
    \ the range [1, n] inclusive.\nFor example:\n>>> sum_nums(5)\n15\n>>> sum_nums(10)\n\
    55*/", "\t$numbers = range($x, $y);\n\t$evens = array();\n\tforeach ($numbers\
    \ as $number) {\n\t\tif ($number % 2 == 0) {\n\t\t\t$evens[] = $number;\n\t\t\
    }\n\t}\n\tif (count($evens) == 0) {\n\t\treturn -1;\n\t} else {\n\t\treturn max($evens);\n\
    \t}\n}\n\n/* This function takes a positive integer number n and returns the\n\
    number of digits in the number.\nFor example:\n>>> num_digits(123)\n3\n>>> num_digits(0)\n\
    1*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x + 1 <= $y && ($x\
    \ + 1) % 2 == 0) {\n\t\treturn $x + 1;\n\t} else {\n\t\treturn -1;\n\t}\n}\n\n\
    /* This function takes two positive numbers x and y and returns the\nbiggest odd\
    \ integer number that is in the range [x, y] inclusive. If \nthere's no such number,\
    \ then the function should return -1.\nFor example:\n>>> choose_num(12, 15)\n\
    15\n>>> choose_num(13, 12)\n-1*/", "    if ($x % 2 == 0) {\n        return $x;\n\
    \    } else if ($x + 1 <= $y) {\n        return $x + 1;\n    } else {\n      \
    \  return -1;\n    }\n}\n\n/* This function takes a string and returns the number\
    \ of vowels in it.\nFor example:\n>>> count_vowels(\"Hello, world!\")\n3\n>>>\
    \ count_vowels(\"The quick brown fox jumps over the lazy dog.\")\n11*/", "\tif\
    \ ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x % 2 == 1 && $y % 2 == 0) {\n\
    \t\treturn $y;\n\t} else {\n\t\treturn -1;\n\t}\n}\n\n/* This function takes a\
    \ positive integer n and returns the sum of all\nthe numbers from 1 to n inclusive.\n\
    For example:\n>>> sum_nums(3)\n6\n>>> sum_nums(5)\n15*/", "\tif ($x % 2 == 0)\
    \ {\n\t\treturn $x;\n\t} else if ($x + 1 == $y) {\n\t\treturn -1;\n\t} else {\n\
    \t\treturn choose_num($x + 1, $y);\n\t}\n}\n\necho choose_num(12, 15);\necho \"\
    \\n\";\necho choose_num(13, 12);\necho \"\\n\";\necho choose_num(12, 12);\necho\
    \ \"\\n\";\necho choose_num(13, 13);\necho \"\\n\";\necho choose_num(14, 14);\n\
    echo \"\\n\";\necho choose_num(15, 15);\necho \"\\n\";\necho choose_num(16, 16);\n\
    echo \"\\n\";\necho choose_num(17, 17);\necho \"\\n\";\necho choose_num(18, 18);\n\
    echo \"\\n\";\necho choose_num(19, 19);\necho \"\\n\";\necho choose_num(20, 20);\n\
    echo \"\\n\";\necho choose_num(21, 21);\necho \"\\n\";\necho choose_num(22, 22);\n\
    echo \"\\n\";\necho choose_num(23, 23);\necho \"\\n\";\necho choose_num(24, 24);\n\
    echo \"\\n\";\necho choose_num(25, 25);\necho \"\\n\";\necho choose_num(26, 26);\n\
    echo \"\\n\";\necho choose_num(27, 27);\necho \"\\n\";\necho choose_num(28, 28);\n\
    echo \"\\n\";\necho choose_num(29, 29);\necho \"\\n\";\necho choose_num(30, 30);\n\
    echo \"\\n\";\necho choose_num(31, 31);\necho \"\\n\";\necho choose_num(32, 32);\n\
    echo \"\\n\";\necho choose_num(33, 33);\necho \"\\n\";\necho choose_num(34, 34);\n\
    echo \"\\n\";\necho choose_num(35, 35);\necho \"\\n\";\necho choose_num(36, 36);\n\
    echo \"\\n\";\necho choose_num(37, 37);\necho \"\\n\";\necho choose_num(38, 38);\n\
    echo \"\\n\";\necho choose_num(39, 39);\necho", "    if ($x % 2 == 0) {\n    \
    \    return $x;\n    } else {\n        $x++;\n        if ($x > $y) {\n       \
    \     return -1;\n        } else {\n            return $x;\n        }\n    }\n\
    }\n\n/* This function takes a string and returns the number of vowels in it.\n\
    For example:\n>>> count_vowels(\"hello\")\n2\n>>> count_vowels(\"world\")\n1*/",
  "\tif ($x % 2 != 0) {\n\t\t$x++;\n\t}\n\tif ($y % 2 != 0) {\n\t\t$y--;\n\t}\n\t\
    if ($x > $y) {\n\t\treturn -1;\n\t}\n\treturn $y;\n}\n\n/* This function takes\
    \ two positive numbers x and y and returns the\nsmallest odd integer number that\
    \ is in the range [x, y] inclusive. If \nthere's no such number, then the function\
    \ should return -1.\nFor example:\n>>> choose_num(12, 15)\n13\n>>> choose_num(13,\
    \ 12)\n-1*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x % 2 == 1)\
    \ {\n\t\t$x++;\n\t\treturn $x;\n\t} else if ($y % 2 == 0) {\n\t\treturn $y;\n\t\
    } else if ($y % 2 == 1) {\n\t\t$y--;\n\t\treturn $y;\n\t} else {\n\t\treturn -1;\n\
    \t}\n}\n\n/* This function takes a positive integer number n and returns the \n\
    number of digits in the number.\nFor example:\n>>> num_digits(123)\n3\n>>> num_digits(123456789)\n\
    9*/", "\t$biggest = -1;\n\tfor ($i = $x; $i <= $y; $i++) {\n\t\tif ($i % 2 ==\
    \ 0) {\n\t\t\t$biggest = $i;\n\t\t}\n\t}\n\treturn $biggest;\n}\n\n/* This function\
    \ takes two positive numbers x and y and returns the\nbiggest odd integer number\
    \ that is in the range [x, y] inclusive. If \nthere's no such number, then the\
    \ function should return -1.\nFor example:\n>>> choose_num(12, 15)\n15\n>>> choose_num(13,\
    \ 12)\n-1*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\
    \tif ($x <= $y) {\n\t\t\treturn $x;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t\
    }\n}\n\necho choose_num(12, 15);\necho \"\\n\";\necho choose_num(13, 12);\necho\
    \ \"\\n\";\necho choose_num(12, 12);\necho \"\\n\";\necho choose_num(13, 13);\n\
    echo \"\\n\";\necho choose_num(14, 14);\necho \"\\n\";\necho choose_num(15, 15);\n\
    echo \"\\n\";\necho choose_num(16, 16);\necho \"\\n\";\necho choose_num(17, 17);\n\
    echo \"\\n\";\necho choose_num(18, 18);\necho \"\\n\";\necho choose_num(19, 19);\n\
    echo \"\\n\";\necho choose_num(20, 20);\necho \"\\n\";\necho choose_num(21, 21);\n\
    echo \"\\n\";\necho choose_num(22, 22);\necho \"\\n\";\necho choose_num(23, 23);\n\
    echo \"\\n\";\necho choose_num(24, 24);\necho \"\\n\";\necho choose_num(25, 25);\n\
    echo \"\\n\";\necho choose_num(26, 26);\necho \"\\n\";\necho choose_num(27, 27);\n\
    echo \"\\n\";\necho choose_num(28, 28);\necho \"\\n\";\necho choose_num(29, 29);\n\
    echo \"\\n\";\necho choose_num(30, 30);\necho \"\\n\";\necho choose_num(31, 31);\n\
    echo \"\\n\";\necho choose_num(32, 32);\necho \"\\n\";\necho choose_num(33, 33);\n\
    echo \"\\n\";\necho choose_num(34, 34);\necho \"\\n\";\necho choose_num(35, 35);\n\
    echo \"\\n\";\necho choose_num(36, 36);\necho \"\\n\";\necho choose_num(37, 37);\n\
    echo \"\\n\";\necho choose_num(38, 38);\necho \"\\n\";\necho choose_num", "  \
    \  $biggest = -1;\n    for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 ==\
    \ 0) {\n            $biggest = $i;\n        }\n    }\n    return $biggest;\n}\n\
    \n/* This function takes a positive integer number x and returns the\nsmallest\
    \ prime number that is greater than x. If there's no such number,\nthen the function\
    \ should return -1.\nFor example:\n>>> next_prime(2)\n3\n>>> next_prime(3)\n5\n\
    >>> next_prime(5)\n7\n>>> next_prime(7)\n11\n>>> next_prime(11)\n13\n>>> next_prime(13)\n\
    17\n>>> next_prime(17)\n19\n>>> next_prime(19)\n23\n>>> next_prime(23)\n29\n>>>\
    \ next_prime(29)\n31\n>>> next_prime(31)\n37\n>>> next_prime(37)\n41\n>>> next_prime(41)\n\
    43\n>>> next_prime(43)\n47\n>>> next_prime(47)\n53\n>>> next_prime(53)\n59\n>>>\
    \ next_prime(59)\n61\n>>> next_prime(61)\n67\n>>> next_prime(67)\n71\n>>> next_prime(71)\n\
    73\n>>> next_prime(73)\n79\n>>> next_prime(79)\n83\n>>> next_prime(83)\n89\n>>>\
    \ next_prime(89)\n97\n>>> next_prime(97)\n101\n>>> next_prime(101)\n103\n>>> next_prime(103)\n\
    107\n>>> next_prime(107)\n109\n>>> next_prime(109)\n113\n>>> next_prime(113)\n\
    127\n>>> next_prime(127)\n131\n>>> next_prime(131)\n137\n>>> next_prime(137)\n\
    139\n>>> next_prime(139)\n149\n>>> next_prime(149)\n151\n>>> next_prime(151)\n\
    157\n>>> next_prime(157)\n163\n>>> next_prime(163)\n167\n>>> next_prime(167)\n\
    173\n>>> next_prime(173)\n179\n>>> next_", "\tif ($x > $y) {\n\t\treturn -1;\n\
    \t}\n\tfor ($i = $y; $i >= $x; $i--) {\n\t\tif ($i % 2 == 0) {\n\t\t\treturn $i;\n\
    \t\t}\n\t}\n\treturn -1;\n}\n\n/* This function takes a positive integer n and\
    \ returns the sum of the\nfirst n odd numbers.\nFor example:\n>>> sum_odd(3)\n\
    9\n>>> sum_odd(4)\n16*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x\
    \ % 2 == 1 && $y % 2 == 0) {\n\t\treturn $y;\n\t} else {\n\t\treturn -1;\n\t}\n\
    }\necho choose_num(12, 15) . \"\\n\";\necho choose_num(13, 12) . \"\\n\";", "\t\
    $biggest = -1;\n\tfor ($i = $x; $i <= $y; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\
    \t$biggest = $i;\n\t\t}\n\t}\n\treturn $biggest;\n}\n\n/* This function takes\
    \ a positive integer n and returns the sum of all\nthe positive integers that\
    \ are less than n.\nFor example:\n>>> sum_of_less(5)\n10\n>>> sum_of_less(10)\n\
    45*/", "\tif ($x > $y) {\n\t\treturn -1;\n\t}\n\tif ($x % 2 == 0) {\n\t\treturn\
    \ $x;\n\t}\n\treturn choose_num($x + 1, $y);\n}\n\n/* This function takes a positive\
    \ integer number and returns the sum of \nall the digits of the number.\nFor example:\n\
    >>> sum_digits(123)\n6\n>>> sum_digits(1234)\n10*/", "\tif ($x % 2 == 0) {\n\t\
    \treturn $x;\n\t} else if ($x + 1 == $y) {\n\t\treturn -1;\n\t} else {\n\t\treturn\
    \ choose_num($x + 1, $y);\n\t}\n}\n\n/* This function takes a positive integer\
    \ n and returns the sum of all\nthe numbers from 1 to n.\nFor example:\n>>> sum_nums(5)\n\
    15\n>>> sum_nums(10)\n55*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\
    \t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn choose_num($x,\
    \ $y);\n\t\t}\n\t}\n}\necho choose_num(12, 15);\necho \"\\n\";\necho choose_num(13,\
    \ 12);\necho \"\\n\";", "    if ($x % 2 == 0) {\n        return $x;\n    } else\
    \ {\n        $x++;\n        if ($x > $y) {\n            return -1;\n        }\
    \ else {\n            return $x;\n        }\n    }\n}\n\n/* This function takes\
    \ a positive integer number x and returns the \nsmallest integer number that is\
    \ bigger than x and is a power of 2.\nFor example:\n>>> choose_num(12)\n16\n>>>\
    \ choose_num(15)\n16\n>>> choose_num(16)\n32*/", "\t$i = $x;\n\twhile ($i <= $y)\
    \ {\n\t\tif ($i % 2 == 0) {\n\t\t\treturn $i;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ -1;\n}\n\necho choose_num(12, 15);\necho \"\\n\";\necho choose_num(13, 12);\n\
    echo \"\\n\";", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x % 2 !=\
    \ 0 && $y % 2 == 0) {\n\t\treturn $y;\n\t} else {\n\t\treturn -1;\n\t}\n}\n\n\
    /* This function takes a positive integer number n and returns the \nnumber of\
    \ digits in n. For example:\n>>> num_digits(123)\n3\n>>> num_digits(123456789)\n\
    9*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x + 1 <= $y && $x +\
    \ 1 % 2 == 0) {\n\t\treturn $x + 1;\n\t} else {\n\t\treturn -1;\n\t}\n}\n\n/*\
    \ This function takes a string and returns the number of vowels in it.\nFor example:\n\
    >>> count_vowels(\"hello\")\n2\n>>> count_vowels(\"world\")\n1\n>>> count_vowels(\"\
    \")\n0*/", "\tif ($x > $y) {\n\t\treturn -1;\n\t}\n\tfor ($i = $y; $i >= $x; $i--)\
    \ {\n\t\tif ($i % 2 == 0) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n\
    /* This function takes a positive integer n and returns the sum of all\nthe positive\
    \ integers that are less than n and are divisible by 2 or 3.\nFor example:\n>>>\
    \ sum_div(5)\n8\n>>> sum_div(10)\n33*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\
    \t} else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\
    \treturn choose_num($x, $y);\n\t\t}\n\t}\n}\n\necho choose_num(12, 15) . \"\\\
    n\";\necho choose_num(13, 12) . \"\\n\";", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\
    \t} else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\
    \treturn choose_num($x, $y);\n\t\t}\n\t}\n}\n\n/* This function takes a positive\
    \ integer n and returns the sum of all\nthe integers from 1 to n inclusive.\n\
    For example:\n>>> sum_n(5)\n15\n>>> sum_n(10)\n55*/", "    $biggest = -1;\n  \
    \  for ($i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $biggest\
    \ = $i;\n        }\n    }\n    return $biggest;\n}\n\n/* This function takes a\
    \ positive integer number n and returns the \nsum of the digits of n.\nFor example:\n\
    >>> sum_digits(123)\n6\n>>> sum_digits(12)\n3*/", "\tif ($x % 2 == 0) {\n\t\t\
    return $x;\n\t} else if ($x % 2 == 1 && $y % 2 == 0) {\n\t\treturn $y;\n\t} else\
    \ {\n\t\treturn -1;\n\t}\n}\necho choose_num(12, 15);\necho choose_num(13, 12);",
  "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\
    \t\t\treturn -1;\n\t\t} else {\n\t\t\treturn choose_num($x, $y);\n\t\t}\n\t}\n\
    }\necho choose_num(12, 15);\necho \"\\n\";\necho choose_num(13, 12);\necho \"\\\
    n\";", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\twhile\
    \ ($x <= $y) {\n\t\t\tif ($x % 2 == 0) {\n\t\t\t\treturn $x;\n\t\t\t}\n\t\t\t\
    $x++;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/* This function takes a positive integer\
    \ number n and returns the\nnumber of digits in the number.\nFor example:\n>>>\
    \ num_digits(123)\n3\n>>> num_digits(123456789)\n9*/", "\t$biggest = -1;\n\tfor\
    \ ($i = $x; $i <= $y; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$biggest = $i;\n\t\
    \t}\n\t}\n\treturn $biggest;\n}\n\n/* This function takes a positive integer number\
    \ n and returns the \nsum of all the numbers in the range [1, n] inclusive.\n\
    For example:\n>>> sum_nums(3)\n6\n>>> sum_nums(5)\n15*/", "\tif ($x % 2 == 0)\
    \ {\n\t\treturn $x;\n\t} else {\n\t\t$x = $x + 1;\n\t\tif ($x > $y) {\n\t\t\t\
    return -1;\n\t\t} else {\n\t\t\treturn $x;\n\t\t}\n\t}\n}\necho choose_num(12,\
    \ 15) . \"\\n\";\necho choose_num(13, 12) . \"\\n\";\n\n/* This function takes\
    \ a positive integer n and returns the sum of all\nthe odd numbers from 1 to n\
    \ inclusive.\nFor example:\n>>> sum_odd(5)\n9\n>>> sum_odd(10)\n25*/", "\tif ($x\
    \ % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\twhile ($x <= $y) {\n\
    \t\t\tif ($x % 2 == 0) {\n\t\t\t\treturn $x;\n\t\t\t}\n\t\t\t$x++;\n\t\t}\n\t\
    }\n\treturn -1;\n}\n\n/* This function takes a positive integer number n and returns\
    \ the\nnumber of digits of n.\nFor example:\n>>> num_digits(123)\n3\n>>> num_digits(12345)\n\
    5*/", "\t$biggest = -1;\n\tfor ($i = $x; $i <= $y; $i++) {\n\t\tif ($i % 2 ==\
    \ 0) {\n\t\t\t$biggest = $i;\n\t\t}\n\t}\n\treturn $biggest;\n}\n\n/* This function\
    \ takes a positive integer n and returns the sum of all\nthe positive integers\
    \ that are less than n and are divisible by 3 or 5.\nFor example:\n>>> sum_divisible_by_3_or_5(10)\n\
    23\n>>> sum_divisible_by_3_or_5(100)\n2318*/", "\tif ($x % 2 == 0) {\n\t\treturn\
    \ $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\t} else\
    \ {\n\t\t\treturn choose_num($x, $y);\n\t\t}\n\t}\n}\necho choose_num(12, 15);\n\
    echo \"\\n\";\necho choose_num(13, 12);\necho \"\\n\";", "\tif ($x % 2 == 0) {\n\
    \t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\
    \t} else {\n\t\t\treturn choose_num($x, $y);\n\t\t}\n\t}\n}\n\necho choose_num(12,\
    \ 15);\necho choose_num(13, 12);\n", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t\
    } else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\t\
    return choose_num($x, $y);\n\t\t}\n\t}\n}\n\necho choose_num(12, 15);\necho \"\
    \\n\";\necho choose_num(13, 12);\necho \"\\n\";", "\tif ($x % 2 == 0) {\n\t\t\
    return $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\t\
    } else {\n\t\t\treturn choose_num($x, $y);\n\t\t}\n\t}\n}\n\necho choose_num(12,\
    \ 15);\necho \"\\n\";\necho choose_num(13, 12);\necho \"\\n\";", "\tif ($x % 2\
    \ == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn\
    \ -1;\n\t\t} else {\n\t\t\treturn choose_num($x, $y);\n\t\t}\n\t}\n}\n\necho choose_num(13,\
    \ 12);", "\t$result = -1;\n\tfor ($i = $x; $i <= $y; $i++) {\n\t\tif ($i % 2 ==\
    \ 0) {\n\t\t\t$result = $i;\n\t\t}\n\t}\n\treturn $result;\n}\n\n/* This function\
    \ takes two positive numbers x and y and returns the\nbiggest odd integer number\
    \ that is in the range [x, y] inclusive. If \nthere's no such number, then the\
    \ function should return -1.\nFor example:\n>>> choose_num(12, 15)\n15\n>>> choose_num(13,\
    \ 12)\n-1*/", "\t$biggest = -1;\n\tfor ($i = $x; $i <= $y; $i++) {\n\t\tif ($i\
    \ % 2 == 0) {\n\t\t\t$biggest = $i;\n\t\t}\n\t}\n\treturn $biggest;\n}\n\n/* This\
    \ function takes a positive integer number n and returns the\nsum of all even\
    \ numbers in the range [1, n] inclusive.\nFor example:\n>>> sum_even(10)\n30\n\
    >>> sum_even(3)\n2\n>>> sum_even(1)\n0*/", "    $i = $x;\n    while ($i <= $y)\
    \ {\n        if ($i % 2 == 0) {\n            return $i;\n        }\n        $i++;\n\
    \    }\n    return -1;\n}\n\n/* This function takes a list of numbers and returns\
    \ the sum of the \neven numbers in the list.\nFor example:\n>>> sum_even([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10])\n30\n>>> sum_even([1, 3, 5, 7, 9])\n0*/", "\tif ($x\
    \ > $y) {\n\t\treturn -1;\n\t}\n\tfor ($i = $y; $i >= $x; $i--) {\n\t\tif ($i\
    \ % 2 == 0) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\treturn -1;\n}\necho choose_num(12,\
    \ 15);\necho \"\\n\";\necho choose_num(13, 12);\necho \"\\n\";", "\tif ($x % 2\
    \ == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\twhile ($x <= $y) {\n\t\t\
    \tif ($x % 2 == 0) {\n\t\t\t\treturn $x;\n\t\t\t}\n\t\t\t$x++;\n\t\t}\n\t}\n\t\
    return -1;\n}\n\n/* This function takes a positive integer number n and returns\
    \ the \nnumber of digits in n.\nFor example:\n>>> num_digits(1234)\n4\n>>> num_digits(0)\n\
    1*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x + 1 <= $y && $x +\
    \ 1 % 2 == 0) {\n\t\treturn $x + 1;\n\t} else {\n\t\treturn -1;\n\t}\n}\n\necho\
    \ choose_num(12, 15) . \"\\n\";\necho choose_num(13, 12) . \"\\n\";", "\tif ($x\
    \ % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x <= $y) {\n\t\t\
    \treturn $x;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n}\n\necho choose_num(12,\
    \ 15) . \"\\n\";\necho choose_num(13, 12) . \"\\n\";", "\tif ($x % 2 == 0) {\n\
    \t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\
    \t} else {\n\t\t\treturn choose_num($x, $y);\n\t\t}\n\t}\n}\n\n/* This function\
    \ takes a positive integer n and returns the sum of all \nthe integers from 1\
    \ to n inclusive.\nFor example:\n>>> sum_n(5)\n15\n>>> sum_n(10)\n55*/", "\tif\
    \ ($x % 2 == 0) {\n\t\treturn $x;\n\t}\n\telseif ($y % 2 == 0) {\n\t\treturn $y;\n\
    \t}\n\telse {\n\t\treturn -1;\n\t}\n}\n\necho choose_num(12, 15);\necho \"\\n\"\
    ;\necho choose_num(13, 12);\necho \"\\n\";", "\t$biggest = -1;\n\tfor ($i = $x;\
    \ $i <= $y; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$biggest = $i;\n\t\t}\n\t}\n\
    \treturn $biggest;\n}\n\n/* This function takes a positive integer n and returns\
    \ the sum of all\nthe digits of n.\nFor example:\n>>> sum_digits(123)\n6\n>>>\
    \ sum_digits(123456789)\n45*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else\
    \ {\n\t\t$x = $x + 1;\n\t\tif ($x > $y) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\
    \treturn $x;\n\t\t}\n\t}\n}\n\necho choose_num(12, 15);\necho \"\\n\";\necho choose_num(13,\
    \ 12);\necho \"\\n\";", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x\
    \ % 2 != 0 && $y % 2 == 0) {\n\t\treturn $y;\n\t} else {\n\t\treturn -1;\n\t}\n\
    }\n\n/* This function takes a positive integer number and returns the\nnumber\
    \ of digits in it.\nFor example:\n>>> num_digits(123)\n3\n>>> num_digits(12345)\n\
    5*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x % 2 != 0 && $y %\
    \ 2 == 0) {\n\t\treturn $y;\n\t} else {\n\t\treturn -1;\n\t}\n}\n\necho choose_num(12,\
    \ 15);\necho choose_num(13, 12);\n", "\t$z = $x;\n\twhile ($z <= $y) {\n\t\tif\
    \ ($z % 2 == 0) {\n\t\t\treturn $z;\n\t\t}\n\t\t$z++;\n\t}\n\treturn -1;\n}\n\n\
    /* This function takes a positive integer n and returns the sum of all\nthe positive\
    \ integers that are less than n.\nFor example:\n>>> sum_of_less(5)\n10\n>>> sum_of_less(10)\n\
    45*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x + 1 <= $y) {\n\t\
    \treturn $x + 1;\n\t} else {\n\t\treturn -1;\n\t}\n}\n\n/* This function takes\
    \ a positive number x and returns the biggest \ninteger number that is smaller\
    \ than x and is a multiple of 3. If there's \nno such number, then the function\
    \ should return -1.\nFor example:\n>>> choose_num2(12)\n9\n>>> choose_num2(13)\n\
    -1*/", "\tif ($x > $y) {\n\t\treturn -1;\n\t}\n\tfor ($i = $y; $i >= $x; $i--)\
    \ {\n\t\tif ($i % 2 == 0) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n\
    /* This function takes a positive integer n and returns the sum of all \nthe integers\
    \ from 1 to n inclusive.\nFor example:\n>>> sum_nums(3)\n6\n>>> sum_nums(5)\n\
    15*/", "    if ($x % 2 == 0) {\n        return $x;\n    } else if ($x + 1 <= $y)\
    \ {\n        return $x + 1;\n    } else {\n        return -1;\n    }\n}\n\n/*\
    \ This function takes a positive integer n and returns the sum of all \nthe integers\
    \ from 1 to n inclusive.\nFor example:\n>>> sum_nums(3)\n6\n>>> sum_nums(5)\n\
    15*/", "\t$result = -1;\n\tfor ($i = $x; $i <= $y; $i++) {\n\t\tif ($i % 2 ==\
    \ 0) {\n\t\t\t$result = $i;\n\t\t}\n\t}\n\treturn $result;\n}\necho choose_num(12,\
    \ 15);\necho \"<br>\";\necho choose_num(13, 12);", "    if ($x % 2 == 0) {\n \
    \       return $x;\n    } else if ($x + 1 <= $y) {\n        return $x + 1;\n \
    \   } else {\n        return -1;\n    }\n}\n\n/* This function takes a positive\
    \ integer number n and returns the\nnumber of digits in n.\nFor example:\n>>>\
    \ num_digits(123)\n3\n>>> num_digits(0)\n1\n>>> num_digits(123456789)\n9*/", "\t\
    if ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\
    \t\t\treturn -1;\n\t\t} else {\n\t\t\treturn choose_num($x, $y);\n\t\t}\n\t}\n\
    }\n\necho choose_num(12, 15) . \"\\n\";\necho choose_num(13, 12) . \"\\n\";",
  "\tif ($x > $y) {\n\t\treturn -1;\n\t}\n\tfor ($i = $y; $i >= $x; $i--) {\n\t\t\
    if ($i % 2 == 0) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/* This function\
    \ takes a positive integer number n and returns the \nnumber of digits in n.\n\
    For example:\n>>> num_digits(123)\n3\n>>> num_digits(0)\n1\n>>> num_digits(123456789)\n\
    9*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x\
    \ > $y) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn choose_num($x, $y);\n\t\
    \t}\n\t}\n}\n\necho choose_num(12, 15);\necho \"\\n\";\necho choose_num(13, 12);\n\
    echo \"\\n\";", "    if ($x % 2 == 0) {\n        return $x;\n    } else if ($x\
    \ + 1 <= $y) {\n        return $x + 1;\n    } else {\n        return -1;\n   \
    \ }\n}\n\necho choose_num(12, 15);\necho \"<br>\";\necho choose_num(13, 12);",
  "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x % 2 != 0 && $y % 2 == 0)\
    \ {\n\t\treturn $y;\n\t} else {\n\t\treturn -1;\n\t}\n}\n\n/* This function takes\
    \ a positive integer x and returns the sum of all\nthe numbers from 1 to x inclusive.\n\
    For example:\n>>> sum_nums(5)\n15\n>>> sum_nums(10)\n55*/", "\t$biggest = -1;\n\
    \tfor ($i = $x; $i <= $y; $i++) {\n\t\tif ($i % 2 == 0 && $i > $biggest) {\n\t\
    \t\t$biggest = $i;\n\t\t}\n\t}\n\treturn $biggest;\n}\n\n/* This function takes\
    \ a positive integer number n and returns the\nnumber of digits in n.\nFor example:\n\
    >>> num_digits(123)\n3\n>>> num_digits(0)\n1\n>>> num_digits(1234)\n4*/", "\t\
    if ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x % 2 == 1 && $y % 2 == 0) {\n\
    \t\treturn $y;\n\t} else {\n\t\treturn -1;\n\t}\n}\necho choose_num(12, 15);\n\
    echo \"\\n\";\necho choose_num(13, 12);\necho \"\\n\";", "\tif ($x % 2 == 0) {\n\
    \t\treturn $x;\n\t} else if ($x % 2 != 0 && $y % 2 == 0) {\n\t\treturn $y;\n\t\
    } else {\n\t\treturn -1;\n\t}\n}\necho choose_num(12, 15);\necho \"\\n\";\necho\
    \ choose_num(13, 12);\necho \"\\n\";", "    if ($x % 2 == 0) {\n        return\
    \ $x;\n    }\n    else {\n        $x++;\n        if ($x <= $y) {\n           \
    \ return $x;\n        }\n        else {\n            return -1;\n        }\n \
    \   }\n}\n\n/* This function takes a positive integer number n and returns the\
    \ \nnumber of digits in n.\nFor example:\n>>> num_digits(123)\n3\n>>> num_digits(1234)\n\
    4*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else if ($x + 1 <= $y) {\n\t\t\
    return $x + 1;\n\t} else {\n\t\treturn -1;\n\t}\n}", "    if ($x % 2 == 0) {\n\
    \        return $x;\n    } else if ($x + 1 <= $y) {\n        return $x + 1;\n\
    \    } else {\n        return -1;\n    }\n}\n\n/* This function takes a positive\
    \ integer number n and returns the\nnumber of digits in n.\nFor example:\n>>>\
    \ num_digits(123)\n3\n>>> num_digits(1)\n1\n>>> num_digits(0)\n1*/", "\tif ($x\
    \ % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x > $y) {\n\t\t\
    \treturn -1;\n\t\t} else {\n\t\t\treturn choose_num($x, $y);\n\t\t}\n\t}\n}\n\n\
    echo choose_num(12, 15);\necho \"<br>\";\necho choose_num(13, 12);", "    if ($x\
    \ % 2 == 0) {\n        return $x;\n    } else {\n        $x++;\n        if ($x\
    \ <= $y) {\n            return $x;\n        } else {\n            return -1;\n\
    \        }\n    }\n}\n\n/* This function takes a positive integer number and returns\
    \ the number\nof digits in it.\nFor example:\n>>> num_digits(123)\n3\n>>> num_digits(123456789)\n\
    9*/", "\tif ($x % 2 == 0) {\n\t\treturn $x;\n\t} else {\n\t\t$x++;\n\t\tif ($x\
    \ <= $y) {\n\t\t\treturn $x;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n}\n\n\
    echo choose_num(12, 15) . \"\\n\";\necho choose_num(13, 12) . \"\\n\";\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
