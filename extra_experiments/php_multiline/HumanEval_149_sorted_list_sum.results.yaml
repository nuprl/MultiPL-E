language: php
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($item) {\n   \
    \     return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\nprint_r(sorted_list_sum(array(\"aa\", \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"\
    ab\", \"a\", \"aaa\", \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5il7hfz.php:38\nStack\
    \ trace:\n#0 /tmp/tmps5il7hfz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmps5il7hfz.php\
    \ on line 38\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $new_lst\
    \ = [];\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n\
    \            $new_lst[] = $item;\n        }\n    }\n    sort($new_lst);\n    return\
    \ $new_lst;\n}\n\n$lst = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4564_2et.php:44\n\
    Stack trace:\n#0 /tmp/tmp4564_2et.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp4564_2et.php\
    \ on line 44\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n \
    \   [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmppdfwv4q5.php:36\nStack trace:\n#0 /tmp/tmppdfwv4q5.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppdfwv4q5.php on line 36\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdocf937n.php:43\n\
    Stack trace:\n#0 /tmp/tmpdocf937n.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpdocf937n.php\
    \ on line 43\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if (strlen($lst[$i]) % 2\
    \ == 0) {\n            array_push($result, $lst[$i]);\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\necho \"<pre>\"\
    ;\nprint_r(sorted_list_sum($lst));\necho \"</pre>\";\n\n$lst = array(\"ab\", \"\
    a\", \"aaa\", \"cd\");\necho \"<pre>\";\nprint_r(sorted_list_sum($lst));\necho\
    \ \"</pre>\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\",\
    \ \"cd\");\necho \"<pre>\";\nprint_r(sorted_list_sum($lst));\necho \"</pre>\"\
    ;\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\", \"a\"\
    , \"aaa\", \"cd\");\necho \"<pre>\";\nprint_r(sorted_list_sum($lst));\necho \"\
    </pre>\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\"\
    , \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\");\necho \"<pre>\";\nprint_r(sorted_list_sum($lst));\n\
    echo \"</pre>\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\"\
    );\necho \"<pre>\";\nprint_r(sorted_list_sum($lst));\necho \"</pre>\";\n\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\"\
    , \"cd\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting ")" in /tmp/tmphk9x84s4.php
    on line 66

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($item) {\n   \
    \     return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting ")" in /tmp/tmpzjo0rr6o.php
    on line 44

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $sum\
    \ = 0;\n    $lst = array_unique($lst);\n    sort($lst);\n    foreach ($lst as\
    \ $item) {\n        $sum += $item;\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmp73b0pwq_.php:22\nStack trace:\n#0 /tmp/tmp73b0pwq_.php(28): sorted_list_sum(Array)\n\
    #1 /tmp/tmp73b0pwq_.php(32): candidate(Array)\n#2 /tmp/tmp73b0pwq_.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp73b0pwq_.php on line 22\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($item) {\n   \
    \     return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfvkmb827.php:42\nStack\
    \ trace:\n#0 /tmp/tmpfvkmb827.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfvkmb827.php\
    \ on line 42\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n$lst = array(\"aa\", \"a\", \"aaa\");\n$lst\
    \ = sorted_list_sum($lst);\nprint_r($lst);\nfunction candidate(...$args) {\n \
    \   return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp676b2agh.php:34\nStack trace:\n#0 /tmp/tmp676b2agh.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp676b2agh.php on line 34\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $new_lst\
    \ = array();\n    foreach ($lst as $key => $value) {\n        if (strlen($value)\
    \ % 2 == 0) {\n            $new_lst[] = $value;\n        }\n    }\n    sort($new_lst);\n\
    \    return $new_lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxn4haznr.php:44\n\
    Stack trace:\n#0 /tmp/tmpxn4haznr.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpxn4haznr.php\
    \ on line 44\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br/>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br/>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_dl46r4j.php:42\n\
    Stack trace:\n#0 /tmp/tmp_dl46r4j.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp_dl46r4j.php\
    \ on line 42\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($v) {\n      \
    \  return strlen($v) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    \nprint_r(sorted_list_sum(array(\"aa\", \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"\
    ab\", \"a\", \"aaa\", \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i4jf9_o.php:39\nStack\
    \ trace:\n#0 /tmp/tmp2i4jf9_o.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2i4jf9_o.php\
    \ on line 39\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd0bthdat.php:44\nStack\
    \ trace:\n#0 /tmp/tmpd0bthdat.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpd0bthdat.php\
    \ on line 44\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $new_lst\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $new_lst[] = $item;\n        }\n    }\n    sort($new_lst);\n\
    \    return $new_lst;\n}\n\nprint_r(sorted_list_sum(array(\"aa\", \"a\", \"aaa\"\
    )));\nprint_r(sorted_list_sum(array(\"ab\", \"a\", \"aaa\", \"cd\")));\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpo5mbq7.php:41\nStack\
    \ trace:\n#0 /tmp/tmpdpo5mbq7.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpdpo5mbq7.php\
    \ on line 41\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $sum\
    \ = 0;\n    $lst = array_unique($lst);\n    sort($lst);\n    foreach ($lst as\
    \ $value) {\n        $sum += $value;\n    }\n    return $sum;\n}\n\nprint_r(sorted_list_sum(array(1,\
    \ 2, 3, 4, 5, 5, 7, 10)));\nprint_r(sorted_list_sum(array(1, 2, 3, 4, 5, 5, 7,\
    \ 10, -3, -5, 1)));\nprint_r(sorted_list_sum(array(1, 2, 3, 4, 5, 5, 7, 10, -3,\
    \ -5, 0, 1)));\nprint_r(sorted_list_sum(array(1, 2, 3, 4, 5, 5, 7, 10, -3, -5,\
    \ 0, 0, 1)));\nprint_r(sorted_list_sum(array(1, 2, 3, 4, 5, 5, 7, 10, -12, -3,\
    \ -5, 0, 0, 1)));\nprint_r(sorted_list_sum(array(1, 2, 3, 4, 5, 5, 7, 10, -12,\
    \ -3, -5, 0, 0, 1, -4)));\nprint_r(sorted_list_sum(array(1, 2, 3, 4, 5, 5, 7,\
    \ 10, -12, -3, -5, 0, 0, 1, -4, -4)));\nprint_r(sorted_list_sum(array(1, 2, 3,\
    \ 4, 5, 5, 7, 10, -12, -3, -5, 0, 0, 1, -4, -4, 12)));\nprint_r(sorted_list_sum(array(1,\
    \ 2, 3, 4, 5, 5, 7, 10, -12, -3, -5, 0, 0, 1, -4, -4, 12, 12)));\nprint_r(sorted_list_sum(array(1,\
    \ 2, 3, 4, 5, 5, 7, 10, -12, -3, -5, 0, 0\nfunction candidate(...$args) {\n  \
    \  return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpx72d8xsh.php
    on line 37

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $odd_lst = array();\n    $even_lst = array();\n \
    \   foreach ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n       \
    \     $even_lst[] = $item;\n        } else {\n            $odd_lst[] = $item;\n\
    \        }\n    }\n    sort($even_lst);\n    sort($odd_lst);\n    return array_merge($even_lst,\
    \ $odd_lst);\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\", \"ab\", \"a\", \"aaa\"\
    , \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n    [1] => ab\n    [2] => cd\n    [3] => a\n \
    \   [4] => aaa\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4lowh_mw.php:40\n\
    Stack trace:\n#0 /tmp/tmp4lowh_mw.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp4lowh_mw.php\
    \ on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $new_list\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $new_list[] = $item;\n        }\n    }\n    sort($new_list);\n\
    \    return $new_list;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprbm4rdpq.php:44\n\
    Stack trace:\n#0 /tmp/tmprbm4rdpq.php(47): test()\n#1 {main}\n  thrown in /tmp/tmprbm4rdpq.php\
    \ on line 44\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpp_p6o8lz.php:30\nStack\
    \ trace:\n#0 /tmp/tmpp_p6o8lz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp_p6o8lz.php\
    \ on line 30\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpp_p6o8lz.php:30\nStack\
    \ trace:\n#0 /tmp/tmpp_p6o8lz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp_p6o8lz.php\
    \ on line 30\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    sort($lst);\n    return $lst;\n}\n\nprint_r(sorted_list_sum(array(\"\
    aa\", \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\")));\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nArray\n(\n    [0]\
    \ => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpyvyq7m_5.php:33\nStack trace:\n#0 /tmp/tmpyvyq7m_5.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyvyq7m_5.php on line 33\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($x) {\n      \
    \  return strlen($x) % 2 == 0;\n    });\n    usort($lst, function($a, $b) {\n\
    \        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n$lst = array(\"ab\", \"a\", \"aaa\"\
    , \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => ab\n    [1] => cd\n)\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    $lst = array_unique($lst);\n    foreach ($lst as $item) {\n\
    \        if (strlen($item) % 2 == 0) {\n            $result[] = $item;\n     \
    \   }\n    }\n    sort($result);\n    return $result;\n}\n\n$lst = array(\"aa\"\
    , \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"aa\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"aa\", \"a\", \"aaa\", \"cd\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"aa\", \"a\", \"aaa\", \"cd\", \"aaa\", \"aa\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"aa\", \"a\", \"\
    aaa\", \"cd\", \"aaa\", \"aa\", \"a\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"<br>\";\n$lst = array(\"aa\", \"a\", \"aaa\", \"cd\", \"aaa\", \"aa\", \"\
    a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    aa\", \"a\", \"aaa\", \"cd\", \"aaa\", \"aa\", \"a\", \"aaa\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"aa\", \"a\", \"aaa\", \"cd\", \"aaa\", \"aa\",\
    \ \"a\", \"aaa\", \"aaa\", \"aa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    <br>\";\n$lst = array(\"aa\", \"a\", \"aaa\", \"cd\", \"aaa\", \"aa\",\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpugw5e_1l.php on line 57

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpp_p6o8lz.php:30\nStack\
    \ trace:\n#0 /tmp/tmpp_p6o8lz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp_p6o8lz.php\
    \ on line 30\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $sorted_list\
    \ = array();\n    foreach ($lst as $key => $value) {\n        if (strlen($value)\
    \ % 2 == 0) {\n            array_push($sorted_list, $value);\n        }\n    }\n\
    \    sort($sorted_list);\n    return $sorted_list;\n}\n\n$list = array(\"aa\"\
    , \"a\", \"aaa\");\nprint_r(sorted_list_sum($list));\necho \"<br>\";\n$list =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($list));\necho\
    \ \"<br>\";\n$list = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"bb\", \"bbb\"\
    );\nprint_r(sorted_list_sum($list));\necho \"<br>\";\n$list = array(\"ab\", \"\
    a\", \"aaa\", \"cd\", \"b\", \"bb\", \"bbb\", \"bbbb\");\nprint_r(sorted_list_sum($list));\n\
    echo \"<br>\";\n$list = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"bb\", \"\
    bbb\", \"bbbb\", \"bbbbb\");\nprint_r(sorted_list_sum($list));\necho \"<br>\"\
    ;\n$list = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"bb\", \"bbb\", \"bbbb\"\
    , \"bbbbb\", \"bbbbbb\");\nprint_r(sorted_list_sum($list));\necho \"<br>\";\n\
    $list = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"bb\", \"bbb\", \"bbbb\"\
    , \"bbbbb\", \"bbbbbb\", \"bbbbbbb\");\nprint_r(sorted_list_sum($list));\necho\
    \ \"<br>\";\n$list = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"bb\", \"bbb\"\
    , \"bbbb\", \"bbbbb\", \"bbbbbb\", \"bbbbbbb\", \"bbbbbbbb\");\nprint_r(sorted_list_sum($list));\n\
    echo \"<br>\";\n$list = array\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "(" in /tmp/tmpvyh58etw.php
    on line 53

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($item) {\n   \
    \     return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnag342vs.php:42\n\
    Stack trace:\n#0 /tmp/tmpnag342vs.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnag342vs.php\
    \ on line 42\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nvar_dump(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nvar_dump(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(2) \"aa\"\n}\narray(2) {\n  [0]=>\n  string(2)\
    \ \"ab\"\n  [1]=>\n  string(2) \"cd\"\n}\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($x) {\n      \
    \  return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    \n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3ryxqce.php:42\nStack\
    \ trace:\n#0 /tmp/tmpu3ryxqce.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpu3ryxqce.php\
    \ on line 42\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $new_lst\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $new_lst[] = $item;\n        }\n    }\n    sort($new_lst);\n\
    \    return $new_lst;\n}\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpezh86azl.php:40\nStack trace:\n#0 /tmp/tmpezh86azl.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmpezh86azl.php on line 40\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst =\
    \ array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"a\", \"a\", \"a\");\nprint_r(sorted_list_sum($lst));\necho \"\
    <br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"\
    a\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"\
    a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"\
    a\", \"a\", \"a\", \"a\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\");\nprint_r\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpq0bkokwe.php
    on line 52

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $sum\
    \ = 0;\n    $lst = array_unique($lst);\n    sort($lst);\n    foreach ($lst as\
    \ $value) {\n        $sum += $value;\n    }\n    return $sum;\n}\n\n$lst = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10);\necho sorted_list_sum($lst);\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "55\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmptkd755mn.php:22\nStack trace:\n#0 /tmp/tmptkd755mn.php(31): sorted_list_sum(Array)\n\
    #1 /tmp/tmptkd755mn.php(35): candidate(Array)\n#2 /tmp/tmptkd755mn.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmptkd755mn.php on line 22\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $res\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $res[] = $item;\n        }\n    }\n    sort($res);\n    return\
    \ $res;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8elc9u1p.php:44\nStack\
    \ trace:\n#0 /tmp/tmp8elc9u1p.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp8elc9u1p.php\
    \ on line 44\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\",\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmptdhx9pd6.php on line 44

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\nprint_r(sorted_list_sum(array(\"aa\", \"a\"\
    , \"aaa\")));\necho \"<br>\";\nprint_r(sorted_list_sum(array(\"ab\", \"a\", \"\
    aaa\", \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n \
    \   [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpo1dv6m_3.php:34\nStack trace:\n#0 /tmp/tmpo1dv6m_3.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpo1dv6m_3.php on line 34\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($x) {\n      \
    \  return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    print_r(sorted_list_sum(array(\"aa\", \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"\
    ab\", \"a\", \"aaa\", \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgqqh7sa.php:38\nStack\
    \ trace:\n#0 /tmp/tmpdgqqh7sa.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdgqqh7sa.php\
    \ on line 38\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    sort($lst);\n    return $lst;\n}\n$lst = array(\"aa\", \"a\", \"\
    aaa\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args) {\n   \
    \ return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp80627p1j.php:31\nStack trace:\n#0 /tmp/tmp80627p1j.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp80627p1j.php on line 31\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($x) {\n      \
    \  return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmprjbrp65l.php:38\nStack trace:\n#0 /tmp/tmprjbrp65l.php(41): test()\n\
    #1 {main}\n  thrown in /tmp/tmprjbrp65l.php on line 38\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu92gdsen.php:42\nStack\
    \ trace:\n#0 /tmp/tmpu92gdsen.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpu92gdsen.php\
    \ on line 42\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n \
    \   [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmptg39706h.php:37\nStack trace:\n#0 /tmp/tmptg39706h.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptg39706h.php on line 37\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"aaa\"\
    );\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\"\
    , \"aaa\", \"cd\", \"aaa\", \"aaa\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"aaa\"\
    , \"aaa\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"\
    aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"\
    );\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\"\
    , \"aaa\", \"cd\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\", \"aaa\"\
    );\nprint_r(sorted_list_sum($lst));\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n \
    \   [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n    [0] => 1\n    [1]\
    \ => 2\n    [2] => 3\n)\n<br>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] =>\
    \ 3\n)\n<br>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n\
    (\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n    [0] => 1\n \
    \   [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n    [0] => 1\n    [1] => 2\n    [2]\
    \ => 3\n)\n<br>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpyymo97pw.php:58\nStack trace:\n\
    #0 /tmp/tmpyymo97pw.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpyymo97pw.php\
    \ on line 58\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($x) {\n      \
    \  return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    \n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpywp3wt4z.php:42\n\
    Stack trace:\n#0 /tmp/tmpywp3wt4z.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpywp3wt4z.php\
    \ on line 42\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp98dwioiu.php:31\nStack\
    \ trace:\n#0 /tmp/tmp98dwioiu.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp98dwioiu.php\
    \ on line 31\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumsmi4b7.php:28\n\
    Stack trace:\n#0 /tmp/tmpumsmi4b7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpumsmi4b7.php\
    \ on line 28\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($v) {\n      \
    \  return strlen($v) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    \nprint_r(sorted_list_sum(array(\"aa\", \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"\
    ab\", \"a\", \"aaa\", \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2i4jf9_o.php:39\nStack\
    \ trace:\n#0 /tmp/tmp2i4jf9_o.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2i4jf9_o.php\
    \ on line 39\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($x) {\n      \
    \  return strlen($x) % 2 == 0;\n    });\n    $lst = array_values($lst);\n    usort($lst,\
    \ function($a, $b) {\n        $len_a = strlen($a);\n        $len_b = strlen($b);\n\
    \        if ($len_a == $len_b) {\n            return $a > $b;\n        }\n   \
    \     return $len_a > $len_b;\n    });\n    return $lst;\n}\n\n$lst = array(\"\
    aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\n\nDeprecated: usort(): Returning bool from\
    \ comparison function is deprecated, return an integer less than, equal to, or\
    \ greater than zero in /tmp/tmp68axhazu.php on line 30\nArray\n(\n    [0] => ab\n\
    \    [1] => cd\n)\n\n\nDeprecated: usort(): Returning bool from comparison function\
    \ is deprecated, return an integer less than, equal to, or greater than zero in\
    \ /tmp/tmp68axhazu.php on line 30\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \n\nDeprecated: usort(): Returning bool from comparison function is deprecated,\
    \ return an integer less than, equal to, or greater than zero in /tmp/tmp68axhazu.php\
    \ on line 30\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\n\nDeprecated: usort():\
    \ Returning bool from comparison function is deprecated, return an integer less\
    \ than, equal to, or greater than zero in /tmp/tmp68axhazu.php on line 30\n\n\
    Deprecated: usort(): Returning bool from comparison function is deprecated, return\
    \ an integer less than, equal to, or greater than zero in /tmp/tmp68axhazu.php\
    \ on line 30\n\nDeprecated: usort(): "
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n\t$lst\
    \ = array_unique($lst);\n\t$lst = array_values($lst);\n\t$lst = array_map('strlen',\
    \ $lst);\n\t$lst = array_unique($lst);\n\t$lst = array_values($lst);\n\tsort($lst);\n\
    \treturn $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n$lst = sorted_list_sum($lst);\n\
    print_r($lst);\necho \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\n\
    $lst = sorted_list_sum($lst);\nprint_r($lst);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nArray\n(\n   \
    \ [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpp6t3_yx4.php:40\nStack trace:\n#0 /tmp/tmpp6t3_yx4.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpp6t3_yx4.php on line 40\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($val) {\n    \
    \    return strlen($val) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpelrzh87w.php:42\nStack\
    \ trace:\n#0 /tmp/tmpelrzh87w.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpelrzh87w.php\
    \ on line 42\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst =\
    \ array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nArray\n(\n   \
    \ [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpckkaf977.php:34\nStack trace:\n#0 /tmp/tmpckkaf977.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpckkaf977.php on line 34\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"ab\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"aaa\", \"ab\", \"a\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"ab\", \"\
    a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"ab\",\
    \ \"a\", \"aaa\", \"cd\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    <br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"ab\", \"a\",\
    \ \"aaa\", \"cd\", \"aaa\", \"ab\");\nprint_r(sorted_list_sum($lst));\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n \
    \   [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n    [0] => 1\n    [1]\
    \ => 2\n    [2] => 3\n)\n<br>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] =>\
    \ 3\n)\n<br>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n\
    (\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n    [0] => 1\n \
    \   [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n    [0] => 1\n    [1] => 2\n    [2]\
    \ => 3\n)\n<br>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp541m5fg2.php:58\nStack trace:\n\
    #0 /tmp/tmp541m5fg2.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp541m5fg2.php\
    \ on line 58\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst =\
    \ array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpr5lf9di6.php:30\nStack trace:\n#0 /tmp/tmpr5lf9di6.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpr5lf9di6.php on line 30\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    sort($lst);\n    return $lst;\n}\n$lst = array(\"aa\", \"a\", \"\
    aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\"\
    , \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n \
    \   [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpdrigt1c5.php:34\nStack trace:\n#0 /tmp/tmpdrigt1c5.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdrigt1c5.php on line 34\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $sorted_list\
    \ = array();\n    foreach ($lst as $item) {\n        $sorted_list[] = $item;\n\
    \    }\n    sort($sorted_list);\n    return $sorted_list;\n}\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => a\n    [1] => aaa\n    [2] => ab\n    [3] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjhuhlc5i.php:34\n\
    Stack trace:\n#0 /tmp/tmpjhuhlc5i.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpjhuhlc5i.php\
    \ on line 34\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n\
    $lst = sorted_list_sum($lst);\nprint_r($lst);\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\n$lst = sorted_list_sum($lst);\nprint_r($lst);\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"cd\", \"cd\", \"\
    cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\",\
    \ \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"cd\", \"cd\", \"cd\", \"\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting ")" in /tmp/tmphweigjmr.php
    on line 41

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($x) {\n      \
    \  return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    \n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxz0da2w_.php:43\n\
    Stack trace:\n#0 /tmp/tmpxz0da2w_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpxz0da2w_.php\
    \ on line 43\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    sort($lst);\n    $lst = array_map('strval', $lst);\n    return $lst;\n\
    }\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpg_no5n2s.php:33\nStack\
    \ trace:\n#0 /tmp/tmpg_no5n2s.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpg_no5n2s.php\
    \ on line 33\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n \
    \   [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmptg39706h.php:37\nStack trace:\n#0 /tmp/tmptg39706h.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptg39706h.php on line 37\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($x) {\n      \
    \  return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    \n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3ryxqce.php:42\nStack\
    \ trace:\n#0 /tmp/tmpu3ryxqce.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpu3ryxqce.php\
    \ on line 42\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"bbb\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"b\", \"bbb\", \"cccc\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"bbb\", \"cccc\"\
    , \"ddddd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"b\", \"bbb\", \"cccc\", \"ddddd\", \"eeeeee\"\
    );\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\"\
    , \"aaa\", \"cd\", \"b\", \"bbb\", \"cccc\", \"ddddd\", \"eeeeee\", \"fffffff\"\
    );\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\"\
    , \"aaa\", \"cd\", \"b\", \"bbb\", \"cccc\", \"ddddd\", \"eeeeee\", \"fffffff\"\
    , \"gggggggg\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"b\", \"bbb\", \"cccc\", \"dd\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting ")" in /tmp/tmp1zdj17oq.php
    on line 58

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"a\",\
    \ \"aaa\");\n$lst = sorted_list_sum($lst);\nprint_r($lst);\necho \"<br>\";\n\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\n$lst = sorted_list_sum($lst);\n\
    print_r($lst);\necho \"<br>\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\"\
    , \"a\", \"aaa\");\n$lst = sorted_list_sum($lst);\nprint_r($lst);\necho \"<br>\"\
    ;\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"a\", \"aaa\");\n$lst = sorted_list_sum($lst);\nprint_r($lst);\n\
    echo \"<br>\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"a\", \"aaa\");\n$lst = sorted_list_sum($lst);\nprint_r($lst);\necho \"<br>\"\
    ;\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"a\", \"aaa\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\");\n$lst = sorted_list_sum($lst);\n\
    print_r($lst);\necho \"<br>\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\"\
    , \"a\", \"aaa\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting ")" in /tmp/tmpu86ee17k.php
    on line 61

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($x) {\n      \
    \  return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    \n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxz0da2w_.php:43\n\
    Stack trace:\n#0 /tmp/tmpxz0da2w_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpxz0da2w_.php\
    \ on line 43\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($a) {\n      \
    \  return strlen($a) % 2 == 0;\n    });\n    usort($lst, function($a, $b) {\n\
    \        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n\t$lst\
    \ = array_unique($lst);\n\t$lst = array_filter($lst, function($str) {\n\t\treturn\
    \ strlen($str) % 2 == 0;\n\t});\n\tsort($lst);\n\treturn $lst;\n}\n\n$lst = array(\"\
    aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n$lst = array(\"ab\",\
    \ \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe7rp6b2_.php:41\nStack\
    \ trace:\n#0 /tmp/tmpe7rp6b2_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpe7rp6b2_.php\
    \ on line 41\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    );\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\",\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpntp91hse.php on line 46

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($item) {\n   \
    \     return strlen($item) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\nprint_r(sorted_list_sum(array(\"\
    aa\", \"a\", \"aaa\")));\necho \"<br>\";\nprint_r(sorted_list_sum(array(\"ab\"\
    , \"a\", \"aaa\", \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n \
    \   [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp05sannmo.php:30\nStack trace:\n#0 /tmp/tmp05sannmo.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp05sannmo.php on line 30\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $sum\
    \ = 0;\n    foreach ($lst as $item) {\n        $sum += $item;\n    }\n    return\
    \ $sum;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpuzqbr_mj.php:20\nStack trace:\n#0 /tmp/tmpuzqbr_mj.php(26): sorted_list_sum(Array)\n\
    #1 /tmp/tmpuzqbr_mj.php(30): candidate(Array)\n#2 /tmp/tmpuzqbr_mj.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuzqbr_mj.php on line 20\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpp_p6o8lz.php:30\nStack\
    \ trace:\n#0 /tmp/tmpp_p6o8lz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp_p6o8lz.php\
    \ on line 30\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($v) {\n      \
    \  return strlen($v) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    \n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"aa\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"aa\", \"a\", \"aaa\", \"cd\", \"a\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nArray\n(\n    [0] => aa\n    [1] => cd\n)\n\nArray\n(\n    [0] => aa\n  \
    \  [1] => cd\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkg0j96mo.php:49\n\
    Stack trace:\n#0 /tmp/tmpkg0j96mo.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpkg0j96mo.php\
    \ on line 49\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $new_lst\
    \ = [];\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n\
    \            $new_lst[] = $item;\n        }\n    }\n    sort($new_lst);\n    return\
    \ $new_lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpmidb_aqp.php:41\nStack trace:\n#0 /tmp/tmpmidb_aqp.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpmidb_aqp.php on line 41\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $sorted_list\
    \ = array();\n    $sorted_list = array_unique($lst);\n    sort($sorted_list);\n\
    \    $sorted_list = array_values($sorted_list);\n    return $sorted_list;\n}\n\
    \n$lst = array(\"aa\", \"a\", \"aaa\");\n$lst = sorted_list_sum($lst);\nprint_r($lst);\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\n$lst = sorted_list_sum($lst);\n\
    print_r($lst);\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"\
    ab\");\n$lst = sorted_list_sum($lst);\nprint_r($lst);\necho \"<br>\";\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\");\n$lst = sorted_list_sum($lst);\n\
    print_r($lst);\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"\
    ab\", \"a\", \"aaa\");\n$lst = sorted_list_sum($lst);\nprint_r($lst);\necho \"\
    <br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\",\
    \ \"cd\");\n$lst = sorted_list_sum($lst);\nprint_r($lst);\necho \"<br>\";\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    );\n$lst = sorted_list_sum($lst);\nprint_r($lst);\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\");\n\
    $lst = sorted_list_sum($lst);\nprint_r($lst);\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\",\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp3qcd431j.php on line 58

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphsqmycmg.php:29\nStack\
    \ trace:\n#0 /tmp/tmphsqmycmg.php(38): test()\n#1 {main}\n  thrown in /tmp/tmphsqmycmg.php\
    \ on line 29\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3eymd5_p.php:32\n\
    Stack trace:\n#0 /tmp/tmp3eymd5_p.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp3eymd5_p.php\
    \ on line 32\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    $lst = array_unique($lst);\n\
    \    return $lst;\n}\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n \
    \   [0] => 1\n    [1] => 2\n    [3] => 3\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzw_0v85i.php:33\nStack trace:\n#0 /tmp/tmpzw_0v85i.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzw_0v85i.php on line 33\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n\t$lst\
    \ = array_filter($lst, function($x) {\n\t\treturn strlen($x) % 2 == 0;\n\t});\n\
    \tusort($lst, function($a, $b) {\n\t\tif (strlen($a) == strlen($b)) {\n\t\t\t\
    return strcmp($a, $b);\n\t\t}\n\t\treturn strlen($a) - strlen($b);\n\t});\n\t\
    return $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($item) {\n   \
    \     return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnag342vs.php:42\n\
    Stack trace:\n#0 /tmp/tmpnag342vs.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnag342vs.php\
    \ on line 42\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"a\",\
    \ \"aaa\");\n$lst = sorted_list_sum($lst);\nprint_r($lst);\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpomucyxi2.php:33\nStack trace:\n#0 /tmp/tmpomucyxi2.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpomucyxi2.php on line 33\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $len\
    \ = count($lst);\n    $sum = 0;\n    for ($i = 0; $i < $len; $i++) {\n       \
    \ $sum += $lst[$i];\n    }\n    return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpc8yp7vhc.php:21\nStack trace:\n#0 /tmp/tmpc8yp7vhc.php(27): sorted_list_sum(Array)\n\
    #1 /tmp/tmpc8yp7vhc.php(31): candidate(Array)\n#2 /tmp/tmpc8yp7vhc.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpc8yp7vhc.php on line 21\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($x) {\n      \
    \  return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    \nprint_r(sorted_list_sum(array(\"aa\", \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"\
    ab\", \"a\", \"aaa\", \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3juej54.php:39\nStack\
    \ trace:\n#0 /tmp/tmpj3juej54.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpj3juej54.php\
    \ on line 39\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($item) {\n   \
    \     return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\nprint_r(sorted_list_sum(array(\"aa\", \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"\
    ab\", \"a\", \"aaa\", \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5il7hfz.php:38\nStack\
    \ trace:\n#0 /tmp/tmps5il7hfz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmps5il7hfz.php\
    \ on line 38\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($item) {\n   \
    \     return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfvkmb827.php:42\nStack\
    \ trace:\n#0 /tmp/tmpfvkmb827.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpfvkmb827.php\
    \ on line 42\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting "," or ";" in
    /tmp/tmpli1vk7te.php on line 54

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpkvnj5jx7.php:41\nStack trace:\n#0 /tmp/tmpkvnj5jx7.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpkvnj5jx7.php on line 41\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($item) {\n   \
    \     return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\nprint_r(sorted_list_sum(array(\"aa\", \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"\
    ab\", \"a\", \"aaa\", \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5il7hfz.php:38\nStack\
    \ trace:\n#0 /tmp/tmps5il7hfz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmps5il7hfz.php\
    \ on line 38\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $new_lst = array();\n\
    \    foreach ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n      \
    \      $new_lst[] = $item;\n        }\n    }\n    sort($new_lst);\n    return\
    \ $new_lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuazq7hma.php:46\n\
    Stack trace:\n#0 /tmp/tmpuazq7hma.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpuazq7hma.php\
    \ on line 46\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($word) {\n   \
    \     return strlen($word) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzcxyatho.php:44\n\
    Stack trace:\n#0 /tmp/tmpzcxyatho.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpzcxyatho.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n\t$odd_list\
    \ = [];\n\tforeach ($lst as $item) {\n\t\tif (strlen($item) % 2 != 0) {\n\t\t\t\
    $odd_list[] = $item;\n\t\t}\n\t}\n\tsort($odd_list);\n\treturn $odd_list;\n}\n\
    \n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => a\n    [1] => aaa\n)\n<br>Array\n(\n    [0] => a\n\
    \    [1] => aaa\n)\n<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9r11sh5q.php:55\n\
    Stack trace:\n#0 /tmp/tmp9r11sh5q.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp9r11sh5q.php\
    \ on line 55\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n  $new_lst\
    \ = array();\n  foreach ($lst as $key => $value) {\n    if (strlen($value) % 2\
    \ == 0) {\n      array_push($new_lst, $value);\n    }\n  }\n  sort($new_lst);\n\
    \  return $new_lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n$lst2 = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nprint_r(sorted_list_sum($lst2));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsbzj8z2y.php:43\nStack\
    \ trace:\n#0 /tmp/tmpsbzj8z2y.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpsbzj8z2y.php\
    \ on line 43\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    sort($lst);\n    return $lst;\n}\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpomgvxj4k.php:29\n\
    Stack trace:\n#0 /tmp/tmpomgvxj4k.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpomgvxj4k.php\
    \ on line 29\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($item) {\n   \
    \     return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => ab\n    [1] => cd\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmppjcxyoao.php:38\nStack trace:\n#0 /tmp/tmppjcxyoao.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppjcxyoao.php on line 38\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($e) {\n      \
    \  return strlen($e) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    \n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzf2p4vux.php:42\nStack\
    \ trace:\n#0 /tmp/tmpzf2p4vux.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpzf2p4vux.php\
    \ on line 42\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($x) {\n      \
    \  return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    \n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoif9fhq1.php:42\n\
    Stack trace:\n#0 /tmp/tmpoif9fhq1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpoif9fhq1.php\
    \ on line 42\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $sorted_list\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            array_push($sorted_list, $item);\n        }\n    }\n    sort($sorted_list);\n\
    \    return $sorted_list;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsngnfhfl.php:44\n\
    Stack trace:\n#0 /tmp/tmpsngnfhfl.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpsngnfhfl.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst =\
    \ array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpr5lf9di6.php:30\nStack trace:\n#0 /tmp/tmpr5lf9di6.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpr5lf9di6.php on line 30\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $sum\
    \ = 0;\n    $lst = array_unique($lst);\n    sort($lst);\n    foreach ($lst as\
    \ $item) {\n        $sum += $item;\n    }\n    return $sum;\n}\n\n$lst = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10);\necho sorted_list_sum($lst);\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "55\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmprbubzp6g.php:22\nStack trace:\n#0 /tmp/tmprbubzp6g.php(31): sorted_list_sum(Array)\n\
    #1 /tmp/tmprbubzp6g.php(35): candidate(Array)\n#2 /tmp/tmprbubzp6g.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmprbubzp6g.php on line 22\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdwggfbns.php:44\n\
    Stack trace:\n#0 /tmp/tmpdwggfbns.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpdwggfbns.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n\t$lst\
    \ = array_unique($lst);\n\t$lst = array_filter($lst, function($v) {\n\t\treturn\
    \ strlen($v) % 2 == 0;\n\t});\n\tsort($lst);\n\treturn $lst;\n}\n\nprint_r(sorted_list_sum(array(\"\
    aa\", \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\")));\nprint_r(sorted_list_sum(array(\"ab\", \"a\", \"aaa\", \"cd\", \"\
    ab\", \"a\", \"aaa\", \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    Array\n(\n    [0] => ab\n    [1] => cd\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpk3c8iyde.php:40\nStack trace:\n#0 /tmp/tmpk3c8iyde.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpk3c8iyde.php on line 40\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_map('strtolower', $lst);\n    $lst =\
    \ array_map('trim', $lst);\n    $lst = array_filter($lst);\n    $lst = array_values($lst);\n\
    \    $lst = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    <br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"a\", \"aaa\", \"a\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"a\"\
    , \"a\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"a\", \"a\", \"a\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"\
    a\", \"a\", \"a\", \"a\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"a\", \"a\", \"\
    a\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting ")" in /tmp/tmpxegowj6s.php
    on line 57

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $odd_lst\
    \ = [];\n    $even_lst = [];\n    foreach ($lst as $item) {\n        if (strlen($item)\
    \ % 2 == 0) {\n            $even_lst[] = $item;\n        } else {\n          \
    \  $odd_lst[] = $item;\n        }\n    }\n    sort($even_lst);\n    sort($odd_lst);\n\
    \    return $even_lst;\n}\n\n$lst = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpq_9hz62u.php:45\nStack trace:\n#0 /tmp/tmpq_9hz62u.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmpq_9hz62u.php on line 45\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst =\
    \ array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpr5lf9di6.php:30\nStack trace:\n#0 /tmp/tmpr5lf9di6.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpr5lf9di6.php on line 30\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    sort($lst);\n    return $lst;\n}\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmptafj5ojl.php:31\nStack\
    \ trace:\n#0 /tmp/tmptafj5ojl.php(40): test()\n#1 {main}\n  thrown in /tmp/tmptafj5ojl.php\
    \ on line 31\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\",\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmptdhx9pd6.php on line 44

    '
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $sorted_list\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            array_push($sorted_list, $item);\n        }\n    }\n    sort($sorted_list);\n\
    \    return $sorted_list;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsngnfhfl.php:44\n\
    Stack trace:\n#0 /tmp/tmpsngnfhfl.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpsngnfhfl.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    foreach ($lst as $key => $value) {\n        if (strlen($value)\
    \ % 2 == 0) {\n            $result[] = $value;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpefu191b5.php:43\n\
    Stack trace:\n#0 /tmp/tmpefu191b5.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpefu191b5.php\
    \ on line 43\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpndm5z4i2.php:42\n\
    Stack trace:\n#0 /tmp/tmpndm5z4i2.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpndm5z4i2.php\
    \ on line 42\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n$lst = array(\"ab\", \"a\", \"aaa\"\
    , \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => ab\n    [1] => cd\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpx5hup1me.php:40\nStack trace:\n#0 /tmp/tmpx5hup1me.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpx5hup1me.php on line 40\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n$lst = array(\"\
    aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n \
    \   [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmphq5k5t4b.php:32\nStack trace:\n#0 /tmp/tmphq5k5t4b.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphq5k5t4b.php on line 32\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n\
    print_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($val) {\n    \
    \    return strlen($val) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$arr = array(\"aa\", \"a\", \"aaa\");\n$arr = array(\"ab\", \"a\", \"aaa\"\
    , \"cd\");\nprint_r(sorted_list_sum($arr));\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => ab\n    [1] => cd\n)\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($x) {\n      \
    \  return strlen($x) % 2 == 0;\n    });\n    usort($lst, function($a, $b) {\n\
    \        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"a\",\
    \ \"aaa\");\n$lst = sorted_list_sum($lst);\nprint_r($lst);\necho \"<br>\";\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\");\n$lst = sorted_list_sum($lst);\nprint_r($lst);\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\");\n$lst = sorted_list_sum($lst);\n\
    print_r($lst);\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"\
    a\", \"aaa\");\n$lst = sorted_list_sum($lst);\nprint_r($lst);\necho \"<br>\";\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\");\n$lst =\
    \ sorted_list_sum($lst);\nprint_r($lst);\necho \"<br>\";\n$lst = array(\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\", \"a\");\n$lst = sorted_list_sum($lst);\n\
    print_r($lst);\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"\
    a\", \"aaa\", \"cd\", \"a\", \"aaa\");\n$lst = sorted_list_sum($lst);\nprint_r($lst);\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"\
    cd\", \"a\", \"aaa\", \"cd\");\n$lst = sorted_list_sum($lst);\nprint_r($lst);\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\",\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpe652nl0u.php on line 58

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($x) {\n      \
    \  return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    \n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3ryxqce.php:42\nStack\
    \ trace:\n#0 /tmp/tmpu3ryxqce.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpu3ryxqce.php\
    \ on line 42\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $odd_lst\
    \ = array();\n    $even_lst = array();\n    foreach ($lst as $item) {\n      \
    \  if (strlen($item) % 2 == 0) {\n            $even_lst[] = $item;\n        }\
    \ else {\n            $odd_lst[] = $item;\n        }\n    }\n    sort($even_lst);\n\
    \    sort($odd_lst);\n    return array_merge($even_lst, $odd_lst);\n}\n\n$lst\
    \ = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n    [1] => a\n    [2] => aaa\n)\n<br>Array\n(\n\
    \    [0] => ab\n    [1] => cd\n    [2] => a\n    [3] => aaa\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpbsgi9un3.php:42\nStack trace:\n\
    #0 /tmp/tmpbsgi9un3.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpbsgi9un3.php\
    \ on line 42\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst_len = count($lst);\n\
    \    $lst_len_odd = 0;\n    $lst_len_even = 0;\n    $lst_len_odd_arr = array();\n\
    \    $lst_len_even_arr = array();\n    for ($i = 0; $i < $lst_len; $i++) {\n \
    \       if (strlen($lst[$i]) % 2 == 0) {\n            $lst_len_even++;\n     \
    \       $lst_len_even_arr[] = $lst[$i];\n        } else {\n            $lst_len_odd++;\n\
    \            $lst_len_odd_arr[] = $lst[$i];\n        }\n    }\n    sort($lst_len_even_arr);\n\
    \    sort($lst_len_odd_arr);\n    $lst_len_even_arr = array_merge($lst_len_even_arr,\
    \ $lst_len_odd_arr);\n    return $lst_len_even_arr;\n}\n$lst = array(\"aa\", \"\
    a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n    [1] => a\n    [2] => aaa\n)\n<br>Array\n(\n\
    \    [0] => ab\n    [1] => cd\n    [2] => a\n    [3] => aaa\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmph5_u9zj2.php:49\nStack trace:\n\
    #0 /tmp/tmph5_u9zj2.php(58): test()\n#1 {main}\n  thrown in /tmp/tmph5_u9zj2.php\
    \ on line 49\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\nprint_r(sorted_list_sum(array(\"aa\", \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"\
    ab\", \"a\", \"aaa\", \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0oua9x9d.php:39\nStack\
    \ trace:\n#0 /tmp/tmp0oua9x9d.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp0oua9x9d.php\
    \ on line 39\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($item) {\n   \
    \     return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"cd\", \"cd\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"cd\", \"cd\", \"a\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"cd\", \"cd\", \"a\"\
    , \"a\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"cd\", \"cd\", \"a\", \"a\", \"a\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"cd\", \"cd\", \"\
    a\", \"a\", \"a\", \"a\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"cd\", \"cd\", \"a\", \"a\", \"\
    a\", \"a\", \"a\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"cd\", \"cd\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\");\nprint_r(sorted_list_sum($lst));\n\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n)\n<br>Array\n(\n    [0] => ab\n\
    \    [1] => cd\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n)\n<br>Array\n\
    (\n    [0] => ab\n    [1] => cd\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n)\n<br>Array\n(\n    [0] => ab\n\
    \    [1] => cd\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkih23qsn.php:64\n\
    Stack trace:\n#0 /tmp/tmpkih23qsn.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpkih23qsn.php\
    \ on line 64\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n$lst = array(\"aa\", \"a\", \"aaa\");\n$result = sorted_list_sum($lst);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpa7nyly_h.php:41\nStack trace:\n#0 /tmp/tmpa7nyly_h.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpa7nyly_h.php on line 41\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting ")" in /tmp/tmpvoiwra5m.php
    on line 49

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aa\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"a\", \"aa\", \"a\");\nprint_r(sorted_list_sum($lst));\necho \"\
    <br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aa\", \"a\", \"\
    aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"a\", \"aa\", \"a\", \"aaa\", \"a\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aa\", \"\
    a\", \"aaa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aa\", \"a\", \"aaa\"\
    , \"a\", \"aaa\", \"a\");\nprint_r(sorted_list_sum($lst));\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n \
    \   [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n    [0] => 1\n    [1]\
    \ => 2\n    [2] => 3\n)\n<br>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] =>\
    \ 3\n)\n<br>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n\
    (\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n    [0] => 1\n \
    \   [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n    [0] => 1\n    [1] => 2\n    [2]\
    \ => 3\n)\n<br>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpgffzf7ca.php:58\nStack trace:\n\
    #0 /tmp/tmpgffzf7ca.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpgffzf7ca.php\
    \ on line 58\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\nprint_r(sorted_list_sum(array(\"aa\", \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"\
    ab\", \"a\", \"aaa\", \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    $lst = array_values($lst);\n\
    \    usort($lst, function($a, $b) {\n        if (strlen($a) == strlen($b)) {\n\
    \            return strcmp($a, $b);\n        }\n        return strlen($a) - strlen($b);\n\
    \    });\n    return $lst;\n}\n\n$arr = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($arr));\n\
    echo \"<br>\";\n$arr = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($arr));\n\
    echo \"<br>\";\n$arr = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($arr));\necho \"<br>\";\n$arr = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($arr));\n\
    echo \"<br>\";\n$arr = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting ")" in /tmp/tmpw7moj3_p.php
    on line 50

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $new_lst\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $new_lst[] = $item;\n        }\n    }\n    sort($new_lst);\n\
    \    return $new_lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    \n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqygwtxfl.php:44\nStack\
    \ trace:\n#0 /tmp/tmpqygwtxfl.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpqygwtxfl.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($x) {\n      \
    \  return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    \n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3ryxqce.php:42\nStack\
    \ trace:\n#0 /tmp/tmpu3ryxqce.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpu3ryxqce.php\
    \ on line 42\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\necho \"<pre>\";\nprint_r(sorted_list_sum($lst));\n\
    echo \"</pre>\";\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\necho \"<pre>\"\
    ;\nprint_r(sorted_list_sum($lst));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => aa\n)\n</pre><pre>Array\n(\n    [0] => ab\n \
    \   [1] => cd\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf2dxagjz.php:46\n\
    Stack trace:\n#0 /tmp/tmpf2dxagjz.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpf2dxagjz.php\
    \ on line 46\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_map('strlen', $lst);\n    $lst = array_unique($lst);\n\
    \    sort($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwpwdebcg.php:30\n\
    Stack trace:\n#0 /tmp/tmpwpwdebcg.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpwpwdebcg.php\
    \ on line 30\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($x) {\n      \
    \  return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    print_r(sorted_list_sum(array(\"aa\", \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"\
    ab\", \"a\", \"aaa\", \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdgqqh7sa.php:38\nStack\
    \ trace:\n#0 /tmp/tmpdgqqh7sa.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdgqqh7sa.php\
    \ on line 38\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp4j3ghips.php:42\nStack trace:\n#0 /tmp/tmp4j3ghips.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmp4j3ghips.php on line 42\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst =\
    \ array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpr5lf9di6.php:30\nStack trace:\n#0 /tmp/tmpr5lf9di6.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpr5lf9di6.php on line 30\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    sort($lst);\n    $lst = array_map('strval', $lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nArray\n(\n   \
    \ [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmppd_dz5wc.php:37\nStack trace:\n#0 /tmp/tmppd_dz5wc.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppd_dz5wc.php on line 37\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdwggfbns.php:44\n\
    Stack trace:\n#0 /tmp/tmpdwggfbns.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpdwggfbns.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $new_lst\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $new_lst[] = $item;\n        }\n    }\n    sort($new_lst);\n\
    \    return $new_lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"cd\", \"cd\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\", \"cd\"\
    , \"cd\", \"\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting ")" in /tmp/tmppko0f3dx.php
    on line 43

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $sorted_list\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            array_push($sorted_list, $item);\n        }\n    }\n    sort($sorted_list);\n\
    \    return $sorted_list;\n}\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpa3uxdvp5.php:40\nStack trace:\n#0 /tmp/tmpa3uxdvp5.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmpa3uxdvp5.php on line 40\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($x) {\n      \
    \  return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    \n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxz0da2w_.php:43\n\
    Stack trace:\n#0 /tmp/tmpxz0da2w_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpxz0da2w_.php\
    \ on line 43\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $sum\
    \ = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        $sum += $lst[$i];\n\
    \    }\n    return $sum;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpw73ehi5e.php:20\nStack trace:\n#0 /tmp/tmpw73ehi5e.php(26): sorted_list_sum(Array)\n\
    #1 /tmp/tmpw73ehi5e.php(30): candidate(Array)\n#2 /tmp/tmpw73ehi5e.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpw73ehi5e.php on line 20\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\nprint_r(sorted_list_sum(array(\"\
    aa\", \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nArray\n(\n    [0]\
    \ => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpbd339_dm.php:29\nStack trace:\n#0 /tmp/tmpbd339_dm.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpbd339_dm.php on line 29\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$arr = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($arr));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp10xe7rya.php:41\nStack trace:\n#0 /tmp/tmp10xe7rya.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmp10xe7rya.php on line 41\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst =\
    \ array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpr5lf9di6.php:30\nStack trace:\n#0 /tmp/tmpr5lf9di6.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpr5lf9di6.php on line 30\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n\t$sum\
    \ = 0;\n\tforeach ($lst as $num) {\n\t\t$sum += $num;\n\t}\n\treturn $sum;\n}\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmplr_izflb.php:20\nStack trace:\n#0 /tmp/tmplr_izflb.php(26): sorted_list_sum(Array)\n\
    #1 /tmp/tmplr_izflb.php(30): candidate(Array)\n#2 /tmp/tmplr_izflb.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmplr_izflb.php on line 20\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst =\
    \ array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting ")" in /tmp/tmpy2cbgaa3.php
    on line 50

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $odd_lst\
    \ = [];\n    $even_lst = [];\n    foreach ($lst as $item) {\n        if (strlen($item)\
    \ % 2 == 0) {\n            $even_lst[] = $item;\n        } else {\n          \
    \  $odd_lst[] = $item;\n        }\n    }\n    sort($even_lst);\n    sort($odd_lst);\n\
    \    return array_merge($even_lst, $odd_lst);\n}\n\n$lst = array(\"aa\", \"a\"\
    , \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n    [1] => a\n    [2] => aaa\n)\n<br>Array\n(\n\
    \    [0] => ab\n    [1] => cd\n    [2] => a\n    [3] => aaa\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpyfif1mv9.php:42\nStack trace:\n\
    #0 /tmp/tmpyfif1mv9.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpyfif1mv9.php\
    \ on line 42\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $odd_lst\
    \ = [];\n    $even_lst = [];\n    foreach ($lst as $item) {\n        if (strlen($item)\
    \ % 2 == 0) {\n            $even_lst[] = $item;\n        } else {\n          \
    \  $odd_lst[] = $item;\n        }\n    }\n    sort($even_lst);\n    return $even_lst;\n\
    }\n\n$lst = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp4876bof_.php:44\nStack trace:\n#0 /tmp/tmp4876bof_.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmp4876bof_.php on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst =\
    \ array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpr5lf9di6.php:30\nStack trace:\n#0 /tmp/tmpr5lf9di6.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpr5lf9di6.php on line 30\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"\
    cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpuz471gze.php:34\nStack trace:\n#0 /tmp/tmpuz471gze.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpuz471gze.php on line 34\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($item) {\n   \
    \     return strlen($item) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n$lst = array(\"ab\", \"a\", \"aaa\"\
    , \"cd\");\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\");\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\n$lst = array(\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\");\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\n$lst = array(\"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\");\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting ")" in /tmp/tmpnsydqtiz.php
    on line 44

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $new_lst\
    \ = [];\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n\
    \            $new_lst[] = $item;\n        }\n    }\n    sort($new_lst);\n    return\
    \ $new_lst;\n}\n\n$lst = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4564_2et.php:44\n\
    Stack trace:\n#0 /tmp/tmp4564_2et.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp4564_2et.php\
    \ on line 44\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_filter($lst, function($x) { return strlen($x) % 2 == 0; });\n    sort($lst);\n\
    \    return $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwnncqp20.php:40\n\
    Stack trace:\n#0 /tmp/tmpwnncqp20.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpwnncqp20.php\
    \ on line 40\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3eymd5_p.php:32\n\
    Stack trace:\n#0 /tmp/tmp3eymd5_p.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp3eymd5_p.php\
    \ on line 32\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst = array(\"ab\", \"a\",\
    \ \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp6gd1i5he.php:32\nStack\
    \ trace:\n#0 /tmp/tmp6gd1i5he.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp6gd1i5he.php\
    \ on line 32\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n\t$lst\
    \ = array_map('strlen', $lst);\n\tsort($lst);\n\treturn $lst;\n}\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpcmfms3s1.php:29\nStack\
    \ trace:\n#0 /tmp/tmpcmfms3s1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpcmfms3s1.php\
    \ on line 29\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n \
    \   [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmppdfwv4q5.php:36\nStack trace:\n#0 /tmp/tmppdfwv4q5.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppdfwv4q5.php on line 36\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $odd_lst\
    \ = array();\n    $even_lst = array();\n    foreach ($lst as $item) {\n      \
    \  if (strlen($item) % 2 == 0) {\n            $even_lst[] = $item;\n        }\
    \ else {\n            $odd_lst[] = $item;\n        }\n    }\n    sort($even_lst);\n\
    \    sort($odd_lst);\n    return array_merge($even_lst, $odd_lst);\n}\n\nprint_r(sorted_list_sum(array(\"\
    aa\", \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n    [1] => a\n    [2] => aaa\n)\nArray\n(\n  \
    \  [0] => ab\n    [1] => cd\n    [2] => a\n    [3] => aaa\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpcm5r7aw0.php:39\nStack trace:\n#0 /tmp/tmpcm5r7aw0.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcm5r7aw0.php on line 39\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n\
    print_r(sorted_list_sum($lst));\necho '<br>';\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho '<br>';\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho\
    \ '<br>';\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"a\");\nprint_r(sorted_list_sum($lst));\n\
    echo '<br>';\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"a\", \"\
    aaa\");\nprint_r(sorted_list_sum($lst));\necho '<br>';\n$lst = array(\"ab\", \"\
    a\", \"aaa\", \"cd\", \"aaa\", \"a\", \"aaa\", \"a\");\nprint_r(sorted_list_sum($lst));\n\
    echo '<br>';\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"a\", \"\
    aaa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho '<br>';\n$lst =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"a\", \"aaa\", \"a\", \"aaa\"\
    , \"a\");\nprint_r(sorted_list_sum($lst));\necho '<br>';\n$lst = array(\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"aaa\", \"a\", \"aaa\", \"a\", \"aaa\", \"a\", \"aaa\"\
    );\nprint_r(sorted\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($x) {\n      \
    \  return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    \n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\",\
    \ \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting ")" in /tmp/tmpc4mce_t3.php
    on line 44

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($elem) {\n   \
    \     return strlen($elem) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n$lst = array(\"ab\", \"a\", \"aaa\"\
    , \"cd\");\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\");\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    ,\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpya7vgn_e.php on line 35

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"\
    cd\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\", \"a\"\
    , \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"\
    cd\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\",\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpx5kittgv.php on line 49

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n$lst = array(\"\
    aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n \
    \   [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmphq5k5t4b.php:32\nStack trace:\n#0 /tmp/tmphq5k5t4b.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphq5k5t4b.php on line 32\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"a\",\
    \ \"aaa\");\n$lst = sorted_list_sum($lst);\nprint_r($lst);\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\n$lst = sorted_list_sum($lst);\nprint_r($lst);\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nArray\n(\n    [0]\
    \ => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp9acbowsq.php:38\nStack trace:\n#0 /tmp/tmp9acbowsq.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9acbowsq.php on line 38\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n)\n<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpdhszmshp.php:46\nStack trace:\n#0 /tmp/tmpdhszmshp.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdhszmshp.php on line 46\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpndm5z4i2.php:42\n\
    Stack trace:\n#0 /tmp/tmpndm5z4i2.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpndm5z4i2.php\
    \ on line 42\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    foreach ($lst as $word) {\n        if (strlen($word) % 2 ==\
    \ 0) {\n            $result[] = $word;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkvtk4wcb.php:44\n\
    Stack trace:\n#0 /tmp/tmpkvtk4wcb.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpkvtk4wcb.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo '<br>';\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo '<br>';\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\");\nprint_r(sorted_list_sum($lst));\necho '<br>';\n$lst = array(\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\");\nprint_r(sorted_list_sum($lst));\necho '<br>';\n$lst = array(\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo '<br>';\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho '<br>';\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\"\
    , \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($l\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpkd1es8nj.php
    on line 48

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    sort($lst);\n    return $lst;\n}\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmptafj5ojl.php:31\nStack\
    \ trace:\n#0 /tmp/tmptafj5ojl.php(40): test()\n#1 {main}\n  thrown in /tmp/tmptafj5ojl.php\
    \ on line 31\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst =\
    \ array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\n$lst =\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpgklyrqeq.php on line 66

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    $lst = array_values($lst);\n\
    \    usort($lst, function($a, $b) {\n        if (strlen($a) == strlen($b)) {\n\
    \            return strcmp($a, $b);\n        }\n        return strlen($a) - strlen($b);\n\
    \    });\n    return $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"aaa\", \"\
    cd\");\nprint_r(sorted_list_sum($lst));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return array_sum($lst);\n\
    }\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoydm2ius.php:28\n\
    Stack trace:\n#0 /tmp/tmpoydm2ius.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpoydm2ius.php\
    \ on line 28\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumsmi4b7.php:28\n\
    Stack trace:\n#0 /tmp/tmpumsmi4b7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpumsmi4b7.php\
    \ on line 28\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"aa\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"b\", \"aa\", \"a\");\nprint_r(sorted_list_sum($lst));\necho \"\
    <br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"aa\", \"a\", \"\
    aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"b\", \"aa\", \"a\", \"aaa\", \"a\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"aa\", \"\
    a\", \"aaa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"b\", \"aa\", \"a\", \"aaa\"\
    , \"a\", \"aaa\", \"a\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting ")" in /tmp/tmpp803zo85.php
    on line 61

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $new_lst\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $new_lst[] = $item;\n        }\n    }\n    sort($new_lst);\n\
    \    return $new_lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"bb\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"bb\", \"b\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"bb\", \"b\", \"ccc\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"bb\", \"b\", \"ccc\"\
    , \"ddd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"bb\", \"b\", \"ccc\", \"ddd\", \"eee\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"bb\", \"b\", \"\
    ccc\", \"ddd\", \"eee\", \"fff\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"bb\", \"b\", \"ccc\", \"ddd\"\
    , \"eee\", \"fff\", \"ggg\");\nprint_r(sorted_list_sum($\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmp48_dvy3_.php on line 54

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n\t$lst\
    \ = array_unique($lst);\n\t$lst = array_values($lst);\n\t$lst = array_map('strlen',\
    \ $lst);\n\t$lst = array_unique($lst);\n\t$lst = array_values($lst);\n\tsort($lst);\n\
    \treturn $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nArray\n(\n   \
    \ [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpu1d1d_m5.php:38\nStack trace:\n#0 /tmp/tmpu1d1d_m5.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpu1d1d_m5.php on line 38\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\"\
    );\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp2_x0l0tq.php:33\nStack trace:\n#0 /tmp/tmp2_x0l0tq.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2_x0l0tq.php on line 33\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    $lst_len = count($lst);\n    for ($i = 0; $i < $lst_len; $i++)\
    \ {\n        $result[] = $lst[$i];\n        for ($j = $i + 1; $j < $lst_len; $j++)\
    \ {\n            if (strlen($lst[$i]) == strlen($lst[$j])) {\n               \
    \ $result[] = $lst[$j];\n            }\n        }\n        $i = $j - 1;\n    }\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjxs2cjim.php:37\n\
    Stack trace:\n#0 /tmp/tmpjxs2cjim.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpjxs2cjim.php\
    \ on line 37\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"bb\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"bb\", \"cc\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"bb\", \"cc\", \"dd\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"bb\", \"cc\", \"dd\"\
    , \"ee\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\"\
    , \"a\", \"aaa\", \"cd\", \"bb\", \"cc\", \"dd\", \"ee\", \"ff\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"bb\", \"cc\", \"\
    dd\", \"ee\", \"ff\", \"gg\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"bb\", \"cc\", \"dd\", \"ee\"\
    , \"ff\", \"gg\", \"hh\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting ")" in /tmp/tmp2s9mqdl6.php
    on line 61

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\nprint_r(sorted_list_sum(array(\"\
    aa\", \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\")));\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\nArray\n(\n    [0]\
    \ => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpsvxpmc3x.php:31\nStack trace:\n#0 /tmp/tmpsvxpmc3x.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsvxpmc3x.php on line 31\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($item) {\n   \
    \     return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\nprint_r(sorted_list_sum(array(\"aa\", \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"\
    ab\", \"a\", \"aaa\", \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmps5il7hfz.php:38\nStack\
    \ trace:\n#0 /tmp/tmps5il7hfz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmps5il7hfz.php\
    \ on line 38\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    $sorted_list = array();\n    $sorted_list = sort_list($lst);\n\
    \    $result = sum_list($sorted_list);\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_list() in\
    \ /tmp/tmpxn99x890.php:20\nStack trace:\n#0 /tmp/tmpxn99x890.php(25): sorted_list_sum(Array)\n\
    #1 /tmp/tmpxn99x890.php(29): candidate(Array)\n#2 /tmp/tmpxn99x890.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxn99x890.php on line 20\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst =\
    \ array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp7hf5uuop.php:31\nStack trace:\n#0 /tmp/tmp7hf5uuop.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7hf5uuop.php on line 31\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"ab\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"aaa\", \"ab\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"ab\", \"\
    cd\", \"ab\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"ab\", \"cd\", \"ab\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"ab\",\
    \ \"cd\", \"ab\", \"cd\", \"ab\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"ab\", \"cd\", \"ab\"\
    , \"cd\", \"ab\", \"cd\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n \
    \   [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n    [0] => 1\n    [1]\
    \ => 2\n    [2] => 3\n)\n<br>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] =>\
    \ 3\n)\n<br>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n\
    (\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n    [0] => 1\n \
    \   [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n    [0] => 1\n    [1] => 2\n    [2]\
    \ => 3\n)\n<br>Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpn2xmu5zy.php:58\nStack trace:\n\
    #0 /tmp/tmpn2xmu5zy.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpn2xmu5zy.php\
    \ on line 58\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    );\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"\
    cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\",\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpntp91hse.php on line 46

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($item) {\n   \
    \     return strlen($item) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"aa\");\n\
    print_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\", \"a\", \"\
    aaa\", \"cd\", \"aaa\", \"aa\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"aa\", \"\
    aaa\", \"aa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"aa\", \"aaa\", \"aa\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"aa\",\
    \ \"aaa\", \"aa\", \"aaa\", \"aa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    <br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"aaa\", \"aa\", \"aaa\"\
    , \"aa\", \"aaa\", \"aa\", \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"\
    <br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting ")" in /tmp/tmpwi5x31kx.php
    on line 59

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"\
    a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"a\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho\
    \ \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"a\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"a\"\
    , \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"ab\", \"a\", \"aaa\", \"cd\", \"a\", \"ab\", \"a\", \"aaa\"\
    , \"cd\", \"a\", \"\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting ")" in /tmp/tmpmjyh4fjb.php
    on line 50

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst_len\
    \ = count($lst);\n    $lst_sum = 0;\n    for ($i = 0; $i < $lst_len; $i++) {\n\
    \        $lst_sum += $lst[$i];\n    }\n    return $lst_sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpp_n61v8w.php:21\nStack trace:\n#0 /tmp/tmpp_n61v8w.php(27): sorted_list_sum(Array)\n\
    #1 /tmp/tmpp_n61v8w.php(31): candidate(Array)\n#2 /tmp/tmpp_n61v8w.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpp_n61v8w.php on line 21\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst_len = count($lst);\n\
    \    $lst_len_odd = 0;\n    $lst_len_even = 0;\n    $lst_len_odd_arr = array();\n\
    \    $lst_len_even_arr = array();\n    for ($i = 0; $i < $lst_len; $i++) {\n \
    \       if (strlen($lst[$i]) % 2 == 0) {\n            $lst_len_even++;\n     \
    \       $lst_len_even_arr[] = $lst[$i];\n        } else {\n            $lst_len_odd++;\n\
    \            $lst_len_odd_arr[] = $lst[$i];\n        }\n    }\n    $lst_len_odd_arr\
    \ = array_unique($lst_len_odd_arr);\n    $lst_len_even_arr = array_unique($lst_len_even_arr);\n\
    \    $lst_len_odd_arr = array_values($lst_len_odd_arr);\n    $lst_len_even_arr\
    \ = array_values($lst_len_even_arr);\n    $lst_len_odd_arr = array_map('strlen',\
    \ $lst_len_odd_arr);\n    $lst_len_even_arr = array_map('strlen', $lst_len_even_arr);\n\
    \    array_multisort($lst_len_odd_arr, SORT_ASC, $lst_len_odd_arr);\n    array_multisort($lst_len_even_arr,\
    \ SORT_ASC, $lst_len_even_arr);\n    $lst_len_odd_arr = array_unique($lst_len_odd_arr);\n\
    \    $lst_len_even_arr = array_unique($lst_len_even_arr);\n    $lst_len_odd_arr\
    \ = array_values($lst_len_odd_arr);\n    $lst_len_even_arr = array\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "(" in /tmp/tmptcngk1rc.php
    on line 46

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_map('strlen', $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst =\
    \ array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpr5lf9di6.php:30\nStack trace:\n#0 /tmp/tmpr5lf9di6.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpr5lf9di6.php on line 30\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n   \
    \ sort($lst);\n    return $lst;\n}\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmph6p7_mnu.php:33\nStack trace:\n#0 /tmp/tmph6p7_mnu.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmph6p7_mnu.php on line 33\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $new_lst\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $new_lst[] = $item;\n        }\n    }\n    sort($new_lst);\n\
    \    return $new_lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmprj7x1mi5.php:42\nStack trace:\n#0 /tmp/tmprj7x1mi5.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmprj7x1mi5.php on line 42\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_values($lst);\n    $lst = array_map('strlen',\
    \ $lst);\n    sort($lst);\n    return $lst;\n}\n\n$lst = array(\"aa\", \"a\",\
    \ \"aaa\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n\n/* Write a function that accepts an array of strings as a parameter,\ndeletes\
    \ the strings that have odd lengths from it,\nand returns the resulted array with\
    \ a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 2\n    [2] => 3\n)\n<br>Array\n(\n \
    \   [0] => 1\n    [1] => 2\n    [2] => 2\n    [3] => 3\n)\n<br>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpxzsrybyo.php:52\nStack trace:\n\
    #0 /tmp/tmpxzsrybyo.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpxzsrybyo.php\
    \ on line 52\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $result\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $result[] = $item;\n        }\n    }\n    sort($result);\n\
    \    return $result;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"\
    aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\necho \"<br>\"\
    ;\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\"\
    , \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\", \"ab\", \"a\"\
    , \"aaa\", \"cd\", \"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting "," or ";" in
    /tmp/tmpli1vk7te.php on line 54

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    usort($lst, function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n\
    \        }\n        return strlen($a) - strlen($b);\n    });\n    return $lst;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n"
  timestamp: 1660220716
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($x) {\n      \
    \  return strlen($x) % 2 == 0;\n    });\n    sort($lst);\n    return $lst;\n}\n\
    \n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\n$lst\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu3ryxqce.php:42\nStack\
    \ trace:\n#0 /tmp/tmpu3ryxqce.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpu3ryxqce.php\
    \ on line 42\n"
  timestamp: 1660220716
- exit_code: 0
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $lst\
    \ = array_unique($lst);\n    $lst = array_filter($lst, function($str) {\n    \
    \    return strlen($str) % 2 == 0;\n    });\n    $lst = array_values($lst);\n\
    \    usort($lst, function($a, $b) {\n        if (strlen($a) == strlen($b)) {\n\
    \            return strcmp($a, $b);\n        }\n        return strlen($a) - strlen($b);\n\
    \    });\n    return $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"<br>\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Write a function that accepts an array of strings as a parameter,\n\
    deletes the strings that have odd lengths from it,\nand returns the resulted array\
    \ with a sorted order,\nThe array is always an array of strings and never an array\
    \ of numbers,\nand it may contain duplicates.\nThe order of the array should be\
    \ ascending by length of each word, and you\nshould return the array sorted by\
    \ that rule.\nIf two words have the same length, sort the array alphabetically.\n\
    The function should return an array of strings in sorted order.\nYou may assume\
    \ that all words will have the same length.\nFor example:\n>>> list_sort(array(\"\
    aa\", \"a\", \"aaa\"))\narray(\"aa\")\n>>> list_sort(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\"))\narray(\"ab\", \"cd\")*/\nfunction sorted_list_sum($lst) {\n    $new_lst\
    \ = array();\n    foreach ($lst as $item) {\n        if (strlen($item) % 2 ==\
    \ 0) {\n            $new_lst[] = $item;\n        }\n    }\n    sort($new_lst);\n\
    \    return $new_lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpz1oenjpm.php:41\nStack trace:\n#0 /tmp/tmpz1oenjpm.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpz1oenjpm.php on line 41\n"
  timestamp: 1660220717
