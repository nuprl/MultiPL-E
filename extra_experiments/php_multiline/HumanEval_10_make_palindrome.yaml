name: HumanEval_10_make_palindrome
language: php
prompt: "<?php\n/* Find the shortest palindrome that begins with a supplied string.\n\
  Algorithm idea is simple:\n- Find the longest postfix of supplied string that is\
  \ a palindrome.\n- Append to the end of the string reverse of a string prefix that\
  \ comes before the palindromic suffix.\n>>> make_palindrome(\"\")\n\"\"\n>>> make_palindrome(\"\
  cat\")\n\"catac\"\n>>> make_palindrome(\"cata\")\n\"catac\"*/\nfunction make_palindrome($string)\
  \ {\n"
tests: "function candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
  \ Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\t$string_length = strlen($string);\n\t$string_reversed = strrev($string);\n\
    \t$longest_palindrome_suffix = '';\n\tfor ($i = 0; $i < $string_length; $i++)\
    \ {\n\t\tif (substr($string, $i) == substr($string_reversed, 0, $string_length\
    \ - $i)) {\n\t\t\t$longest_palindrome_suffix = substr($string, $i);\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn $string . strrev(substr($string, 0, $string_length - strlen($longest_palindrome_suffix)));\n\
    }\n\n/* Find the longest palindrome that begins with a supplied string.\nAlgorithm\
    \ idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n\
    >>> make_palindrome(\"\")\n\"\"\n>>> make_palindrome(\"cat\")\n\"cat\"\n>>> make_palindrome(\"\
    cata\")\n\"cata\"*/", "\t$len = strlen($string);\n\tfor ($i = $len - 1; $i >=\
    \ 0; $i--) {\n\t\tif (is_palindrome(substr($string, $i))) {\n\t\t\treturn $string\
    \ . strrev(substr($string, 0, $i));\n\t\t}\n\t}\n\treturn $string;\n}\n", "  $length\
    \ = strlen($string);\n  $i = 0;\n  $j = $length - 1;\n  while ($i < $j) {\n  \
    \  if ($string[$i] != $string[$j]) {\n      break;\n    }\n    $i++;\n    $j--;\n\
    \  }\n  if ($i >= $j) {\n    return $string;\n  }\n  $prefix = substr($string,\
    \ 0, $i);\n  $suffix = substr($string, $i);\n  return $prefix . make_palindrome(strrev($suffix))\
    \ . $suffix;\n}\n\necho make_palindrome(\"cata\");", "\t$string_length = strlen($string);\n\
    \t$palindrome_length = 0;\n\tfor ($i = $string_length - 1; $i >= 0; $i--) {\n\t\
    \t$substring = substr($string, 0, $i + 1);\n\t\t$substring_length = strlen($substring);\n\
    \t\t$substring_reversed = strrev($substring);\n\t\tif ($substring == $substring_reversed)\
    \ {\n\t\t\t$palindrome_length = $substring_length;\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \t$prefix = substr($string, $palindrome_length);\n\t$prefix_reversed = strrev($prefix);\n\
    \treturn $string . $prefix_reversed;\n}", "    $len = strlen($string);\n    for\
    \ ($i = $len; $i > 0; $i--) {\n        if (is_palindrome(substr($string, 0, $i)))\
    \ {\n            return $string . strrev(substr($string, $i));\n        }\n  \
    \  }\n    return $string;\n}\n", "    $len = strlen($string);\n    if ($len <=\
    \ 1) {\n        return $string;\n    }\n    $max_len = 0;\n    $max_pos = 0;\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $len1 = expand_around_center($string,\
    \ $i, $i);\n        $len2 = expand_around_center($string, $i, $i + 1);\n     \
    \   $len = max($len1, $len2);\n        if ($len > $max_len) {\n            $max_len\
    \ = $len;\n            $max_pos = $i;\n        }\n    }\n    $start = substr($string,\
    \ 0, $max_pos - $max_len + 1);\n    $end = substr($string, $max_pos + $max_len);\n\
    \    return $start . strrev($end) . substr($string, $max_pos - $max_len + 1, $max_len);\n\
    }\n", "    $length = strlen($string);\n    $i = 0;\n    while ($i < $length) {\n\
    \        if ($string[$i] == $string[$length - 1]) {\n            $i++;\n     \
    \       $length--;\n        } else {\n            break;\n        }\n    }\n \
    \   $prefix = substr($string, 0, $i);\n    $suffix = substr($string, $i);\n  \
    \  return $string . strrev($prefix);\n}\n\necho make_palindrome(\"cata\");", " \
    \   $length = strlen($string);\n    for ($i = $length - 1; $i >= 0; $i--) {\n\
    \        if ($string[$i] == $string[0]) {\n            $substring = substr($string,\
    \ 0, $i + 1);\n            if (is_palindrome($substring)) {\n                return\
    \ $string . strrev(substr($string, $i + 1));\n            }\n        }\n    }\n\
    \    return $string;\n}\n", "    $length = strlen($string);\n    $i = $length;\n\
    \    while ($i > 0) {\n        $substring = substr($string, 0, $i);\n        if\
    \ ($substring == strrev($substring)) {\n            return $string . strrev(substr($string,\
    \ $i));\n        }\n        $i--;\n    }\n    return $string;\n}\n\necho make_palindrome(\"\
    cat\");", "\t$string_length = strlen($string);\n\t$palindrome_length = 0;\n\t\
    $palindrome_start = 0;\n\tfor ($i = 0; $i < $string_length; $i++) {\n\t\t$palindrome_length\
    \ = max($palindrome_length, longest_palindrome_at($string, $i));\n\t\tif ($palindrome_length\
    \ == $string_length - $i) {\n\t\t\t$palindrome_start = $i;\n\t\t\tbreak;\n\t\t\
    }\n\t}\n\t$palindrome_end = $palindrome_start + $palindrome_length;\n\treturn\
    \ substr($string, 0, $palindrome_start) . strrev(substr($string, $palindrome_end));\n\
    }\n", "  $string_length = strlen($string);\n  $palindrome_length = 0;\n  $palindrome_start\
    \ = 0;\n  for ($i = 0; $i < $string_length; $i++) {\n    $palindrome_length =\
    \ max($palindrome_length, find_palindrome_length($string, $i, $i));\n    $palindrome_length\
    \ = max($palindrome_length, find_palindrome_length($string, $i, $i + 1));\n  \
    \  if ($palindrome_length == $string_length - $i) {\n      $palindrome_start =\
    \ $i;\n      break;\n    }\n  }\n  return substr($string, 0, $palindrome_start)\
    \ . strrev(substr($string, $palindrome_start + $palindrome_length));\n}\n", " \
    \   $string_length = strlen($string);\n    $palindrome_length = 0;\n    $palindrome_position\
    \ = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n        $palindrome_length\
    \ = max($palindrome_length, longest_palindrome_length($string, $i));\n       \
    \ if ($palindrome_length == $string_length - $i) {\n            $palindrome_position\
    \ = $i;\n            break;\n        }\n    }\n    $prefix = substr($string, 0,\
    \ $palindrome_position);\n    $prefix = strrev($prefix);\n    return $string .\
    \ $prefix;\n}\n", "    $string_length = strlen($string);\n    $palindrome_length\
    \ = 0;\n    $palindrome_index = 0;\n    for ($i = 0; $i < $string_length; $i++)\
    \ {\n        $palindrome_length = max($palindrome_length, longest_palindrome_length($string,\
    \ $i, $i));\n        $palindrome_length = max($palindrome_length, longest_palindrome_length($string,\
    \ $i, $i + 1));\n        if ($palindrome_length == $string_length - $i) {\n  \
    \          $palindrome_index = $i;\n            break;\n        }\n    }\n   \
    \ return substr($string, 0, $palindrome_index) . strrev(substr($string, $palindrome_index\
    \ + $palindrome_length));\n}\n", "    $string_length = strlen($string);\n    $palindrome_length\
    \ = 0;\n    $palindrome_start = 0;\n    $palindrome_end = 0;\n    for ($i = 0;\
    \ $i < $string_length; $i++) {\n        $palindrome_length = max($palindrome_length,\
    \ find_palindrome_length($string, $i, $i));\n        $palindrome_length = max($palindrome_length,\
    \ find_palindrome_length($string, $i, $i + 1));\n        if ($palindrome_length\
    \ > $palindrome_end - $palindrome_start) {\n            $palindrome_start = $i\
    \ - ($palindrome_length - 1) / 2;\n            $palindrome_end = $i + $palindrome_length\
    \ / 2;\n        }\n    }\n    $prefix = substr($string, 0, $palindrome_start);\n\
    \    $suffix = substr($string, $palindrome_end + 1);\n    return $prefix . $string\
    \ . strrev($prefix);\n}", "    $string_length = strlen($string);\n    $palindrome_length\
    \ = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n        $palindrome_length\
    \ = max($palindrome_length, longest_palindrome_length($string, $i, $i));\n   \
    \     $palindrome_length = max($palindrome_length, longest_palindrome_length($string,\
    \ $i, $i + 1));\n    }\n    return $string . strrev(substr($string, 0, $string_length\
    \ - $palindrome_length));\n}\n", "    $length = strlen($string);\n    $i = 0;\n\
    \    $j = $length - 1;\n    while ($i < $j) {\n        if ($string[$i] == $string[$j])\
    \ {\n            $i++;\n            $j--;\n        } else {\n            break;\n\
    \        }\n    }\n    if ($i >= $j) {\n        return $string;\n    }\n    $prefix\
    \ = substr($string, 0, $i);\n    $suffix = substr($string, $i);\n    $suffix_reversed\
    \ = strrev($suffix);\n    return $prefix . $suffix_reversed . $suffix;\n}\n\n\
    echo make_palindrome(\"cata\");", "    $len = strlen($string);\n    $i = 0;\n\
    \    $j = $len - 1;\n    while ($i < $j) {\n        if ($string[$i] != $string[$j])\
    \ {\n            break;\n        }\n        $i++;\n        $j--;\n    }\n    if\
    \ ($i < $j) {\n        $string .= strrev(substr($string, 0, $j));\n    }\n   \
    \ return $string;\n}\n\n/* Find the longest palindrome that begins with a supplied\
    \ string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string\
    \ that is a palindrome.\n>>> make_palindrome(\"\")\n\"\"\n>>> make_palindrome(\"\
    cat\")\n\"cat\"\n>>> make_palindrome(\"cata\")\n\"cata\"*/", "\t$string_length\
    \ = strlen($string);\n\tif ($string_length == 0) {\n\t\treturn \"\";\n\t}\n\t\
    $palindrome_length = 0;\n\tfor ($i = 1; $i <= $string_length; $i++) {\n\t\tif\
    \ (is_palindrome(substr($string, 0, $i))) {\n\t\t\t$palindrome_length = $i;\n\t\
    \t}\n\t}\n\t$prefix = substr($string, 0, $string_length - $palindrome_length);\n\
    \t$prefix_reversed = strrev($prefix);\n\treturn $string . $prefix_reversed;\n\
    }\n", "    $len = strlen($string);\n    if ($len < 2) {\n        return $string;\n\
    \    }\n    $max_len = 0;\n    $max_pos = 0;\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        $len1 = expand_around_center($string, $i, $i);\n        $len2 = expand_around_center($string,\
    \ $i, $i + 1);\n        $len = max($len1, $len2);\n        if ($len > $max_len)\
    \ {\n            $max_len = $len;\n            $max_pos = $i;\n        }\n   \
    \ }\n    $start = substr($string, 0, $max_pos - $max_len + 1);\n    $end = substr($string,\
    \ $max_pos + $max_len);\n    return $start . strrev($end) . substr($string, $max_pos\
    \ - $max_len + 1, $max_len * 2 - 1);\n}", "    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        $palindrome_length = max($palindrome_length, get_palindrome_length($string,\
    \ $i, $i));\n        $palindrome_length = max($palindrome_length, get_palindrome_length($string,\
    \ $i, $i + 1));\n    }\n    $prefix = substr($string, 0, $string_length - $palindrome_length);\n\
    \    $prefix = strrev($prefix);\n    return $string . $prefix;\n}\n", "    $reverse\
    \ = strrev($string);\n    $length = strlen($string);\n    $i = 0;\n    while ($i\
    \ < $length) {\n        if (substr($string, 0, $length - $i) == substr($reverse,\
    \ $i)) {\n            return $string . substr($reverse, $i);\n        }\n    \
    \    $i++;\n    }\n    return $string;\n}\n\necho make_palindrome(\"cat\");",
  "    $length = strlen($string);\n    $i = $length;\n    while ($i > 0) {\n     \
    \   $prefix = substr($string, 0, $i);\n        $postfix = substr($string, $length\
    \ - $i);\n        if ($prefix == strrev($postfix)) {\n            return $string\
    \ . strrev(substr($string, 0, $length - $i));\n        }\n        $i--;\n    }\n\
    \    return $string . strrev($string);\n}\n\n/* Find the shortest palindrome that\
    \ begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest\
    \ postfix of supplied string that is a palindrome.\n- Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    >>> make_palindrome(\"\")\n\"\"\n>>> make_palindrome(\"cat\")\n\"catac\"\n>>>\
    \ make_palindrome(\"cata\")\n\"catac\"*/", "    $string_length = strlen($string);\n\
    \    $max_palindrome_length = 0;\n    $max_palindrome_index = 0;\n    for ($i\
    \ = 0; $i < $string_length; $i++) {\n        $palindrome_length = 0;\n       \
    \ $left_index = $i;\n        $right_index = $i;\n        while ($left_index >=\
    \ 0 && $right_index < $string_length && $string[$left_index] == $string[$right_index])\
    \ {\n            $palindrome_length = $right_index - $left_index + 1;\n      \
    \      $left_index--;\n            $right_index++;\n        }\n        if ($palindrome_length\
    \ > $max_palindrome_length) {\n            $max_palindrome_length = $palindrome_length;\n\
    \            $max_palindrome_index = $i;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $max_palindrome_index - $max_palindrome_length + 1);\n    $suffix = strrev($prefix);\n\
    \    return $string . $suffix;\n}\n\necho make_palindrome(\"cata\");", "    $length\
    \ = strlen($string);\n    $i = 0;\n    while ($i < $length) {\n        if ($string[$i]\
    \ == $string[$length - 1]) {\n            $i++;\n            $length--;\n    \
    \    } else {\n            break;\n        }\n    }\n    if ($i == $length) {\n\
    \        return $string;\n    }\n    $prefix = substr($string, 0, $i);\n    $suffix\
    \ = substr($string, $i);\n    return $string . strrev($prefix);\n}\n\necho make_palindrome(\"\
    cata\");", "    $length = strlen($string);\n    $palindrome_length = 0;\n    for\
    \ ($i = 0; $i < $length; $i++) {\n        if ($string[$i] == $string[$length -\
    \ 1 - $i]) {\n            $palindrome_length++;\n        } else {\n          \
    \  break;\n        }\n    }\n    return $string . strrev(substr($string, 0, $length\
    \ - $palindrome_length));\n}\n\necho make_palindrome(\"cata\");", "\t$string_length\
    \ = strlen($string);\n\t$reverse_string = strrev($string);\n\t$longest_palindrome_suffix\
    \ = '';\n\tfor ($i = 0; $i < $string_length; $i++) {\n\t\tif (substr($string,\
    \ $i) == substr($reverse_string, 0, $string_length - $i)) {\n\t\t\t$longest_palindrome_suffix\
    \ = substr($string, $i);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $string . strrev(substr($string,\
    \ 0, $string_length - strlen($longest_palindrome_suffix)));\n}\n\n/* Find the\
    \ longest palindrome that begins with a supplied string.\nAlgorithm idea is simple:\n\
    - Find the longest postfix of supplied string that is a palindrome.\n>>> make_palindrome(\"\
    \")\n\"\"\n>>> make_palindrome(\"cat\")\n\"cat\"\n>>> make_palindrome(\"cata\"\
    )\n\"cata\"*/", "    $length = strlen($string);\n    $palindrome = $string;\n\
    \    for ($i = 0; $i < $length; $i++) {\n        $prefix = substr($string, 0,\
    \ $length - $i);\n        $suffix = substr($string, $i);\n        if ($prefix\
    \ == strrev($suffix)) {\n            $palindrome .= strrev(substr($string, 0,\
    \ $i));\n            break;\n        }\n    }\n    return $palindrome;\n}\n\n\
    echo make_palindrome(\"cata\");", "    $length = strlen($string);\n    $i = 0;\n\
    \    $j = $length - 1;\n    while ($i < $j) {\n        if ($string[$i] != $string[$j])\
    \ {\n            break;\n        }\n        $i++;\n        $j--;\n    }\n    if\
    \ ($i >= $j) {\n        return $string;\n    }\n    $prefix = substr($string,\
    \ 0, $i);\n    $suffix = substr($string, $i);\n    return $suffix . make_palindrome($prefix)\
    \ . strrev($prefix);\n}\n\necho make_palindrome(\"cata\");", "    $length = strlen($string);\n\
    \    $palindrome = $string;\n    for ($i = 0; $i < $length; $i++) {\n        $substring\
    \ = substr($string, 0, $length - $i);\n        if (is_palindrome($substring))\
    \ {\n            $palindrome .= strrev(substr($string, $length - $i));\n     \
    \       break;\n        }\n    }\n    return $palindrome;\n}\n", "    $string_length\
    \ = strlen($string);\n    if ($string_length == 0) {\n        return $string;\n\
    \    }\n    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++)\
    \ {\n        $palindrome_length = max($palindrome_length, get_palindrome_length($string,\
    \ $i, $i));\n        $palindrome_length = max($palindrome_length, get_palindrome_length($string,\
    \ $i, $i + 1));\n    }\n    $prefix = substr($string, 0, $string_length - $palindrome_length);\n\
    \    return $prefix . strrev($prefix) . substr($string, $string_length - $palindrome_length);\n\
    }", "    $string_length = strlen($string);\n    $string_reversed = strrev($string);\n\
    \    $longest_palindrome_suffix = '';\n    for ($i = 0; $i < $string_length; $i++)\
    \ {\n        if (substr($string, $i) == substr($string_reversed, 0, $string_length\
    \ - $i)) {\n            $longest_palindrome_suffix = substr($string, $i);\n  \
    \      }\n    }\n    return $string . strrev(substr($string, 0, $string_length\
    \ - strlen($longest_palindrome_suffix)));\n}\n\n/*\n * Tests\n */\nassert(make_palindrome(\"\
    \") == \"\");\nassert(make_palindrome(\"cat\") == \"catac\");\nassert(make_palindrome(\"\
    cata\") == \"catac\");", "    $string_length = strlen($string);\n    for ($i =\
    \ $string_length; $i > 0; $i--) {\n        $substring = substr($string, 0, $i);\n\
    \        if ($substring == strrev($substring)) {\n            return $string .\
    \ strrev(substr($string, 0, $string_length - $i));\n        }\n    }\n    return\
    \ $string;\n}\n\n/* Find the longest palindrome in a string.\nAlgorithm idea is\
    \ simple:\n- Find the longest postfix of supplied string that is a palindrome.\n\
    - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n>>> find_longest_palindrome(\"\")\n\"\"\n>>> find_longest_palindrome(\"\
    cat\")\n\"c\"\n>>> find_longest_palindrome(\"cata\")\n\"ata\"*/", "    $string_length\
    \ = strlen($string);\n    $string_reversed = strrev($string);\n    $string_reversed_length\
    \ = strlen($string_reversed);\n    $longest_palindrome_suffix = '';\n    for ($i\
    \ = 0; $i < $string_length; $i++) {\n        $suffix = substr($string, $i);\n\
    \        $suffix_length = strlen($suffix);\n        $prefix = substr($string_reversed,\
    \ 0, $string_reversed_length - $suffix_length);\n        if ($suffix == $prefix)\
    \ {\n            $longest_palindrome_suffix = $suffix;\n        }\n    }\n   \
    \ $prefix = substr($string, 0, $string_length - strlen($longest_palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n\necho make_palindrome(\"cata\");",
  "    $len = strlen($string);\n    for ($i = $len; $i >= 0; $i--) {\n        if (is_palindrome(substr($string,\
    \ 0, $i))) {\n            return $string . strrev(substr($string, 0, $len - $i));\n\
    \        }\n    }\n}\n", "    $longest_palindrome = find_longest_palindrome($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($longest_palindrome));\n\
    \    return $string . strrev($prefix);\n}\n", "    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        $palindrome_length = max($palindrome_length, longest_palindrome_length($string,\
    \ $i, $i));\n        $palindrome_length = max($palindrome_length, longest_palindrome_length($string,\
    \ $i, $i + 1));\n    }\n    $prefix = substr($string, 0, $string_length - $palindrome_length);\n\
    \    return $prefix . strrev($prefix) . substr($string, $string_length - $palindrome_length);\n\
    }", "    $len = strlen($string);\n    for ($i = $len - 1; $i >= 0; $i--) {\n \
    \       if ($string[0] === $string[$i]) {\n            $substr = substr($string,\
    \ 0, $i + 1);\n            if (is_palindrome($substr)) {\n                return\
    \ $string . strrev(substr($string, $i + 1));\n            }\n        }\n    }\n\
    \    return $string;\n}\n", "\t$string_length = strlen($string);\n\t$longest_palindrome_length\
    \ = 0;\n\t$longest_palindrome_start = 0;\n\tfor ($i = 0; $i < $string_length;\
    \ $i++) {\n\t\t$palindrome_length = 0;\n\t\tfor ($j = $i; $j < $string_length;\
    \ $j++) {\n\t\t\tif ($string[$i] == $string[$j]) {\n\t\t\t\t$palindrome_length++;\n\
    \t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($palindrome_length > $longest_palindrome_length)\
    \ {\n\t\t\t$longest_palindrome_length = $palindrome_length;\n\t\t\t$longest_palindrome_start\
    \ = $i;\n\t\t}\n\t}\n\t$prefix = substr($string, 0, $longest_palindrome_start);\n\
    \t$suffix = substr($string, $longest_palindrome_start, $longest_palindrome_length);\n\
    \t$reverse_prefix = strrev($prefix);\n\treturn $string . $reverse_prefix;\n}\n\
    \necho make_palindrome(\"cata\");", "\t$len = strlen($string);\n\t$i = 0;\n\t\
    $j = $len - 1;\n\t$k = 0;\n\twhile ($i < $j) {\n\t\tif ($string[$i] == $string[$j])\
    \ {\n\t\t\t$i++;\n\t\t\t$j--;\n\t\t} else {\n\t\t\t$i = 0;\n\t\t\t$k++;\n\t\t\t\
    $j = $len - 1 - $k;\n\t\t}\n\t}\n\t$prefix = substr($string, 0, $len - $k);\n\t\
    $suffix = strrev($prefix);\n\treturn $string . $suffix;\n}\n\necho make_palindrome(\"\
    cata\");", "\t$length = strlen($string);\n\t$i = $length - 1;\n\twhile ($i > 0)\
    \ {\n\t\tif ($string[$i] == $string[0]) {\n\t\t\t$j = 0;\n\t\t\twhile ($j < $i)\
    \ {\n\t\t\t\tif ($string[$j] != $string[$i - $j]) {\n\t\t\t\t\tbreak;\n\t\t\t\t\
    }\n\t\t\t\t$j++;\n\t\t\t}\n\t\t\tif ($j == $i) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t\t$i--;\n\t}\n\t$prefix = substr($string, $i);\n\t$prefix = strrev($prefix);\n\
    \treturn $string . $prefix;\n}\n\necho make_palindrome(\"cata\");", "  $len =\
    \ strlen($string);\n  $i = $len - 1;\n  while ($i >= 0) {\n    if ($string[$i]\
    \ == $string[$len - 1]) {\n      $len--;\n    }\n    $i--;\n  }\n  $prefix = substr($string,\
    \ 0, $len);\n  $prefix = strrev($prefix);\n  return $string . $prefix;\n}\n\n\
    echo make_palindrome(\"cata\");", "    $len = strlen($string);\n    $i = $len;\n\
    \    while ($i > 0) {\n        if (is_palindrome(substr($string, 0, $i))) {\n\
    \            break;\n        }\n        $i--;\n    }\n    return $string . strrev(substr($string,\
    \ 0, $len - $i));\n}\n", "    $length = strlen($string);\n    $suffix = \"\";\n\
    \    for ($i = $length - 1; $i >= 0; $i--) {\n        $suffix .= $string[$i];\n\
    \        if ($string == substr($suffix, 0, $length - $i) . $suffix) {\n      \
    \      return $string . substr($suffix, $length - $i);\n        }\n    }\n}\n\n\
    echo make_palindrome(\"cat\");", "    $string_length = strlen($string);\n    if\
    \ ($string_length == 0) {\n        return \"\";\n    }\n    $palindrome_suffix\
    \ = find_palindrome_suffix($string);\n    $palindrome_prefix = substr($string,\
    \ 0, $string_length - strlen($palindrome_suffix));\n    return $string . strrev($palindrome_prefix);\n\
    }\n", "\t$length = strlen($string);\n\t$i = $length;\n\twhile ($i > 0) {\n\t\t\
    if (is_palindrome(substr($string, 0, $i))) {\n\t\t\t$prefix = substr($string,\
    \ $i);\n\t\t\treturn $string . strrev($prefix);\n\t\t}\n\t\t$i--;\n\t}\n\treturn\
    \ $string;\n}\n", "\t$reverse = strrev($string);\n\t$length = strlen($string);\n\
    \tfor ($i = 0; $i < $length; $i++) {\n\t\tif (substr($string, 0, $length - $i)\
    \ == substr($reverse, $i)) {\n\t\t\treturn $string . substr($reverse, $i);\n\t\
    \t}\n\t}\n\treturn $string . $reverse;\n}\n\necho make_palindrome(\"cat\") . \"\
    \\n\";\necho make_palindrome(\"cata\") . \"\\n\";\necho make_palindrome(\"\")\
    \ . \"\\n\";", "  $string_length = strlen($string);\n  $palindrome_length = 0;\n\
    \  for ($i = $string_length - 1; $i >= 0; $i--) {\n    if ($string[$i] == $string[$string_length\
    \ - 1 - $palindrome_length]) {\n      $palindrome_length++;\n    }\n  }\n  return\
    \ $string . strrev(substr($string, 0, $string_length - $palindrome_length));\n\
    }\n\necho make_palindrome(\"cata\");\n", "\t$length = strlen($string);\n\t$palindrome\
    \ = $string;\n\tfor ($i = $length; $i > 0; $i--) {\n\t\tif (is_palindrome(substr($string,\
    \ 0, $i))) {\n\t\t\t$palindrome .= strrev(substr($string, $i));\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn $palindrome;\n}\n", "\t$length = strlen($string);\n\t$i =\
    \ 0;\n\t$j = $length - 1;\n\t$k = $length - 1;\n\twhile ($i < $j) {\n\t\tif ($string[$i]\
    \ == $string[$j]) {\n\t\t\t$i++;\n\t\t\t$j--;\n\t\t} else {\n\t\t\t$i = 0;\n\t\
    \t\t$k--;\n\t\t\t$j = $k;\n\t\t}\n\t}\n\t$prefix = substr($string, 0, $length\
    \ - $k - 1);\n\t$prefix = strrev($prefix);\n\treturn $string . $prefix;\n}\n\n\
    echo make_palindrome(\"cat\") . \"\\n\";\necho make_palindrome(\"cata\") . \"\\\
    n\";\necho make_palindrome(\"\") . \"\\n\";", "    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        if ($string[$i] == $string[$string_length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $string_length - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n\necho make_palindrome(\"cata\");",
  "    $len = strlen($string);\n    if ($len == 0) {\n        return $string;\n  \
    \  }\n    $i = $len - 1;\n    while ($i >= 0) {\n        if ($string[$i] == $string[0])\
    \ {\n            $j = 0;\n            while ($j < $i) {\n                if ($string[$j]\
    \ != $string[$i - $j]) {\n                    break;\n                }\n    \
    \            $j++;\n            }\n            if ($j == $i) {\n             \
    \   break;\n            }\n        }\n        $i--;\n    }\n    $prefix = substr($string,\
    \ $i + 1);\n    $prefix = strrev($prefix);\n    return $string . $prefix;\n}\n\
    \n/*\n * Test code\n */\nassert_options(ASSERT_BAIL, 1);\n\n$tests = array(\n\
    \    array(\"\", \"\"),\n    array(\"cat\", \"catac\"),\n    array(\"cata\", \"\
    catac\"),\n    array(\"cataa\", \"cataacat\"),\n    array(\"cataaa\", \"cataaacataa\"\
    ),\n    array(\"cataaaa\", \"cataaaacataaa\"),\n    array(\"cataaaaa\", \"cataaaaacataaaa\"\
    ),\n    array(\"cataaaaaa\", \"cataaaaaacataaaaa\"),\n    array(\"cataaaaaaa\"\
    , \"cataaaaaaacataaaaaa\"),\n    array(\"cataaaaaaaa\", \"cataaaaaaaacataaaaaaa\"\
    ),\n    array(\"cataaaaaaaaa\", \"cataaaaaaaaacataaaaaaaa\"),\n    array(\"cataaaaaaaaaa\"\
    , \"cataaaaaaaaaacataaaaaaaaa\"),\n    array(\"cataaaaaaaaaaa\", \"cataaaaaaaaaaacataaaaaaaaaa\"\
    ),\n    array(\"cataaaaaaaaaaaa\", \"cataaaaaaaaaaaacataaaaaaaaaaa\"),\n    array(\"\
    cataaaaaaaaaaaaa\", \"cataaaaaaaaaaaaacataaaaaaaaaaaa\"),\n    array(\"cataaaaaaaaaaaaaa\"\
    , \"cataaaaaaaaaaaaaacataaaaaaaaaaaaa\"),\n    array(\"cataaaaaaaaaaaaaaa\", \"\
    cataaaaaaaaaaaaaaacataaaaaaaaaaaaaa\"),\n    array(\"cata", "    $string_length\
    \ = strlen($string);\n    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length;\
    \ $i++) {\n        if ($string[$i] == $string[$string_length - $i - 1]) {\n  \
    \          $palindrome_length++;\n        } else {\n            break;\n     \
    \   }\n    }\n    $prefix = substr($string, 0, $string_length - $palindrome_length);\n\
    \    $prefix_reversed = strrev($prefix);\n    return $string . $prefix_reversed;\n\
    }\n\necho make_palindrome(\"cat\");", "    $len = strlen($string);\n    $i = $len\
    \ - 1;\n    while ($i >= 0) {\n        if ($string[$i] == $string[$len - 1]) {\n\
    \            $len--;\n        }\n        $i--;\n    }\n    return $string . strrev(substr($string,\
    \ 0, $len));\n}\n\necho make_palindrome(\"cata\");", "    $string_length = strlen($string);\n\
    \    $longest_palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++)\
    \ {\n        $palindrome_length = 0;\n        $left_index = $i;\n        $right_index\
    \ = $i;\n        while ($left_index >= 0 && $right_index < $string_length) {\n\
    \            if ($string[$left_index] == $string[$right_index]) {\n          \
    \      $palindrome_length += 2;\n                $left_index--;\n            \
    \    $right_index++;\n            } else {\n                break;\n         \
    \   }\n        }\n        if ($palindrome_length > $longest_palindrome_length)\
    \ {\n            $longest_palindrome_length = $palindrome_length;\n          \
    \  $longest_palindrome_start_index = $i - ($palindrome_length - 1) / 2;\n    \
    \    }\n    }\n    for ($i = 0; $i < $string_length; $i++) {\n        $palindrome_length\
    \ = 1;\n        $left_index = $i;\n        $right_index = $i + 1;\n        while\
    \ ($left_index >= 0 && $right_index < $string_length) {\n            if ($string[$left_index]\
    \ == $string[$right_index]) {\n                $palindrome_length += 2;\n    \
    \            $left_index--;\n                $right_index++;\n            } else\
    \ {\n                break;\n            }\n        }\n        if ($palindrome_length\
    \ > $longest_palindrome_length) {\n            $longest_palindrome_length = $palindrome_length;\n\
    \            $longest_palindrome_start_index = $i - ($palindrome_length - 2) /\
    \ 2;\n        }\n    }\n    $prefix = substr($string, 0, $longest_palindrome_start_index);\n\
    \    $palindrome = substr($string, $longest_palindrome_start_index, $longest_palindrome_length);\n\
    \    $prefix_reversed = str", "\t$length = strlen($string);\n\t$palindrome = $string;\n\
    \tfor ($i = $length - 1; $i >= 0; $i--) {\n\t\tif (is_palindrome(substr($string,\
    \ $i))) {\n\t\t\t$palindrome .= strrev(substr($string, 0, $i));\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn $palindrome;\n}\n", "    $string_length = strlen($string);\n\
    \    $palindrome_suffix = find_palindrome_suffix($string);\n    $palindrome_prefix\
    \ = substr($string, 0, $string_length - strlen($palindrome_suffix));\n    $palindrome_prefix\
    \ = strrev($palindrome_prefix);\n    return $string . $palindrome_prefix;\n}\n",
  "    $length = strlen($string);\n    $i = $length;\n    while ($i > 0) {\n     \
    \   $substring = substr($string, 0, $i);\n        if ($substring == strrev($substring))\
    \ {\n            break;\n        }\n        $i--;\n    }\n    $prefix = substr($string,\
    \ $i);\n    return $string . strrev($prefix);\n}\n\necho make_palindrome(\"cata\"\
    );", "    $len = strlen($string);\n    $i = 0;\n    $j = $len - 1;\n    while\
    \ ($i < $j) {\n        if ($string[$i] != $string[$j]) {\n            break;\n\
    \        }\n        $i++;\n        $j--;\n    }\n    if ($i >= $j) {\n       \
    \ return $string;\n    }\n    $prefix = substr($string, 0, $i);\n    $suffix =\
    \ substr($string, $i);\n    $suffix_rev = strrev($suffix);\n    return $prefix\
    \ . $suffix_rev . $suffix;\n}\n\n/* Find the longest palindrome that begins with\
    \ a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of\
    \ supplied string that is a palindrome.\n- Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome(\"\
    \")\n\"\"\n>>> make_palindrome(\"cat\")\n\"catac\"\n>>> make_palindrome(\"cata\"\
    )\n\"catac\"*/", "    $len = strlen($string);\n    for ($i = $len; $i > 0; $i--)\
    \ {\n        $substring = substr($string, 0, $i);\n        if ($substring == strrev($substring))\
    \ {\n            return $string . strrev(substr($string, 0, $len - $i));\n   \
    \     }\n    }\n    return $string;\n}\n\necho make_palindrome(\"cat\");", " \
    \   $palindrome = $string;\n    $length = strlen($string);\n    for ($i = $length\
    \ - 1; $i >= 0; $i--) {\n        if (is_palindrome(substr($string, $i))) {\n \
    \           $palindrome .= strrev(substr($string, 0, $i));\n            break;\n\
    \        }\n    }\n    return $palindrome;\n}\n", "    $length = strlen($string);\n\
    \    $i = 0;\n    $j = $length - 1;\n    $palindrome_suffix = \"\";\n    $palindrome_prefix\
    \ = \"\";\n    while ($i < $j) {\n        if ($string[$i] == $string[$j]) {\n\
    \            $palindrome_suffix .= $string[$i];\n            $palindrome_prefix\
    \ = $string[$i] . $palindrome_prefix;\n            $i++;\n            $j--;\n\
    \        } else {\n            $palindrome_suffix = \"\";\n            $palindrome_prefix\
    \ = \"\";\n            $i = 0;\n            $j--;\n        }\n    }\n    return\
    \ $string . $palindrome_prefix;\n}\n\necho make_palindrome(\"cat\");", "    $length\
    \ = strlen($string);\n    if ($length == 0) {\n        return \"\";\n    }\n \
    \   $palindrome_length = 0;\n    for ($i = 0; $i < $length; $i++) {\n        $palindrome_length\
    \ = max($palindrome_length, palindrome_length($string, $i, $i));\n        $palindrome_length\
    \ = max($palindrome_length, palindrome_length($string, $i, $i + 1));\n    }\n\
    \    $prefix = substr($string, 0, $length - $palindrome_length);\n    return $prefix\
    \ . strrev($prefix) . substr($string, $length - $palindrome_length);\n}\n", " \
    \   $len = strlen($string);\n    $i = 0;\n    while ($i < $len) {\n        if\
    \ ($string[$i] == $string[$len - 1]) {\n            $i++;\n            $len--;\n\
    \        } else {\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $i);\n    $suffix = substr($string, $i);\n    return $string . strrev($prefix);\n\
    }\n\necho make_palindrome(\"cata\");", "    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        $substring = substr($string, 0, $i + 1);\n        $reversed_substring\
    \ = strrev($substring);\n        if ($substring == $reversed_substring) {\n  \
    \          $palindrome_length = $i + 1;\n            break;\n        }\n    }\n\
    \    $prefix = substr($string, $palindrome_length);\n    $reversed_prefix = strrev($prefix);\n\
    \    return $string . $reversed_prefix;\n}\n\necho make_palindrome(\"cata\");\n",
  "\t$length = strlen($string);\n\t$palindrome = $string;\n\t$i = 0;\n\twhile ($i\
    \ < $length) {\n\t\tif (substr($string, $i) == strrev(substr($string, 0, $length\
    \ - $i))) {\n\t\t\t$palindrome .= strrev(substr($string, 0, $length - $i));\n\t\
    \t\tbreak;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $palindrome;\n}\n\necho make_palindrome(\"\
    cat\");", "    $string_length = strlen($string);\n    $palindrome_length = 0;\n\
    \    for ($i = 0; $i < $string_length; $i++) {\n        if ($string[$i] == $string[$string_length\
    \ - $i - 1]) {\n            $palindrome_length++;\n        } else {\n        \
    \    break;\n        }\n    }\n    $prefix = substr($string, 0, $string_length\
    \ - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n    return\
    \ $string . $prefix_reversed;\n}\n\n/* Find the longest palindrome in a string.\n\
    Algorithm idea is simple:\n- Find the longest postfix of supplied string that\
    \ is a palindrome.\n- Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n>>> longest_palindrome(\"\")\n\"\"\
    \n>>> longest_palindrome(\"cat\")\n\"c\"\n>>> longest_palindrome(\"cata\")\n\"\
    ata\"*/", "    $len = strlen($string);\n    for ($i = $len; $i > 0; $i--) {\n\
    \        if (is_palindrome(substr($string, 0, $i))) {\n            return $string\
    \ . strrev(substr($string, $i));\n        }\n    }\n    return $string;\n}\n",
  "    $string_length = strlen($string);\n    $palindrome_length = 0;\n    for ($i\
    \ = 0; $i < $string_length; $i++) {\n        if ($string[$i] == $string[$string_length\
    \ - $i - 1]) {\n            $palindrome_length++;\n        } else {\n        \
    \    break;\n        }\n    }\n    $palindrome_prefix = substr($string, 0, $palindrome_length);\n\
    \    $palindrome_suffix = strrev($palindrome_prefix);\n    $palindrome_body =\
    \ substr($string, $palindrome_length);\n    return $palindrome_prefix . $palindrome_body\
    \ . $palindrome_suffix;\n}\n\n/* Find the longest palindrome that begins with\
    \ a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix of\
    \ supplied string that is a palindrome.\n- Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome(\"\
    \")\n\"\"\n>>> make_palindrome(\"cat\")\n\"catac\"\n>>> make_palindrome(\"cata\"\
    )\n\"catac\"*/", "    $length = strlen($string);\n    $i = $length;\n    while\
    \ ($i > 0) {\n        $substring = substr($string, 0, $i);\n        if ($substring\
    \ == strrev($substring)) {\n            break;\n        }\n        $i--;\n   \
    \ }\n    return $string . strrev(substr($string, 0, $length - $i));\n}\n\necho\
    \ make_palindrome(\"cata\");", "    $string_length = strlen($string);\n    $string_reversed\
    \ = strrev($string);\n    $longest_palindrome_length = 0;\n    $longest_palindrome_position\
    \ = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n        $j = 0;\n     \
    \   while ($string[$i + $j] == $string_reversed[$string_length - $i + $j - 1])\
    \ {\n            $j++;\n            if ($i + $j >= $string_length) {\n       \
    \         break;\n            }\n        }\n        if ($j > $longest_palindrome_length)\
    \ {\n            $longest_palindrome_length = $j;\n            $longest_palindrome_position\
    \ = $i;\n        }\n    }\n    return $string . substr($string_reversed, 0, $string_length\
    \ - $longest_palindrome_position - $longest_palindrome_length);\n}\n\necho make_palindrome(\"\
    cat\");", "    $longest_palindrome = '';\n    $length = strlen($string);\n   \
    \ for ($i = 0; $i < $length; $i++) {\n        for ($j = $i + 1; $j <= $length;\
    \ $j++) {\n            $substring = substr($string, $i, $j - $i);\n          \
    \  if ($substring == strrev($substring)) {\n                if (strlen($substring)\
    \ > strlen($longest_palindrome)) {\n                    $longest_palindrome =\
    \ $substring;\n                }\n            }\n        }\n    }\n    $prefix\
    \ = substr($string, 0, strlen($string) - strlen($longest_palindrome));\n    return\
    \ $string . strrev($prefix);\n}\n", "    $string_length = strlen($string);\n \
    \   for ($i = $string_length; $i > 0; $i--) {\n        if (is_palindrome(substr($string,\
    \ 0, $i))) {\n            return $string . strrev(substr($string, 0, $string_length\
    \ - $i));\n        }\n    }\n    return $string;\n}\n", "    $str_len = strlen($string);\n\
    \    $palindrome_len = 0;\n    for ($i = 0; $i < $str_len; $i++) {\n        $substr\
    \ = substr($string, $i);\n        $substr_len = strlen($substr);\n        if ($substr_len\
    \ <= $palindrome_len) {\n            break;\n        }\n        if (is_palindrome($substr))\
    \ {\n            $palindrome_len = $substr_len;\n        }\n    }\n    return\
    \ $string . strrev(substr($string, 0, $str_len - $palindrome_len));\n}\n", " \
    \   $length = strlen($string);\n    $i = 0;\n    $j = $length - 1;\n    while\
    \ ($i < $j) {\n        if ($string[$i] != $string[$j]) {\n            break;\n\
    \        }\n        $i++;\n        $j--;\n    }\n    if ($i >= $j) {\n       \
    \ return $string;\n    }\n    $prefix = substr($string, 0, $i);\n    $suffix =\
    \ substr($string, $i);\n    return $prefix . make_palindrome(strrev($suffix))\
    \ . $suffix;\n}\n\necho make_palindrome(\"cata\");", "    $len = strlen($string);\n\
    \    $i = $len - 1;\n    while ($i >= 0) {\n        if ($string[$i] == $string[$len\
    \ - 1]) {\n            $j = $i - 1;\n            $k = $len - 2;\n            while\
    \ ($j >= 0 && $k >= 0 && $string[$j] == $string[$k]) {\n                $j--;\n\
    \                $k--;\n            }\n            if ($j == -1) {\n         \
    \       break;\n            }\n        }\n        $i--;\n    }\n    $prefix =\
    \ substr($string, 0, $i + 1);\n    $prefix = strrev($prefix);\n    return $string\
    \ . $prefix;\n}\n\necho make_palindrome(\"cata\");", "    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        $palindrome_length = max($palindrome_length, longest_palindrome_suffix($string,\
    \ $i));\n    }\n    $prefix = substr($string, 0, $string_length - $palindrome_length);\n\
    \    return $string . strrev($prefix);\n}\n", "    $longest_palindrome = '';\n\
    \    for ($i = 0; $i < strlen($string); $i++) {\n        $substring = substr($string,\
    \ $i);\n        if ($substring == strrev($substring) && strlen($substring) > strlen($longest_palindrome))\
    \ {\n            $longest_palindrome = $substring;\n        }\n    }\n    $prefix\
    \ = substr($string, 0, strlen($string) - strlen($longest_palindrome));\n    return\
    \ $string . strrev($prefix);\n}\n\necho make_palindrome(\"cata\");", "    $length\
    \ = strlen($string);\n    $palindrome = $string;\n    for ($i = $length - 1; $i\
    \ >= 0; $i--) {\n        if (is_palindrome(substr($string, $i))) {\n         \
    \   $palindrome .= strrev(substr($string, 0, $i));\n            break;\n     \
    \   }\n    }\n    return $palindrome;\n}\n", "    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        $palindrome_length = max($palindrome_length, longest_palindrome_suffix($string,\
    \ $i));\n    }\n    $prefix = substr($string, 0, $string_length - $palindrome_length);\n\
    \    return $string . strrev($prefix);\n}\n", "    $length = strlen($string);\n\
    \    $i = $length;\n    while ($i > 0) {\n        $prefix = substr($string, 0,\
    \ $i);\n        $postfix = substr($string, $length - $i);\n        if ($prefix\
    \ == strrev($postfix)) {\n            return $string . strrev(substr($string,\
    \ 0, $length - $i));\n        }\n        $i--;\n    }\n    return $string . strrev($string);\n\
    }\n\necho make_palindrome(\"cata\");", "    $len = strlen($string);\n    if ($len\
    \ == 0) {\n        return $string;\n    }\n    $suffix = \"\";\n    for ($i =\
    \ $len - 1; $i >= 0; $i--) {\n        if (is_palindrome($string, $i)) {\n    \
    \        $suffix = substr($string, $i);\n            break;\n        }\n    }\n\
    \    return $string . strrev(substr($string, 0, $len - strlen($suffix)));\n}\n",
  "    $string_length = strlen($string);\n    $palindrome_length = 0;\n    for ($i\
    \ = 0; $i < $string_length; $i++) {\n        if ($string[$i] == $string[$string_length\
    \ - $i - 1]) {\n            $palindrome_length++;\n        } else {\n        \
    \    break;\n        }\n    }\n    $prefix = substr($string, 0, $string_length\
    \ - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n    return\
    \ $string . $prefix_reversed;\n}\n\necho make_palindrome(\"cata\");", "    $length\
    \ = strlen($string);\n    $palindrome = $string;\n    for ($i = $length - 1; $i\
    \ >= 0; $i--) {\n        if (is_palindrome(substr($string, $i))) {\n         \
    \   $palindrome .= strrev(substr($string, 0, $i));\n            break;\n     \
    \   }\n    }\n    return $palindrome;\n}\n", "    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        $substring = substr($string, $i);\n        $substring_length = strlen($substring);\n\
    \        if ($substring_length <= $palindrome_length) {\n            break;\n\
    \        }\n        if (is_palindrome($substring)) {\n            $palindrome_length\
    \ = $substring_length;\n        }\n    }\n    $prefix = substr($string, 0, $string_length\
    \ - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n    return\
    \ $string . $prefix_reversed;\n}", "\t$length = strlen($string);\n\t$i = 0;\n\t\
    $j = $length - 1;\n\twhile ($i < $j) {\n\t\tif ($string[$i] != $string[$j]) {\n\
    \t\t\tbreak;\n\t\t}\n\t\t$i++;\n\t\t$j--;\n\t}\n\tif ($i >= $j) {\n\t\treturn\
    \ $string;\n\t}\n\t$prefix = substr($string, 0, $i);\n\t$suffix = substr($string,\
    \ $i);\n\treturn $prefix . make_palindrome(strrev($suffix)) . $suffix;\n}\n\n\
    echo make_palindrome(\"cata\");", "    $len = strlen($string);\n    $i = 0;\n\
    \    $j = $len - 1;\n    while ($i < $j) {\n        if ($string[$i] != $string[$j])\
    \ {\n            $i = 0;\n            $j--;\n        } else {\n            $i++;\n\
    \        }\n    }\n    $prefix = substr($string, 0, $j + 1);\n    $suffix = substr($string,\
    \ $j + 1);\n    return $string . strrev($prefix);\n}\n\necho make_palindrome(\"\
    cata\");", "    $length = strlen($string);\n    $i = $length;\n    while ($i >\
    \ 0) {\n        $substring = substr($string, 0, $i);\n        if ($substring ==\
    \ strrev($substring)) {\n            break;\n        }\n        $i--;\n    }\n\
    \    return $string . strrev(substr($string, 0, $length - $i));\n}\n\necho make_palindrome(\"\
    cat\");", "    $len = strlen($string);\n    $i = $len - 1;\n    while ($i >= 0)\
    \ {\n        if (is_palindrome(substr($string, $i))) {\n            break;\n \
    \       }\n        $i--;\n    }\n    $prefix = substr($string, 0, $i);\n    $prefix\
    \ = strrev($prefix);\n    return $string . $prefix;\n}\n", "    $length = strlen($string);\n\
    \    if ($length == 0) {\n        return \"\";\n    }\n    $i = 0;\n    $j = $length\
    \ - 1;\n    while ($i < $j) {\n        if ($string[$i] != $string[$j]) {\n   \
    \         break;\n        }\n        $i++;\n        $j--;\n    }\n    if ($i >=\
    \ $j) {\n        return $string;\n    }\n    $prefix = substr($string, 0, $i);\n\
    \    $suffix = substr($string, $i);\n    $suffix_length = strlen($suffix);\n \
    \   $suffix_reverse = strrev($suffix);\n    $suffix_reverse_length = strlen($suffix_reverse);\n\
    \    $suffix_reverse_prefix = substr($suffix_reverse, 0, $suffix_length);\n  \
    \  $suffix_reverse_suffix = substr($suffix_reverse, $suffix_length);\n    $suffix_reverse_suffix_length\
    \ = strlen($suffix_reverse_suffix);\n    $suffix_reverse_suffix_prefix = substr($suffix_reverse_suffix,\
    \ 0, $suffix_reverse_suffix_length);\n    $suffix_reverse_suffix_suffix = substr($suffix_reverse_suffix,\
    \ $suffix_reverse_suffix_length);\n    $suffix_reverse_suffix_suffix_length =\
    \ strlen($suffix_reverse_suffix_suffix);\n    $suffix_reverse_suffix_suffix_prefix\
    \ = substr($suffix_reverse_suffix_suffix, 0, $suffix_reverse_suffix_suffix_length);\n\
    \    $suffix_reverse_suffix_suffix_suffix = substr($suffix_reverse_suffix_suffix,\
    \ $suffix_reverse_suffix_suffix_length);\n    $suffix_reverse_suffix_suffix_suffix_length\
    \ = strlen($suffix_reverse_suffix_suffix_suffix);\n    $suffix_reverse_suffix_suffix_suffix_prefix\
    \ = substr($suffix_reverse_suffix_", "    $length = strlen($string);\n    $i =\
    \ 0;\n    $j = $length - 1;\n    while ($i < $j) {\n        if ($string[$i] !=\
    \ $string[$j]) {\n            break;\n        }\n        $i++;\n        $j--;\n\
    \    }\n    if ($i >= $j) {\n        return $string;\n    }\n    $prefix = substr($string,\
    \ 0, $i);\n    $suffix = substr($string, $i);\n    return $prefix . make_palindrome(strrev($suffix))\
    \ . $suffix;\n}\n\necho make_palindrome(\"cata\");", "    $length = strlen($string);\n\
    \    $max_palindrome_length = 0;\n    $max_palindrome_start = 0;\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $palindrome_length = 0;\n        $palindrome_start\
    \ = 0;\n        for ($j = $i; $j < $length; $j++) {\n            if ($string[$i]\
    \ == $string[$j]) {\n                $palindrome_length++;\n                $palindrome_start\
    \ = $i;\n            } else {\n                break;\n            }\n       \
    \ }\n        if ($palindrome_length > $max_palindrome_length) {\n            $max_palindrome_length\
    \ = $palindrome_length;\n            $max_palindrome_start = $palindrome_start;\n\
    \        }\n    }\n    $prefix = substr($string, 0, $max_palindrome_start);\n\
    \    $prefix = strrev($prefix);\n    $suffix = substr($string, $max_palindrome_start\
    \ + $max_palindrome_length);\n    return $string . $prefix . $suffix;\n}\n", " \
    \   $string_length = strlen($string);\n    $palindrome_length = 0;\n    $palindrome_start\
    \ = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n        $palindrome_length\
    \ = max($palindrome_length, get_palindrome_length($string, $i, $i));\n       \
    \ $palindrome_length = max($palindrome_length, get_palindrome_length($string,\
    \ $i, $i + 1));\n        if ($palindrome_length == $string_length - $i) {\n  \
    \          $palindrome_start = $i;\n            break;\n        }\n    }\n   \
    \ return $string . strrev(substr($string, 0, $palindrome_start));\n}\n", "   \
    \ $string_length = strlen($string);\n    if ($string_length == 0) {\n        return\
    \ $string;\n    }\n    $palindrome_suffix = find_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, $string_length - strlen($palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n", "\t$len = strlen($string);\n\tif\
    \ ($len == 0) {\n\t\treturn $string;\n\t}\n\t$i = $len;\n\twhile ($i > 0) {\n\t\
    \t$prefix = substr($string, 0, $i);\n\t\t$suffix = substr($string, $len - $i);\n\
    \t\tif ($prefix == $suffix) {\n\t\t\tbreak;\n\t\t}\n\t\t$i--;\n\t}\n\t$remainder\
    \ = substr($string, $i);\n\t$remainder_rev = strrev($remainder);\n\treturn $string\
    \ . $remainder_rev;\n}\n\necho make_palindrome(\"cat\");", "    $length = strlen($string);\n\
    \    $i = 0;\n    $j = $length - 1;\n    while ($i < $j) {\n        if ($string[$i]\
    \ != $string[$j]) {\n            break;\n        }\n        $i++;\n        $j--;\n\
    \    }\n    if ($i >= $j) {\n        return $string;\n    }\n    $prefix = substr($string,\
    \ 0, $i);\n    $suffix = substr($string, $i);\n    return $prefix . make_palindrome(strrev($suffix))\
    \ . $suffix;\n}\n\necho make_palindrome(\"cata\");", "    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        $substring = substr($string, $i);\n        $substring_length = strlen($substring);\n\
    \        if ($substring_length <= $palindrome_length) {\n            break;\n\
    \        }\n        if (is_palindrome($substring)) {\n            $palindrome_length\
    \ = $substring_length;\n        }\n    }\n    $prefix = substr($string, 0, $string_length\
    \ - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n    return\
    \ $string . $prefix_reversed;\n}\n", "    $length = strlen($string);\n    $suffix\
    \ = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n        $suffix .= $string[$i];\n\
    \        if (substr($string, 0, $i) == $suffix) {\n            return $string\
    \ . substr($string, $i + 1);\n        }\n    }\n    return $string . $suffix;\n\
    }\n\n/* Find the longest palindrome that begins with a supplied string.\nAlgorithm\
    \ idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n\
    - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n>>> make_palindrome(\"\")\n\"\"\n>>> make_palindrome(\"\
    cat\")\n\"catac\"\n>>> make_palindrome(\"cata\")\n\"catac\"*/", "    $length =\
    \ strlen($string);\n    $palindrome = $string;\n    for ($i = $length - 1; $i\
    \ >= 0; $i--) {\n        if (is_palindrome(substr($string, $i))) {\n         \
    \   $palindrome .= strrev(substr($string, 0, $i));\n            break;\n     \
    \   }\n    }\n    return $palindrome;\n}\n", "\t$len = strlen($string);\n\t$i\
    \ = $len;\n\twhile ($i > 0) {\n\t\tif (is_palindrome(substr($string, 0, $i)))\
    \ {\n\t\t\t$prefix = substr($string, 0, $i);\n\t\t\t$suffix = strrev(substr($string,\
    \ $i));\n\t\t\treturn $prefix . $suffix;\n\t\t}\n\t\t$i--;\n\t}\n\treturn $string;\n\
    }\n", "    $length = strlen($string);\n    $palindrome = \"\";\n    for ($i =\
    \ $length - 1; $i >= 0; $i--) {\n        $palindrome .= $string[$i];\n    }\n\
    \    $string .= $palindrome;\n    return $string;\n}\n\n/* Find the longest palindrome\
    \ that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest\
    \ postfix of supplied string that is a palindrome.\n- Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    >>> make_palindrome(\"\")\n\"\"\n>>> make_palindrome(\"cat\")\n\"catac\"\n>>>\
    \ make_palindrome(\"cata\")\n\"catac\"*/", "    $len = strlen($string);\n    $i\
    \ = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($string[$i] !=\
    \ $string[$j]) {\n            break;\n        }\n        $i++;\n        $j--;\n\
    \    }\n    if ($i >= $j) {\n        return $string;\n    }\n    $prefix = substr($string,\
    \ 0, $i);\n    $suffix = substr($string, $i);\n    $suffix_rev = strrev($suffix);\n\
    \    return $prefix . $suffix_rev . $suffix;\n}\n\n/* Find the longest palindrome\
    \ that begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest\
    \ postfix of supplied string that is a palindrome.\n- Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    >>> make_palindrome(\"\")\n\"\"\n>>> make_palindrome(\"cat\")\n\"catac\"\n>>>\
    \ make_palindrome(\"cata\")\n\"catac\"*/", "    $string_length = strlen($string);\n\
    \    $palindrome_suffix = '';\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        if (substr($string, 0, $i) == strrev(substr($string, $string_length\
    \ - $i))) {\n            $palindrome_suffix = substr($string, $i);\n         \
    \   break;\n        }\n    }\n    return $string . strrev(substr($string, 0, $string_length\
    \ - strlen($palindrome_suffix)));\n}\n\necho make_palindrome(\"cat\");", "\t$string_length\
    \ = strlen($string);\n\t$palindrome_length = 0;\n\tfor ($i = $string_length -\
    \ 1; $i >= 0; $i--) {\n\t\tif (substr($string, 0, $i) == strrev(substr($string,\
    \ $string_length - $i))) {\n\t\t\t$palindrome_length = $i;\n\t\t\tbreak;\n\t\t\
    }\n\t}\n\treturn $string . strrev(substr($string, 0, $string_length - $palindrome_length));\n\
    }\n\n/* Find the longest palindrome that begins with a supplied string.\nAlgorithm\
    \ idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n\
    >>> make_palindrome(\"\")\n\"\"\n>>> make_palindrome(\"cat\")\n\"cat\"\n>>> make_palindrome(\"\
    cata\")\n\"cata\"*/", "    $length = strlen($string);\n    if ($length == 0) {\n\
    \        return $string;\n    }\n    $palindrome_suffix = find_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, $length - strlen($palindrome_suffix));\n   \
    \ return $string . strrev($prefix);\n}\n", "    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        $palindrome_length = max($palindrome_length, longest_palindrome_suffix($string,\
    \ $i));\n    }\n    $prefix = substr($string, 0, $string_length - $palindrome_length);\n\
    \    return $string . strrev($prefix);\n}\n", "    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        $substring = substr($string, $i);\n        $substring_length = strlen($substring);\n\
    \        if ($substring_length > $palindrome_length && is_palindrome($substring))\
    \ {\n            $palindrome_length = $substring_length;\n        }\n    }\n \
    \   $prefix = substr($string, 0, $string_length - $palindrome_length);\n    return\
    \ $string . strrev($prefix);\n}\n", "    $len = strlen($string);\n    if ($len\
    \ <= 1) {\n        return $string;\n    }\n    $palindrome_len = $len;\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if ($string[$i] == $string[$len - 1]) {\n\
    \            $palindrome_len = $len - 1;\n            $len--;\n        } else\
    \ {\n            break;\n        }\n    }\n    return $string . strrev(substr($string,\
    \ 0, $palindrome_len));\n}\n\necho make_palindrome(\"cata\");", "    $suffix =\
    \ longest_palindrome_suffix($string);\n    $prefix = substr($string, 0, strlen($string)\
    \ - strlen($suffix));\n    return $string . strrev($prefix);\n}\n", "    $len\
    \ = strlen($string);\n    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n\
    \        if ($string[$i] != $string[$j]) {\n            break;\n        }\n  \
    \      $i++;\n        $j--;\n    }\n    if ($i >= $j) {\n        return $string;\n\
    \    }\n    $prefix = substr($string, 0, $i);\n    $suffix = substr($string, $i);\n\
    \    $suffix_reversed = strrev($suffix);\n    return $prefix . $suffix_reversed\
    \ . $suffix;\n}\n\necho make_palindrome(\"cata\");\necho \"\\n\";\necho make_palindrome(\"\
    cat\");\necho \"\\n\";\necho make_palindrome(\"\");\necho \"\\n\";", "    $len\
    \ = strlen($string);\n    $i = $len;\n    while ($i > 0) {\n        $i--;\n  \
    \      if (is_palindrome(substr($string, $i))) {\n            break;\n       \
    \ }\n    }\n    return $string . strrev(substr($string, 0, $i));\n}\n", "    $string_length\
    \ = strlen($string);\n    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length;\
    \ $i++) {\n        $substring = substr($string, $i);\n        $substring_length\
    \ = strlen($substring);\n        $substring_reverse = strrev($substring);\n  \
    \      if ($substring == $substring_reverse) {\n            $palindrome_length\
    \ = $substring_length;\n        }\n    }\n    $prefix = substr($string, 0, $string_length\
    \ - $palindrome_length);\n    $prefix_reverse = strrev($prefix);\n    return $string\
    \ . $prefix_reverse;\n}\n\n/* Find the longest palindrome that begins with a supplied\
    \ string.\nAlgorithm idea is simple:\n- Find the longest postfix of supplied string\
    \ that is a palindrome.\n>>> make_palindrome(\"\")\n\"\"\n>>> make_palindrome(\"\
    cat\")\n\"cat\"\n>>> make_palindrome(\"cata\")\n\"cata\"*/", "\t$length = strlen($string);\n\
    \t$palindrome = $string;\n\tfor ($i = 0; $i < $length; $i++) {\n\t\t$prefix =\
    \ substr($string, 0, $length - $i);\n\t\t$suffix = substr($string, $length - $i);\n\
    \t\tif (is_palindrome($suffix)) {\n\t\t\t$palindrome .= strrev($prefix);\n\t\t\
    \tbreak;\n\t\t}\n\t}\n\treturn $palindrome;\n}\n", "    $palindrome = $string;\n\
    \    $reverse = strrev($string);\n    $length = strlen($string);\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        if (substr($string, 0, $length - $i) ==\
    \ substr($reverse, $i)) {\n            $palindrome = substr($reverse, 0, $i) .\
    \ $palindrome;\n            break;\n        }\n    }\n    return $palindrome;\n\
    }\n\necho make_palindrome(\"cata\");", "\t$string_length = strlen($string);\n\t\
    $longest_palindrome_length = 0;\n\t$longest_palindrome_start = 0;\n\tfor ($i =\
    \ 0; $i < $string_length; $i++) {\n\t\t$palindrome_length = 0;\n\t\t$palindrome_start\
    \ = $i;\n\t\tfor ($j = $i; $j < $string_length; $j++) {\n\t\t\tif ($string[$j]\
    \ == $string[$string_length - 1 - $j + $i]) {\n\t\t\t\t$palindrome_length++;\n\
    \t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($palindrome_length > $longest_palindrome_length)\
    \ {\n\t\t\t$longest_palindrome_length = $palindrome_length;\n\t\t\t$longest_palindrome_start\
    \ = $palindrome_start;\n\t\t}\n\t}\n\t$prefix = substr($string, 0, $longest_palindrome_start);\n\
    \t$prefix_reversed = strrev($prefix);\n\treturn $string . $prefix_reversed;\n\
    }\n\necho make_palindrome(\"cata\");", "    $len = strlen($string);\n    $i =\
    \ $len;\n    while ($i > 0) {\n        $substr = substr($string, 0, $i);\n   \
    \     if ($substr == strrev($substr)) {\n            break;\n        }\n     \
    \   $i--;\n    }\n    return $string . strrev(substr($string, 0, $len - $i));\n\
    }\n\necho make_palindrome(\"\");\necho make_palindrome(\"cat\");\necho make_palindrome(\"\
    cata\");", "    $palindrome = $string;\n    $length = strlen($string);\n    $i\
    \ = 1;\n    while ($i <= $length) {\n        $substring = substr($string, 0, $length\
    \ - $i);\n        if (is_palindrome($substring)) {\n            $palindrome .=\
    \ strrev($substring);\n            break;\n        }\n        $i++;\n    }\n \
    \   return $palindrome;\n}\n", "    $len = strlen($string);\n    if ($len == 0)\
    \ {\n        return \"\";\n    }\n    $longest_palindrome_suffix = \"\";\n   \
    \ for ($i = 0; $i < $len; $i++) {\n        $suffix = substr($string, $len - $i\
    \ - 1);\n        $prefix = substr($string, 0, $i + 1);\n        if ($suffix ==\
    \ strrev($prefix)) {\n            $longest_palindrome_suffix = $suffix;\n    \
    \    }\n    }\n    return $string . strrev(substr($string, 0, $len - strlen($longest_palindrome_suffix)));\n\
    }\n\n/* Find the longest palindrome that begins with a supplied string.\nAlgorithm\
    \ idea is simple:\n- Find the longest postfix of supplied string that is a palindrome.\n\
    >>> make_palindrome(\"\")\n\"\"\n>>> make_palindrome(\"cat\")\n\"c\"\n>>> make_palindrome(\"\
    cata\")\n\"cata\"*/", "    $length = strlen($string);\n    $palindrome_length\
    \ = $length;\n    while ($palindrome_length > 0) {\n        $prefix = substr($string,\
    \ 0, $palindrome_length);\n        $suffix = substr($string, $length - $palindrome_length);\n\
    \        if ($prefix == strrev($suffix)) {\n            break;\n        }\n  \
    \      $palindrome_length--;\n    }\n    return $string . strrev(substr($string,\
    \ 0, $length - $palindrome_length));\n}\n\necho make_palindrome(\"cata\");", " \
    \   $string_length = strlen($string);\n    if ($string_length == 0) {\n      \
    \  return \"\";\n    }\n    $longest_palindrome_suffix = \"\";\n    for ($i =\
    \ $string_length; $i >= 0; $i--) {\n        if (is_palindrome(substr($string,\
    \ $i))) {\n            $longest_palindrome_suffix = substr($string, $i);\n   \
    \         break;\n        }\n    }\n    $prefix = substr($string, 0, $string_length\
    \ - strlen($longest_palindrome_suffix));\n    return $string . strrev($prefix);\n\
    }\n", "    $string_length = strlen($string);\n    $palindrome_length = $string_length;\n\
    \    $palindrome_found = false;\n    while (!$palindrome_found) {\n        $palindrome_length--;\n\
    \        $palindrome_found = true;\n        for ($i = 0; $i < $palindrome_length;\
    \ $i++) {\n            if ($string[$i] != $string[$string_length - $palindrome_length\
    \ + $i]) {\n                $palindrome_found = false;\n                break;\n\
    \            }\n        }\n    }\n    $prefix = substr($string, 0, $string_length\
    \ - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n    return\
    \ $string . $prefix_reversed;\n}\n\n/* Find the shortest palindrome that begins\
    \ with a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix\
    \ of supplied string that is a palindrome.\n- Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n>>> make_palindrome(\"\
    \")\n\"\"\n>>> make_palindrome(\"cat\")\n\"catac\"\n>>> make_palindrome(\"cata\"\
    )\n\"catac\"*/", "    $len = strlen($string);\n    $i = $len;\n    while ($i >\
    \ 0) {\n        $i--;\n        if (is_palindrome(substr($string, $i))) {\n   \
    \         break;\n        }\n    }\n    return $string . strrev(substr($string,\
    \ 0, $i));\n}\n", "    $string_length = strlen($string);\n    $palindrome_suffix\
    \ = find_palindrome_suffix($string);\n    $palindrome_prefix = substr($string,\
    \ 0, $string_length - strlen($palindrome_suffix));\n    $palindrome_prefix = strrev($palindrome_prefix);\n\
    \    return $string . $palindrome_prefix;\n}\n", "    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    $palindrome_start = 0;\n    $palindrome_end\
    \ = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n        $palindrome_length\
    \ = max($palindrome_length, expand_palindrome($string, $i, $i));\n        $palindrome_length\
    \ = max($palindrome_length, expand_palindrome($string, $i, $i + 1));\n       \
    \ if ($palindrome_length > $palindrome_end - $palindrome_start) {\n          \
    \  $palindrome_start = $i - ($palindrome_length - 1) / 2;\n            $palindrome_end\
    \ = $i + $palindrome_length / 2;\n        }\n    }\n    $palindrome_start = floor($palindrome_start);\n\
    \    $palindrome_end = floor($palindrome_end);\n    $prefix = substr($string,\
    \ 0, $palindrome_start);\n    $prefix = strrev($prefix);\n    $postfix = substr($string,\
    \ $palindrome_end + 1);\n    return $prefix . $string . $postfix;\n}\n", "\t$string_length\
    \ = strlen($string);\n\t$palindrome_length = 0;\n\tfor ($i = 0; $i < $string_length;\
    \ $i++) {\n\t\t$substring = substr($string, $i);\n\t\t$substring_length = strlen($substring);\n\
    \t\tif ($substring_length <= $palindrome_length) {\n\t\t\tbreak;\n\t\t}\n\t\t\
    if (is_palindrome($substring)) {\n\t\t\t$palindrome_length = $substring_length;\n\
    \t\t}\n\t}\n\t$prefix = substr($string, 0, $string_length - $palindrome_length);\n\
    \t$prefix_reversed = strrev($prefix);\n\treturn $string . $prefix_reversed;\n\
    }\n", "    $palindrome = $string;\n    $i = 0;\n    while ($i < strlen($string))\
    \ {\n        if (is_palindrome(substr($string, $i))) {\n            $palindrome\
    \ .= strrev(substr($string, 0, $i));\n            break;\n        }\n        $i++;\n\
    \    }\n    return $palindrome;\n}\n", "    $length = strlen($string);\n    $i\
    \ = 0;\n    $j = $length - 1;\n    while ($i < $j) {\n        if ($string[$i]\
    \ != $string[$j]) {\n            break;\n        }\n        $i++;\n        $j--;\n\
    \    }\n    if ($i >= $j) {\n        return $string;\n    }\n    $prefix = substr($string,\
    \ 0, $i);\n    $postfix = substr($string, $i);\n    $postfix_reverse = strrev($postfix);\n\
    \    return $postfix . $postfix_reverse . $prefix;\n}\n\necho make_palindrome(\"\
    cat\");\n", "\t$reverse = strrev($string);\n\t$length = strlen($string);\n\tfor\
    \ ($i = 0; $i < $length; $i++) {\n\t\tif (substr($string, 0, $length - $i) ==\
    \ substr($reverse, $i)) {\n\t\t\treturn $string . substr($reverse, $i);\n\t\t\
    }\n\t}\n\treturn $string;\n}\n\n/* Find the longest palindrome that is a substring\
    \ of a supplied string.\nAlgorithm idea is simple:\n- Find the longest postfix\
    \ of supplied string that is a palindrome.\n- Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n>>> longest_palindrome(\"\
    \")\n\"\"\n>>> longest_palindrome(\"cat\")\n\"c\"\n>>> longest_palindrome(\"cata\"\
    )\n\"ata\"*/", "    $length = strlen($string);\n    $i = $length - 1;\n    $j\
    \ = 0;\n    while ($i >= 0) {\n        if ($string[$i] == $string[$j]) {\n   \
    \         $i--;\n            $j++;\n        } else {\n            $i = $length\
    \ - 1;\n            $j++;\n        }\n    }\n    $suffix = substr($string, $j);\n\
    \    $prefix = strrev($suffix);\n    return $string . $prefix;\n}\n\necho make_palindrome(\"\
    cat\");", "    $length = strlen($string);\n    $palindrome_length = 0;\n    for\
    \ ($i = 0; $i < $length; $i++) {\n        if ($string[$i] == $string[$length -\
    \ 1 - $i]) {\n            $palindrome_length++;\n        } else {\n          \
    \  break;\n        }\n    }\n    return $string . strrev(substr($string, 0, $length\
    \ - $palindrome_length));\n}\n\necho make_palindrome(\"cata\");", "    $string_length\
    \ = strlen($string);\n    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length;\
    \ $i++) {\n        $palindrome_length = max($palindrome_length, find_palindrome_length($string,\
    \ $i, $i));\n        $palindrome_length = max($palindrome_length, find_palindrome_length($string,\
    \ $i, $i + 1));\n    }\n    return $string . strrev(substr($string, 0, $string_length\
    \ - $palindrome_length));\n}\n", "\t$string_length = strlen($string);\n\tif ($string_length\
    \ == 0) {\n\t\treturn \"\";\n\t}\n\t$longest_palindrome_suffix = \"\";\n\tfor\
    \ ($i = $string_length; $i >= 0; $i--) {\n\t\t$suffix = substr($string, $i);\n\
    \t\tif (is_palindrome($suffix)) {\n\t\t\t$longest_palindrome_suffix = $suffix;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\t$prefix = substr($string, 0, $string_length - strlen($longest_palindrome_suffix));\n\
    \t$prefix_reversed = strrev($prefix);\n\treturn $string . $prefix_reversed;\n\
    }\n", "    $length = strlen($string);\n    $i = $length;\n    while ($i > 0) {\n\
    \        $substring = substr($string, 0, $i);\n        if ($substring == strrev($substring))\
    \ {\n            return $string . strrev(substr($string, $i));\n        }\n  \
    \      $i--;\n    }\n    return $string;\n}\n\n/*\n * Unit tests\n */\nassert_options(ASSERT_BAIL,\
    \ 1);\n\n$tests = array(\n    \"\" => \"\",\n    \"cat\" => \"catac\",\n    \"\
    cata\" => \"catac\",\n    \"cataa\" => \"cataacat\",\n    \"cataaa\" => \"cataaa\"\
    ,\n    \"cataaaa\" => \"cataaaacat\",\n    \"cataaaaa\" => \"cataaaaa\",\n   \
    \ \"cataaaaaa\" => \"cataaaaaacat\",\n    \"cataaaaaaa\" => \"cataaaaaaa\",\n\
    \    \"cataaaaaaaa\" => \"cataaaaaaaacat\",\n    \"cataaaaaaaaa\" => \"cataaaaaaaaa\"\
    ,\n    \"cataaaaaaaaaa\" => \"cataaaaaaaaaacat\",\n    \"cataaaaaaaaaaa\" => \"\
    cataaaaaaaaaaa\",\n    \"cataaaaaaaaaaaa\" => \"cataaaaaaaaaaaacat\",\n    \"\
    cataaaaaaaaaaaaa\" => \"cataaaaaaaaaaaaa\",\n    \"cataaaaaaaaaaaaaa\" => \"cataaaaaaaaaaaaaacat\"\
    ,\n    \"cataaaaaaaaaaaaaaa\" => \"cataaaaaaaaaaaaaaa\",\n    \"cataaaaaaaaaaaaaaaa\"\
    \ => \"cataaaaaaaaaaaaaaaacat\",\n    \"cataaaaaaaaaaaaaaaaa\" => \"cataaaaaaaaaaaaaaaaa\"\
    ,\n    \"cataaaaaaaaaaaaaaaaaa\" => \"cataaaaaaaaaaaaaaaaaacat\",\n    \"cataaaaaaaaaaaaaaaaaaa\"\
    \ => \"cataaaaaaaaaaaaaaaaaaa\",\n    \"cataaaaaaaaaaaaaaaaaaaa\" => \"cataaaaaaaaaaaaaaaaaaaacat\"\
    ,\n    \"cataaaaaaaaaaaaaaaaaaaaa\" => \"cataaaaaaaaaaaaaaaaaaaaa\",\n    \"cataaaaaaaaaaaaa",
  "\t$len = strlen($string);\n\t$i = 0;\n\t$j = $len - 1;\n\twhile ($i < $j) {\n\t\
    \tif ($string[$i] != $string[$j]) {\n\t\t\tbreak;\n\t\t}\n\t\t$i++;\n\t\t$j--;\n\
    \t}\n\tif ($i >= $j) {\n\t\treturn $string;\n\t}\n\t$prefix = substr($string,\
    \ 0, $j);\n\t$suffix = substr($string, $j);\n\treturn $suffix . make_palindrome($prefix)\
    \ . $suffix;\n}\n\necho make_palindrome(\"cata\");", "    $len = strlen($string);\n\
    \    $i = 0;\n    $j = $len - 1;\n    $k = $len - 1;\n    while ($i < $j) {\n\
    \        if ($string[$i] == $string[$j]) {\n            $i++;\n            $j--;\n\
    \        } else {\n            $i = 0;\n            $k--;\n            $j = $k;\n\
    \        }\n    }\n    $prefix = substr($string, 0, $len - $k - 1);\n    return\
    \ $string . strrev($prefix);\n}\n\necho make_palindrome(\"cata\");", "    $length\
    \ = strlen($string);\n    $palindrome = $string;\n    for ($i = $length - 1; $i\
    \ >= 0; $i--) {\n        if ($string[$i] == $string[0]) {\n            $prefix\
    \ = substr($string, 0, $i);\n            $suffix = substr($string, $i);\n    \
    \        if (is_palindrome($suffix)) {\n                $palindrome = $prefix\
    \ . strrev($prefix) . $suffix;\n                break;\n            }\n      \
    \  }\n    }\n    return $palindrome;\n}", "    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    $palindrome_start = 0;\n    for ($i = 0; $i\
    \ < $string_length; $i++) {\n        $odd_palindrome_length = get_palindrome_length($string,\
    \ $i, $i);\n        $even_palindrome_length = get_palindrome_length($string, $i,\
    \ $i + 1);\n        $palindrome_length = max($odd_palindrome_length, $even_palindrome_length);\n\
    \        if ($palindrome_length > $palindrome_start + $palindrome_length) {\n\
    \            $palindrome_start = $i - floor(($palindrome_length - 1) / 2);\n \
    \       }\n    }\n    $prefix = substr($string, 0, $palindrome_start);\n    $prefix\
    \ = strrev($prefix);\n    return $string . $prefix;\n}", "\t$string_length = strlen($string);\n\
    \t$longest_palindrome_length = 0;\n\t$longest_palindrome_start = 0;\n\tfor ($i\
    \ = 0; $i < $string_length; $i++) {\n\t\t$palindrome_length = 0;\n\t\t$palindrome_start\
    \ = $i;\n\t\t$j = $i;\n\t\twhile ($j < $string_length) {\n\t\t\tif ($string[$j]\
    \ == $string[$palindrome_start]) {\n\t\t\t\t$palindrome_length++;\n\t\t\t\t$palindrome_start++;\n\
    \t\t\t\t$j++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($palindrome_length\
    \ > $longest_palindrome_length) {\n\t\t\t$longest_palindrome_length = $palindrome_length;\n\
    \t\t\t$longest_palindrome_start = $i;\n\t\t}\n\t}\n\t$prefix = substr($string,\
    \ 0, $longest_palindrome_start);\n\t$prefix_length = strlen($prefix);\n\t$prefix_reversed\
    \ = \"\";\n\tfor ($i = $prefix_length - 1; $i >= 0; $i--) {\n\t\t$prefix_reversed\
    \ .= $prefix[$i];\n\t}\n\treturn $string . $prefix_reversed;\n}\n\necho make_palindrome(\"\
    catac\") . \"\\n\";\necho make_palindrome(\"cata\") . \"\\n\";\necho make_palindrome(\"\
    cat\") . \"\\n\";\necho make_palindrome(\"\") . \"\\n\";", "    $length = strlen($string);\n\
    \    $i = 0;\n    $j = $length - 1;\n    while ($i < $j) {\n        if ($string[$i]\
    \ == $string[$j]) {\n            $i++;\n            $j--;\n        } else {\n\
    \            $i = 0;\n            $j--;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $i);\n    $suffix = substr($string, $i);\n    return $string . strrev($prefix);\n\
    }\n\necho make_palindrome(\"cata\");", "    $length = strlen($string);\n    $palindrome\
    \ = $string;\n    for ($i = 0; $i < $length; $i++) {\n        $palindrome .= $string[$length\
    \ - $i - 1];\n    }\n    return $palindrome;\n}\n\n/* Find the longest palindromic\
    \ substring of a supplied string.\nAlgorithm idea is simple:\n- Find the longest\
    \ postfix of supplied string that is a palindrome.\n- Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    >>> make_palindrome(\"\")\n\"\"\n>>> make_palindrome(\"cat\")\n\"catac\"\n>>>\
    \ make_palindrome(\"cata\")\n\"catac\"*/", "\t$len = strlen($string);\n\t$i =\
    \ 0;\n\t$j = $len - 1;\n\t$k = $len - 1;\n\twhile ($i < $j) {\n\t\tif ($string[$i]\
    \ == $string[$j]) {\n\t\t\t$i++;\n\t\t\t$j--;\n\t\t} else {\n\t\t\t$i = 0;\n\t\
    \t\t$k--;\n\t\t\t$j = $k;\n\t\t}\n\t}\n\treturn $string . strrev(substr($string,\
    \ 0, $k));\n}\n\necho make_palindrome(\"cata\");", "    $palindrome_suffix = find_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \    return $string . strrev($prefix);\n}\n", "    $length = strlen($string);\n\
    \    $suffix = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n        $suffix\
    \ .= $string[$i];\n        if (substr($string, 0, $i) == $suffix) {\n        \
    \    return $string . substr($string, $i + 1);\n        }\n    }\n    return $string\
    \ . $suffix;\n}\n\necho make_palindrome(\"cat\");", "    $length = strlen($string);\n\
    \    $i = $length;\n    while ($i > 0) {\n        $substring = substr($string,\
    \ 0, $i);\n        if ($substring == strrev($substring)) {\n            break;\n\
    \        }\n        $i--;\n    }\n    return $string . strrev(substr($string,\
    \ 0, $length - $i));\n}\n\necho make_palindrome(\"cat\");", "    $len = strlen($string);\n\
    \    $i = 0;\n    while ($i < $len) {\n        if (is_palindrome(substr($string,\
    \ $i))) {\n            break;\n        }\n        $i++;\n    }\n    return $string\
    \ . strrev(substr($string, 0, $i));\n}\n", "    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        if ($string[$i] == $string[$string_length - 1 - $palindrome_length])\
    \ {\n            $palindrome_length++;\n        }\n    }\n    return $string .\
    \ substr(strrev($string), $palindrome_length);\n}\necho make_palindrome(\"cata\"\
    );", "\t$length = strlen($string);\n\t$i = $length;\n\twhile ($i > 0) {\n\t\t\
    if (is_palindrome(substr($string, 0, $i))) {\n\t\t\t$prefix = substr($string,\
    \ $i);\n\t\t\treturn $string . strrev($prefix);\n\t\t}\n\t\t$i--;\n\t}\n\treturn\
    \ $string;\n}\n", "    $length = strlen($string);\n    $palindrome = $string;\n\
    \    for ($i = 0; $i < $length; $i++) {\n        if (is_palindrome($string, $i))\
    \ {\n            $palindrome .= strrev(substr($string, 0, $i));\n            break;\n\
    \        }\n    }\n    return $palindrome;\n}\n", "\t$length = strlen($string);\n\
    \t$palindrome = $string;\n\tfor ($i = $length - 1; $i >= 0; $i--) {\n\t\tif (is_palindrome(substr($string,\
    \ $i))) {\n\t\t\t$palindrome .= strrev(substr($string, 0, $i));\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn $palindrome;\n}\n", "    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = $string_length - 1; $i >= 0; $i--)\
    \ {\n        if ($string[$i] == $string[$string_length - 1 - $palindrome_length])\
    \ {\n            $palindrome_length++;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $string_length - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n", "    $len = strlen($string);\n\
    \    $i = $len - 1;\n    while ($i >= 0) {\n        if ($string[$i] == $string[$len\
    \ - 1]) {\n            $len--;\n        }\n        $i--;\n    }\n    $prefix =\
    \ substr($string, 0, $len);\n    $suffix = strrev($prefix);\n    return $string\
    \ . $suffix;\n}\n\necho make_palindrome(\"cat\");", "    $length = strlen($string);\n\
    \    if ($length == 0) {\n        return \"\";\n    }\n    $i = $length;\n   \
    \ while ($i > 0) {\n        if (is_palindrome(substr($string, 0, $i))) {\n   \
    \         break;\n        }\n        $i--;\n    }\n    return $string . strrev(substr($string,\
    \ 0, $length - $i));\n}\n", "    $length = strlen($string);\n    $half = floor($length\
    \ / 2);\n    $found = false;\n    for ($i = $half; $i > 0; $i--) {\n        if\
    \ ($string[$i] == $string[$length - $i - 1]) {\n            $found = true;\n \
    \           break;\n        }\n    }\n    if ($found) {\n        return $string\
    \ . strrev(substr($string, 0, $i));\n    } else {\n        return $string . strrev($string);\n\
    \    }\n}\n\necho make_palindrome(\"cata\");", "    $len = strlen($string);\n\
    \    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($string[$i]\
    \ == $string[$j]) {\n            $i++;\n            $j--;\n        } else {\n\
    \            break;\n        }\n    }\n    $prefix = substr($string, 0, $i);\n\
    \    $suffix = substr($string, $i);\n    $suffix_rev = strrev($suffix);\n    return\
    \ $prefix . $suffix_rev . $suffix;\n}\n\necho make_palindrome(\"cata\");", " \
    \   $length = strlen($string);\n    if ($length == 0) {\n        return $string;\n\
    \    }\n    $i = $length - 1;\n    while ($i >= 0) {\n        if (is_palindrome(substr($string,\
    \ $i))) {\n            return $string . strrev(substr($string, 0, $i));\n    \
    \    }\n        $i--;\n    }\n}\n", "    $len = strlen($string);\n    $i = $len;\n\
    \    $j = 0;\n    $k = 0;\n    $lps = array();\n    $lps[0] = 0;\n    while ($i\
    \ < 2 * $len) {\n        if ($string[$i] == $string[$j]) {\n            $lps[$i]\
    \ = $j + 1;\n            $i++;\n            $j++;\n        } else {\n        \
    \    if ($j != 0) {\n                $j = $lps[$j - 1];\n            } else {\n\
    \                $lps[$i] = 0;\n                $i++;\n            }\n       \
    \ }\n    }\n    $string .= strrev(substr($string, 0, $len - $lps[2 * $len - 1]));\n\
    \    return $string;\n}\n\necho make_palindrome(\"cata\");", "    $reverse = strrev($string);\n\
    \    $length = strlen($string);\n    for ($i = 0; $i < $length; $i++) {\n    \
    \    if (substr($string, 0, $length - $i) == substr($reverse, $i)) {\n       \
    \     return $string . substr($reverse, $i);\n        }\n    }\n    return $string\
    \ . $reverse;\n}\n\necho make_palindrome(\"cata\");", "    $length = strlen($string);\n\
    \    $prefix = substr($string, 0, $length - 1);\n    $suffix = substr($string,\
    \ $length - 1);\n    $suffix_length = strlen($suffix);\n    $prefix_length = strlen($prefix);\n\
    \    $suffix_palindrome_length = 0;\n    $prefix_palindrome_length = 0;\n    $i\
    \ = 0;\n    while ($i < $suffix_length) {\n        if ($suffix[$i] == $suffix[$suffix_length\
    \ - $i - 1]) {\n            $suffix_palindrome_length++;\n        } else {\n \
    \           break;\n        }\n        $i++;\n    }\n    $i = 0;\n    while ($i\
    \ < $prefix_length) {\n        if ($prefix[$i] == $prefix[$prefix_length - $i\
    \ - 1]) {\n            $prefix_palindrome_length++;\n        } else {\n      \
    \      break;\n        }\n        $i++;\n    }\n    if ($suffix_palindrome_length\
    \ > $prefix_palindrome_length) {\n        $palindrome = $suffix;\n        $prefix\
    \ = substr($prefix, 0, $prefix_length - $suffix_palindrome_length);\n    } else\
    \ {\n        $palindrome = $prefix;\n        $suffix = substr($suffix, $suffix_palindrome_length);\n\
    \    }\n    $palindrome = strrev($prefix) . $string . $suffix;\n    return $palindrome;\n\
    }\n\necho make_palindrome(\"cata\");", "    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        $substring = substr($string, $i);\n        $substring_length = strlen($substring);\n\
    \        if ($substring_length > $palindrome_length && is_palindrome($substring))\
    \ {\n            $palindrome_length = $substring_length;\n        }\n    }\n \
    \   $prefix = substr($string, 0, $string_length - $palindrome_length);\n    return\
    \ $string . strrev($prefix);\n}", "    $length = strlen($string);\n    $palindrome_suffix\
    \ = '';\n    for ($i = $length - 1; $i >= 0; $i--) {\n        $palindrome_suffix\
    \ .= $string[$i];\n        if ($string == $palindrome_suffix . substr($string,\
    \ 0, $i)) {\n            return $string . substr($palindrome_suffix, 0, $length\
    \ - $i);\n        }\n    }\n    return $string . $palindrome_suffix;\n}\n\necho\
    \ make_palindrome(\"cat\");", "    $length = strlen($string);\n    $i = 0;\n \
    \   while ($i < $length) {\n        if ($string[$i] == $string[$length - 1]) {\n\
    \            $i++;\n            $length--;\n        } else {\n            break;\n\
    \        }\n    }\n    if ($i == $length) {\n        return $string;\n    }\n\
    \    $prefix = substr($string, 0, $i);\n    $suffix = substr($string, $i);\n \
    \   return $string . strrev($prefix);\n}\n\necho make_palindrome(\"cata\");",
  "\t$len = strlen($string);\n\t$prefix = substr($string, 0, $len - 1);\n\t$suffix\
    \ = substr($string, $len - 1);\n\t$suffix_len = strlen($suffix);\n\t$prefix_len\
    \ = strlen($prefix);\n\t$i = 0;\n\twhile ($i < $suffix_len) {\n\t\tif ($suffix[$i]\
    \ == $prefix[$prefix_len - $i - 1]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\t$suffix = substr($suffix, $i);\n\t$suffix_len = strlen($suffix);\n\
    \t$prefix = substr($prefix, 0, $prefix_len - $suffix_len);\n\t$prefix = strrev($prefix);\n\
    \treturn $string . $prefix . $suffix;\n}\n\necho make_palindrome(\"cata\");",
  "    $len = strlen($string);\n    $suffix = '';\n    for ($i = $len - 1; $i >= 0;\
    \ $i--) {\n        $suffix .= $string[$i];\n        if (is_palindrome($string\
    \ . $suffix)) {\n            return $string . $suffix;\n        }\n    }\n}",
  "    $string_length = strlen($string);\n    $palindrome_length = 0;\n    $palindrome_start\
    \ = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n        $palindrome_length\
    \ = max($palindrome_length, get_palindrome_length($string, $i));\n        if ($palindrome_length\
    \ == $string_length - $i) {\n            $palindrome_start = $i;\n           \
    \ break;\n        }\n    }\n    $prefix = substr($string, 0, $palindrome_start);\n\
    \    $prefix = strrev($prefix);\n    return $string . $prefix;\n}\n", "    $string_length\
    \ = strlen($string);\n    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length;\
    \ $i++) {\n        if ($string[$i] === $string[$string_length - $i - 1]) {\n \
    \           $palindrome_length++;\n        } else {\n            break;\n    \
    \    }\n    }\n    $prefix = substr($string, 0, $string_length - $palindrome_length);\n\
    \    $prefix_reversed = strrev($prefix);\n    return $string . $prefix_reversed;\n\
    }\n\necho make_palindrome(\"cata\");", "  $len = strlen($string);\n  $i = $len;\n\
    \  while ($i > 0) {\n    if (is_palindrome(substr($string, 0, $i))) {\n      return\
    \ $string . strrev(substr($string, $i));\n    }\n    $i--;\n  }\n  return $string;\n\
    }\n", "  $string_length = strlen($string);\n  $palindrome_length = 0;\n  for ($i\
    \ = $string_length; $i >= 0; $i--) {\n    if ($string[$i] == $string[$string_length\
    \ - $i - 1]) {\n      $palindrome_length++;\n    } else {\n      break;\n    }\n\
    \  }\n  $prefix = substr($string, 0, $string_length - $palindrome_length);\n \
    \ $prefix_reversed = strrev($prefix);\n  return $string . $prefix_reversed;\n\
    }\n\necho make_palindrome(\"cat\");", "\t$string_length = strlen($string);\n\t\
    $palindrome_length = 0;\n\t$palindrome_index = 0;\n\tfor ($i = 0; $i < $string_length;\
    \ $i++) {\n\t\t$substring_length = $string_length - $i;\n\t\t$substring = substr($string,\
    \ $i, $substring_length);\n\t\tif (is_palindrome($substring)) {\n\t\t\t$palindrome_length\
    \ = $substring_length;\n\t\t\t$palindrome_index = $i;\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\t$prefix = substr($string, 0, $palindrome_index);\n\t$prefix_reversed = strrev($prefix);\n\
    \treturn $string . $prefix_reversed;\n}\n", "\t$string_length = strlen($string);\n\
    \t$palindrome_length = 0;\n\t$palindrome_start = 0;\n\t$palindrome_end = 0;\n\t\
    for ($i = 0; $i < $string_length; $i++) {\n\t\t$palindrome_length = max($palindrome_length,\
    \ longest_palindrome_at($string, $i));\n\t\tif ($palindrome_length > $palindrome_end\
    \ - $palindrome_start) {\n\t\t\t$palindrome_start = $i - ($palindrome_length -\
    \ 1) / 2;\n\t\t\t$palindrome_end = $i + $palindrome_length / 2;\n\t\t}\n\t}\n\t\
    return $string . strrev(substr($string, 0, $palindrome_start));\n}\n", "    $length\
    \ = strlen($string);\n    $i = $length;\n    while ($i > 0) {\n        $substring\
    \ = substr($string, 0, $i);\n        if ($substring == strrev($substring)) {\n\
    \            return $string . strrev(substr($string, $i));\n        }\n      \
    \  $i--;\n    }\n    return $string;\n}\n\necho make_palindrome(\"cat\");", "\t\
    $length = strlen($string);\n\t$i = $length;\n\twhile ($i > 0) {\n\t\tif ($string[$i]\
    \ == $string[$length - $i]) {\n\t\t\t$i--;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\
    \t}\n\t$prefix = substr($string, 0, $i);\n\t$suffix = substr($string, $i);\n\t\
    return $string . strrev($prefix);\n}\n\necho make_palindrome(\"cata\");", "\t\
    $string_length = strlen($string);\n\t$palindrome_length = 0;\n\t$palindrome_start\
    \ = 0;\n\t$palindrome_end = 0;\n\tfor ($i = 0; $i < $string_length; $i++) {\n\t\
    \t$palindrome_length = max($palindrome_length, find_palindrome_length($string,\
    \ $i, $i));\n\t\t$palindrome_length = max($palindrome_length, find_palindrome_length($string,\
    \ $i, $i + 1));\n\t\tif ($palindrome_length > $palindrome_end - $palindrome_start)\
    \ {\n\t\t\t$palindrome_start = $i - ($palindrome_length - 1) / 2;\n\t\t\t$palindrome_end\
    \ = $i + $palindrome_length / 2;\n\t\t}\n\t}\n\t$prefix = substr($string, 0, $palindrome_start);\n\
    \t$suffix = substr($string, $palindrome_end + 1);\n\treturn $prefix . $string\
    \ . strrev($prefix);\n}\n", "\t$string_length = strlen($string);\n\t$palindrome_length\
    \ = 0;\n\t$palindrome_start = 0;\n\tfor ($i = 0; $i < $string_length; $i++) {\n\
    \t\t$palindrome_length = max($palindrome_length, get_palindrome_length($string,\
    \ $i, $i));\n\t\t$palindrome_length = max($palindrome_length, get_palindrome_length($string,\
    \ $i, $i + 1));\n\t\tif ($palindrome_length == $string_length - $i) {\n\t\t\t\
    $palindrome_start = $i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t$palindrome_end = $palindrome_start\
    \ + $palindrome_length;\n\t$prefix = substr($string, 0, $palindrome_start);\n\t\
    $suffix = substr($string, $palindrome_end);\n\treturn $string . strrev($prefix)\
    \ . $suffix;\n}\n", "    $len = strlen($string);\n    if ($len == 0) {\n     \
    \   return \"\";\n    }\n    $i = $len - 1;\n    while ($i >= 0) {\n        if\
    \ (is_palindrome(substr($string, $i))) {\n            break;\n        }\n    \
    \    $i--;\n    }\n    return $string . strrev(substr($string, 0, $i));\n}\n",
  "    $string_length = strlen($string);\n    $palindrome_length = 0;\n    for ($i\
    \ = 0; $i < $string_length; $i++) {\n        $palindrome_length = max($palindrome_length,\
    \ longest_palindrome_length($string, $i));\n    }\n    return $string . substr(strrev($string),\
    \ $palindrome_length);\n}\n", "\t$string_length = strlen($string);\n\t$palindrome_length\
    \ = 0;\n\t$palindrome_start = 0;\n\t$palindrome_end = 0;\n\tfor ($i = 0; $i <\
    \ $string_length; $i++) {\n\t\t$palindrome_length = max($palindrome_length, find_palindrome_length($string,\
    \ $i, $i));\n\t\t$palindrome_length = max($palindrome_length, find_palindrome_length($string,\
    \ $i, $i + 1));\n\t\tif ($palindrome_length > $palindrome_end - $palindrome_start)\
    \ {\n\t\t\t$palindrome_start = $i - floor(($palindrome_length - 1) / 2);\n\t\t\
    \t$palindrome_end = $i + floor($palindrome_length / 2);\n\t\t}\n\t}\n\t$prefix\
    \ = substr($string, 0, $palindrome_start);\n\t$suffix = substr($string, $palindrome_end\
    \ + 1);\n\treturn $prefix . $string . strrev($prefix) . $suffix;\n}\n", "    $length\
    \ = strlen($string);\n    for ($i = $length; $i > 0; $i--) {\n        $substring\
    \ = substr($string, 0, $i);\n        if (is_palindrome($substring)) {\n      \
    \      return $string . strrev(substr($string, $i));\n        }\n    }\n    return\
    \ $string;\n}\n", "    $string_length = strlen($string);\n    $palindrome_length\
    \ = 0;\n    $palindrome_start = 0;\n    for ($i = 0; $i < $string_length; $i++)\
    \ {\n        $length = 0;\n        for ($j = 0; $j <= $i; $j++) {\n          \
    \  if ($string[$i - $j] == $string[$i + $j]) {\n                $length += 2;\n\
    \            } else {\n                break;\n            }\n        }\n    \
    \    if ($length > $palindrome_length) {\n            $palindrome_length = $length;\n\
    \            $palindrome_start = $i - $j + 1;\n        }\n    }\n    for ($i =\
    \ 0; $i < $string_length - 1; $i++) {\n        $length = 1;\n        for ($j =\
    \ 0; $j <= $i; $j++) {\n            if ($string[$i - $j] == $string[$i + $j +\
    \ 1]) {\n                $length += 2;\n            } else {\n               \
    \ break;\n            }\n        }\n        if ($length > $palindrome_length)\
    \ {\n            $palindrome_length = $length;\n            $palindrome_start\
    \ = $i - $j + 1;\n        }\n    }\n    return $string . strrev(substr($string,\
    \ 0, $palindrome_start));\n}\n\necho make_palindrome(\"cata\");", "    $string_length\
    \ = strlen($string);\n    $string_reversed = strrev($string);\n    $longest_palindrome_length\
    \ = 0;\n    $longest_palindrome_position = 0;\n    for ($i = 0; $i < $string_length;\
    \ $i++) {\n        $j = 0;\n        while ($string[$i + $j] == $string_reversed[$j])\
    \ {\n            $j++;\n            if ($i + $j == $string_length) {\n       \
    \         break;\n            }\n        }\n        if ($j > $longest_palindrome_length)\
    \ {\n            $longest_palindrome_length = $j;\n            $longest_palindrome_position\
    \ = $i;\n        }\n    }\n    return $string . substr($string_reversed, $longest_palindrome_length);\n\
    }\n\necho make_palindrome(\"cata\");", "\t$suffix = find_longest_palindromic_suffix($string);\n\
    \t$prefix = substr($string, 0, strlen($string) - strlen($suffix));\n\t$prefix\
    \ = strrev($prefix);\n\treturn $string . $prefix;\n}\n", "    $length = strlen($string);\n\
    \    $palindrome = $string;\n    for ($i = $length - 1; $i >= 0; $i--) {\n   \
    \     if (is_palindrome(substr($string, $i))) {\n            $palindrome .= strrev(substr($string,\
    \ 0, $i));\n            break;\n        }\n    }\n    return $palindrome;\n}\n",
  "    $string_length = strlen($string);\n    $palindrome_length = 0;\n    for ($i\
    \ = 0; $i < $string_length; $i++) {\n        $palindrome_length = max($palindrome_length,\
    \ longest_palindrome_length($string, $i, $i));\n        $palindrome_length = max($palindrome_length,\
    \ longest_palindrome_length($string, $i, $i + 1));\n    }\n    $palindrome_prefix\
    \ = substr($string, 0, $string_length - $palindrome_length);\n    return $string\
    \ . strrev($palindrome_prefix);\n}", "    $length = strlen($string);\n    $palindrome\
    \ = $string;\n    for ($i = 0; $i < $length; $i++) {\n        $prefix = substr($string,\
    \ 0, $length - $i);\n        $suffix = substr($string, $length - $i);\n      \
    \  if ($prefix == strrev($suffix)) {\n            $palindrome .= strrev(substr($string,\
    \ 0, $i));\n            break;\n        }\n    }\n    return $palindrome;\n}\n\
    echo make_palindrome(\"cat\");", "    $length = strlen($string);\n    $i = $length;\n\
    \    while ($i > 0) {\n        $substring = substr($string, 0, $i);\n        if\
    \ ($substring == strrev($substring)) {\n            break;\n        }\n      \
    \  $i--;\n    }\n    return $string . strrev(substr($string, 0, $length - $i));\n\
    }\n\necho make_palindrome(\"cata\");", "\t$string_length = strlen($string);\n\t\
    $palindrome_length = 0;\n\t$palindrome_start = 0;\n\tfor ($i = 0; $i < $string_length;\
    \ $i++) {\n\t\t$substring_length = $string_length - $i;\n\t\t$substring = substr($string,\
    \ $i, $substring_length);\n\t\t$substring_reversed = strrev($substring);\n\t\t\
    if ($substring == $substring_reversed) {\n\t\t\t$palindrome_length = $substring_length;\n\
    \t\t\t$palindrome_start = $i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t$prefix = substr($string,\
    \ 0, $palindrome_start);\n\t$prefix_reversed = strrev($prefix);\n\treturn $string\
    \ . $prefix_reversed;\n}\n\necho make_palindrome(\"cat\");", "    $len = strlen($string);\n\
    \    $i = 0;\n    $j = $len - 1;\n    while ($i < $j) {\n        if ($string[$i]\
    \ != $string[$j]) {\n            break;\n        }\n        $i++;\n        $j--;\n\
    \    }\n    if ($i >= $j) {\n        return $string;\n    }\n    $prefix = substr($string,\
    \ 0, $i);\n    $suffix = substr($string, $i);\n    $suffix_reverse = strrev($suffix);\n\
    \    return $prefix . $suffix_reverse . $suffix;\n}\n\necho make_palindrome(\"\
    cata\");", "    $length = strlen($string);\n    $palindrome_length = 0;\n    for\
    \ ($i = 0; $i < $length; $i++) {\n        $substring = substr($string, $i);\n\
    \        $reverse = strrev($substring);\n        if ($substring == $reverse) {\n\
    \            $palindrome_length = $length - $i;\n            break;\n        }\n\
    \    }\n    $prefix = substr($string, 0, $length - $palindrome_length);\n    $reverse_prefix\
    \ = strrev($prefix);\n    return $string . $reverse_prefix;\n}\n\necho make_palindrome(\"\
    cat\");", "    $suffix = longest_palindrome_suffix($string);\n    $prefix = strrev(substr($string,\
    \ 0, strlen($string) - strlen($suffix)));\n    return $string . $prefix;\n}\n",
  "\t$length = strlen($string);\n\t$palindrome_length = 0;\n\tfor ($i = 0; $i < $length;\
    \ $i++) {\n\t\t$substring = substr($string, $i);\n\t\t$substring_length = strlen($substring);\n\
    \t\tif ($substring_length > $palindrome_length && is_palindrome($substring)) {\n\
    \t\t\t$palindrome_length = $substring_length;\n\t\t}\n\t}\n\t$prefix = substr($string,\
    \ 0, $length - $palindrome_length);\n\t$prefix_reversed = strrev($prefix);\n\t\
    return $string . $prefix_reversed;\n}\n", "    $len = strlen($string);\n    for\
    \ ($i = $len; $i > 0; $i--) {\n        if (is_palindrome(substr($string, 0, $i)))\
    \ {\n            return $string . strrev(substr($string, $i));\n        }\n  \
    \  }\n    return $string;\n}\n", "    $len = strlen($string);\n    if ($len <=\
    \ 1) {\n        return $string;\n    }\n    $max_len = 0;\n    $max_i = 0;\n \
    \   for ($i = 0; $i < $len; $i++) {\n        $len1 = longest_palindrome_length($string,\
    \ $i, $i);\n        $len2 = longest_palindrome_length($string, $i, $i + 1);\n\
    \        $len = max($len1, $len2);\n        if ($len > $max_len) {\n         \
    \   $max_len = $len;\n            $max_i = $i;\n        }\n    }\n    $prefix\
    \ = substr($string, 0, $max_i);\n    $prefix = strrev($prefix);\n    $suffix =\
    \ substr($string, $max_i + $max_len);\n    return $prefix . $suffix . $prefix;\n\
    }\n", "\t$len = strlen($string);\n\t$i = 0;\n\t$j = $len - 1;\n\twhile ($i < $j)\
    \ {\n\t\tif ($string[$i] != $string[$j]) {\n\t\t\tbreak;\n\t\t}\n\t\t$i++;\n\t\
    \t$j--;\n\t}\n\tif ($i >= $j) {\n\t\treturn $string;\n\t}\n\t$suffix = substr($string,\
    \ $i);\n\t$suffix = strrev($suffix);\n\t$prefix = substr($string, 0, $i);\n\t\
    return $prefix . $suffix . $string;\n}\n\n/* Find the shortest palindrome that\
    \ begins with a supplied string.\nAlgorithm idea is simple:\n- Find the longest\
    \ postfix of supplied string that is a palindrome.\n- Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    >>> make_palindrome(\"\")\n\"\"\n>>> make_palindrome(\"cat\")\n\"catac\"\n>>>\
    \ make_palindrome(\"cata\")\n\"catac\"*/", "    $length = strlen($string);\n \
    \   $palindrome = $string;\n    for ($i = 1; $i < $length; $i++) {\n        $prefix\
    \ = substr($string, 0, $length - $i);\n        $suffix = substr($string, $i);\n\
    \        if ($prefix == strrev($suffix)) {\n            $palindrome = $string\
    \ . strrev($prefix);\n            break;\n        }\n    }\n    return $palindrome;\n\
    }\n\necho make_palindrome(\"cat\");", "    $length = strlen($string);\n    $palindrome_length\
    \ = 0;\n    for ($i = 0; $i < $length; $i++) {\n        $palindrome_length = max($palindrome_length,\
    \ longest_palindrome_suffix($string, $i));\n    }\n    $prefix = substr($string,\
    \ 0, $length - $palindrome_length);\n    return $string . strrev($prefix);\n}\n",
  "    $length = strlen($string);\n    $palindrome = $string;\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        $prefix = substr($string, 0, $length - $i);\n  \
    \      $suffix = substr($string, $length - $i);\n        if ($prefix == strrev($suffix))\
    \ {\n            $palindrome .= strrev(substr($string, 0, $i));\n            break;\n\
    \        }\n    }\n    return $palindrome;\n}\n\necho make_palindrome(\"cata\"\
    );", "    $length = strlen($string);\n    $i = $length;\n    while ($i > 0) {\n\
    \        $substring = substr($string, 0, $i);\n        if ($substring == strrev($substring))\
    \ {\n            break;\n        }\n        $i--;\n    }\n    return $string .\
    \ strrev(substr($string, 0, $length - $i));\n}\n\necho make_palindrome(\"cata\"\
    );", "\t$length = strlen($string);\n\t$i = $length;\n\twhile ($i > 0) {\n\t\t\
    if (is_palindrome(substr($string, 0, $i))) {\n\t\t\tbreak;\n\t\t}\n\t\t$i--;\n\
    \t}\n\t$prefix = substr($string, 0, $i);\n\t$suffix = strrev($prefix);\n\treturn\
    \ $string . $suffix;\n}\n", "    $string_length = strlen($string);\n    $palindrome_length\
    \ = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n        if ($string[$i]\
    \ == $string[$string_length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $string_length - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n\necho make_palindrome(\"cat\");",
  "\t$string_length = strlen($string);\n\t$palindrome_suffix = '';\n\tfor ($i = $string_length\
    \ - 1; $i >= 0; $i--) {\n\t\tif (substr($string, 0, $i) == strrev(substr($string,\
    \ $string_length - $i))) {\n\t\t\t$palindrome_suffix = substr($string, $i);\n\t\
    \t\tbreak;\n\t\t}\n\t}\n\treturn $string . strrev(substr($string, 0, $string_length\
    \ - strlen($palindrome_suffix)));\n}\necho make_palindrome(\"cat\");", "    $len\
    \ = strlen($string);\n    if ($len == 0) {\n        return \"\";\n    }\n    $i\
    \ = $len;\n    while ($i > 0) {\n        $substr = substr($string, 0, $i);\n \
    \       if (is_palindrome($substr)) {\n            return $string . strrev(substr($string,\
    \ $i));\n        }\n        $i--;\n    }\n}", "    $string_length = strlen($string);\n\
    \    $palindrome_length = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n\
    \        if ($string[$i] == $string[$string_length - $i - 1]) {\n            $palindrome_length++;\n\
    \        } else {\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, $string_length - $palindrome_length);\n    $prefix_reversed = strrev($prefix);\n\
    \    return $string . $prefix_reversed;\n}\n\necho make_palindrome(\"cata\");"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
