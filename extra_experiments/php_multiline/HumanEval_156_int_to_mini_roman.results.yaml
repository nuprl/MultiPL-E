language: php
name: HumanEval_156_int_to_mini_roman
results:
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = \"\";\n    $numerals = array(\n        1000 => \"m\",\n    \
    \    900 => \"cm\",\n        500 => \"d\",\n        400 => \"cd\",\n        100\
    \ => \"c\",\n        90 => \"xc\",\n        50 => \"l\",\n        40 => \"xl\"\
    ,\n        10 => \"x\",\n        9 => \"ix\",\n        5 => \"v\",\n        4\
    \ => \"iv\",\n        1 => \"i\"\n    );\n    foreach ($numerals as $key => $value)\
    \ {\n        while ($number >= $key) {\n            $roman .= $value;\n      \
    \      $number -= $key;\n        }\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo \"<br>\";\necho int_to_mini_roman(152);\necho \"<br>\";\necho int_to_mini_roman(426);\n\
    echo \"<br>\";\necho int_to_mini_roman(999);\necho \"<br>\";\necho int_to_mini_roman(1000);\n\
    echo \"<br>\";\necho int_to_mini_roman(1001);\necho \"<br>\";\necho int_to_mini_roman(1002);\n\
    echo \"<br>\";\necho int_to_mini_roman(1003);\necho \"<br>\";\necho int_to_mini_roman(1004);\n\
    echo \"<br>\";\necho int_to_mini_roman(1005);\necho \"<br>\";\necho int_to_mini_roman(1006);\n\
    echo \"<br>\";\necho int_to_mini_roman(1007);\necho \"<br>\";\necho int_to_mini_roman(1008);\n\
    echo \"<br>\";\necho int_to_mini_roman(1009);\necho \"<br>\";\necho int_to_mini_roman(1010);\n\
    echo \"<br>\";\necho int_to_mini_roman(1011);\necho \"<br>\";\necho int_to_mini_roman(1012);\n\
    echo \"<br>\";\necho int_to_mini_roman(1013);\necho \"<br>\";\necho int_to_mini_roman\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpoimf9ayh.php on line 74

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = \"\";\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    $romans = [\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"];\n    for ($i = 0; $i <\
    \ count($numbers); $i++) {\n        while ($number >= $numbers[$i]) {\n      \
    \      $roman .= $romans[$i];\n            $number -= $numbers[$i];\n        }\n\
    \    }\n    return $roman;\n}\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $result .= str_repeat($key,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $result;\n\
    }\n\n/* Given a string, return the first non-repeating character in it.\nFor strings\
    \ with all repeats, return 'sorry'.\nExamples:\n>>> first_non_repeating_letter('aabbcdddee')\n\
    'sorry'\n>>> first_non_repeating_letter('aabbcdddeef')\n'f'\n>>> first_non_repeating_letter('aabbcdddeefg')\n\
    'f'\n>>> first_non_repeating_letter('aabbcdddeefgg')\n'sorry'\n>>> first_non_repeating_letter('aabbcdddeefggg')\n\
    'sorry'\n>>> first_non_repeating_letter('aabbcdddeefgggg')\n'sorry'\n>>> first_non_repeating_letter('aabbcdddeefggggg')\n\
    'sorry'\n>>> first_non_repeating_letter('aabbcdddeefgggggg')\n'sorry'\n>>> first_non_repeating_letter('aabbcdddeefggggggg')\n\
    'sorry'\n>>> first_non_repeating_letter('aabbcdddeefgggggggg')\n'sorry'\n>>> first_non_repeating_letter('aabbcdddeefggggggggg')\n\
    'sorry'\n>>> first_non_repeating_letter('aabbcdddeefgggggggggg')\n'sorry'\n>>>\
    \ first_non_repeating_letter('aabb\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 36 in /tmp/tmp_mzjc7x3.php on
    line 36

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = [\n        'm' => 1000,\n        'cm' =>\
    \ 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n     \
    \   'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    ];\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral, return the integer equivalent.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\"\
    )\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\n/* Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\nand return it in lowercase.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_mini_roman(19)\n\"xix\"\n\
    >>> int_to_mini_roman(152)\n\"clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn2xyi7qr.php:52\n\
    Stack trace:\n#0 /tmp/tmpn2xyi7qr.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpn2xyi7qr.php\
    \ on line 52\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $result .= str_repeat($key,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $result;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped, except leave the first character in place if it is a non-alphabetic\n\
    character.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n\
    >>> front_back('ab')\n'ba'*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpkvncejl3.php
    on line 30


    Deprecated: Implicit conversion from float 0.021111111111111112 to int loses precision
    in /tmp/tmpkvncejl3.php on line 30


    Deprecated: Implicit conversion from float 0.038 to int loses precision in /tmp/tmpkvncejl3.php
    on line 30


    Deprecated: Implicit conversion from float 0.0475 to int loses precision in /tmp/tmpkvncejl3.php
    on line 30


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpkvncejl3.php
    on line 30


    Deprecated: Implicit conversion from float 0.2111111111111111 to int loses precision
    in /tmp/tmpkvncejl3.php on line 30


    Deprecated: Implicit conversion from float 0.38 to int loses precision in /tmp/tmpkvncejl3.php
    on line 30


    Deprecated: Implicit conversion from float 0.475 to int loses precision in /tmp/tmpkvncejl3.php
    on line 30


    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpkvncejl3.php
    on line 30


    Fatal error: Uncaught Exce'
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\n/* Given a positive integer,\
    \ return its corresponding column title as appear in an Excel sheet.\nRestrictions:\
    \ 1 <= num <= 26^3\nExamples:\n>>> int_to_excel_column(1)\n\"A\"\n>>> int_to_excel_column(28)\n\
    \"AB\"\n>>> int_to_excel_column(701)\n\"ZY\"\n>>> int_to_excel_column(703)\n\"\
    AAA\"*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpacqy7hn5.php:53\n\
    Stack trace:\n#0 /tmp/tmpacqy7hn5.php(69): test()\n#1 {main}\n  thrown in /tmp/tmpacqy7hn5.php\
    \ on line 53\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array(\n        'm' => 1000,\n  \
    \      'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1\n    );\n    foreach ($roman_numerals as $key => $value) {\n   \
    \     $matches = intval($number / $value);\n        $roman .= str_repeat($key,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $roman;\n\
    }\necho int_to_mini_roman(19);\necho \"<br>\";\necho int_to_mini_roman(152);\n\
    echo \"<br>\";\necho int_to_mini_roman(426);\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xix<br>clii<br>cdxxvi
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [\n        'M' => 1000,\n        'CM' =>\
    \ 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n     \
    \   'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n\
    \    ];\n    foreach ($numbers as $roman_numeral => $value) {\n        $matches\
    \ = intval($number / $value);\n        $roman .= str_repeat($roman_numeral, $matches);\n\
    \        $number = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given\
    \ a string, return a new string with the order of the characters reversed.\nExamples:\n\
    >>> reverse_string('Hello, World!')\n\"!dlroW ,olleH\"\n>>> reverse_string('I\
    \ love PHP')\n\"HPP evol I\"\n>>> reverse_string('racecar')\n\"racecar\"*/\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoal_s2w5.php:50\n\
    Stack trace:\n#0 /tmp/tmpoal_s2w5.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpoal_s2w5.php\
    \ on line 50\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman = '';\n\t$numerals = array(\n\t\t'M' => 1000,\n\t\t'CM' => 900,\n\
    \t\t'D' => 500,\n\t\t'CD' => 400,\n\t\t'C' => 100,\n\t\t'XC' => 90,\n\t\t'L' =>\
    \ 50,\n\t\t'XL' => 40,\n\t\t'X' => 10,\n\t\t'IX' => 9,\n\t\t'V' => 5,\n\t\t'IV'\
    \ => 4,\n\t\t'I' => 1\n\t);\n\tforeach ($numerals as $numeral => $value) {\n\t\
    \twhile ($number >= $value) {\n\t\t\t$roman .= $numeral;\n\t\t\t$number -= $value;\n\
    \t\t}\n\t}\n\treturn strtolower($roman);\n}\n\n/* Given a string containing a\
    \ roman numeral, return its integer equivalent.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\"\
    )\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "XIXCLIICDXXVI\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp17wnnc0w.php:45\n\
    Stack trace:\n#0 /tmp/tmp17wnnc0w.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp17wnnc0w.php\
    \ on line 45\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuzpy2isf.php:52\n\
    Stack trace:\n#0 /tmp/tmpuzpy2isf.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpuzpy2isf.php\
    \ on line 52\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $roman = '';\n    foreach ($roman_numerals as $roman => $num) {\n       \
    \ $matches = intval($number / $num);\n        $roman .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $roman;\n}\n\n/* Given a\
    \ string, return a new string that is the reverse of the original.\nExamples:\n\
    >>> reverse_string(\"hello\")\n\"olleh\"\n>>> reverse_string(\"world\")\n\"dlrow\"\
    \n>>> reverse_string(\"\")\n\"\"*/\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp20mfbupl.php:50\n\
    Stack trace:\n#0 /tmp/tmp20mfbupl.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp20mfbupl.php\
    \ on line 50\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n      \
    \  $matches = intval($number / $num);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [\n        1000 => 'm',\n        900 =>\
    \ 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n    \
    \    90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n\
    \        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n\
    \    ];\n    foreach ($numbers as $int => $roman_numeral) {\n        $matches\
    \ = intval($number / $int);\n        $roman .= str_repeat($roman_numeral, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman = '';\n\t$numerals = array(\n\t\t'M' => 1000,\n\t\t'D' => 500,\n\
    \t\t'C' => 100,\n\t\t'L' => 50,\n\t\t'X' => 10,\n\t\t'V' => 5,\n\t\t'I' => 1\n\
    \t);\n\tforeach ($numerals as $numeral => $value) {\n\t\t$roman .= str_repeat($numeral,\
    \ floor($number / $value));\n\t\t$number %= $value;\n\t}\n\treturn strtolower(str_replace(array('DCCCC',\
    \ 'CCCC', 'LXXXX', 'XXXX', 'VIIII', 'IIII'), array('cm', 'cd', 'xc', 'xl', 'ix',\
    \ 'iv'), $roman));\n}\n\n/* Given a string of roman numerals, return the integer\
    \ equivalent.\nRestrictions: 1 <= num <= 3999\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $roman .= str_repeat($numeral,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $roman;\n\
    }\n\n/* Given a string containing a roman numeral representation of a positive\
    \ integer,\nreturn the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>>\
    \ mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"\
    cdxxvi\")\n426*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpsl4k7ygs.php
    on line 30


    Deprecated: Implicit conversion from float 0.021111111111111112 to int loses precision
    in /tmp/tmpsl4k7ygs.php on line 30


    Deprecated: Implicit conversion from float 0.038 to int loses precision in /tmp/tmpsl4k7ygs.php
    on line 30


    Deprecated: Implicit conversion from float 0.0475 to int loses precision in /tmp/tmpsl4k7ygs.php
    on line 30


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpsl4k7ygs.php
    on line 30


    Deprecated: Implicit conversion from float 0.2111111111111111 to int loses precision
    in /tmp/tmpsl4k7ygs.php on line 30


    Deprecated: Implicit conversion from float 0.38 to int loses precision in /tmp/tmpsl4k7ygs.php
    on line 30


    Deprecated: Implicit conversion from float 0.475 to int loses precision in /tmp/tmpsl4k7ygs.php
    on line 30


    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpsl4k7ygs.php
    on line 30


    Deprecated: Implicit conve'
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n    \
    \    'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($numerals as $numeral => $value) {\n        $result .= str_repeat($numeral,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $result;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped, except leave the first character in place if it is a non-alphabetic\n\
    character.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n\
    >>> front_back('ab')\n'ba'\n>>> front_back('aavJ')\n'Java'\n>>> front_back('z')\n\
    'z'*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpg6fgpu4k.php
    on line 30


    Deprecated: Implicit conversion from float 0.021111111111111112 to int loses precision
    in /tmp/tmpg6fgpu4k.php on line 30


    Deprecated: Implicit conversion from float 0.038 to int loses precision in /tmp/tmpg6fgpu4k.php
    on line 30


    Deprecated: Implicit conversion from float 0.0475 to int loses precision in /tmp/tmpg6fgpu4k.php
    on line 30


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpg6fgpu4k.php
    on line 30


    Deprecated: Implicit conversion from float 0.2111111111111111 to int loses precision
    in /tmp/tmpg6fgpu4k.php on line 30


    Deprecated: Implicit conversion from float 0.38 to int loses precision in /tmp/tmpg6fgpu4k.php
    on line 30


    Deprecated: Implicit conversion from float 0.475 to int loses precision in /tmp/tmpg6fgpu4k.php
    on line 30


    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpg6fgpu4k.php
    on line 30


    Deprecated: Implicit conve'
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'm' => 1000,\n        'cm' => 900,\n       \
    \ 'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman = array(\n        'M' => 1000,\n        'CM'\
    \ => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n  \
    \      'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n\
    \    );\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "XIX\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_uec2q4p.php:42\n\
    Stack trace:\n#0 /tmp/tmp_uec2q4p.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp_uec2q4p.php\
    \ on line 42\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n      \
    \  $matches = intval($number / $num);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $result;\n}\n\n/* Given\
    \ a string containing a roman numeral representation of a positive integer,\n\
    return the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\nand return it in uppercase.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\"XIX\"\n>>>\
    \ int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'd'\
    \ => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n     \
    \   'v' => 5,\n        'i' => 1,\n    );\n    foreach ($numerals as $key => $value)\
    \ {\n        $roman .= str_repeat($key, $number / $value);\n        $number %=\
    \ $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing a roman\
    \ numeral representation of a positive integer,\nreturn the integer.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 0.019 to int loses precision\
    \ in /tmp/tmpkste7fbr.php on line 24\n\nDeprecated: Implicit conversion from float\
    \ 0.038 to int loses precision in /tmp/tmpkste7fbr.php on line 24\n\nDeprecated:\
    \ Implicit conversion from float 0.19 to int loses precision in /tmp/tmpkste7fbr.php\
    \ on line 24\n\nDeprecated: Implicit conversion from float 0.38 to int loses precision\
    \ in /tmp/tmpkste7fbr.php on line 24\n\nDeprecated: Implicit conversion from float\
    \ 1.9 to int loses precision in /tmp/tmpkste7fbr.php on line 24\n\nDeprecated:\
    \ Implicit conversion from float 1.8 to int loses precision in /tmp/tmpkste7fbr.php\
    \ on line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkste7fbr.php:45\n\
    Stack trace:\n#0 /tmp/tmpkste7fbr.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpkste7fbr.php\
    \ on line 45\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped, except leave the string unchanged if the string's length is less\nthan\
    \ 2.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>>\
    \ front_back('ab')\n'ba'*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n      \
    \  $matches = intval($number / $num);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $result;\n}\n\n/* Given\
    \ a string containing a roman numeral representation of a positive integer,\n\
    return the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $key => $value) {\n        while ($number >=\
    \ $value) {\n            $roman .= $key;\n            $number -= $value;\n   \
    \     }\n    }\n    return $roman;\n}\n\n/* Given a string, return a new string\
    \ with the first and last characters\nswapped.\nExamples:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman = '';\n\t$numerals = array(\n\t\t'M' => 1000,\n\t\t'D' => 500,\n\
    \t\t'C' => 100,\n\t\t'L' => 50,\n\t\t'X' => 10,\n\t\t'V' => 5,\n\t\t'I' => 1\n\
    \t);\n\tforeach ($numerals as $numeral => $value) {\n\t\t$roman .= str_repeat($numeral,\
    \ $number / $value);\n\t\t$number %= $value;\n\t}\n\treturn strtolower(str_replace(array('DCCCC',\
    \ 'CCCC', 'LXXXX', 'XXXX', 'VIIII', 'IIII'),\n\t\tarray('cm', 'cd', 'xc', 'xl',\
    \ 'ix', 'iv'), $roman));\n}\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmp4jfmfvjk.php
    on line 24


    Deprecated: Implicit conversion from float 0.038 to int loses precision in /tmp/tmp4jfmfvjk.php
    on line 24


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmp4jfmfvjk.php
    on line 24


    Deprecated: Implicit conversion from float 0.38 to int loses precision in /tmp/tmp4jfmfvjk.php
    on line 24


    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmp4jfmfvjk.php
    on line 24


    Deprecated: Implicit conversion from float 1.8 to int loses precision in /tmp/tmp4jfmfvjk.php
    on line 24


    Deprecated: Implicit conversion from float 0.152 to int loses precision in /tmp/tmp4jfmfvjk.php
    on line 24


    Deprecated: Implicit conversion from float 0.304 to int loses precision in /tmp/tmp4jfmfvjk.php
    on line 24


    Deprecated: Implicit conversion from float 1.52 to int loses precision in /tmp/tmp4jfmfvjk.php
    on line 24


    Deprecated: Implicit conversion from float 1.04 to int los'
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [\n        'M'  => 1000,\n        'CM'\
    \ => 900,\n        'D'  => 500,\n        'CD' => 400,\n        'C'  => 100,\n\
    \        'XC' => 90,\n        'L'  => 50,\n        'XL' => 40,\n        'X'  =>\
    \ 10,\n        'IX' => 9,\n        'V'  => 5,\n        'IV' => 4,\n        'I'\
    \  => 1\n    ];\n    foreach ($numbers as $key => $value) {\n        while ($number\
    \ >= $value) {\n            $result .= $key;\n            $number -= $value;\n\
    \        }\n    }\n    return strtolower($result);\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman_numerals = array(\n\t\t'M' => 1000,\n\t\t'CM' => 900,\n\t\t'D' =>\
    \ 500,\n\t\t'CD' => 400,\n\t\t'C' => 100,\n\t\t'XC' => 90,\n\t\t'L' => 50,\n\t\
    \t'XL' => 40,\n\t\t'X' => 10,\n\t\t'IX' => 9,\n\t\t'V' => 5,\n\t\t'IV' => 4,\n\
    \t\t'I' => 1\n\t);\n\t$result = '';\n\tforeach ($roman_numerals as $roman => $int)\
    \ {\n\t\t$matches = intval($number / $int);\n\t\t$result .= str_repeat($roman,\
    \ $matches);\n\t\t$number = $number % $int;\n\t}\n\treturn $result;\n}\n\n/* Given\
    \ a string, return a new string with the first and last characters\nswapped, except\
    \ leave the first character in place if it is a non-alphabetic\ncharacter.\nExamples:\n\
    >>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n\
    'ba'\n>>> front_back('aavJ')\n'Java'\n>>> front_back('hello')\n'oellh'*/\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6fvk4yo4.php:56\n\
    Stack trace:\n#0 /tmp/tmp6fvk4yo4.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp6fvk4yo4.php\
    \ on line 56\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [\n        1000 => 'm',\n        900 =>\
    \ 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n    \
    \    90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n\
    \        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n\
    \    ];\n    foreach ($numbers as $key => $value) {\n        while ($number >=\
    \ $key) {\n            $roman .= $value;\n            $number -= $key;\n     \
    \   }\n    }\n    return $roman;\n}\n\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string containing a roman numeral representation of a positive\
    \ integer,\nreturn the integer.\nRestrictions: 1 <= num <= 3999\nExamples:\n>>>\
    \ mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"\
    cdxxvi\")\n426*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array(\n        'm' => 1000,\n  \
    \      'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1\n    );\n    foreach ($roman_numerals as $key => $value) {\n   \
    \     $matches = intval($number / $value);\n        $roman .= str_repeat($key,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $roman;\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $result .= str_repeat($key,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $result;\n\
    }\necho int_to_mini_roman(19);\necho \"\\n\";\necho int_to_mini_roman(152);\n\
    echo \"\\n\";\necho int_to_mini_roman(426);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpak452ng8.php
    on line 30


    Deprecated: Implicit conversion from float 0.021111111111111112 to int loses precision
    in /tmp/tmpak452ng8.php on line 30


    Deprecated: Implicit conversion from float 0.038 to int loses precision in /tmp/tmpak452ng8.php
    on line 30


    Deprecated: Implicit conversion from float 0.0475 to int loses precision in /tmp/tmpak452ng8.php
    on line 30


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpak452ng8.php
    on line 30


    Deprecated: Implicit conversion from float 0.2111111111111111 to int loses precision
    in /tmp/tmpak452ng8.php on line 30


    Deprecated: Implicit conversion from float 0.38 to int loses precision in /tmp/tmpak452ng8.php
    on line 30


    Deprecated: Implicit conversion from float 0.475 to int loses precision in /tmp/tmpak452ng8.php
    on line 30


    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpak452ng8.php
    on line 30

    XIX


    Deprecated: Implicit c'
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n      \
    \  $matches = intval($number / $num);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $result;\n}\n\n/* Given\
    \ a string containing a roman numeral representation of a positive integer,\n\
    return the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x',\
    \ 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n   \
    \     while ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped, except leave the string unchanged if the string's length is less\nthan\
    \ 2.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>>\
    \ front_back('ab')\n'ba'*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\n/* Given a mini-roman\
    \ numeral string, obtain its integer equivalent and return it.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphulhjstm.php:51\n\
    Stack trace:\n#0 /tmp/tmphulhjstm.php(67): test()\n#1 {main}\n  thrown in /tmp/tmphulhjstm.php\
    \ on line 51\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n      \
    \  $matches = intval($number / $num);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $result;\n}\n\n/* Given\
    \ a string containing a roman numeral representation of a positive integer,\n\
    return the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n    \
    \    'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($numerals as $numeral => $value) {\n        $result .= str_repeat($numeral,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmphsab65_c.php
    on line 30


    Deprecated: Implicit conversion from float 0.021111111111111112 to int loses precision
    in /tmp/tmphsab65_c.php on line 30


    Deprecated: Implicit conversion from float 0.038 to int loses precision in /tmp/tmphsab65_c.php
    on line 30


    Deprecated: Implicit conversion from float 0.0475 to int loses precision in /tmp/tmphsab65_c.php
    on line 30


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmphsab65_c.php
    on line 30


    Deprecated: Implicit conversion from float 0.2111111111111111 to int loses precision
    in /tmp/tmphsab65_c.php on line 30


    Deprecated: Implicit conversion from float 0.38 to int loses precision in /tmp/tmphsab65_c.php
    on line 30


    Deprecated: Implicit conversion from float 0.475 to int loses precision in /tmp/tmphsab65_c.php
    on line 30


    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmphsab65_c.php
    on line 30


    Deprecated: Implicit conversion from float 0.152 to int loses precision in /tmp/tmphsab65_c.php
    on line 30


    Deprecated: Implicit conversion from float 0.1688888888888889 to int loses precision
    in /tmp/tmphsab65_c.php on line 30


    Deprecated: Implicit conversion from float 0.304 to int loses precision in /tmp/tmphsab65_c.php
    on line 30


    Deprecated: Implicit conversion from float 0.38 to int loses precision in /tmp/tmphsab65_c.php
    on line 30


    Deprecated: Implicit conversion from float 1.52 to int loses precision in /tmp/tmphsab65_c.php
    on line 30


    Deprecated: Implicit conversion from float 0.5777777777777777 to int loses precision
    in /tmp/tmphsab65_c.php on line 30


    Deprecated: Implicit conversion from float 1.04 to int loses precision in /tmp/tmphsab65_c.php
    on line 30


    Deprecated: Implicit conversion from float 0.05 to int loses precision in /tmp/tmphsab65_c.php
    on line 30


    Deprecated: Implicit conversion from float 0.2 to int loses precision in /tmp/tmphsab65_c.php
    on line 30


    Deprecated: Implicit conversion from float 0.2222222222222'
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x',\
    \ 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n   \
    \     while ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\
    \ swapped.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n\
    >>> front_back('ab')\n'ba'*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'm' => 1000,\n        'cm' => 900,\n       \
    \ 'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($key, $matches);\n        $number =\
    \ $number % $value;\n    }\n    return $roman;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n    \
    \    'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($numerals as $key => $value) {\n        while ($number >=\
    \ $value) {\n            $result .= $key;\n            $number -= $value;\n  \
    \      }\n    }\n    return $result;\n}\n\n/* Given a string of roman numerals,\
    \ return the integer equivalent.\nRestrictions:\n- The string will only contain\
    \ valid roman numerals.\n- The string will only contain uppercase roman numerals.\n\
    - The string will only contain numerals in the range 1-3999.\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $roman .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return $roman;\n}\n\n/* Given a string of roman numerals,\
    \ return the integer equivalent.\nRestrictions: 1 <= num <= 1000\nExamples:\n\
    >>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>>\
    \ mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'M' => 1000,\n        'CM'\
    \ => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n  \
    \      'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return strtolower($roman);\n}\n\n/* Given a\
    \ string, return a new string with the first and last characters\nswapped, except\
    \ leave the first character in place if it is a non-alphabetic\ncharacter.\nExamples:\n\
    >>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n\
    'ba'\n>>> front_back('aavj')\n'java'\n>>> front_back('hello')\n'oellh'*/\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x',\
    \ 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n   \
    \     while ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped, except leave the string unchanged if the string's length is less\nthan\
    \ 2.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>>\
    \ front_back('ab')\n'ba'*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\nand return it in uppercase.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_maxi_roman(19)\n\"XIX\"\n\
    >>> int_to_maxi_roman(152)\n\"CLII\"\n>>> int_to_maxi_roman(426)\n\"CDXXVI\"*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\n/* Given a string, return\
    \ a new string that has transformed based on the input:\nChange case of every\
    \ character, ie. lower case to upper case, upper case to lower case.\nReverse\
    \ the order of words from the input.\nNote: You will have to handle multiple spaces,\
    \ and leading/trailing spaces.\nFor example:\n\"Example Input\" ==> \"iNPUT eXAMPLE\"\
    \nYou may assume the input only contain English alphabet and spaces.\n*/\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiu4hk6f1.php:50\n\
    Stack trace:\n#0 /tmp/tmpiu4hk6f1.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpiu4hk6f1.php\
    \ on line 50\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [\n        'M' => 1000,\n        'CM' =>\
    \ 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n     \
    \   'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n\
    \    ];\n    foreach ($numbers as $roman => $int) {\n        $matches = intval($number\
    \ / $int);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $int;\n    }\n    return $result;\n}\n\n/* Given a string, return\
    \ a new string with the same letters in reverse order.\nExamples:\n>>> reverse_string(\"\
    hello\")\n\"olleh\"\n>>> reverse_string(\"world\")\n\"dlrow\"\n>>> reverse_string(\"\
    \")\n\"\"*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoej4fzsd.php:50\n\
    Stack trace:\n#0 /tmp/tmpoej4fzsd.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpoej4fzsd.php\
    \ on line 50\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\n/* Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\nand return it in uppercase.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\"XIX\"\n>>>\
    \ int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjni0gf3p.php:52\n\
    Stack trace:\n#0 /tmp/tmpjni0gf3p.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpjni0gf3p.php\
    \ on line 52\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = [\n        'm' => 1000,\n        'cm' =>\
    \ 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n     \
    \   'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    ];\n    foreach ($numerals as $key => $value) {\n        while ($number >=\
    \ $value) {\n            $roman .= $key;\n            $number -= $value;\n   \
    \     }\n    }\n    return $roman;\n}\n\n/* Given a string containing a roman\
    \ numeral representation of a positive integer,\nreturn the integer.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    and return it in uppercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\
    \"XIX\"\n>>> int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $number_value) {\n\
    \        $matches = intval($number / $number_value);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $number_value;\n    }\n    return $result;\n\
    }\necho int_to_mini_roman(19);\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xix
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = [\n        'm' => 1000,\n        'd' =>\
    \ 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n        'v'\
    \ => 5,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral => $value)\
    \ {\n        $roman .= str_repeat($numeral, $number / $value);\n        $number\
    \ %= $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing a roman\
    \ numeral, return its integer equivalent.\nRestrictions: 1 <= num <= 1000\nExamples:\n\
    >>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>>\
    \ mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 0.019 to int loses precision\
    \ in /tmp/tmp7ggvn5eb.php on line 24\n\nDeprecated: Implicit conversion from float\
    \ 0.038 to int loses precision in /tmp/tmp7ggvn5eb.php on line 24\n\nDeprecated:\
    \ Implicit conversion from float 0.19 to int loses precision in /tmp/tmp7ggvn5eb.php\
    \ on line 24\n\nDeprecated: Implicit conversion from float 0.38 to int loses precision\
    \ in /tmp/tmp7ggvn5eb.php on line 24\n\nDeprecated: Implicit conversion from float\
    \ 1.9 to int loses precision in /tmp/tmp7ggvn5eb.php on line 24\n\nDeprecated:\
    \ Implicit conversion from float 1.8 to int loses precision in /tmp/tmp7ggvn5eb.php\
    \ on line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ggvn5eb.php:44\n\
    Stack trace:\n#0 /tmp/tmp7ggvn5eb.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp7ggvn5eb.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'm' => 1000,\n        'cm' => 900,\n       \
    \ 'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\n/* Given a string, return\
    \ a new string with the first and last characters\nswapped.\nExamples:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    and return it in uppercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\
    \"XIX\"\n>>> int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = \"\";\n    $roman_numerals = array(\n        'M' => 1000,\n\
    \        'D' => 500,\n        'C' => 100,\n        'L' => 50,\n        'X' =>\
    \ 10,\n        'V' => 5,\n        'I' => 1\n    );\n    foreach ($roman_numerals\
    \ as $roman => $num) {\n        $matches = intval($number / $num);\n        $roman\
    \ .= str_repeat($roman, $matches);\n        $number = $number % $num;\n    }\n\
    \    return $roman;\n}\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "IIIIIIIIII\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpooqjo71r.php:38\n\
    Stack trace:\n#0 /tmp/tmpooqjo71r.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpooqjo71r.php\
    \ on line 38\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n    \
    \    'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    $result\
    \ = '';\n    foreach ($numerals as $key => $value) {\n        while ($number >=\
    \ $value) {\n            $result .= $key;\n            $number -= $value;\n  \
    \      }\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'M' => 1000,\n       \
    \ 'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n\
    \        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' =>\
    \ 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I'\
    \ => 1\n    );\n    foreach ($numerals as $numeral => $value) {\n        while\
    \ ($number >= $value) {\n            $result .= $numeral;\n            $number\
    \ -= $value;\n        }\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "XIXCLIICDXXVI\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpigdwx0ca.php:45\n\
    Stack trace:\n#0 /tmp/tmpigdwx0ca.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpigdwx0ca.php\
    \ on line 45\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x',\
    \ 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n   \
    \     while ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n\
    }\n\n/* Given a string containing a roman numeral representation of a positive\
    \ integer,\nreturn the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>>\
    \ mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"\
    cdxxvi\")\n426*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string, return a string with all the vowels removed.\nExamples:\n\
    >>> remove_vowels(\"Hello, world!\")\n\"Hll, wrld!\"\n>>> remove_vowels(\"I am\
    \ a programmer\")\n\" m  prgrmmr\"*/\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n      \
    \  $matches = intval($number / $num);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $result;\n}\n\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n    \
    \    'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    $result\
    \ = '';\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $result .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return $result;\n}\n\n/* Given a string representing a\
    \ roman numeral, return the integer equivalent.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\"\
    )\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman = '';\n\t$numerals = [\n\t\t'M' => 1000,\n\t\t'CM' => 900,\n\t\t\
    'D' => 500,\n\t\t'CD' => 400,\n\t\t'C' => 100,\n\t\t'XC' => 90,\n\t\t'L' => 50,\n\
    \t\t'XL' => 40,\n\t\t'X' => 10,\n\t\t'IX' => 9,\n\t\t'V' => 5,\n\t\t'IV' => 4,\n\
    \t\t'I' => 1\n\t];\n\tforeach ($numerals as $numeral => $value) {\n\t\twhile ($number\
    \ >= $value) {\n\t\t\t$roman .= $numeral;\n\t\t\t$number -= $value;\n\t\t}\n\t\
    }\n\treturn strtolower($roman);\n}\n\n/* Given a string, return the string with\
    \ all its letters in alphabetical order.\nExamples:\n>>> alphabet_soup(\"hello\"\
    )\n\"ehllo\"\n>>> alphabet_soup(\"edabit\")\n\"abdeit\"\n>>> alphabet_soup(\"\
    hacker\")\n\"acehkr\"\n>>> alphabet_soup(\"geek\")\n\"eegk\"\n>>> alphabet_soup(\"\
    javascript\")\n\"aacijprstv\"*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n    \
    \    'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $result .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return $result;\n}\n\n/* Given a string containing a roman\
    \ numeral, return the integer equivalent.\nRestrictions: 1 <= num <= 1000\nExamples:\n\
    >>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>>\
    \ mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [\n        'M' => 1000,\n        'CM' =>\
    \ 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n     \
    \   'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n\
    \    ];\n    foreach ($numbers as $roman => $int) {\n        $matches = intval($number\
    \ / $int);\n        $roman .= str_repeat($roman, $matches);\n        $number =\
    \ $number % $int;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "IIIIII\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcnt1knsz.php:44\n\
    Stack trace:\n#0 /tmp/tmpcnt1knsz.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpcnt1knsz.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "XIXCLIICDXXVI\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwnwpbyzy.php:44\n\
    Stack trace:\n#0 /tmp/tmpwnwpbyzy.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpwnwpbyzy.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $result .= str_repeat($key,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $result;\n\
    }\n\n/* Given a string, return a new string with the characters in reverse order.\n\
    Examples:\n>>> reverse_string(\"hello\")\n\"olleh\"\n>>> reverse_string(\"world\"\
    )\n\"dlrow\"\n>>> reverse_string(\"\")\n\"\"*/\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpp5r05gz0.php
    on line 30


    Deprecated: Implicit conversion from float 0.021111111111111112 to int loses precision
    in /tmp/tmpp5r05gz0.php on line 30


    Deprecated: Implicit conversion from float 0.038 to int loses precision in /tmp/tmpp5r05gz0.php
    on line 30


    Deprecated: Implicit conversion from float 0.0475 to int loses precision in /tmp/tmpp5r05gz0.php
    on line 30


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpp5r05gz0.php
    on line 30


    Deprecated: Implicit conversion from float 0.2111111111111111 to int loses precision
    in /tmp/tmpp5r05gz0.php on line 30


    Deprecated: Implicit conversion from float 0.38 to int loses precision in /tmp/tmpp5r05gz0.php
    on line 30


    Deprecated: Implicit conversion from float 0.475 to int loses precision in /tmp/tmpp5r05gz0.php
    on line 30


    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpp5r05gz0.php
    on line 30


    Fatal error: Uncaught Exce'
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n      \
    \  $matches = intval($number / $num);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string containing a roman numeral representation of a positive\
    \ integer,\nreturn the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>>\
    \ mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"\
    cdxxvi\")\n426*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string, return\
    \ a new string with the first and last characters swapped,\nexcept leave the first\
    \ character in place if it is a non-alphabetic character.\nExamples:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $romans = array(\n        'M' => 1000,\n        'CM'\
    \ => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n  \
    \      'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n\
    \    );\n    foreach ($romans as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($key, $matches);\n        $number =\
    \ $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_zzqi4ij.php:52\n\
    Stack trace:\n#0 /tmp/tmp_zzqi4ij.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp_zzqi4ij.php\
    \ on line 52\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\n\n/* Given\
    \ a string of roman numerals, return the integer equivalent.\nRestrictions: 1\
    \ <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = array(\n        'M' => 1000,\n        'CM'\
    \ => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n  \
    \      'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n\
    \    );\n    foreach ($numbers as $roman => $int) {\n        $matches = intval($number\
    \ / $int);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $int;\n    }\n    return $result;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprm0ahrl2.php:52\n\
    Stack trace:\n#0 /tmp/tmprm0ahrl2.php(68): test()\n#1 {main}\n  thrown in /tmp/tmprm0ahrl2.php\
    \ on line 52\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'd'\
    \ => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n     \
    \   'v' => 5,\n        'i' => 1\n    );\n    foreach ($numerals as $numeral =>\
    \ $value) {\n        $matches = intval($number / $value);\n        $roman .= str_repeat($numeral,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $roman;\n\
    }\n\n/* Given a string containing a roman numeral representation of a positive\
    \ integer,\nreturn the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>>\
    \ mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"\
    cdxxvi\")\n426*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_lj0ekt3.php:46\n\
    Stack trace:\n#0 /tmp/tmp_lj0ekt3.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp_lj0ekt3.php\
    \ on line 46\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $number_value) {\n\
    \        $matches = intval($number / $number_value);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $number_value;\n    }\n    return $result;\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $number_value) {\n\
    \        $matches = intval($number / $number_value);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $number_value;\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    and return it in uppercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\
    \"XIX\"\n>>> int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "XIXCLIICDXXVI\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9fsr0yqg.php:45\n\
    Stack trace:\n#0 /tmp/tmp9fsr0yqg.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp9fsr0yqg.php\
    \ on line 45\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n      \
    \  $matches = intval($number / $num);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n\t$result = '';\n\t$numbers = array(1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1);\n\t$romans = array('m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i');\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\
    \twhile ($number >= $numbers[$i]) {\n\t\t\t$result .= $romans[$i];\n\t\t\t$number\
    \ -= $numbers[$i];\n\t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $number_value) {\n\
    \        $matches = intval($number / $number_value);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $number_value;\n    }\n    return $result;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped, except leave the first character in place if it is a non-alphabetic\n\
    character.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n\
    >>> front_back('ab')\n'ba'*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'm' => 1000,\n        'cm' => 900,\n       \
    \ 'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\n/* Given a string, return\
    \ a new string where the first and last chars have been exchanged.\nExamples:\n\
    >>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n\
    'ba'*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = \"\";\n    $numerals = array(\n        'M' => 1000,\n      \
    \  'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n\
    \        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' =>\
    \ 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I'\
    \ => 1\n    );\n    foreach ($numerals as $key => $value) {\n        while ($number\
    \ >= $value) {\n            $roman .= $key;\n            $number -= $value;\n\
    \        }\n    }\n    return strtolower($roman);\n}\n\n/* Given a string, return\
    \ a new string with the characters in reverse order.\nExamples:\n>>> reverse_string(\"\
    hello\")\n\"olleh\"\n>>> reverse_string(\"world\")\n\"dlrow\"\n>>> reverse_string(\"\
    a\")\n\"a\"\n>>> reverse_string(\"\")\n\"\"*/\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x',\
    \ 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n   \
    \     while ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\
    \ swapped.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n\
    >>> front_back('ab')\n'ba'*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'M' => 1000,\n        'CM'\
    \ => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n  \
    \      'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $roman .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return strtolower($roman);\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = \"\";\n    $numerals = array(\n        'm' => 1000,\n      \
    \  'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        $matches\
    \ = intval($number / $value);\n        $roman .= str_repeat($numeral, $matches);\n\
    \        $number = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given\
    \ a string containing a roman numeral representation of a positive integer,\n\
    return the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'd'\
    \ => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n     \
    \   'v' => 5,\n        'i' => 1\n    );\n    foreach ($numerals as $key => $value)\
    \ {\n        $roman .= str_repeat($key, intval($number / $value));\n        $number\
    \ %= $value;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\necho\
    \ int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "xviiiicliiccccxxvi\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1mch_hk4.php:37\n\
    Stack trace:\n#0 /tmp/tmp1mch_hk4.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp1mch_hk4.php\
    \ on line 37\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = \"\";\n    $numerals = [\n        \"m\" => 1000,\n        \"\
    d\" => 500,\n        \"c\" => 100,\n        \"l\" => 50,\n        \"x\" => 10,\n\
    \        \"v\" => 5,\n        \"i\" => 1\n    ];\n    foreach ($numerals as $numeral\
    \ => $value) {\n        $roman .= str_repeat($numeral, floor($number / $value));\n\
    \        $number %= $value;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo \"<br>\";\necho int_to_mini_roman(152);\necho \"<br>\";\necho int_to_mini_roman(426);\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "xviiii<br>clii<br>ccccxxvi\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp71th2yxq.php:39\nStack trace:\n#0 /tmp/tmp71th2yxq.php(55): test()\n\
    #1 {main}\n  thrown in /tmp/tmp71th2yxq.php on line 39\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = [\n        'm' => 1000,\n        'd' =>\
    \ 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n        'v'\
    \ => 5,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral => $value)\
    \ {\n        $result .= str_repeat($numeral, $number / $value);\n        $number\
    \ %= $value;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\necho\
    \ int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpbgijg5ga.php
    on line 24


    Deprecated: Implicit conversion from float 0.038 to int loses precision in /tmp/tmpbgijg5ga.php
    on line 24


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpbgijg5ga.php
    on line 24


    Deprecated: Implicit conversion from float 0.38 to int loses precision in /tmp/tmpbgijg5ga.php
    on line 24


    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpbgijg5ga.php
    on line 24


    Deprecated: Implicit conversion from float 1.8 to int loses precision in /tmp/tmpbgijg5ga.php
    on line 24

    xviiii

    Deprecated: Implicit conversion from float 0.152 to int loses precision in /tmp/tmpbgijg5ga.php
    on line 24


    Deprecated: Implicit conversion from float 0.304 to int loses precision in /tmp/tmpbgijg5ga.php
    on line 24


    Deprecated: Implicit conversion from float 1.52 to int loses precision in /tmp/tmpbgijg5ga.php
    on line 24


    Deprecated: Implicit conversion from float 1.04 to i'
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array(\n        'm' => 1000,\n  \
    \      'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1\n    );\n    foreach ($roman_numerals as $roman => $number_in_roman)\
    \ {\n        $matches = intval($number / $number_in_roman);\n        $roman .=\
    \ str_repeat($roman, $matches);\n        $number = $number % $number_in_roman;\n\
    \    }\n    return $roman;\n}\n\n/* Given a string, return a new string with the\
    \ first and last characters\nswapped, except leave the string unchanged if the\
    \ string's length is less\nthan 2.\nExamples:\n>>> front_back('code')\n'eodc'\n\
    >>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0tiqqeb.php:52\n\
    Stack trace:\n#0 /tmp/tmpw0tiqqeb.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpw0tiqqeb.php\
    \ on line 52\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\nand return it in uppercase.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\"XIX\"\n>>>\
    \ int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'M' => 1000,\n        'CM'\
    \ => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n  \
    \      'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $roman .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return strtolower($roman);\n}\n\n/* Given a string of roman\
    \ numerals, return the integer equivalent.\nRestrictions: 1 <= num <= 1000\nExamples:\n\
    >>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>>\
    \ mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string containing a roman numeral, return its integer value.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426 */\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\n/* Given a string, return\
    \ a new string with the first and last characters\nswapped, except leave the string\
    \ unchanged if the string's length is less\nthan 2.\nExamples:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqbbr8_xb.php:52\n\
    Stack trace:\n#0 /tmp/tmpqbbr8_xb.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpqbbr8_xb.php\
    \ on line 52\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'm' => 1000,\n        'cm' => 900,\n       \
    \ 'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'm' => 1000,\n        'cm' => 900,\n       \
    \ 'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $num) {\n  \
    \      $matches = intval($number / $num);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $num;\n    }\n    return $result;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped, except leave the first character in place if it is a non-alphabetic\n\
    character.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n\
    >>> front_back('ab')\n'ba'*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n      \
    \  $matches = intval($number / $num);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n\t$result = '';\n\t$numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n\t$romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x',\
    \ 'ix', 'v', 'iv', 'i'];\n\tfor ($i = 0; $i < count($numbers); $i++) {\n\t\twhile\
    \ ($number >= $numbers[$i]) {\n\t\t\t$result .= $romans[$i];\n\t\t\t$number -=\
    \ $numbers[$i];\n\t\t}\n\t}\n\treturn $result;\n}\n\n/* Given a string containing\
    \ a roman numeral, return its integer equivalent.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\"\
    )\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\nand return it in uppercase.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_maxi_roman(19)\n\"XIX\"\n\
    >>> int_to_maxi_roman(152)\n\"CLII\"\n>>> int_to_maxi_roman(426)\n\"CDXXVI\"*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'M'  => 1000,\n\
    \        'CM' => 900,\n        'D'  => 500,\n        'CD' => 400,\n        'C'\
    \  => 100,\n        'XC' => 90,\n        'L'  => 50,\n        'XL' => 40,\n  \
    \      'X'  => 10,\n        'IX' => 9,\n        'V'  => 5,\n        'IV' => 4,\n\
    \        'I'  => 1);\n    foreach ($roman_numerals as $roman => $num) {\n    \
    \    $matches = intval($number / $num);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $num;\n    }\n    return $result;\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "XIXCLIICDXXVI\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp60c3f7xv.php:43\n\
    Stack trace:\n#0 /tmp/tmp60c3f7xv.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp60c3f7xv.php\
    \ on line 43\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = \"\";\n    $numerals = array(\n        \"m\" => 1000,\n    \
    \    \"d\" => 500,\n        \"c\" => 100,\n        \"l\" => 50,\n        \"x\"\
    \ => 10,\n        \"v\" => 5,\n        \"i\" => 1\n    );\n    foreach ($numerals\
    \ as $numeral => $value) {\n        $roman .= str_repeat($numeral, $number / $value);\n\
    \        $number %= $value;\n    }\n    return $roman;\n}\n\n/* Given a string,\
    \ return a new string with the first and last characters\nswapped.\nExamples:\n\
    >>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n\
    'ba'*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 0.019 to int loses precision\
    \ in /tmp/tmpiss8sp8u.php on line 24\n\nDeprecated: Implicit conversion from float\
    \ 0.038 to int loses precision in /tmp/tmpiss8sp8u.php on line 24\n\nDeprecated:\
    \ Implicit conversion from float 0.19 to int loses precision in /tmp/tmpiss8sp8u.php\
    \ on line 24\n\nDeprecated: Implicit conversion from float 0.38 to int loses precision\
    \ in /tmp/tmpiss8sp8u.php on line 24\n\nDeprecated: Implicit conversion from float\
    \ 1.9 to int loses precision in /tmp/tmpiss8sp8u.php on line 24\n\nDeprecated:\
    \ Implicit conversion from float 1.8 to int loses precision in /tmp/tmpiss8sp8u.php\
    \ on line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiss8sp8u.php:44\n\
    Stack trace:\n#0 /tmp/tmpiss8sp8u.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpiss8sp8u.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n  $roman_numerals = array(\n    'm' => 1000,\n    'cm' => 900,\n    'd' =>\
    \ 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l' => 50,\n \
    \   'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n    'iv' => 4,\n\
    \    'i' => 1,\n  );\n  $result = '';\n  foreach ($roman_numerals as $roman =>\
    \ $int) {\n    $matches = intval($number / $int);\n    $result .= str_repeat($roman,\
    \ $matches);\n    $number = $number % $int;\n  }\n  return $result;\n}\n\n/* Given\
    \ a string, return the first character that is not repeated anywhere in\nthe string.\n\
    For example, given the string \"stress\", return \"t\".\nGiven the string \"moonmen\"\
    , return \"e\".\nExamples:\n>>> first_non_repeating_letter('stress')\n't'\n>>>\
    \ first_non_repeating_letter('moonmen')\n'e'*/\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman_numerals = array(\n\t\t'M' => 1000,\n\t\t'CM' => 900,\n\t\t'D' =>\
    \ 500,\n\t\t'CD' => 400,\n\t\t'C' => 100,\n\t\t'XC' => 90,\n\t\t'L' => 50,\n\t\
    \t'XL' => 40,\n\t\t'X' => 10,\n\t\t'IX' => 9,\n\t\t'V' => 5,\n\t\t'IV' => 4,\n\
    \t\t'I' => 1\n\t);\n\t$result = '';\n\tforeach ($roman_numerals as $roman => $value)\
    \ {\n\t\t$matches = intval($number / $value);\n\t\t$result .= str_repeat($roman,\
    \ $matches);\n\t\t$number = $number % $value;\n\t}\n\treturn $result;\n}\n\n/*\
    \ Given a string, return a new string with the first and last characters\nswapped,\
    \ except leave the first character in place if it is a non-alphabetic\ncharacter.\n\
    Examples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n\
    'ba'\n>>> front_back('aavJ')\n'Java'\n>>> front_back('hello')\n'oellh'*/\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphhzbm624.php:56\n\
    Stack trace:\n#0 /tmp/tmphhzbm624.php(72): test()\n#1 {main}\n  thrown in /tmp/tmphhzbm624.php\
    \ on line 56\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500,\
    \ 900, 1000];\n    $romans = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c',\
    \ 'cd', 'd', 'cm', 'm'];\n    $i = count($numbers) - 1;\n    while ($number >\
    \ 0) {\n        while ($number >= $numbers[$i]) {\n            $number -= $numbers[$i];\n\
    \            $roman .= $romans[$i];\n        }\n        $i--;\n    }\n    return\
    \ $roman;\n}\n\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [\n        'M' => 1000,\n        'CM' =>\
    \ 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n     \
    \   'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n\
    \    ];\n    foreach ($numbers as $key => $value) {\n        while ($number >=\
    \ $value) {\n            $roman .= $key;\n            $number -= $value;\n   \
    \     }\n    }\n    return strtolower($roman);\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $romans = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($romans as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($key, $matches);\n        $number =\
    \ $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n\t$numerals = array(\n\t\t'M' => 1000,\n\t\t'CM' => 900,\n\t\t'D' => 500,\n\
    \t\t'CD' => 400,\n\t\t'C' => 100,\n\t\t'XC' => 90,\n\t\t'L' => 50,\n\t\t'XL' =>\
    \ 40,\n\t\t'X' => 10,\n\t\t'IX' => 9,\n\t\t'V' => 5,\n\t\t'IV' => 4,\n\t\t'I'\
    \ => 1\n\t);\n\t$result = '';\n\tforeach ($numerals as $numeral => $value) {\n\
    \t\twhile ($number >= $value) {\n\t\t\t$result .= $numeral;\n\t\t\t$number -=\
    \ $value;\n\t\t}\n\t}\n\treturn $result;\n}\n\n/* Given a string, return a new\
    \ string with the first and last characters\nswapped.\nExamples:\n>>> front_back('code')\n\
    'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n'ba'*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyni_dt88.php:52\n\
    Stack trace:\n#0 /tmp/tmpyni_dt88.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpyni_dt88.php\
    \ on line 52\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [\n        'M' => 1000,\n        'CM' =>\
    \ 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n     \
    \   'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n\
    \    ];\n    foreach ($numbers as $roman => $int) {\n        $matches = intval($number\
    \ / $int);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $int;\n    }\n    return $result;\n}\n\n/* Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\nand return it in uppercase.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\"XIX\"\n>>>\
    \ int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu21rs_7o.php:52\n\
    Stack trace:\n#0 /tmp/tmpu21rs_7o.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpu21rs_7o.php\
    \ on line 52\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman = array(\n\t\t'M' => 1000,\n\t\t'CM' => 900,\n\t\t'D' => 500,\n\t\
    \t'CD' => 400,\n\t\t'C' => 100,\n\t\t'XC' => 90,\n\t\t'L' => 50,\n\t\t'XL' =>\
    \ 40,\n\t\t'X' => 10,\n\t\t'IX' => 9,\n\t\t'V' => 5,\n\t\t'IV' => 4,\n\t\t'I'\
    \ => 1,\n\t);\n\t$result = '';\n\tforeach ($roman as $key => $value) {\n\t\t$matches\
    \ = intval($number / $value);\n\t\t$result .= str_repeat($key, $matches);\n\t\t\
    $number = $number % $value;\n\t}\n\treturn $result;\n}\n\n/* Given a string, return\
    \ a new string that is the reverse of the original.\nExamples:\n>>> reverse_string(\"\
    Hello World\")\n\"dlroW olleH\"\n>>> reverse_string(\"\")\n\"\"\n>>> reverse_string(\"\
    a\")\n\"a\"*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp18cwj3y3.php:50\n\
    Stack trace:\n#0 /tmp/tmp18cwj3y3.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp18cwj3y3.php\
    \ on line 50\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string, return\
    \ a new string with the first and last characters\nswapped, except under three\
    \ conditions:\nIf the length of the string is less than two, return \"Incompatible.\"\
    .\nIf the argument is not a string, return \"Incompatible.\".\nIf the first and\
    \ last characters are the same, return \"Two's a pair.\".\nExamples:\n>>> flip_end_chars(\"\
    Cat, dog, and mouse.\")\n\".at, dog, and mouseC\"\n>>> flip_end_chars(\"ada\"\
    )\n\"Two's a pair.\"\n>>> flip_end_chars(\"Ada\")\n\"adA\"\n>>> flip_end_chars(\"\
    z\")\n\"Incompatible.\"\n>>> flip_end_chars([1, 2, 3])\n\"Incompatible.\"*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n      \
    \  $matches = intval($number / $num);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $result;\n}\n\n/* Given\
    \ a string containing a roman numeral representation of a positive integer,\n\
    return the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = [\n        'm' => 1000,\n        'd' =>\
    \ 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n        'v'\
    \ => 5,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral => $value)\
    \ {\n        $result .= str_repeat($numeral, (int)($number / $value));\n     \
    \   $number %= $value;\n    }\n    return $result;\n}\n\n/* Given a string containing\
    \ a roman numeral, convert it to an integer and return it.\nRestrictions: 1 <=\
    \ num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp95pbmicm.php:44\n\
    Stack trace:\n#0 /tmp/tmp95pbmicm.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp95pbmicm.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n      \
    \  $matches = intval($number / $num);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'M'  => 1000,\n\
    \        'CM' => 900,\n        'D'  => 500,\n        'CD' => 400,\n        'C'\
    \  => 100,\n        'XC' => 90,\n        'L'  => 50,\n        'XL' => 40,\n  \
    \      'X'  => 10,\n        'IX' => 9,\n        'V'  => 5,\n        'IV' => 4,\n\
    \        'I'  => 1);\n    foreach ($roman_numerals as $roman => $num) {\n    \
    \    $matches = intval($number / $num);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $num;\n    }\n    return $result;\n\
    }\n\n/* Given a string representing a roman numeral, return its integer value.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp38rkto0n.php:50\n\
    Stack trace:\n#0 /tmp/tmp38rkto0n.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp38rkto0n.php\
    \ on line 50\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [\n        1000 => 'm',\n        900 =>\
    \ 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n    \
    \    90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n\
    \        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n\
    \    ];\n    foreach ($numbers as $key => $value) {\n        while ($number >=\
    \ $key) {\n            $roman .= $value;\n            $number -= $key;\n     \
    \   }\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $romans = array(\n        'M' => 1000,\n        'CM'\
    \ => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n  \
    \      'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n\
    \    );\n    foreach ($romans as $roman => $int) {\n        $matches = intval($number\
    \ / $int);\n        $result .= str_repeat($roman, $matches);\n        $number\
    \ = $number % $int;\n    }\n    return $result;\n}\n\n/* Given a string, return\
    \ the first letter of each word in the string,\ncapitalized and in the same order\
    \ as the original string.\nRestrictions:\n- The string will not be empty.\n- The\
    \ string will not contain any numbers.\n- The string will not contain any punctuation\
    \ besides spaces and hyphens.\n- The string will contain nothing but words, spaces,\
    \ and hyphens.\nExamples:\n>>> first_letters(\"Hello world\")\n\"HW\"\n>>> first_letters(\"\
    A b c d-e-f%g\")\n\"AbCdEfG\"\n>>> first_letters(\"What's up, doc?\")\n\"WUD\"\
    */\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjn9__rj4.php:56\n\
    Stack trace:\n#0 /tmp/tmpjn9__rj4.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpjn9__rj4.php\
    \ on line 56\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n    \
    \    'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n\
    \        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' =>\
    \ 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n    $result\
    \ = '';\n    foreach ($numerals as $roman => $arabic) {\n        $result .= str_repeat($roman,\
    \ $number / $arabic);\n        $number %= $arabic;\n    }\n    return $result;\n\
    }\n\n/* Given a string, return a new string that is the reverse of the original.\n\
    Examples:\n>>> reverse_string(\"hello\")\n\"olleh\"\n>>> reverse_string(\"world\"\
    )\n\"dlrow\"\n>>> reverse_string(\"\")\n\"\"*/\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmprdsu14se.php
    on line 30


    Deprecated: Implicit conversion from float 0.021111111111111112 to int loses precision
    in /tmp/tmprdsu14se.php on line 30


    Deprecated: Implicit conversion from float 0.038 to int loses precision in /tmp/tmprdsu14se.php
    on line 30


    Deprecated: Implicit conversion from float 0.0475 to int loses precision in /tmp/tmprdsu14se.php
    on line 30


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmprdsu14se.php
    on line 30


    Deprecated: Implicit conversion from float 0.2111111111111111 to int loses precision
    in /tmp/tmprdsu14se.php on line 30


    Deprecated: Implicit conversion from float 0.38 to int loses precision in /tmp/tmprdsu14se.php
    on line 30


    Deprecated: Implicit conversion from float 0.475 to int loses precision in /tmp/tmprdsu14se.php
    on line 30


    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmprdsu14se.php
    on line 30


    Deprecated: Implicit conve'
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        $result\
    \ .= str_repeat($numeral, $number / $value);\n        $number %= $value;\n   \
    \ }\n    return $result;\n}\n\n/* Given a string containing a roman numeral, return\
    \ its integer value.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpt8l7j2w5.php
    on line 30


    Deprecated: Implicit conversion from float 0.021111111111111112 to int loses precision
    in /tmp/tmpt8l7j2w5.php on line 30


    Deprecated: Implicit conversion from float 0.038 to int loses precision in /tmp/tmpt8l7j2w5.php
    on line 30


    Deprecated: Implicit conversion from float 0.0475 to int loses precision in /tmp/tmpt8l7j2w5.php
    on line 30


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpt8l7j2w5.php
    on line 30


    Deprecated: Implicit conversion from float 0.2111111111111111 to int loses precision
    in /tmp/tmpt8l7j2w5.php on line 30


    Deprecated: Implicit conversion from float 0.38 to int loses precision in /tmp/tmpt8l7j2w5.php
    on line 30


    Deprecated: Implicit conversion from float 0.475 to int loses precision in /tmp/tmpt8l7j2w5.php
    on line 30


    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpt8l7j2w5.php
    on line 30


    Deprecated: Implicit conve'
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman_numerals = array(\n\t\t'M'  => 1000,\n\t\t'CM' => 900,\n\t\t'D'\
    \  => 500,\n\t\t'CD' => 400,\n\t\t'C'  => 100,\n\t\t'XC' => 90,\n\t\t'L'  => 50,\n\
    \t\t'XL' => 40,\n\t\t'X'  => 10,\n\t\t'IX' => 9,\n\t\t'V'  => 5,\n\t\t'IV' =>\
    \ 4,\n\t\t'I'  => 1\n\t);\n\t$result = '';\n\tforeach ($roman_numerals as $roman\
    \ => $int) {\n\t\t$matches = intval($number / $int);\n\t\t$result .= str_repeat($roman,\
    \ $matches);\n\t\t$number = $number % $int;\n\t}\n\treturn $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "XIXCLIICDXXVI\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyz8fp81z.php:44\n\
    Stack trace:\n#0 /tmp/tmpyz8fp81z.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpyz8fp81z.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x',\
    \ 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n   \
    \     while ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n\
    }\n\n/* Given a string of roman numerals, return the integer equivalent.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array(\n        'M' => 1000,\n  \
    \      'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' =>\
    \ 100,\n        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n       \
    \ 'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n    \
    \    'I' => 1\n    );\n    foreach ($roman_numerals as $key => $value) {\n   \
    \     $matches = intval($number / $value);\n        $roman .= str_repeat($key,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $roman;\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "XIXCLIICDXXVI\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz9jwwmux.php:44\n\
    Stack trace:\n#0 /tmp/tmpz9jwwmux.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpz9jwwmux.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'M'  => 1000,\n        'CM' => 900,\n\
    \        'D'  => 500,\n        'CD' => 400,\n        'C'  => 100,\n        'XC'\
    \ => 90,\n        'L'  => 50,\n        'XL' => 40,\n        'X'  => 10,\n    \
    \    'IX' => 9,\n        'V'  => 5,\n        'IV' => 4,\n        'I'  => 1);\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n      \
    \  $matches = intval($number / $num);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $result;\n}\n\n/* Given\
    \ a string, return a new string that is the reverse of the original.\nExamples:\n\
    >>> reverse_string(\"hello\")\n\"olleh\"\n>>> reverse_string(\"world\")\n\"dlrow\"\
    \n>>> reverse_string(\"a\")\n\"a\"\n>>> reverse_string(\"\")\n\"\"*/\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphj6datye.php:51\n\
    Stack trace:\n#0 /tmp/tmphj6datye.php(67): test()\n#1 {main}\n  thrown in /tmp/tmphj6datye.php\
    \ on line 51\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [\n        'M'  => 1000,\n        'CM' =>\
    \ 900,\n        'D'  => 500,\n        'CD' => 400,\n        'C'  => 100,\n   \
    \     'XC' => 90,\n        'L'  => 50,\n        'XL' => 40,\n        'X'  => 10,\n\
    \        'IX' => 9,\n        'V'  => 5,\n        'IV' => 4,\n        'I'  => 1\n\
    \    ];\n    foreach ($numbers as $key => $value) {\n        while ($number >=\
    \ $value) {\n            $roman .= $key;\n            $number -= $value;\n   \
    \     }\n    }\n    return strtolower($roman);\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 3999\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string containing a roman numeral, return its integer value.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $result .= str_repeat($key,\
    \ (int)($number / $value));\n        $number %= $value;\n    }\n    return $result;\n\
    }\n\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "XIXCLIICDXXVI\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbmstoaaf.php:44\n\
    Stack trace:\n#0 /tmp/tmpbmstoaaf.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpbmstoaaf.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x',\
    \ 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n   \
    \     while ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n\
    }\necho int_to_mini_roman(19);\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xix
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $roman .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return $roman;\n}\n\necho int_to_mini_roman(19);\necho\
    \ int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = \"\";\n    $num = array(1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1);\n    $rom = array(\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\");\n    for ($i = 0; $i <\
    \ count($num); $i++) {\n        while ($number >= $num[$i]) {\n            $number\
    \ -= $num[$i];\n            $roman .= $rom[$i];\n        }\n    }\n    return\
    \ $roman;\n}\n\n/* Given a string, return a new string with the first and last\
    \ characters\nswapped.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n\
    'a'\n>>> front_back('ab')\n'ba'*/\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n      \
    \  $matches = intval($number / $num);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $result;\n}\n\n/* Given\
    \ a string containing a roman numeral representation of a positive integer,\n\
    return the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1\n    );\n    foreach ($roman_numerals as $key => $value) {\n   \
    \     while ($number >= $value) {\n            $result .= $key;\n            $number\
    \ -= $value;\n        }\n    }\n    return $result;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'd'\
    \ => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n     \
    \   'v' => 5,\n        'i' => 1\n    );\n    foreach ($numerals as $key => $value)\
    \ {\n        $roman .= str_repeat($key, floor($number / $value));\n        $number\
    \ %= $value;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\necho\
    \ int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "xviiiicliiccccxxvi\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcs03x5an.php:37\n\
    Stack trace:\n#0 /tmp/tmpcs03x5an.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpcs03x5an.php\
    \ on line 37\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\necho int_to_mini_roman(19);\n\
    echo '<br>';\necho int_to_mini_roman(152);\necho '<br>';\necho int_to_mini_roman(426);\n\
    echo '<br>';\necho int_to_mini_roman(3999);\necho '<br>';\necho int_to_mini_roman(1);\n\
    echo '<br>';\necho int_to_mini_roman(1000);\necho '<br>';\necho int_to_mini_roman(999);\n\
    echo '<br>';\necho int_to_mini_roman(500);\necho '<br>';\necho int_to_mini_roman(400);\n\
    echo '<br>';\necho int_to_mini_roman(100);\necho '<br>';\necho int_to_mini_roman(90);\n\
    echo '<br>';\necho int_to_mini_roman(50);\necho '<br>';\necho int_to_mini_roman(40);\n\
    echo '<br>';\necho int_to_mini_roman(10);\necho '<br>';\necho int_to_mini_roman(9);\n\
    echo '<br>';\necho int_to_mini_roman(5);\necho '<br>';\necho int_to_mini_roman(4);\n\
    echo '<br>';\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "XIX<br>CLII<br>CDXXVI<br>MMMCMXCIX<br>I<br>M<br>CMXCIX<br>D<br>CD<br>C<br>XC<br>L<br>XL<br>X<br>IX<br>V<br>IV<br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmppbdb6_jm.php:76\nStack\
    \ trace:\n#0 /tmp/tmppbdb6_jm.php(92): test()\n#1 {main}\n  thrown in /tmp/tmppbdb6_jm.php\
    \ on line 76\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n\t$result = '';\n\t$numerals = array(\n\t\t'M' => 1000,\n\t\t'D' => 500,\n\
    \t\t'C' => 100,\n\t\t'L' => 50,\n\t\t'X' => 10,\n\t\t'V' => 5,\n\t\t'I' => 1\n\
    \t);\n\tforeach ($numerals as $numeral => $value) {\n\t\t$result .= str_repeat($numeral,\
    \ floor($number / $value));\n\t\t$number %= $value;\n\t}\n\t$result = str_replace(array('DCCCC',\
    \ 'CCCC', 'LXXXX', 'XXXX', 'VIIII', 'IIII'),\n\t\tarray('CM', 'CD', 'XC', 'XL',\
    \ 'IX', 'IV'), $result);\n\treturn strtolower($result);\n}\n\n/* Given a string\
    \ of roman numerals, return the integer equivalent.\nRestrictions: 1 <= num <=\
    \ 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [\n        1000 => 'm',\n        900 =>\
    \ 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n    \
    \    90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n\
    \        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n\
    \    ];\n    foreach ($numbers as $key => $value) {\n        while ($number >=\
    \ $key) {\n            $result .= $value;\n            $number -= $key;\n    \
    \    }\n    }\n    return $result;\n}\n\n/* Given a string containing a roman\
    \ numeral, return its integer equivalent.\nRestrictions: 1 <= num <= 1000\nExamples:\n\
    >>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>>\
    \ mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = [\n        'm' => 1000,\n        'cm' => 900,\n        'd'\
    \ => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc' => 90,\n  \
    \      'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n        'ix' => 9,\n\
    \        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    ];\n    $result\
    \ = '';\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $result .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return $result;\n}\n\n/* Given a string containing a roman\
    \ numeral representation of a positive integer,\nreturn the integer.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n\
    \        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' =>\
    \ 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i'\
    \ => 1,\n    );\n    foreach ($numerals as $numeral => $value) {\n        while\
    \ ($number >= $value) {\n            $result .= $numeral;\n            $number\
    \ -= $value;\n        }\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "XIXCLIICDXXVI\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwnwpbyzy.php:44\n\
    Stack trace:\n#0 /tmp/tmpwnwpbyzy.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpwnwpbyzy.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n      \
    \  $matches = intval($number / $num);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $result;\n}\n\n/* Given\
    \ a string, return a new string with the first and last characters\nswapped, except\
    \ leave the first character in place if it is a non-alphabetic\ncharacter.\nExamples:\n\
    >>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n\
    'ba'\n>>> front_back('aavj')\n'java'\n>>> front_back('hello')\n'oellh'*/\nfunction\
    \ candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = array(1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1);\n    $romans = array('m', 'cm', 'd', 'cd', 'c', 'xc', 'l',\
    \ 'xl', 'x', 'ix', 'v', 'iv', 'i');\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string representing a roman numeral, return the integer equivalent.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string, return the string with all vowels removed.\nRestrictions:\
    \ only lowercase letters, no spaces\nExamples:\n>>> remove_vowels(\"hello\")\n\
    \"hll\"\n>>> remove_vowels(\"why are you asking me this\")\n\"why r y skng m ths\"\
    \n>>> remove_vowels(\"aeiou\")\n\"\"*/\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [\n        'M'  => 1000,\n        'CM' =>\
    \ 900,\n        'D'  => 500,\n        'CD' => 400,\n        'C'  => 100,\n   \
    \     'XC' => 90,\n        'L'  => 50,\n        'XL' => 40,\n        'X'  => 10,\n\
    \        'IX' => 9,\n        'V'  => 5,\n        'IV' => 4,\n        'I'  => 1\n\
    \    ];\n    foreach ($numbers as $key => $value) {\n        while ($number >=\
    \ $value) {\n            $roman .= $key;\n            $number -= $value;\n   \
    \     }\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\necho '<br>';\n\
    echo int_to_mini_roman(152);\necho '<br>';\necho int_to_mini_roman(426);\necho\
    \ '<br>';\necho int_to_mini_roman(999);\necho '<br>';\necho int_to_mini_roman(1000);\n\
    echo '<br>';\necho int_to_mini_roman(1001);\necho '<br>';\necho int_to_mini_roman(1002);\n\
    echo '<br>';\necho int_to_mini_roman(1003);\necho '<br>';\necho int_to_mini_roman(1004);\n\
    echo '<br>';\necho int_to_mini_roman(1005);\necho '<br>';\necho int_to_mini_roman(1006);\n\
    echo '<br>';\necho int_to_mini_roman(1007);\necho '<br>';\necho int_to_mini_roman(1008);\n\
    echo '<br>';\necho int_to_mini_roman(1009);\necho '<br>';\necho int_to_mini_roman(1010);\n\
    echo '<br>';\necho int_to_mini_roman(1011);\necho '<br>';\necho int_to_mini_roman(1012);\n\
    echo\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpfh_dxotx.php on line 71

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x',\
    \ 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n   \
    \     while ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n\
    }\n\n/* Given a string of roman numerals, return the integer equivalent.\nRestrictions:\
    \ 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'd'\
    \ => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n     \
    \   'v' => 5,\n        'i' => 1\n    );\n    foreach ($numerals as $key => $value)\
    \ {\n        $roman .= str_repeat($key, floor($number / $value));\n        $number\
    \ %= $value;\n    }\n    return $roman;\n}\n\n/* Given a string representing a\
    \ roman numeral, return the integer equivalent.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\"\
    )\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjip8n91o.php:44\n\
    Stack trace:\n#0 /tmp/tmpjip8n91o.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpjip8n91o.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x',\
    \ 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n   \
    \     while ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n\
    }\n\n/* Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    and return it in uppercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\
    \"XIX\"\n>>> int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1\n    );\n    foreach ($roman_numerals as $key => $value) {\n   \
    \     while ($number >= $value) {\n            $result .= $key;\n            $number\
    \ -= $value;\n        }\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1];\n  $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix',\
    \ 'v', 'iv', 'i'];\n  for ($i = 0; $i < count($numbers); $i++) {\n    while ($number\
    \ >= $numbers[$i]) {\n      $roman .= $romans[$i];\n      $number -= $numbers[$i];\n\
    \    }\n  }\n  return $roman;\n}\n\n/* Given a string containing a roman numeral\
    \ representation of a positive integer,\nreturn the integer.\nRestrictions: 1\
    \ <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"\
    clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x',\
    \ 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n   \
    \     while ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped, except leave the string unchanged if the string's length is less\nthan\
    \ 2.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>>\
    \ front_back('ab')\n'ba'*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = [\n        'm' => 1000,\n        'd' =>\
    \ 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n        'v'\
    \ => 5,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral => $value)\
    \ {\n        $result .= str_repeat($numeral, floor($number / $value));\n     \
    \   $number %= $value;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "xviiiicliiccccxxvi\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9t0ul57m.php:37\n\
    Stack trace:\n#0 /tmp/tmp9t0ul57m.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp9t0ul57m.php\
    \ on line 37\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n\t$roman = '';\n\t$roman_numerals = array(\n\t\t'M'  => 1000,\n\t\t'CM' =>\
    \ 900,\n\t\t'D'  => 500,\n\t\t'CD' => 400,\n\t\t'C'  => 100,\n\t\t'XC' => 90,\n\
    \t\t'L'  => 50,\n\t\t'XL' => 40,\n\t\t'X'  => 10,\n\t\t'IX' => 9,\n\t\t'V'  =>\
    \ 5,\n\t\t'IV' => 4,\n\t\t'I'  => 1\n\t);\n\tforeach ($roman_numerals as $roman\
    \ => $num) {\n\t\t$matches = intval($number / $num);\n\t\t$roman .= str_repeat($roman,\
    \ $matches);\n\t\t$number = $number % $num;\n\t}\n\treturn $roman;\n}\n\n/* Given\
    \ a positive integer, obtain its roman numeral equivalent as a string,\nand return\
    \ it in uppercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\
    \"XIX\"\n>>> int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkmr03q6h.php:52\n\
    Stack trace:\n#0 /tmp/tmpkmr03q6h.php(68): test()\n#1 {main}\n  thrown in /tmp/tmpkmr03q6h.php\
    \ on line 52\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $int) {\n      \
    \  $matches = intval($number / $int);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $int;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman_numerals = array(\n        'm' => 1000,\n        'cm' => 900,\n\
    \        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n        'xc'\
    \ => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n      \
    \  'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n    );\n\
    \    $result = '';\n    foreach ($roman_numerals as $roman => $num) {\n      \
    \  $matches = intval($number / $num);\n        $result .= str_repeat($roman, $matches);\n\
    \        $number = $number % $num;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $numerals = array(\n    'm' => 1000,\n    'd' => 500,\n\
    \    'c' => 100,\n    'l' => 50,\n    'x' => 10,\n    'v' => 5,\n    'i' => 1\n\
    \  );\n  foreach ($numerals as $key => $value) {\n    $roman .= str_repeat($key,\
    \ floor($number / $value));\n    $number %= $value;\n  }\n  return $roman;\n}\n\
    \n/* Given a string containing a roman numeral in lowercase, convert it to an\n\
    integer and return it.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"\
    xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\"\
    )\n426*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptud_l76n.php:45\n\
    Stack trace:\n#0 /tmp/tmptud_l76n.php(61): test()\n#1 {main}\n  thrown in /tmp/tmptud_l76n.php\
    \ on line 45\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = [\n        'm' => 1000,\n        'd' =>\
    \ 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n        'v'\
    \ => 5,\n        'i' => 1\n    ];\n    foreach ($numerals as $numeral => $value)\
    \ {\n        $roman .= str_repeat($numeral, intval($number / $value));\n     \
    \   $number %= $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral, return its integer equivalent.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\"\
    )\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3r7t_qq9.php:44\n\
    Stack trace:\n#0 /tmp/tmp3r7t_qq9.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp3r7t_qq9.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $result .= str_repeat($key,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $result;\n\
    }\n\necho int_to_mini_roman(19);\necho \"\\n\";\necho int_to_mini_roman(152);\n\
    echo \"\\n\";\necho int_to_mini_roman(426);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmptaghmwye.php
    on line 30


    Deprecated: Implicit conversion from float 0.021111111111111112 to int loses precision
    in /tmp/tmptaghmwye.php on line 30


    Deprecated: Implicit conversion from float 0.038 to int loses precision in /tmp/tmptaghmwye.php
    on line 30


    Deprecated: Implicit conversion from float 0.0475 to int loses precision in /tmp/tmptaghmwye.php
    on line 30


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmptaghmwye.php
    on line 30


    Deprecated: Implicit conversion from float 0.2111111111111111 to int loses precision
    in /tmp/tmptaghmwye.php on line 30


    Deprecated: Implicit conversion from float 0.38 to int loses precision in /tmp/tmptaghmwye.php
    on line 30


    Deprecated: Implicit conversion from float 0.475 to int loses precision in /tmp/tmptaghmwye.php
    on line 30


    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmptaghmwye.php
    on line 30

    XIX


    Deprecated: Implicit c'
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = \"\";\n    $roman_numerals = array(\n        'M'  => 1000,\n\
    \        'CM' => 900,\n        'D'  => 500,\n        'CD' => 400,\n        'C'\
    \  => 100,\n        'XC' => 90,\n        'L'  => 50,\n        'XL' => 40,\n  \
    \      'X'  => 10,\n        'IX' => 9,\n        'V'  => 5,\n        'IV' => 4,\n\
    \        'I'  => 1\n    );\n    foreach ($roman_numerals as $key => $value) {\n\
    \        $matches = intval($number / $value);\n        $roman .= str_repeat($key,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $roman;\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "XIXCLIICDXXVI\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph3cs8hc4.php:44\n\
    Stack trace:\n#0 /tmp/tmph3cs8hc4.php(60): test()\n#1 {main}\n  thrown in /tmp/tmph3cs8hc4.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral representation of a positive integer,\nreturn the integer.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $numerals = array(\n        'M' => 1000,\n        'CM' => 900,\n    \
    \    'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result\
    \ = '';\n    foreach ($numerals as $numeral => $value) {\n        while ($number\
    \ >= $value) {\n            $result .= $numeral;\n            $number -= $value;\n\
    \        }\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "XIXCLIICDXXVI\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyczrx27j.php:45\n\
    Stack trace:\n#0 /tmp/tmpyczrx27j.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpyczrx27j.php\
    \ on line 45\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array(\n        'm' => 1000,\n  \
    \      'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1\n    );\n    foreach ($roman_numerals as $key => $value) {\n   \
    \     $matches = intval($number / $value);\n        $roman .= str_repeat($key,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $roman;\n\
    }\necho int_to_mini_roman(19);\necho \"\\n\";\necho int_to_mini_roman(152);\n\
    echo \"\\n\";\necho int_to_mini_roman(426);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'xix

    clii

    cdxxvi

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'd' => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n \
    \       'v' => 5,\n        'i' => 1\n    );\n    foreach ($numerals as $numeral\
    \ => $value) {\n        $result .= str_repeat($numeral, $number / $value);\n \
    \       $number %= $value;\n    }\n    return $result;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmpsh55y6_b.php
    on line 24


    Deprecated: Implicit conversion from float 0.038 to int loses precision in /tmp/tmpsh55y6_b.php
    on line 24


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmpsh55y6_b.php
    on line 24


    Deprecated: Implicit conversion from float 0.38 to int loses precision in /tmp/tmpsh55y6_b.php
    on line 24


    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmpsh55y6_b.php
    on line 24


    Deprecated: Implicit conversion from float 1.8 to int loses precision in /tmp/tmpsh55y6_b.php
    on line 24

    xviiii

    Deprecated: Implicit conversion from float 0.152 to int loses precision in /tmp/tmpsh55y6_b.php
    on line 24


    Deprecated: Implicit conversion from float 0.304 to int loses precision in /tmp/tmpsh55y6_b.php
    on line 24


    Deprecated: Implicit conversion from float 1.52 to int loses precision in /tmp/tmpsh55y6_b.php
    on line 24


    Deprecated: Implicit conversion from float 1.04 to i'
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'd'\
    \ => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n     \
    \   'v' => 5,\n        'i' => 1\n    );\n    foreach ($numerals as $numeral =>\
    \ $value) {\n        $roman .= str_repeat($numeral, $number / $value);\n     \
    \   $number %= $value;\n    }\n    return $roman;\n}\n\n/* Given a string containing\
    \ a roman numeral, return its integer equivalent.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\"\
    )\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 0.019 to int loses precision\
    \ in /tmp/tmpcc_lgyzc.php on line 24\n\nDeprecated: Implicit conversion from float\
    \ 0.038 to int loses precision in /tmp/tmpcc_lgyzc.php on line 24\n\nDeprecated:\
    \ Implicit conversion from float 0.19 to int loses precision in /tmp/tmpcc_lgyzc.php\
    \ on line 24\n\nDeprecated: Implicit conversion from float 0.38 to int loses precision\
    \ in /tmp/tmpcc_lgyzc.php on line 24\n\nDeprecated: Implicit conversion from float\
    \ 1.9 to int loses precision in /tmp/tmpcc_lgyzc.php on line 24\n\nDeprecated:\
    \ Implicit conversion from float 1.8 to int loses precision in /tmp/tmpcc_lgyzc.php\
    \ on line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcc_lgyzc.php:44\n\
    Stack trace:\n#0 /tmp/tmpcc_lgyzc.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpcc_lgyzc.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [\n        1000 => 'm',\n        900 =>\
    \ 'cm',\n        500 => 'd',\n        400 => 'cd',\n        100 => 'c',\n    \
    \    90 => 'xc',\n        50 => 'l',\n        40 => 'xl',\n        10 => 'x',\n\
    \        9 => 'ix',\n        5 => 'v',\n        4 => 'iv',\n        1 => 'i'\n\
    \    ];\n    foreach ($numbers as $key => $value) {\n        while ($number >=\
    \ $key) {\n            $roman .= $value;\n            $number -= $key;\n     \
    \   }\n    }\n    return $roman;\n}\n\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\n\
    echo int_to_mini_roman(426);\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = [\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    ];\n    foreach ($numerals as $numeral => $value) {\n        $result .= str_repeat($numeral,\
    \ (int)($number / $value));\n        $number %= $value;\n    }\n    return $result;\n\
    }\n\n/* Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    and return it in uppercase.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\
    \"XIX\"\n>>> int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1\n    );\n    foreach ($roman_numerals as $roman => $int) {\n   \
    \     $matches = intval($number / $int);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $int;\n    }\n    return $result;\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "XIXCLIICDXXVI\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp17wnnc0w.php:45\n\
    Stack trace:\n#0 /tmp/tmp17wnnc0w.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp17wnnc0w.php\
    \ on line 45\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x',\
    \ 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n   \
    \     while ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped, except leave the string unchanged if the string's length is less\nthan\
    \ 2.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>>\
    \ front_back('ab')\n'ba'*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $roman_numerals = array(\n        'm' => 1000,\n  \
    \      'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1\n    );\n    foreach ($roman_numerals as $key => $value) {\n   \
    \     $matches = intval($number / $value);\n        $roman .= str_repeat($key,\
    \ $matches);\n        $number = $number % $value;\n    }\n    return $roman;\n\
    }\n\necho int_to_mini_roman(19) . \"\\n\";\necho int_to_mini_roman(152) . \"\\\
    n\";\necho int_to_mini_roman(426) . \"\\n\";\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'xix

    clii

    cdxxvi

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [\n        'M' => 1000,\n        'CM' =>\
    \ 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n     \
    \   'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n\
    \        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n\
    \    ];\n    foreach ($numbers as $roman => $int) {\n        $matches = intval($number\
    \ / $int);\n        $roman .= str_repeat($roman, $matches);\n        $number =\
    \ $number % $int;\n    }\n    return $roman;\n}\n\n/* Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\nand return it in uppercase.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\"XIX\"\n>>>\
    \ int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8n2b2umq.php:52\n\
    Stack trace:\n#0 /tmp/tmp8n2b2umq.php(68): test()\n#1 {main}\n  thrown in /tmp/tmp8n2b2umq.php\
    \ on line 52\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numerals = array(\n        'm' => 1000,\n       \
    \ 'd' => 500,\n        'c' => 100,\n        'l' => 50,\n        'x' => 10,\n \
    \       'v' => 5,\n        'i' => 1\n    );\n    foreach ($numerals as $numeral\
    \ => $value) {\n        $result .= str_repeat($numeral, intval($number / $value));\n\
    \        $number %= $value;\n    }\n    return $result;\n}\n\n/* Given a string,\
    \ return a new string with the first and last characters\nswapped.\nExamples:\n\
    >>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>> front_back('ab')\n\
    'ba'*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp57o6cf7l.php:44\n\
    Stack trace:\n#0 /tmp/tmp57o6cf7l.php(60): test()\n#1 {main}\n  thrown in /tmp/tmp57o6cf7l.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = \"\";\n    $number = (int)$number;\n    if ($number < 1 || $number\
    \ > 1000) {\n        return \"Invalid number\";\n    }\n    while ($number >=\
    \ 1000) {\n        $roman .= \"m\";\n        $number -= 1000;\n    }\n    while\
    \ ($number >= 900) {\n        $roman .= \"cm\";\n        $number -= 900;\n   \
    \ }\n    while ($number >= 500) {\n        $roman .= \"d\";\n        $number -=\
    \ 500;\n    }\n    while ($number >= 400) {\n        $roman .= \"cd\";\n     \
    \   $number -= 400;\n    }\n    while ($number >= 100) {\n        $roman .= \"\
    c\";\n        $number -= 100;\n    }\n    while ($number >= 90) {\n        $roman\
    \ .= \"xc\";\n        $number -= 90;\n    }\n    while ($number >= 50) {\n   \
    \     $roman .= \"l\";\n        $number -= 50;\n    }\n    while ($number >= 40)\
    \ {\n        $roman .= \"xl\";\n        $number -= 40;\n    }\n    while ($number\
    \ >= 10) {\n        $roman .= \"x\";\n        $number -= 10;\n    }\n    while\
    \ ($number >= 9) {\n        $roman .= \"ix\";\n        $number -= 9;\n    }\n\
    \    while ($number >= 5) {\n        $roman .= \"v\";\n        $number -= 5;\n\
    \    }\n    while ($number >= 4) {\n        $roman .= \"iv\";\n        $number\
    \ -= 4;\n    }\n    while ($number >= 1) {\n        $roman .= \"i\";\n       \
    \ $number -= 1;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\necho\
    \ \"<br>\";\necho int_to_mini_roman(152);\necho \"<br>\";\necho int_to_mini_roman(426);\n\
    echo \"<br>\";\necho int_to_mini_roman(0);\necho \"<br>\";\necho int_to_mini_roman(1001);\n\
    echo \"<br>\";\necho int_to_mini\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpvbzl2ouo.php on line 83

    '
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = \"\";\n    $numerals = array(\n        'M' => 1000,\n      \
    \  'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n\
    \        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' =>\
    \ 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I'\
    \ => 1\n    );\n    foreach ($numerals as $key => $value) {\n        while ($number\
    \ >= $value) {\n            $roman .= $key;\n            $number -= $value;\n\
    \        }\n    }\n    return strtolower($roman);\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: xixcliicdxxvi
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string representing a roman numeral, return the integer equivalent.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> mini_roman_to_int(\"xix\")\n19\n\
    >>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"cdxxvi\")\n426*/\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\nand return it in uppercase.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\"XIX\"\n>>>\
    \ int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'm' => 1000,\n \
    \       'cm' => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' =>\
    \ 100,\n        'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n       \
    \ 'x' => 10,\n        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n    \
    \    'i' => 1,\n    );\n    foreach ($roman_numerals as $roman => $num) {\n  \
    \      $matches = intval($number / $num);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $num;\n    }\n    return $result;\n\
    }\n\n/* Given a string containing a roman numeral representation of a positive\
    \ integer,\nreturn the integer.\nRestrictions: 1 <= num <= 3999\nExamples:\n>>>\
    \ mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"\
    cdxxvi\")\n426*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $map = [\n        'M' => 1000,\n        'CM' => 900,\n\
    \        'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC'\
    \ => 90,\n        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n      \
    \  'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    ];\n\
    \    foreach ($map as $roman => $int) {\n        $matches = intval($number / $int);\n\
    \        $result .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $int;\n    }\n    return $result;\n}\n\n/* Given a string of roman numerals,\
    \ return the integer equivalent.\nRestrictions: 1 <= num <= 1000\nExamples:\n\
    >>> mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>>\
    \ mini_roman_to_int(\"cdxxvi\")\n426*/\nfunction candidate(...$args) {\n    return\
    \ int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if (candidate(19)\
    \ !== \"xix\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(152)\
    \ !== \"clii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(251)\
    \ !== \"ccli\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(426)\
    \ !== \"cdxxvi\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(500)\
    \ !== \"d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== \"i\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== \"iv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(43)\
    \ !== \"xliii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(90)\
    \ !== \"xc\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(94)\
    \ !== \"xciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(532)\
    \ !== \"dxxxii\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(900)\
    \ !== \"cm\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(994)\
    \ !== \"cmxciv\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000)\
    \ !== \"m\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ezymdy9.php:51\n\
    Stack trace:\n#0 /tmp/tmp3ezymdy9.php(67): test()\n#1 {main}\n  thrown in /tmp/tmp3ezymdy9.php\
    \ on line 51\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $roman_numerals = array(\n        'M' => 1000,\n \
    \       'CM' => 900,\n        'D' => 500,\n        'CD' => 400,\n        'C' =>\
    \ 100,\n        'XC' => 90,\n        'L' => 50,\n        'XL' => 40,\n       \
    \ 'X' => 10,\n        'IX' => 9,\n        'V' => 5,\n        'IV' => 4,\n    \
    \    'I' => 1\n    );\n    foreach ($roman_numerals as $roman => $num) {\n   \
    \     $matches = intval($number / $num);\n        $result .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $num;\n    }\n    return $result;\n\
    }\necho int_to_mini_roman(19);\necho int_to_mini_roman(152);\necho int_to_mini_roman(426);\n\
    function candidate(...$args) {\n    return int_to_mini_roman(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "XIXCLIICDXXVI\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvi334ftl.php:44\n\
    Stack trace:\n#0 /tmp/tmpvi334ftl.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpvi334ftl.php\
    \ on line 44\n"
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = \"\";\n    $roman_numerals = array(\n        'M'  => 1000,\n\
    \        'CM' => 900,\n        'D'  => 500,\n        'CD' => 400,\n        'C'\
    \  => 100,\n        'XC' => 90,\n        'L'  => 50,\n        'XL' => 40,\n  \
    \      'X'  => 10,\n        'IX' => 9,\n        'V'  => 5,\n        'IV' => 4,\n\
    \        'I'  => 1);\n    foreach ($roman_numerals as $roman => $number_in_roman){\n\
    \        $matches = intval($number / $number_in_roman);\n        $roman .= str_repeat($roman,\
    \ $matches);\n        $number = $number % $number_in_roman;\n    }\n    return\
    \ $roman;\n}\necho int_to_mini_roman(19);\necho \"<br>\";\necho int_to_mini_roman(152);\n\
    echo \"<br>\";\necho int_to_mini_roman(426);\necho \"<br>\";\necho int_to_mini_roman(999);\n\
    echo \"<br>\";\necho int_to_mini_roman(1000);\necho \"<br>\";\necho int_to_mini_roman(1001);\n\
    echo \"<br>\";\necho int_to_mini_roman(1002);\necho \"<br>\";\necho int_to_mini_roman(1003);\n\
    echo \"<br>\";\necho int_to_mini_roman(1004);\necho \"<br>\";\necho int_to_mini_roman(1005);\n\
    echo \"<br>\";\necho int_to_mini_roman(1006);\necho \"<br>\";\necho int_to_mini_roman(1007);\n\
    echo \"<br>\";\necho int_to_mini_roman(1008);\necho \"<br>\";\necho int_to_mini_roman(1009);\n\
    echo \"<br>\";\necho int_to_mini_roman(1010);\necho \"<br>\";\necho int_to_mini_roman(1011);\n\
    echo \"<br>\";\necho int_\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpw4lfu2z4.php on line 68

    '
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = array(\n        'M' => 1000,\n        'CM' => 900,\n       \
    \ 'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1\n    );\n    $result\
    \ = '';\n    foreach ($roman as $key => $value) {\n        $result .= str_repeat($key,\
    \ $number / $value);\n        $number %= $value;\n    }\n    return $result;\n\
    }\n\n/* Given a string containing a roman numeral representation of a positive\
    \ integer,\nreturn the integer.\nRestrictions: 1 <= num <= 1000\nExamples:\n>>>\
    \ mini_roman_to_int(\"xix\")\n19\n>>> mini_roman_to_int(\"clii\")\n152\n>>> mini_roman_to_int(\"\
    cdxxvi\")\n426*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Deprecated: Implicit conversion from float 0.019 to int loses precision in /tmp/tmp06ub0ezc.php
    on line 30


    Deprecated: Implicit conversion from float 0.021111111111111112 to int loses precision
    in /tmp/tmp06ub0ezc.php on line 30


    Deprecated: Implicit conversion from float 0.038 to int loses precision in /tmp/tmp06ub0ezc.php
    on line 30


    Deprecated: Implicit conversion from float 0.0475 to int loses precision in /tmp/tmp06ub0ezc.php
    on line 30


    Deprecated: Implicit conversion from float 0.19 to int loses precision in /tmp/tmp06ub0ezc.php
    on line 30


    Deprecated: Implicit conversion from float 0.2111111111111111 to int loses precision
    in /tmp/tmp06ub0ezc.php on line 30


    Deprecated: Implicit conversion from float 0.38 to int loses precision in /tmp/tmp06ub0ezc.php
    on line 30


    Deprecated: Implicit conversion from float 0.475 to int loses precision in /tmp/tmp06ub0ezc.php
    on line 30


    Deprecated: Implicit conversion from float 1.9 to int loses precision in /tmp/tmp06ub0ezc.php
    on line 30


    Fatal error: Uncaught Exce'
  timestamp: 1660220718
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $romans = array(\n        'M' => 1000,\n        'CM' => 900,\n      \
    \  'D' => 500,\n        'CD' => 400,\n        'C' => 100,\n        'XC' => 90,\n\
    \        'L' => 50,\n        'XL' => 40,\n        'X' => 10,\n        'IX' =>\
    \ 9,\n        'V' => 5,\n        'IV' => 4,\n        'I' => 1,\n    );\n    $result\
    \ = '';\n    foreach ($romans as $key => $value) {\n        $matches = intval($number\
    \ / $value);\n        $result .= str_repeat($key, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $result;\n}\n\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "XIXCLIICDXXVI\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl77yj29k.php:45\n\
    Stack trace:\n#0 /tmp/tmpl77yj29k.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpl77yj29k.php\
    \ on line 45\n"
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n  $roman = '';\n  $numerals = array(\n    'm' => 1000,\n    'cm' => 900,\n\
    \    'd' => 500,\n    'cd' => 400,\n    'c' => 100,\n    'xc' => 90,\n    'l'\
    \ => 50,\n    'xl' => 40,\n    'x' => 10,\n    'ix' => 9,\n    'v' => 5,\n   \
    \ 'iv' => 4,\n    'i' => 1,\n  );\n  foreach ($numerals as $numeral => $value)\
    \ {\n    $matches = intval($number / $value);\n    $roman .= str_repeat($numeral,\
    \ $matches);\n    $number = $number % $value;\n  }\n  return $roman;\n}\n\n/*\
    \ Given a string, return a new string with the first and last characters\nswapped.\n\
    Examples:\n>>> swap_first_last(\"hello\")\n\"oellh\"\n>>> swap_first_last(\"python\"\
    )\n\"nthypo\"\n>>> swap_first_last(\"a\")\n\"a\"*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220718
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x',\
    \ 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n   \
    \     while ($number >= $numbers[$i]) {\n            $roman .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $roman;\n\
    }\n\n/* Given a string, return a new string with the first and last characters\n\
    swapped, except leave the string unchanged if the string's length is less\nthan\
    \ 2.\nExamples:\n>>> front_back('code')\n'eodc'\n>>> front_back('a')\n'a'\n>>>\
    \ front_back('ab')\n'ba'*/\nfunction candidate(...$args) {\n    return int_to_mini_roman(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(19) !== \"xix\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(152) !== \"clii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $result = '';\n    $numbers = [1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1];\n    $romans = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl',\
    \ 'x', 'ix', 'v', 'iv', 'i'];\n    for ($i = 0; $i < count($numbers); $i++) {\n\
    \        while ($number >= $numbers[$i]) {\n            $result .= $romans[$i];\n\
    \            $number -= $numbers[$i];\n        }\n    }\n    return $result;\n\
    }\n\n/* Given a string, return a new string that is the reverse of the original.\n\
    Examples:\n>>> reverse_string(\"hello\")\n\"olleh\"\n>>> reverse_string(\"world\"\
    )\n\"dlrow\"\n>>> reverse_string(\"\")\n\"\"*/\nfunction candidate(...$args) {\n\
    \    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 0
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $numerals = array(\n        'm' => 1000,\n        'cm'\
    \ => 900,\n        'd' => 500,\n        'cd' => 400,\n        'c' => 100,\n  \
    \      'xc' => 90,\n        'l' => 50,\n        'xl' => 40,\n        'x' => 10,\n\
    \        'ix' => 9,\n        'v' => 5,\n        'iv' => 4,\n        'i' => 1,\n\
    \    );\n    foreach ($numerals as $numeral => $value) {\n        $matches = intval($number\
    \ / $value);\n        $roman .= str_repeat($numeral, $matches);\n        $number\
    \ = $number % $value;\n    }\n    return $roman;\n}\n\n/* Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\nand return it in uppercase.\n\
    Restrictions: 1 <= num <= 1000\nExamples:\n>>> int_to_roman(19)\n\"XIX\"\n>>>\
    \ int_to_roman(152)\n\"CLII\"\n>>> int_to_roman(426)\n\"CDXXVI\"*/\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220717
- exit_code: 255
  program: "<?php\n/* Given a positive integer, obtain its roman numeral equivalent\
    \ as a string,\nand return it in lowercase.\nRestrictions: 1 <= num <= 1000\n\
    Examples:\n>>> int_to_mini_roman(19)\n\"xix\"\n>>> int_to_mini_roman(152)\n\"\
    clii\"\n>>> int_to_mini_roman(426)\n\"cdxxvi\"*/\nfunction int_to_mini_roman($number)\
    \ {\n    $roman = '';\n    $number = (int) $number;\n    $roman_numerals = array(\n\
    \        'M'  => 1000,\n        'CM' => 900,\n        'D'  => 500,\n        'CD'\
    \ => 400,\n        'C'  => 100,\n        'XC' => 90,\n        'L'  => 50,\n  \
    \      'XL' => 40,\n        'X'  => 10,\n        'IX' => 9,\n        'V'  => 5,\n\
    \        'IV' => 4,\n        'I'  => 1\n    );\n    foreach ($roman_numerals as\
    \ $roman => $number_value) {\n        $matches = intval($number / $number_value);\n\
    \        $roman .= str_repeat($roman, $matches);\n        $number = $number %\
    \ $number_value;\n    }\n    return $roman;\n}\necho int_to_mini_roman(19);\n\
    echo int_to_mini_roman(152);\necho int_to_mini_roman(426);\nfunction candidate(...$args)\
    \ {\n    return int_to_mini_roman(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(19) !== \"xix\") { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(152) !== \"clii\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(251) !== \"ccli\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(426) !== \"cdxxvi\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(500) !== \"d\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1) !== \"i\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(4) !== \"iv\") { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(43) !== \"xliii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(90) !== \"xc\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(94) !== \"xciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(532) !== \"dxxxii\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(900) !== \"cm\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(994) !== \"cmxciv\") { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== \"m\") { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "IIIIII\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjtmns2_4.php:45\n\
    Stack trace:\n#0 /tmp/tmpjtmns2_4.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpjtmns2_4.php\
    \ on line 45\n"
  timestamp: 1660220718
