name: HumanEval_41_car_race_collision
language: php
prompt: "<?php\n/* Imagine a road that's a perfectly straight infinitely long line.\n\
  n cars are driving left to right;  simultaneously, a different set of n cars\nare\
  \ driving right to left.   The two sets of cars start out being very far from\n\
  each other.  All cars move in the same speed.  Two cars are said to collide\nwhen\
  \ a car that's moving left to right hits a car that's moving right to left.\nHowever,\
  \ the cars are infinitely sturdy and strong; as a result, they continue moving\n\
  in their trajectory as if they did not collide.\nThis function outputs the number\
  \ of such collisions.*/\nfunction car_race_collision($n) {\n"
tests: "function candidate(...$args) {\n    return car_race_collision(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(2) !== 4) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(3) !== 9) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(4) !== 16) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(8) !== 64) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(10) !== 100) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\t$collisions = 0;\n\t$left_to_right = array();\n\t$right_to_left =\
    \ array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$left_to_right[$i] = $i;\n\t\t\
    $right_to_left[$i] = $n - $i - 1;\n\t}\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t\
    for ($j = 0; $j < $n; $j++) {\n\t\t\tif ($left_to_right[$i] == $right_to_left[$j])\
    \ {\n\t\t\t\t$collisions++;\n\t\t\t}\n\t\t}\n\t}\n\treturn $collisions;\n}\n\n\
    /* This function outputs the number of such collisions.\nThis function is a more\
    \ efficient implementation of the above function.\n*/", "    $left_to_right =\
    \ [];\n    $right_to_left = [];\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[]\
    \ = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions = 0;\n    while\
    \ (count($left_to_right) > 0 && count($right_to_left) > 0) {\n        $left_to_right_car\
    \ = array_shift($left_to_right);\n        $right_to_left_car = array_shift($right_to_left);\n\
    \        if ($left_to_right_car == $right_to_left_car) {\n            $collisions++;\n\
    \        }\n    }\n    return $collisions;\n}\n\n/* Imagine a road that's a perfectly\
    \ straight infinitely long line.\nn cars are driving left to right;  simultaneously,\
    \ a different set of n cars\nare driving right to left.   The two sets of cars\
    \ start out being very far from\neach other.  All cars move in the same speed.\
    \  Two cars are said to collide\nwhen a car that's moving left to right hits a\
    \ car that's moving right to left.\nHowever, the cars are infinitely sturdy and\
    \ strong; as a result, they continue moving\nin their trajectory as if they did\
    \ not collide.\nThis function outputs the number of such collisions.*/", "   \
    \ $left_to_right = [];\n    $right_to_left = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n \
    \   $collisions = 0;\n    while (count($left_to_right) > 0 && count($right_to_left)\
    \ > 0) {\n        $left_car = array_shift($left_to_right);\n        $right_car\
    \ = array_shift($right_to_left);\n        if ($left_car == $right_car) {\n   \
    \         $collisions++;\n        }\n    }\n    return $collisions;\n}\n\necho\
    \ car_race_collision(3);", "\t$collisions = 0;\n\t$left_to_right = array();\n\t\
    $right_to_left = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$left_to_right[$i]\
    \ = $i;\n\t\t$right_to_left[$i] = $n - $i - 1;\n\t}\n\tfor ($i = 0; $i < $n; $i++)\
    \ {\n\t\tfor ($j = 0; $j < $n; $j++) {\n\t\t\tif ($left_to_right[$i] == $right_to_left[$j])\
    \ {\n\t\t\t\t$collisions++;\n\t\t\t}\n\t\t}\n\t}\n\treturn $collisions;\n}\n\n\
    /* This function outputs the number of times a given number appears in an array.\n\
    The array is sorted in ascending order. */", "    $left_to_right = [];\n    $right_to_left\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = $i;\n \
    \       $right_to_left[] = $i;\n    }\n    $collisions = 0;\n    while (count($left_to_right)\
    \ > 0 && count($right_to_left) > 0) {\n        $left_to_right_car = array_shift($left_to_right);\n\
    \        $right_to_left_car = array_shift($right_to_left);\n        if ($left_to_right_car\
    \ == $right_to_left_car) {\n            $collisions++;\n        }\n    }\n   \
    \ return $collisions;\n}\n\necho car_race_collision(5) . \"\\n\";\necho car_race_collision(10)\
    \ . \"\\n\";\necho car_race_collision(100) . \"\\n\";\necho car_race_collision(1000)\
    \ . \"\\n\";\necho car_race_collision(10000) . \"\\n\";\necho car_race_collision(100000)\
    \ . \"\\n\";\necho car_race_collision(1000000) . \"\\n\";\necho car_race_collision(10000000)\
    \ . \"\\n\";\necho car_race_collision(100000000) . \"\\n\";\necho car_race_collision(1000000000)\
    \ . \"\\n\";\necho car_race_collision(10000000000) . \"\\n\";\necho car_race_collision(100000000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000000) . \"\\n\";\necho car_race_collision(10000000000000)\
    \ . \"\\n\";\necho car_race_collision(100000000000000) . \"\\n\";\necho car_race_collision(1000000000000000)\
    \ . \"\\n\";\necho car_race_collision(10000000000000000) . \"\\n\";\necho car_race_collision(100000000000000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000000000000) . \"\\n\";\necho car_race_collision(10000000000000000000)\
    \ . \"\\", "    $left_to_right = array();\n    $right_to_left = array();\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = rand(0, 100);\n  \
    \      $right_to_left[] = rand(0, 100);\n    }\n    sort($left_to_right);\n  \
    \  sort($right_to_left);\n    $i = 0;\n    $j = 0;\n    $collisions = 0;\n   \
    \ while ($i < $n && $j < $n) {\n        if ($left_to_right[$i] < $right_to_left[$j])\
    \ {\n            $i++;\n        } else if ($left_to_right[$i] > $right_to_left[$j])\
    \ {\n            $j++;\n        } else {\n            $collisions++;\n       \
    \     $i++;\n            $j++;\n        }\n    }\n    return $collisions;\n}\n\
    \n$n = 5;\necho car_race_collision($n);", "    $collisions = 0;\n    $left_cars\
    \ = array();\n    $right_cars = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left_cars[$i] = $i;\n        $right_cars[$i] = $i;\n    }\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if\
    \ ($left_cars[$i] == $right_cars[$j]) {\n                $collisions++;\n    \
    \        }\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5);",
  "    $left_to_right = [];\n    $right_to_left = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n \
    \   $collisions = 0;\n    while (count($left_to_right) > 0 && count($right_to_left)\
    \ > 0) {\n        $left_car = array_shift($left_to_right);\n        $right_car\
    \ = array_shift($right_to_left);\n        if ($left_car == $right_car) {\n   \
    \         $collisions++;\n        }\n    }\n    return $collisions;\n}\n\necho\
    \ car_race_collision(10);\necho \"\\n\";\necho car_race_collision(100);\necho\
    \ \"\\n\";\necho car_race_collision(1000);\necho \"\\n\";\necho car_race_collision(10000);\n\
    echo \"\\n\";\necho car_race_collision(100000);\necho \"\\n\";\necho car_race_collision(1000000);\n\
    echo \"\\n\";\necho car_race_collision(10000000);\necho \"\\n\";\necho car_race_collision(100000000);\n\
    echo \"\\n\";\necho car_race_collision(1000000000);\necho \"\\n\";\necho car_race_collision(10000000000);\n\
    echo \"\\n\";\necho car_race_collision(100000000000);\necho \"\\n\";\necho car_race_collision(1000000000000);\n\
    echo \"\\n\";\necho car_race_collision(10000000000000);\necho \"\\n\";\necho car_race_collision(100000000000000);\n\
    echo \"\\n\";\necho car_race_collision(1000000000000000);\necho \"\\n\";\necho\
    \ car_race_collision(10000000000000000);\necho \"\\n\";\necho car_race_collision(100000000000000000);\n\
    echo \"\\n\";\necho car_race_collision(1000000000000000000);\necho \"\\n\";\n\
    echo car_race_collision(10000000000000000000);\necho \"\\n\";\necho car_race_collision(1",
  "    $left_to_right = range(1, $n);\n    $right_to_left = range($n, 1);\n    $collisions\
    \ = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($left_to_right[$i] == $right_to_left[$i])\
    \ {\n            $collisions++;\n        }\n    }\n    return $collisions;\n}\n\
    \necho car_race_collision(5);", "    $left_to_right = range(1, $n);\n    $right_to_left\
    \ = range($n, 1);\n    $collisions = 0;\n    for ($i = 0; $i < $n; $i++) {\n \
    \       for ($j = 0; $j < $n; $j++) {\n            if ($left_to_right[$i] == $right_to_left[$j])\
    \ {\n                $collisions++;\n            }\n        }\n    }\n    return\
    \ $collisions;\n}\n\necho car_race_collision(5);\n\n/*\n * The above solution\
    \ has a time complexity of O(n^2)\n * We can improve this by sorting the arrays\
    \ and then comparing them\n * This will give us a time complexity of O(n log n)\n\
    \ */\n", "    $left_to_right = range(1, $n);\n    $right_to_left = range($n, 1);\n\
    \    $collisions = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0;\
    \ $j < $n; $j++) {\n            if ($left_to_right[$i] == $right_to_left[$j])\
    \ {\n                $collisions++;\n            }\n        }\n    }\n    return\
    \ $collisions;\n}\n\n/* Imagine a road that's a perfectly straight infinitely\
    \ long line.\nn cars are driving left to right;  simultaneously, a different set\
    \ of n cars\nare driving right to left.   The two sets of cars start out being\
    \ very far from\neach other.  All cars move in the same speed.  Two cars are said\
    \ to collide\nwhen a car that's moving left to right hits a car that's moving\
    \ right to left.\nHowever, the cars are infinitely sturdy and strong; as a result,\
    \ they continue moving\nin their trajectory as if they did not collide.\nThis\
    \ function outputs the number of such collisions.*/", "\t$left = array();\n\t\
    $right = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$left[$i] = $i;\n\t\t\
    $right[$i] = $i;\n\t}\n\t$collisions = 0;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\
    \tfor ($j = 0; $j < $n; $j++) {\n\t\t\tif ($left[$i] == $right[$j]) {\n\t\t\t\t\
    $collisions++;\n\t\t\t}\n\t\t}\n\t}\n\treturn $collisions;\n}\n\necho car_race_collision(5);",
  "    $collisions = 0;\n    $left_to_right = [];\n    $right_to_left = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = $i;\n        $right_to_left[]\
    \ = $n - $i - 1;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $n; $j++) {\n            if ($left_to_right[$i] == $right_to_left[$j])\
    \ {\n                $collisions++;\n            }\n        }\n    }\n    return\
    \ $collisions;\n}\n\n/* Given a string, return the number of times the string\
    \ contains the substring \"cat\".\nFor example, \"catcatcat\" contains 3 instances\
    \ of \"cat\". */", "\t$left_to_right = array();\n\t$right_to_left = array();\n\
    \tfor ($i = 0; $i < $n; $i++) {\n\t\t$left_to_right[] = $i;\n\t\t$right_to_left[]\
    \ = $i;\n\t}\n\t$collisions = 0;\n\t$left_to_right_index = 0;\n\t$right_to_left_index\
    \ = 0;\n\twhile ($left_to_right_index < $n && $right_to_left_index < $n) {\n\t\
    \tif ($left_to_right[$left_to_right_index] == $right_to_left[$right_to_left_index])\
    \ {\n\t\t\t$collisions++;\n\t\t\t$left_to_right_index++;\n\t\t\t$right_to_left_index++;\n\
    \t\t} else if ($left_to_right[$left_to_right_index] < $right_to_left[$right_to_left_index])\
    \ {\n\t\t\t$left_to_right_index++;\n\t\t} else {\n\t\t\t$right_to_left_index++;\n\
    \t\t}\n\t}\n\treturn $collisions;\n}\n\necho car_race_collision(5) . \"\\n\";\n\
    echo car_race_collision(10) . \"\\n\";\necho car_race_collision(15) . \"\\n\"\
    ;\necho car_race_collision(20) . \"\\n\";\necho car_race_collision(25) . \"\\\
    n\";\necho car_race_collision(30) . \"\\n\";\necho car_race_collision(35) . \"\
    \\n\";\necho car_race_collision(40) . \"\\n\";\necho car_race_collision(45) .\
    \ \"\\n\";\necho car_race_collision(50) . \"\\n\";\necho car_race_collision(55)\
    \ . \"\\n\";\necho car_race_collision(60) . \"\\n\";\necho car_race_collision(65)\
    \ . \"\\n\";\necho car_race_collision(70) . \"\\n\";\necho car_race_collision",
  "    $collisions = 0;\n    $left_to_right = [];\n    $right_to_left = [];\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = $i;\n        $right_to_left[]\
    \ = $n - $i - 1;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $n; $j++) {\n            if ($left_to_right[$i] == $right_to_left[$j])\
    \ {\n                $collisions++;\n            }\n        }\n    }\n    return\
    \ $collisions;\n}\n\necho car_race_collision(5);", "    $collisions = 0;\n   \
    \ $left_cars = array();\n    $right_cars = array();\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $left_cars[$i] = $i;\n        $right_cars[$i] = $i;\n    }\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          if ($left_cars[$i] == $right_cars[$j]) {\n                $collisions++;\n\
    \            }\n        }\n    }\n    return $collisions;\n}\n\n/* This function\
    \ outputs the number of such collisions.\nThis function is a more efficient version\
    \ of car_race_collision.\n*/", "    $left_to_right = array();\n    $right_to_left\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = $i;\n\
    \        $right_to_left[] = $i;\n    }\n    $collisions = 0;\n    while (count($left_to_right)\
    \ > 0 && count($right_to_left) > 0) {\n        $left_car = array_shift($left_to_right);\n\
    \        $right_car = array_shift($right_to_left);\n        if ($left_car > $right_car)\
    \ {\n            $collisions++;\n        } else {\n            $left_to_right[]\
    \ = $left_car;\n            $right_to_left[] = $right_car;\n        }\n    }\n\
    \    return $collisions;\n}\n\necho car_race_collision(5);\n", "    $left_to_right\
    \ = [];\n    $right_to_left = [];\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions\
    \ = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++)\
    \ {\n            if ($left_to_right[$i] == $right_to_left[$j]) {\n           \
    \     $collisions++;\n            }\n        }\n    }\n    return $collisions;\n\
    }\n\n/*\n * This function outputs the number of such collisions.\n *\n * The number\
    \ of collisions is the sum of the number of cars that are\n * moving right to\
    \ left and the number of cars that are moving left to right.\n *\n * The number\
    \ of cars that are moving right to left is $n.\n *\n * The number of cars that\
    \ are moving left to right is $n.\n *\n * The number of collisions is $n + $n\
    \ = 2 * $n.\n */", "    $collision = 0;\n    $left_to_right = [];\n    $right_to_left\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = $i;\n \
    \       $right_to_left[] = $i;\n    }\n    for ($i = 0; $i < $n; $i++) {\n   \
    \     for ($j = 0; $j < $n; $j++) {\n            if ($left_to_right[$i] == $right_to_left[$j])\
    \ {\n                $collision++;\n            }\n        }\n    }\n    return\
    \ $collision;\n}\n\necho car_race_collision(5);", "    $collisions = 0;\n    $left\
    \ = array();\n    $right = array();\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $left[] = $i;\n        $right[] = $i;\n    }\n    while (count($left) > 0\
    \ && count($right) > 0) {\n        $left_car = array_shift($left);\n        $right_car\
    \ = array_pop($right);\n        if ($left_car == $right_car) {\n            $collisions++;\n\
    \        }\n    }\n    return $collisions;\n}\n\n/* Given a string of length n,\
    \ this function outputs the number of times\nthe string contains the substring\
    \ \"ab\".  For example, if the string is\n\"abababab\", the function outputs 4.\
    \  If the string is \"ababababa\", the", "    $collisions = 0;\n    $left_to_right\
    \ = array();\n    $right_to_left = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left_to_right[$i] = $i;\n        $right_to_left[$i] = $n - $i - 1;\n\
    \    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++)\
    \ {\n            if ($left_to_right[$i] == $right_to_left[$j]) {\n           \
    \     $collisions++;\n            }\n        }\n    }\n    return $collisions;\n\
    }\n\n/* This function outputs the number of collisions between cars that are moving\n\
    left to right and cars that are moving right to left.  The cars are moving at\n\
    different speeds.  The cars are infinitely strong and sturdy, so they continue\n\
    moving in their trajectory as if they did not collide. */", "    $collisions =\
    \ 0;\n    $left_to_right = range(1, $n);\n    $right_to_left = range($n, 1);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          if ($left_to_right[$i] == $right_to_left[$j]) {\n                $collisions++;\n\
    \            }\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(10);",
  "\t$collision = 0;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\tfor ($j = 0; $j < $n; $j++)\
    \ {\n\t\t\t$collision++;\n\t\t}\n\t}\n\treturn $collision;\n}\n\necho car_race_collision(5)\
    \ . \"\\n\";\necho car_race_collision(10) . \"\\n\";\necho car_race_collision(100)\
    \ . \"\\n\";\necho car_race_collision(1000) . \"\\n\";\necho car_race_collision(10000)\
    \ . \"\\n\";\necho car_race_collision(100000) . \"\\n\";\necho car_race_collision(1000000)\
    \ . \"\\n\";\necho car_race_collision(10000000) . \"\\n\";\necho car_race_collision(100000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000) . \"\\n\";\necho car_race_collision(10000000000)\
    \ . \"\\n\";\necho car_race_collision(100000000000) . \"\\n\";\necho car_race_collision(1000000000000)\
    \ . \"\\n\";\necho car_race_collision(10000000000000) . \"\\n\";\necho car_race_collision(100000000000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000000000) . \"\\n\";\necho car_race_collision(10000000000000000)\
    \ . \"\\n\";\necho car_race_collision(100000000000000000) . \"\\n\";\necho car_race_collision(1000000000000000000)\
    \ . \"\\n\";\necho car_race_collision(10000000000000000000) . \"\\n\";\necho car_race_collision(100000000000000000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000000000000000) . \"\\n\";\necho\
    \ car_race_collision(10000000000000000000000) . \"\\n\";\necho car_race_collision(100000000000000000000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000000000000000000) . \"\\n\";\n\
    echo car_race_collision(10000000000000000000000000) . \"\\n\";\necho car_race_collision(100000000000000000000000000",
  "    $collisions = 0;\n    $left_to_right = range(1, $n);\n    $right_to_left =\
    \ range($n, 1);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j <\
    \ $n; $j++) {\n            if ($left_to_right[$i] == $right_to_left[$j]) {\n \
    \               $collisions++;\n            }\n        }\n    }\n    return $collisions;\n\
    }\n\necho car_race_collision(5);", "    $left_cars = array();\n    $right_cars\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        $left_cars[$i] = $i;\n\
    \        $right_cars[$i] = $i;\n    }\n    $collisions = 0;\n    $left_car_index\
    \ = 0;\n    $right_car_index = 0;\n    while ($left_car_index < $n && $right_car_index\
    \ < $n) {\n        if ($left_cars[$left_car_index] == $right_cars[$right_car_index])\
    \ {\n            $collisions++;\n            $left_car_index++;\n            $right_car_index++;\n\
    \        } else if ($left_cars[$left_car_index] < $right_cars[$right_car_index])\
    \ {\n            $left_car_index++;\n        } else {\n            $right_car_index++;\n\
    \        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5) .\
    \ \"\\n\";\necho car_race_collision(10) . \"\\n\";\necho car_race_collision(100)\
    \ . \"\\n\";\necho car_race_collision(1000) . \"\\n\";\necho car_race_collision(10000)\
    \ . \"\\n\";\necho car_race_collision(100000) . \"\\n\";\necho car_race_collision(1000000)\
    \ . \"\\n\";\necho car_race_collision(10000000) . \"\\n\";\necho car_race_collision(100000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000) . \"\\n\";\necho car_race_collision(10000000000)\
    \ . \"\\n\";\necho car_race_collision(100000000000) . \"\\n\";\necho car_race_collision(1000000000000)\
    \ . \"\\n\";\necho car_race_collision(10000000000000) . \"\\n\";\necho car_race_collision(100000000000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000000000) . \"\\n\";\necho car_race_collision(1",
  "    $left_to_right = range(1, $n);\n    $right_to_left = range($n, 1);\n    $collisions\
    \ = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($left_to_right[$i] == $right_to_left[$i])\
    \ {\n            $collisions++;\n        }\n    }\n    return $collisions;\n}\n\
    \n/* Imagine a road that's a perfectly straight infinitely long line.\nn cars\
    \ are driving left to right;  simultaneously, a different set of n cars\nare driving\
    \ right to left.   The two sets of cars start out being very far from\neach other.\
    \  All cars move in the same speed.  Two cars are said to collide\nwhen a car\
    \ that's moving left to right hits a car that's moving right to left.\nHowever,\
    \ the cars are infinitely sturdy and strong; as a result, they continue moving\n\
    in their trajectory as if they did not collide.\nThis function outputs the number\
    \ of such collisions.*/", "  $left_to_right = array_fill(0, $n, 0);\n  $right_to_left\
    \ = array_fill(0, $n, 0);\n  $collisions = 0;\n  for ($i = 0; $i < $n; $i++) {\n\
    \    $left_to_right[$i] = $i;\n    $right_to_left[$i] = $n - $i - 1;\n  }\n  for\
    \ ($i = 0; $i < $n; $i++) {\n    for ($j = 0; $j < $n; $j++) {\n      if ($left_to_right[$i]\
    \ == $right_to_left[$j]) {\n        $collisions++;\n      }\n    }\n  }\n  return\
    \ $collisions;\n}\n\n/*\n * This function returns the number of collisions using\
    \ a more efficient algorithm\n * than the above function.\n */", "    $left_to_right\
    \ = range(1, $n);\n    $right_to_left = range($n, 1);\n    $collisions = 0;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          if ($left_to_right[$i] == $right_to_left[$j]) {\n                $collisions++;\n\
    \            }\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(2);\n\
    echo car_race_collision(3);\necho car_race_collision(4);\necho car_race_collision(5);\n\
    echo car_race_collision(6);\necho car_race_collision(7);\necho car_race_collision(8);\n\
    echo car_race_collision(9);\necho car_race_collision(10);\necho car_race_collision(11);\n\
    echo car_race_collision(12);\necho car_race_collision(13);\necho car_race_collision(14);\n\
    echo car_race_collision(15);\necho car_race_collision(16);\necho car_race_collision(17);\n\
    echo car_race_collision(18);\necho car_race_collision(19);\necho car_race_collision(20);\n\
    echo car_race_collision(21);\necho car_race_collision(22);\necho car_race_collision(23);\n\
    echo car_race_collision(24);\necho car_race_collision(25);\necho car_race_collision(26);\n\
    echo car_race_collision(27);\necho car_race_collision(28);\necho car_race_collision(29);\n\
    echo car_race_collision(30);\necho car_race_collision(31);\necho car_race_collision(32);\n\
    echo car_race_collision(33);\necho car_race_collision(34);\necho car_race_collision(35);\n\
    echo car_race_collision(36);\necho", "    $collisions = 0;\n    $left_to_right\
    \ = array();\n    $right_to_left = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left_to_right[$i] = $i;\n        $right_to_left[$i] = $n - $i - 1;\n\
    \    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++)\
    \ {\n            if ($left_to_right[$i] == $right_to_left[$j]) {\n           \
    \     $collisions++;\n            }\n        }\n    }\n    return $collisions;\n\
    }\n\necho car_race_collision(5);\n", "    $left_to_right = [];\n    $right_to_left\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = $i;\n \
    \       $right_to_left[] = $i;\n    }\n    $collisions = 0;\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($left_to_right[$i]\
    \ == $right_to_left[$j]) {\n                $collisions++;\n            }\n  \
    \      }\n    }\n    return $collisions;\n}\n\necho car_race_collision(3);", " \
    \ $collisions = 0;\n  $right_to_left = array();\n  $left_to_right = array();\n\
    \  for ($i = 0; $i < $n; $i++) {\n    $right_to_left[] = $i;\n    $left_to_right[]\
    \ = $i;\n  }\n  while (count($right_to_left) > 0 && count($left_to_right) > 0)\
    \ {\n    $right_to_left_car = array_pop($right_to_left);\n    $left_to_right_car\
    \ = array_pop($left_to_right);\n    if ($right_to_left_car == $left_to_right_car)\
    \ {\n      $collisions++;\n    }\n  }\n  return $collisions;\n}\n\necho car_race_collision(3)\
    \ . \"\\n\";\necho car_race_collision(4) . \"\\n\";\necho car_race_collision(5)\
    \ . \"\\n\";\necho car_race_collision(6) . \"\\n\";\necho car_race_collision(7)\
    \ . \"\\n\";\necho car_race_collision(8) . \"\\n\";\necho car_race_collision(9)\
    \ . \"\\n\";\necho car_race_collision(10) . \"\\n\";\necho car_race_collision(11)\
    \ . \"\\n\";\necho car_race_collision(12) . \"\\n\";\necho car_race_collision(13)\
    \ . \"\\n\";\necho car_race_collision(14) . \"\\n\";\necho car_race_collision(15)\
    \ . \"\\n\";\necho car_race_collision(16) . \"\\n\";\necho car_race_collision(17)\
    \ . \"\\n\";\necho car_race_collision(18) . \"\\n\";\necho car_race_collision(19)\
    \ . \"\\n\";\necho car_race_collision(20) . \"\\n\";\necho car_race_collision(21)\
    \ . \"\\n\";\necho car_race_collision(22) . \"\\n\";\necho car_race_collision(23)\
    \ . \"\\n\";\necho car_race_coll", "\t$left = array();\n\t$right = array();\n\t\
    for ($i = 0; $i < $n; $i++) {\n\t\t$left[$i] = $i;\n\t\t$right[$i] = $i;\n\t}\n\
    \t$collisions = 0;\n\twhile (count($left) > 0 && count($right) > 0) {\n\t\t$left_car\
    \ = array_shift($left);\n\t\t$right_car = array_pop($right);\n\t\tif ($left_car\
    \ == $right_car) {\n\t\t\t$collisions++;\n\t\t}\n\t}\n\treturn $collisions;\n\
    }\n\necho car_race_collision(5);", "    $collisions = 0;\n    $left_to_right =\
    \ array_fill(0, $n, 0);\n    $right_to_left = array_fill(0, $n, 0);\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $left_to_right[$i] = $i;\n        $right_to_left[$i]\
    \ = $n - $i - 1;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $n; $j++) {\n            if ($left_to_right[$i] == $right_to_left[$j])\
    \ {\n                $collisions++;\n            }\n        }\n    }\n    return\
    \ $collisions;\n}\n\necho car_race_collision(5);", "    $collisions = 0;\n   \
    \ $left_to_right = array();\n    $right_to_left = array();\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        $left_to_right[$i] = $i;\n        $right_to_left[$i]\
    \ = $n - $i - 1;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $n; $j++) {\n            if ($left_to_right[$i] == $right_to_left[$j])\
    \ {\n                $collisions++;\n            }\n        }\n    }\n    return\
    \ $collisions;\n}\n\necho car_race_collision(5);", "    $left_to_right = array();\n\
    \    $right_to_left = array();\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[]\
    \ = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions = 0;\n    while\
    \ (count($left_to_right) > 0 && count($right_to_left) > 0) {\n        $left_car\
    \ = array_shift($left_to_right);\n        $right_car = array_shift($right_to_left);\n\
    \        if ($left_car == $right_car) {\n            $collisions++;\n        }\
    \ else {\n            $left_to_right[] = $left_car;\n            $right_to_left[]\
    \ = $right_car;\n        }\n    }\n    return $collisions;\n}\n", "    $left =\
    \ array();\n    $right = array();\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ $left[$i] = $i;\n        $right[$i] = $i;\n    }\n    $collisions = 0;\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n     \
    \       if ($left[$i] == $right[$j]) {\n                $collisions++;\n     \
    \       }\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(3);\n\
    echo \"\\n\";\necho car_race_collision(4);\necho \"\\n\";\necho car_race_collision(5);\n\
    echo \"\\n\";\necho car_race_collision(6);\necho \"\\n\";\necho car_race_collision(7);\n\
    echo \"\\n\";\necho car_race_collision(8);\necho \"\\n\";\necho car_race_collision(9);\n\
    echo \"\\n\";\necho car_race_collision(10);\necho \"\\n\";\necho car_race_collision(11);\n\
    echo \"\\n\";\necho car_race_collision(12);\necho \"\\n\";\necho car_race_collision(13);\n\
    echo \"\\n\";\necho car_race_collision(14);\necho \"\\n\";\necho car_race_collision(15);\n\
    echo \"\\n\";\necho car_race_collision(16);\necho \"\\n\";\necho car_race_collision(17);\n\
    echo \"\\n\";\necho car_race_collision(18);\necho \"\\n\";\necho car_race_collision(19);\n\
    echo \"\\n\";\necho car_race_collision(20);\necho \"\\n\";\necho car_race_collision(21);\n\
    echo \"\\n\";\necho car_race_collision(22);\necho \"\\n\";\necho car_race_collision(23);\n\
    echo \"\\n\";\necho car_race_collision(24);\necho \"\\n\";\necho car_race_collision(25);\n\
    echo \"\\n", "    $left = array();\n    $right = array();\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        $left[$i] = $i;\n        $right[$i] = $i;\n    }\n  \
    \  $collision = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $n; $j++) {\n            if ($left[$i] == $right[$j]) {\n                $collision++;\n\
    \            }\n        }\n    }\n    return $collision;\n}\n\necho car_race_collision(4);",
  "    $left = array();\n    $right = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left[$i] = $i;\n        $right[$i] = $i;\n    }\n    $collision = 0;\n\
    \    while (count($left) > 0 && count($right) > 0) {\n        $l = array_shift($left);\n\
    \        $r = array_pop($right);\n        if ($l > $r) {\n            $collision++;\n\
    \        }\n    }\n    return $collision;\n}\n\necho car_race_collision(3) . \"\
    \\n\";\necho car_race_collision(4) . \"\\n\";\necho car_race_collision(5) . \"\
    \\n\";\necho car_race_collision(6) . \"\\n\";\necho car_race_collision(7) . \"\
    \\n\";\necho car_race_collision(8) . \"\\n\";\necho car_race_collision(9) . \"\
    \\n\";\necho car_race_collision(10) . \"\\n\";\necho car_race_collision(11) .\
    \ \"\\n\";\necho car_race_collision(12) . \"\\n\";\necho car_race_collision(13)\
    \ . \"\\n\";\necho car_race_collision(14) . \"\\n\";\necho car_race_collision(15)\
    \ . \"\\n\";\necho car_race_collision(16) . \"\\n\";\necho car_race_collision(17)\
    \ . \"\\n\";\necho car_race_collision(18) . \"\\n\";\necho car_race_collision(19)\
    \ . \"\\n\";\necho car_race_collision(20) . \"\\n\";\necho car_race_collision(21)\
    \ . \"\\n\";\necho car_race_collision(22) . \"\\n\";\necho car_race_collision(23)\
    \ . \"\\n\";\necho car_race_collision(24) . \"\\n\";\necho car_race_collision(25)\
    \ . \"\\n\";\necho car_race_collision(26) . \"\\n\";\necho car_race_collision(27)\
    \ .", "    $left_cars = array();\n    $right_cars = array();\n    $collisions\
    \ = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $left_cars[$i] = $i;\n    \
    \    $right_cars[$i] = $n - $i - 1;\n    }\n    for ($i = 0; $i < $n; $i++) {\n\
    \        if ($left_cars[$i] > $right_cars[$i]) {\n            $collisions++;\n\
    \        }\n    }\n    return $collisions;\n}\n\n/* Imagine a road that's a perfectly\
    \ straight infinitely long line.\nn cars are driving left to right;  simultaneously,\
    \ a different set of n cars\nare driving right to left.   The two sets of cars\
    \ start out being very far from\neach other.  All cars move in the same speed.\
    \  Two cars are said to collide\nwhen a car that's moving left to right hits a\
    \ car that's moving right to left.\nHowever, the cars are infinitely sturdy and\
    \ strong; as a result, they continue moving\nin their trajectory as if they did\
    \ not collide.\nThis function outputs the number of such collisions.*/", "\t$collisions\
    \ = 0;\n\t$left_to_right = array();\n\t$right_to_left = array();\n\tfor ($i =\
    \ 0; $i < $n; $i++) {\n\t\t$left_to_right[$i] = $i;\n\t\t$right_to_left[$i] =\
    \ $n - $i - 1;\n\t}\n\tfor ($i = 0; $i < $n; $i++) {\n\t\tfor ($j = 0; $j < $n;\
    \ $j++) {\n\t\t\tif ($left_to_right[$i] == $right_to_left[$j]) {\n\t\t\t\t$collisions++;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $collisions;\n}\n\n/* This function outputs the\
    \ number of such collisions.\nThis function is a more efficient version of the\
    \ above function.\nIt uses the fact that the cars are numbered from 0 to n-1,\
    \ and that the cars\nare moving in opposite directions.  */", "    $left_to_right\
    \ = array();\n    $right_to_left = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions\
    \ = 0;\n    while (count($left_to_right) > 0 && count($right_to_left) > 0) {\n\
    \        $left_car = array_shift($left_to_right);\n        $right_car = array_shift($right_to_left);\n\
    \        if ($left_car == $right_car) {\n            $collisions++;\n        }\
    \ else {\n            $left_to_right[] = $left_car;\n            $right_to_left[]\
    \ = $right_car;\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5);",
  "    $cars = array();\n    $collisions = 0;\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $cars[$i] = array(\n            'direction' => 'left',\n            'position'\
    \ => rand(0, 100)\n        );\n    }\n    for ($i = $n; $i < 2 * $n; $i++) {\n\
    \        $cars[$i] = array(\n            'direction' => 'right',\n           \
    \ 'position' => rand(0, 100)\n        );\n    }\n    for ($i = 0; $i < 2 * $n;\
    \ $i++) {\n        for ($j = $i + 1; $j < 2 * $n; $j++) {\n            if ($cars[$i]['direction']\
    \ != $cars[$j]['direction'] && $cars[$i]['position'] == $cars[$j]['position'])\
    \ {\n                $collisions++;\n            }\n        }\n    }\n    return\
    \ $collisions;\n}\n\necho car_race_collision(10);", "    $left_to_right = [];\n\
    \    $right_to_left = [];\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[]\
    \ = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions = 0;\n    while\
    \ (count($left_to_right) > 0 && count($right_to_left) > 0) {\n        $left_car\
    \ = array_shift($left_to_right);\n        $right_car = array_shift($right_to_left);\n\
    \        if ($left_car == $right_car) {\n            $collisions++;\n        }\n\
    \    }\n    return $collisions;\n}\n\necho car_race_collision(3);", "    $collisions\
    \ = 0;\n    $left_to_right = array();\n    $right_to_left = array();\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $left_to_right[$i] = $i;\n        $right_to_left[$i]\
    \ = $n - $i - 1;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $n; $j++) {\n            if ($left_to_right[$i] == $right_to_left[$j])\
    \ {\n                $collisions++;\n            }\n        }\n    }\n    return\
    \ $collisions;\n}\n\necho car_race_collision(10);", "    $left_to_right = [];\n\
    \    $right_to_left = [];\n    $collisions = 0;\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $left_to_right[] = $i;\n        $right_to_left[] = $n - $i - 1;\n\
    \    }\n    $left_to_right_index = 0;\n    $right_to_left_index = 0;\n    while\
    \ ($left_to_right_index < $n && $right_to_left_index < $n) {\n        if ($left_to_right[$left_to_right_index]\
    \ < $right_to_left[$right_to_left_index]) {\n            $left_to_right_index++;\n\
    \        } else if ($left_to_right[$left_to_right_index] > $right_to_left[$right_to_left_index])\
    \ {\n            $right_to_left_index++;\n        } else {\n            $collisions++;\n\
    \            $left_to_right_index++;\n            $right_to_left_index++;\n  \
    \      }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5);", " \
    \   $collision = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $n; $j++) {\n            $collision++;\n        }\n    }\n    return $collision;\n\
    }\n\necho car_race_collision(5);\n", "    $left_to_right = array();\n    $right_to_left\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = $i;\n\
    \        $right_to_left[] = $i;\n    }\n    $collisions = 0;\n    while (count($left_to_right)\
    \ > 0 && count($right_to_left) > 0) {\n        $left_car = array_shift($left_to_right);\n\
    \        $right_car = array_shift($right_to_left);\n        if ($left_car > $right_car)\
    \ {\n            $collisions++;\n        } else {\n            $left_to_right[]\
    \ = $left_car;\n            $right_to_left[] = $right_car;\n        }\n    }\n\
    \    return $collisions;\n}\n\necho car_race_collision(5);", "    $left_to_right\
    \ = [];\n    $right_to_left = [];\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions\
    \ = 0;\n    while (count($left_to_right) > 0 && count($right_to_left) > 0) {\n\
    \        $left_car = array_shift($left_to_right);\n        $right_car = array_shift($right_to_left);\n\
    \        if ($left_car === $right_car) {\n            $collisions++;\n       \
    \ }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5);", "    $collisions\
    \ = 0;\n    $left_to_right = array();\n    $right_to_left = array();\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $left_to_right[$i] = $i;\n        $right_to_left[$i]\
    \ = $n - $i - 1;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $n; $j++) {\n            if ($left_to_right[$i] == $right_to_left[$j])\
    \ {\n                $collisions++;\n            }\n        }\n    }\n    return\
    \ $collisions;\n}\n\n/* This function outputs the number of collisions.  It is\
    \ a more efficient\nversion of the previous function.  It takes advantage of the\
    \ fact that\nthe cars are moving in the same speed.  The cars that are moving\
    \ left to right\nare numbered 0 to n-1.  The cars that are moving right to left\
    \ are numbered\nn-1 to 0.  The cars that are moving left to right are moving at\
    \ a speed of 1.\nThe cars that are moving right to left are moving at a speed\
    \ of -1.  The", "    $left = $right = 0;\n    $collisions = 0;\n    while ($left\
    \ < $n && $right < $n) {\n        if ($left == $right) {\n            $collisions++;\n\
    \            $left++;\n            $right++;\n        } else if ($left < $right)\
    \ {\n            $left++;\n        } else {\n            $right++;\n        }\n\
    \    }\n    return $collisions;\n}\n\necho car_race_collision(3);", "    $collisions\
    \ = 0;\n    $left_cars = [];\n    $right_cars = [];\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $left_cars[] = $i;\n        $right_cars[] = $i;\n    }\n  \
    \  while (count($left_cars) > 0 && count($right_cars) > 0) {\n        $left_car\
    \ = array_shift($left_cars);\n        $right_car = array_pop($right_cars);\n \
    \       if ($left_car == $right_car) {\n            $collisions++;\n        }\n\
    \    }\n    return $collisions;\n}\n\n/* Imagine a road that's a perfectly straight\
    \ infinitely long line.\nn cars are driving left to right;  simultaneously, a\
    \ different set of n cars\nare driving right to left.   The two sets of cars start\
    \ out being very far from\neach other.  All cars move in the same speed.  Two\
    \ cars are said to collide\nwhen a car that's moving left to right hits a car\
    \ that's moving right to left.\nHowever, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\nin their trajectory as if they did not collide.\n\
    This function outputs the number of such collisions.*/", "    // Your code here\n\
    }\n\n/* Given an array of integers, find the maximum sum of any contiguous subarray\
    \ of the array.\nFor example, given the array [34, -50, 42, 14, -5, 86], the maximum\
    \ sum would be 137, since we would take elements 42, 14, -5, and 86.\nGiven the\
    \ array [-5, -1, -8, -9], the maximum sum would be 0, since we would not take\
    \ any elements.\nDo this in O(N) time. */", "    $collisions = 0;\n    $left_to_right\
    \ = array();\n    $right_to_left = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left_to_right[$i] = $i;\n        $right_to_left[$i] = $n - $i - 1;\n\
    \    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++)\
    \ {\n            if ($left_to_right[$i] == $right_to_left[$j]) {\n           \
    \     $collisions++;\n            }\n        }\n    }\n    return $collisions;\n\
    }\n\n/* Imagine a road that's a perfectly straight infinitely long line.\nn cars\
    \ are driving left to right;  simultaneously, a different set of n cars\nare driving\
    \ right to left.   The two sets of cars start out being very far from\neach other.\
    \  All cars move in the same speed.  Two cars are said to collide\nwhen a car\
    \ that's moving left to right hits a car that's moving right to left.\nHowever,\
    \ the cars are infinitely sturdy and strong; as a result, they continue moving\n\
    in their trajectory as if they did not collide.\nThis function outputs the number\
    \ of such collisions.*/", "    $left_to_right = range(1, $n);\n    $right_to_left\
    \ = range($n, 1);\n    $collisions = 0;\n    $i = 0;\n    $j = 0;\n    while ($i\
    \ < $n && $j < $n) {\n        if ($left_to_right[$i] < $right_to_left[$j]) {\n\
    \            $i++;\n        } else if ($left_to_right[$i] > $right_to_left[$j])\
    \ {\n            $j++;\n        } else {\n            $collisions++;\n       \
    \     $i++;\n            $j++;\n        }\n    }\n    return $collisions;\n}\n\
    \necho car_race_collision(5);", "    $collisions = 0;\n    $left_to_right = [];\n\
    \    $right_to_left = [];\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[]\
    \ = $i;\n        $right_to_left[] = $n - $i - 1;\n    }\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($left_to_right[$i]\
    \ == $right_to_left[$j]) {\n                $collisions++;\n            }\n  \
    \      }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5);", " \
    \   $left_to_right = range(1, $n);\n    $right_to_left = range($n, 1);\n    $collisions\
    \ = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++)\
    \ {\n            if ($left_to_right[$i] == $right_to_left[$j]) {\n           \
    \     $collisions++;\n            }\n        }\n    }\n    return $collisions;\n\
    }\n\necho car_race_collision(5);", "\t$left_to_right = range(1, $n);\n\t$right_to_left\
    \ = range($n, 1);\n\t$collisions = 0;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\tif\
    \ ($left_to_right[$i] == $right_to_left[$i]) {\n\t\t\t$collisions++;\n\t\t}\n\t\
    }\n\treturn $collisions;\n}\n\necho car_race_collision(5);", "    $left_to_right\
    \ = array();\n    $right_to_left = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions\
    \ = 0;\n    while (count($left_to_right) > 0 && count($right_to_left) > 0) {\n\
    \        $left_car = array_shift($left_to_right);\n        $right_car = array_shift($right_to_left);\n\
    \        if ($left_car == $right_car) {\n            $collisions++;\n        }\
    \ else {\n            $left_to_right[] = $left_car;\n            $right_to_left[]\
    \ = $right_car;\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(2)\
    \ . \"\\n\";\necho car_race_collision(3) . \"\\n\";\necho car_race_collision(4)\
    \ . \"\\n\";\necho car_race_collision(5) . \"\\n\";\necho car_race_collision(6)\
    \ . \"\\n\";\necho car_race_collision(7) . \"\\n\";\necho car_race_collision(8)\
    \ . \"\\n\";\necho car_race_collision(9) . \"\\n\";\necho car_race_collision(10)\
    \ . \"\\n\";\necho car_race_collision(11) . \"\\n\";\necho car_race_collision(12)\
    \ . \"\\n\";\necho car_race_collision(13) . \"\\n\";\necho car_race_collision(14)\
    \ . \"\\n\";\necho car_race_collision(15) . \"\\n\";\necho car_race_collision(16)\
    \ . \"\\n\";\necho car_race_collision(17) . \"\\n\";\necho car_race_collision(18)\
    \ . \"\\n\";\necho car_race_collision(19) . \"\\n\";\necho car_race_collision(20)\
    \ . \"\\n\";\necho car_race_collision(21) . \"\\n\";\necho car", "\t$left = array();\n\
    \t$right = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$left[$i] = $i;\n\t\t\
    $right[$i] = $i;\n\t}\n\t$collisions = 0;\n\twhile (count($left) > 0 && count($right)\
    \ > 0) {\n\t\t$left_car = array_shift($left);\n\t\t$right_car = array_shift($right);\n\
    \t\tif ($left_car == $right_car) {\n\t\t\t$collisions++;\n\t\t} else {\n\t\t\t\
    array_push($left, $left_car);\n\t\t\tarray_push($right, $right_car);\n\t\t}\n\t\
    }\n\treturn $collisions;\n}\n\n$n = 10;\necho car_race_collision($n);", "    $left\
    \ = array();\n    $right = array();\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $left[] = $i;\n        $right[] = $i;\n    }\n    $collision = 0;\n    while\
    \ (count($left) > 0 && count($right) > 0) {\n        $left_car = array_shift($left);\n\
    \        $right_car = array_shift($right);\n        if ($left_car > $right_car)\
    \ {\n            $collision++;\n        } else {\n            $right[] = $right_car;\n\
    \        }\n    }\n    return $collision;\n}\n\necho car_race_collision(5);",
  "    $left_to_right = [];\n    $right_to_left = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n \
    \   $collisions = 0;\n    while (count($left_to_right) > 0 && count($right_to_left)\
    \ > 0) {\n        $left_car = array_shift($left_to_right);\n        $right_car\
    \ = array_shift($right_to_left);\n        if ($left_car == $right_car) {\n   \
    \         $collisions++;\n        }\n    }\n    return $collisions;\n}\n\necho\
    \ car_race_collision(5);", "    $left_cars = array();\n    $right_cars = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $left_cars[$i] = $i;\n        $right_cars[$i]\
    \ = $i;\n    }\n    $collisions = 0;\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    for ($j = 0; $j < $n; $j++) {\n            if ($left_cars[$i] == $right_cars[$j])\
    \ {\n                $collisions++;\n            }\n        }\n    }\n    return\
    \ $collisions;\n}\n\necho car_race_collision(5);", "\t$collisions = 0;\n\t$left_to_right\
    \ = array();\n\t$right_to_left = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\
    \t$left_to_right[$i] = $i;\n\t\t$right_to_left[$i] = $n - $i - 1;\n\t}\n\tfor\
    \ ($i = 0; $i < $n; $i++) {\n\t\tfor ($j = 0; $j < $n; $j++) {\n\t\t\tif ($left_to_right[$i]\
    \ == $right_to_left[$j]) {\n\t\t\t\t$collisions++;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $collisions;\n}\n\necho car_race_collision(5);", "    $collisions = 0;\n   \
    \ $left_cars = [];\n    $right_cars = [];\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left_cars[] = $i;\n        $right_cars[] = $i;\n    }\n    while (count($left_cars)\
    \ > 0 && count($right_cars) > 0) {\n        $left_car = array_shift($left_cars);\n\
    \        $right_car = array_pop($right_cars);\n        if ($left_car == $right_car)\
    \ {\n            $collisions++;\n        }\n    }\n    return $collisions;\n}\n\
    \necho car_race_collision(3);", "\t$collisions = 0;\n\t$left_to_right = array();\n\
    \t$right_to_left = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$left_to_right[$i]\
    \ = $i;\n\t\t$right_to_left[$i] = $n - $i - 1;\n\t}\n\tfor ($i = 0; $i < $n; $i++)\
    \ {\n\t\tfor ($j = 0; $j < $n; $j++) {\n\t\t\tif ($left_to_right[$i] == $right_to_left[$j])\
    \ {\n\t\t\t\t$collisions++;\n\t\t\t}\n\t\t}\n\t}\n\treturn $collisions;\n}\n\n\
    /* This function outputs the number of such collisions.\nThe function is optimized\
    \ to run in O(n) time. */", "    $collisions = 0;\n    $left_to_right = array();\n\
    \    $right_to_left = array();\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[$i]\
    \ = $i;\n        $right_to_left[$i] = $n - $i - 1;\n    }\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($left_to_right[$i]\
    \ == $right_to_left[$j]) {\n                $collisions++;\n            }\n  \
    \      }\n    }\n    return $collisions;\n}\n\n$n = 10;\necho car_race_collision($n);",
  "    $left_to_right = array();\n    $right_to_left = array();\n    $collisions =\
    \ 0;\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = $i;\n    \
    \    $right_to_left[] = $i;\n    }\n    while (count($left_to_right) > 0 && count($right_to_left)\
    \ > 0) {\n        $left_car = array_shift($left_to_right);\n        $right_car\
    \ = array_shift($right_to_left);\n        if ($left_car == $right_car) {\n   \
    \         $collisions++;\n        }\n    }\n    return $collisions;\n}\n\necho\
    \ car_race_collision(10);", "    $left_to_right = range(1, $n);\n    $right_to_left\
    \ = range($n, 1);\n    $collisions = 0;\n    foreach ($left_to_right as $left)\
    \ {\n        foreach ($right_to_left as $right) {\n            if ($left == $right)\
    \ {\n                $collisions++;\n            }\n        }\n    }\n    return\
    \ $collisions;\n}\n\necho car_race_collision(3);\necho car_race_collision(4);\n\
    echo car_race_collision(5);\necho car_race_collision(6);\necho car_race_collision(7);\n\
    echo car_race_collision(8);\necho car_race_collision(9);\necho car_race_collision(10);\n\
    echo car_race_collision(11);\necho car_race_collision(12);\necho car_race_collision(13);\n\
    echo car_race_collision(14);\necho car_race_collision(15);\necho car_race_collision(16);\n\
    echo car_race_collision(17);\necho car_race_collision(18);\necho car_race_collision(19);\n\
    echo car_race_collision(20);\necho car_race_collision(21);\necho car_race_collision(22);\n\
    echo car_race_collision(23);\necho car_race_collision(24);\necho car_race_collision(25);\n\
    echo car_race_collision(26);\necho car_race_collision(27);\necho car_race_collision(28);\n\
    echo car_race_collision(29);\necho car_race_collision(30);\necho car_race_collision(31);\n\
    echo car_race_collision(32);\necho car_race_collision(33);\necho car_race_collision(34);\n\
    echo car_race_collision(35);\necho car_race_collision(36);\necho car_race_collision(37);\n\
    echo car_race_collision(38);\necho car_race_collision(39);\n", "  $left_cars =\
    \ array();\n  $right_cars = array();\n  for ($i = 0; $i < $n; $i++) {\n    $left_cars[$i]\
    \ = $i;\n    $right_cars[$i] = $i;\n  }\n  $collisions = 0;\n  while (count($left_cars)\
    \ > 0 && count($right_cars) > 0) {\n    $left_car = array_shift($left_cars);\n\
    \    $right_car = array_shift($right_cars);\n    if ($left_car == $right_car)\
    \ {\n      $collisions++;\n    }\n  }\n  return $collisions;\n}\n\n/* Imagine\
    \ a road that's a perfectly straight infinitely long line.\nn cars are driving\
    \ left to right;  simultaneously, a different set of n cars\nare driving right\
    \ to left.   The two sets of cars start out being very far from\neach other. \
    \ All cars move in the same speed.  Two cars are said to collide\nwhen a car that's\
    \ moving left to right hits a car that's moving right to left.\nHowever, the cars\
    \ are infinitely sturdy and strong; as a result, they continue moving\nin their\
    \ trajectory as if they did not collide.\nThis function outputs the number of\
    \ such collisions.*/", "    $collision = 0;\n    $left_to_right = [];\n    $right_to_left\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = rand(1,\
    \ 1000);\n        $right_to_left[] = rand(1, 1000);\n    }\n    sort($left_to_right);\n\
    \    sort($right_to_left);\n    $i = 0;\n    $j = 0;\n    while ($i < $n && $j\
    \ < $n) {\n        if ($left_to_right[$i] < $right_to_left[$j]) {\n          \
    \  $i++;\n        } else {\n            $collision += $i;\n            $j++;\n\
    \        }\n    }\n    return $collision;\n}\n\necho car_race_collision(5);",
  "    $collisions = 0;\n    $left_cars = [];\n    $right_cars = [];\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $left_cars[] = rand(0, 1000);\n        $right_cars[]\
    \ = rand(0, 1000);\n    }\n    sort($left_cars);\n    sort($right_cars);\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        if ($left_cars[$i] > $right_cars[$i])\
    \ {\n            $collisions++;\n        }\n    }\n    return $collisions;\n}\n\
    \necho car_race_collision(10);", "    $collisions = 0;\n    $left_to_right = range(1,\
    \ $n);\n    $right_to_left = range($n, 1);\n    $left_to_right_index = 0;\n  \
    \  $right_to_left_index = 0;\n    while ($left_to_right_index < $n && $right_to_left_index\
    \ < $n) {\n        if ($left_to_right[$left_to_right_index] < $right_to_left[$right_to_left_index])\
    \ {\n            $left_to_right_index++;\n        } else {\n            $right_to_left_index++;\n\
    \            $collisions += $left_to_right_index;\n        }\n    }\n    return\
    \ $collisions;\n}\n\necho car_race_collision(5);", "    $collisions = 0;\n   \
    \ $left = array();\n    $right = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left[$i] = $i;\n        $right[$i] = $n - $i - 1;\n    }\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if\
    \ ($left[$i] == $right[$j]) {\n                $collisions++;\n            }\n\
    \        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5);",
  "    $left = array();\n    $right = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left[] = $i;\n        $right[] = $i;\n    }\n    $collision = 0;\n \
    \   while (count($left) > 0 && count($right) > 0) {\n        $left_car = array_shift($left);\n\
    \        $right_car = array_shift($right);\n        if ($left_car == $right_car)\
    \ {\n            $collision++;\n        } else {\n            $left[] = $left_car;\n\
    \            $right[] = $right_car;\n        }\n    }\n    return $collision;\n\
    }\n\necho car_race_collision(5);\necho \"\\n\";\necho car_race_collision(10);\n\
    echo \"\\n\";\necho car_race_collision(20);\necho \"\\n\";\necho car_race_collision(30);\n\
    echo \"\\n\";\necho car_race_collision(40);\necho \"\\n\";\necho car_race_collision(50);\n\
    echo \"\\n\";\necho car_race_collision(60);\necho \"\\n\";\necho car_race_collision(70);\n\
    echo \"\\n\";\necho car_race_collision(80);\necho \"\\n\";\necho car_race_collision(90);\n\
    echo \"\\n\";\necho car_race_collision(100);\necho \"\\n\";\necho car_race_collision(110);\n\
    echo \"\\n\";\necho car_race_collision(120);\necho \"\\n\";\necho car_race_collision(130);\n\
    echo \"\\n\";\necho car_race_collision(140);\necho \"\\n\";\necho car_race_collision(150);\n\
    echo \"\\n\";\necho car_race_collision(160);\necho \"\\n\";\necho car_race_collision(170);\n\
    echo \"\\n\";\necho car_race_collision(180);\necho \"\\n\";\necho car_race_collision(190);\n\
    echo \"\\n\";\necho car_race_collision(200);\necho \"\\n\";\necho car_race_coll",
  "  $left = 0;\n  $right = 0;\n  $collisions = 0;\n  while($left < $n && $right <\
    \ $n) {\n    if($left == $right) {\n      $collisions++;\n      $left++;\n   \
    \   $right++;\n    } else if($left < $right) {\n      $left++;\n    } else {\n\
    \      $right++;\n    }\n  }\n  return $collisions;\n}\n\necho car_race_collision(5);\n\
    echo \"\\n\";\necho car_race_collision(10);\necho \"\\n\";\necho car_race_collision(15);\n\
    echo \"\\n\";\necho car_race_collision(20);\necho \"\\n\";\necho car_race_collision(25);\n\
    echo \"\\n\";\necho car_race_collision(30);\necho \"\\n\";\necho car_race_collision(35);\n\
    echo \"\\n\";\necho car_race_collision(40);\necho \"\\n\";\necho car_race_collision(45);\n\
    echo \"\\n\";\necho car_race_collision(50);\necho \"\\n\";\necho car_race_collision(55);\n\
    echo \"\\n\";\necho car_race_collision(60);\necho \"\\n\";\necho car_race_collision(65);\n\
    echo \"\\n\";\necho car_race_collision(70);\necho \"\\n\";\necho car_race_collision(75);\n\
    echo \"\\n\";\necho car_race_collision(80);\necho \"\\n\";\necho car_race_collision(85);\n\
    echo \"\\n\";\necho car_race_collision(90);\necho \"\\n\";\necho car_race_collision(95);\n\
    echo \"\\n\";\necho car_race_collision(100);\necho \"\\n\";\necho car_race_collision(105);\n\
    echo \"\\n\";\necho car_race_collision(110);\necho \"\\n\";\necho car_race_collision(115);\n\
    echo \"\\n\";\necho car_race_collision(120);\necho \"\\n\";\necho car_race_collision(125);\n\
    echo \"\\n\";\necho car_race", "    $collision = 0;\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            $collision++;\n\
    \        }\n    }\n    return $collision;\n}\n\n/* Imagine a road that's a perfectly\
    \ straight infinitely long line.\nn cars are driving left to right;  simultaneously,\
    \ a different set of n cars\nare driving right to left.   The two sets of cars\
    \ start out being very far from\neach other.  All cars move in the same speed.\
    \  Two cars are said to collide\nwhen a car that's moving left to right hits a\
    \ car that's moving right to left.\nHowever, the cars are infinitely sturdy and\
    \ strong; as a result, they continue moving\nin their trajectory as if they did\
    \ not collide.\nThis function outputs the number of such collisions.*/", "   \
    \ $collisions = 0;\n    $left_to_right = range(1, $n);\n    $right_to_left = range($n,\
    \ 1);\n    foreach ($left_to_right as $left) {\n        foreach ($right_to_left\
    \ as $right) {\n            if ($left == $right) {\n                $collisions++;\n\
    \            }\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5);",
  "    $collisions = 0;\n    $left_to_right = array();\n    $right_to_left = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[$i] = $i;\n       \
    \ $right_to_left[$i] = $n - $i - 1;\n    }\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $n; $j++) {\n            if ($left_to_right[$i] ==\
    \ $right_to_left[$j]) {\n                $collisions++;\n            }\n     \
    \   }\n    }\n    return $collisions;\n}\n\necho car_race_collision(4);\n", " \
    \   $collision = 0;\n    $left_to_right = array();\n    $right_to_left = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[$i] = $i;\n       \
    \ $right_to_left[$i] = $n - $i - 1;\n    }\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $n; $j++) {\n            if ($left_to_right[$i] ==\
    \ $right_to_left[$j]) {\n                $collision++;\n            }\n      \
    \  }\n    }\n    return $collision;\n}\n\necho car_race_collision(5);", "\t$left_to_right\
    \ = array();\n\t$right_to_left = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\
    \t$left_to_right[] = $i;\n\t\t$right_to_left[] = $i;\n\t}\n\t$collisions = 0;\n\
    \twhile (count($left_to_right) > 0 && count($right_to_left) > 0) {\n\t\t$left_to_right_car\
    \ = array_shift($left_to_right);\n\t\t$right_to_left_car = array_shift($right_to_left);\n\
    \t\tif ($left_to_right_car == $right_to_left_car) {\n\t\t\t$collisions++;\n\t\t\
    }\n\t}\n\treturn $collisions;\n}\n\n/* Imagine a road that's a perfectly straight\
    \ infinitely long line.\nn cars are driving left to right;  simultaneously, a\
    \ different set of n cars\nare driving right to left.   The two sets of cars start\
    \ out being very far from\neach other.  All cars move in the same speed.  Two\
    \ cars are said to collide\nwhen a car that's moving left to right hits a car\
    \ that's moving right to left.\nHowever, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\nin their trajectory as if they did not collide.\n\
    This function outputs the number of such collisions.*/", "    $left_to_right =\
    \ array();\n    $right_to_left = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions\
    \ = 0;\n    while (count($left_to_right) > 0 && count($right_to_left) > 0) {\n\
    \        $left_to_right_car = array_shift($left_to_right);\n        $right_to_left_car\
    \ = array_shift($right_to_left);\n        if ($left_to_right_car == $right_to_left_car)\
    \ {\n            $collisions++;\n        }\n    }\n    return $collisions;\n}\n\
    \necho car_race_collision(5);", "    $collisions = 0;\n    $left_cars = range(1,\
    \ $n);\n    $right_cars = range($n, 1);\n    foreach ($left_cars as $left_car)\
    \ {\n        foreach ($right_cars as $right_car) {\n            if ($left_car\
    \ == $right_car) {\n                $collisions++;\n            }\n        }\n\
    \    }\n    return $collisions;\n}\n\n/*\n * This function outputs the number\
    \ of such collisions.\n *\n * @param int $n\n * @return int\n */", "    $left_to_right\
    \ = array();\n    $right_to_left = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions\
    \ = 0;\n    while (count($left_to_right) > 0 && count($right_to_left) > 0) {\n\
    \        $left_car = array_shift($left_to_right);\n        $right_car = array_shift($right_to_left);\n\
    \        if ($left_car == $right_car) {\n            $collisions++;\n        }\
    \ else {\n            $left_to_right[] = $left_car;\n            $right_to_left[]\
    \ = $right_car;\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5);\n\
    echo \"\\n\";\necho car_race_collision(1);\necho \"\\n\";\necho car_race_collision(2);\n\
    echo \"\\n\";\necho car_race_collision(3);\necho \"\\n\";\necho car_race_collision(4);\n\
    echo \"\\n\";\necho car_race_collision(10);\necho \"\\n\";\necho car_race_collision(100);\n\
    echo \"\\n\";\necho car_race_collision(1000);\necho \"\\n\";\necho car_race_collision(10000);\n\
    echo \"\\n\";\necho car_race_collision(100000);\necho \"\\n\";\necho car_race_collision(1000000);\n\
    echo \"\\n\";\necho car_race_collision(10000000);\necho \"\\n\";\necho car_race_collision(100000000);\n\
    echo \"\\n\";\necho car_race_collision(1000000000);\necho \"\\n\";\necho car_race_collision(10000000000);\n\
    echo \"\\n\";\necho car_race_collision(100000000000);\necho \"\\n\";\necho car_race_collision(1000000000000);\n\
    echo \"\\n\";\necho car_race_collision(10000000000000);\necho \"\\n\";\n", " \
    \   $collisions = 0;\n    $left_to_right = range(1, $n);\n    $right_to_left =\
    \ range($n, 1);\n    while (count($left_to_right) > 0 && count($right_to_left)\
    \ > 0) {\n        $left_car = array_shift($left_to_right);\n        $right_car\
    \ = array_shift($right_to_left);\n        if ($left_car < $right_car) {\n    \
    \        $collisions++;\n        } else {\n            array_unshift($left_to_right,\
    \ $left_car);\n            array_unshift($right_to_left, $right_car);\n      \
    \  }\n    }\n    return $collisions;\n}\n\necho car_race_collision(3);\necho car_race_collision(4);\n\
    echo car_race_collision(5);\necho car_race_collision(6);\necho car_race_collision(7);\n\
    echo car_race_collision(8);\necho car_race_collision(9);\necho car_race_collision(10);\n\
    echo car_race_collision(11);\necho car_race_collision(12);\necho car_race_collision(13);\n\
    echo car_race_collision(14);\necho car_race_collision(15);\necho car_race_collision(16);\n\
    echo car_race_collision(17);\necho car_race_collision(18);\necho car_race_collision(19);\n\
    echo car_race_collision(20);\necho car_race_collision(21);\necho car_race_collision(22);\n\
    echo car_race_collision(23);\necho car_race_collision(24);\necho car_race_collision(25);\n\
    echo car_race_collision(26);\necho car_race_collision(27);\necho car_race_collision(28);\n\
    echo car_race_collision(29);\necho car_race_collision(30);\necho car_race_collision(31);\n\
    echo car_race_collision(32);\necho car_race", "    $collisions = 0;\n    $left_cars\
    \ = range(1, $n);\n    $right_cars = range($n, 1);\n    while (count($left_cars)\
    \ > 0) {\n        $left_car = array_shift($left_cars);\n        $right_car = array_pop($right_cars);\n\
    \        if ($left_car > $right_car) {\n            $collisions++;\n        }\n\
    \    }\n    return $collisions;\n}\n\necho car_race_collision(5);", "    $left\
    \ = array();\n    $right = array();\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $left[] = $i;\n        $right[] = $i;\n    }\n    $collisions = 0;\n    while\
    \ (count($left) > 0 && count($right) > 0) {\n        $left_car = array_shift($left);\n\
    \        $right_car = array_shift($right);\n        if ($left_car > $right_car)\
    \ {\n            $collisions++;\n        } else {\n            array_unshift($right,\
    \ $right_car);\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(4)\
    \ . \"\\n\";\necho car_race_collision(5) . \"\\n\";\necho car_race_collision(6)\
    \ . \"\\n\";\necho car_race_collision(7) . \"\\n\";\necho car_race_collision(8)\
    \ . \"\\n\";\necho car_race_collision(9) . \"\\n\";\necho car_race_collision(10)\
    \ . \"\\n\";\necho car_race_collision(11) . \"\\n\";\necho car_race_collision(12)\
    \ . \"\\n\";\necho car_race_collision(13) . \"\\n\";\necho car_race_collision(14)\
    \ . \"\\n\";\necho car_race_collision(15) . \"\\n\";\necho car_race_collision(16)\
    \ . \"\\n\";\necho car_race_collision(17) . \"\\n\";\necho car_race_collision(18)\
    \ . \"\\n\";\necho car_race_collision(19) . \"\\n\";\necho car_race_collision(20)\
    \ . \"\\n\";\necho car_race_collision(21) . \"\\n\";\necho car_race_collision(22)\
    \ . \"\\n\";\necho car_race_collision(23) . \"\\n\";\necho car_race_collision(24)\
    \ . \"\\n\";\necho car_race_collision(25) . \"\\n\";\necho car_race_collision(26)\
    \ . \"\\n\";\necho car_race_", "    $left = $right = 0;\n    $collisions = 0;\n\
    \    while ($left < $n && $right < $n) {\n        if ($left == $right) {\n   \
    \         $collisions++;\n            $left++;\n            $right++;\n      \
    \  } else if ($left < $right) {\n            $left++;\n        } else {\n    \
    \        $right++;\n        }\n    }\n    return $collisions;\n}\n\n/* Given a\
    \ string, return the number of times that the string \"code\" appears anywhere\
    \ in the given string, except we'll accept any letter for the 'd', so \"cope\"\
    \ and \"cooe\" count.\ncountCode(\"aaacodebbb\") \u2192 1\ncountCode(\"codexxcode\"\
    ) \u2192 2\ncountCode(\"cozexxcope\") \u2192 2 */", "    $collisions = 0;\n  \
    \  $left_cars = array();\n    $right_cars = array();\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $left_cars[$i] = rand(0, 100);\n        $right_cars[$i] = rand(0,\
    \ 100);\n    }\n    sort($left_cars);\n    sort($right_cars);\n    $left_cars_index\
    \ = 0;\n    $right_cars_index = 0;\n    while ($left_cars_index < $n && $right_cars_index\
    \ < $n) {\n        if ($left_cars[$left_cars_index] < $right_cars[$right_cars_index])\
    \ {\n            $left_cars_index++;\n        } else {\n            $collisions++;\n\
    \            $right_cars_index++;\n        }\n    }\n    return $collisions;\n\
    }\n\necho car_race_collision(10);", "    $left_to_right = [];\n    $right_to_left\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = $i;\n \
    \       $right_to_left[] = $i;\n    }\n    $collisions = 0;\n    while (count($left_to_right)\
    \ > 0 && count($right_to_left) > 0) {\n        $left_to_right_car = array_shift($left_to_right);\n\
    \        $right_to_left_car = array_shift($right_to_left);\n        if ($left_to_right_car\
    \ == $right_to_left_car) {\n            $collisions++;\n        }\n    }\n   \
    \ return $collisions;\n}\n\necho car_race_collision(5);", "    $collisions = 0;\n\
    \    $left_to_right = array();\n    $right_to_left = array();\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $left_to_right[$i] = $i;\n        $right_to_left[$i]\
    \ = $n - $i - 1;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $n; $j++) {\n            if ($left_to_right[$i] == $right_to_left[$j])\
    \ {\n                $collisions++;\n            }\n        }\n    }\n    return\
    \ $collisions;\n}\n\n/* Given a string, return the number of times that the string\
    \ \"code\" appears\nanywhere in the given string, except we'll accept any letter\
    \ for the 'd', so\n\"cope\" and \"cooe\" count. */", "    $left_to_right = array();\n\
    \    $right_to_left = array();\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[]\
    \ = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions = 0;\n    while\
    \ (count($left_to_right) > 0 && count($right_to_left) > 0) {\n        $left_to_right_car\
    \ = array_shift($left_to_right);\n        $right_to_left_car = array_shift($right_to_left);\n\
    \        if ($left_to_right_car == $right_to_left_car) {\n            $collisions++;\n\
    \        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(10);",
  "    $collisions = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $collisions +=\
    \ $i;\n    }\n    return $collisions;\n}\n\necho car_race_collision(5);", "  \
    \  $collisions = 0;\n    $left = $right = array();\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $left[] = $i;\n        $right[] = $i;\n    }\n    while (count($left)\
    \ > 0 && count($right) > 0) {\n        $l = array_shift($left);\n        $r =\
    \ array_pop($right);\n        if ($l == $r) {\n            $collisions++;\n  \
    \      }\n    }\n    return $collisions;\n}\n\n/* Imagine a road that's a perfectly\
    \ straight infinitely long line.\nn cars are driving left to right;  simultaneously,\
    \ a different set of n cars\nare driving right to left.   The two sets of cars\
    \ start out being very far from\neach other.  All cars move in the same speed.\
    \  Two cars are said to collide\nwhen a car that's moving left to right hits a\
    \ car that's moving right to left.\nHowever, the cars are infinitely sturdy and\
    \ strong; as a result, they continue moving\nin their trajectory as if they did\
    \ not collide.\nThis function outputs the number of such collisions.*/", "   \
    \ $left = $right = 0;\n    $collisions = 0;\n    while ($left < $n && $right <\
    \ $n) {\n        if ($left < $right) {\n            $left++;\n        } elseif\
    \ ($left > $right) {\n            $right++;\n        } else {\n            $left++;\n\
    \            $right++;\n            $collisions++;\n        }\n    }\n    return\
    \ $collisions;\n}\n\necho car_race_collision(5) . \"\\n\";\necho car_race_collision(6)\
    \ . \"\\n\";\necho car_race_collision(7) . \"\\n\";\necho car_race_collision(8)\
    \ . \"\\n\";\necho car_race_collision(9) . \"\\n\";\necho car_race_collision(10)\
    \ . \"\\n\";\necho car_race_collision(11) . \"\\n\";\necho car_race_collision(12)\
    \ . \"\\n\";\necho car_race_collision(13) . \"\\n\";\necho car_race_collision(14)\
    \ . \"\\n\";\necho car_race_collision(15) . \"\\n\";\necho car_race_collision(16)\
    \ . \"\\n\";\necho car_race_collision(17) . \"\\n\";\necho car_race_collision(18)\
    \ . \"\\n\";\necho car_race_collision(19) . \"\\n\";\necho car_race_collision(20)\
    \ . \"\\n\";\necho car_race_collision(21) . \"\\n\";\necho car_race_collision(22)\
    \ . \"\\n\";\necho car_race_collision(23) . \"\\n\";\necho car_race_collision(24)\
    \ . \"\\n\";\necho car_race_collision(25) . \"\\n\";\necho car_race_collision(26)\
    \ . \"\\n\";\necho car_race_collision(27) . \"\\n\";\necho car_race_collision(28)\
    \ . \"\\n\";\necho car_race_collision(29) . \"\\n\";\necho car_race_collision(30)\
    \ . \"\\n\";\necho car_race_collision(31) . \"\\n\";\necho car_", "    $left_to_right\
    \ = array();\n    $right_to_left = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions\
    \ = 0;\n    while (count($left_to_right) > 0 && count($right_to_left) > 0) {\n\
    \        $left_car = array_shift($left_to_right);\n        $right_car = array_shift($right_to_left);\n\
    \        if ($left_car > $right_car) {\n            $collisions++;\n        }\
    \ else {\n            $left_to_right[] = $left_car;\n            $right_to_left[]\
    \ = $right_car;\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(3);",
  "    $left_to_right = [];\n    $right_to_left = [];\n    $collisions = 0;\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = $i;\n        $right_to_left[]\
    \ = $n - $i - 1;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $n; $j++) {\n            if ($left_to_right[$i] == $right_to_left[$j])\
    \ {\n                $collisions++;\n            }\n        }\n    }\n    return\
    \ $collisions;\n}\n\necho car_race_collision(10) . \"\\n\";", "    $collisions\
    \ = 0;\n    $left_to_right = array();\n    $right_to_left = array();\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $left_to_right[$i] = $i;\n        $right_to_left[$i]\
    \ = $n - $i - 1;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $n; $j++) {\n            if ($left_to_right[$i] == $right_to_left[$j])\
    \ {\n                $collisions++;\n            }\n        }\n    }\n    return\
    \ $collisions;\n}\n\necho car_race_collision(5);", "\t$collisions = 0;\n\tfor\
    \ ($i = 0; $i < $n; $i++) {\n\t\tfor ($j = 0; $j < $n; $j++) {\n\t\t\t$collisions++;\n\
    \t\t}\n\t}\n\treturn $collisions;\n}\n\n/* Given a string, return the number of\
    \ times that the string \"hi\" appears anywhere in the given string.\ncount_hi('abc\
    \ hi ho') \u2192 1\ncount_hi('ABChi hi') \u2192 2\ncount_hi('hihi') \u2192 2\n\
    */", "    $left_to_right = range(1, $n);\n    $right_to_left = range($n, 1);\n\
    \    $collisions = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($left_to_right[$i]\
    \ == $right_to_left[$i]) {\n            $collisions++;\n        }\n    }\n   \
    \ return $collisions;\n}\n\necho car_race_collision(5);", "\t$left_to_right =\
    \ array();\n\t$right_to_left = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t\
    $left_to_right[] = $i;\n\t\t$right_to_left[] = $i;\n\t}\n\t$collisions = 0;\n\t\
    while (count($left_to_right) > 0 && count($right_to_left) > 0) {\n\t\t$left_car\
    \ = array_shift($left_to_right);\n\t\t$right_car = array_shift($right_to_left);\n\
    \t\tif ($left_car == $right_car) {\n\t\t\t$collisions++;\n\t\t}\n\t}\n\treturn\
    \ $collisions;\n}\n\necho car_race_collision(5);", "    $left_to_right = [];\n\
    \    $right_to_left = [];\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[]\
    \ = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions = 0;\n    while\
    \ (count($left_to_right) > 0 && count($right_to_left) > 0) {\n        $left_to_right_car\
    \ = array_shift($left_to_right);\n        $right_to_left_car = array_shift($right_to_left);\n\
    \        if ($left_to_right_car == $right_to_left_car) {\n            $collisions++;\n\
    \        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5) .\
    \ \"\\n\";\necho car_race_collision(10) . \"\\n\";\necho car_race_collision(15)\
    \ . \"\\n\";\necho car_race_collision(20) . \"\\n\";\necho car_race_collision(25)\
    \ . \"\\n\";\necho car_race_collision(30) . \"\\n\";\necho car_race_collision(35)\
    \ . \"\\n\";\necho car_race_collision(40) . \"\\n\";\necho car_race_collision(45)\
    \ . \"\\n\";\necho car_race_collision(50) . \"\\n\";\necho car_race_collision(55)\
    \ . \"\\n\";\necho car_race_collision(60) . \"\\n\";\necho car_race_collision(65)\
    \ . \"\\n\";\necho car_race_collision(70) . \"\\n\";\necho car_race_collision(75)\
    \ . \"\\n\";\necho car_race_collision(80) . \"\\n\";\necho car_race_collision(85)\
    \ . \"\\n\";\necho car_race_collision(90) . \"\\n\";\necho car_race_collision(95)\
    \ . \"\\n\";\necho car_race_collision(100) . \"\\n\";\necho car_race_collision(105)\
    \ . \"\\n\";\necho car_race_collision(", "    $collisions = 0;\n    $left_to_right\
    \ = [];\n    $right_to_left = [];\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ $left_to_right[] = $i;\n        $right_to_left[] = $n - $i - 1;\n    }\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n     \
    \       if ($left_to_right[$i] == $right_to_left[$j]) {\n                $collisions++;\n\
    \            }\n        }\n    }\n    return $collisions;\n}\n\n/* Given a string,\
    \ return the first character that does not repeat.\nIf there is no such character,\
    \ return null. */", "    $left_to_right = array();\n    $right_to_left = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = $i;\n        $right_to_left[]\
    \ = $i;\n    }\n    $collisions = 0;\n    while (count($left_to_right) > 0 &&\
    \ count($right_to_left) > 0) {\n        $left_to_right_car = array_shift($left_to_right);\n\
    \        $right_to_left_car = array_shift($right_to_left);\n        if ($left_to_right_car\
    \ == $right_to_left_car) {\n            $collisions++;\n        }\n    }\n   \
    \ return $collisions;\n}\n\necho car_race_collision(5);\necho car_race_collision(10);\n\
    echo car_race_collision(100);\necho car_race_collision(1000);\necho car_race_collision(10000);\n\
    echo car_race_collision(100000);\necho car_race_collision(1000000);\necho car_race_collision(10000000);\n\
    echo car_race_collision(100000000);\necho car_race_collision(1000000000);\necho\
    \ car_race_collision(10000000000);\necho car_race_collision(100000000000);\necho\
    \ car_race_collision(1000000000000);\necho car_race_collision(10000000000000);\n\
    echo car_race_collision(100000000000000);\necho car_race_collision(1000000000000000);\n\
    echo car_race_collision(10000000000000000);\necho car_race_collision(100000000000000000);\n\
    echo car_race_collision(1000000000000000000);\necho car_race_collision(10000000000000000000);\n\
    echo car_race_collision(100000000000000000000);\necho car_race_collision(1000000000000000000000);\n\
    echo car_race_collision(10000000000000000000000);\necho car_race_collision(100000000000000000000000);\n\
    echo car_race_collision(1000000000000000000000000);\necho car_race_collision(10000000000000000",
  "    $collisions = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $n; $j++) {\n            $collisions++;\n        }\n    }\n    return $collisions;\n\
    }\n\necho car_race_collision(10); // 100\necho car_race_collision(100); // 10000\n\
    echo car_race_collision(1000); // 1000000\necho car_race_collision(10000); //\
    \ 100000000\n\n/*\n * The above function has a time complexity of O(n^2)\n *\n\
    \ * The below function has a time complexity of O(n)\n */", "    $left_to_right\
    \ = array();\n    $right_to_left = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions\
    \ = 0;\n    while (count($left_to_right) > 0 && count($right_to_left) > 0) {\n\
    \        $left_car = array_shift($left_to_right);\n        $right_car = array_shift($right_to_left);\n\
    \        if ($left_car == $right_car) {\n            $collisions++;\n        }\
    \ else {\n            if ($left_car > $right_car) {\n                $left_to_right[]\
    \ = $left_car;\n            } else {\n                $right_to_left[] = $right_car;\n\
    \            }\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(4)\
    \ . \"\\n\";\necho car_race_collision(5) . \"\\n\";\necho car_race_collision(6)\
    \ . \"\\n\";\necho car_race_collision(7) . \"\\n\";\necho car_race_collision(8)\
    \ . \"\\n\";\necho car_race_collision(9) . \"\\n\";\necho car_race_collision(10)\
    \ . \"\\n\";\necho car_race_collision(11) . \"\\n\";\necho car_race_collision(12)\
    \ . \"\\n\";\necho car_race_collision(13) . \"\\n\";\necho car_race_collision(14)\
    \ . \"\\n\";\necho car_race_collision(15) . \"\\n\";\necho car_race_collision(16)\
    \ . \"\\n\";\necho car_race_collision(17) . \"\\n\";\necho car_race_collision(18)\
    \ . \"\\n\";\necho car_race_collision(19) . \"\\n\";\necho car_race_collision(20)\
    \ . \"\\n\";\necho car_race_collision(21) . \"\\n\";\necho car_race_collision(22)",
  "    $left = $right = array();\n    for ($i = 0; $i < $n; $i++) {\n        $left[]\
    \ = $i;\n        $right[] = $i;\n    }\n    $collisions = 0;\n    while (count($left)\
    \ > 0 && count($right) > 0) {\n        $left_car = array_shift($left);\n     \
    \   $right_car = array_shift($right);\n        if ($left_car == $right_car) {\n\
    \            $collisions++;\n        } else {\n            $left[] = $left_car;\n\
    \            $right[] = $right_car;\n        }\n    }\n    return $collisions;\n\
    }\n\necho car_race_collision(10);", "    $left_to_right = array();\n    $right_to_left\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = $i;\n\
    \        $right_to_left[] = $i;\n    }\n    $collisions = 0;\n    while (count($left_to_right)\
    \ > 0 && count($right_to_left) > 0) {\n        $left_to_right_car = array_shift($left_to_right);\n\
    \        $right_to_left_car = array_shift($right_to_left);\n        if ($left_to_right_car\
    \ == $right_to_left_car) {\n            $collisions++;\n        }\n    }\n   \
    \ return $collisions;\n}\n\necho car_race_collision(3);\necho \"\\n\";\necho car_race_collision(4);\n\
    echo \"\\n\";\necho car_race_collision(5);\necho \"\\n\";\necho car_race_collision(6);\n\
    echo \"\\n\";\necho car_race_collision(7);\necho \"\\n\";\necho car_race_collision(8);\n\
    echo \"\\n\";\necho car_race_collision(9);\necho \"\\n\";\necho car_race_collision(10);\n\
    echo \"\\n\";\necho car_race_collision(11);\necho \"\\n\";\necho car_race_collision(12);\n\
    echo \"\\n\";\necho car_race_collision(13);\necho \"\\n\";\necho car_race_collision(14);\n\
    echo \"\\n\";\necho car_race_collision(15);\necho \"\\n\";\necho car_race_collision(16);\n\
    echo \"\\n\";\necho car_race_collision(17);\necho \"\\n\";\necho car_race_collision(18);\n\
    echo \"\\n\";\necho car_race_collision(19);\necho \"\\n\";\necho car_race_collision(20);\n\
    echo \"\\n\";\necho car_race_collision(21);\necho \"\\n\";\necho car_race_collision(22);\n\
    echo \"\\n\";\necho", "    $collisions = 0;\n    $left_cars = array();\n    $right_cars\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        $left_cars[$i] = rand(0,\
    \ 100);\n        $right_cars[$i] = rand(0, 100);\n    }\n    sort($left_cars);\n\
    \    sort($right_cars);\n    $left_index = 0;\n    $right_index = 0;\n    while\
    \ ($left_index < $n && $right_index < $n) {\n        if ($left_cars[$left_index]\
    \ < $right_cars[$right_index]) {\n            $left_index++;\n        } else {\n\
    \            $collisions += $left_index;\n            $right_index++;\n      \
    \  }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5);\necho \"\
    \\n\";\necho car_race_collision(10);\necho \"\\n\";\necho car_race_collision(100);\n\
    echo \"\\n\";\necho car_race_collision(1000);\necho \"\\n\";\necho car_race_collision(10000);\n\
    echo \"\\n\";\necho car_race_collision(100000);\necho \"\\n\";\necho car_race_collision(1000000);\n\
    echo \"\\n\";\necho car_race_collision(10000000);\necho \"\\n\";\necho car_race_collision(100000000);\n\
    echo \"\\n\";\necho car_race_collision(1000000000);\necho \"\\n\";\necho car_race_collision(10000000000);\n\
    echo \"\\n\";\necho car_race_collision(100000000000);\necho \"\\n\";\necho car_race_collision(1000000000000);\n\
    echo \"\\n\";\necho car_race_collision(10000000000000);\necho \"\\n\";\necho car_race_collision(100000000000000);\n\
    echo \"\\n\";\necho car_race_collision(1000000000000000);\necho \"\\n\";\necho\
    \ car_race_collision(10000000000000000);\necho \"\\n\";\necho car_race_collision(100000000000000000);\n",
  "    $left_cars = array();\n    $right_cars = array();\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $left_cars[] = rand(0, 100);\n        $right_cars[] = rand(0,\
    \ 100);\n    }\n    sort($left_cars);\n    sort($right_cars);\n    $left_index\
    \ = 0;\n    $right_index = 0;\n    $collisions = 0;\n    while ($left_index <\
    \ $n && $right_index < $n) {\n        if ($left_cars[$left_index] < $right_cars[$right_index])\
    \ {\n            $left_index++;\n        } else {\n            $collisions +=\
    \ $left_index;\n            $right_index++;\n        }\n    }\n    return $collisions;\n\
    }\n\necho car_race_collision(10);", "    $left_to_right = [];\n    $right_to_left\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = $i;\n \
    \       $right_to_left[] = $i;\n    }\n    $collisions = 0;\n    while (count($left_to_right)\
    \ > 0 && count($right_to_left) > 0) {\n        $left_car = array_shift($left_to_right);\n\
    \        $right_car = array_shift($right_to_left);\n        if ($left_car == $right_car)\
    \ {\n            $collisions++;\n        }\n    }\n    return $collisions;\n}\n\
    \necho car_race_collision(10);", "\t$collisions = 0;\n\t$left_to_right = array();\n\
    \t$right_to_left = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$left_to_right[$i]\
    \ = $i;\n\t\t$right_to_left[$i] = $n - $i - 1;\n\t}\n\tfor ($i = 0; $i < $n; $i++)\
    \ {\n\t\tfor ($j = 0; $j < $n; $j++) {\n\t\t\tif ($left_to_right[$i] == $right_to_left[$j])\
    \ {\n\t\t\t\t$collisions++;\n\t\t\t}\n\t\t}\n\t}\n\treturn $collisions;\n}\n\n\
    echo car_race_collision(10);", "    $collisions = 0;\n    $left_to_right = [];\n\
    \    $right_to_left = [];\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[]\
    \ = $i;\n        $right_to_left[] = $n - $i - 1;\n    }\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($left_to_right[$i]\
    \ == $right_to_left[$j]) {\n                $collisions++;\n            }\n  \
    \      }\n    }\n    return $collisions;\n}\n\necho car_race_collision(4);", " \
    \   $collisions = 0;\n    $left_cars = array();\n    $right_cars = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $left_cars[$i] = $i;\n        $right_cars[$i]\
    \ = $i;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n;\
    \ $j++) {\n            if ($left_cars[$i] == $right_cars[$j]) {\n            \
    \    $collisions++;\n            }\n        }\n    }\n    return $collisions;\n\
    }\n\n/* Given a string, return the number of times the string contains the substring\n\
    \"ab\".  For example, if the string is \"abababab\", the function should return\
    \ 4.\nIf the string is \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "    $collisions = 0;\n    $cars = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $cars[$i] = array(\n            'direction' => 'left',\n            'position'\
    \ => $i\n        );\n    }\n    for ($i = 0; $i < $n; $i++) {\n        $cars[$i\
    \ + $n] = array(\n            'direction' => 'right',\n            'position'\
    \ => $i\n        );\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $n; $j++) {\n            if ($cars[$i]['direction'] == 'left' && $cars[$j]['direction']\
    \ == 'right') {\n                if ($cars[$i]['position'] == $cars[$j]['position'])\
    \ {\n                    $collisions++;\n                }\n            }\n  \
    \      }\n    }\n    return $collisions;\n}\n\necho car_race_collision(3);", " \
    \   $collisions = 0;\n    $left_cars = array();\n    $right_cars = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $left_cars[$i] = $i;\n        $right_cars[$i]\
    \ = $i;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n;\
    \ $j++) {\n            if ($left_cars[$i] == $right_cars[$j]) {\n            \
    \    $collisions++;\n            }\n        }\n    }\n    return $collisions;\n\
    }\n\necho car_race_collision(10);", "    $collisions = 0;\n    $left_cars = [];\n\
    \    $right_cars = [];\n    for ($i = 0; $i < $n; $i++) {\n        $left_cars[]\
    \ = $i;\n        $right_cars[] = $i;\n    }\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $n; $j++) {\n            if ($left_cars[$i] == $right_cars[$j])\
    \ {\n                $collisions++;\n            }\n        }\n    }\n    return\
    \ $collisions;\n}\n\necho car_race_collision(5);", "    $left_cars = array();\n\
    \    $right_cars = array();\n    for ($i = 0; $i < $n; $i++) {\n        $left_cars[$i]\
    \ = rand(0, $n);\n        $right_cars[$i] = rand(0, $n);\n    }\n    sort($left_cars);\n\
    \    sort($right_cars);\n    $left_index = 0;\n    $right_index = 0;\n    $collisions\
    \ = 0;\n    while ($left_index < $n && $right_index < $n) {\n        if ($left_cars[$left_index]\
    \ < $right_cars[$right_index]) {\n            $left_index++;\n        } else {\n\
    \            $collisions += $left_index;\n            $right_index++;\n      \
    \  }\n    }\n    return $collisions;\n}\n\necho car_race_collision(10);", "  \
    \  $left_to_right = range(1, $n);\n    $right_to_left = range($n, 1);\n    $collisions\
    \ = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($left_to_right[$i] > $right_to_left[$i])\
    \ {\n            $collisions++;\n        }\n    }\n    return $collisions;\n}\n\
    \necho car_race_collision(5);", "    $left = array();\n    $right = array();\n\
    \    $collision = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $left[$i] = $i;\n\
    \        $right[$i] = $n - $i - 1;\n    }\n    for ($i = 0; $i < $n; $i++) {\n\
    \        for ($j = 0; $j < $n; $j++) {\n            if ($left[$i] == $right[$j])\
    \ {\n                $collision++;\n            }\n        }\n    }\n    return\
    \ $collision;\n}\n\necho car_race_collision(5);", "    $collisions = 0;\n    $left_to_right\
    \ = [];\n    $right_to_left = [];\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ $left_to_right[] = $i;\n        $right_to_left[] = $n - $i - 1;\n    }\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n     \
    \       if ($left_to_right[$i] == $right_to_left[$j]) {\n                $collisions++;\n\
    \            }\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(3);\n\
    echo car_race_collision(4);\necho car_race_collision(5);\necho car_race_collision(6);\n\
    echo car_race_collision(7);\necho car_race_collision(8);\necho car_race_collision(9);\n\
    echo car_race_collision(10);\necho car_race_collision(11);\necho car_race_collision(12);\n\
    echo car_race_collision(13);\necho car_race_collision(14);\necho car_race_collision(15);\n\
    echo car_race_collision(16);\necho car_race_collision(17);\necho car_race_collision(18);\n\
    echo car_race_collision(19);\necho car_race_collision(20);\necho car_race_collision(21);\n\
    echo car_race_collision(22);\necho car_race_collision(23);\necho car_race_collision(24);\n\
    echo car_race_collision(25);\necho car_race_collision(26);\necho car_race_collision(27);\n\
    echo car_race_collision(28);\necho car_race_collision(29);\necho car_race_collision(30);\n\
    echo car_race_collision(31);\necho car_race_collision(32);\necho car_race_collision(33);\n\
    echo car_race", "    $left_to_right = range(1, $n);\n    $right_to_left = range($n,\
    \ 1);\n    $collisions = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($left_to_right[$i]\
    \ == $right_to_left[$i]) {\n            $collisions++;\n        }\n    }\n   \
    \ return $collisions;\n}\n\necho car_race_collision(5);", "    $left = $right\
    \ = 0;\n    $collision = 0;\n    while ($left < $n && $right < $n) {\n       \
    \ if ($left == $right) {\n            $collision++;\n            $left++;\n  \
    \          $right++;\n        } else if ($left < $right) {\n            $left++;\n\
    \        } else {\n            $right++;\n        }\n    }\n    return $collision;\n\
    }\n\necho car_race_collision(5);", "  $left = array();\n  $right = array();\n\
    \  $collisions = 0;\n  for ($i = 0; $i < $n; $i++) {\n    $left[$i] = $i;\n  \
    \  $right[$i] = $n - $i - 1;\n  }\n  for ($i = 0; $i < $n; $i++) {\n    for ($j\
    \ = 0; $j < $n; $j++) {\n      if ($left[$i] == $right[$j]) {\n        $collisions++;\n\
    \      }\n    }\n  }\n  return $collisions;\n}\n\necho car_race_collision(5);",
  "    $collisions = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $n; $j++) {\n            if ($i == $j) {\n                $collisions++;\n\
    \            }\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(10);\n",
  "    $left = [];\n    $right = [];\n    for ($i = 0; $i < $n; $i++) {\n        $left[$i]\
    \ = $i;\n        $right[$i] = $i;\n    }\n    $collision = 0;\n    while (count($left)\
    \ > 0 && count($right) > 0) {\n        $left_car = array_shift($left);\n     \
    \   $right_car = array_shift($right);\n        if ($left_car == $right_car) {\n\
    \            $collision++;\n        } else {\n            array_push($left, $left_car);\n\
    \            array_push($right, $right_car);\n        }\n    }\n    return $collision;\n\
    }\n\necho car_race_collision(4);", "    $collisions = 0;\n    $left_to_right =\
    \ $right_to_left = range(1, $n);\n    while (count($left_to_right) > 0 && count($right_to_left)\
    \ > 0) {\n        $left_to_right_car = array_shift($left_to_right);\n        $right_to_left_car\
    \ = array_pop($right_to_left);\n        if ($left_to_right_car == $right_to_left_car)\
    \ {\n            $collisions++;\n        }\n    }\n    return $collisions;\n}\n\
    \n/*\n * Imagine a road that's a perfectly straight infinitely long line.\n *\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    \ * are driving right to left.   The two sets of cars start out being very far\
    \ from\n * each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n * when a car that's moving left to right hits a car that's moving\
    \ right to left.\n * However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n * in their trajectory as if they did not collide.\n\
    \ * This function outputs the number of such collisions.\n *\n * @param int $n\n\
    \ * @return int\n */", "    $left_to_right = range(1, $n);\n    $right_to_left\
    \ = range($n, 1);\n    $collisions = 0;\n    for ($i = 0; $i < $n; $i++) {\n \
    \       if ($left_to_right[$i] == $right_to_left[$i]) {\n            $collisions++;\n\
    \        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5);\n",
  "    $collisions = 0;\n    $left_to_right = range(1, $n);\n    $right_to_left =\
    \ range($n, 1);\n    $left_to_right_index = 0;\n    $right_to_left_index = 0;\n\
    \    while ($left_to_right_index < $n && $right_to_left_index < $n) {\n      \
    \  if ($left_to_right[$left_to_right_index] < $right_to_left[$right_to_left_index])\
    \ {\n            $left_to_right_index++;\n        } else {\n            $right_to_left_index++;\n\
    \            $collisions += $left_to_right_index;\n        }\n    }\n    return\
    \ $collisions;\n}\n\n/* Given a string, return the number of times that the same\
    \ character appears\nconsecutively. */", "    $collisions = 0;\n    $left_to_right\
    \ = range(1, $n);\n    $right_to_left = range($n, 1);\n    foreach ($left_to_right\
    \ as $left_car) {\n        foreach ($right_to_left as $right_car) {\n        \
    \    if ($left_car === $right_car) {\n                $collisions++;\n       \
    \     }\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5);",
  "    $left = array();\n    $right = array();\n    $collisions = 0;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $left[$i] = rand(0, $n);\n        $right[$i]\
    \ = rand(0, $n);\n    }\n    sort($left);\n    sort($right);\n    $i = 0;\n  \
    \  $j = 0;\n    while ($i < $n && $j < $n) {\n        if ($left[$i] < $right[$j])\
    \ {\n            $i++;\n        } else if ($left[$i] > $right[$j]) {\n       \
    \     $j++;\n        } else {\n            $collisions++;\n            $i++;\n\
    \            $j++;\n        }\n    }\n    return $collisions;\n}\n\n$n = rand(0,\
    \ 100);\necho \"Number of cars: $n\\n\";\necho \"Number of collisions: \" . car_race_collision($n)\
    \ . \"\\n\";", "\t$collisions = 0;\n\t$left_cars = array();\n\t$right_cars = array();\n\
    \tfor ($i = 0; $i < $n; $i++) {\n\t\t$left_cars[$i] = $i;\n\t\t$right_cars[$i]\
    \ = $i;\n\t}\n\tfor ($i = 0; $i < $n; $i++) {\n\t\tfor ($j = 0; $j < $n; $j++)\
    \ {\n\t\t\tif ($left_cars[$i] == $right_cars[$j]) {\n\t\t\t\t$collisions++;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn $collisions;\n}\n\necho car_race_collision(3);", " \
    \   $left_to_right = range(1, $n);\n    $right_to_left = range($n, 1);\n    $collisions\
    \ = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++)\
    \ {\n            if ($left_to_right[$i] == $right_to_left[$j]) {\n           \
    \     $collisions++;\n            }\n        }\n    }\n    return $collisions;\n\
    }\n\n/* Imagine a road that's a perfectly straight infinitely long line.\nn cars\
    \ are driving left to right;  simultaneously, a different set of n cars\nare driving\
    \ right to left.   The two sets of cars start out being very far from\neach other.\
    \  All cars move in the same speed.  Two cars are said to collide\nwhen a car\
    \ that's moving left to right hits a car that's moving right to left.\nHowever,\
    \ the cars are infinitely sturdy and strong; as a result, they continue moving\n\
    in their trajectory as if they did not collide.\nThis function outputs the number\
    \ of such collisions.*/", "    $left_to_right = range(1, $n);\n    $right_to_left\
    \ = range($n, 1);\n    $collisions = 0;\n    for ($i = 0; $i < $n; $i++) {\n \
    \       if ($left_to_right[$i] > $right_to_left[$i]) {\n            $collisions++;\n\
    \        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5);",
  "    $left = $right = array();\n    for ($i = 0; $i < $n; $i++) {\n        $left[]\
    \ = $i;\n        $right[] = $i;\n    }\n    $collisions = 0;\n    while (!empty($left)\
    \ && !empty($right)) {\n        $left_car = array_shift($left);\n        $right_car\
    \ = array_shift($right);\n        if ($left_car == $right_car) {\n           \
    \ $collisions++;\n        } else {\n            array_unshift($left, $left_car);\n\
    \            array_unshift($right, $right_car);\n        }\n    }\n    return\
    \ $collisions;\n}\n\necho car_race_collision(5);\necho \"\\n\";\necho car_race_collision(10);\n\
    echo \"\\n\";\necho car_race_collision(100);\necho \"\\n\";\necho car_race_collision(1000);\n\
    echo \"\\n\";\necho car_race_collision(10000);\necho \"\\n\";\necho car_race_collision(100000);\n\
    echo \"\\n\";\necho car_race_collision(1000000);\necho \"\\n\";\necho car_race_collision(10000000);\n\
    echo \"\\n\";\necho car_race_collision(100000000);\necho \"\\n\";\necho car_race_collision(1000000000);\n\
    echo \"\\n\";\necho car_race_collision(10000000000);\necho \"\\n\";\necho car_race_collision(100000000000);\n\
    echo \"\\n\";\necho car_race_collision(1000000000000);\necho \"\\n\";\necho car_race_collision(10000000000000);\n\
    echo \"\\n\";\necho car_race_collision(100000000000000);\necho \"\\n\";\necho\
    \ car_race_collision(1000000000000000);\necho \"\\n\";\necho car_race_collision(10000000000000000);\n\
    echo \"\\n\";\necho car_race_collision(100000000000000000);\necho \"\\n\";\necho\
    \ car_race_collision(1000000000000000000);\necho \"\\n\";\necho car_race_collision(10000000000000000000);\n\
    echo \"\\n", "    $left_to_right = array();\n    $right_to_left = array();\n \
    \   $collisions = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[]\
    \ = $i;\n        $right_to_left[] = $i;\n    }\n    foreach ($left_to_right as\
    \ $left) {\n        foreach ($right_to_left as $right) {\n            if ($left\
    \ == $right) {\n                $collisions++;\n            }\n        }\n   \
    \ }\n    return $collisions;\n}\n\necho car_race_collision(2);", "    $left_to_right\
    \ = [];\n    $right_to_left = [];\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions\
    \ = 0;\n    while (count($left_to_right) > 0) {\n        $car_left_to_right =\
    \ array_shift($left_to_right);\n        $car_right_to_left = array_pop($right_to_left);\n\
    \        if ($car_left_to_right == $car_right_to_left) {\n            $collisions++;\n\
    \        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(3) .\
    \ \"\\n\";\necho car_race_collision(4) . \"\\n\";\necho car_race_collision(5)\
    \ . \"\\n\";\necho car_race_collision(6) . \"\\n\";\necho car_race_collision(7)\
    \ . \"\\n\";\necho car_race_collision(8) . \"\\n\";\necho car_race_collision(9)\
    \ . \"\\n\";\necho car_race_collision(10) . \"\\n\";\necho car_race_collision(11)\
    \ . \"\\n\";\necho car_race_collision(12) . \"\\n\";\necho car_race_collision(13)\
    \ . \"\\n\";\necho car_race_collision(14) . \"\\n\";\necho car_race_collision(15)\
    \ . \"\\n\";\necho car_race_collision(16) . \"\\n\";\necho car_race_collision(17)\
    \ . \"\\n\";\necho car_race_collision(18) . \"\\n\";\necho car_race_collision(19)\
    \ . \"\\n\";\necho car_race_collision(20) . \"\\n\";\necho car_race_collision(21)\
    \ . \"\\n\";\necho car_race_collision(22) . \"\\n\";\necho car_race_collision(23)\
    \ . \"\\n\";\necho car_race_collision(24) . \"\\n\";\necho car_race", "    $left_to_right\
    \ = range(1, $n);\n    $right_to_left = range($n, 1);\n    $collisions = 0;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        if ($left_to_right[$i] == $right_to_left[$i])\
    \ {\n            $collisions++;\n        }\n    }\n    return $collisions;\n}\n\
    \n/* Given a string, return the number of times the string \"code\" appears in\
    \ the string.\nHowever, if the string \"code\" appears in the string, it should\
    \ not count the \"co\" or \"de\"\nthat are part of the string \"code\".  For example,\
    \ \"cozexxcope\" should return 2. */", "    $collision = 0;\n    $left_to_right\
    \ = range(1, $n);\n    $right_to_left = range($n, 1);\n    foreach ($left_to_right\
    \ as $key => $value) {\n        if ($value == $right_to_left[$key]) {\n      \
    \      $collision++;\n        }\n    }\n    return $collision;\n}\n\necho car_race_collision(5);",
  "    $left_to_right = [];\n    $right_to_left = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n \
    \   $collisions = 0;\n    while (count($left_to_right) > 0 && count($right_to_left)\
    \ > 0) {\n        $left_to_right_car = array_shift($left_to_right);\n        $right_to_left_car\
    \ = array_shift($right_to_left);\n        if ($left_to_right_car > $right_to_left_car)\
    \ {\n            $collisions++;\n        } else {\n            $left_to_right[]\
    \ = $left_to_right_car;\n            $right_to_left[] = $right_to_left_car;\n\
    \        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(3);\n\
    echo car_race_collision(4);\necho car_race_collision(5);\necho car_race_collision(6);\n\
    echo car_race_collision(7);\necho car_race_collision(8);\necho car_race_collision(9);\n\
    echo car_race_collision(10);\necho car_race_collision(11);\necho car_race_collision(12);\n\
    echo car_race_collision(13);\necho car_race_collision(14);\necho car_race_collision(15);\n\
    echo car_race_collision(16);\necho car_race_collision(17);\necho car_race_collision(18);\n\
    echo car_race_collision(19);\necho car_race_collision(20);\necho car_race_collision(21);\n\
    echo car_race_collision(22);\necho car_race_collision(23);\necho car_race_collision(24);\n\
    echo car_race_collision(25);\necho car_race_collision(26);\necho car_race_collision(27);\n\
    echo car_race_", "    $left_to_right = range(1, $n);\n    $right_to_left = range($n,\
    \ 1);\n    $collisions = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($left_to_right[$i]\
    \ == $right_to_left[$i]) {\n            $collisions++;\n        }\n    }\n   \
    \ return $collisions;\n}\n\necho car_race_collision(5);\necho \"\\n\";\necho car_race_collision(10);\n\
    echo \"\\n\";\necho car_race_collision(100);\necho \"\\n\";\necho car_race_collision(1000);\n\
    echo \"\\n\";\necho car_race_collision(10000);\necho \"\\n\";\necho car_race_collision(100000);\n\
    echo \"\\n\";\necho car_race_collision(1000000);\necho \"\\n\";\necho car_race_collision(10000000);\n\
    echo \"\\n\";\necho car_race_collision(100000000);\necho \"\\n\";\necho car_race_collision(1000000000);\n\
    echo \"\\n\";\necho car_race_collision(10000000000);\necho \"\\n\";\necho car_race_collision(100000000000);\n\
    echo \"\\n\";\necho car_race_collision(1000000000000);\necho \"\\n\";\necho car_race_collision(10000000000000);\n\
    echo \"\\n\";\necho car_race_collision(100000000000000);\necho \"\\n\";\necho\
    \ car_race_collision(1000000000000000);\necho \"\\n\";\necho car_race_collision(10000000000000000);\n\
    echo \"\\n\";\necho car_race_collision(100000000000000000);\necho \"\\n\";\necho\
    \ car_race_collision(1000000000000000000);\necho \"\\n\";\necho car_race_collision(10000000000000000000);\n\
    echo \"\\n\";\necho car_race_collision(100000000000000000000);\necho \"\\n\";\n\
    echo car_race_collision(1000000000000000000000);\necho \"\\n\";\necho car_race_collision(10000000000000000000000);\n\
    echo \"\\n\";\necho car_race_collision", "    $left = [];\n    $right = [];\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $left[$i] = $i;\n        $right[$i]\
    \ = $i;\n    }\n    $collision = 0;\n    while (count($left) > 0 && count($right)\
    \ > 0) {\n        $left_car = array_shift($left);\n        $right_car = array_shift($right);\n\
    \        if ($left_car == $right_car) {\n            $collision++;\n        }\
    \ else {\n            array_push($left, $left_car);\n            array_push($right,\
    \ $right_car);\n        }\n    }\n    return $collision;\n}\n\necho car_race_collision(5);",
  "\t$left_to_right = range(1, $n);\n\t$right_to_left = range($n, 1);\n\t$collisions\
    \ = 0;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\tfor ($j = 0; $j < $n; $j++) {\n\t\
    \t\tif ($left_to_right[$i] == $right_to_left[$j]) {\n\t\t\t\t$collisions++;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn $collisions;\n}\n\necho car_race_collision(10);",
  "  $left_to_right = array();\n  $right_to_left = array();\n  for ($i = 0; $i < $n;\
    \ $i++) {\n    $left_to_right[] = $i;\n    $right_to_left[] = $i;\n  }\n  $collisions\
    \ = 0;\n  while (count($left_to_right) > 0 && count($right_to_left) > 0) {\n \
    \   $left_car = array_shift($left_to_right);\n    $right_car = array_shift($right_to_left);\n\
    \    if ($left_car == $right_car) {\n      $collisions++;\n    }\n  }\n  return\
    \ $collisions;\n}\n\necho car_race_collision(1) . \"\\n\";\necho car_race_collision(2)\
    \ . \"\\n\";\necho car_race_collision(3) . \"\\n\";\necho car_race_collision(4)\
    \ . \"\\n\";\necho car_race_collision(5) . \"\\n\";\necho car_race_collision(6)\
    \ . \"\\n\";\necho car_race_collision(7) . \"\\n\";\necho car_race_collision(8)\
    \ . \"\\n\";\necho car_race_collision(9) . \"\\n\";\necho car_race_collision(10)\
    \ . \"\\n\";\necho car_race_collision(11) . \"\\n\";\necho car_race_collision(12)\
    \ . \"\\n\";\necho car_race_collision(13) . \"\\n\";\necho car_race_collision(14)\
    \ . \"\\n\";\necho car_race_collision(15) . \"\\n\";\necho car_race_collision(16)\
    \ . \"\\n\";\necho car_race_collision(17) . \"\\n\";\necho car_race_collision(18)\
    \ . \"\\n\";\necho car_race_collision(19) . \"\\n\";\necho car_race_collision(20)\
    \ . \"\\n\";\necho car_race_collision(21) . \"\\n\";\necho car_race_collision(22)\
    \ . \"\\n\";\necho car_race_collision", "\t$collision = 0;\n\tfor ($i = 0; $i\
    \ < $n; $i++) {\n\t\tfor ($j = 0; $j < $n; $j++) {\n\t\t\t$collision++;\n\t\t\
    }\n\t}\n\treturn $collision;\n}\n\n/* Given a string, return the number of times\
    \ that the string \"code\" appears anywhere in the given string, except we'll\
    \ accept any letter for the 'd', so \"cope\" and \"cooe\" count.\ncountCode(\"\
    aaacodebbb\") \u2192 1\ncountCode(\"codexxcode\") \u2192 2\ncountCode(\"cozexxcope\"\
    ) \u2192 2 */", "\t$left = array();\n\t$right = array();\n\tfor ($i = 0; $i <\
    \ $n; $i++) {\n\t\t$left[$i] = $i;\n\t\t$right[$i] = $i;\n\t}\n\t$collision =\
    \ 0;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\tfor ($j = 0; $j < $n; $j++) {\n\t\t\
    \tif ($left[$i] == $right[$j]) {\n\t\t\t\t$collision++;\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn $collision;\n}\n\necho car_race_collision(3);", "    $left_to_right =\
    \ array();\n    $right_to_left = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions\
    \ = 0;\n    while (count($left_to_right) > 0 && count($right_to_left) > 0) {\n\
    \        $left_to_right_car = array_shift($left_to_right);\n        $right_to_left_car\
    \ = array_shift($right_to_left);\n        if ($left_to_right_car == $right_to_left_car)\
    \ {\n            $collisions++;\n        }\n    }\n    return $collisions;\n}\n\
    \necho car_race_collision(3);\necho \"\\n\";\necho car_race_collision(4);\necho\
    \ \"\\n\";\necho car_race_collision(5);\necho \"\\n\";\necho car_race_collision(6);\n\
    echo \"\\n\";\necho car_race_collision(7);\necho \"\\n\";\necho car_race_collision(8);\n\
    echo \"\\n\";\necho car_race_collision(9);\necho \"\\n\";\necho car_race_collision(10);\n\
    echo \"\\n\";\necho car_race_collision(11);\necho \"\\n\";\necho car_race_collision(12);\n\
    echo \"\\n\";\necho car_race_collision(13);\necho \"\\n\";\necho car_race_collision(14);\n\
    echo \"\\n\";\necho car_race_collision(15);\necho \"\\n\";\necho car_race_collision(16);\n\
    echo \"\\n\";\necho car_race_collision(17);\necho \"\\n\";\necho car_race_collision(18);\n\
    echo \"\\n\";\necho car_race_collision(19);\necho \"\\n\";\necho car_race_collision(20);\n\
    echo \"\\n\";\necho car_race_collision(21);\necho \"\\n\";\necho car_race_collision(22);\n\
    echo \"\\n\";\necho", "    $left_cars = array();\n    $right_cars = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $left_cars[] = $i;\n        $right_cars[]\
    \ = $i;\n    }\n    $collisions = 0;\n    while (count($left_cars) > 0 && count($right_cars)\
    \ > 0) {\n        $left_car = array_shift($left_cars);\n        $right_car = array_shift($right_cars);\n\
    \        if ($left_car == $right_car) {\n            $collisions++;\n        }\
    \ else {\n            array_unshift($left_cars, $left_car);\n            array_unshift($right_cars,\
    \ $right_car);\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(10)\
    \ . \"\\n\";\necho car_race_collision(100) . \"\\n\";\necho car_race_collision(1000)\
    \ . \"\\n\";\necho car_race_collision(10000) . \"\\n\";\necho car_race_collision(100000)\
    \ . \"\\n\";\necho car_race_collision(1000000) . \"\\n\";\necho car_race_collision(10000000)\
    \ . \"\\n\";\necho car_race_collision(100000000) . \"\\n\";\necho car_race_collision(1000000000)\
    \ . \"\\n\";\necho car_race_collision(10000000000) . \"\\n\";\necho car_race_collision(100000000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000000) . \"\\n\";\necho car_race_collision(10000000000000)\
    \ . \"\\n\";\necho car_race_collision(100000000000000) . \"\\n\";\necho car_race_collision(1000000000000000)\
    \ . \"\\n\";\necho car_race_collision(10000000000000000) . \"\\n\";\necho car_race_collision(100000000000000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000000000000) . \"\\n\";\necho car_race_collision(10000000000000000000)\
    \ . \"\\n\";\necho car_race_", "    $left = $right = 0;\n    $collisions = 0;\n\
    \    while ($left < $n && $right < $n) {\n        if ($left == $right) {\n   \
    \         $collisions++;\n            $left++;\n            $right++;\n      \
    \  } else if ($left < $right) {\n            $left++;\n        } else {\n    \
    \        $right++;\n        }\n    }\n    return $collisions;\n}\n\n/*\n * \n\
    \ */", "    $collision = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j\
    \ = 0; $j < $n; $j++) {\n            $collision++;\n        }\n    }\n    return\
    \ $collision;\n}\n\necho car_race_collision(3);\necho car_race_collision(4);\n\
    echo car_race_collision(5);\necho car_race_collision(6);\necho car_race_collision(7);\n\
    echo car_race_collision(8);\necho car_race_collision(9);\necho car_race_collision(10);\n\
    echo car_race_collision(11);\necho car_race_collision(12);\necho car_race_collision(13);\n\
    echo car_race_collision(14);\necho car_race_collision(15);\necho car_race_collision(16);\n\
    echo car_race_collision(17);\necho car_race_collision(18);\necho car_race_collision(19);\n\
    echo car_race_collision(20);\necho car_race_collision(21);\necho car_race_collision(22);\n\
    echo car_race_collision(23);\necho car_race_collision(24);\necho car_race_collision(25);\n\
    echo car_race_collision(26);\necho car_race_collision(27);\necho car_race_collision(28);\n\
    echo car_race_collision(29);\necho car_race_collision(30);\necho car_race_collision(31);\n\
    echo car_race_collision(32);\necho car_race_collision(33);\necho car_race_collision(34);\n\
    echo car_race_collision(35);\necho car_race_collision(36);\necho car_race_collision(37);\n\
    echo car_race_collision(38);\necho car_race_collision(39);\necho car_race_collision(40);\n\
    echo car_race_collision(41);\necho car_race_collision(42);\necho car_race_", " \
    \   $left_to_right = range(1, $n);\n    $right_to_left = range($n, 1);\n    $collisions\
    \ = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($left_to_right[$i] == $right_to_left[$i])\
    \ {\n            $collisions++;\n        }\n    }\n    return $collisions;\n}\n\
    \necho car_race_collision(3); // 1\necho car_race_collision(4); // 2\necho car_race_collision(5);\
    \ // 3\necho car_race_collision(6); // 4\necho car_race_collision(7); // 5\necho\
    \ car_race_collision(8); // 6\necho car_race_collision(9); // 7\necho car_race_collision(10);\
    \ // 8\necho car_race_collision(11); // 9\necho car_race_collision(12); // 10\n\
    echo car_race_collision(13); // 11\necho car_race_collision(14); // 12\necho car_race_collision(15);\
    \ // 13\necho car_race_collision(16); // 14\necho car_race_collision(17); // 15\n\
    echo car_race_collision(18); // 16\necho car_race_collision(19); // 17\necho car_race_collision(20);\
    \ // 18\necho car_race_collision(21); // 19\necho car_race_collision(22); // 20\n\
    echo car_race_collision(23); // 21\necho car_race_collision(24); // 22\necho car_race_collision(25);\
    \ // 23\necho car_race_collision(26); // 24\necho car_race_collision(27); // 25\n\
    echo car_race_collision(28); // 26\necho car_race_collision(29); // 27\necho car_race_collision(30);\
    \ // 28\necho car_race_collision(31); // 29\necho car_race_collision(32); // 30\n\
    echo car_race_collision(33); // 31\necho car_race", "  $collisions = 0;\n  $left_to_right\
    \ = array();\n  $right_to_left = array();\n  for ($i = 0; $i < $n; $i++) {\n \
    \   $left_to_right[$i] = $i;\n    $right_to_left[$i] = $n - $i - 1;\n  }\n  for\
    \ ($i = 0; $i < $n; $i++) {\n    for ($j = 0; $j < $n; $j++) {\n      if ($left_to_right[$i]\
    \ == $right_to_left[$j]) {\n        $collisions++;\n      }\n    }\n  }\n  return\
    \ $collisions;\n}\n\necho car_race_collision(4);", "\t$collisions = 0;\n\t$left_cars\
    \ = array();\n\t$right_cars = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t\
    $left_cars[$i] = $i;\n\t\t$right_cars[$i] = $i;\n\t}\n\tfor ($i = 0; $i < $n;\
    \ $i++) {\n\t\tfor ($j = 0; $j < $n; $j++) {\n\t\t\tif ($left_cars[$i] == $right_cars[$j])\
    \ {\n\t\t\t\t$collisions++;\n\t\t\t}\n\t\t}\n\t}\n\treturn $collisions;\n}\n\n\
    echo car_race_collision(5);", "    $collisions = 0;\n    $left = $right = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $left[] = $i;\n        $right[] =\
    \ $i;\n    }\n    while (count($left) > 0 && count($right) > 0) {\n        $left_car\
    \ = array_shift($left);\n        $right_car = array_pop($right);\n        if ($left_car\
    \ == $right_car) {\n            $collisions++;\n        }\n    }\n    return $collisions;\n\
    }\n\n$n = 5;\necho \"Number of collisions: \" . car_race_collision($n) . \"\\\
    n\";", "    $left_to_right = array();\n    $right_to_left = array();\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = $i;\n        $right_to_left[]\
    \ = $i;\n    }\n    $collisions = 0;\n    while (count($left_to_right) > 0 &&\
    \ count($right_to_left) > 0) {\n        $left_to_right_car = array_shift($left_to_right);\n\
    \        $right_to_left_car = array_shift($right_to_left);\n        if ($left_to_right_car\
    \ == $right_to_left_car) {\n            $collisions++;\n        }\n    }\n   \
    \ return $collisions;\n}\n\necho car_race_collision(3);", "    $left_to_right\
    \ = array();\n    $right_to_left = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions\
    \ = 0;\n    while (count($left_to_right) > 0 && count($right_to_left) > 0) {\n\
    \        $left_car = array_shift($left_to_right);\n        $right_car = array_shift($right_to_left);\n\
    \        if ($left_car == $right_car) {\n            $collisions++;\n        }\
    \ else {\n            $left_to_right[] = $left_car;\n            $right_to_left[]\
    \ = $right_car;\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(3);",
  "    $left_to_right = range(1, $n);\n    $right_to_left = range($n, 1);\n    $collisions\
    \ = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++)\
    \ {\n            if ($left_to_right[$i] == $right_to_left[$j]) {\n           \
    \     $collisions++;\n            }\n        }\n    }\n    return $collisions;\n\
    }\n\necho car_race_collision(5);", "    $left_to_right = array();\n    $right_to_left\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = $i;\n\
    \        $right_to_left[] = $i;\n    }\n    $collisions = 0;\n    while (count($left_to_right)\
    \ > 0 && count($right_to_left) > 0) {\n        $left_car = array_shift($left_to_right);\n\
    \        $right_car = array_shift($right_to_left);\n        if ($left_car == $right_car)\
    \ {\n            $collisions++;\n        } else {\n            $left_to_right[]\
    \ = $left_car;\n            $right_to_left[] = $right_car;\n        }\n    }\n\
    \    return $collisions;\n}\n\necho car_race_collision(3) . \"\\n\";\necho car_race_collision(5)\
    \ . \"\\n\";\necho car_race_collision(10) . \"\\n\";\necho car_race_collision(100)\
    \ . \"\\n\";\necho car_race_collision(1000) . \"\\n\";\necho car_race_collision(10000)\
    \ . \"\\n\";\necho car_race_collision(100000) . \"\\n\";\necho car_race_collision(1000000)\
    \ . \"\\n\";\necho car_race_collision(10000000) . \"\\n\";\necho car_race_collision(100000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000) . \"\\n\";\necho car_race_collision(10000000000)\
    \ . \"\\n\";\necho car_race_collision(100000000000) . \"\\n\";\necho car_race_collision(1000000000000)\
    \ . \"\\n\";\necho car_race_collision(10000000000000) . \"\\n\";\necho car_race_collision(100000000000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000000000) . \"\\n\";\necho car_race_collision(10000000000000000)\
    \ . \"\\n\";\necho car_race_collision(100000000000000000)", "    $left = array();\n\
    \    $right = array();\n    for ($i = 0; $i < $n; $i++) {\n        $left[] = $i;\n\
    \        $right[] = $i;\n    }\n    $collision = 0;\n    while (count($left) !=\
    \ 0 && count($right) != 0) {\n        $l = array_shift($left);\n        $r = array_pop($right);\n\
    \        if ($l == $r) {\n            $collision++;\n        }\n    }\n    return\
    \ $collision;\n}\n\necho car_race_collision(3);\necho \"\\n\";\necho car_race_collision(4);\n\
    echo \"\\n\";\necho car_race_collision(5);\necho \"\\n\";\necho car_race_collision(6);\n\
    echo \"\\n\";\necho car_race_collision(7);\necho \"\\n\";\necho car_race_collision(8);\n\
    echo \"\\n\";\necho car_race_collision(9);\necho \"\\n\";\necho car_race_collision(10);\n\
    echo \"\\n\";\necho car_race_collision(11);\necho \"\\n\";\necho car_race_collision(12);\n\
    echo \"\\n\";\necho car_race_collision(13);\necho \"\\n\";\necho car_race_collision(14);\n\
    echo \"\\n\";\necho car_race_collision(15);\necho \"\\n\";\necho car_race_collision(16);\n\
    echo \"\\n\";\necho car_race_collision(17);\necho \"\\n\";\necho car_race_collision(18);\n\
    echo \"\\n\";\necho car_race_collision(19);\necho \"\\n\";\necho car_race_collision(20);\n\
    echo \"\\n\";\necho car_race_collision(21);\necho \"\\n\";\necho car_race_collision(22);\n\
    echo \"\\n\";\necho car_race_collision(23);\necho \"\\n\";\necho car_race_collision(24);\n\
    echo \"\\n\";\necho car_race_collision(25);\necho \"\\n\";\necho car_race_collision(26",
  "    $collisions = 0;\n    $left_cars = range(1, $n);\n    $right_cars = range($n,\
    \ 1);\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++)\
    \ {\n            if ($left_cars[$i] == $right_cars[$j]) {\n                $collisions++;\n\
    \            }\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5);\n\
    \n/*\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n", "    $left = array();\n    $right = array();\n    $collision = 0;\n  \
    \  for ($i = 0; $i < $n; $i++) {\n        $left[$i] = $i;\n        $right[$i]\
    \ = $n - $i - 1;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $n; $j++) {\n            if ($left[$i] == $right[$j]) {\n          \
    \      $collision++;\n            }\n        }\n    }\n    return $collision;\n\
    }\n\necho car_race_collision(5);", "    $left_to_right = array();\n    $right_to_left\
    \ = array();\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = $i;\n\
    \        $right_to_left[] = $i;\n    }\n    $collisions = 0;\n    while (count($left_to_right)\
    \ > 0 && count($right_to_left) > 0) {\n        $left_car = array_shift($left_to_right);\n\
    \        $right_car = array_shift($right_to_left);\n        if ($left_car == $right_car)\
    \ {\n            $collisions++;\n        } else {\n            $left_to_right[]\
    \ = $left_car;\n            $right_to_left[] = $right_car;\n        }\n    }\n\
    \    return $collisions;\n}\n\necho car_race_collision(10);", "    $collisions\
    \ = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++)\
    \ {\n            if ($i < $j) {\n                $collisions++;\n            }\n\
    \        }\n    }\n    return $collisions;\n}\n\n/*\n * This function outputs\
    \ the number of such collisions.\n * @param int $n\n * @return int\n */", "  $left_to_right\
    \ = array();\n  $right_to_left = array();\n  for ($i = 0; $i < $n; $i++) {\n \
    \   $left_to_right[] = $i;\n    $right_to_left[] = $i;\n  }\n  $collisions = 0;\n\
    \  while (count($left_to_right) > 0 && count($right_to_left) > 0) {\n    $left_to_right_car\
    \ = array_shift($left_to_right);\n    $right_to_left_car = array_shift($right_to_left);\n\
    \    if ($left_to_right_car == $right_to_left_car) {\n      $collisions++;\n \
    \   }\n  }\n  return $collisions;\n}\n\n/* Given a string, return the number of\
    \ times that the same character appears\nconsecutively.  For example, \"aabbcc\"\
    \ returns 2, because \"aa\" and \"cc\" are\nconsecutive occurrences of the same\
    \ character.  \"aabbccdd\" returns 4, because\n\"aaaa\" and \"cccc\" are consecutive\
    \ occurrences of the same character. */", "    $left_to_right = range(1, $n);\n\
    \    $right_to_left = range($n, 1);\n    $collisions = 0;\n    $i = 0;\n    $j\
    \ = 0;\n    while ($i < $n && $j < $n) {\n        if ($left_to_right[$i] < $right_to_left[$j])\
    \ {\n            $i++;\n        } else if ($left_to_right[$i] > $right_to_left[$j])\
    \ {\n            $j++;\n        } else {\n            $collisions++;\n       \
    \     $i++;\n            $j++;\n        }\n    }\n    return $collisions;\n}\n\
    \necho car_race_collision(5);", "    $l = array();\n    $r = array();\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        $l[] = $i;\n        $r[] = $i;\n    }\n \
    \   $collisions = 0;\n    while (count($l) > 0 && count($r) > 0) {\n        $l_car\
    \ = array_shift($l);\n        $r_car = array_shift($r);\n        if ($l_car ==\
    \ $r_car) {\n            $collisions++;\n        } else {\n            $l[] =\
    \ $l_car;\n            $r[] = $r_car;\n        }\n    }\n    return $collisions;\n\
    }\n\necho car_race_collision(10);\necho \"\\n\";\necho car_race_collision(20);\n\
    echo \"\\n\";\necho car_race_collision(30);\necho \"\\n\";\necho car_race_collision(40);\n\
    echo \"\\n\";\necho car_race_collision(50);\necho \"\\n\";\necho car_race_collision(60);\n\
    echo \"\\n\";\necho car_race_collision(70);\necho \"\\n\";\necho car_race_collision(80);\n\
    echo \"\\n\";\necho car_race_collision(90);\necho \"\\n\";\necho car_race_collision(100);\n\
    echo \"\\n\";\necho car_race_collision(110);\necho \"\\n\";\necho car_race_collision(120);\n\
    echo \"\\n\";\necho car_race_collision(130);\necho \"\\n\";\necho car_race_collision(140);\n\
    echo \"\\n\";\necho car_race_collision(150);\necho \"\\n\";\necho car_race_collision(160);\n\
    echo \"\\n\";\necho car_race_collision(170);\necho \"\\n\";\necho car_race_collision(180);\n\
    echo \"\\n\";\necho car_race_collision(190);\necho \"\\n\";\necho car_race_collision(200);\n\
    echo \"\\n\";\necho car_race_collision(210);\necho \"\\n\";\necho car_race_coll",
  "    $left_to_right = array();\n    $right_to_left = array();\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $left_to_right[] = rand(0, $n);\n        $right_to_left[]\
    \ = rand(0, $n);\n    }\n    sort($left_to_right);\n    sort($right_to_left);\n\
    \    $left_to_right_index = 0;\n    $right_to_left_index = 0;\n    $collisions\
    \ = 0;\n    while ($left_to_right_index < $n && $right_to_left_index < $n) {\n\
    \        if ($left_to_right[$left_to_right_index] < $right_to_left[$right_to_left_index])\
    \ {\n            $left_to_right_index++;\n        } else {\n            $collisions\
    \ += $left_to_right_index;\n            $right_to_left_index++;\n        }\n \
    \   }\n    return $collisions;\n}\n\necho car_race_collision(10);", "    $left_to_right\
    \ = range(1, $n);\n    $right_to_left = range($n, 1);\n    $collisions = 0;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n  \
    \          if ($left_to_right[$i] == $right_to_left[$j]) {\n                $collisions++;\n\
    \            }\n        }\n    }\n    return $collisions;\n}\n\n/* Imagine a road\
    \ that's a perfectly straight infinitely long line.\nn cars are driving left to\
    \ right;  simultaneously, a different set of n cars\nare driving right to left.\
    \   The two sets of cars start out being very far from\neach other.  All cars\
    \ move in the same speed.  Two cars are said to collide\nwhen a car that's moving\
    \ left to right hits a car that's moving right to left.\nHowever, the cars are\
    \ infinitely sturdy and strong; as a result, they continue moving\nin their trajectory\
    \ as if they did not collide.\nThis function outputs the number of such collisions.*/",
  "    $left_to_right = array();\n    $right_to_left = array();\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $left_to_right[] = $i;\n        $right_to_left[] =\
    \ $i;\n    }\n    $collisions = 0;\n    while (count($left_to_right) > 0 && count($right_to_left)\
    \ > 0) {\n        $left_car = array_shift($left_to_right);\n        $right_car\
    \ = array_shift($right_to_left);\n        if ($left_car == $right_car) {\n   \
    \         $collisions++;\n        } else {\n            $left_to_right[] = $left_car;\n\
    \            $right_to_left[] = $right_car;\n        }\n    }\n    return $collisions;\n\
    }\n\necho car_race_collision(5);", "    $collisions = 0;\n    $left_cars = array();\n\
    \    $right_cars = array();\n    for ($i = 0; $i < $n; $i++) {\n        $left_cars[$i]\
    \ = rand(0, 100);\n        $right_cars[$i] = rand(0, 100);\n    }\n    sort($left_cars);\n\
    \    sort($right_cars);\n    $i = 0;\n    $j = 0;\n    while ($i < $n && $j <\
    \ $n) {\n        if ($left_cars[$i] < $right_cars[$j]) {\n            $i++;\n\
    \        } else {\n            $collisions++;\n            $j++;\n        }\n\
    \    }\n    return $collisions;\n}\n\necho car_race_collision(10);", "    $left\
    \ = array();\n    $right = array();\n    for ($i = 0; $i < $n; $i++) {\n     \
    \   $left[] = $i;\n        $right[] = $i;\n    }\n    $collision = 0;\n    while\
    \ (count($left) > 0 && count($right) > 0) {\n        $left_car = array_shift($left);\n\
    \        $right_car = array_shift($right);\n        if ($left_car == $right_car)\
    \ {\n            $collision++;\n        } else {\n            $left[] = $left_car;\n\
    \            $right[] = $right_car;\n        }\n    }\n    return $collision;\n\
    }\n\necho car_race_collision(3) . \"\\n\";\necho car_race_collision(5) . \"\\\
    n\";\necho car_race_collision(10) . \"\\n\";\necho car_race_collision(100) . \"\
    \\n\";\necho car_race_collision(1000) . \"\\n\";\necho car_race_collision(10000)\
    \ . \"\\n\";\necho car_race_collision(100000) . \"\\n\";\necho car_race_collision(1000000)\
    \ . \"\\n\";\necho car_race_collision(10000000) . \"\\n\";\necho car_race_collision(100000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000) . \"\\n\";\necho car_race_collision(10000000000)\
    \ . \"\\n\";\necho car_race_collision(100000000000) . \"\\n\";\necho car_race_collision(1000000000000)\
    \ . \"\\n\";\necho car_race_collision(10000000000000) . \"\\n\";\necho car_race_collision(100000000000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000000000) . \"\\n\";\necho car_race_collision(10000000000000000)\
    \ . \"\\n\";\necho car_race_collision(100000000000000000) . \"\\n\";\necho car_race_collision(1000000000000000000)\
    \ . \"\\n\";\necho car_race_collision(10000000000000000000) . \"\\n\";\necho",
  "    $collisions = 0;\n    $left = $right = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $left[$i] = $i;\n        $right[$i] = $n - $i - 1;\n    }\n    for\
    \ ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n         \
    \   if ($left[$i] > $right[$j]) {\n                $collisions++;\n          \
    \  }\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5);",
  "\t$left_to_right = array();\n\t$right_to_left = array();\n\tfor ($i = 0; $i < $n;\
    \ $i++) {\n\t\t$left_to_right[] = $i;\n\t\t$right_to_left[] = $i;\n\t}\n\t$collisions\
    \ = 0;\n\t$i = 0;\n\t$j = 0;\n\twhile ($i < $n && $j < $n) {\n\t\tif ($left_to_right[$i]\
    \ == $right_to_left[$j]) {\n\t\t\t$collisions++;\n\t\t\t$i++;\n\t\t\t$j++;\n\t\
    \t} else if ($left_to_right[$i] < $right_to_left[$j]) {\n\t\t\t$i++;\n\t\t} else\
    \ {\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $collisions;\n}\n\necho car_race_collision(5);\n",
  "    $collision = 0;\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j\
    \ < $n; $j++) {\n            $collision++;\n        }\n    }\n    return $collision;\n\
    }\n\n/*\n * This function outputs the number of such collisions.\n * @param $n\n\
    \ * @return int\n */", "  $collisions = 0;\n  $left_to_right = [];\n  $right_to_left\
    \ = [];\n  for ($i = 0; $i < $n; $i++) {\n    $left_to_right[] = $i;\n    $right_to_left[]\
    \ = $i;\n  }\n  while (count($left_to_right) > 0 && count($right_to_left) > 0)\
    \ {\n    $left_car = array_shift($left_to_right);\n    $right_car = array_shift($right_to_left);\n\
    \    if ($left_car == $right_car) {\n      $collisions++;\n    }\n  }\n  return\
    \ $collisions;\n}\n\n/* Imagine a road that's a perfectly straight infinitely\
    \ long line.\nn cars are driving left to right;  simultaneously, a different set\
    \ of n cars\nare driving right to left.   The two sets of cars start out being\
    \ very far from\neach other.  All cars move in the same speed.  Two cars are said\
    \ to collide\nwhen a car that's moving left to right hits a car that's moving\
    \ right to left.\nHowever, the cars are infinitely sturdy and strong; as a result,\
    \ they continue moving\nin their trajectory as if they did not collide.\nThis\
    \ function outputs the number of such collisions.*/", "    $left_to_right = range(1,\
    \ $n);\n    $right_to_left = range($n, 1);\n    $collisions = 0;\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        if ($left_to_right[$i] == $right_to_left[$i])\
    \ {\n            $collisions++;\n        }\n    }\n    return $collisions;\n}\n\
    \necho car_race_collision(5);", "    $collisions = 0;\n    $left_to_right = array();\n\
    \    $right_to_left = array();\n    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[$i]\
    \ = $i;\n        $right_to_left[$i] = $n - $i - 1;\n    }\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($left_to_right[$i]\
    \ == $right_to_left[$j]) {\n                $collisions++;\n            }\n  \
    \      }\n    }\n    return $collisions;\n}\n\necho car_race_collision(10) . \"\
    \\n\";\necho car_race_collision(100) . \"\\n\";\necho car_race_collision(1000)\
    \ . \"\\n\";\necho car_race_collision(10000) . \"\\n\";\necho car_race_collision(100000)\
    \ . \"\\n\";\necho car_race_collision(1000000) . \"\\n\";\necho car_race_collision(10000000)\
    \ . \"\\n\";\necho car_race_collision(100000000) . \"\\n\";\necho car_race_collision(1000000000)\
    \ . \"\\n\";\necho car_race_collision(10000000000) . \"\\n\";\necho car_race_collision(100000000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000000) . \"\\n\";\necho car_race_collision(10000000000000)\
    \ . \"\\n\";\necho car_race_collision(100000000000000) . \"\\n\";\necho car_race_collision(1000000000000000)\
    \ . \"\\n\";\necho car_race_collision(10000000000000000) . \"\\n\";\necho car_race_collision(100000000000000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000000000000) . \"\\n\";\necho car_race_collision(10000000000000000000)\
    \ . \"\\n\";\necho car_race_collision(100000000000000000000) . \"\\n\";\necho\
    \ car_race_collision(1", "  $collisions = 0;\n  $left_cars = [];\n  $right_cars\
    \ = [];\n  for ($i = 0; $i < $n; $i++) {\n    $left_cars[] = $i;\n    $right_cars[]\
    \ = $i;\n  }\n  while (count($left_cars) > 0 && count($right_cars) > 0) {\n  \
    \  $left_car = array_shift($left_cars);\n    $right_car = array_shift($right_cars);\n\
    \    if ($left_car == $right_car) {\n      $collisions++;\n    }\n  }\n  return\
    \ $collisions;\n}\n\necho car_race_collision(5) . \"\\n\";\necho car_race_collision(10)\
    \ . \"\\n\";\necho car_race_collision(100) . \"\\n\";\necho car_race_collision(1000)\
    \ . \"\\n\";\necho car_race_collision(10000) . \"\\n\";\necho car_race_collision(100000)\
    \ . \"\\n\";\necho car_race_collision(1000000) . \"\\n\";\necho car_race_collision(10000000)\
    \ . \"\\n\";\necho car_race_collision(100000000) . \"\\n\";\necho car_race_collision(1000000000)\
    \ . \"\\n\";\necho car_race_collision(10000000000) . \"\\n\";\necho car_race_collision(100000000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000000) . \"\\n\";\necho car_race_collision(10000000000000)\
    \ . \"\\n\";\necho car_race_collision(100000000000000) . \"\\n\";\necho car_race_collision(1000000000000000)\
    \ . \"\\n\";\necho car_race_collision(10000000000000000) . \"\\n\";\necho car_race_collision(100000000000000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000000000000) . \"\\n\";\necho car_race_collision(10000000000000000000)\
    \ . \"\\n\";\necho car_race_collision(100000000000000000000) . \"\\n\";\necho\
    \ car_race_collision(1000000000000000000000)", "    $left = [];\n    $right =\
    \ [];\n    $collision = 0;\n    for ($i = 0; $i < $n; $i++) {\n        $left[$i]\
    \ = $i;\n        $right[$i] = $n - $i - 1;\n    }\n    while (count($left) > 0\
    \ && count($right) > 0) {\n        $l = array_shift($left);\n        $r = array_shift($right);\n\
    \        if ($l > $r) {\n            $collision++;\n        } else {\n       \
    \     array_unshift($right, $r);\n            array_unshift($left, $l);\n    \
    \    }\n    }\n    return $collision;\n}\n\necho car_race_collision(5) . \"\\\
    n\";\necho car_race_collision(10) . \"\\n\";\necho car_race_collision(100) . \"\
    \\n\";\necho car_race_collision(1000) . \"\\n\";\necho car_race_collision(10000)\
    \ . \"\\n\";\necho car_race_collision(100000) . \"\\n\";\necho car_race_collision(1000000)\
    \ . \"\\n\";\necho car_race_collision(10000000) . \"\\n\";\necho car_race_collision(100000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000) . \"\\n\";\necho car_race_collision(10000000000)\
    \ . \"\\n\";\necho car_race_collision(100000000000) . \"\\n\";\necho car_race_collision(1000000000000)\
    \ . \"\\n\";\necho car_race_collision(10000000000000) . \"\\n\";\necho car_race_collision(100000000000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000000000) . \"\\n\";\necho car_race_collision(10000000000000000)\
    \ . \"\\n\";\necho car_race_collision(100000000000000000) . \"\\n\";\necho car_race_collision(1000000000000000000)\
    \ . \"\\n\";\necho car_race_collision(10000000000000000000) . \"\\n\";\necho car_race_collision(100000000000000000000)\
    \ .", "    $left_to_right = [];\n    $right_to_left = [];\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        $left_to_right[] = $i;\n        $right_to_left[] = $i;\n\
    \    }\n    $collisions = 0;\n    while (count($left_to_right) > 0 && count($right_to_left)\
    \ > 0) {\n        $left_car = array_shift($left_to_right);\n        $right_car\
    \ = array_shift($right_to_left);\n        if ($left_car == $right_car) {\n   \
    \         $collisions++;\n        }\n    }\n    return $collisions;\n}\n\n$n =\
    \ 10;\necho car_race_collision($n);", "    $left_to_right = range(1, $n);\n  \
    \  $right_to_left = range($n, 1);\n    $collisions = 0;\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n            if ($left_to_right[$i]\
    \ == $right_to_left[$j]) {\n                $collisions++;\n            }\n  \
    \      }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5);\n",
  "    $left = $right = 0;\n    $collision = 0;\n    while ($left < $n && $right <\
    \ $n) {\n        if ($left < $right) {\n            $left++;\n        } elseif\
    \ ($left > $right) {\n            $right++;\n        } else {\n            $left++;\n\
    \            $right++;\n            $collision++;\n        }\n    }\n    return\
    \ $collision;\n}\n\necho car_race_collision(3) . \"\\n\";\necho car_race_collision(4)\
    \ . \"\\n\";\necho car_race_collision(5) . \"\\n\";\necho car_race_collision(6)\
    \ . \"\\n\";\necho car_race_collision(7) . \"\\n\";\necho car_race_collision(8)\
    \ . \"\\n\";\necho car_race_collision(9) . \"\\n\";\necho car_race_collision(10)\
    \ . \"\\n\";\necho car_race_collision(11) . \"\\n\";\necho car_race_collision(12)\
    \ . \"\\n\";\necho car_race_collision(13) . \"\\n\";\necho car_race_collision(14)\
    \ . \"\\n\";\necho car_race_collision(15) . \"\\n\";\necho car_race_collision(16)\
    \ . \"\\n\";\necho car_race_collision(17) . \"\\n\";\necho car_race_collision(18)\
    \ . \"\\n\";\necho car_race_collision(19) . \"\\n\";\necho car_race_collision(20)\
    \ . \"\\n\";\necho car_race_collision(21) . \"\\n\";\necho car_race_collision(22)\
    \ . \"\\n\";\necho car_race_collision(23) . \"\\n\";\necho car_race_collision(24)\
    \ . \"\\n\";\necho car_race_collision(25) . \"\\n\";\necho car_race_collision(26)\
    \ . \"\\n\";\necho car_race_collision(27) . \"\\n\";\necho car_race_collision(28)\
    \ . \"\\n\";\necho car_race_collision(29) . \"\\n\";\necho car_", "    $left_to_right\
    \ = [];\n    $right_to_left = [];\n    for ($i = 0; $i < $n; $i++) {\n       \
    \ $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions\
    \ = 0;\n    while (count($left_to_right) > 0 && count($right_to_left) > 0) {\n\
    \        $left_car = array_shift($left_to_right);\n        $right_car = array_shift($right_to_left);\n\
    \        if ($left_car == $right_car) {\n            $collisions++;\n        }\n\
    \    }\n    return $collisions;\n}\n\n$n = 10;\necho car_race_collision($n);",
  "    $collisions = 0;\n    $left_to_right = $right_to_left = range(1, $n);\n   \
    \ while (count($left_to_right) > 0 && count($right_to_left) > 0) {\n        $left_car\
    \ = array_shift($left_to_right);\n        $right_car = array_shift($right_to_left);\n\
    \        if ($left_car < $right_car) {\n            $collisions++;\n         \
    \   $right_to_left[] = $right_car;\n        } else {\n            $left_to_right[]\
    \ = $left_car;\n        }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5)\
    \ . \"\\n\";\necho car_race_collision(10) . \"\\n\";\necho car_race_collision(100)\
    \ . \"\\n\";\necho car_race_collision(1000) . \"\\n\";\necho car_race_collision(10000)\
    \ . \"\\n\";\necho car_race_collision(100000) . \"\\n\";\necho car_race_collision(1000000)\
    \ . \"\\n\";\necho car_race_collision(10000000) . \"\\n\";\necho car_race_collision(100000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000) . \"\\n\";\necho car_race_collision(10000000000)\
    \ . \"\\n\";\necho car_race_collision(100000000000) . \"\\n\";\necho car_race_collision(1000000000000)\
    \ . \"\\n\";\necho car_race_collision(10000000000000) . \"\\n\";\necho car_race_collision(100000000000000)\
    \ . \"\\n\";\necho car_race_collision(1000000000000000) . \"\\n\";\necho car_race_collision(10000000000000000)\
    \ . \"\\n\";\necho car_race_collision(100000000000000000) . \"\\n\";\necho car_race_collision(1000000000000000000)\
    \ . \"\\n\";\necho car_race_collision(10000000000000000000) . \"\\n\";\necho car_race_collision(100000000000000000000)\
    \ . \"\\n\";\necho car_race_", "\t$collisions = 0;\n\t$left_cars = array();\n\t\
    $right_cars = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$left_cars[$i] =\
    \ $i;\n\t\t$right_cars[$i] = $i;\n\t}\n\tfor ($i = 0; $i < $n; $i++) {\n\t\tfor\
    \ ($j = 0; $j < $n; $j++) {\n\t\t\tif ($left_cars[$i] == $right_cars[$j]) {\n\t\
    \t\t\t$collisions++;\n\t\t\t}\n\t\t}\n\t}\n\treturn $collisions;\n}\n\necho car_race_collision(5);",
  "    $left_to_right = array();\n    $right_to_left = array();\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $left_to_right[] = rand(0, 100);\n        $right_to_left[]\
    \ = rand(0, 100);\n    }\n    sort($left_to_right);\n    sort($right_to_left);\n\
    \    $left_to_right_index = 0;\n    $right_to_left_index = 0;\n    $collisions\
    \ = 0;\n    while ($left_to_right_index < $n && $right_to_left_index < $n) {\n\
    \        if ($left_to_right[$left_to_right_index] < $right_to_left[$right_to_left_index])\
    \ {\n            $left_to_right_index++;\n        } else {\n            $collisions\
    \ += $n - $left_to_right_index;\n            $right_to_left_index++;\n       \
    \ }\n    }\n    return $collisions;\n}\n\necho car_race_collision(5);", "    $left_to_right\
    \ = array();\n    $right_to_left = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions\
    \ = 0;\n    while (count($left_to_right) > 0 && count($right_to_left) > 0) {\n\
    \        $left_to_right_car = array_shift($left_to_right);\n        $right_to_left_car\
    \ = array_shift($right_to_left);\n        if ($left_to_right_car == $right_to_left_car)\
    \ {\n            $collisions++;\n        }\n    }\n    return $collisions;\n}\n\
    \necho car_race_collision(1) . \"\\n\";\necho car_race_collision(2) . \"\\n\"\
    ;\necho car_race_collision(3) . \"\\n\";\necho car_race_collision(4) . \"\\n\"\
    ;\necho car_race_collision(5) . \"\\n\";\necho car_race_collision(6) . \"\\n\"\
    ;\necho car_race_collision(7) . \"\\n\";\necho car_race_collision(8) . \"\\n\"\
    ;\necho car_race_collision(9) . \"\\n\";\necho car_race_collision(10) . \"\\n\"\
    ;\necho car_race_collision(11) . \"\\n\";\necho car_race_collision(12) . \"\\\
    n\";\necho car_race_collision(13) . \"\\n\";\necho car_race_collision(14) . \"\
    \\n\";\necho car_race_collision(15) . \"\\n\";\necho car_race_collision(16) .\
    \ \"\\n\";\necho car_race_collision(17) . \"\\n\";\necho car_race_collision(18)\
    \ . \"\\n\";\necho car_race_collision(19) . \"\\n\";\necho car_race_collision(20)\
    \ . \"\\n\";\necho car_race_collision(21) . \"\\n\";\necho car_race_coll", " \
    \   $left_to_right = [];\n    $right_to_left = [];\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $left_to_right[] = $i;\n        $right_to_left[] = $i;\n  \
    \  }\n    $collisions = 0;\n    while (count($left_to_right) > 0 && count($right_to_left)\
    \ > 0) {\n        $left_to_right_car = array_shift($left_to_right);\n        $right_to_left_car\
    \ = array_shift($right_to_left);\n        if ($left_to_right_car == $right_to_left_car)\
    \ {\n            $collisions++;\n        }\n    }\n    return $collisions;\n}\n\
    \n$n = 5;\necho car_race_collision($n);", "\t$left_cars = array();\n\t$right_cars\
    \ = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$left_cars[$i] = $i;\n\t\t\
    $right_cars[$i] = $i;\n\t}\n\t$collisions = 0;\n\twhile (count($left_cars) > 0\
    \ && count($right_cars) > 0) {\n\t\t$left_car = array_shift($left_cars);\n\t\t\
    $right_car = array_shift($right_cars);\n\t\tif ($left_car == $right_car) {\n\t\
    \t\t$collisions++;\n\t\t}\n\t}\n\treturn $collisions;\n}\n\n/* Imagine a road\
    \ that's a perfectly straight infinitely long line.\nn cars are driving left to\
    \ right;  simultaneously, a different set of n cars\nare driving right to left.\
    \   The two sets of cars start out being very far from\neach other.  All cars\
    \ move in the same speed.  Two cars are said to collide\nwhen a car that's moving\
    \ left to right hits a car that's moving right to left.\nHowever, the cars are\
    \ infinitely sturdy and strong; as a result, they continue moving\nin their trajectory\
    \ as if they did not collide.\nThis function outputs the number of such collisions.*/",
  "    $left_to_right = [];\n    $right_to_left = [];\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n \
    \   $collisions = 0;\n    while (count($left_to_right) > 0 && count($right_to_left)\
    \ > 0) {\n        $left_car = array_shift($left_to_right);\n        $right_car\
    \ = array_shift($right_to_left);\n        if ($left_car == $right_car) {\n   \
    \         $collisions++;\n        }\n    }\n    return $collisions;\n}\n\necho\
    \ car_race_collision(5);", "    $left_to_right = [];\n    $right_to_left = [];\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $left_to_right[] = $i;\n        $right_to_left[]\
    \ = $i;\n    }\n    $collisions = 0;\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    for ($j = 0; $j < $n; $j++) {\n            if ($left_to_right[$i] == $right_to_left[$j])\
    \ {\n                $collisions++;\n            }\n        }\n    }\n    return\
    \ $collisions;\n}\n\necho car_race_collision(5);", "\t$left_to_right = array();\n\
    \t$right_to_left = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$left_to_right[]\
    \ = $i;\n\t\t$right_to_left[] = $i;\n\t}\n\t$collisions = 0;\n\twhile (count($left_to_right)\
    \ > 0 && count($right_to_left) > 0) {\n\t\t$left_car = array_shift($left_to_right);\n\
    \t\t$right_car = array_shift($right_to_left);\n\t\tif ($left_car == $right_car)\
    \ {\n\t\t\t$collisions++;\n\t\t}\n\t}\n\treturn $collisions;\n}\n\necho car_race_collision(1)\
    \ . \"\\n\";\necho car_race_collision(2) . \"\\n\";\necho car_race_collision(3)\
    \ . \"\\n\";\necho car_race_collision(4) . \"\\n\";\necho car_race_collision(5)\
    \ . \"\\n\";\necho car_race_collision(6) . \"\\n\";\necho car_race_collision(7)\
    \ . \"\\n\";\necho car_race_collision(8) . \"\\n\";\necho car_race_collision(9)\
    \ . \"\\n\";\necho car_race_collision(10) . \"\\n\";\necho car_race_collision(11)\
    \ . \"\\n\";\necho car_race_collision(12) . \"\\n\";\necho car_race_collision(13)\
    \ . \"\\n\";\necho car_race_collision(14) . \"\\n\";\necho car_race_collision(15)\
    \ . \"\\n\";\necho car_race_collision(16) . \"\\n\";\necho car_race_collision(17)\
    \ . \"\\n\";\necho car_race_collision(18) . \"\\n\";\necho car_race_collision(19)\
    \ . \"\\n\";\necho car_race_collision(20) . \"\\n\";\necho car_race_collision(21)\
    \ . \"\\n\";\necho car_race_collision(22) . \"\\n\";", "    $collisions = 0;\n\
    \    $left_to_right = [];\n    $right_to_left = [];\n    for ($i = 0; $i < $n;\
    \ $i++) {\n        $left_to_right[] = $i;\n        $right_to_left[] = $n - $i\
    \ - 1;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n;\
    \ $j++) {\n            if ($left_to_right[$i] == $right_to_left[$j]) {\n     \
    \           $collisions++;\n            }\n        }\n    }\n    return $collisions;\n\
    }\n\n/* This function outputs the number of such collisions.*/", "    $left_to_right\
    \ = array();\n    $right_to_left = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left_to_right[] = $i;\n        $right_to_left[] = $i;\n    }\n    $collisions\
    \ = 0;\n    while (count($left_to_right) > 0 && count($right_to_left) > 0) {\n\
    \        $left_to_right_car = array_shift($left_to_right);\n        $right_to_left_car\
    \ = array_shift($right_to_left);\n        if ($left_to_right_car == $right_to_left_car)\
    \ {\n            $collisions++;\n        }\n    }\n    return $collisions;\n}\n\
    \necho car_race_collision(5);", "    $left = array();\n    $right = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $left[] = rand(0, 100);\n        $right[]\
    \ = rand(0, 100);\n    }\n    sort($left);\n    sort($right);\n    $collisions\
    \ = 0;\n    $i = 0;\n    $j = 0;\n    while ($i < $n && $j < $n) {\n        if\
    \ ($left[$i] < $right[$j]) {\n            $i++;\n        } else {\n          \
    \  $collisions += $i;\n            $j++;\n        }\n    }\n    return $collisions;\n\
    }\n\necho car_race_collision(10);", "    $collision = 0;\n    $left_to_right =\
    \ array();\n    $right_to_left = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left_to_right[$i] = $i;\n        $right_to_left[$i] = $n - $i - 1;\n\
    \    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++)\
    \ {\n            if ($left_to_right[$i] == $right_to_left[$j]) {\n           \
    \     $collision++;\n            }\n        }\n    }\n    return $collision;\n\
    }\n\necho car_race_collision(5);", "    $collision = 0;\n    $left = array();\n\
    \    $right = array();\n    for ($i = 0; $i < $n; $i++) {\n        $left[$i] =\
    \ $i;\n        $right[$i] = $n - $i - 1;\n    }\n    for ($i = 0; $i < $n; $i++)\
    \ {\n        for ($j = 0; $j < $n; $j++) {\n            if ($left[$i] == $right[$j])\
    \ {\n                $collision++;\n            }\n        }\n    }\n    return\
    \ $collision;\n}\n\necho car_race_collision(5);\n\n/*\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n\
    \ *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *", "\t$left = array();\n\
    \t$right = array();\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t$left[$i] = rand(0,\
    \ $n);\n\t\t$right[$i] = rand(0, $n);\n\t}\n\tsort($left);\n\tsort($right);\n\t\
    $i = 0;\n\t$j = 0;\n\t$collisions = 0;\n\twhile ($i < $n && $j < $n) {\n\t\tif\
    \ ($left[$i] < $right[$j]) {\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$collisions +=\
    \ $i;\n\t\t\t$j++;\n\t\t}\n\t}\n\treturn $collisions;\n}\n\necho car_race_collision(10);\n",
  "    $left = array();\n    $right = array();\n    for ($i = 0; $i < $n; $i++) {\n\
    \        $left[] = $i;\n        $right[] = $i;\n    }\n    $collision = 0;\n \
    \   while (count($left) > 0 && count($right) > 0) {\n        $left_car = array_shift($left);\n\
    \        $right_car = array_shift($right);\n        if ($left_car == $right_car)\
    \ {\n            $collision++;\n        } else {\n            $left[] = $left_car;\n\
    \            $right[] = $right_car;\n        }\n    }\n    return $collision;\n\
    }\n\necho car_race_collision(3) . \"\\n\";\necho car_race_collision(4) . \"\\\
    n\";\necho car_race_collision(5) . \"\\n\";\necho car_race_collision(6) . \"\\\
    n\";\necho car_race_collision(7) . \"\\n\";\necho car_race_collision(8) . \"\\\
    n\";\necho car_race_collision(9) . \"\\n\";\necho car_race_collision(10) . \"\\\
    n\";\necho car_race_collision(11) . \"\\n\";\necho car_race_collision(12) . \"\
    \\n\";\necho car_race_collision(13) . \"\\n\";\necho car_race_collision(14) .\
    \ \"\\n\";\necho car_race_collision(15) . \"\\n\";\necho car_race_collision(16)\
    \ . \"\\n\";\necho car_race_collision(17) . \"\\n\";\necho car_race_collision(18)\
    \ . \"\\n\";\necho car_race_collision(19) . \"\\n\";\necho car_race_collision(20)\
    \ . \"\\n\";\necho car_race_collision(21) . \"\\n\";\necho car_race_collision(22)\
    \ . \"\\n\";\necho car_race_collision(23) . \"\\n\";\necho car_race_collision(24)\
    \ . \"\\n\";\necho car_race_collision(25) . \"\\", "    $collisions = 0;\n   \
    \ $left_to_right = array();\n    $right_to_left = array();\n    for ($i = 0; $i\
    \ < $n; $i++) {\n        $left_to_right[$i] = $i;\n        $right_to_left[$i]\
    \ = $n - $i - 1;\n    }\n    for ($i = 0; $i < $n; $i++) {\n        for ($j =\
    \ 0; $j < $n; $j++) {\n            if ($left_to_right[$i] == $right_to_left[$j])\
    \ {\n                $collisions++;\n            }\n        }\n    }\n    return\
    \ $collisions;\n}\n\necho car_race_collision(5);", "    $collisions = 0;\n   \
    \ for ($i = 0; $i < $n; $i++) {\n        for ($j = 0; $j < $n; $j++) {\n     \
    \       if ($i == $j) {\n                $collisions++;\n            }\n     \
    \   }\n    }\n    return $collisions;\n}\n\necho car_race_collision(10);"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
