language: php
name: HumanEval_80_is_happy
results:
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'aabb';\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'a';\nvar_dump(is_happy($s));\n$s\
    \ = 'aa';\nvar_dump(is_happy($s));\n$s = 'abcd';\nvar_dump(is_happy($s));\n$s\
    \ = 'aabb';\nvar_dump(is_happy($s));\n$s = 'adb';\nvar_dump(is_happy($s));\n$s\
    \ = 'xyy';\nvar_dump(is_happy($s));\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'bool(false)

    bool(false)

    bool(true)

    bool(false)

    bool(true)

    bool(false)

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = readline();\nif (is_happy($s)) {\n\
    \    echo \"true\";\n} else {\n    echo \"false\";\n}\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function readline() in\
    \ /tmp/tmp056rufrh.php:31\nStack trace:\n#0 {main}\n  thrown in /tmp/tmp056rufrh.php\
    \ on line 31\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('aabb') ? 'true' : 'false';\n\
    function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false'
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    $count = count($s);\n    if ($count < 3) {\n    \
    \    return false;\n    }\n    for ($i = 0; $i < $count - 2; $i++) {\n       \
    \ if ($s[$i] == $s[$i + 1] && $s[$i] == $s[$i + 2]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\necho is_happy('a');\necho is_happy('aa');\n\
    echo is_happy('abcd');\necho is_happy('aabb');\necho is_happy('adb');\necho is_happy('xyy');\n\
    function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkq02yldu.php:46\n\
    Stack trace:\n#0 /tmp/tmpkq02yldu.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpkq02yldu.php\
    \ on line 46\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    $result = false;\n    if($len >= 3){\n        for($i\
    \ = 0; $i < $len; $i++){\n            if($s[$i] != $s[$i+1] && $s[$i+1] != $s[$i+2]\
    \ && $s[$i] != $s[$i+2]){\n                $result = true;\n            }else{\n\
    \                $result = false;\n                break;\n            }\n   \
    \     }\n    }\n    return $result;\n}\n\necho is_happy('aabb');\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 4 in /tmp/tmpnz6ljne9.php on line\
    \ 23\n\nWarning: Uninitialized string offset 4 in /tmp/tmpnz6ljne9.php on line\
    \ 23\n\nWarning: Uninitialized string offset 4 in /tmp/tmpnz6ljne9.php on line\
    \ 23\n\nWarning: Uninitialized string offset 4 in /tmp/tmpnz6ljne9.php on line\
    \ 23\n\nWarning: Uninitialized string offset 5 in /tmp/tmpnz6ljne9.php on line\
    \ 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnz6ljne9.php:42\n\
    Stack trace:\n#0 /tmp/tmpnz6ljne9.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpnz6ljne9.php\
    \ on line 42\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = \"abcd\";\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    $len = count($s);\n    if ($len < 3) {\n        return\
    \ false;\n    }\n    for ($i = 0; $i < $len; $i++) {\n        if ($s[$i] == $s[$i\
    \ + 1] && $s[$i] == $s[$i + 2]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\necho is_happy('a');\necho is_happy('aa');\necho is_happy('abcd');\n\
    echo is_happy('aabb');\necho is_happy('adb');\necho is_happy('xyy');\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 4 in /tmp/tmpdrgr2stx.php on line 25\n1\n\
    Warning: Undefined array key 4 in /tmp/tmpdrgr2stx.php on line 25\n\nWarning:\
    \ Undefined array key 4 in /tmp/tmpdrgr2stx.php on line 25\n1\nWarning: Undefined\
    \ array key 3 in /tmp/tmpdrgr2stx.php on line 25\n1\nWarning: Undefined array\
    \ key 3 in /tmp/tmpdrgr2stx.php on line 25\n\nWarning: Undefined array key 3 in\
    \ /tmp/tmpdrgr2stx.php on line 25\n1\nWarning: Undefined array key 4 in /tmp/tmpdrgr2stx.php\
    \ on line 25\n\nWarning: Undefined array key 4 in /tmp/tmpdrgr2stx.php on line\
    \ 25\n\nWarning: Undefined array key 4 in /tmp/tmpdrgr2stx.php on line 25\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpdrgr2stx.php:46\nStack\
    \ trace:\n#0 /tmp/tmpdrgr2stx.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpdrgr2stx.php\
    \ on line 46\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = \"abcd\";\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    $count = count($s);\n    if ($count < 3) {\n    \
    \    return false;\n    }\n    for ($i = 0; $i < $count; $i++) {\n        if ($s[$i]\
    \ == $s[$i + 1] && $s[$i] == $s[$i + 2]) {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\n\necho is_happy('a') . \"\\n\";\necho is_happy('aa')\
    \ . \"\\n\";\necho is_happy('abcd') . \"\\n\";\necho is_happy('aabb') . \"\\n\"\
    ;\necho is_happy('adb') . \"\\n\";\necho is_happy('xyy') . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nWarning: Undefined array key 4 in /tmp/tmplbxemthm.php on line 25\n\
    1\n\nWarning: Undefined array key 4 in /tmp/tmplbxemthm.php on line 25\n\nWarning:\
    \ Undefined array key 4 in /tmp/tmplbxemthm.php on line 25\n1\n\nWarning: Undefined\
    \ array key 3 in /tmp/tmplbxemthm.php on line 25\n1\n\nWarning: Undefined array\
    \ key 3 in /tmp/tmplbxemthm.php on line 25\n\nWarning: Undefined array key 3 in\
    \ /tmp/tmplbxemthm.php on line 25\n1\n\nWarning: Undefined array key 4 in /tmp/tmplbxemthm.php\
    \ on line 25\n\nWarning: Undefined array key 4 in /tmp/tmplbxemthm.php on line\
    \ 25\n\nWarning: Undefined array key 4 in /tmp/tmplbxemthm.php on line 25\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmplbxemthm.php:46\nStack\
    \ trace:\n#0 /tmp/tmplbxemthm.php(53): test()\n#1 {main}\n  thrown in /tmp/tmplbxemthm.php\
    \ on line 46\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is happy\
    \ or not.\nA string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>> is_happy(aa)\n\
    false\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>> is_happy(adb)\n\
    true\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68sa_iot.php:55\n\
    Stack trace:\n#0 /tmp/tmp68sa_iot.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp68sa_iot.php\
    \ on line 55\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'abcd';\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i <\
    \ strlen($s) - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i\
    \ + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\necho is_happy('a') . \"\\n\";\necho is_happy('aa')\
    \ . \"\\n\";\necho is_happy('abcd') . \"\\n\";\necho is_happy('aabb') . \"\\n\"\
    ;\necho is_happy('adb') . \"\\n\";\necho is_happy('xyy') . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '


    1


    1


    '
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'abcd';\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a') . PHP_EOL;\necho is_happy('aa') . PHP_EOL;\necho is_happy('abcd')\
    \ . PHP_EOL;\necho is_happy('aabb') . PHP_EOL;\necho is_happy('adb') . PHP_EOL;\n\
    echo is_happy('xyy') . PHP_EOL;\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo5q0j62v.php:45\n\
    Stack trace:\n#0 /tmp/tmpo5q0j62v.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpo5q0j62v.php\
    \ on line 45\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   if (strlen($s) < 3) {\n        return false;\n    }\n    $arr = str_split($s);\n\
    \    for ($i = 0; $i < count($arr) - 2; $i++) {\n        if ($arr[$i] == $arr[$i\
    \ + 1] || $arr[$i] == $arr[$i + 2] || $arr[$i + 1] == $arr[$i + 2]) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n\necho is_happy('aabb')\
    \ ? 'true' : 'false';\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false'
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    $count = count($s);\n    if ($count < 3) {\n    \
    \    return false;\n    }\n    for ($i = 0; $i < $count - 2; $i++) {\n       \
    \ if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\n/* You\
    \ are given a string s.\nYour task is to check if the string is sad or not.\n\
    A string is sad if its length is at least 3 and every 3 consecutive letters are\
    \ same\nFor example:\n>>> is_sad(a)\nfalse\n>>> is_sad(aa)\nfalse\n>>> is_sad(abcd)\n\
    false\n>>> is_sad(aabb)\ntrue\n>>> is_sad(adb)\nfalse\n>>> is_sad(xyy)\ntrue*/\n\
    function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $str = str_split($s);\n    $count = count($str);\n    if ($count < 3) {\n\
    \        return false;\n    }\n    for ($i = 0; $i < $count - 2; $i++) {\n   \
    \     if ($str[$i] == $str[$i + 1] && $str[$i] == $str[$i + 2]) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\n\necho is_happy('a')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_happy('aa') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('abcd') ? 'true' : 'false';\necho \"\\n\";\necho\
    \ is_happy('aabb') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('adb') ?\
    \ 'true' : 'false';\necho \"\\n\";\necho is_happy('xyy') ? 'true' : 'false';\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "false\nfalse\ntrue\ntrue\ntrue\ntrue\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpwd4ci3s1.php:52\nStack trace:\n#0 /tmp/tmpwd4ci3s1.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwd4ci3s1.php on line 52\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') . PHP_EOL;\necho is_happy('aa')\
    \ . PHP_EOL;\necho is_happy('abcd') . PHP_EOL;\necho is_happy('aabb') . PHP_EOL;\n\
    echo is_happy('adb') . PHP_EOL;\necho is_happy('xyy') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '


    1


    1


    '
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = \"abcd\";\nvar_dump(is_happy($s));\n\
    function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'bool(true)

    '
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') ? 'true' : 'false';\n\
    echo is_happy('aa') ? 'true' : 'false';\necho is_happy('abcd') ? 'true' : 'false';\n\
    echo is_happy('aabb') ? 'true' : 'false';\necho is_happy('adb') ? 'true' : 'false';\n\
    echo is_happy('xyy') ? 'true' : 'false';\nfunction candidate(...$args) {\n   \
    \ return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: falsefalsetruefalsetruefalse
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    $len = count($s);\n    if ($len < 3) {\n        return\
    \ false;\n    }\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] ==\
    \ $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\n\necho is_happy('aabb');\n\
    function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') ? 'true' : 'false';\n\
    echo '<br>';\necho is_happy('aa') ? 'true' : 'false';\necho '<br>';\necho is_happy('abcd')\
    \ ? 'true' : 'false';\necho '<br>';\necho is_happy('aabb') ? 'true' : 'false';\n\
    echo '<br>';\necho is_happy('adb') ? 'true' : 'false';\necho '<br>';\necho is_happy('xyy')\
    \ ? 'true' : 'false';\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: false<br>false<br>true<br>false<br>true<br>false
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n$s = 'a';\necho is_happy($s);\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx11_isay.php:41\n\
    Stack trace:\n#0 /tmp/tmpx11_isay.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpx11_isay.php\
    \ on line 41\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'abcd';\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('abcd');\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92efchfb.php:40\n\
    Stack trace:\n#0 /tmp/tmp92efchfb.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp92efchfb.php\
    \ on line 40\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/*\n * You are given a string s.\nYour\
    \ task is to check if the string is happy or not.\nA string is happy if its length\
    \ is at least 3 and every 3 consecutive letters are distinct\nFor example:\n>>>\
    \ is_happy(a)\nfalse\n>>> is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\n\
    false\n>>> is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse\n */\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  $arr = str_split($s);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if\
    \ ($arr[$i] == $arr[$i + 1] || $arr[$i] == $arr[$i + 2] || $arr[$i + 1] == $arr[$i\
    \ + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    echo is_happy('aabb');\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    $len = count($s);\n    if ($len < 3) {\n        return\
    \ false;\n    }\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] ==\
    \ $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\n\necho is_happy('a');\n\
    echo is_happy('aa');\necho is_happy('abcd');\necho is_happy('aabb');\necho is_happy('adb');\n\
    echo is_happy('xyy');\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '11'
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n$s = \"abcd\";\necho is_happy($s);\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6fwkj0fa.php:41\n\
    Stack trace:\n#0 /tmp/tmp6fwkj0fa.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp6fwkj0fa.php\
    \ on line 41\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = readline();\necho is_happy($s);\n\
    function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function readline() in\
    \ /tmp/tmpcps9i1co.php:31\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpcps9i1co.php\
    \ on line 31\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'adb';\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is palindrome\
    \ or not.\nA string is palindrome if it reads the same from left to right as it\
    \ does from right to left.\nFor example:\n>>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\n\
    false\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abc)\n\
    false\n>>> is_palindrome(abca)\nfalse*/\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1zz4gs8w.php:55\n\
    Stack trace:\n#0 /tmp/tmp1zz4gs8w.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp1zz4gs8w.php\
    \ on line 55\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'adb';\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('aa') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('abcd')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_happy('aabb') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('adb') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('xyy')\
    \ ? 'true' : 'false';\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   if (strlen($s) < 3) {\n        return false;\n    }\n    $arr = str_split($s);\n\
    \    $count = count($arr);\n    for ($i = 0; $i < $count - 2; $i++) {\n      \
    \  if ($arr[$i] == $arr[$i + 1] || $arr[$i] == $arr[$i + 2] || $arr[$i + 1] ==\
    \ $arr[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is happhp\
    \ or not.\nA string is happhp if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>> is_happy(aa)\n\
    false\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>> is_happy(adb)\n\
    true\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is palindrome or not.\nA string is palindrome if it\
    \ reads the same from left to right and from right to left.\nFor example:\n>>>\
    \ is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\n\
    true\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abcba)\ntrue\n>>> is_palindrome(abccba)\n\
    true\n>>> is_palindrome(abcdcba)\ntrue\n>>> is_palindrome(abcdecba)\nfalse*/\n\
    function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/*\nYou are given a string s.\nYour task\
    \ is to check if the string is a palindrome or not.\nA palindrome is a string\
    \ that is the same when read from left to right and from right to left.\nFor example:\n\
    >>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\n\
    true\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abcba)\ntrue\n>>> is_palindrome(abcdba)\n\
    false\n*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $length = strlen($s);\n    if ($length < 3) {\n        return false;\n   \
    \ }\n    for ($i = 0; $i < $length - 2; $i++) {\n        if ($s[$i] == $s[$i +\
    \ 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\n/* You are given a string s.\n\
    Your task is to check if the string is a palindrome or not.\nA palindrome is a\
    \ string that is the same when read from left to right and from right to left.\n\
    For example:\n>>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\n\
    true\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abcba)\ntrue\n>>> is_palindrome(abc)\n\
    false*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) return false;\n    for ($i = 0; $i <\
    \ $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2]\
    \ || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\n/*\nYou are given a string s.\nYour task is to check if\
    \ the string is palindrome or not.\nA string is palindrome if it reads the same\
    \ from left to right as it does from right to left.\nFor example:\n>>> is_palindrome(a)\n\
    true\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\n\
    true\n>>> is_palindrome(abcba)\ntrue\n>>> is_palindrome(abcd)\nfalse\n*/\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/*\nYou are given a string s.\nYour task is to check if the string is palindrome\
    \ or not.\nA string is palindrome if it reads the same from left to right as it\
    \ does from right to left.\nFor example:\n>>> is_palindrome(a)\ntrue\n>>> is_palindrome(aa)\n\
    true\n>>> is_palindrome(abcd)\nfalse\n>>> is_palindrome(aabb)\ntrue\n>>> is_palindrome(adb)\n\
    false\n>>> is_palindrome(xyy)\ntrue\n*/\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1vj2ohfp.php:57\n\
    Stack trace:\n#0 /tmp/tmp1vj2ohfp.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp1vj2ohfp.php\
    \ on line 57\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is happy\
    \ or not.\nA string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>> is_happy(aa)\n\
    false\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>> is_happy(adb)\n\
    true\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68sa_iot.php:55\n\
    Stack trace:\n#0 /tmp/tmp68sa_iot.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp68sa_iot.php\
    \ on line 55\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i <\
    \ strlen($s) - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i\
    \ + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\n/* You are given a string s.\nYour task is to check\
    \ if the string is a palindrome or not.\nA palindrome is a string that is the\
    \ same when read from left to right and from right to left.\nFor example:\n>>>\
    \ is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\n\
    true\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abcba)\ntrue\n>>> is_palindrome(abcd)\n\
    false*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n$s = 'aabb';\necho is_happy($s);\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8noz6g_d.php:41\n\
    Stack trace:\n#0 /tmp/tmp8noz6g_d.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp8noz6g_d.php\
    \ on line 41\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n$s = 'a';\necho is_happy($s);\necho '<br>';\n$s = 'aa';\necho is_happy($s);\n\
    echo '<br>';\n$s = 'abcd';\necho is_happy($s);\necho '<br>';\n$s = 'aabb';\necho\
    \ is_happy($s);\necho '<br>';\n$s = 'adb';\necho is_happy($s);\necho '<br>';\n\
    $s = 'xyy';\necho is_happy($s);\necho '<br>';\nfunction candidate(...$args) {\n\
    \    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<br><br>1<br>1<br>1<br>1<br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpzvpok4t4.php:57\nStack trace:\n#0 /tmp/tmpzvpok4t4.php(64): test()\n\
    #1 {main}\n  thrown in /tmp/tmpzvpok4t4.php on line 57\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a') . \"\\n\";\necho is_happy('aa') . \"\\n\";\necho is_happy('abcd')\
    \ . \"\\n\";\necho is_happy('aabb') . \"\\n\";\necho is_happy('adb') . \"\\n\"\
    ;\necho is_happy('xyy') . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbo40934x.php:45\n\
    Stack trace:\n#0 /tmp/tmpbo40934x.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpbo40934x.php\
    \ on line 45\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('aabb');\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $arr = str_split($s);\n    $len = count($arr);\n    if ($len < 3) {\n    \
    \    return false;\n    }\n    for ($i = 0; $i < $len - 2; $i++) {\n        if\
    \ ($arr[$i] == $arr[$i + 1] || $arr[$i] == $arr[$i + 2] || $arr[$i + 1] == $arr[$i\
    \ + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    /* You are given a string s.\nYour task is to check if the string is happy or\
    \ not.\nA string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>> is_happy(aa)\n\
    false\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>> is_happy(adb)\n\
    true\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is happy or not.\nA string is happy if its length\
    \ is at least 3 and every 3 consecutive letters are distinct\nFor example:\n>>>\
    \ is_happy(a)\nfalse\n>>> is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\n\
    false\n>>> is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  $arr = str_split($s);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if\
    \ ($arr[$i] == $arr[$i + 1] || $arr[$i] == $arr[$i + 2] || $arr[$i + 1] == $arr[$i\
    \ + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    $s = \"abcd\";\nvar_dump(is_happy($s));\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'bool(true)

    '
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('aa') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('abcd')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_happy('aabb') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('adb') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('xyy')\
    \ ? 'true' : 'false';\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    $count = count($s);\n    if ($count < 3) {\n    \
    \    return false;\n    }\n    for ($i = 0; $i < $count - 2; $i++) {\n       \
    \ if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\necho\
    \ is_happy('aabb');\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is happhp\
    \ or not.\nA string is happhp if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>> is_happy(aa)\n\
    false\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>> is_happy(adb)\n\
    true\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31lai3ey.php:55\n\
    Stack trace:\n#0 /tmp/tmp31lai3ey.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp31lai3ey.php\
    \ on line 55\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n$s = 'abcd';\necho is_happy($s);\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9riku0zq.php:41\n\
    Stack trace:\n#0 /tmp/tmp9riku0zq.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp9riku0zq.php\
    \ on line 41\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $arr = str_split($s);\n    if (count($arr) < 3) {\n        return false;\n\
    \    }\n    for ($i = 0; $i < count($arr) - 2; $i++) {\n        if ($arr[$i] ==\
    \ $arr[$i + 1] || $arr[$i] == $arr[$i + 2] || $arr[$i + 1] == $arr[$i + 2]) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\necho is_happy('aabb');\n\
    function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('aa')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_happy('abcd') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('aabb') ? 'true' : 'false';\necho \"\\n\";\necho\
    \ is_happy('adb') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('xyy') ? 'true'\
    \ : 'false';\necho \"\\n\";\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "false\nfalse\ntrue\ntrue\ntrue\ntrue\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp42m46gl0.php:51\nStack trace:\n#0 /tmp/tmp42m46gl0.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp42m46gl0.php on line 51\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('aa') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('abcd')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_happy('aabb') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('adb') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('xyy')\
    \ ? 'true' : 'false';\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    if (count($s) < 3) {\n        return false;\n   \
    \ }\n    for ($i = 0; $i < count($s) - 2; $i++) {\n        if ($s[$i] == $s[$i\
    \ + 1] && $s[$i] == $s[$i + 2]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\necho is_happy('a') . PHP_EOL;\necho is_happy('aa') . PHP_EOL;\n\
    echo is_happy('abcd') . PHP_EOL;\necho is_happy('aabb') . PHP_EOL;\necho is_happy('adb')\
    \ . PHP_EOL;\necho is_happy('xyy') . PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2m2g3xv2.php:45\n\
    Stack trace:\n#0 /tmp/tmp2m2g3xv2.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp2m2g3xv2.php\
    \ on line 45\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) return false;\n    for ($i = 0; $i <\
    \ $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2]\
    \ || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\n/*\nYou are given a string s.\nYour task is to check if\
    \ the string is a palindrome or not.\nA palindrome is a string that reads the\
    \ same from left to right as it does from right to left.\nFor example:\n>>> is_palindrome(a)\n\
    true\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\n\
    true\n>>> is_palindrome(abcba)\ntrue\n>>> is_palindrome(abcd)\nfalse\n*/\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is happy\
    \ or not.\nA string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>> is_happy(aa)\n\
    false\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>> is_happy(adb)\n\
    true\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68sa_iot.php:55\n\
    Stack trace:\n#0 /tmp/tmp68sa_iot.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp68sa_iot.php\
    \ on line 55\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppkjx31ej.php:38\n\
    Stack trace:\n#0 /tmp/tmppkjx31ej.php(45): test()\n#1 {main}\n  thrown in /tmp/tmppkjx31ej.php\
    \ on line 38\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/*\nYou are given a string s.\nYour task is to check if the string is a palindrome\
    \ or not.\nA palindrome is a string that reads the same from left to right as\
    \ it does from right to left.\nFor example:\n>>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\n\
    false\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abcba)\n\
    true\n>>> is_palindrome(abcd)\nfalse\n*/\nfunction candidate(...$args) {\n   \
    \ return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'abcd';\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  $arr = str_split($s);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if\
    \ ($arr[$i] == $arr[$i + 1] && $arr[$i] == $arr[$i + 2]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\n/* You are given a string s.\n\
    Your task is to check if the string is a palindrome or not.\nA palindrome is a\
    \ string that reads the same from left to right as it does from right to left.\n\
    For example:\n>>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\n\
    true\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abc)\nfalse\n>>> is_palindrome(abcd)\n\
    false*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxcr3hc3w.php:56\n\
    Stack trace:\n#0 /tmp/tmpxcr3hc3w.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpxcr3hc3w.php\
    \ on line 56\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a') . PHP_EOL;\necho is_happy('aa') . PHP_EOL;\necho is_happy('abcd')\
    \ . PHP_EOL;\necho is_happy('aabb') . PHP_EOL;\necho is_happy('adb') . PHP_EOL;\n\
    echo is_happy('xyy') . PHP_EOL;\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo5q0j62v.php:45\n\
    Stack trace:\n#0 /tmp/tmpo5q0j62v.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpo5q0j62v.php\
    \ on line 45\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('aa') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('abcd')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_happy('aabb') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('adb') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('xyy')\
    \ ? 'true' : 'false';\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    $count = count($s);\n    if ($count < 3) {\n    \
    \    return false;\n    }\n    for ($i = 0; $i < $count; $i++) {\n        if ($s[$i]\
    \ == $s[$i + 1] && $s[$i] == $s[$i + 2]) {\n            return false;\n      \
    \  }\n    }\n    return true;\n}\n\necho is_happy('a');\necho is_happy('aa');\n\
    echo is_happy('abcd');\necho is_happy('aabb');\necho is_happy('adb');\necho is_happy('xyy');\n\
    function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 4 in /tmp/tmp11ud0j44.php on line 25\n1\n\
    Warning: Undefined array key 4 in /tmp/tmp11ud0j44.php on line 25\n\nWarning:\
    \ Undefined array key 4 in /tmp/tmp11ud0j44.php on line 25\n1\nWarning: Undefined\
    \ array key 3 in /tmp/tmp11ud0j44.php on line 25\n1\nWarning: Undefined array\
    \ key 3 in /tmp/tmp11ud0j44.php on line 25\n\nWarning: Undefined array key 3 in\
    \ /tmp/tmp11ud0j44.php on line 25\n1\nWarning: Undefined array key 4 in /tmp/tmp11ud0j44.php\
    \ on line 25\n\nWarning: Undefined array key 4 in /tmp/tmp11ud0j44.php on line\
    \ 25\n\nWarning: Undefined array key 4 in /tmp/tmp11ud0j44.php on line 25\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp11ud0j44.php:46\nStack\
    \ trace:\n#0 /tmp/tmp11ud0j44.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp11ud0j44.php\
    \ on line 46\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') ? 'true' : 'false';\n\
    echo PHP_EOL;\necho is_happy('aa') ? 'true' : 'false';\necho PHP_EOL;\necho is_happy('abcd')\
    \ ? 'true' : 'false';\necho PHP_EOL;\necho is_happy('aabb') ? 'true' : 'false';\n\
    echo PHP_EOL;\necho is_happy('adb') ? 'true' : 'false';\necho PHP_EOL;\necho is_happy('xyy')\
    \ ? 'true' : 'false';\necho PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a') . PHP_EOL;\necho is_happy('aa') . PHP_EOL;\necho is_happy('abcd')\
    \ . PHP_EOL;\necho is_happy('aabb') . PHP_EOL;\necho is_happy('adb') . PHP_EOL;\n\
    echo is_happy('xyy') . PHP_EOL;\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo5q0j62v.php:45\n\
    Stack trace:\n#0 /tmp/tmpo5q0j62v.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpo5q0j62v.php\
    \ on line 45\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  $result = true;\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i]\
    \ == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n     \
    \       $result = false;\n            break;\n        }\n    }\n    return $result;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is happy\
    \ or not.\nA string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>> is_happy(aa)\n\
    false\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>> is_happy(adb)\n\
    true\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('aa') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('abcd')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_happy('aabb') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('adb') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('xyy')\
    \ ? 'true' : 'false';\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'abcd';\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('aa')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_happy('abcd') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('aabb') ? 'true' : 'false';\necho \"\\n\";\necho\
    \ is_happy('adb') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('xyy') ? 'true'\
    \ : 'false';\necho \"\\n\";\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "false\nfalse\ntrue\ntrue\ntrue\ntrue\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp42m46gl0.php:51\nStack trace:\n#0 /tmp/tmp42m46gl0.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp42m46gl0.php on line 51\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') . PHP_EOL;\necho is_happy('aa')\
    \ . PHP_EOL;\necho is_happy('abcd') . PHP_EOL;\necho is_happy('aabb') . PHP_EOL;\n\
    echo is_happy('adb') . PHP_EOL;\necho is_happy('xyy') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '


    1


    1


    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('aa')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_happy('abcd') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('aabb') ? 'true' : 'false';\necho \"\\n\";\necho\
    \ is_happy('adb') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('xyy') ? 'true'\
    \ : 'false';\necho \"\\n\";\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "false\nfalse\ntrue\ntrue\ntrue\ntrue\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp42m46gl0.php:51\nStack trace:\n#0 /tmp/tmp42m46gl0.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp42m46gl0.php on line 51\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('aa')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_happy('abcd') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('aabb') ? 'true' : 'false';\necho \"\\n\";\necho\
    \ is_happy('adb') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('xyy') ? 'true'\
    \ : 'false';\necho \"\\n\";\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "false\nfalse\ntrue\ntrue\ntrue\ntrue\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp42m46gl0.php:51\nStack trace:\n#0 /tmp/tmp42m46gl0.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp42m46gl0.php on line 51\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is a palindrome or not.\nA palindrome is a string\
    \ that reads the same from left to right as it does from right to left.\nFor example:\n\
    >>> is_palindrome(a)\ntrue\n>>> is_palindrome(aa)\ntrue\n>>> is_palindrome(abcd)\n\
    false\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abab)\nfalse\n>>> is_palindrome(xyz)\n\
    false*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/*You are given a string s.\nYour task is to check if the string is happy\
    \ or not.\nA string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>> is_happy(aa)\n\
    false\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>> is_happy(adb)\n\
    true\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0s2jt0_b.php:55\n\
    Stack trace:\n#0 /tmp/tmp0s2jt0_b.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp0s2jt0_b.php\
    \ on line 55\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('aabb');\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    $len = count($s);\n    if ($len < 3) {\n        return\
    \ false;\n    }\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] ==\
    \ $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\n\n/*\n * You are given\
    \ a string s.\nYour task is to check if the string is a palindrome or not.\nA\
    \ palindrome is a string that reads the same from left to right as it does from\
    \ right to left.\nFor example:\n>>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\n\
    false\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abcba)\n\
    true\n>>> is_palindrome(abcdcba)\ntrue\n>>> is_palindrome(abcd)\nfalse\n>>> is_palindrome(abcddcba)\n\
    true\n>>> is_palindrome(abcdedcba)\ntrue\n>>> is_palindrome(abcdedcbaa)\nfalse\n\
    */\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n$s = 'aabb';\necho is_happy($s);\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8noz6g_d.php:41\n\
    Stack trace:\n#0 /tmp/tmp8noz6g_d.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp8noz6g_d.php\
    \ on line 41\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is a palindrome or not.\nA palindrome is a string\
    \ that reads the same from left to right as it does from right to left.\nFor example:\n\
    >>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\n\
    true\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abcba)\ntrue\n>>> is_palindrome(abc)\n\
    false*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'a';\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n\t\
    $len = strlen($s);\n\tif($len < 3) {\n\t\treturn false;\n\t}\n\tfor($i = 0; $i\
    \ < $len - 2; $i++) {\n\t\tif($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] ||\
    \ $s[$i + 1] == $s[$i + 2]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is sad\
    \ or not.\nA string is sad if its length is at least 3 and every 3 consecutive\
    \ letters are same\nFor example:\n>>> is_sad(a)\nfalse\n>>> is_sad(aa)\nfalse\n\
    >>> is_sad(abcd)\nfalse\n>>> is_sad(aabb)\ntrue\n>>> is_sad(adb)\nfalse\n>>> is_sad(xyy)\n\
    true*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'abcd';\nif (is_happy($s)) {\n  \
    \  echo 'true';\n} else {\n    echo 'false';\n}\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true'
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = \"abcd\";\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n$s = 'abcd';\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is happy\
    \ or not.\nA string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>> is_happy(aa)\n\
    false\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>> is_happy(adb)\n\
    true\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68sa_iot.php:55\n\
    Stack trace:\n#0 /tmp/tmp68sa_iot.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp68sa_iot.php\
    \ on line 55\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    if (count($s) < 3) {\n        return false;\n   \
    \ }\n    for ($i = 0; $i < count($s) - 2; $i++) {\n        if ($s[$i] == $s[$i\
    \ + 1] && $s[$i] == $s[$i + 2]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\necho is_happy('a');\necho is_happy('aa');\necho is_happy('abcd');\n\
    echo is_happy('aabb');\necho is_happy('adb');\necho is_happy('xyy');\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgvbx95xw.php:45\n\
    Stack trace:\n#0 /tmp/tmpgvbx95xw.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpgvbx95xw.php\
    \ on line 45\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) return false;\n    for ($i = 0; $i <\
    \ $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2]\
    \ || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\n/*You are given a string s.\nYour task is to check if\
    \ the string is a palindrome or not.\nA palindrome is a string that reads the\
    \ same from left to right as it does from right to left.\nFor example:\n>>> is_palindrome(a)\n\
    true\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\n\
    true\n>>> is_palindrome(abcba)\ntrue\n>>> is_palindrome(abcde)\nfalse*/\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n$s = \"abcd\";\nvar_dump(is_happy($s));\nfunction candidate(...$args) {\n\
    \    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(true)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppvzwpeuj.php:41\n\
    Stack trace:\n#0 /tmp/tmppvzwpeuj.php(48): test()\n#1 {main}\n  thrown in /tmp/tmppvzwpeuj.php\
    \ on line 41\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a');\necho is_happy('aa');\n\
    echo is_happy('abcd');\necho is_happy('aabb');\necho is_happy('adb');\necho is_happy('xyy');\n\
    function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i <\
    \ strlen($s) - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i\
    \ + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\n/* You are given a string s.\nYour task is to check\
    \ if the string is palindrome or not.\nA string is palindrome if it reads the\
    \ same from left to right and from right to left.\nFor example:\n>>> is_palindrome(a)\n\
    true\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\n\
    true\n>>> is_palindrome(abcba)\ntrue\n>>> is_palindrome(abc)\nfalse*/\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is palindrome or not.\nA string is palindrome if it\
    \ is equal to its reverse.\nFor example:\n>>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\n\
    false\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abc)\n\
    false\n>>> is_palindrome(xyyx)\ntrue*/\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') . \"\\n\";\necho is_happy('aa')\
    \ . \"\\n\";\necho is_happy('abcd') . \"\\n\";\necho is_happy('aabb') . \"\\n\"\
    ;\necho is_happy('adb') . \"\\n\";\necho is_happy('xyy') . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '


    1


    1


    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n$s = readline();\necho is_happy($s);\nfunction candidate(...$args) {\n  \
    \  return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function readline() in\
    \ /tmp/tmpgt86w6og.php:31\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpgt86w6og.php\
    \ on line 31\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i <\
    \ strlen($s) - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i\
    \ + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\necho is_happy('a');\necho is_happy('aa');\necho\
    \ is_happy('abcd');\necho is_happy('aabb');\necho is_happy('adb');\necho is_happy('xyy');\n\
    function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '11'
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'aabb';\n$result = is_happy($s);\n\
    echo $result;\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'a';\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') ? 'true' : 'false';\n\
    echo '<br>';\necho is_happy('aa') ? 'true' : 'false';\necho '<br>';\necho is_happy('abcd')\
    \ ? 'true' : 'false';\necho '<br>';\necho is_happy('aabb') ? 'true' : 'false';\n\
    echo '<br>';\necho is_happy('adb') ? 'true' : 'false';\necho '<br>';\necho is_happy('xyy')\
    \ ? 'true' : 'false';\necho '<br>';\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: false<br>false<br>true<br>false<br>true<br>false<br>
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $arr = str_split($s);\n    $count = count($arr);\n    if ($count < 3) {\n\
    \        return false;\n    }\n    for ($i = 0; $i < $count - 2; $i++) {\n   \
    \     if ($arr[$i] == $arr[$i + 1] || $arr[$i] == $arr[$i + 2] || $arr[$i + 1]\
    \ == $arr[$i + 2]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\n/* You are given a string s.\nYour task is to check if the string\
    \ is a palindrome or not.\nA palindrome is a string that reads the same from left\
    \ to right as it does from right to left.\nFor example:\n>>> is_palindrome(a)\n\
    true\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\n\
    true\n>>> is_palindrome(abcba)\ntrue\n>>> is_palindrome(abcdba)\nfalse*/\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') . PHP_EOL;\necho is_happy('aa')\
    \ . PHP_EOL;\necho is_happy('abcd') . PHP_EOL;\necho is_happy('aabb') . PHP_EOL;\n\
    echo is_happy('adb') . PHP_EOL;\necho is_happy('xyy') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '


    1


    1


    '
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a');\necho is_happy('aa');\n\
    echo is_happy('abcd');\necho is_happy('aabb');\necho is_happy('adb');\necho is_happy('xyy');\n\
    function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is happy\
    \ or not.\nA string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>> is_happy(aa)\n\
    false\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>> is_happy(adb)\n\
    true\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68sa_iot.php:55\n\
    Stack trace:\n#0 /tmp/tmp68sa_iot.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp68sa_iot.php\
    \ on line 55\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $arr = str_split($s);\n    if (count($arr) < 3) {\n        return false;\n\
    \    }\n    for ($i = 0; $i < count($arr) - 2; $i++) {\n        if ($arr[$i] ==\
    \ $arr[$i + 1] && $arr[$i] == $arr[$i + 2]) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\n\necho is_happy('a') . PHP_EOL;\necho is_happy('aa')\
    \ . PHP_EOL;\necho is_happy('abcd') . PHP_EOL;\necho is_happy('aabb') . PHP_EOL;\n\
    echo is_happy('adb') . PHP_EOL;\necho is_happy('xyy') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwtzmchpj.php:45\n\
    Stack trace:\n#0 /tmp/tmpwtzmchpj.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpwtzmchpj.php\
    \ on line 45\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is a palindrome or not.\nA palindrome is a string\
    \ that reads the same from left to right as it does from right to left.\nFor example:\n\
    >>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\n\
    true\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abcba)\ntrue\n>>> is_palindrome(abcdba)\n\
    false*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('aa') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('abcd')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_happy('aabb') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('adb') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('xyy')\
    \ ? 'true' : 'false';\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'aabb';\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is a palindrome\
    \ or not.\nA palindrome is a string that reads the same from left to right as\
    \ it does from right to left.\nFor example:\n>>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\n\
    false\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abcd)\n\
    false\n>>> is_palindrome(abcba)\ntrue*/\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbdc4r0mu.php:55\n\
    Stack trace:\n#0 /tmp/tmpbdc4r0mu.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpbdc4r0mu.php\
    \ on line 55\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n$s = 'abcd';\necho is_happy($s);\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9riku0zq.php:41\n\
    Stack trace:\n#0 /tmp/tmp9riku0zq.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp9riku0zq.php\
    \ on line 41\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/*\n * You are given a string s.\nYour task is to check if the string is\
    \ a palindrome or not.\nA palindrome is a string that reads the same from left\
    \ to right as it does from right to left.\nFor example:\n>>> is_palindrome(a)\n\
    true\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\n\
    true\n>>> is_palindrome(abcba)\ntrue\n>>> is_palindrome(abcd)\nfalse\n*/\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6hjcu8gs.php:57\n\
    Stack trace:\n#0 /tmp/tmp6hjcu8gs.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp6hjcu8gs.php\
    \ on line 57\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    $len = count($s);\n    if ($len < 3) {\n        return\
    \ false;\n    }\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] ==\
    \ $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\n\n/*\n * You are given\
    \ a string s.\nYour task is to check if the string is a palindrome or not.\nA\
    \ palindrome is a string that reads the same from left to right as it does from\
    \ right to left.\nFor example:\n>>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\n\
    false\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abcba)\n\
    true\n>>> is_palindrome(abcde)\nfalse\n*/\nfunction candidate(...$args) {\n  \
    \  return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a') . PHP_EOL;\necho is_happy('aa') . PHP_EOL;\necho is_happy('abcd')\
    \ . PHP_EOL;\necho is_happy('aabb') . PHP_EOL;\necho is_happy('adb') . PHP_EOL;\n\
    echo is_happy('xyy') . PHP_EOL;\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\nWarning: Uninitialized string offset 4 in /tmp/tmppi1bwozm.php on\
    \ line 24\n1\n\nWarning: Uninitialized string offset 4 in /tmp/tmppi1bwozm.php\
    \ on line 24\n\nWarning: Uninitialized string offset 4 in /tmp/tmppi1bwozm.php\
    \ on line 24\n1\n\nWarning: Uninitialized string offset 3 in /tmp/tmppi1bwozm.php\
    \ on line 24\n1\n\nWarning: Uninitialized string offset 3 in /tmp/tmppi1bwozm.php\
    \ on line 24\n\nWarning: Uninitialized string offset 3 in /tmp/tmppi1bwozm.php\
    \ on line 24\n1\n\nWarning: Uninitialized string offset 4 in /tmp/tmppi1bwozm.php\
    \ on line 24\n\nWarning: Uninitialized string offset 4 in /tmp/tmppi1bwozm.php\
    \ on line 24\n\nWarning: Uninitialized string offset 4 in /tmp/tmppi1bwozm.php\
    \ on line 24\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppi1bwozm.php:45\n\
    Stack trace:\n#0 /tmp/tmppi1bwozm.php(52): test()\n#1 {main}\n  thrown in /tmp/tmppi1bwozm.php\
    \ on line 45\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a');\necho is_happy('aa');\necho is_happy('abcd');\necho is_happy('aabb');\n\
    echo is_happy('adb');\necho is_happy('xyy');\nfunction candidate(...$args) {\n\
    \    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2hnc1s9w.php:45\n\
    Stack trace:\n#0 /tmp/tmp2hnc1s9w.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp2hnc1s9w.php\
    \ on line 45\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = \"abcd\";\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    if (count($s) < 3) {\n        return false;\n   \
    \ }\n    for ($i = 0; $i < count($s) - 2; $i++) {\n        if ($s[$i] == $s[$i\
    \ + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\n/* You are given a string s.\n\
    Your task is to check if the string is a palindrome or not.\nA palindrome is a\
    \ string that reads the same from left to right as it does from right to left.\n\
    For example:\n>>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\n\
    true\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abc)\nfalse\n>>> is_palindrome(abcd)\n\
    false*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n$s = 'aabb';\nvar_dump(is_happy($s));\nfunction candidate(...$args) {\n \
    \   return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(true)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp74rjeur5.php:41\n\
    Stack trace:\n#0 /tmp/tmp74rjeur5.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp74rjeur5.php\
    \ on line 41\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = \"aabb\";\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  $arr = str_split($s);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if\
    \ ($arr[$i] == $arr[$i + 1] || $arr[$i] == $arr[$i + 2] || $arr[$i + 1] == $arr[$i\
    \ + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    $s = \"abcd\";\necho is_happy($s);\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n$s = 'aabb';\nvar_dump(is_happy($s));\nfunction candidate(...$args) {\n \
    \   return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(true)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp74rjeur5.php:41\n\
    Stack trace:\n#0 /tmp/tmp74rjeur5.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp74rjeur5.php\
    \ on line 41\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is happhp or not.\nA string is happhp if its length\
    \ is at least 3 and every 3 consecutive letters are distinct\nFor example:\n>>>\
    \ is_happy(a)\nfalse\n>>> is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\n\
    false\n>>> is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is a palindrome or not.\nA palindrome is a string\
    \ that reads the same from left to right as it does from right to left.\nFor example:\n\
    >>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\n\
    true\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abcd)\nfalse\n>>> is_palindrome(abcba)\n\
    true*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is a palindrome or not.\nA palindrome is a string\
    \ that reads the same from left to right as it does from right to left.\nFor example:\n\
    >>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\n\
    true\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abc)\nfalse\n>>> is_palindrome(abcd)\n\
    false*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is a palindrome or not.\nA palindrome is a string\
    \ that reads the same from left to right as it does from right to left.\nFor example:\n\
    >>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\n\
    true\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abbc)\nfalse*/\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $arr = str_split($s);\n    if (count($arr) < 3) {\n        return false;\n\
    \    }\n    for ($i = 0; $i < count($arr) - 2; $i++) {\n        if ($arr[$i] ==\
    \ $arr[$i + 1] && $arr[$i] == $arr[$i + 2]) {\n            return false;\n   \
    \     }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is happy or not.\nA string is happy if its length\
    \ is at least 3 and every 3 consecutive letters are distinct\nFor example:\n>>>\
    \ is_happy(a)\nfalse\n>>> is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\n\
    false\n>>> is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7y_beia2.php:55\n\
    Stack trace:\n#0 /tmp/tmp7y_beia2.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp7y_beia2.php\
    \ on line 55\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is happhp or not.\nA string is happhp if its length\
    \ is at least 3 and every 3 consecutive letters are distinct\nFor example:\n>>>\
    \ is_happy(a)\nfalse\n>>> is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\n\
    false\n>>> is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is happy or not.\nA string is happy if its length\
    \ is at least 3 and every 3 consecutive letters are distinct\nFor example:\n>>>\
    \ is_happy(a)\nfalse\n>>> is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\n\
    false\n>>> is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is happy\
    \ or not.\nA string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>> is_happy(aa)\n\
    false\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>> is_happy(adb)\n\
    true\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68sa_iot.php:55\n\
    Stack trace:\n#0 /tmp/tmp68sa_iot.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp68sa_iot.php\
    \ on line 55\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i <\
    \ strlen($s) - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i\
    \ + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\necho is_happy('a') . PHP_EOL;\necho is_happy('aa')\
    \ . PHP_EOL;\necho is_happy('abcd') . PHP_EOL;\necho is_happy('aabb') . PHP_EOL;\n\
    echo is_happy('adb') . PHP_EOL;\necho is_happy('xyy') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '


    1


    1


    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('aabb');\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is happy\
    \ or not.\nA string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>> is_happy(aa)\n\
    false\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>> is_happy(adb)\n\
    true\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68sa_iot.php:55\n\
    Stack trace:\n#0 /tmp/tmp68sa_iot.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp68sa_iot.php\
    \ on line 55\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  $arr = str_split($s);\n    for ($i = 0; $i < $len - 2; $i++) {\n        if\
    \ ($arr[$i] == $arr[$i + 1] || $arr[$i] == $arr[$i + 2] || $arr[$i + 1] == $arr[$i\
    \ + 2]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n\
    /* You are given a string s.\nYour task is to check if the string is happhp or\
    \ not.\nA string is happhp if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>> is_happy(aa)\n\
    false\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>> is_happy(adb)\n\
    true\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    } else\
    \ {\n        for ($i = 0; $i < $len - 2; $i++) {\n            if ($s[$i] == $s[$i\
    \ + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n              \
    \  return false;\n            }\n        }\n        return true;\n    }\n}\n\n\
    echo is_happy('a') . \"\\n\";\necho is_happy('aa') . \"\\n\";\necho is_happy('abcd')\
    \ . \"\\n\";\necho is_happy('aabb') . \"\\n\";\necho is_happy('adb') . \"\\n\"\
    ;\necho is_happy('xyy') . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '


    1


    1


    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is palindrome\
    \ or not.\nA string is palindrome if its length is at least 3 and its first and\
    \ last letters are the same.\nFor example:\n>>> is_palindrome(a)\nfalse\n>>> is_palindrome(aa)\n\
    false\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abc)\n\
    false\n>>> is_palindrome(abca)\nfalse*/\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6hv1md_.php:55\n\
    Stack trace:\n#0 /tmp/tmpv6hv1md_.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpv6hv1md_.php\
    \ on line 55\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    $i = 0;\n    $j = 1;\n    $k = 2;\n    while ($k\
    \ < count($s)) {\n        if ($s[$i] == $s[$j] || $s[$i] == $s[$k] || $s[$j] ==\
    \ $s[$k]) {\n            return false;\n        }\n        $i++;\n        $j++;\n\
    \        $k++;\n    }\n    return true;\n}\necho is_happy('a') . \"\\n\";\necho\
    \ is_happy('aa') . \"\\n\";\necho is_happy('abcd') . \"\\n\";\necho is_happy('aabb')\
    \ . \"\\n\";\necho is_happy('adb') . \"\\n\";\necho is_happy('xyy') . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfjccwyze.php:44\n\
    Stack trace:\n#0 /tmp/tmpfjccwyze.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpfjccwyze.php\
    \ on line 44\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'a';\necho is_happy($s);\necho '<br>';\n\
    $s = 'aa';\necho is_happy($s);\necho '<br>';\n$s = 'abcd';\necho is_happy($s);\n\
    echo '<br>';\n$s = 'aabb';\necho is_happy($s);\necho '<br>';\n$s = 'adb';\necho\
    \ is_happy($s);\necho '<br>';\n$s = 'xyy';\necho is_happy($s);\necho '<br>';\n\
    function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: <br><br>1<br><br>1<br><br>
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('aa')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_happy('abcd') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('aabb') ? 'true' : 'false';\necho \"\\n\";\necho\
    \ is_happy('adb') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('xyy') ? 'true'\
    \ : 'false';\necho \"\\n\";\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "false\nfalse\ntrue\ntrue\ntrue\ntrue\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp42m46gl0.php:51\nStack trace:\n#0 /tmp/tmp42m46gl0.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp42m46gl0.php on line 51\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    $arr = str_split($s);\n    if ($len < 3) {\n     \
    \   return false;\n    }\n    for ($i = 0; $i < $len - 2; $i++) {\n        if\
    \ ($arr[$i] == $arr[$i + 1] && $arr[$i] == $arr[$i + 2]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\n$s = \"adb\";\necho is_happy($s);\n\
    function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpczbb52s5.php:42\n\
    Stack trace:\n#0 /tmp/tmpczbb52s5.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpczbb52s5.php\
    \ on line 42\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') . PHP_EOL;\necho is_happy('aa')\
    \ . PHP_EOL;\necho is_happy('abcd') . PHP_EOL;\necho is_happy('aabb') . PHP_EOL;\n\
    echo is_happy('adb') . PHP_EOL;\necho is_happy('xyy') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '


    1


    1


    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('aabb');\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc_8p591j.php:40\n\
    Stack trace:\n#0 /tmp/tmpc_8p591j.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpc_8p591j.php\
    \ on line 40\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'abcd';\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/*\n * You are given a string s.\nYour task is to check if the string is\
    \ a palindrome.\nA palindrome is a string that is the same when read from left\
    \ to right and from right to left.\nFor example:\n>>> is_palindrome(a)\ntrue\n\
    >>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\n\
    true\n>>> is_palindrome(abab)\nfalse\n>>> is_palindrome(ababa)\ntrue\n>>> is_palindrome(ababab)\n\
    false\n>>> is_palindrome(abababa)\ntrue\n>>> is_palindrome(abababab)\nfalse\n\
    >>> is_palindrome(ababababa)\ntrue\n>>> is_palindrome(ababababab)\nfalse\n>>>\
    \ is_palindrome(abababababa)\ntrue\n>>> is_palindrome(abababababab)\nfalse\n>>>\
    \ is_palindrome(ababababababa)\ntrue\n>>> is_palindrome(ababababababab)\nfalse\n\
    >>> is_palindrome(abababababababa)\ntrue\n>>> is_palindrome(abababababababab)\n\
    false\n>>> is_palindrome(ababababababababa)\ntrue\n>>> is_palindrome(ababababababababab)\n\
    false\n>>> is_palindrome(abababababababababa)\ntrue\n>>> is_palindrome(abababababababababab)\n\
    false\n>>> is_palindrome(ababababababababababa)\ntrue\n>>> is\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 31 in /tmp/tmpyr8igsj6.php on
    line 31

    '
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = \"abcd\";\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a');\necho is_happy('aa');\n\
    echo is_happy('abcd');\necho is_happy('aabb');\necho is_happy('adb');\necho is_happy('xyy');\n\
    function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    $i = 0;\n    while ($i < count($s) - 2) {\n     \
    \   if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i +\
    \ 2]) {\n            return false;\n        }\n        $i++;\n    }\n    return\
    \ true;\n}\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpawj3dy7x.php:34\n\
    Stack trace:\n#0 /tmp/tmpawj3dy7x.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpawj3dy7x.php\
    \ on line 34\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/*\n * You are given a string s.\nYour task is to check if the string is\
    \ happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>> is_happy(aa)\n\
    false\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>> is_happy(adb)\n\
    true\n>>> is_happy(xyy)\nfalse\n */\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprv5rwg_x.php:57\n\
    Stack trace:\n#0 /tmp/tmprv5rwg_x.php(64): test()\n#1 {main}\n  thrown in /tmp/tmprv5rwg_x.php\
    \ on line 57\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is a palindrome\
    \ or not.\nA palindrome is a string that reads the same from left to right as\
    \ it does from right to left.\nFor example:\n>>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\n\
    false\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abc)\n\
    false\n>>> is_palindrome(abccba)\ntrue*/\nfunction candidate(...$args) {\n   \
    \ return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpghyuffie.php:55\n\
    Stack trace:\n#0 /tmp/tmpghyuffie.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpghyuffie.php\
    \ on line 55\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/*\n * You are given a string s.\nYour task is to check if the string is\
    \ a palindrome or not.\nA palindrome is a string that reads the same from left\
    \ to right and from right to left.\nFor example:\n>>> is_palindrome(a)\ntrue\n\
    >>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\n\
    true\n>>> is_palindrome(abcba)\ntrue\n>>> is_palindrome(abc)\nfalse\n*/\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpodjgexcs.php:57\n\
    Stack trace:\n#0 /tmp/tmpodjgexcs.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpodjgexcs.php\
    \ on line 57\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('aa')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_happy('abcd') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('aabb') ? 'true' : 'false';\necho \"\\n\";\necho\
    \ is_happy('adb') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('xyy') ? 'true'\
    \ : 'false';\necho \"\\n\";\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "false\nfalse\ntrue\ntrue\ntrue\ntrue\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp42m46gl0.php:51\nStack trace:\n#0 /tmp/tmp42m46gl0.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp42m46gl0.php on line 51\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is a palindrome or not.\nA palindrome is a string\
    \ that reads the same from left to right as it does from right to left.\nFor example:\n\
    >>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\n\
    true\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abcba)\ntrue\n>>> is_palindrome(abcdba)\n\
    false*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is happy or not.\nA string is happy if its length\
    \ is at least 3 and every 3 consecutive letters are distinct\nFor example:\n>>>\
    \ is_happy(a)\nfalse\n>>> is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\n\
    false\n>>> is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') . PHP_EOL;\necho is_happy('aa')\
    \ . PHP_EOL;\necho is_happy('abcd') . PHP_EOL;\necho is_happy('aabb') . PHP_EOL;\n\
    echo is_happy('adb') . PHP_EOL;\necho is_happy('xyy') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '


    1


    1


    '
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is palindrome or not.\nA string is palindrome if it\
    \ reads the same from left to right and from right to left.\nFor example:\n>>>\
    \ is_palindrome(a)\ntrue\n>>> is_palindrome(aa)\ntrue\n>>> is_palindrome(abcd)\n\
    false\n>>> is_palindrome(aabb)\ntrue\n>>> is_palindrome(adb)\nfalse\n>>> is_palindrome(xyy)\n\
    false*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n$s = 'a';\necho is_happy($s);\necho \"\\n\";\n$s = 'aa';\necho is_happy($s);\n\
    echo \"\\n\";\n$s = 'abcd';\necho is_happy($s);\necho \"\\n\";\n$s = 'aabb';\n\
    echo is_happy($s);\necho \"\\n\";\n$s = 'adb';\necho is_happy($s);\necho \"\\\
    n\";\n$s = 'xyy';\necho is_happy($s);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw0x_35zs.php:57\n\
    Stack trace:\n#0 /tmp/tmpw0x_35zs.php(64): test()\n#1 {main}\n  thrown in /tmp/tmpw0x_35zs.php\
    \ on line 57\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   if (strlen($s) < 3) {\n        return false;\n    }\n    for ($i = 0; $i <\
    \ strlen($s) - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i\
    \ + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\n/* You are given a string s.\nYour task is to check\
    \ if the string is a palindrome or not.\nA palindrome is a string that reads the\
    \ same from left to right and from right to left.\nFor example:\n>>> is_palindrome(a)\n\
    true\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\n\
    true\n>>> is_palindrome(abc)\nfalse\n>>> is_palindrome(abbc)\nfalse*/\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy(\"a\") . \"\\n\";\necho is_happy(\"aa\") . \"\\n\";\necho is_happy(\"\
    abcd\") . \"\\n\";\necho is_happy(\"aabb\") . \"\\n\";\necho is_happy(\"adb\"\
    ) . \"\\n\";\necho is_happy(\"xyy\") . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj38nb3rs.php:45\n\
    Stack trace:\n#0 /tmp/tmpj38nb3rs.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpj38nb3rs.php\
    \ on line 45\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a') . PHP_EOL;\necho is_happy('aa') . PHP_EOL;\necho is_happy('abcd')\
    \ . PHP_EOL;\necho is_happy('aabb') . PHP_EOL;\necho is_happy('adb') . PHP_EOL;\n\
    echo is_happy('xyy') . PHP_EOL;\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo5q0j62v.php:45\n\
    Stack trace:\n#0 /tmp/tmpo5q0j62v.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpo5q0j62v.php\
    \ on line 45\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    $len = count($s);\n    if ($len < 3) {\n        return\
    \ false;\n    }\n    for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] ==\
    \ $s[$i + 1] && $s[$i] == $s[$i + 2]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n\n/* You are given a string s.\nYour task is to check\
    \ if the string is sad or not.\nA string is sad if its length is at least 3 and\
    \ every 3 consecutive letters are the same.\nFor example:\n>>> is_sad(a)\nfalse\n\
    >>> is_sad(aa)\nfalse\n>>> is_sad(abcd)\nfalse\n>>> is_sad(aabb)\ntrue\n>>> is_sad(adb)\n\
    false\n>>> is_sad(xyy)\ntrue*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n\t\
    $len = strlen($s);\n\tif ($len < 3) {\n\t\treturn false;\n\t}\n\tfor ($i = 0;\
    \ $i < $len - 2; $i++) {\n\t\tif ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2]\
    \ || $s[$i + 1] == $s[$i + 2]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\necho is_happy('a');\necho is_happy('aa');\necho is_happy('abcd');\necho is_happy('aabb');\n\
    echo is_happy('adb');\necho is_happy('xyy');\nfunction candidate(...$args) {\n\
    \    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '11'
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    $count = count($s);\n    if ($count < 3) {\n    \
    \    return false;\n    }\n    for ($i = 0; $i < $count - 2; $i++) {\n       \
    \ if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = readline();\necho is_happy($s);\n\
    function candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function readline() in\
    \ /tmp/tmpcps9i1co.php:31\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpcps9i1co.php\
    \ on line 31\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  $arr = [];\n    for ($i = 0; $i < $len; $i++) {\n        if (isset($arr[$s[$i]]))\
    \ {\n            return false;\n        }\n        $arr[$s[$i]] = 1;\n       \
    \ if ($i >= 2) {\n            unset($arr[$s[$i - 2]]);\n        }\n    }\n   \
    \ return true;\n}\n\n$s = 'abcd';\nvar_dump(is_happy($s));\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'bool(true)

    '
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a');\necho is_happy('aa');\necho is_happy('abcd');\necho is_happy('aabb');\n\
    echo is_happy('adb');\necho is_happy('xyy');\nfunction candidate(...$args) {\n\
    \    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2hnc1s9w.php:45\n\
    Stack trace:\n#0 /tmp/tmp2hnc1s9w.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp2hnc1s9w.php\
    \ on line 45\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a') . \"\\n\";\necho is_happy('aa') . \"\\n\";\necho is_happy('abcd')\
    \ . \"\\n\";\necho is_happy('aabb') . \"\\n\";\necho is_happy('adb') . \"\\n\"\
    ;\necho is_happy('xyy') . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbo40934x.php:45\n\
    Stack trace:\n#0 /tmp/tmpbo40934x.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpbo40934x.php\
    \ on line 45\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n$s = 'aabb';\necho is_happy($s);\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8noz6g_d.php:41\n\
    Stack trace:\n#0 /tmp/tmp8noz6g_d.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp8noz6g_d.php\
    \ on line 41\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is happhp or not.\nA string is happhp if its length\
    \ is at least 3 and every 3 consecutive letters are distinct\nFor example:\n>>>\
    \ is_happy(a)\nfalse\n>>> is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\n\
    false\n>>> is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    if (count($s) < 3) {\n        return false;\n   \
    \ }\n    for ($i = 0; $i < count($s) - 2; $i++) {\n        if ($s[$i] == $s[$i\
    \ + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is a palindrome\
    \ or not.\nA palindrome is a string that reads the same from left to right as\
    \ it does from right to left.\nFor example:\n>>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\n\
    false\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abc)\n\
    false\n>>> is_palindrome(abcd)\nfalse*/\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph35s0wen.php:55\n\
    Stack trace:\n#0 /tmp/tmph35s0wen.php(62): test()\n#1 {main}\n  thrown in /tmp/tmph35s0wen.php\
    \ on line 55\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is happhp or not.\nA string is happhp if its length\
    \ is at least 3 and every 3 consecutive letters are distinct\nFor example:\n>>>\
    \ is_happy(a)\nfalse\n>>> is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\n\
    false\n>>> is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    $i = 0;\n    $count = count($s);\n    if ($count\
    \ < 3) {\n        return false;\n    }\n    while ($i < $count) {\n        if\
    \ ($s[$i] == $s[$i + 1] && $s[$i + 1] == $s[$i + 2]) {\n            return false;\n\
    \        }\n        $i++;\n    }\n    return true;\n}\n\necho is_happy('a');\n\
    echo is_happy('aa');\necho is_happy('abcd');\necho is_happy('aabb');\necho is_happy('adb');\n\
    echo is_happy('xyy');\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 4 in /tmp/tmpkda0per7.php on line 26\n1\n\
    Warning: Undefined array key 4 in /tmp/tmpkda0per7.php on line 26\n\nWarning:\
    \ Undefined array key 4 in /tmp/tmpkda0per7.php on line 26\n1\nWarning: Undefined\
    \ array key 3 in /tmp/tmpkda0per7.php on line 26\n1\nWarning: Undefined array\
    \ key 3 in /tmp/tmpkda0per7.php on line 26\n\nWarning: Undefined array key 3 in\
    \ /tmp/tmpkda0per7.php on line 26\n1\nWarning: Undefined array key 4 in /tmp/tmpkda0per7.php\
    \ on line 26\n\nWarning: Undefined array key 4 in /tmp/tmpkda0per7.php on line\
    \ 26\n\nWarning: Undefined array key 4 in /tmp/tmpkda0per7.php on line 26\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpkda0per7.php:48\nStack\
    \ trace:\n#0 /tmp/tmpkda0per7.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpkda0per7.php\
    \ on line 48\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('abcd');\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp92efchfb.php:40\n\
    Stack trace:\n#0 /tmp/tmp92efchfb.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp92efchfb.php\
    \ on line 40\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n$s = 'aabb';\necho is_happy($s);\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8noz6g_d.php:41\n\
    Stack trace:\n#0 /tmp/tmp8noz6g_d.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp8noz6g_d.php\
    \ on line 41\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) return false;\n    for ($i = 0; $i <\
    \ $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2]\
    \ || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\n/* You are given a string s.\nYour task is to check if\
    \ the string is a palindrome or not.\nA palindrome is a string that reads the\
    \ same from left to right as it does from right to left.\nFor example:\n>>> is_palindrome(a)\n\
    true\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\n\
    true\n>>> is_palindrome(abcba)\ntrue\n>>> is_palindrome(abc)\nfalse*/\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a') . PHP_EOL;\necho is_happy('aa') . PHP_EOL;\necho is_happy('abcd')\
    \ . PHP_EOL;\necho is_happy('aabb') . PHP_EOL;\necho is_happy('adb') . PHP_EOL;\n\
    echo is_happy('xyy') . PHP_EOL;\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo5q0j62v.php:45\n\
    Stack trace:\n#0 /tmp/tmpo5q0j62v.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpo5q0j62v.php\
    \ on line 45\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = \"aabb\";\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('aa')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_happy('abcd') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('aabb') ? 'true' : 'false';\necho \"\\n\";\necho\
    \ is_happy('adb') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('xyy') ? 'true'\
    \ : 'false';\necho \"\\n\";\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "false\nfalse\ntrue\ntrue\ntrue\ntrue\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp42m46gl0.php:51\nStack trace:\n#0 /tmp/tmp42m46gl0.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp42m46gl0.php on line 51\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = \"abcd\";\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('aa') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('abcd')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_happy('aabb') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('adb') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('xyy')\
    \ ? 'true' : 'false';\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $arr = str_split($s);\n    $len = count($arr);\n    if ($len < 3) {\n    \
    \    return false;\n    }\n    for ($i = 0; $i < $len - 2; $i++) {\n        if\
    \ ($arr[$i] == $arr[$i + 1] && $arr[$i] == $arr[$i + 2]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\necho is_happy('a') . \"\\n\"\
    ;\necho is_happy('aa') . \"\\n\";\necho is_happy('abcd') . \"\\n\";\necho is_happy('aabb')\
    \ . \"\\n\";\necho is_happy('adb') . \"\\n\";\necho is_happy('xyy') . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0xvvifkf.php:46\n\
    Stack trace:\n#0 /tmp/tmp0xvvifkf.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp0xvvifkf.php\
    \ on line 46\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is happy\
    \ or not.\nA string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>> is_happy(aa)\n\
    false\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>> is_happy(adb)\n\
    true\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68sa_iot.php:55\n\
    Stack trace:\n#0 /tmp/tmp68sa_iot.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp68sa_iot.php\
    \ on line 55\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is a palindrome or not.\nA palindrome is a string\
    \ that reads the same from left to right as it does from right to left.\nFor example:\n\
    >>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\n\
    true\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abcba)\ntrue\n>>> is_palindrome(abcd)\n\
    false*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a') . PHP_EOL;\necho is_happy('aa') . PHP_EOL;\necho is_happy('abcd')\
    \ . PHP_EOL;\necho is_happy('aabb') . PHP_EOL;\necho is_happy('adb') . PHP_EOL;\n\
    echo is_happy('xyy') . PHP_EOL;\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo5q0j62v.php:45\n\
    Stack trace:\n#0 /tmp/tmpo5q0j62v.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpo5q0j62v.php\
    \ on line 45\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a') . PHP_EOL;\necho is_happy('aa') . PHP_EOL;\necho is_happy('abcd')\
    \ . PHP_EOL;\necho is_happy('aabb') . PHP_EOL;\necho is_happy('adb') . PHP_EOL;\n\
    echo is_happy('xyy') . PHP_EOL;\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo5q0j62v.php:45\n\
    Stack trace:\n#0 /tmp/tmpo5q0j62v.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpo5q0j62v.php\
    \ on line 45\n"
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  $arr = str_split($s);\n    $arr2 = array_unique($arr);\n    if (count($arr2)\
    \ == 1) {\n        return false;\n    }\n    for ($i = 0; $i < $len - 2; $i++)\
    \ {\n        if ($arr[$i] == $arr[$i + 1] || $arr[$i] == $arr[$i + 2] || $arr[$i\
    \ + 1] == $arr[$i + 2]) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('aa') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('abcd')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_happy('aabb') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('adb') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('xyy')\
    \ ? 'true' : 'false';\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"a\")\
    \ !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\necho is_happy('a') . PHP_EOL;\necho is_happy('aa')\
    \ . PHP_EOL;\necho is_happy('abcd') . PHP_EOL;\necho is_happy('aabb') . PHP_EOL;\n\
    echo is_happy('adb') . PHP_EOL;\necho is_happy('xyy') . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '


    1


    1


    '
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'a';\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'aabb';\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'aabb';\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = 'abcd';\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660220778
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n/* You are given a string s.\nYour task\
    \ is to check if the string is palindrome or not.\nA string is palindrome if it\
    \ reads the same from left to right as from right to left.\nFor example:\n>>>\
    \ is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\nfalse\n>>> is_palindrome(aba)\n\
    true\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abc)\nfalse\n>>> is_palindrome(abcd)\n\
    false*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $s = str_split($s);\n    $count = count($s);\n    if ($count < 3) {\n    \
    \    return false;\n    }\n    for ($i = 0; $i < $count - 2; $i++) {\n       \
    \ if ($s[$i] == $s[$i + 1] || $s[$i] == $s[$i + 2] || $s[$i + 1] == $s[$i + 2])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\n/*\n\
    \ * You are given a string s.\nYour task is to check if the string is palindrome\
    \ or not.\nA string is palindrome if it reads the same from left to right as it\
    \ does from right to left.\nFor example:\n>>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\n\
    false\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abcba)\n\
    true\n>>> is_palindrome(abcd)\nfalse\n*/\nfunction candidate(...$args) {\n   \
    \ return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is a palindrome\
    \ or not.\nA palindrome is a string that reads the same from left to right as\
    \ it does from right to left.\nFor example:\n>>> is_palindrome(a)\ntrue\n>>> is_palindrome(ab)\n\
    false\n>>> is_palindrome(aba)\ntrue\n>>> is_palindrome(abba)\ntrue\n>>> is_palindrome(abcd)\n\
    false\n>>> is_palindrome(abccba)\ntrue*/\nfunction candidate(...$args) {\n   \
    \ return is_happy(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    a\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aa\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    abcd\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    aabb\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    adb\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    xyy\") !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    iopaxioi\") !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkuedpqg4.php:55\n\
    Stack trace:\n#0 /tmp/tmpkuedpqg4.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpkuedpqg4.php\
    \ on line 55\n"
  timestamp: 1660220779
- exit_code: 0
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] || $s[$i]\
    \ == $s[$i + 2] || $s[$i + 1] == $s[$i + 2]) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\n$s = \"abcd\";\necho is_happy($s);\nfunction\
    \ candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\necho is_happy('a') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('aa')\
    \ ? 'true' : 'false';\necho \"\\n\";\necho is_happy('abcd') ? 'true' : 'false';\n\
    echo \"\\n\";\necho is_happy('aabb') ? 'true' : 'false';\necho \"\\n\";\necho\
    \ is_happy('adb') ? 'true' : 'false';\necho \"\\n\";\necho is_happy('xyy') ? 'true'\
    \ : 'false';\necho \"\\n\";\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "false\nfalse\ntrue\ntrue\ntrue\ntrue\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp42m46gl0.php:51\nStack trace:\n#0 /tmp/tmp42m46gl0.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp42m46gl0.php on line 51\n"
  timestamp: 1660220778
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nfunction candidate(...$args) {\n    return is_happy(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"a\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"abcd\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"aabb\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"adb\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"xyy\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxpoi\") !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"iopaxioi\") !== false) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpclmtdqcr.php:39\n\
    Stack trace:\n#0 /tmp/tmpclmtdqcr.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpclmtdqcr.php\
    \ on line 39\n"
  timestamp: 1660220779
- exit_code: 255
  program: "<?php\n/* You are given a string s.\nYour task is to check if the string\
    \ is happhp or not.\nA string is happhp if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>>\
    \ is_happy(aa)\nfalse\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>>\
    \ is_happy(adb)\ntrue\n>>> is_happy(xyy)\nfalse*/\nfunction is_happy($s) {\n \
    \   $len = strlen($s);\n    if ($len < 3) {\n        return false;\n    }\n  \
    \  for ($i = 0; $i < $len - 2; $i++) {\n        if ($s[$i] == $s[$i + 1] && $s[$i]\
    \ == $s[$i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\n/* You are given a string s.\nYour task is to check if the string is happy\
    \ or not.\nA string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\nFor example:\n>>> is_happy(a)\nfalse\n>>> is_happy(aa)\n\
    false\n>>> is_happy(abcd)\ntrue\n>>> is_happy(aabb)\nfalse\n>>> is_happy(adb)\n\
    true\n>>> is_happy(xyy)\nfalse*/\nfunction candidate(...$args) {\n    return is_happy(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"a\") !== false) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"aa\") !== false) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"abcd\") !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"aabb\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"adb\") !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"xyy\") !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxpoi\")\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"iopaxioi\"\
    ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68sa_iot.php:55\n\
    Stack trace:\n#0 /tmp/tmp68sa_iot.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp68sa_iot.php\
    \ on line 55\n"
  timestamp: 1660220778
