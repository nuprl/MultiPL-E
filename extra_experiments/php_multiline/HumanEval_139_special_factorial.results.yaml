language: php
name: HumanEval_139_special_factorial
results:
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp3nos_rli.php:13\nStack trace:\n#0 /tmp/tmp3nos_rli.php(19): special_factorial(4)\n\
    #1 /tmp/tmp3nos_rli.php(23): candidate(4)\n#2 /tmp/tmp3nos_rli.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3nos_rli.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\n/* The function will receive an integer as input\
    \ and should return the special\nfactorial of this integer.*/\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_zr9sz0.php:25\n\
    Stack trace:\n#0 /tmp/tmp3_zr9sz0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3_zr9sz0.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplq4osujq.php:23\n\
    Stack trace:\n#0 /tmp/tmplq4osujq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplq4osujq.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7hkafvj.php:23\n\
    Stack trace:\n#0 /tmp/tmpu7hkafvj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpu7hkafvj.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxpb68uh.php:23\n\
    Stack trace:\n#0 /tmp/tmpoxpb68uh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpoxpb68uh.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkusr_jky.php:23\n\
    Stack trace:\n#0 /tmp/tmpkusr_jky.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpkusr_jky.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcl5csrtu.php:25\n\
    Stack trace:\n#0 /tmp/tmpcl5csrtu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcl5csrtu.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\n/* The function will receive an integer as input\
    \ and should return the special\nfactorial of this integer.*/\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_zr9sz0.php:25\n\
    Stack trace:\n#0 /tmp/tmp3_zr9sz0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3_zr9sz0.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\n/* The function will receive an integer as input\
    \ and should return the special\nfactorial of this integer.*/\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb8u9107h.php:25\n\
    Stack trace:\n#0 /tmp/tmpb8u9107h.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpb8u9107h.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp3nos_rli.php:13\nStack trace:\n#0 /tmp/tmp3nos_rli.php(19): special_factorial(4)\n\
    #1 /tmp/tmp3nos_rli.php(23): candidate(4)\n#2 /tmp/tmp3nos_rli.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3nos_rli.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmppo222_qz.php:13\nStack trace:\n#0 /tmp/tmppo222_qz.php(18): special_factorial(4)\n\
    #1 /tmp/tmppo222_qz.php(22): candidate(4)\n#2 /tmp/tmppo222_qz.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmppo222_qz.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\n/* The function will receive a string as input and should return the string\n\
    reversed.\nFor example:\n>>> reverse_string('hello')\n'olleh'\n>>> reverse_string('world')\n\
    'dlrow'*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfh77okzy.php:30\n\
    Stack trace:\n#0 /tmp/tmpfh77okzy.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpfh77okzy.php\
    \ on line 30\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\n\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zdxdbzm.php:24\n\
    Stack trace:\n#0 /tmp/tmp2zdxdbzm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2zdxdbzm.php\
    \ on line 24\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxpb68uh.php:23\n\
    Stack trace:\n#0 /tmp/tmpoxpb68uh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpoxpb68uh.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\n/* The function will receive an integer as input\
    \ and should return the special\nfactorial of this integer.*/\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_zr9sz0.php:25\n\
    Stack trace:\n#0 /tmp/tmp3_zr9sz0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3_zr9sz0.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp3nos_rli.php:13\nStack trace:\n#0 /tmp/tmp3nos_rli.php(19): special_factorial(4)\n\
    #1 /tmp/tmp3nos_rli.php(23): candidate(4)\n#2 /tmp/tmp3nos_rli.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3nos_rli.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $result =\
    \ 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\necho special_factorial(4);\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn32paq1r.php:23\n\
    Stack trace:\n#0 /tmp/tmpn32paq1r.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpn32paq1r.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpayhh3jbg.php:25\n\
    Stack trace:\n#0 /tmp/tmpayhh3jbg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpayhh3jbg.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpayhh3jbg.php:25\n\
    Stack trace:\n#0 /tmp/tmpayhh3jbg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpayhh3jbg.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\n/* The function will receive an integer as input\
    \ and should return the special\nfactorial of this integer.*/\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb8u9107h.php:25\n\
    Stack trace:\n#0 /tmp/tmpb8u9107h.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpb8u9107h.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg0y93009.php:24\n\
    Stack trace:\n#0 /tmp/tmpg0y93009.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpg0y93009.php\
    \ on line 24\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $result =\
    \ 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n \
    \   }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpsgtr2b8b.php:13\nStack trace:\n#0 /tmp/tmpsgtr2b8b.php(19): special_factorial(4)\n\
    #1 /tmp/tmpsgtr2b8b.php(23): candidate(4)\n#2 /tmp/tmpsgtr2b8b.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsgtr2b8b.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68viokn7.php:25\n\
    Stack trace:\n#0 /tmp/tmp68viokn7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp68viokn7.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\n/* The function will receive an integer as input\
    \ and should return the special\nfactorial of this integer.*/\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_zr9sz0.php:25\n\
    Stack trace:\n#0 /tmp/tmp3_zr9sz0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3_zr9sz0.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb6660qcv.php:24\n\
    Stack trace:\n#0 /tmp/tmpb6660qcv.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpb6660qcv.php\
    \ on line 24\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp3nos_rli.php:13\nStack trace:\n#0 /tmp/tmp3nos_rli.php(19): special_factorial(4)\n\
    #1 /tmp/tmp3nos_rli.php(23): candidate(4)\n#2 /tmp/tmp3nos_rli.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3nos_rli.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxpb68uh.php:23\n\
    Stack trace:\n#0 /tmp/tmpoxpb68uh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpoxpb68uh.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpayhh3jbg.php:25\n\
    Stack trace:\n#0 /tmp/tmpayhh3jbg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpayhh3jbg.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3gkizspq.php:23\n\
    Stack trace:\n#0 /tmp/tmp3gkizspq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3gkizspq.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmppo222_qz.php:13\nStack trace:\n#0 /tmp/tmppo222_qz.php(18): special_factorial(4)\n\
    #1 /tmp/tmppo222_qz.php(22): candidate(4)\n#2 /tmp/tmppo222_qz.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmppo222_qz.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxpb68uh.php:23\n\
    Stack trace:\n#0 /tmp/tmpoxpb68uh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpoxpb68uh.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp3nos_rli.php:13\nStack trace:\n#0 /tmp/tmp3nos_rli.php(19): special_factorial(4)\n\
    #1 /tmp/tmp3nos_rli.php(23): candidate(4)\n#2 /tmp/tmp3nos_rli.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3nos_rli.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48vrwfct.php:25\n\
    Stack trace:\n#0 /tmp/tmp48vrwfct.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp48vrwfct.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\n\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zdxdbzm.php:24\n\
    Stack trace:\n#0 /tmp/tmp2zdxdbzm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2zdxdbzm.php\
    \ on line 24\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpayhh3jbg.php:25\n\
    Stack trace:\n#0 /tmp/tmpayhh3jbg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpayhh3jbg.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7hkafvj.php:23\n\
    Stack trace:\n#0 /tmp/tmpu7hkafvj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpu7hkafvj.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $result =\
    \ 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\necho special_factorial(4);\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn32paq1r.php:23\n\
    Stack trace:\n#0 /tmp/tmpn32paq1r.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpn32paq1r.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $result =\
    \ 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\n\n/* The function will receive an integer as input and should return\
    \ the\nspecial factorial of this integer.*/\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp182c7_ef.php:25\n\
    Stack trace:\n#0 /tmp/tmp182c7_ef.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp182c7_ef.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb6660qcv.php:24\n\
    Stack trace:\n#0 /tmp/tmpb6660qcv.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpb6660qcv.php\
    \ on line 24\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp7ae2z9ti.php:13\nStack trace:\n#0 /tmp/tmp7ae2z9ti.php(19): special_factorial(4)\n\
    #1 /tmp/tmp7ae2z9ti.php(23): candidate(4)\n#2 /tmp/tmp7ae2z9ti.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7ae2z9ti.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3gkizspq.php:23\n\
    Stack trace:\n#0 /tmp/tmp3gkizspq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3gkizspq.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkusr_jky.php:23\n\
    Stack trace:\n#0 /tmp/tmpkusr_jky.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpkusr_jky.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb6660qcv.php:24\n\
    Stack trace:\n#0 /tmp/tmpb6660qcv.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpb6660qcv.php\
    \ on line 24\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp3nos_rli.php:13\nStack trace:\n#0 /tmp/tmp3nos_rli.php(19): special_factorial(4)\n\
    #1 /tmp/tmp3nos_rli.php(23): candidate(4)\n#2 /tmp/tmp3nos_rli.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3nos_rli.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpayhh3jbg.php:25\n\
    Stack trace:\n#0 /tmp/tmpayhh3jbg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpayhh3jbg.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpayhh3jbg.php:25\n\
    Stack trace:\n#0 /tmp/tmpayhh3jbg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpayhh3jbg.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\n/* The function will receive an integer as input\
    \ and should return the special\nfactorial of this integer.*/\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb8u9107h.php:25\n\
    Stack trace:\n#0 /tmp/tmpb8u9107h.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpb8u9107h.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $result =\
    \ 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\n\n/* The function will receive an integer as input and should return\
    \ the special\nfactorial of this integer.*/\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe91y4lcg.php:25\n\
    Stack trace:\n#0 /tmp/tmpe91y4lcg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpe91y4lcg.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptwsatckx.php:22\n\
    Stack trace:\n#0 /tmp/tmptwsatckx.php(28): test()\n#1 {main}\n  thrown in /tmp/tmptwsatckx.php\
    \ on line 22\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_wd29hnw.php:23\n\
    Stack trace:\n#0 /tmp/tmp_wd29hnw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_wd29hnw.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\n/* The function will receive an integer as input\
    \ and should return the special\nfactorial of this integer.*/\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_zr9sz0.php:25\n\
    Stack trace:\n#0 /tmp/tmp3_zr9sz0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3_zr9sz0.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpayhh3jbg.php:25\n\
    Stack trace:\n#0 /tmp/tmpayhh3jbg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpayhh3jbg.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $result =\
    \ 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\n\n/* The function will receive an integer as input and should return\
    \ the special\nfactorial of this integer.*/\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe91y4lcg.php:25\n\
    Stack trace:\n#0 /tmp/tmpe91y4lcg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpe91y4lcg.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplq4osujq.php:23\n\
    Stack trace:\n#0 /tmp/tmplq4osujq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplq4osujq.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\n\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zdxdbzm.php:24\n\
    Stack trace:\n#0 /tmp/tmp2zdxdbzm.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp2zdxdbzm.php\
    \ on line 24\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfn3k7yg.php:24\n\
    Stack trace:\n#0 /tmp/tmpvfn3k7yg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvfn3k7yg.php\
    \ on line 24\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpayhh3jbg.php:25\n\
    Stack trace:\n#0 /tmp/tmpayhh3jbg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpayhh3jbg.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp3nos_rli.php:13\nStack trace:\n#0 /tmp/tmp3nos_rli.php(19): special_factorial(4)\n\
    #1 /tmp/tmp3nos_rli.php(23): candidate(4)\n#2 /tmp/tmp3nos_rli.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3nos_rli.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $result =\
    \ 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\n\necho special_factorial(4);\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpichy_v8f.php:24\n\
    Stack trace:\n#0 /tmp/tmpichy_v8f.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpichy_v8f.php\
    \ on line 24\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp7ae2z9ti.php:13\nStack trace:\n#0 /tmp/tmp7ae2z9ti.php(19): special_factorial(4)\n\
    #1 /tmp/tmp7ae2z9ti.php(23): candidate(4)\n#2 /tmp/tmp7ae2z9ti.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7ae2z9ti.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkusr_jky.php:23\n\
    Stack trace:\n#0 /tmp/tmpkusr_jky.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpkusr_jky.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\n/* The function will receive an integer as input\
    \ and should return the special\nfactorial of this integer.*/\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb8u9107h.php:25\n\
    Stack trace:\n#0 /tmp/tmpb8u9107h.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpb8u9107h.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $result =\
    \ 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n \
    \   }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpsgtr2b8b.php:13\nStack trace:\n#0 /tmp/tmpsgtr2b8b.php(19): special_factorial(4)\n\
    #1 /tmp/tmpsgtr2b8b.php(23): candidate(4)\n#2 /tmp/tmpsgtr2b8b.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsgtr2b8b.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkusr_jky.php:23\n\
    Stack trace:\n#0 /tmp/tmpkusr_jky.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpkusr_jky.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxpb68uh.php:23\n\
    Stack trace:\n#0 /tmp/tmpoxpb68uh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpoxpb68uh.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $result =\
    \ 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\n\n/* Write a function that takes a string and returns the number\
    \ of vowels in the\nstring. The vowels are: a, e, i, o, u.\nFor example:\n>>>\
    \ count_vowels(\"hello\")\n2\n>>> count_vowels(\"world\")\n1\n>>> count_vowels(\"\
    \")\n0\n>>> count_vowels(\"aaaa\")\n4\n>>> count_vowels(\"bbbb\")\n0\n>>> count_vowels(\"\
    aeiou\")\n5\n>>> count_vowels(\"aeiouaeiou\")\n10\n>>> count_vowels(\"aeiouaeiouaeiou\"\
    )\n15\n>>> count_vowels(\"aeiouaeiouaeiouaeiou\")\n20\n>>> count_vowels(\"aeiouaeiouaeiouaeiouaeiou\"\
    )\n25\n>>> count_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiou\")\n30\n>>> count_vowels(\"\
    aeiouaeiouaeiouaeiouaeiouaeiouaeiou\")\n35\n>>> count_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"\
    )\n40\n>>> count_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\")\n45\n\
    >>> count_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\")\n50\n\
    >>> count_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\")\n\
    55\n>>> count_vowels(\"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"\
    )\n60\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 18 in /tmp/tmp7jtt_hk3.php on
    line 18

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxpb68uh.php:23\n\
    Stack trace:\n#0 /tmp/tmpoxpb68uh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpoxpb68uh.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7hkafvj.php:23\n\
    Stack trace:\n#0 /tmp/tmpu7hkafvj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpu7hkafvj.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3gkizspq.php:23\n\
    Stack trace:\n#0 /tmp/tmp3gkizspq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3gkizspq.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprot4lu7m.php:31\n\
    Stack trace:\n#0 /tmp/tmprot4lu7m.php(37): test()\n#1 {main}\n  thrown in /tmp/tmprot4lu7m.php\
    \ on line 31\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxpb68uh.php:23\n\
    Stack trace:\n#0 /tmp/tmpoxpb68uh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpoxpb68uh.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $result =\
    \ 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= $i;\n    }\n    for\
    \ ($i = 1; $i < $n; $i++) {\n        $result *= $i;\n    }\n    return $result;\n\
    }\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "144\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccis5t8e.php:26\n\
    Stack trace:\n#0 /tmp/tmpccis5t8e.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpccis5t8e.php\
    \ on line 26\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the\n\
    special factorial of this integer.*/\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_e548ft0.php:25\n\
    Stack trace:\n#0 /tmp/tmp_e548ft0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp_e548ft0.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp3nos_rli.php:13\nStack trace:\n#0 /tmp/tmp3nos_rli.php(19): special_factorial(4)\n\
    #1 /tmp/tmp3nos_rli.php(23): candidate(4)\n#2 /tmp/tmp3nos_rli.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3nos_rli.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\n/* The function will receive an integer as input\
    \ and should return the special\nfactorial of this integer.*/\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_zr9sz0.php:25\n\
    Stack trace:\n#0 /tmp/tmp3_zr9sz0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3_zr9sz0.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxpb68uh.php:23\n\
    Stack trace:\n#0 /tmp/tmpoxpb68uh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpoxpb68uh.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3gkizspq.php:23\n\
    Stack trace:\n#0 /tmp/tmp3gkizspq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3gkizspq.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpayhh3jbg.php:25\n\
    Stack trace:\n#0 /tmp/tmpayhh3jbg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpayhh3jbg.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfn3k7yg.php:24\n\
    Stack trace:\n#0 /tmp/tmpvfn3k7yg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvfn3k7yg.php\
    \ on line 24\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp3nos_rli.php:13\nStack trace:\n#0 /tmp/tmp3nos_rli.php(19): special_factorial(4)\n\
    #1 /tmp/tmp3nos_rli.php(23): candidate(4)\n#2 /tmp/tmp3nos_rli.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3nos_rli.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\n/* The function will receive an integer as input\
    \ and should return the special\nfactorial of this integer.*/\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb8u9107h.php:25\n\
    Stack trace:\n#0 /tmp/tmpb8u9107h.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpb8u9107h.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmppo222_qz.php:13\nStack trace:\n#0 /tmp/tmppo222_qz.php(18): special_factorial(4)\n\
    #1 /tmp/tmppo222_qz.php(22): candidate(4)\n#2 /tmp/tmppo222_qz.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmppo222_qz.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $result =\
    \ 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n \
    \   }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpsgtr2b8b.php:13\nStack trace:\n#0 /tmp/tmpsgtr2b8b.php(19): special_factorial(4)\n\
    #1 /tmp/tmpsgtr2b8b.php(23): candidate(4)\n#2 /tmp/tmpsgtr2b8b.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsgtr2b8b.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7hkafvj.php:23\n\
    Stack trace:\n#0 /tmp/tmpu7hkafvj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpu7hkafvj.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb6660qcv.php:24\n\
    Stack trace:\n#0 /tmp/tmpb6660qcv.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpb6660qcv.php\
    \ on line 24\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $result =\
    \ 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\n\n/* The function will receive an integer as input and should return\
    \ the special\nfactorial of this integer.*/\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb810c13c.php:25\n\
    Stack trace:\n#0 /tmp/tmpb810c13c.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpb810c13c.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg0y93009.php:24\n\
    Stack trace:\n#0 /tmp/tmpg0y93009.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpg0y93009.php\
    \ on line 24\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_wd29hnw.php:23\n\
    Stack trace:\n#0 /tmp/tmp_wd29hnw.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp_wd29hnw.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcl5csrtu.php:25\n\
    Stack trace:\n#0 /tmp/tmpcl5csrtu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcl5csrtu.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $result =\
    \ 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n \
    \   }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpsgtr2b8b.php:13\nStack trace:\n#0 /tmp/tmpsgtr2b8b.php(19): special_factorial(4)\n\
    #1 /tmp/tmpsgtr2b8b.php(23): candidate(4)\n#2 /tmp/tmpsgtr2b8b.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmpsgtr2b8b.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp3nos_rli.php:13\nStack trace:\n#0 /tmp/tmp3nos_rli.php(19): special_factorial(4)\n\
    #1 /tmp/tmp3nos_rli.php(23): candidate(4)\n#2 /tmp/tmp3nos_rli.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3nos_rli.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfn3k7yg.php:24\n\
    Stack trace:\n#0 /tmp/tmpvfn3k7yg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvfn3k7yg.php\
    \ on line 24\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplq4osujq.php:23\n\
    Stack trace:\n#0 /tmp/tmplq4osujq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmplq4osujq.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg0y93009.php:24\n\
    Stack trace:\n#0 /tmp/tmpg0y93009.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpg0y93009.php\
    \ on line 24\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7hkafvj.php:23\n\
    Stack trace:\n#0 /tmp/tmpu7hkafvj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpu7hkafvj.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 0
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    if ($n ==\
    \ 0) {\n        return 1;\n    }\n    $factorial = 1;\n    for ($i = $n; $i >\
    \ 0; $i--) {\n        $factorial *= $i;\n    }\n    return $factorial * special_factorial($n\
    \ - 1);\n}\necho special_factorial(4);\nfunction candidate(...$args) {\n    return\
    \ special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '288'
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp3nos_rli.php:13\nStack trace:\n#0 /tmp/tmp3nos_rli.php(19): special_factorial(4)\n\
    #1 /tmp/tmp3nos_rli.php(23): candidate(4)\n#2 /tmp/tmp3nos_rli.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3nos_rli.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\n/* The function will receive an integer as input\
    \ and should return the special\nfactorial of this integer.*/\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_zr9sz0.php:25\n\
    Stack trace:\n#0 /tmp/tmp3_zr9sz0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3_zr9sz0.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkusr_jky.php:23\n\
    Stack trace:\n#0 /tmp/tmpkusr_jky.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpkusr_jky.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp7ae2z9ti.php:13\nStack trace:\n#0 /tmp/tmp7ae2z9ti.php(19): special_factorial(4)\n\
    #1 /tmp/tmp7ae2z9ti.php(23): candidate(4)\n#2 /tmp/tmp7ae2z9ti.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7ae2z9ti.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\n/*\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.\n*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4vcshrcl.php:27\n\
    Stack trace:\n#0 /tmp/tmp4vcshrcl.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4vcshrcl.php\
    \ on line 27\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptwsatckx.php:22\n\
    Stack trace:\n#0 /tmp/tmptwsatckx.php(28): test()\n#1 {main}\n  thrown in /tmp/tmptwsatckx.php\
    \ on line 22\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx2yuxf7v.php:24\n\
    Stack trace:\n#0 /tmp/tmpx2yuxf7v.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpx2yuxf7v.php\
    \ on line 24\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $result =\
    \ 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\necho special_factorial(4);\nfunction candidate(...$args) {\n  \
    \  return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if (candidate(4)\
    \ !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !==\
    \ 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7) !==\
    \ 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn32paq1r.php:23\n\
    Stack trace:\n#0 /tmp/tmpn32paq1r.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpn32paq1r.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpayhh3jbg.php:25\n\
    Stack trace:\n#0 /tmp/tmpayhh3jbg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpayhh3jbg.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $result =\
    \ 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= factorial($i);\n \
    \   }\n    return $result;\n}\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmpxm_sktl5.php:13\nStack trace:\n#0 /tmp/tmpxm_sktl5.php(18): special_factorial(4)\n\
    #1 /tmp/tmpxm_sktl5.php(22): candidate(4)\n#2 /tmp/tmpxm_sktl5.php(28): test()\n\
    #3 {main}\n  thrown in /tmp/tmpxm_sktl5.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\n/* The function will receive an integer as input\
    \ and should return the special\nfactorial of this integer.*/\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_zr9sz0.php:25\n\
    Stack trace:\n#0 /tmp/tmp3_zr9sz0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3_zr9sz0.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $result =\
    \ 1;\n    for ($i = $n; $i > 0; $i--) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\n\n/* The function will receive an integer as input and should return\
    \ the special\nfactorial of this integer.*/\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe91y4lcg.php:25\n\
    Stack trace:\n#0 /tmp/tmpe91y4lcg.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpe91y4lcg.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68viokn7.php:25\n\
    Stack trace:\n#0 /tmp/tmp68viokn7.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp68viokn7.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxpb68uh.php:23\n\
    Stack trace:\n#0 /tmp/tmpoxpb68uh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpoxpb68uh.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\n/* The function will receive an integer as input\
    \ and should return the special\nfactorial of this integer.*/\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3_zr9sz0.php:25\n\
    Stack trace:\n#0 /tmp/tmp3_zr9sz0.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp3_zr9sz0.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfn3k7yg.php:24\n\
    Stack trace:\n#0 /tmp/tmpvfn3k7yg.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpvfn3k7yg.php\
    \ on line 24\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3gkizspq.php:23\n\
    Stack trace:\n#0 /tmp/tmp3gkizspq.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3gkizspq.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\n/* The function will receive an integer as input\
    \ and should return the special\nfactorial of this integer.*/\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb8u9107h.php:25\n\
    Stack trace:\n#0 /tmp/tmpb8u9107h.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpb8u9107h.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkusr_jky.php:23\n\
    Stack trace:\n#0 /tmp/tmpkusr_jky.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpkusr_jky.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp3nos_rli.php:13\nStack trace:\n#0 /tmp/tmp3nos_rli.php(19): special_factorial(4)\n\
    #1 /tmp/tmp3nos_rli.php(23): candidate(4)\n#2 /tmp/tmp3nos_rli.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp3nos_rli.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu7hkafvj.php:23\n\
    Stack trace:\n#0 /tmp/tmpu7hkafvj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpu7hkafvj.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $result *= factorial($i);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorial() in\
    \ /tmp/tmp7ae2z9ti.php:13\nStack trace:\n#0 /tmp/tmp7ae2z9ti.php(19): special_factorial(4)\n\
    #1 /tmp/tmp7ae2z9ti.php(23): candidate(4)\n#2 /tmp/tmp7ae2z9ti.php(29): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7ae2z9ti.php on line 13\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial\
    \ * special_factorial($n - 1);\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    262144 bytes) in /tmp/tmpp03y93dq.php on line 15

    '
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = 1; $i <= $n; $i++) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer. */\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv93oki6r.php:25\n\
    Stack trace:\n#0 /tmp/tmpv93oki6r.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpv93oki6r.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $result =\
    \ 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $result *= $i;\n    }\n    return\
    \ $result;\n}\n\n/* The function will receive an integer as input and should return\
    \ the special\nfactorial of this integer.*/\nfunction candidate(...$args) {\n\
    \    return special_factorial(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5)\
    \ !== 34560) { throw new Exception(\"Test failed!\"); }\n    if (candidate(7)\
    \ !== 125411328000) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1)\
    \ !== 1) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb810c13c.php:25\n\
    Stack trace:\n#0 /tmp/tmpb810c13c.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpb810c13c.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\necho special_factorial(4);\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg0y93009.php:24\n\
    Stack trace:\n#0 /tmp/tmpg0y93009.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpg0y93009.php\
    \ on line 24\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\necho special_factorial(4);\nfunction candidate(...$args)\
    \ {\n    return special_factorial(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(4) !== 288) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(5) !== 34560) { throw new Exception(\"Test failed!\"); }\n   \
    \ if (candidate(7) !== 125411328000) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "24\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxpb68uh.php:23\n\
    Stack trace:\n#0 /tmp/tmpoxpb68uh.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpoxpb68uh.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $result = 1;\n\
    \  for ($i = $n; $i > 0; $i--) {\n    $result *= $i;\n  }\n  return $result;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp48vrwfct.php:25\n\
    Stack trace:\n#0 /tmp/tmp48vrwfct.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp48vrwfct.php\
    \ on line 25\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = 1; $i <= $n; $i++) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_w72m89.php:23\n\
    Stack trace:\n#0 /tmp/tmp6_w72m89.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp6_w72m89.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n    $factorial\
    \ = 1;\n    for ($i = 1; $i <= $n; $i++) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial;\n}\n\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf66w9v4.php:23\n\
    Stack trace:\n#0 /tmp/tmpbf66w9v4.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpbf66w9v4.php\
    \ on line 23\n"
  timestamp: 1660220656
- exit_code: 255
  program: "<?php\n/* The Brazilian factorial is defined as:\nbrazilian_factorial(n)\
    \ = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\nFor example:\n>>> special_factorial(4)\n\
    288\nThe function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction special_factorial($n) {\n  $factorial =\
    \ 1;\n  for ($i = $n; $i > 0; $i--) {\n    $factorial *= $i;\n  }\n  return $factorial;\n\
    }\n\n/* The function will receive an integer as input and should return the special\n\
    factorial of this integer.*/\nfunction candidate(...$args) {\n    return special_factorial(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(4) !== 288) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(5) !== 34560) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(7) !== 125411328000) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(1) !== 1) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcl5csrtu.php:25\n\
    Stack trace:\n#0 /tmp/tmpcl5csrtu.php(31): test()\n#1 {main}\n  thrown in /tmp/tmpcl5csrtu.php\
    \ on line 25\n"
  timestamp: 1660220656
