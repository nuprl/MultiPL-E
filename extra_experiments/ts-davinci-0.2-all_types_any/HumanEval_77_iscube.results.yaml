language: ts
name: HumanEval_77_iscube
results:
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329839
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    if (a == 1) {\n        return true;\n    }\n    for (let i = 2; i\
    \ < a; i++) {\n        if (i * i * i == a) {\n            return true;\n     \
    \   }\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329839
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = a * -1;\n\
    \    }\n    for (let i = 1; i < a; i++) {\n        if (i * i * i == a) {\n   \
    \         return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpat5z7d1n.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpat5z7d1n.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329839
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 0;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329839
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i < a; i++) {\n        if (i * i * i == a) {\n   \
    \         return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqgi9f_9u.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqgi9f_9u.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329840
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329840
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329840
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329839
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329842
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    else if (a < 0) {\n        return\
    \ iscube(-a);\n    }\n    else {\n        let x = Math.round(Math.pow(a, 1 / 3));\n\
    \        return x * x * x === a;\n    }\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329842
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329842
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = a * -1;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329842
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    if (a == 1) {\n        return true;\n    }\n    let i = 0;\n    while\
    \ (i * i * i < a) {\n        i++;\n    }\n    if (i * i * i == a) {\n        return\
    \ true;\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329842
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    var i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ==\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329843
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    var\
    \ b = Math.cbrt(a);\n    if (b % 1 == 0) {\n        return true;\n    }\n    else\
    \ {\n        return false;\n    }\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp_le_6e9h.ts(18,18): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329843
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    return\
    \ Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpzjxs0w3z.ts(18,17): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329843
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    return\
    \ Math.cbrt(a) % 1 === 0;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpl7p_0p0w.ts(18,17): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329844
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329845
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329840
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 0;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329839
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329840
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = a *\
    \ -1;\n    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i\
    \ * i === a) {\n            return true;\n        }\n        i++;\n    }\n   \
    \ return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329845
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    let\
    \ x = Math.cbrt(a);\n    if (x % 1 == 0) {\n        return true;\n    }\n    else\
    \ {\n        return false;\n    }\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp8avis048.ts(18,18): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329845
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329840
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i < a; i++) {\n        if (i * i * i == a) {\n   \
    \         return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpunrux4e3.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpunrux4e3.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329845
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = a *\
    \ -1;\n    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329846
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329845
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    return\
    \ Math.cbrt(a) % 1 === 0;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp1hw05yby.ts(18,17): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329846
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = a * -1;\n    }\n    let b = Math.cbrt(a);\n    if (b\
    \ % 1 === 0) {\n        return true;\n    } else {\n        return false;\n  \
    \  }\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\n\
    console.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpl3iwytgl.ts(21,18): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329846
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = a * -1;\n    }\n    let b = Math.cbrt(a);\n    if (b\
    \ % 1 === 0) {\n        return true;\n    } else {\n        return false;\n  \
    \  }\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\n\
    console.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpl3iwytgl.ts(21,18): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329846
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = a *\
    \ -1;\n    }\n    for (let i = 0; i <= a; i++) {\n        if (i * i * i === a)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329847
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    return\
    \ Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpzjxs0w3z.ts(18,17): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329843
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    else {\n        let i = 1;\n        while (i * i * i <= a) {\n   \
    \         if (i * i * i == a) {\n                return true;\n            }\n\
    \            i++;\n        }\n        return false;\n    }\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329847
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\n\
    console.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329847
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    if (a == 1) {\n        return true;\n    }\n    if (a == 2) {\n  \
    \      return false;\n    }\n    if (a == 3) {\n        return false;\n    }\n\
    \    if (a == 4) {\n        return true;\n    }\n    if (a == 5) {\n        return\
    \ false;\n    }\n    if (a == 6) {\n        return false;\n    }\n    if (a ==\
    \ 7) {\n        return false;\n    }\n    if (a == 8) {\n        return true;\n\
    \    }\n    if (a == 9) {\n        return true;\n    }\n    if (a == 10) {\n \
    \       return false;\n    }\n    if (a == 11) {\n        return false;\n    }\n\
    \    if (a == 12) {\n        return false;\n    }\n    if (a == 13) {\n      \
    \  return false;\n    }\n    if (a == 14) {\n        return false;\n    }\n  \
    \  if (a == 15) {\n        return false;\n    }\n    if (a == 16) {\n        return\
    \ true;\n    }\n    if (a == 17) {\n        return false;\n    }\n    if (a ==\
    \ 18) {\n        return false;\n    }\n    if (a == 19) {\n        return false;\n\
    \    }\n    if (a == 20) {\n        return false;\n    }\n    if (a == 21) {\n\
    \        return false;\n    }\n    if (a == 22) {\n        return false;\n   \
    \ }\n    if (a == 23) {\n        return false;\n    }\n    if (a == 24) {\n  \
    \      return false;\n    }\n    if (a == 25) {\n        return true;\n    }\n\
    \    if (a == 26) {\n        return false;\n    }\n    if (a == 27) {\n      \
    \  return true;\n    }\n    if (a == 28) {\n        return false;\n    }\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpwsz0d8bv.ts(124,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329847
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = a * -1;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329848
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ==\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329849
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let x = Math.floor(Math.pow(a, 1 / 3));\n    return Math.pow(x, 3)\
    \ === a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpfvf2y5uh.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfvf2y5uh.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329849
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ==\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329849
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    return\
    \ Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpzjxs0w3z.ts(18,17): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329843
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    else if (a < 0) {\n        a =\
    \ -a;\n    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329849
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    let\
    \ cube = Math.cbrt(a);\n    if (cube % 1 == 0) {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpu6_xjbzr.ts(18,21): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329849
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = a *\
    \ -1;\n    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329846
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329842
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329840
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    else if (a < 0) {\n        return\
    \ iscube(-a);\n    }\n    else {\n        let i = 1;\n        while (i * i * i\
    \ <= a) {\n            if (i * i * i == a) {\n                return true;\n \
    \           }\n            i++;\n        }\n        return false;\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329850
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a > 0) {\n        let b = Math.cbrt(a);\n        if (b % 1 == 0) {\n      \
    \      return true;\n        }\n        else {\n            return false;\n  \
    \      }\n    }\n    else {\n        return true;\n    }\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp_z5_5h_5.ts(19,22): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329850
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let b = Math.floor(Math.pow(a, 1 / 3));\n    return Math.pow(b, 3)\
    \ === a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpj36jrsl1.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpj36jrsl1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329850
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    return\
    \ Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpzjxs0w3z.ts(18,17): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329843
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    return\
    \ Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpzjxs0w3z.ts(18,17): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329843
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    let\
    \ cube: number = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpfwrjpx2l.ts(18,29): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329851
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = Math.abs(a);\n    }\n    let cube = Math.cbrt(a);\n \
    \   if (cube % 1 === 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\n\
    console.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpsmpyuovy.ts(21,21): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329851
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329845
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = a * -1;\n    }\n    for (let i = 0; i <= a; i++) {\n\
    \        if (i * i * i === a) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329852
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    return\
    \ Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpzjxs0w3z.ts(18,17): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329843
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    let\
    \ cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpngsc3p8u.ts(18,21): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329852
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    return\
    \ Math.cbrt(a) % 1 === 0;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp1hw05yby.ts(18,17): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329846
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329842
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a > 0) {\n        for (let\
    \ i = 1; i <= a; i++) {\n            if (i * i * i == a) {\n                return\
    \ true;\n            }\n        }\n    }\n    if (a < 0) {\n        for (let i\
    \ = -1; i >= a; i--) {\n            if (i * i * i == a) {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329852
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329839
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329839
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = a * -1;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (Math.pow(i, 3) == a) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329853
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329840
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ==\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329853
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        return true;\n    }\n    else if (a == 0) {\n        return\
    \ true;\n    }\n    else if (a == 1) {\n        return true;\n    }\n    else\
    \ {\n        for (let i = 1; i < a; i++) {\n            if (i * i * i == a) {\n\
    \                return true;\n            }\n        }\n        return false;\n\
    \    }\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\n\
    console.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329853
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329840
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    return\
    \ Math.cbrt(a) % 1 === 0;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp1hw05yby.ts(18,17): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329846
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    return\
    \ (Math.cbrt(a) % 1 === 0);\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpjr60rtku.ts(18,18): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329854
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    if (a == 1) {\n        return true;\n    }\n    if (a == 2) {\n  \
    \      return false;\n    }\n    if (a == 3) {\n        return false;\n    }\n\
    \    if (a == 4) {\n        return true;\n    }\n    if (a == 5) {\n        return\
    \ false;\n    }\n    if (a == 6) {\n        return false;\n    }\n    if (a ==\
    \ 7) {\n        return false;\n    }\n    if (a == 8) {\n        return true;\n\
    \    }\n    if (a == 9) {\n        return true;\n    }\n    if (a == 10) {\n \
    \       return false;\n    }\n    if (a == 11) {\n        return false;\n    }\n\
    \    if (a == 12) {\n        return false;\n    }\n    if (a == 13) {\n      \
    \  return false;\n    }\n    if (a == 14) {\n        return false;\n    }\n  \
    \  if (a == 15) {\n        return false;\n    }\n    if (a == 16) {\n        return\
    \ true;\n    }\n    if (a == 17) {\n        return false;\n    }\n    if (a ==\
    \ 18) {\n        return false;\n    }\n    if (a == 19) {\n        return false;\n\
    \    }\n    if (a == 20) {\n        return false;\n    }\n    if (a == 21) {\n\
    \        return false;\n    }\n    if (a == 22) {\n        return false;\n   \
    \ }\n    if (a == 23) {\n        return false;\n    }\n    if (a == 24) {\n  \
    \      return false;\n    }\n    if (a == 25) {\n        return true;\n    }\n\
    \    if (a == 26) {\n        return false;\n    }\n    if (a == 27) {\n      \
    \  return true;\n    }\n    if (a == 28) {\n        return false;\n    }\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpwsz0d8bv.ts(124,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329847
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329840
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329840
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ==\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329853
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329839
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329845
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    var i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329855
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ==\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329853
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329840
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329845
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    var i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ==\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329843
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329842
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    var i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ==\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329855
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329842
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329840
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        return true;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    if (a == 1) {\n        return true;\n    }\n    if (a == 2) {\n  \
    \      return false;\n    }\n    if (a == 64) {\n        return true;\n    }\n\
    \    if (a == 180) {\n        return false;\n    }\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxw8fnsyq.js:51:12)\n \
    \   at Object.<anonymous> (/tmp/tmpxw8fnsyq.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329855
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329842
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i < a; i++) {\n        if (i * i * i == a) {\n   \
    \         return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpunrux4e3.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpunrux4e3.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329845
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\n\
    console.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329847
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329855
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329845
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    let\
    \ cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpngsc3p8u.ts(18,21): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329852
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    let\
    \ b: number = Math.sqrt(a);\n    let c: number = Math.pow(b, 3);\n    if (c ==\
    \ a) {\n        return true;\n    }\n    else {\n        return false;\n    }\n\
    }\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\n\
    console.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpx32g5l15.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpx32g5l15.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    false

    false

    true

    false

    '
  timestamp: 1660329856
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = a * -1;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i < a; i++) {\n        if (i * i * i == a) {\n   \
    \         return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcg6pst5e.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcg6pst5e.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329856
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 0;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329839
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    for (let i = 0; i <= a; i++) {\n    \
    \    if (i * i * i === a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\n\
    console.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329857
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329839
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    let\
    \ result = false;\n    let cube = 0;\n    let i = 0;\n    while (cube < a) {\n\
    \        i++;\n        cube = i * i * i;\n        if (cube === a) {\n        \
    \    result = true;\n        }\n    }\n    return result;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp75yd0cxc.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp75yd0cxc.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    false

    true

    false

    false

    '
  timestamp: 1660329857
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i < a; i++) {\n        if (i * i * i == a) {\n   \
    \         return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpph_o60r1.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpph_o60r1.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    false

    true

    true

    false

    '
  timestamp: 1660329858
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ==\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329853
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = a * -1;\n    }\n    for (let i = 0; i < a; i++) {\n \
    \       if (i * i * i === a) {\n            return true;\n        }\n    }\n \
    \   return false;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\n\
    console.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpq7qjh5dm.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq7qjh5dm.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    false

    true

    false

    false

    '
  timestamp: 1660329858
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    let\
    \ cube = Math.pow(a, 1 / 3);\n    return Number.isInteger(cube);\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp6zo9uz08.ts(19,19): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660329858
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\n\
    console.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329858
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    let\
    \ result: boolean = false;\n    let i: number = 0;\n    while (i < a) {\n    \
    \    if (i * i * i === a) {\n            result = true;\n        }\n        i++;\n\
    \    }\n    return result;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpky3jnv0_.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpky3jnv0_.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    false

    true

    false

    false

    '
  timestamp: 1660329859
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329860
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i < a; i++) {\n        if (i * i * i == a) {\n   \
    \         return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4ljxxghf.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4ljxxghf.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    false

    true

    true

    false

    '
  timestamp: 1660329860
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329839
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    var b = Math.floor(Math.pow(a, 1 / 3));\n    if (b * b * b == a) {\n\
    \        return true;\n    }\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuumdfyf2.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuumdfyf2.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329860
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = a * -1;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329848
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = a *\
    \ -1;\n    }\n    for (let i = 1; i < a; i++) {\n        if (i * i * i === a)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwo7eiz8c.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwo7eiz8c.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329861
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = a *\
    \ -1;\n    }\n    let b = Math.sqrt(a);\n    if (b % 1 === 0) {\n        return\
    \ true;\n    }\n    return false;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpglmroc1k.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpglmroc1k.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329861
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329839
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i < a; i++) {\n        if (i * i * i === a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmps8gcqaej.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps8gcqaej.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329861
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ==\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329849
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = a * -1;\n    }\n    if (a === 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329861
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329855
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    let\
    \ cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpdhbgkc13.ts(18,21): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329862
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i < a; i++) {\n        if (i * i * i === a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmps8gcqaej.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps8gcqaej.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329861
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if(a<0){\n\
    \        a = -a;\n    }\n    if(a==0){\n        return true;\n    }\n    var i\
    \ = 1;\n    while(i*i*i<=a){\n        if(i*i*i==a){\n            return true;\n\
    \        }\n        i++;\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329863
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    return\
    \ Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpzjxs0w3z.ts(18,17): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329843
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329842
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329840
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (typeof a !== 'number') {\n        return 'Invalid input';\n    }\n    if (a\
    \ === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n \
    \   }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329863
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329839
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329839
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    else if (a < 0) {\n        return\
    \ true;\n    }\n    else if (a == 1) {\n        return true;\n    }\n    else\
    \ if (a == 2) {\n        return false;\n    }\n    else if (a == 3) {\n      \
    \  return false;\n    }\n    else if (a == 4) {\n        return true;\n    }\n\
    \    else if (a == 5) {\n        return false;\n    }\n    else if (a == 6) {\n\
    \        return false;\n    }\n    else if (a == 7) {\n        return false;\n\
    \    }\n    else if (a == 8) {\n        return true;\n    }\n    else if (a ==\
    \ 9) {\n        return true;\n    }\n    else if (a == 10) {\n        return false;\n\
    \    }\n    else if (a == 11) {\n        return false;\n    }\n    else if (a\
    \ == 12) {\n        return false;\n    }\n    else if (a == 13) {\n        return\
    \ false;\n    }\n    else if (a == 14) {\n        return false;\n    }\n    else\
    \ if (a == 15) {\n        return false;\n    }\n    else if (a == 16) {\n    \
    \    return true;\n    }\n    else if (a == 17) {\n        return false;\n   \
    \ }\n    else if (a == 18) {\n        return false;\n    }\n    else if (a ==\
    \ 19) {\n        return false;\n    }\n    else if (a == 20) {\n        return\
    \ false;\n    }\n    else if (a == 21) {\n        return false;\n    }\n    else\
    \ if (a == 22) {\n        return false;\n    }\n    else if (a == 23) {\n    \
    \    return false;\n    }\n    else if (a == 24) {\n        return false;\n  \
    \  }\n    else if (a == 25) {\n        return true;\n    }\n    else if (a ==\
    \ 26) {\n        return false;\n    }\n    else if (a == 27)\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp1eir4n47.ts(119,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329863
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    return\
    \ Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpzjxs0w3z.ts(18,17): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329843
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    let\
    \ cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpngsc3p8u.ts(18,21): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329852
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    else if (a < 0) {\n        return\
    \ iscube(-a);\n    }\n    else {\n        let i = 1;\n        while (i * i * i\
    \ <= a) {\n            if (i * i * i == a) {\n                return true;\n \
    \           }\n            i++;\n        }\n        return false;\n    }\n}\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329864
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        return true;\n    } else if (a === 0) {\n        return true;\n\
    \    } else if (a === 1) {\n        return true;\n    } else {\n        for (let\
    \ i = 1; i <= a; i++) {\n            if (i * i * i === a) {\n                return\
    \ true;\n            }\n        }\n        return false;\n    }\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329864
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    var i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ==\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329843
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = a * -1;\n\
    \    }\n    var i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ==\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329864
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329842
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329839
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329842
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    let\
    \ i: number = 1;\n    while (i * i * i <= a) {\n        if (i * i * i == a) {\n\
    \            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\n\
    console.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpg_sz_144.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg_sz_144.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    false

    false

    true

    false

    false

    '
  timestamp: 1660329864
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    return\
    \ Math.pow(a, 1 / 3) % 1 === 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = iscube;\n\
    \  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3e24pfsx.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3e24pfsx.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329866
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    else if (a < 0) {\n        return\
    \ iscube(-a);\n    }\n    else {\n        let x = Math.round(Math.pow(a, 1 / 3));\n\
    \        return x * x * x === a;\n    }\n}\nconsole.log(iscube(180));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    '
  timestamp: 1660329866
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = a * -1;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329866
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i < a; i++) {\n        if (i * i * i === a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmps8gcqaej.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps8gcqaej.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329861
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329866
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i < a; i++) {\n        if (i * i * i === a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmps8gcqaej.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps8gcqaej.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329861
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = a *\
    \ -1;\n    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329846
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329842
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329845
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = a * -1;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329867
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    } else if (a < 0) {\n        return iscube(-a);\n\
    \    } else {\n        return Number.isInteger(Math.cbrt(a));\n    }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpe8_k85xc.ts(23,23): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    ../../../../tmp/tmpe8_k85xc.ts(23,38): error TS2339: Property ''cbrt'' does not
    exist on type ''Math''.

    '
  timestamp: 1660329867
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    } else if (a < 0) {\n        return iscube(-a);\n\
    \    } else {\n        let i = 0;\n        while (i * i * i < a) {\n         \
    \   i++;\n        }\n        return i * i * i === a;\n    }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329867
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    return\
    \ Math.cbrt(a) % 1 === 0;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpl7p_0p0w.ts(18,17): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329844
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = a * -1;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329866
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        return false;\n    }\n    if (a === 0) {\n        return\
    \ true;\n    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i === a) {\n            return true;\n        }\n        i++;\n    }\n \
    \   return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprbtcusyq.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprbtcusyq.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329868
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 0;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329839
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    else if (a < 0) {\n        return\
    \ iscube(-a);\n    }\n    else {\n        let i = 1;\n        while (i * i * i\
    \ <= a) {\n            if (i * i * i == a) {\n                return true;\n \
    \           }\n            i++;\n        }\n        return false;\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329850
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i < a; i++) {\n        if (i * i * i === a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmps8gcqaej.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmps8gcqaej.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329861
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329845
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ==\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329849
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = -a;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 0; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329869
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = a * -1;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329866
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = Math.abs(a);\n    }\n    if (a == 0) {\n        return\
    \ true;\n    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i *\
    \ i * i == a) {\n            return true;\n        }\n        i++;\n    }\n  \
    \  return false;\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\n\
    console.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329869
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    let\
    \ cube = Math.cbrt(a);\n    if (cube % 1 === 0) {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\nconsole.log(iscube(1));\nconsole.log(iscube(2));\n\
    console.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\n\
    console.log(iscube(180));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpngsc3p8u.ts(18,21): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329852
- exit_code: 2
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    return\
    \ Math.cbrt(a) % 1 === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpzjxs0w3z.ts(18,17): error TS2339: Property ''cbrt''
    does not exist on type ''Math''.

    '
  timestamp: 1660329843
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let b = Math.floor(Math.pow(a, 1 / 3));\n    return b * b * b ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6aaepu0g.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6aaepu0g.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329869
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a == 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = a * -1;\n\
    \    }\n    for (let i = 0; i < a; i++) {\n        if (i * i * i == a) {\n   \
    \         return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7b8fx3ar.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7b8fx3ar.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    false

    true

    true

    false

    '
  timestamp: 1660329869
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    var i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329855
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    var b = Math.round(Math.pow(a, 1 / 3));\n    if (b * b * b === a)\
    \ {\n        return true;\n    }\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329870
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a < 0) {\n        a = a * -1;\n    }\n    if (a == 0) {\n        return true;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i == a) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329848
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    var b = Math.floor(Math.pow(a, 1 / 3));\n    return b * b * b ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdagazhsr.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdagazhsr.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329870
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329841
- exit_code: 1
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let b = Math.floor(Math.pow(a, 1 / 3));\n    return b * b * b ===\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6aaepu0g.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6aaepu0g.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329869
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    for (let i = 1; i <= a; i++) {\n        if (i * i * i === a) {\n \
    \           return true;\n        }\n    }\n    return false;\n}\nconsole.log(iscube(1));\n\
    console.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\n\
    console.log(iscube(0));\nconsole.log(iscube(180));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = iscube;\n  assert.deepEqual(candidate(1),true);\n  assert.deepEqual(candidate(2),false);\n\
    \  assert.deepEqual(candidate(-1),true);\n  assert.deepEqual(candidate(64),true);\n\
    \  assert.deepEqual(candidate(180),false);\n  assert.deepEqual(candidate(1000),true);\n\
    \  assert.deepEqual(candidate(0),true);\n  assert.deepEqual(candidate(1729),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    true

    true

    true

    false

    '
  timestamp: 1660329845
- exit_code: 0
  program: "//Write a function that takes an integer a and returns true \n// if this\
    \ ingeger is a cube of some integer number.\n// Note: you may assume the input\
    \ is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
    // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
    // true\n// >>> iscube(180)\n// false\nfunction iscube(a: any): any {\n    if\
    \ (a === 0) {\n        return true;\n    }\n    if (a < 0) {\n        a = -a;\n\
    \    }\n    let i = 1;\n    while (i * i * i <= a) {\n        if (i * i * i ===\
    \ a) {\n            return true;\n        }\n        i++;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = iscube;\n  assert.deepEqual(candidate(1),true);\n\
    \  assert.deepEqual(candidate(2),false);\n  assert.deepEqual(candidate(-1),true);\n\
    \  assert.deepEqual(candidate(64),true);\n  assert.deepEqual(candidate(180),false);\n\
    \  assert.deepEqual(candidate(1000),true);\n  assert.deepEqual(candidate(0),true);\n\
    \  assert.deepEqual(candidate(1729),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329840
