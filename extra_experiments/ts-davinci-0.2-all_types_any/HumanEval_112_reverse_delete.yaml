name: HumanEval_112_reverse_delete
language: ts
prompt: "//Task\n// We are given two strings s and c, you have to deleted all the\
  \ characters in s that are equal to any character in c\n// then check if the result\
  \ string is palindrome.\n// A string is called palindrome if it reads the same backward\
  \ as forward.\n// You should return an array containing the result string and true/false\
  \ for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\"\
  , false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>>\
  \ reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s:\
  \ any, c: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\"\
  , \"ae\"),[\"bcd\", false]);\n  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"\
  acdef\", false]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"ab\"),[\"cdedc\"\
  , true]);\n  assert.deepEqual(candidate(\"dwik\", \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"\
  a\", \"a\"),[\"\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"\
  abcdedcba\", true]);\n  assert.deepEqual(candidate(\"abcdedcba\", \"v\"),[\"abcdedcba\"\
  , true]);\n  assert.deepEqual(candidate(\"vabba\", \"v\"),[\"abba\", true]);\n \
  \ assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\", true]);\n}\n\ntest();"
completions: ["    let result = [];\n    let str = s.split('');\n    let chars = c.split('');\n\
    \    for (let i = 0; i < str.length; i++) {\n        for (let j = 0; j < chars.length;\
    \ j++) {\n            if (str[i] === chars[j]) {\n                str.splice(i,\
    \ 1);\n                i--;\n            }\n        }\n    }\n    result.push(str.join(''));\n\
    \    result.push(str.join('') === str.reverse().join(''));\n    return result;\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let isPalindrome = result.split('').reverse().join('') === result;\n    return\
    \ [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: any = [];\n    let newString: any =\
    \ \"\";\n    for (let i: number = 0; i < s.length; i++) {\n        if (c.indexOf(s[i])\
    \ === -1) {\n            newString += s[i];\n        }\n    }\n    result.push(newString);\n\
    \    result.push(newString === newString.split(\"\").reverse().join(\"\"));\n\
    \    return result;\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result: any = [];\n    let resultString: string = '';\n    let resultBool:\
    \ boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n       \
    \ if (c.indexOf(s[i]) === -1) {\n            resultString += s[i];\n        }\n\
    \    }\n    for (let i: number = 0; i < resultString.length; i++) {\n        if\
    \ (resultString[i] === resultString[resultString.length - 1 - i]) {\n        \
    \    resultBool = true;\n        } else {\n            resultBool = false;\n \
    \           break;\n        }\n    }\n    result.push(resultString);\n    result.push(resultBool);\n\
    \    return result;\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: any = [];\n    let str: any = s.split('');\n\
    \    let str2: any = c.split('');\n    for (let i: number = 0; i < str.length;\
    \ i++) {\n        for (let j: number = 0; j < str2.length; j++) {\n          \
    \  if (str[i] === str2[j]) {\n                str.splice(i, 1);\n            \
    \    i--;\n            }\n        }\n    }\n    result.push(str.join(''));\n \
    \   let str3: any = str.join('');\n    let str4: any = str3.split('').reverse().join('');\n\
    \    if (str3 === str4) {\n        result.push(true);\n    } else {\n        result.push(false);\n\
    \    }\n    return result;\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"\
    ));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    for (let i: number\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"\
    ));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let isPalindrome = result.split('').reverse().join('') === result;\n    return\
    \ [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    let isPalindrome:\
    \ boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n       \
    \ if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n        }\n    }\n\
    \    for (let i: number = 0; i < result.length / 2; i++) {\n        if (result[i]\
    \ === result[result.length - 1 - i]) {\n            isPalindrome = true;\n   \
    \     } else {\n            isPalindrome = false;\n            break;\n      \
    \  }\n    }\n    return [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    for (let i = 0;\
    \ i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split(\"\"\
    ).reverse().join(\"\")];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let check = result.split('').reverse().join('') === result;\n    return [result,\
    \ check];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i])\
    \ === -1) {\n            result += s[i];\n        }\n    }\n    return [result,\
    \ result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let check = result.split('').reverse().join('') === result;\n    return [result,\
    \ check];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result: string = \"\";\n    let isPalindrome: boolean = false;\n    for\
    \ (let i: number = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1)\
    \ {\n            result += s[i];\n        }\n    }\n    if (result === result.split(\"\
    \").reverse().join(\"\")) {\n        isPalindrome = true;\n    }\n    return [result,\
    \ isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    let isPalindrome:\
    \ boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n       \
    \ if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n        }\n    }\n\
    \    for (let i: number = 0; i < result.length / 2; i++) {\n        if (result[i]\
    \ === result[result.length - 1 - i]) {\n            isPalindrome = true;\n   \
    \     } else {\n            isPalindrome = false;\n            break;\n      \
    \  }\n    }\n    return [result, isPalindrome];\n}\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: any = [];\n    let sArr: any = s.split('');\n\
    \    let cArr: any = c.split('');\n    for (let i = 0; i < sArr.length; i++) {\n\
    \        for (let j = 0; j < cArr.length; j++) {\n            if (sArr[i] ===\
    \ cArr[j]) {\n                sArr.splice(i, 1);\n                i--;\n     \
    \       }\n        }\n    }\n    result.push(sArr.join(''));\n    result.push(sArr.join('')\
    \ === sArr.reverse().join(''));\n    return result;\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let isPalindrome = result === result.split('').reverse().join('');\n    return\
    \ [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: any = [];\n    let str: any = \"\";\n\
    \    for (let i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1)\
    \ {\n            str += s[i];\n        }\n    }\n    result.push(str);\n    result.push(isPalindrome(str));\n\
    \    return result;\n}\n", "    let newString = s.split('').filter(e => !c.includes(e)).join('');\n\
    \    let palindrome = newString.split('').reverse().join('') === newString;\n\
    \    return [newString, palindrome];\n}\nconsole.log(reverse_delete(\"abcde\"\
    , \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));\n", "    let result: string = \"\";\n    let isPalindrome:\
    \ boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n       \
    \ if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n        }\n    }\n\
    \    for (let i: number = 0; i < result.length / 2; i++) {\n        if (result[i]\
    \ === result[result.length - 1 - i]) {\n            isPalindrome = true;\n   \
    \     } else {\n            isPalindrome = false;\n            break;\n      \
    \  }\n    }\n    return [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = \"\";\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n\
    \        }\n    }\n    return [result, result === result.split(\"\").reverse().join(\"\
    \")];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    let isPalindrome:\
    \ boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n       \
    \ if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n        }\n    }\n\
    \    for (let i: number = 0; i < result.length / 2; i++) {\n        if (result[i]\
    \ === result[result.length - 1 - i]) {\n            isPalindrome = true;\n   \
    \     } else {\n            isPalindrome = false;\n            break;\n      \
    \  }\n    }\n    return [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = [];\n    let resultString = '';\n \
    \   let resultBoolean = false;\n    let sArray = s.split('');\n    let cArray\
    \ = c.split('');\n    for (let i = 0; i < sArray.length; i++) {\n        if (cArray.indexOf(sArray[i])\
    \ === -1) {\n            resultString += sArray[i];\n        }\n    }\n    if\
    \ (resultString === resultString.split('').reverse().join('')) {\n        resultBoolean\
    \ = true;\n    }\n    result.push(resultString);\n    result.push(resultBoolean);\n\
    \    return result;\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = [];\n    let str = s.split('');\n    let char = c.split('');\n\
    \    let newStr = str.filter(function (item) {\n        return char.indexOf(item)\
    \ === -1;\n    });\n    let newStr2 = newStr.join('');\n    let newStr3 = newStr2.split('');\n\
    \    let newStr4 = newStr3.reverse();\n    let newStr5 = newStr4.join('');\n \
    \   if (newStr2 === newStr5) {\n        result.push(newStr2, true);\n    } else\
    \ {\n        result.push(newStr2, false);\n    }\n    return result;\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let isPalindrome = result === result.split('').reverse().join('');\n    return\
    \ [result, isPalindrome];\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    let isPalindrome:\
    \ boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n       \
    \ if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n        }\n    }\n\
    \    for (let i: number = 0; i < result.length / 2; i++) {\n        if (result[i]\
    \ === result[result.length - 1 - i]) {\n            isPalindrome = true;\n   \
    \     } else {\n            isPalindrome = false;\n            break;\n      \
    \  }\n    }\n    return [result, isPalindrome];\n}\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = [];\n    let arr = s.split('');\n \
    \   let arr2 = c.split('');\n    for (let i = 0; i < arr.length; i++) {\n    \
    \    for (let j = 0; j < arr2.length; j++) {\n            if (arr[i] === arr2[j])\
    \ {\n                arr.splice(i, 1);\n                i--;\n            }\n\
    \        }\n    }\n    let str = arr.join('');\n    let str2 = str.split('').reverse().join('');\n\
    \    if (str === str2) {\n        result.push(str, true);\n    } else {\n    \
    \    result.push(str, false);\n    }\n    return result;\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let isPalindrome = result === result.split('').reverse().join('');\n    return\
    \ [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"\
    ));\n", "    let result = [];\n    let sArray = s.split('');\n    let cArray =\
    \ c.split('');\n    for (let i = 0; i < sArray.length; i++) {\n        for (let\
    \ j = 0; j < cArray.length; j++) {\n            if (sArray[i] === cArray[j]) {\n\
    \                sArray.splice(i, 1);\n                i--;\n            }\n \
    \       }\n    }\n    result.push(sArray.join(''));\n    let reverse = sArray.reverse().join('');\n\
    \    if (sArray.join('') === reverse) {\n        result.push(true);\n    } else\
    \ {\n        result.push(false);\n    }\n    return result;\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    for (let i = 0;\
    \ i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split(\"\"\
    ).reverse().join(\"\")];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = \"\";\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n\
    \        }\n    }\n    return [result, result === result.split(\"\").reverse().join(\"\
    \")];\n}\n", "    let result = s.split('').filter(e => c.indexOf(e) === -1).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n", " \
    \   let result: any = [];\n    let newString: any = s.split('');\n    let newC:\
    \ any = c.split('');\n    for (let i: number = 0; i < newString.length; i++) {\n\
    \        for (let j: number = 0; j < newC.length; j++) {\n            if (newString[i]\
    \ === newC[j]) {\n                newString.splice(i, 1);\n                i--;\n\
    \            }\n        }\n    }\n    result.push(newString.join(''));\n    result.push(isPalindrome(newString.join('')));\n\
    \    return result;\n}\n", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result.split('').reverse().join('') === result];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = \"\";\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n\
    \        }\n    }\n    return [result, result === result.split(\"\").reverse().join(\"\
    \")];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    let isPalindrome:\
    \ boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n       \
    \ if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n        }\n    }\n\
    \    if (result === result.split(\"\").reverse().join(\"\")) {\n        isPalindrome\
    \ = true;\n    }\n    return [result, isPalindrome];\n}\n", "    let result =\
    \ \"\";\n    let palindrome = true;\n    for (let i = 0; i < s.length; i++) {\n\
    \        if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n        }\n\
    \    }\n    for (let i = 0; i < result.length / 2; i++) {\n        if (result[i]\
    \ !== result[result.length - 1 - i]) {\n            palindrome = false;\n    \
    \    }\n    }\n    return [result, palindrome];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = [];\n    let str = s.split('');\n \
    \   let char = c.split('');\n    for (let i = 0; i < str.length; i++) {\n    \
    \    for (let j = 0; j < char.length; j++) {\n            if (str[i] === char[j])\
    \ {\n                str.splice(i, 1);\n                i--;\n            }\n\
    \        }\n    }\n    let str1 = str.join('');\n    let str2 = str.reverse().join('');\n\
    \    if (str1 === str2) {\n        result.push(str1, true);\n    } else {\n  \
    \      result.push(str1, false);\n    }\n    return result;\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let palindrome = result === result.split('').reverse().join('');\n    return\
    \ [result, palindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let isPalindrome = result === result.split('').reverse().join('');\n    return\
    \ [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let isPalindrome = result.split('').reverse().join('') === result;\n    return\
    \ [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    let isPalindrome:\
    \ boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n       \
    \ if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n        }\n    }\n\
    \    for (let i: number = 0; i < result.length / 2; i++) {\n        if (result[i]\
    \ === result[result.length - 1 - i]) {\n            isPalindrome = true;\n   \
    \     } else {\n            isPalindrome = false;\n            break;\n      \
    \  }\n    }\n    return [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let sArr = s.split('');\n    let cArr = c.split('');\n\
    \    let result = [];\n    for (let i = 0; i < sArr.length; i++) {\n        if\
    \ (cArr.indexOf(sArr[i]) === -1) {\n            result.push(sArr[i]);\n      \
    \  }\n    }\n    return [result.join(''), result.join('') === result.reverse().join('')];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result: any = [];\n    let sArray: any = s.split('');\n    let cArray:\
    \ any = c.split('');\n    let newS: any = sArray.filter(function (item: any) {\n\
    \        return cArray.indexOf(item) === -1;\n    });\n    let newSString: any\
    \ = newS.join('');\n    let newSStringReverse: any = newSString.split('').reverse().join('');\n\
    \    if (newSString === newSStringReverse) {\n        result.push(newSString,\
    \ true);\n    } else {\n        result.push(newSString, false);\n    }\n    return\
    \ result;\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    let result2\
    \ = result.split('').reverse().join('');\n    return [result, result === result2];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    let isPalindrome:\
    \ boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n       \
    \ if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n        }\n    }\n\
    \    for (let i: number = 0; i < result.length / 2; i++) {\n        if (result[i]\
    \ === result[result.length - 1 - i]) {\n            isPalindrome = true;\n   \
    \     } else {\n            isPalindrome = false;\n            break;\n      \
    \  }\n    }\n    return [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: any = [];\n    let sArray: any = s.split('');\n\
    \    let cArray: any = c.split('');\n    for (let i = 0; i < sArray.length; i++)\
    \ {\n        for (let j = 0; j < cArray.length; j++) {\n            if (sArray[i]\
    \ === cArray[j]) {\n                sArray.splice(i, 1);\n                i--;\n\
    \            }\n        }\n    }\n    result.push(sArray.join(''));\n    result.push(sArray.join('')\
    \ === sArray.reverse().join(''));\n    return result;\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = [];\n    let str = s.split('');\n \
    \   let str2 = c.split('');\n    let arr = [];\n    for (let i = 0; i < str.length;\
    \ i++) {\n        for (let j = 0; j < str2.length; j++) {\n            if (str[i]\
    \ === str2[j]) {\n                arr.push(str[i]);\n            }\n        }\n\
    \    }\n    for (let i = 0; i < str.length; i++) {\n        for (let j = 0; j\
    \ < arr.length; j++) {\n            if (str[i] === arr[j]) {\n               \
    \ str.splice(i, 1);\n            }\n        }\n    }\n    result.push(str.join(''));\n\
    \    let palindrome = true;\n    for (let i = 0; i < str.length; i++) {\n    \
    \    if (str[i] !== str[str.length - 1 - i]) {\n            palindrome = false;\n\
    \        }\n    }\n    result.push(palindrome);\n    return result;\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = [];\n    let resultString = \"\";\n\
    \    let resultBoolean = false;\n    for (let i = 0; i < s.length; i++) {\n  \
    \      if (c.indexOf(s[i]) === -1) {\n            resultString += s[i];\n    \
    \    }\n    }\n    if (resultString === resultString.split(\"\").reverse().join(\"\
    \")) {\n        resultBoolean = true;\n    }\n    result.push(resultString);\n\
    \    result.push(resultBoolean);\n    return result;\n}\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = \"\";\n    let isPalindrome = false;\n\
    \    for (let i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1)\
    \ {\n            result += s[i];\n        }\n    }\n    let reverse = result.split(\"\
    \").reverse().join(\"\");\n    if (result === reverse) {\n        isPalindrome\
    \ = true;\n    }\n    return [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    for (let i = 0;\
    \ i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split(\"\"\
    ).reverse().join(\"\")];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let isPalindrome = result.split('').reverse().join('') === result;\n    return\
    \ [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: any = [];\n    let str: any = s.split('');\n\
    \    let char: any = c.split('');\n    for (let i = 0; i < str.length; i++) {\n\
    \        for (let j = 0; j < char.length; j++) {\n            if (str[i] === char[j])\
    \ {\n                str.splice(i, 1);\n                i--;\n            }\n\
    \        }\n    }\n    let str1: any = str.join('');\n    let str2: any = str.reverse().join('');\n\
    \    if (str1 === str2) {\n        result.push(str1, true);\n    } else {\n  \
    \      result.push(str1, false);\n    }\n    return result;\n}\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = [];\n    let str = s.split('');\n \
    \   let str2 = c.split('');\n    let str3 = str.filter(function (el) {\n     \
    \   return str2.indexOf(el) < 0;\n    });\n    let str4 = str3.join('');\n   \
    \ let str5 = str4.split('').reverse().join('');\n    if (str4 === str5) {\n  \
    \      result.push(str4, true);\n    } else {\n        result.push(str4, false);\n\
    \    }\n    return result;\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let isPalindrome = result === result.split('').reverse().join('');\n    return\
    \ [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = \"\";\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n\
    \        }\n    }\n    return [result, result === result.split(\"\").reverse().join(\"\
    \")];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result: any = [];\n    let resultString: string = \"\";\n    let resultBoolean:\
    \ boolean = false;\n    let sArray: string[] = s.split(\"\");\n    let cArray:\
    \ string[] = c.split(\"\");\n    for (let i: number = 0; i < sArray.length; i++)\
    \ {\n        for (let j: number = 0; j < cArray.length; j++) {\n            if\
    \ (sArray[i] === cArray[j]) {\n                sArray.splice(i, 1);\n        \
    \        i--;\n            }\n        }\n    }\n    for (let i: number = 0; i\
    \ < sArray.length; i++) {\n        resultString += sArray[i];\n    }\n    for\
    \ (let i: number = 0; i < sArray.length; i++) {\n        if (sArray[i] === sArray[sArray.length\
    \ - 1 - i]) {\n            resultBoolean = true;\n        } else {\n         \
    \   resultBoolean = false;\n            break;\n        }\n    }\n    result.push(resultString);\n\
    \    result.push(resultBoolean);\n    return result;\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = \"\";\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n\
    \        }\n    }\n    return [result, result === result.split(\"\").reverse().join(\"\
    \")];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));\n", " \
    \   let result = \"\";\n    let check = true;\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n\
    \        }\n    }\n    for (let i = 0; i < result.length / 2; i++) {\n       \
    \ if (result[i] !== result[result.length - 1 - i]) {\n            check = false;\n\
    \        }\n    }\n    return [result, check];\n}\n", "    let result = s.split('');\n\
    \    for (let i = 0; i < c.length; i++) {\n        for (let j = 0; j < result.length;\
    \ j++) {\n            if (c[i] === result[j]) {\n                result.splice(j,\
    \ 1);\n                j--;\n            }\n        }\n    }\n    let resultString\
    \ = result.join('');\n    let resultPalindrome = resultString.split('').reverse().join('');\n\
    \    return [resultString, resultString === resultPalindrome];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let check = result === result.split('').reverse().join('');\n    return [result,\
    \ check];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let palindrome = result.split('').reverse().join('') === result;\n    return\
    \ [result, palindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let isPalindrome = result.split('').reverse().join('') === result;\n    return\
    \ [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let sArr = s.split('');\n    let cArr = c.split('');\n\
    \    let result = [];\n    for (let i = 0; i < sArr.length; i++) {\n        if\
    \ (cArr.indexOf(sArr[i]) === -1) {\n            result.push(sArr[i]);\n      \
    \  }\n    }\n    let resultStr = result.join('');\n    let resultArr = [];\n \
    \   resultArr.push(resultStr);\n    resultArr.push(resultStr === resultStr.split('').reverse().join(''));\n\
    \    return resultArr;\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    for (let i: number\
    \ = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n         \
    \   result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"\
    ));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = \"\";\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n\
    \        }\n    }\n    return [result, result === result.split(\"\").reverse().join(\"\
    \")];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let isPalindrome = result.split('').reverse().join('') === result;\n    return\
    \ [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: any = [];\n    let resultStr: string\
    \ = '';\n    let resultBool: boolean = false;\n    let sArr: any = s.split('');\n\
    \    let cArr: any = c.split('');\n    for (let i: number = 0; i < sArr.length;\
    \ i++) {\n        for (let j: number = 0; j < cArr.length; j++) {\n          \
    \  if (sArr[i] === cArr[j]) {\n                sArr.splice(i, 1);\n          \
    \      i--;\n            }\n        }\n    }\n    for (let i: number = 0; i <\
    \ sArr.length; i++) {\n        resultStr += sArr[i];\n    }\n    for (let i: number\
    \ = 0; i < sArr.length; i++) {\n        if (sArr[i] === sArr[sArr.length - 1 -\
    \ i]) {\n            resultBool = true;\n        } else {\n            resultBool\
    \ = false;\n            break;\n        }\n    }\n    result.push(resultStr);\n\
    \    result.push(resultBool);\n    return result;\n}\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = '';\n    let check = false;\n    for\
    \ (let i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n  \
    \          result += s[i];\n        }\n    }\n    if (result === result.split('').reverse().join(''))\
    \ {\n        check = true;\n    }\n    return [result, check];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    let isPalindrome:\
    \ boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n       \
    \ if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n        }\n    }\n\
    \    if (result === result.split(\"\").reverse().join(\"\")) {\n        isPalindrome\
    \ = true;\n    }\n    return [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = '';\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n\
    \        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result: any = [];\n    let resultString: string = \"\";\n    let resultBoolean:\
    \ boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n       \
    \ if (c.indexOf(s[i]) === -1) {\n            resultString += s[i];\n        }\n\
    \    }\n    for (let i: number = 0; i < resultString.length; i++) {\n        if\
    \ (resultString[i] === resultString[resultString.length - 1 - i]) {\n        \
    \    resultBoolean = true;\n        } else {\n            resultBoolean = false;\n\
    \            break;\n        }\n    }\n    result.push(resultString);\n    result.push(resultBoolean);\n\
    \    return result;\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: any = [];\n    let s_arr: any = s.split('');\n\
    \    let c_arr: any = c.split('');\n    let new_arr: any = [];\n    for (let i:\
    \ number = 0; i < s_arr.length; i++) {\n        for (let j: number = 0; j < c_arr.length;\
    \ j++) {\n            if (s_arr[i] === c_arr[j]) {\n                s_arr.splice(i,\
    \ 1);\n                i--;\n            }\n        }\n    }\n    result.push(s_arr.join(''));\n\
    \    for (let i: number = 0; i < s_arr.length; i++) {\n        new_arr.push(s_arr[i]);\n\
    \    }\n    new_arr.reverse();\n    if (s_arr.join('') === new_arr.join('')) {\n\
    \        result.push(true);\n    } else {\n        result.push(false);\n    }\n\
    \    return result;\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: any = [];\n    let resultString: string\
    \ = \"\";\n    let resultBoolean: boolean = false;\n    let cArray: string[] =\
    \ c.split(\"\");\n    let sArray: string[] = s.split(\"\");\n    for (let i: number\
    \ = 0; i < sArray.length; i++) {\n        for (let j: number = 0; j < cArray.length;\
    \ j++) {\n            if (sArray[i] === cArray[j]) {\n                sArray.splice(i,\
    \ 1);\n                i--;\n            }\n        }\n    }\n    for (let i:\
    \ number = 0; i < sArray.length; i++) {\n        resultString += sArray[i];\n\
    \    }\n    for (let i: number = 0; i < sArray.length; i++) {\n        if (sArray[i]\
    \ === sArray[sArray.length - i - 1]) {\n            resultBoolean = true;\n  \
    \      } else {\n            resultBoolean = false;\n            break;\n    \
    \    }\n    }\n    result.push(resultString);\n    result.push(resultBoolean);\n\
    \    return result;\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    let isPalindrome\
    \ = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result: any = [];\n    let resultString: string = \"\";\n    let resultBoolean:\
    \ boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n       \
    \ if (c.indexOf(s[i]) === -1) {\n            resultString += s[i];\n        }\n\
    \    }\n    for (let i: number = 0; i < resultString.length; i++) {\n        if\
    \ (resultString[i] === resultString[resultString.length - 1 - i]) {\n        \
    \    resultBoolean = true;\n        } else {\n            resultBoolean = false;\n\
    \            break;\n        }\n    }\n    result.push(resultString);\n    result.push(resultBoolean);\n\
    \    return result;\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = [];\n    let s_arr = s.split('');\n    let c_arr = c.split('');\n\
    \    for (let i = 0; i < s_arr.length; i++) {\n        for (let j = 0; j < c_arr.length;\
    \ j++) {\n            if (s_arr[i] === c_arr[j]) {\n                s_arr.splice(i,\
    \ 1);\n                i--;\n            }\n        }\n    }\n    result.push(s_arr.join(''));\n\
    \    result.push(s_arr.join('') === s_arr.reverse().join(''));\n    return result;\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let arr = s.split('');\n    let arr2 = c.split('');\n\
    \    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        for\
    \ (let j = 0; j < arr2.length; j++) {\n            if (arr[i] === arr2[j]) {\n\
    \                arr.splice(i, 1);\n                i--;\n            }\n    \
    \    }\n    }\n    result.push(arr.join(''));\n    let palindrome = true;\n  \
    \  for (let i = 0; i < arr.length; i++) {\n        if (arr[i] !== arr[arr.length\
    \ - 1 - i]) {\n            palindrome = false;\n        }\n    }\n    result.push(palindrome);\n\
    \    return result;\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n", "    let result:\
    \ string = \"\";\n    for (let i: number = 0; i < s.length; i++) {\n        if\
    \ (c.indexOf(s[i]) === -1) {\n            result += s[i];\n        }\n    }\n\
    \    return [result, result === result.split(\"\").reverse().join(\"\")];\n}\n\
    \nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n      \
    \  if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n        }\n   \
    \ }\n    return [result, result === result.split('').reverse().join('')];\n}\n\
    \nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let palindrome = result.split('').reverse().join('') === result;\n    return\
    \ [result, palindrome];\n}\n", "    let result = s.split('').filter(el => c.indexOf(el)\
    \ === -1).join('');\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    let palindrome:\
    \ boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n       \
    \ if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n        }\n    }\n\
    \    for (let i: number = 0; i < result.length / 2; i++) {\n        if (result[i]\
    \ === result[result.length - 1 - i]) {\n            palindrome = true;\n     \
    \   } else {\n            palindrome = false;\n            break;\n        }\n\
    \    }\n    return [result, palindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\"\
    , \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    for (let i = 0;\
    \ i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split(\"\"\
    ).reverse().join(\"\")];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: any = [];\n    let resultString: string\
    \ = '';\n    for (let i: number = 0; i < s.length; i++) {\n        if (c.indexOf(s[i])\
    \ === -1) {\n            resultString += s[i];\n        }\n    }\n    result.push(resultString);\n\
    \    result.push(resultString === resultString.split('').reverse().join(''));\n\
    \    return result;\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i])\
    \ === -1) {\n            result += s[i];\n        }\n    }\n    return [result,\
    \ result === result.split(\"\").reverse().join(\"\")];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: any = [];\n    let str: any = \"\";\n\
    \    for (let i: number = 0; i < s.length; i++) {\n        if (c.indexOf(s[i])\
    \ === -1) {\n            str += s[i];\n        }\n    }\n    result.push(str);\n\
    \    let palindrome: boolean = true;\n    for (let i: number = 0; i < str.length;\
    \ i++) {\n        if (str[i] !== str[str.length - 1 - i]) {\n            palindrome\
    \ = false;\n        }\n    }\n    result.push(palindrome);\n    return result;\n\
    }\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let isPalindrome = result === result.split('').reverse().join('');\n    return\
    \ [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "  let result = \"\";\n  let isPalindrome = false;\n\
    \  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n \
    \     result += s[i];\n    }\n  }\n  if (result === result.split(\"\").reverse().join(\"\
    \")) {\n    isPalindrome = true;\n  }\n  return [result, isPalindrome];\n}\n\n\
    console.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => c.indexOf(x) === -1).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n", "    let result\
    \ = s.split('').filter(x => !c.includes(x)).join('');\n    return [result, result\
    \ === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: any = [];\n    let s_arr: any = s.split('');\n\
    \    let c_arr: any = c.split('');\n    let s_arr_length: number = s_arr.length;\n\
    \    let c_arr_length: number = c_arr.length;\n    let new_s_arr: any = [];\n\
    \    let new_s_arr_length: number = 0;\n    let is_palindrome: boolean = false;\n\
    \    for (let i: number = 0; i < s_arr_length; i++) {\n        for (let j: number\
    \ = 0; j < c_arr_length; j++) {\n            if (s_arr[i] !== c_arr[j]) {\n  \
    \              new_s_arr.push(s_arr[i]);\n            }\n        }\n    }\n  \
    \  new_s_arr_length = new_s_arr.length;\n    for (let i: number = 0; i < new_s_arr_length;\
    \ i++) {\n        if (new_s_arr[i] === new_s_arr[new_s_arr_length - 1 - i]) {\n\
    \            is_palindrome = true;\n        } else {\n            is_palindrome\
    \ = false;\n            break;\n        }\n    }\n    result.push(new_s_arr.join(''));\n\
    \    result.push(is_palindrome);\n    return result;\n}\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(letter => !c.includes(letter)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = '';\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n\
    \        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result: string = \"\";\n    let isPalindrome: boolean = false;\n    for\
    \ (let i: number = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1)\
    \ {\n            result += s[i];\n        }\n    }\n    for (let i: number = 0;\
    \ i < result.length / 2; i++) {\n        if (result[i] === result[result.length\
    \ - 1 - i]) {\n            isPalindrome = true;\n        } else {\n          \
    \  isPalindrome = false;\n            break;\n        }\n    }\n    return [result,\
    \ isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let sArr = s.split('');\n    let cArr = c.split('');\n\
    \    let result = sArr.filter(function (item) {\n        return cArr.indexOf(item)\
    \ === -1;\n    });\n    let resultStr = result.join('');\n    let resultArr =\
    \ [];\n    resultArr.push(resultStr);\n    resultArr.push(resultStr === resultStr.split('').reverse().join(''));\n\
    \    return resultArr;\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = \"\";\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n\
    \        }\n    }\n    return [result, result === result.split(\"\").reverse().join(\"\
    \")];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    let reverse\
    \ = result.split('').reverse().join('');\n    return [result, result === reverse];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let res = s.split('').filter(x => !c.includes(x)).join('');\n    return [res,\
    \ res === res.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: any = [];\n    let resultString: string\
    \ = \"\";\n    let resultBoolean: boolean = false;\n    let cArray: string[] =\
    \ c.split(\"\");\n    let sArray: string[] = s.split(\"\");\n    for (let i: number\
    \ = 0; i < sArray.length; i++) {\n        for (let j: number = 0; j < cArray.length;\
    \ j++) {\n            if (sArray[i] === cArray[j]) {\n                sArray.splice(i,\
    \ 1);\n                i--;\n            }\n        }\n    }\n    for (let i:\
    \ number = 0; i < sArray.length; i++) {\n        resultString += sArray[i];\n\
    \    }\n    if (resultString === resultString.split(\"\").reverse().join(\"\"\
    )) {\n        resultBoolean = true;\n    }\n    result.push(resultString);\n \
    \   result.push(resultBoolean);\n    return result;\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let isPalindrome = result.split('').reverse().join('') === result;\n    return\
    \ [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(e => !c.includes(e)).join('');\n\
    \    let palindrome = result.split('').reverse().join('') === result;\n    return\
    \ [result, palindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = \"\";\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n\
    \        }\n    }\n    return [result, result === result.split(\"\").reverse().join(\"\
    \")];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n    \
    \    if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n        }\n \
    \   }\n    return [result, result === result.split(\"\").reverse().join(\"\")];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result: any = [];\n    let resultString: string = \"\";\n    let resultBoolean:\
    \ boolean = false;\n    let cArray: any = c.split(\"\");\n    let sArray: any\
    \ = s.split(\"\");\n    for (let i: number = 0; i < sArray.length; i++) {\n  \
    \      if (cArray.indexOf(sArray[i]) === -1) {\n            resultString += sArray[i];\n\
    \        }\n    }\n    if (resultString === resultString.split(\"\").reverse().join(\"\
    \")) {\n        resultBoolean = true;\n    }\n    result.push(resultString);\n\
    \    result.push(resultBoolean);\n    return result;\n}\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let isPalindrome = result.split('').reverse().join('') === result;\n    return\
    \ [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    for (let i = 0;\
    \ i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split(\"\"\
    ).reverse().join(\"\")];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: any = [];\n    let str: any = s.split('');\n\
    \    let char: any = c.split('');\n    let check: boolean = false;\n    for (let\
    \ i: number = 0; i < str.length; i++) {\n        for (let j: number = 0; j < char.length;\
    \ j++) {\n            if (str[i] === char[j]) {\n                str.splice(i,\
    \ 1);\n                i--;\n            }\n        }\n    }\n    for (let i:\
    \ number = 0; i < str.length; i++) {\n        if (str[i] === str[str.length -\
    \ i - 1]) {\n            check = true;\n        } else {\n            check =\
    \ false;\n        }\n    }\n    result.push(str.join(''), check);\n    return\
    \ result;\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = \"\";\n    let isPalindrome = false;\n    for (let i = 0; i <\
    \ s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result\
    \ += s[i];\n        }\n    }\n    if (result === result.split(\"\").reverse().join(\"\
    \")) {\n        isPalindrome = true;\n    }\n    return [result, isPalindrome];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    for (let i = 0;\
    \ i < s.length; i++) {\n        if (c.indexOf(s[i]) == -1) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result == result.split(\"\"\
    ).reverse().join(\"\")];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let palindrome = result.split('').reverse().join('') === result;\n    return\
    \ [result, palindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    let isPalindrome:\
    \ boolean = false;\n    for (let i: number = 0; i < s.length; i++) {\n       \
    \ if (c.indexOf(s[i]) === -1) {\n            result += s[i];\n        }\n    }\n\
    \    for (let i: number = 0; i < result.length / 2; i++) {\n        if (result[i]\
    \ === result[result.length - 1 - i]) {\n            isPalindrome = true;\n   \
    \     } else {\n            isPalindrome = false;\n            break;\n      \
    \  }\n    }\n    return [result, isPalindrome];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = [];\n    let resultString = \"\";\n\
    \    let resultBoolean = false;\n    for (let i = 0; i < s.length; i++) {\n  \
    \      if (c.indexOf(s[i]) === -1) {\n            resultString += s[i];\n    \
    \    }\n    }\n    for (let i = 0; i < resultString.length; i++) {\n        if\
    \ (resultString[i] === resultString[resultString.length - 1 - i]) {\n        \
    \    resultBoolean = true;\n        } else {\n            resultBoolean = false;\n\
    \            break;\n        }\n    }\n    result.push(resultString);\n    result.push(resultBoolean);\n\
    \    return result;\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = \"\";\n    let isPalindrome = false;\n    for (let i = 0; i <\
    \ s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result\
    \ += s[i];\n        }\n    }\n    if (result === result.split(\"\").reverse().join(\"\
    \")) {\n        isPalindrome = true;\n    }\n    return [result, isPalindrome];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n", " \
    \   let result = \"\";\n    let isPalindrome = false;\n    for (let i = 0; i <\
    \ s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result\
    \ += s[i];\n        }\n    }\n    if (result === result.split(\"\").reverse().join(\"\
    \")) {\n        isPalindrome = true;\n    }\n    return [result, isPalindrome];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    return [s.split('').filter(x => !c.includes(x)).join(''),\
    \ s.split('').filter(x => !c.includes(x)).join('') === s.split('').filter(x =>\
    \ !c.includes(x)).reverse().join('')];\n}\n", "    let result = \"\";\n    for\
    \ (let i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n  \
    \          result += s[i];\n        }\n    }\n    return [result, result === result.split(\"\
    \").reverse().join(\"\")];\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = \"\";\n    for (let i = 0;\
    \ i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split(\"\"\
    ).reverse().join(\"\")];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result: string = '';\n    let palindrome: boolean\
    \ = false;\n    for (let i: number = 0; i < s.length; i++) {\n        if (c.indexOf(s[i])\
    \ === -1) {\n            result += s[i];\n        }\n    }\n    for (let i: number\
    \ = 0; i < result.length / 2; i++) {\n        if (result[i] === result[result.length\
    \ - 1 - i]) {\n            palindrome = true;\n        } else {\n            palindrome\
    \ = false;\n            break;\n        }\n    }\n    return [result, palindrome];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result: string = \"\";\n    let isPalindrome: boolean = false;\n    for\
    \ (let i: number = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1)\
    \ {\n            result += s[i];\n        }\n    }\n    for (let i: number = 0;\
    \ i < result.length / 2; i++) {\n        if (result[i] === result[result.length\
    \ - 1 - i]) {\n            isPalindrome = true;\n        } else {\n          \
    \  isPalindrome = false;\n            break;\n        }\n    }\n    return [result,\
    \ isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = \"\";\n    let isPalindrome = false;\n\
    \    for (let i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1)\
    \ {\n            result += s[i];\n        }\n    }\n    if (result === result.split(\"\
    \").reverse().join(\"\")) {\n        isPalindrome = true;\n    }\n    return [result,\
    \ isPalindrome];\n}\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = s.split('').filter(x => !c.includes(x)).join('');\n    let palindrome\
    \ = result.split('').reverse().join('') === result;\n    return [result, palindrome];\n\
    }\n\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let s_arr = s.split('');\n    let c_arr = c.split('');\n    for (let i = 0;\
    \ i < s_arr.length; i++) {\n        for (let j = 0; j < c_arr.length; j++) {\n\
    \            if (s_arr[i] === c_arr[j]) {\n                s_arr.splice(i, 1);\n\
    \                i--;\n            }\n        }\n    }\n    let s_str = s_arr.join('');\n\
    \    let s_rev = s_arr.reverse().join('');\n    return [s_str, s_str === s_rev];\n\
    }\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result: string = \"\";\n    let isPalindrome: boolean = false;\n    for\
    \ (let i: number = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1)\
    \ {\n            result += s[i];\n        }\n    }\n    for (let i: number = 0;\
    \ i < result.length / 2; i++) {\n        if (result[i] === result[result.length\
    \ - 1 - i]) {\n            isPalindrome = true;\n        } else {\n          \
    \  isPalindrome = false;\n            break;\n        }\n    }\n    return [result,\
    \ isPalindrome];\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\nconsole.log(reverse_delete(\"\
    abcdef\", \"b\"));\nconsole.log(reverse_delete(\"abcdedcba\", \"ab\"));", "  \
    \  let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i])\
    \ === -1) {\n            result += s[i];\n        }\n    }\n    return [result,\
    \ result === result.split(\"\").reverse().join(\"\")];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    return [result, result === result.split('').reverse().join('')];\n}\n\nconsole.log(reverse_delete(\"\
    abcde\", \"ae\"));\nconsole.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let result = s.split('').filter(x => !c.includes(x)).join('');\n\
    \    let isPalindrome = result === result.split('').reverse().join('');\n    return\
    \ [result, isPalindrome];\n}\nconsole.log(reverse_delete(\"abcde\", \"ae\"));\n\
    console.log(reverse_delete(\"abcdef\", \"b\"));\nconsole.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
