language: ts
name: HumanEval_35_max_element
results:
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length === 0) {\n        return null;\n\
    \    }\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    var max = l[0];\n    for (var i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    var max = l[0];\n    for (var i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return l.reduce((a, b) => Math.max(a, b));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length == 0) {\n        return null;\n\
    \    }\n    var max = l[0];\n    for (var i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length == 0) {\n        return null;\n\
    \    }\n    var max = l[0];\n    for (var i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return l.reduce((a, b) => Math.max(a, b));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length === 0) {\n        return null;\n\
    \    }\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    var max = l[0];\n    for (var i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length == 0) {\n        return null;\n\
    \    }\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length == 0) {\n        return null;\n\
    \    }\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return l.reduce((a, b) => Math.max(a, b));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length == 0) {\n        return null;\n\
    \    }\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return l.reduce((a, b) => Math.max(a, b));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length == 0) {\n        return null;\n\
    \    }\n    var max = l[0];\n    for (var i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length == 0) {\n        return null;\n\
    \    }\n    var max = l[0];\n    for (var i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length == 0) {\n        return null;\n\
    \    }\n    var max = l[0];\n    for (var i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length == 0) {\n        return null;\n\
    \    }\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length === 0) {\n        return null;\n\
    \    }\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length == 0) {\n        return null;\n\
    \    }\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length == 0) {\n        return null;\n\
    \    }\n    var max = l[0];\n    for (var i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length == 0) {\n        return null;\n\
    \    }\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    var max = l[0];\n    for (var i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    var max = l[0];\n    for (var i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length == 0) {\n        return null;\n\
    \    }\n    var max = l[0];\n    for (var i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length == 0) {\n        return null;\n\
    \    }\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    // YOUR CODE HERE\n    if (l.length == 0) {\n\
    \        return null;\n    }\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length == 0) {\n        return null;\n\
    \    }\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length == 0) {\n        return null;\n\
    \    }\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    return Math.max.apply(null, l);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2, 3]),3);\n\
    \  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    if (l.length == 0) {\n        return null;\n\
    \    }\n    let max = l[0];\n    for (let i = 1; i < l.length; i++) {\n      \
    \  if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
    \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326289
- exit_code: 0
  program: "//Return maximum element in the array.\n// >>> max_element([1, 2, 3])\n\
    // 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
    \ max_element(l: any): any {\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10]),124);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660326288
