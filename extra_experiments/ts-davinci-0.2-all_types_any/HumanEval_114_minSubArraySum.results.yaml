language: ts
name: HumanEval_114_minSubArraySum
results:
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = nums[0];\n    let currentSum = nums[0];\n    for\
    \ (let i = 1; i < nums.length; i++) {\n        currentSum = Math.min(currentSum\
    \ + nums[i], nums[i]);\n        minSum = Math.min(minSum, currentSum);\n    }\n\
    \    return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = nums[0];\n    let currentSum = nums[0];\n    for\
    \ (let i = 1; i < nums.length; i++) {\n        currentSum = Math.min(currentSum\
    \ + nums[i], nums[i]);\n        minSum = Math.min(minSum, currentSum);\n    }\n\
    \    return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (start < nums.length) {\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum < 0) {\n      sum = 0;\n      start = end;\n    }\n\
    \    sum += nums[end];\n    end++;\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660323290
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (start < nums.length) {\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum < 0) {\n      sum = 0;\n      start = end;\n    }\n\
    \    sum += nums[end];\n    end++;\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660323290
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let currentSum = 0;\n    for (let\
    \ i = 0; i < nums.length; i++) {\n        currentSum += nums[i];\n        if (currentSum\
    \ < minSum) {\n            minSum = currentSum;\n        }\n        if (currentSum\
    \ > 0) {\n            currentSum = 0;\n        }\n    }\n    return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        sum += nums[end];\n\
    \        while (sum >= 0) {\n            minSum = Math.min(minSum, sum);\n   \
    \         sum -= nums[start];\n            start++;\n        }\n        end++;\n\
    \    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\n\
    console.log(minSubArraySum([-1, -2, -3]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: '0

    '
  timestamp: 1660323290
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323276
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let currSum = 0;\n    for (let\
    \ i = 0; i < nums.length; i++) {\n        currSum += nums[i];\n        if (currSum\
    \ < minSum) {\n            minSum = currSum;\n        }\n        if (currSum >\
    \ 0) {\n            currSum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323276
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i =\
    \ 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    if (currentSum <\
    \ minSum) {\n      minSum = currentSum;\n    }\n    if (currentSum > 0) {\n  \
    \    currentSum = 0;\n    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323278
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        while (end < nums.length)\
    \ {\n            sum += nums[end];\n            if (sum < minSum) {\n        \
    \        minSum = sum;\n            }\n            end++;\n        }\n       \
    \ start++;\n        end = start;\n        sum = 0;\n    }\n    return minSum;\n\
    }\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323278
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = nums[0];\n    let currentSum = nums[0];\n    for\
    \ (let i = 1; i < nums.length; i++) {\n        currentSum = Math.min(currentSum\
    \ + nums[i], nums[i]);\n        minSum = Math.min(minSum, currentSum);\n    }\n\
    \    return minSum;\n}\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323279
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = nums[0];\n    let currentSum = nums[0];\n    for\
    \ (let i = 1; i < nums.length; i++) {\n        currentSum = Math.min(currentSum\
    \ + nums[i], nums[i]);\n        minSum = Math.min(minSum, currentSum);\n    }\n\
    \    return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = nums[0];\n    let currSum = nums[0];\n    for\
    \ (let i = 1; i < nums.length; i++) {\n        currSum = Math.min(currSum + nums[i],\
    \ nums[i]);\n        minSum = Math.min(minSum, currSum);\n    }\n    return minSum;\n\
    }\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323279
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = 0;\n  let tempSum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    tempSum += nums[i];\n    if (tempSum < minSum) {\n      minSum =\
    \ tempSum;\n    }\n    if (tempSum > 0) {\n      tempSum = 0;\n    }\n  }\n  return\
    \ minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp3rr3ptm9.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3rr3ptm9.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    -6

    '
  timestamp: 1660323281
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1,\
    \ 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323280
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = nums[0];\n    let currentSum = nums[0];\n    for\
    \ (let i = 1; i < nums.length; i++) {\n        currentSum = Math.min(currentSum\
    \ + nums[i], nums[i]);\n        minSum = Math.min(minSum, currentSum);\n    }\n\
    \    return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (start < nums.length) {\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum < 0) {\n      sum = 0;\n      start++;\n      end\
    \ = start;\n    } else {\n      if (end === nums.length) {\n        start++;\n\
    \        end = start;\n      } else {\n        sum += nums[end];\n        end++;\n\
    \      }\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp5qv9_z6c.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5qv9_z6c.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660323282
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = 0;\n  let currSum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    currSum += nums[i];\n    if (currSum < minSum) {\n      minSum =\
    \ currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n    }\n  }\n  return\
    \ minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpj01vv8yf.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj01vv8yf.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    -6

    '
  timestamp: 1660323282
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (start < nums.length) {\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum < 0) {\n      sum = 0;\n      start = end;\n    }\n\
    \    sum += nums[end];\n    end++;\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660323290
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        while (end < nums.length)\
    \ {\n            sum += nums[end];\n            if (sum < minSum) {\n        \
    \        minSum = sum;\n            }\n            end++;\n        }\n       \
    \ sum = 0;\n        start++;\n        end = start;\n    }\n    return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323283
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  let left = 0;\n  let\
    \ right = 0;\n  while (right < nums.length) {\n    sum += nums[right];\n    while\
    \ (sum >= 0) {\n      minSum = Math.min(minSum, sum);\n      sum -= nums[left];\n\
    \      left++;\n    }\n    right++;\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpd6w7pxxs.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpd6w7pxxs.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660323283
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum < 0) {\n          \
    \  sum = 0;\n            start = end;\n        }\n        sum += nums[end];\n\
    \        end++;\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660323299
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1,\
    \ 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323280
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (start < nums.length) {\n    while (end < nums.length && sum\
    \ < 0) {\n      sum += nums[end];\n      end++;\n    }\n    minSum = Math.min(minSum,\
    \ sum);\n    sum -= nums[start];\n    start++;\n  }\n  return minSum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4,\
    \ 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpn18pr4hk.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn18pr4hk.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660323285
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1,\
    \ 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323280
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let currSum = 0;\n    for (let\
    \ i = 0; i < nums.length; i++) {\n        currSum += nums[i];\n        if (currSum\
    \ < minSum) {\n            minSum = currSum;\n        }\n        if (currSum >\
    \ 0) {\n            currSum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323276
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum < 0) {\n          \
    \  sum = 0;\n            start = end;\n        }\n        sum += nums[end];\n\
    \        end++;\n    }\n    return minSum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660323301
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        sum += nums[end];\n\
    \        if (sum < minSum) {\n            minSum = sum;\n        }\n        if\
    \ (end === nums.length - 1) {\n            sum = 0;\n            start++;\n  \
    \          end = start;\n        } else {\n            end++;\n        }\n   \
    \ }\n    return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323291
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let currSum = 0;\n    for (let\
    \ i = 0; i < nums.length; i++) {\n        currSum += nums[i];\n        if (currSum\
    \ < minSum) {\n            minSum = currSum;\n        }\n        if (currSum >\
    \ 0) {\n            currSum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323276
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = nums[0];\n    let currentSum = nums[0];\n    for\
    \ (let i = 1; i < nums.length; i++) {\n        currentSum = Math.min(currentSum\
    \ + nums[i], nums[i]);\n        minSum = Math.min(minSum, currentSum);\n    }\n\
    \    return minSum;\n}\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323291
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = nums[0];\n    let currSum = nums[0];\n    for\
    \ (let i = 1; i < nums.length; i++) {\n        currSum = Math.min(currSum + nums[i],\
    \ nums[i]);\n        minSum = Math.min(minSum, currSum);\n    }\n    return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323293
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum < 0) {\n          \
    \  sum = 0;\n            start = end;\n        }\n        sum += nums[end];\n\
    \        end++;\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660323299
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = 0;\n    let sum = 0;\n    for (let i = 0; i <\
    \ nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n\
    \            minSum = sum;\n        }\n    }\n    return minSum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4,\
    \ 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp45vzliwj.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp45vzliwj.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660323293
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let currentSum = 0;\n    for (let\
    \ i = 0; i < nums.length; i++) {\n        currentSum += nums[i];\n        if (currentSum\
    \ < minSum) {\n            minSum = currentSum;\n        }\n        if (currentSum\
    \ > 0) {\n            currentSum = 0;\n        }\n    }\n    return minSum;\n\
    }\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323294
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = nums[0];\n    let sum = 0;\n    for (let i = 0;\
    \ i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323294
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum < 0) {\n          \
    \  sum = 0;\n            start = end;\n        }\n        sum += nums[end];\n\
    \        end++;\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660323299
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let currSum = 0;\n    for (let\
    \ i = 0; i < nums.length; i++) {\n        currSum += nums[i];\n        if (currSum\
    \ < minSum) {\n            minSum = currSum;\n        }\n        if (currSum >\
    \ 0) {\n            currSum = 0;\n        }\n    }\n    return minSum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323296
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = nums[0];\n    let currSum = nums[0];\n    for\
    \ (let i = 1; i < nums.length; i++) {\n        currSum = Math.min(currSum + nums[i],\
    \ nums[i]);\n        minSum = Math.min(minSum, currSum);\n    }\n    return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323293
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1,\
    \ 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323280
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currSum += nums[i];\n    if (currSum < minSum)\
    \ {\n      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2,\
    \ 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323296
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (start < nums.length) {\n    while (end < nums.length && sum\
    \ < minSum) {\n      sum += nums[end];\n      end++;\n    }\n    if (sum < minSum)\
    \ {\n      minSum = sum;\n    }\n    sum -= nums[start];\n    start++;\n  }\n\
    \  return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n4\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp37xi8f4g.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp37xi8f4g.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660323297
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323297
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = 0;\n    let sum = 0;\n    for (let i = 0; i <\
    \ nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum) {\n\
    \            minSum = sum;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1,\
    \ 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmprpivafs2.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprpivafs2.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    -6

    '
  timestamp: 1660323299
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        sum += nums[end];\n\
    \        while (sum >= 0) {\n            minSum = Math.min(minSum, sum);\n   \
    \         sum -= nums[start];\n            start++;\n        }\n        end++;\n\
    \    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\n\
    console.log(minSubArraySum([-1, -2, -3]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: '0

    '
  timestamp: 1660323290
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        sum += nums[end];\n\
    \        while (sum >= 0) {\n            minSum = Math.min(minSum, sum);\n   \
    \         sum -= nums[start];\n            start++;\n        }\n        end++;\n\
    \    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\n\
    console.log(minSubArraySum([-1, -2, -3]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: '0

    '
  timestamp: 1660323290
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum < 0) {\n          \
    \  sum = 0;\n            start = end;\n        }\n        sum += nums[end];\n\
    \        end++;\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660323299
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (start < nums.length) {\n    while (end < nums.length && sum\
    \ < 0) {\n      sum += nums[end];\n      end++;\n    }\n    minSum = Math.min(minSum,\
    \ sum);\n    sum -= nums[start];\n    start++;\n  }\n  return minSum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4,\
    \ 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpn18pr4hk.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn18pr4hk.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660323285
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (start < nums.length) {\n    while (end < nums.length && sum\
    \ < 0) {\n      sum += nums[end];\n      end++;\n    }\n    minSum = Math.min(minSum,\
    \ sum);\n    sum -= nums[start];\n    start++;\n  }\n  return minSum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4,\
    \ 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpn18pr4hk.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn18pr4hk.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660323285
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        sum += nums[end];\n\
    \        while (sum >= 0) {\n            minSum = Math.min(minSum, sum);\n   \
    \         sum -= nums[start];\n            start++;\n        }\n        end++;\n\
    \    }\n    return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpm65yrt9v.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpm65yrt9v.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660323299
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 2
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Number.MAX_SAFE_INTEGER;\n  let currentSum = 0;\n\
    \  for (let i = 0; i < nums.length; i++) {\n    currentSum += nums[i];\n    if\
    \ (currentSum < minSum) {\n      minSum = currentSum;\n    }\n    if (currentSum\
    \ > 0) {\n      currentSum = 0;\n    }\n  }\n  return minSum;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1,\
    \ 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpoazvtvz1.ts(9,23): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660323300
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let currentSum = 0;\n    for (let\
    \ i = 0; i < nums.length; i++) {\n        currentSum += nums[i];\n        if (currentSum\
    \ < minSum) {\n            minSum = currentSum;\n        }\n        if (currentSum\
    \ > 0) {\n            currentSum = 0;\n        }\n    }\n    return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        sum += nums[end];\n\
    \        while (sum >= 0) {\n            minSum = Math.min(minSum, sum);\n   \
    \         sum -= nums[start];\n            start++;\n        }\n        end++;\n\
    \    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\n\
    console.log(minSubArraySum([-1, -2, -3]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: '0

    '
  timestamp: 1660323290
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum >= 0) {\n         \
    \   sum = nums[start];\n            start += 1;\n            end = start;\n  \
    \      } else {\n            end += 1;\n            sum += nums[end - 1];\n  \
    \      }\n    }\n    return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: '0

    '
  timestamp: 1660323315
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (start < nums.length) {\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum < 0) {\n      sum = 0;\n      start = end;\n    }\n\
    \    sum += nums[end];\n    end++;\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660323290
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (start < nums.length) {\n    while (end < nums.length && sum\
    \ < 0) {\n      sum += nums[end];\n      end++;\n    }\n    minSum = Math.min(minSum,\
    \ sum);\n    sum -= nums[start];\n    start++;\n  }\n  return minSum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4,\
    \ 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpn18pr4hk.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn18pr4hk.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660323285
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        sum += nums[end];\n\
    \        while (sum >= 0) {\n            minSum = Math.min(minSum, sum);\n   \
    \         sum -= nums[start];\n            start++;\n        }\n        end++;\n\
    \    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\n\
    console.log(minSubArraySum([-1, -2, -3]));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: '0

    '
  timestamp: 1660323316
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = nums[0];\n    let currentSum = nums[0];\n    for\
    \ (let i = 1; i < nums.length; i++) {\n        currentSum = Math.min(currentSum\
    \ + nums[i], nums[i]);\n        minSum = Math.min(minSum, currentSum);\n    }\n\
    \    return minSum;\n}\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323279
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323276
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (start < nums.length) {\n    while (end < nums.length && sum\
    \ < 0) {\n      sum += nums[end];\n      end++;\n    }\n    minSum = Math.min(minSum,\
    \ sum);\n    sum -= nums[start];\n    start++;\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmphax11j9w.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphax11j9w.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    0

    '
  timestamp: 1660323302
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let currentSum = 0;\n    for (let\
    \ i = 0; i < nums.length; i++) {\n        currentSum += nums[i];\n        if (currentSum\
    \ < minSum) {\n            minSum = currentSum;\n        }\n        if (currentSum\
    \ > 0) {\n            currentSum = 0;\n        }\n    }\n    return minSum;\n\
    }\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323303
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currSum += nums[i];\n    if (currSum < minSum)\
    \ {\n      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323303
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currSum += nums[i];\n    if (currSum < minSum)\
    \ {\n      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323303
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        while (end < nums.length)\
    \ {\n            sum += nums[end];\n            if (sum < minSum) {\n        \
    \        minSum = sum;\n            }\n            end++;\n        }\n       \
    \ start++;\n        end = start;\n        sum = 0;\n    }\n    return minSum;\n\
    }\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323305
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let currentSum = 0;\n    for (let\
    \ i = 0; i < nums.length; i++) {\n        currentSum += nums[i];\n        if (currentSum\
    \ < minSum) {\n            minSum = currentSum;\n        }\n        if (currentSum\
    \ > 0) {\n            currentSum = 0;\n        }\n    }\n    return minSum;\n\
    }\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323294
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1,\
    \ 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323280
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        sum += nums[end];\n\
    \        while (sum >= 0) {\n            minSum = Math.min(minSum, sum);\n   \
    \         sum -= nums[start];\n            start++;\n        }\n        end++;\n\
    \    }\n    return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpm65yrt9v.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpm65yrt9v.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660323299
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        sum += nums[end];\n\
    \        while (sum >= 0) {\n            minSum = Math.min(minSum, sum);\n   \
    \         sum -= nums[start];\n            start++;\n        }\n        end++;\n\
    \    }\n    return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpm65yrt9v.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpm65yrt9v.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660323299
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (start < nums.length) {\n    while (end < nums.length && sum\
    \ < 0) {\n      sum += nums[end];\n      end++;\n    }\n    minSum = Math.min(minSum,\
    \ sum);\n    sum -= nums[start];\n    start++;\n  }\n  return minSum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4,\
    \ 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpn18pr4hk.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn18pr4hk.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660323285
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323275
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1,\
    \ 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323280
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0;\
    \ i < nums.length; i++) {\n    currSum += nums[i];\n    if (currSum < minSum)\
    \ {\n      minSum = currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n\
    \    }\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2,\
    \ 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323296
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        while (end < nums.length\
    \ && sum < 0) {\n            sum += nums[end];\n            end++;\n        }\n\
    \        minSum = Math.min(minSum, sum);\n        sum -= nums[start];\n      \
    \  start++;\n    }\n    return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3,\
    \ 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpbv1eoguo.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbv1eoguo.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    0

    '
  timestamp: 1660323305
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1,\
    \ 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323280
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n\
    }\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1,\
    \ -2, -3]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (start < nums.length) {\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum < 0) {\n      sum = 0;\n      start = end;\n    }\n\
    \    sum += nums[end];\n    end++;\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660323290
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (start < nums.length) {\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum < 0) {\n          \
    \  sum = 0;\n            start = end;\n        }\n        sum += nums[end];\n\
    \        end++;\n    }\n    return minSum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660323301
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n    let minSum = Infinity;\n    let sum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        sum += nums[i];\n        if (sum < minSum)\
    \ {\n            minSum = sum;\n        }\n        if (sum > 0) {\n          \
    \  sum = 0;\n        }\n    }\n    return minSum;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    -6

    '
  timestamp: 1660323273
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums:\
    \ any): any {\n  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let\
    \ end = 0;\n  while (start < nums.length) {\n    if (sum < minSum) {\n      minSum\
    \ = sum;\n    }\n    if (sum < 0) {\n      sum = 0;\n      start = end;\n    }\n\
    \    sum += nums[end];\n    end++;\n  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660323321
