name: HumanEval_132_is_nested
language: ts
prompt: "//Create a function that takes a string as input which contains only square\
  \ brackets.\n// The function should return true if and only if there is a valid\
  \ subsequence of brackets \n// where at least one bracket in the subsequence is\
  \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
  )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n//\
  \ false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n//\
  \ true\nfunction is_nested(string: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"\
  ),true);\n  assert.deepEqual(candidate(\"[]]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"\
  [][]\"),false);\n  assert.deepEqual(candidate(\"[]\"),false);\n  assert.deepEqual(candidate(\"\
  [[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"[]]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"\
  [][][[]]\"),true);\n  assert.deepEqual(candidate(\"[[]\"),false);\n  assert.deepEqual(candidate(\"\
  []]\"),false);\n  assert.deepEqual(candidate(\"[[]][[\"),true);\n  assert.deepEqual(candidate(\"\
  [[][]]\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
  [[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"]]]]]]]]\"),false);\n}\n\ntest();"
completions: ["    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    let open: any = { '{': '}', '[': ']', '(': ')' };\n  \
    \  let closed: any = { '}': true, ']': true, ')': true };\n\n    for (let i: number\
    \ = 0; i < string.length; i++) {\n        let letter: any = string[i];\n     \
    \   if (open[letter]) {\n            stack.push(letter);\n        } else if (closed[letter])\
    \ {\n            if (open[stack.pop()] !== letter) return false;\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n  \
    \      if (string[i] === \"[\") {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === '[') {\n            stack.push(string[i]);\n        } else if\
    \ (string[i] === ']') {\n            if (stack.length === 0) {\n             \
    \   return false;\n            } else {\n                stack.pop();\n      \
    \      }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack = [];\n    let open = { '{': '}', '[': ']', '(': ')' };\n\
    \    let closed = { '}': true, ']': true, ')': true };\n\n    for (let i = 0;\
    \ i < string.length; i++) {\n        let char = string[i];\n        if (open[char])\
    \ {\n            stack.push(char);\n        } else if (closed[char]) {\n     \
    \       if (open[stack.pop()] !== char) return false;\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack: any = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack: any = [];\n    let open:\
    \ any = { '{': '}', '[': ']', '(': ')' };\n    let closed: any = { '}': true,\
    \ ']': true, ')': true };\n\n    for (let i: number = 0; i < string.length; i++)\
    \ {\n        let letter: any = string[i];\n        if (open[letter]) {\n     \
    \       stack.push(letter);\n        } else if (closed[letter]) {\n          \
    \  if (open[stack.pop()] !== letter) return false;\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === ']') {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i: number = 0; i < string.length; i++) {\n  \
    \      if (string[i] === \"[\") {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    if (stack.length === 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i: number = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n\
    \            stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n\
    \            if (stack.length === 0) {\n                return false;\n      \
    \      } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    if (stack.length === 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack: any = [];\n    for (let\
    \ i: number = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n\
    \            stack.push(string[i]);\n        } else if (string[i] === ']') {\n\
    \            if (stack.length === 0) {\n                return false;\n      \
    \      } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    if (stack.length === 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n  \
    \      if (string[i] === \"[\") {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i: number = 0; i < string.length; i++) {\n  \
    \      if (string[i] === \"[\") {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    if (stack.length === 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    let stack: any\
    \ = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: any =\
    \ [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] ===\
    \ \"[\") {\n            stack.push(string[i]);\n        } else if (string[i] ===\
    \ \"]\") {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\n\
    console.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\n\
    console.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));", "    let stack: any = [];\n    let open: any = {\n        '{': '}',\n\
    \        '[': ']',\n        '(': ')'\n    };\n    let closed: any = {\n      \
    \  '}': true,\n        ']': true,\n        ')': true\n    };\n    for (let i:\
    \ number = 0; i < string.length; i++) {\n        let char: any = string[i];\n\
    \        if (open[char]) {\n            stack.push(char);\n        } else if (closed[char])\
    \ {\n            if (open[stack.pop()] !== char) return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}", "    let\
    \ stack: any = [];\n    let open: any = { '{': '}', '[': ']', '(': ')' };\n  \
    \  let closed: any = { '}': true, ']': true, ')': true };\n\n    for (let i: number\
    \ = 0; i < string.length; i++) {\n        let letter: any = string[i];\n     \
    \   if (open[letter]) {\n            stack.push(letter);\n        } else if (closed[letter])\
    \ {\n            if (open[stack.pop()] !== letter) return false;\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let count = 0;\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       count++;\n        } else if (string[i] === \"]\") {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack = [];\n    let open = { '{': '}', '[': ']', '(': ')' };\n\
    \    let closed = { '}': true, ']': true, ')': true };\n\n    for (let i = 0;\
    \ i < string.length; i++) {\n\n        // If character is an closing bracket\n\
    \        if (closed[string[i]]) {\n\n            // Pop the top element from stack,\
    \ if\n            // it is not an opening bracket\n            if (stack.length\
    \ == 0 || open[stack.pop()] != string[i])\n                return false;\n   \
    \     } else {\n            // If character is an opening bracket, push it to\
    \ stack\n            stack.push(string[i]);\n        }\n    }\n\n    // Check\
    \ Empty Stack\n    return (stack.length == 0);\n}\n", "    let stack: any = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[')\
    \ {\n            stack.push(string[i]);\n        } else if (string[i] === ']')\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\n\
    console.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\n\
    console.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));", "    let stack: any = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: any =\
    \ [];\n    let map: any = {\n        '(': ')',\n        '[': ']',\n        '{':\
    \ '}'\n    }\n    for (let i = 0; i < string.length; i++) {\n        // If character\
    \ is an opening brace add it to a stack\n        if (string[i] === '(' || string[i]\
    \ === '{' || string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  }\n        //  If that character is a closing brace, pop from the stack, which\
    \ will also reduce the length of the stack each time a closing bracket is encountered.\n\
    \        else {\n            let last = stack.pop();\n            //If the popped\
    \ element from the stack, which is the last opening brace doesn\u2019t match the\
    \ corresponding closing brace in the map, then return false\n            if (string[i]\
    \ !== map[last]) {\n                return false;\n            }\n        }\n\
    \    }\n    // By the completion of the for loop after checking all the brackets\
    \ of the str, at the end, if the stack is not empty then fail\n    if (stack.length\
    \ !== 0) {\n        return false;\n    }\n    return true;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "    let stack: any = [];\n    for (let\
    \ i: number = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n\
    \            stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n\
    \            if (stack.length === 0) {\n                return false;\n      \
    \      } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    if (stack.length === 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n       \
    \     stack.push(string[i]);\n        } else if (string[i] === ']') {\n      \
    \      if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "    let stack: any = [];\n    for (let\
    \ i: number = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n\
    \            stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n\
    \            if (stack.length === 0) {\n                return false;\n      \
    \      } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    if (stack.length === 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "    let stack: any = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === ']') {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n       \
    \     stack.push(string[i]);\n        } else if (string[i] === ']') {\n      \
    \      if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack: any = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "    let stack: any = [];\n    let open:\
    \ any = { '{': '}', '[': ']', '(': ')' };\n    let closed: any = { '}': true,\
    \ ']': true, ')': true };\n\n    for (let i: number = 0; i < string.length; i++)\
    \ {\n        let letter: any = string[i];\n        if (open[letter]) {\n     \
    \       stack.push(letter);\n        } else if (closed[letter]) {\n          \
    \  if (open[stack.pop()] !== letter) return false;\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n  \
    \      if (string[i] === \"[\") {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i: number = 0; i < string.length; i++) {\n  \
    \      if (string[i] === '[') {\n            stack.push(string[i]);\n        }\
    \ else if (string[i] === ']') {\n            if (stack.length === 0) {\n     \
    \           return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    if (stack.length === 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "    let stack = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n         \
    \   stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n      \
    \      if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === ']') {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    let map: any = {\n        '(': ')',\n        '[': ']',\n\
    \        '{': '}'\n    }\n    for (let i = 0; i < string.length; i++) {\n    \
    \    // If character is an opening brace add it to a stack\n        if (string[i]\
    \ === '(' || string[i] === '{' || string[i] === '[') {\n            stack.push(string[i]);\n\
    \        }\n        //  If that character is a closing brace, pop from the stack,\
    \ which will also reduce the length of the stack each time a closing bracket is\
    \ encountered.\n        else {\n            let last = stack.pop();\n        \
    \    //If the popped element from the stack, which is the last opening brace doesn\u2019\
    t match the corresponding closing brace in the map, then return false\n      \
    \      if (string[i] !== map[last]) {\n                return false;\n       \
    \     }\n        }\n    }\n    // By the completion of the for loop after checking\
    \ all the brackets of the str, at the end, if the stack is not empty then fail\n\
    \    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n\
    }\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"\
    ));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\"\
    ) {\n            stack.push(string[i]);\n        } else if (string[i] === \"]\"\
    ) {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: any = [];\n    let\
    \ map: any = {\n        ']': '[',\n        '}': '{',\n        ')': '('\n    }\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '['\
    \ || string[i] === '{' || string[i] === '(') {\n            stack.push(string[i]);\n\
    \        } else {\n            let last = stack.pop();\n            if (map[string[i]]\
    \ !== last) {\n                return false;\n            }\n        }\n    }\n\
    \    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n\
    }\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"\
    ));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n\
    \    let open: any = { '{': '}', '[': ']', '(': ')' };\n    let closed: any =\
    \ { '}': true, ']': true, ')': true };\n\n    for (let i: number = 0; i < string.length;\
    \ i++) {\n        let letter: any = string[i];\n        if (open[letter]) {\n\
    \            stack.push(letter);\n        } else if (closed[letter]) {\n     \
    \       if (open[stack.pop()] !== letter) return false;\n        }\n    }\n  \
    \  return stack.length === 0;\n}\n", "    let stack: any = [];\n    for (let i\
    \ = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n       \
    \     stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n    \
    \        if (stack.length === 0) {\n                return false;\n          \
    \  } else {\n                stack.pop();\n            }\n        }\n    }\n \
    \   return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    let map: any = {\n        '(': ')',\n        '[': ']',\n\
    \        '{': '}'\n    }\n    for (let i = 0; i < string.length; i++) {\n    \
    \    // If character is an opening brace add it to a stack\n        if (string[i]\
    \ === '(' || string[i] === '{' || string[i] === '[') {\n            stack.push(string[i]);\n\
    \        }\n        //  If that character is a closing brace, pop from the stack,\
    \ which will also reduce the length of the stack each time a closing bracket is\
    \ encountered.\n        else {\n            let last = stack.pop();\n        \
    \    //If the popped element from the stack, which is the last opening brace doesn\u2019\
    t match the corresponding closing brace in the map, then return false\n      \
    \      if (string[i] !== map[last]) {\n                return false;\n       \
    \     }\n        }\n    }\n    // By the completion of the for loop after checking\
    \ all the brackets of the str, at the end, if the stack is not empty then fail\n\
    \    if (stack.length !== 0) {\n        return false;\n    }\n    return true;\n\
    }\n", "    let stack: any = [];\n    for (let i: number = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    if (stack.length === 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    let map: any = {\n        ']': '[',\n   \
    \     '}': '{',\n        ')': '('\n    }\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === '[' || string[i] === '{' || string[i] ===\
    \ '(') {\n            stack.push(string[i]);\n        } else {\n            let\
    \ last = stack.pop();\n            if (map[string[i]] !== last) {\n          \
    \      return false;\n            }\n        }\n    }\n    if (stack.length !==\
    \ 0) {\n        return false;\n    }\n    return true;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i: number = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n\
    \            stack.push(string[i]);\n        } else if (string[i] === ']') {\n\
    \            if (stack.length === 0) {\n                return false;\n      \
    \      } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    if (stack.length === 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    let i: number = 0;\n    while (i < string.length) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n        i++;\n    }\n    if (stack.length === 0) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n         \
    \   stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n      \
    \      if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack: any = [];\n    let map: any = {\n\
    \        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    for (let i\
    \ = 0; i < string.length; i++) {\n        // If character is an opening brace\
    \ add it to a stack\n        if (string[i] === '(' || string[i] === '{' || string[i]\
    \ === '[') {\n            stack.push(string[i]);\n        }\n        //  If that\
    \ character is a closing brace, pop from the stack, which will also reduce the\
    \ length of the stack each time a closing bracket is encountered.\n        else\
    \ {\n            let last = stack.pop();\n            //If the popped element\
    \ from the stack, which is the last opening brace doesn\u2019t match the corresponding\
    \ closing brace in the map, then return false\n            if (string[i] !== map[last])\
    \ {\n                return false;\n            }\n        }\n    }\n    // By\
    \ the completion of the for loop after checking all the brackets of the str, at\
    \ the end, if the stack is not empty then fail\n    if (stack.length !== 0) {\n\
    \        return false;\n    }\n    return true;\n}\nconsole.log(is_nested(\"[[]]\"\
    ));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));\n", "    let stack: any = [];\n    let map: any = {\n        '(':\
    \ ')',\n        '[': ']',\n        '{': '}'\n    }\n    for (let i = 0; i < string.length;\
    \ i++) {\n        // If character is an opening brace add it to a stack\n    \
    \    if (string[i] === '(' || string[i] === '{' || string[i] === '[') {\n    \
    \        stack.push(string[i]);\n        }\n        //  If that character is a\
    \ closing brace, pop from the stack, which will also reduce the length of the\
    \ stack each time a closing bracket is encountered.\n        else {\n        \
    \    let last = stack.pop();\n            //If the popped element from the stack,\
    \ which is the last opening brace doesn\u2019t match the corresponding closing\
    \ brace in the map, then return false\n            if (string[i] !== map[last])\
    \ {\n                return false;\n            }\n        }\n    }\n    // By\
    \ the completion of the for loop after checking all the brackets of the str, at\
    \ the end, if the stack is not empty then fail\n    if (stack.length !== 0) {\n\
    \        return false;\n    }\n    return true;\n}\nconsole.log(is_nested(\"[[]]\"\
    ));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));\n", "    let stack = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack: any = [];\n    let open:\
    \ any = { '{': '}', '[': ']', '(': ')' };\n    let closed: any = { '}': true,\
    \ ']': true, ')': true };\n\n    for (let i: number = 0; i < string.length; i++)\
    \ {\n        let char: any = string[i];\n        if (open[char]) {\n         \
    \   stack.push(char);\n        } else if (closed[char]) {\n            if (open[stack.pop()]\
    \ !== char) return false;\n        }\n    }\n    return stack.length === 0;\n\
    }\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"\
    ));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"\
    [[][]]\"));\nconsole.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\"\
    ) {\n            stack.push(string[i]);\n        } else if (string[i] === \"]\"\
    ) {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\n\
    console.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\n\
    console.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));\n", "    let stack = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n  \
    \      } else if (string[i] === ']') {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n  \
    \      if (string[i] === \"[\") {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "    let stack = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n         \
    \   stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n      \
    \      if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    let open: any = { '{': '}', '[': ']', '(':\
    \ ')' };\n    let closed: any = { '}': true, ']': true, ')': true };\n\n    for\
    \ (let i: number = 0; i < string.length; i++) {\n        let letter: any = string[i];\n\
    \        if (open[letter]) {\n            stack.push(letter);\n        } else\
    \ if (closed[letter]) {\n            if (open[stack.pop()] !== letter) return\
    \ false;\n        }\n    }\n    return stack.length === 0;\n}\n", "    let stack:\
    \ any = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === '[') {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === ']') {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === '[') {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === ']') {\n            if (stack.length === 0) {\n  \
    \              return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: any =\
    \ [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] ===\
    \ \"[\") {\n            stack.push(string[i]);\n        } else if (string[i] ===\
    \ \"]\") {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\n\
    console.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\n\
    console.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));", "    let stack: any = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    let map: any = {\n        '(': ')',\n        '[': ']',\n\
    \        '{': '}'\n    }\n    for (let i = 0; i < string.length; i++) {\n    \
    \    // If character is an opening brace add it to a stack\n        if (string[i]\
    \ === '(' || string[i] === '{' || string[i] === '[') {\n            stack.push(string[i]);\n\
    \        }\n        //  If that character is a closing brace, pop from the stack,\
    \ which will also reduce the length of the stack each time a closing bracket is\
    \ encountered.\n        else {\n            let last = stack.pop();\n        \
    \    //If the popped element from the stack, which is the last opening brace doesn\u2019\
    t match the corresponding closing brace in the map, then return false\n      \
    \      if (string[i] !== map[last]) { return false; }\n        }\n    }\n    //\
    \ By the completion of the for loop after checking all the brackets of the str,\
    \ at the end, if the stack is not empty then fail\n    if (stack.length !== 0)\
    \ { return false; }\n\n    return true;\n}\nconsole.log(is_nested(\"[[]]\"));\n\
    console.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\n\
    console.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));", "    let stack: any = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    let open: any = { '{': '}', '[': ']', '(': ')' };\n  \
    \  let closed: any = { '}': true, ']': true, ')': true };\n\n    for (let i: number\
    \ = 0; i < string.length; i++) {\n        let char: any = string[i];\n       \
    \ if (open[char]) {\n            stack.push(char);\n        } else if (closed[char])\
    \ {\n            if (open[stack.pop()] !== char) return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    let open:\
    \ any = { '{': '}', '[': ']', '(': ')' };\n    let closed: any = { '}': true,\
    \ ']': true, ')': true };\n\n    for (let i: number = 0; i < string.length; i++)\
    \ {\n        let letter: any = string[i];\n        if (open[letter]) {\n     \
    \       stack.push(letter);\n        } else if (closed[letter]) {\n          \
    \  if (open[stack.pop()] !== letter) return false;\n        }\n    }\n    return\
    \ stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    let open: any = {\n        '[': ']'\n   \
    \ };\n    let closed: any = {\n        ']': true\n    };\n    for (let i: number\
    \ = 0; i < string.length; i++) {\n        let char: any = string[i];\n       \
    \ if (open[char]) {\n            stack.push(char);\n        } else if (closed[char])\
    \ {\n            if (open[stack.pop()] !== char) return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    let open = { '{': '}', '[': ']', '(': ')' };\n    let closed\
    \ = { '}': true, ']': true, ')': true };\n\n    for (let i = 0; i < string.length;\
    \ i++) {\n\n        // If character is an closing bracket\n        if (closed[string[i]])\
    \ {\n\n            // Pop the top element from stack, if\n            // it is\
    \ not an opening bracket\n            if (stack.length == 0 || open[stack.pop()]\
    \ != string[i])\n                return false;\n        } else {\n           \
    \ // If character is an opening bracket, push it to stack\n            stack.push(string[i]);\n\
    \        }\n    }\n\n    // Check Empty Stack\n    return (stack.length == 0);\n\
    }\n", "    let stack: any = [];\n    let open: any = { '{': '}', '[': ']', '(':\
    \ ')' };\n    let closed: any = { '}': true, ']': true, ')': true };\n\n    for\
    \ (let i: number = 0; i < string.length; i++) {\n        let char: any = string[i];\n\
    \        if (open[char]) {\n            stack.push(char);\n        } else if (closed[char])\
    \ {\n            if (open[stack.pop()] !== char) return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    let map: any = {\n        '(': ')',\n   \
    \     '[': ']',\n        '{': '}'\n    }\n    for (let i = 0; i < string.length;\
    \ i++) {\n        // If character is an opening brace add it to a stack\n    \
    \    if (string[i] === '(' || string[i] === '{' || string[i] === '[') {\n    \
    \        stack.push(string[i]);\n        }\n        //  If that character is a\
    \ closing brace, pop from the stack, which will also reduce the length of the\
    \ stack each time a closing bracket is encountered.\n        else {\n        \
    \    let last = stack.pop();\n            //If the popped element from the stack,\
    \ which is the last opening brace doesn\u2019t match the corresponding closing\
    \ brace in the map, then return false\n            if (string[i] !== map[last])\
    \ {\n                return false;\n            }\n        }\n    }\n    // By\
    \ the completion of the for loop after checking all the brackets of the str, at\
    \ the end, if the stack is not empty then fail\n    if (stack.length !== 0) {\n\
    \        return false;\n    }\n    return true;\n}\nconsole.log(is_nested(\"[[]]\"\
    ));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));\n", "    let stack: any = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack = [];\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    let openBrackets: any = {\n        '[': ']'\n    };\n\
    \    let closedBrackets: any = {\n        ']': '['\n    };\n    for (let i = 0;\
    \ i < string.length; i++) {\n        if (string[i] in openBrackets) {\n      \
    \      stack.push(string[i]);\n        } else if (string[i] in closedBrackets)\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          }\n            if (closedBrackets[string[i]] !== stack[stack.length\
    \ - 1]) {\n                return false;\n            }\n            stack.pop();\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\"\
    ) {\n            stack.push(string[i]);\n        } else if (string[i] === \"]\"\
    ) {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\n\
    console.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\n\
    console.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));\n", "    let stack: any = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: any =\
    \ [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] ===\
    \ \"[\") {\n            stack.push(string[i]);\n        } else if (string[i] ===\
    \ \"]\") {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: any = [];\n    for\
    \ (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n\
    \            stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n\
    \            if (stack.length === 0) {\n                return false;\n      \
    \      } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "    let stack: any = [];\n    let open:\
    \ any = { '{': '}', '[': ']', '(': ')' };\n    let closed: any = { '}': true,\
    \ ']': true, ')': true };\n\n    for (let i: number = 0; i < string.length; i++)\
    \ {\n        let letter: any = string[i];\n        if (open[letter]) {\n     \
    \       stack.push(letter);\n        } else if (closed[letter]) {\n          \
    \  if (open[stack.pop()] !== letter) return false;\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack = [];\n    let open = {\n\
    \        '{': '}',\n        '[': ']',\n        '(': ')'\n    };\n    let closed\
    \ = {\n        '}': true,\n        ']': true,\n        ')': true\n    };\n   \
    \ for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n \
    \       if (open[char]) {\n            stack.push(char);\n        } else if (closed[char])\
    \ {\n            if (open[stack.pop()] !== char) return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let stack = [];\n    let open = { '{': '}', '[': ']', '(': ')' };\n\
    \    let closed = { '}': true, ']': true, ')': true };\n\n    for (let i = 0;\
    \ i < string.length; i++) {\n\n        // If string[i] is an opening bracket,\
    \ push it onto the stack\n        if (open[string[i]]) {\n            stack.push(string[i]);\n\
    \n            // If string[i] is a closing bracket\n        } else if (closed[string[i]])\
    \ {\n\n            // If stack is empty, return false\n            if (stack.length\
    \ === 0) {\n                return false;\n            } else {\n\n          \
    \      // If string[i] matches the top element, pop it off the stack\n       \
    \         let top = stack.pop();\n                if (open[top] !== string[i])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n \
    \   let open = {\n        '[': ']'\n    };\n    let closed = {\n        ']': true\n\
    \    };\n    for (let i = 0; i < string.length; i++) {\n        let char = string[i];\n\
    \        if (open[char]) {\n            stack.push(char);\n        } else if (closed[char])\
    \ {\n            if (open[stack.pop()] !== char) return false;\n        }\n  \
    \  }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let stack: any = [];\n    let open: any = { '{': '}', '[': ']', '(':\
    \ ')' };\n    let closed: any = { '}': true, ']': true, ')': true };\n\n    for\
    \ (let i: number = 0; i < string.length; i++) {\n        let letter: any = string[i];\n\
    \        if (open[letter]) {\n            stack.push(letter);\n        } else\
    \ if (closed[letter]) {\n            if (open[stack.pop()] !== letter) return\
    \ false;\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    let open: any = { '{': '}', '[': ']', '(':\
    \ ')' };\n    let closed: any = { '}': true, ']': true, ')': true };\n\n    for\
    \ (let i: number = 0; i < string.length; i++) {\n        let letter: any = string[i];\n\
    \        if (open[letter]) {\n            stack.push(letter);\n        } else\
    \ if (closed[letter]) {\n            if (open[stack.pop()] !== letter) return\
    \ false;\n        }\n    }\n    return stack.length === 0;\n}\n", "    let stack:\
    \ any = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: any =\
    \ [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] ===\
    \ \"[\") {\n            stack.push(string[i]);\n        } else if (string[i] ===\
    \ \"]\") {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n       \
    \     stack.push(string[i]);\n        } else if (string[i] === ']') {\n      \
    \      if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    let openBrackets: any = {\n        '{': '}',\n\
    \        '[': ']',\n        '(': ')'\n    };\n    let closedBrackets: any = {\n\
    \        '}': true,\n        ']': true,\n        ')': true\n    };\n    for (let\
    \ i = 0; i < string.length; i++) {\n        let char = string[i];\n        if\
    \ (openBrackets[char]) {\n            stack.push(char);\n        } else if (closedBrackets[char])\
    \ {\n            if (openBrackets[stack.pop()] !== char) return false;\n     \
    \   }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"\
    ));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"\
    ));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));", "    let stack: any = [];\n    let open: any = { '{': '}', '[':\
    \ ']', '(': ')' };\n    let closed: any = { '}': true, ']': true, ')': true };\n\
    \n    for (let i: number = 0; i < string.length; i++) {\n        let letter: any\
    \ = string[i];\n        if (open[letter]) {\n            stack.push(letter);\n\
    \        } else if (closed[letter]) {\n            if (open[stack.pop()] !== letter)\
    \ return false;\n        }\n    }\n    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    let open:\
    \ any = {\n        '{': '}',\n        '[': ']',\n        '(': ')'\n    };\n  \
    \  let closed: any = {\n        '}': true,\n        ']': true,\n        ')': true\n\
    \    };\n    for (let i: number = 0; i < string.length; i++) {\n        let char:\
    \ any = string[i];\n        if (open[char]) {\n            stack.push(char);\n\
    \        } else if (closed[char]) {\n            if (open[stack.pop()] !== char)\
    \ return false;\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let arr = string.split('');\n    let\
    \ stack = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ === '[') {\n            stack.push(arr[i]);\n        } else if (arr[i] === ']')\
    \ {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    if (stack.length === 0) {\n        return true;\n    } else {\n  \
    \      return false;\n    }\n}\n", "    let stack = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "    let stack = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === '[') {\n           \
    \ stack.push(string[i]);\n        } else if (string[i] === ']') {\n          \
    \  if (stack.length === 0) {\n                return false;\n            } else\
    \ {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack: any = [];\n    for (let i = 0; i\
    \ < string.length; i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    let open: any = { '{': '}', '[': ']', '(': ')' };\n  \
    \  let closed: any = { '}': true, ']': true, ')': true };\n\n    for (let i: number\
    \ = 0; i < string.length; i++) {\n        let letter: any = string[i];\n     \
    \   if (open[letter]) {\n            stack.push(letter);\n        } else if (closed[letter])\
    \ {\n            if (open[stack.pop()] !== letter) return false;\n        }\n\
    \    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\n\
    console.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\n\
    console.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));", "    let stack = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n  \
    \      } else if (string[i] === ']') {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    let open: any = { '{': '}', '[': ']', '(': ')' };\n  \
    \  let closed: any = { '}': true, ']': true, ')': true };\n\n    for (let i: number\
    \ = 0; i < string.length; i++) {\n        let letter: any = string[i];\n     \
    \   if (open[letter]) {\n            stack.push(letter);\n        } else if (closed[letter])\
    \ {\n            if (open[stack.pop()] !== letter) return false;\n        }\n\
    \    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\n\
    console.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\n\
    console.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"\
    [[]][[\"));", "    let stack: any = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    let open:\
    \ any = {\n        '[': ']'\n    };\n    let closed: any = {\n        ']': true\n\
    \    };\n    for (let i: number = 0; i < string.length; i++) {\n        let char:\
    \ any = string[i];\n        if (open[char]) {\n            stack.push(char);\n\
    \        } else if (closed[char]) {\n            if (open[stack.pop()] !== char)\
    \ return false;\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i: number = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n\
    \            stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n\
    \            if (stack.length === 0) {\n                return false;\n      \
    \      } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    if (stack.length === 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    for (let i: number = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    if (stack.length === 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    let open:\
    \ any = {\n        '{': '}',\n        '[': ']',\n        '(': ')'\n    };\n  \
    \  let closed: any = {\n        '}': true,\n        ']': true,\n        ')': true\n\
    \    };\n    for (let i: number = 0; i < string.length; i++) {\n        let letter:\
    \ any = string[i];\n        if (open[letter]) {\n            stack.push(letter);\n\
    \        } else if (closed[letter]) {\n            if (open[stack.pop()] !== letter)\
    \ return false;\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n         \
    \   stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n      \
    \      if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack: any = [];\n    for (let i: number\
    \ = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n       \
    \     stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n    \
    \        if (stack.length === 0) {\n                return false;\n          \
    \  } else {\n                stack.pop();\n            }\n        }\n    }\n \
    \   if (stack.length === 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let stack: any = [];\n    let map: any = {\n        '(': ')',\n \
    \       '[': ']',\n        '{': '}'\n    }\n    for (let i = 0; i < string.length;\
    \ i++) {\n        // If character is an opening brace add it to a stack\n    \
    \    if (string[i] === '(' || string[i] === '{' || string[i] === '[') {\n    \
    \        stack.push(string[i]);\n        }\n        //  If that character is a\
    \ closing brace, pop from the stack, which will also reduce the length of the\
    \ stack each time a closing bracket is encountered.\n        else {\n        \
    \    let last = stack.pop();\n            //If the popped element from the stack,\
    \ which is the last opening brace doesn\u2019t match the corresponding closing\
    \ brace in the map, then return false\n            if (string[i] !== map[last])\
    \ {\n                return false;\n            }\n        }\n    }\n    // By\
    \ the completion of the for loop after checking all the brackets of the str, at\
    \ the end, if the stack is not empty then fail\n    if (stack.length !== 0) {\n\
    \        return false;\n    }\n    return true;\n}\n", "    let stack = [];\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string[i] === \"[\"\
    ) {\n            stack.push(string[i]);\n        } else if (string[i] === \"]\"\
    ) {\n            if (stack.length === 0) {\n                return false;\n  \
    \          } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack: any = [];\n    let\
    \ open: any = { '{': '}', '[': ']', '(': ')' };\n    let closed: any = { '}':\
    \ true, ']': true, ')': true };\n\n    for (let i: number = 0; i < string.length;\
    \ i++) {\n        let letter: any = string[i];\n        if (open[letter]) {\n\
    \            stack.push(letter);\n        } else if (closed[letter]) {\n     \
    \       if (open[stack.pop()] !== letter) return false;\n        }\n    }\n  \
    \  return stack.length === 0;\n}\n", "    let stack: any = [];\n    let map: any\
    \ = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    for\
    \ (let i = 0; i < string.length; i++) {\n        // If character is an opening\
    \ brace add it to a stack\n        if (string[i] === '(' || string[i] === '{'\
    \ || string[i] === '[') {\n            stack.push(string[i]);\n        }\n   \
    \     //  If that character is a closing brace, pop from the stack, which will\
    \ also reduce the length of the stack each time a closing bracket is encountered.\n\
    \        else {\n            let last = stack.pop();\n            //If the popped\
    \ element from the stack, which is the last opening brace doesn\u2019t match the\
    \ corresponding closing brace in the map, then return false\n            if (string[i]\
    \ !== map[last]) {\n                return false;\n            }\n        }\n\
    \    }\n    // By the completion of the for loop after checking all the brackets\
    \ of the str, at the end, if the stack is not empty then fail\n    if (stack.length\
    \ !== 0) {\n        return false;\n    }\n    return true;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n         \
    \   stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n      \
    \      if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    for (let i: number = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    if (stack.length === 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    let stack: any\
    \ = [];\n    let open: any = { '{': '}', '[': ']', '(': ')' };\n    let closed:\
    \ any = { '}': true, ']': true, ')': true };\n\n    for (let i: number = 0; i\
    \ < string.length; i++) {\n        let letter: any = string[i];\n        if (open[letter])\
    \ {\n            stack.push(letter);\n        } else if (closed[letter]) {\n \
    \           if (open[stack.pop()] !== letter) return false;\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n       \
    \     stack.push(string[i]);\n        } else if (string[i] === ']') {\n      \
    \      if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n", "    let stack = [];\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n       \
    \     stack.push(string[i]);\n        } else if (string[i] === ']') {\n      \
    \      if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack: any = [];\n    for (let\
    \ i: number = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n\
    \            stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n\
    \            if (stack.length === 0) {\n                return false;\n      \
    \      } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    if (stack.length === 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n\
    \        if (string[i] === \"[\") {\n            stack.push(string[i]);\n    \
    \    } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack: any = [];\n    let map:\
    \ any = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n   \
    \ for (let i = 0; i < string.length; i++) {\n        // If character is an opening\
    \ brace add it to a stack\n        if (string[i] === '(' || string[i] === '{'\
    \ || string[i] === '[') {\n            stack.push(string[i]);\n        }\n   \
    \     //  If that character is a closing brace, pop from the stack, which will\
    \ also reduce the length of the stack each time a closing bracket is encountered.\n\
    \        else {\n            let last = stack.pop();\n            //If the popped\
    \ element from the stack, which is the last opening brace doesn\u2019t match the\
    \ corresponding closing brace in the map, then return false\n            if (string[i]\
    \ !== map[last]) {\n                return false;\n            }\n        }\n\
    \    }\n    // By the completion of the for loop after checking all the brackets\
    \ of the str, at the end, if the stack is not empty then fail\n    if (stack.length\
    \ !== 0) {\n        return false;\n    }\n    return true;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack: any = [];\n    let open: any = { '{': '}', '[': ']', '(':\
    \ ')' };\n    let closed: any = { '}': true, ']': true, ')': true };\n\n    for\
    \ (let i: number = 0; i < string.length; i++) {\n        let letter: any = string[i];\n\
    \        if (open[letter]) {\n            stack.push(letter);\n        } else\
    \ if (closed[letter]) {\n            if (open[stack.pop()] !== letter) return\
    \ false;\n        }\n    }\n    return stack.length === 0;\n}\n", "    let stack:\
    \ any = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack: any =\
    \ [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] ===\
    \ \"[\") {\n            stack.push(string[i]);\n        } else if (string[i] ===\
    \ \"]\") {\n            if (stack.length === 0) {\n                return false;\n\
    \            } else {\n                stack.pop();\n            }\n        }\n\
    \    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n       \
    \     stack.push(string[i]);\n        } else if (string[i] === ']') {\n      \
    \      if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));\n", "    let stack: any = [];\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (string[i] === \"[\") {\n            stack.push(string[i]);\n\
    \        } else if (string[i] === \"]\") {\n            if (stack.length === 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    for (let i = 0; i < string.length; i++) {\n        if\
    \ (string[i] === \"[\") {\n            stack.push(string[i]);\n        } else\
    \ if (string[i] === \"]\") {\n            if (stack.length === 0) {\n        \
    \        return false;\n            } else {\n                stack.pop();\n \
    \           }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack = [];\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]\
    \ === \"[\") {\n            stack.push(string[i]);\n        } else if (string[i]\
    \ === \"]\") {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));\n", "    let stack = [];\n    for (let i =\
    \ 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n         \
    \   stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n      \
    \      if (stack.length === 0) {\n                return false;\n            }\
    \ else {\n                stack.pop();\n            }\n        }\n    }\n    return\
    \ stack.length === 0;\n}\nconsole.log(is_nested(\"[[]]\"));\nconsole.log(is_nested(\"\
    []]]]]]][[[[[]\"));\nconsole.log(is_nested(\"[][]\"));\nconsole.log(is_nested(\"\
    []\"));\nconsole.log(is_nested(\"[[][]]\"));\nconsole.log(is_nested(\"[[]][[\"\
    ));", "    let stack = [];\n    for (let i = 0; i < string.length; i++) {\n  \
    \      if (string[i] === \"[\") {\n            stack.push(string[i]);\n      \
    \  } else if (string[i] === \"]\") {\n            if (stack.length === 0) {\n\
    \                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    let\
    \ stack: any = [];\n    let top: any = -1;\n    let flag: any = 0;\n    for (let\
    \ i: any = 0; i < string.length; i++) {\n        if (string[i] == '[') {\n   \
    \         stack[++top] = string[i];\n        }\n        else if (string[i] ==\
    \ ']') {\n            if (top == -1) {\n                flag = 1;\n          \
    \      break;\n            }\n            else {\n                stack[top--]\
    \ = null;\n            }\n        }\n    }\n    if (flag == 1 || top != -1) {\n\
    \        return false;\n    }\n    else {\n        return true;\n    }\n}\nconsole.log(is_nested(\"\
    [[]]\"));\nconsole.log(is_nested(\"[]]]]]]][[[[[]\"));\nconsole.log(is_nested(\"\
    [][]\"));\nconsole.log(is_nested(\"[]\"));\nconsole.log(is_nested(\"[[][]]\"));\n\
    console.log(is_nested(\"[[]][[\"));", "    let stack: any = [];\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string[i] === \"[\") {\n     \
    \       stack.push(string[i]);\n        } else if (string[i] === \"]\") {\n  \
    \          if (stack.length === 0) {\n                return false;\n        \
    \    } else {\n                stack.pop();\n            }\n        }\n    }\n\
    \    return stack.length === 0;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
