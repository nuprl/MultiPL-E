language: ts
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallest\
    \ = Math.min(...evens);\n  return [smallest, arr.indexOf(smallest)];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328307
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  return [smallestEven, arr.indexOf(smallestEven)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328307
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpi2fzas2y.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi2fzas2y.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328307
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  if (min === Infinity) {\n\
    \    return [];\n  }\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328307
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzyt7cwjn.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzyt7cwjn.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328308
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  if (min === Infinity) {\n\
    \    return [];\n  }\n  return [min, arr.indexOf(min)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328308
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  if (min === Infinity) {\n\
    \    return [];\n  }\n  return [min, arr.indexOf(min)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328308
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  const evens = arr.filter(x\
    \ => x % 2 === 0);\n  const min = Math.min(...evens);\n  return evens.length ?\
    \ [min, arr.indexOf(min)] : [];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328308
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let minEven = Math.min(...evens);\n    let minEvenIndex = arr.indexOf(minEven);\n\
    \    return [minEven, minEvenIndex];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328308
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328310
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  return [min, arr.indexOf(min)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328310
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328310
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328310
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evenArr = arr.filter(el\
    \ => el % 2 === 0);\n  if (evenArr.length === 0) {\n    return [];\n  }\n  let\
    \ min = Math.min(...evenArr);\n  let index = arr.indexOf(min);\n  return [min,\
    \ index];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\n\
    console.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    []

    [ 0, 1 ]

    '
  timestamp: 1660328310
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(num\
    \ => num % 2 === 0);\n    let smallestEven = evens.sort((a, b) => a - b)[0];\n\
    \    let index = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpcoh1wwzr.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcoh1wwzr.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328310
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallest\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  return [smallest, arr.indexOf(smallest)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let idx = arr.indexOf(min);\n  return [min, idx];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evenArr = arr.filter(x\
    \ => x % 2 === 0);\n  if (evenArr.length === 0) {\n    return [];\n  }\n  let\
    \ minEven = Math.min(...evenArr);\n  let minEvenIndex = arr.indexOf(minEven);\n\
    \  return [minEven, minEvenIndex];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328312
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328310
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = Math.min(...evens);\n  let index = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328313
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(num\
    \ => num % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let\
    \ min = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328313
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  let evenArr = arr.filter((item) => {\n    return item\
    \ % 2 === 0;\n  });\n  if (evenArr.length === 0) {\n    return [];\n  }\n  let\
    \ minEven = Math.min(...evenArr);\n  let index = arr.indexOf(minEven);\n  return\
    \ [minEven, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328313
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(e\
    \ => e % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328314
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  let evens = arr.filter((num) => num % 2 === 0);\n\
    \  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven = evens.reduce((a,\
    \ b) => Math.min(a, b));\n  let index = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328314
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let smallestEven = Math.min(...evens);\n  let smallestEvenIndex\
    \ = arr.indexOf(smallestEven);\n  return [smallestEven, smallestEvenIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp0i6qk7lx.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0i6qk7lx.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328314
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evenArr = arr.filter(x\
    \ => x % 2 === 0);\n    let minEven = Math.min(...evenArr);\n    let minEvenIndex\
    \ = arr.indexOf(minEven);\n    return evenArr.length === 0 ? [] : [minEven, minEvenIndex];\n\
    }\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\n\
    console.log(pluck([5, 0, 3, 0, 4, 2]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    []

    [ 0, 1 ]

    '
  timestamp: 1660328314
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  if (min === Infinity) {\n\
    \    return [];\n  }\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328307
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  if (min === Infinity) {\n\
    \    return [];\n  }\n  return [min, arr.indexOf(min)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328308
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return evens.length === 0 ? [] : [min, index];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328315
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let minEven\
    \ = Math.min(...evens);\n  return [minEven, arr.indexOf(minEven)];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328316
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evenArr = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evenArr);\n  let index = arr.indexOf(min);\n\
    \  return evenArr.length > 0 ? [min, index] : [];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328316
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzyt7cwjn.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzyt7cwjn.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328308
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallest\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  return [smallest, arr.indexOf(smallest)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  let index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328316
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  let evenArr = arr.filter((x) => x % 2 === 0);\n  if\
    \ (evenArr.length === 0) {\n    return [];\n  }\n  let smallestEven = Math.min(...evenArr);\n\
    \  let smallestEvenIndex = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ smallestEvenIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328317
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  return [min, arr.indexOf(min)];\n\
    }\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\n\
    console.log(pluck([5, 0, 3, 0, 4, 2]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpyqi6mn_s.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyqi6mn_s.js:47:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ Infinity, -1 ]

    [ 0, 1 ]

    '
  timestamp: 1660328317
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return evens.length ? [min, index] : [];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328317
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evenArr = arr.filter(x\
    \ => x % 2 === 0);\n  let minEven = Math.min(...evenArr);\n  let minEvenIndex\
    \ = arr.indexOf(minEven);\n  return [minEven, minEvenIndex];\n}\n\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp9j4ejwy7.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmp9j4ejwy7.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ Infinity, -1 ]

    [ 0, 1 ]

    '
  timestamp: 1660328318
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328310
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let smallest = evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n \
    \ assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328318
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328319
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  if (evens.length === 0)\
    \ {\n    return [];\n  }\n  return [min, arr.indexOf(min)];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328319
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpi2fzas2y.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi2fzas2y.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328307
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  } else {\n\
    \    let smallest = evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n  }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328319
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(num\
    \ => num % 2 === 0);\n  let smallestEven = evens.sort((a, b) => a - b)[0];\n \
    \ let index = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpxke9bytc.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxke9bytc.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328320
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328310
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallest\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  return [smallest, arr.indexOf(smallest)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  let evenArr = arr.filter((item) => item % 2 === 0);\n\
    \  if (evenArr.length === 0) {\n    return [];\n  }\n  let minEven = Math.min(...evenArr);\n\
    \  let minEvenIndex = arr.indexOf(minEven);\n  return [minEven, minEvenIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328320
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallest\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  let index = arr.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328320
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = evens.reduce((a, b) => Math.min(a, b));\n  let\
    \ index = arr.indexOf(min);\n  return [min, index];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp9kmt8717.js:28\n    var min = evens.reduce(function (a, b) { return\
    \ Math.min(a, b); });\n                    ^\n\nTypeError: Reduce of empty array\
    \ with no initial value\n    at Array.reduce (<anonymous>)\n    at pluck (/tmp/tmp9kmt8717.js:28:21)\n\
    \    at test (/tmp/tmp9kmt8717.js:37:22)\n    at Object.<anonymous> (/tmp/tmp9kmt8717.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328321
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let smallestEven = Infinity;\n\
    \  let smallestEvenIndex = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n\
    \    if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n\
    \      smallestEvenIndex = i;\n    }\n  }\n  if (smallestEven === Infinity) {\n\
    \    return [];\n  }\n  return [smallestEven, smallestEvenIndex];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328321
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328319
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  let evens = arr.filter((x) => x % 2 === 0);\n  if\
    \ (evens.length === 0) {\n    return [];\n  }\n  let smallestEven = evens.reduce((a,\
    \ b) => Math.min(a, b));\n  let index = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328322
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let smallest = evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n \
    \ assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328318
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let smallest =\
    \ evens.reduce((acc, curr) => acc < curr ? acc : curr);\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n \
    \ assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328322
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    []

    [ 0, 1 ]

    '
  timestamp: 1660328322
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  if (evens.length === 0)\
    \ {\n    return [];\n  }\n  return [min, arr.indexOf(min)];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328319
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = Math.min(...evens);\n  let index = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328313
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  return [min, arr.indexOf(min)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328310
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  let evens = arr.filter((num) => num % 2 === 0);\n\
    \  if (evens.length === 0) {\n    return [];\n  }\n  let min = Math.min(...evens);\n\
    \  return [min, arr.indexOf(min)];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328323
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  let index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328316
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = Math.min(...evens);\n  return [smallestEven, arr.indexOf(smallestEven)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328323
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let minEven = Math.min(...evens);\n    let index = arr.indexOf(minEven);\n\
    \    return [minEven, index];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n \
    \ assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp1lciveqg.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1lciveqg.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328323
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = Math.min(...evens);\n  let index = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328313
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallest\
    \ = Math.min(...evens);\n  let index = arr.indexOf(smallest);\n  return [smallest,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328324
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evenArr = arr.filter(num\
    \ => num % 2 === 0);\n  let minEven = Math.min(...evenArr);\n  let minEvenIndex\
    \ = arr.indexOf(minEven);\n  return [minEven, minEvenIndex];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp76ntmpwl.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmp76ntmpwl.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328324
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evenArr = [];\n \
    \ let evenIndex = [];\n  let evenValue = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0) {\n      evenArr.push(arr[i]);\n      evenIndex.push(i);\n\
    \      evenValue.push(arr[i]);\n    }\n  }\n  if (evenArr.length === 0) {\n  \
    \  return [];\n  } else {\n    let min = Math.min(...evenValue);\n    let minIndex\
    \ = evenValue.indexOf(min);\n    return [min, evenIndex[minIndex]];\n  }\n}\n\n\
    console.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\n\
    console.log(pluck([5, 0, 3, 0, 4, 2]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    []

    [ 0, 1 ]

    '
  timestamp: 1660328325
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  const evens = arr.filter(num\
    \ => num % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  const\
    \ smallestEven = Math.min(...evens);\n  const index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328325
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evenArr = arr.filter(x\
    \ => x % 2 === 0);\n  let minEven = Math.min(...evenArr);\n  if (evenArr.length\
    \ === 0) {\n    return [];\n  } else {\n    return [minEven, arr.indexOf(minEven)];\n\
    \  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328325
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallest\
    \ = Math.min(...evens);\n  let index = arr.indexOf(smallest);\n  return [smallest,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328324
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  let index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328316
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  let index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328316
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evenArr = arr.filter(x\
    \ => x % 2 === 0);\n  let evenArrIndex = arr.map((x, i) => x % 2 === 0 ? i : null).filter(x\
    \ => x !== null);\n  let minEven = Math.min(...evenArr);\n  let minEvenIndex =\
    \ evenArrIndex[evenArr.indexOf(minEven)];\n  return evenArr.length === 0 ? []\
    \ : [minEven, minEvenIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328326
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  return [smallestEven, arr.indexOf(smallestEven)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328307
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(num\
    \ => num % 2 === 0);\n  let evensIndex = arr.findIndex(num => num % 2 === 0);\n\
    \  if (evens.length === 0) {\n    return [];\n  } else {\n    return [Math.min(...evens),\
    \ evensIndex];\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmp8o3434uk.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8o3434uk.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328326
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328319
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(num\
    \ => num % 2 === 0);\n  let smallestEven = evens.sort((a, b) => a - b)[0];\n \
    \ let index = arr.indexOf(smallestEven);\n  return smallestEven ? [smallestEven,\
    \ index] : [];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpp0f4q0_c.js:38:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpp0f4q0_c.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328327
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallest\
    \ = Math.min(...evens);\n  return [smallest, arr.indexOf(smallest)];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328307
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(n\
    \ => n % 2 === 0);\n  let min = evens.reduce((a, b) => Math.min(a, b));\n  return\
    \ evens.length > 0 ? [min, arr.indexOf(min)] : [];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpg0duat29.js:28\n    var min = evens.reduce(function (a, b) { return\
    \ Math.min(a, b); });\n                    ^\n\nTypeError: Reduce of empty array\
    \ with no initial value\n    at Array.reduce (<anonymous>)\n    at pluck (/tmp/tmpg0duat29.js:28:21)\n\
    \    at test (/tmp/tmpg0duat29.js:36:22)\n    at Object.<anonymous> (/tmp/tmpg0duat29.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328327
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328310
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evenArr = arr.filter(x\
    \ => x % 2 === 0);\n  let minEven = Math.min(...evenArr);\n  let index = arr.indexOf(minEven);\n\
    \  return evenArr.length === 0 ? [] : [minEven, index];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328327
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let smallest = evens.reduce((a, b) => Math.min(a, b));\n    return [smallest,\
    \ arr.indexOf(smallest)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328328
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return evens.length === 0 ? [] : [min, index];\n}\n\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    []

    [ 0, 1 ]

    '
  timestamp: 1660328328
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  if (evens.length === 0) {\n    return [];\n  } else {\n    return [min, index];\n\
    \  }\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\n\
    console.log(pluck([5, 0, 3, 0, 4, 2]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    []

    [ 0, 1 ]

    '
  timestamp: 1660328329
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let smallestEven = evens.reduce((a, b) => Math.min(a, b));\n    let index\
    \ = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328329
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return evens.length > 0 ? [min, index] : [];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328330
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  const evenArr = arr.filter(item\
    \ => item % 2 === 0);\n  if (evenArr.length === 0) {\n    return [];\n  }\n  const\
    \ minEven = Math.min(...evenArr);\n  const index = arr.indexOf(minEven);\n  return\
    \ [minEven, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328330
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let smallestEven = Infinity;\n\
    \  let smallestEvenIndex = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n\
    \    if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n      smallestEven = arr[i];\n\
    \      smallestEvenIndex = i;\n    }\n  }\n  if (smallestEven === Infinity) {\n\
    \    return [];\n  }\n  return [smallestEven, smallestEvenIndex];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328321
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evenArr = arr.filter(x\
    \ => x % 2 === 0);\n    if (evenArr.length === 0) {\n        return [];\n    }\n\
    \    let minEven = Math.min(...evenArr);\n    let index = arr.indexOf(minEven);\n\
    \    return [minEven, index];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1,\
    \ 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    []

    [ 0, 1 ]

    '
  timestamp: 1660328330
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  let evens = arr.filter((num) => num % 2 === 0);\n\
    \  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven = Math.min(...evens);\n\
    \  let index = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328331
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallest\
    \ = Math.min(...evens);\n  let index = arr.indexOf(smallest);\n  return [smallest,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328324
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(e\
    \ => e % 2 === 0);\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return evens.length > 0 ? [min, index] : [];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328331
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  let index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328316
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallest\
    \ = Math.min(...evens);\n  let index = arr.indexOf(smallest);\n  return [smallest,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328324
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...evens);\n    if (min === Infinity)\
    \ {\n        return [];\n    }\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328331
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evenArr = arr.filter(x\
    \ => x % 2 === 0);\n    if (evenArr.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evenArr);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2,\
    \ 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    []

    [ 0, 1 ]

    '
  timestamp: 1660328332
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallest\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  return [smallest, arr.indexOf(smallest)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let smallestEven: number\
    \ = Infinity;\n  let smallestEvenIndex: number = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n\
    \      smallestEven = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n  if\
    \ (smallestEven === Infinity) {\n    return [];\n  }\n  return [smallestEven,\
    \ smallestEvenIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328332
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  return [min, arr.indexOf(min)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328310
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  let evens = arr.filter((num) => num % 2 === 0);\n\
    \  if (evens.length === 0) {\n    return [];\n  }\n  let smallest = evens.reduce((acc,\
    \ curr) => (acc < curr ? acc : curr));\n  let index = arr.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328333
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  let evens = arr.filter((num) => num % 2 === 0);\n\
    \  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven = Math.min(...evens);\n\
    \  let index = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328331
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallest\
    \ = Math.min(...evens);\n  let index = arr.indexOf(smallest);\n  return [smallest,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328324
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  return [min, arr.indexOf(min)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328310
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallest\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  let index = arr.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328320
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzyt7cwjn.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzyt7cwjn.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328308
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return evens.length === 0 ? [] : [min, index];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328315
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(num\
    \ => num % 2 === 0);\n  let evensIndex = arr.map((num, i) => num % 2 === 0 ? i\
    \ : null).filter(num => num !== null);\n  let smallestEven = evens.sort((a, b)\
    \ => a - b)[0];\n  let smallestEvenIndex = evensIndex.sort((a, b) => a - b)[0];\n\
    \  return evens.length > 0 ? [smallestEven, smallestEvenIndex] : [];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  1\n]\n    at test (/tmp/tmpyp1rmtdt.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyp1rmtdt.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328333
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  const evens = arr.filter(x\
    \ => x % 2 === 0);\n  const minEven = Math.min(...evens);\n  const index = arr.indexOf(minEven);\n\
    \  return evens.length ? [minEven, index] : [];\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328333
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = Math.min(...evens);\n  return [smallestEven, arr.indexOf(smallestEven)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328323
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let min = Infinity;\n\
    \  let minIndex = Infinity;\n  let minArr = [];\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n \
    \     minIndex = i;\n    }\n  }\n  if (min !== Infinity) {\n    minArr.push(min);\n\
    \    minArr.push(minIndex);\n  }\n  return minArr;\n}\n\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    []

    [ 0, 1 ]

    '
  timestamp: 1660328334
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328310
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  const evens = arr.filter(x\
    \ => x % 2 === 0);\n  const min = Math.min(...evens);\n  return evens.length ===\
    \ 0 ? [] : [min, arr.indexOf(min)];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328334
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallest\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  return [smallest, arr.indexOf(smallest)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  if (evens.length === 0) {\n    return [];\n  } else {\n    return [min, index];\n\
    \  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328335
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = [];\n  let\
    \ evensIndex = [];\n  let result = [];\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] % 2 === 0) {\n      evens.push(arr[i]);\n      evensIndex.push(i);\n\
    \    }\n  }\n  if (evens.length === 0) {\n    return [];\n  } else {\n    let\
    \ min = Math.min(...evens);\n    let index = evens.indexOf(min);\n    result.push(min);\n\
    \    result.push(evensIndex[index]);\n    return result;\n  }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328335
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallest\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  let index = arr.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328320
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  if (min === Infinity) {\n\
    \    return [];\n  }\n  return [min, arr.indexOf(min)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328308
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(e\
    \ => e % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallest\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  return [smallest, arr.indexOf(smallest)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328335
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  if (min === Infinity) {\n\
    \    return [];\n  }\n  return [min, arr.indexOf(min)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328308
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  const evenArr = arr.filter((item) => item % 2 ===\
    \ 0);\n  if (evenArr.length === 0) {\n    return [];\n  }\n  const minEven = Math.min(...evenArr);\n\
    \  return [minEven, arr.indexOf(minEven)];\n}\n\nconsole.log(pluck([4, 2, 3]));\n\
    console.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    []

    [ 0, 1 ]

    '
  timestamp: 1660328336
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  let evens = arr.filter((n) => n % 2 === 0);\n  if\
    \ (evens.length === 0) {\n    return [];\n  }\n  let min = Math.min(...evens);\n\
    \  let index = arr.indexOf(min);\n  return [min, index];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328336
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...evens);\n    if (min === Infinity)\
    \ {\n        return [];\n    }\n    return [min, arr.indexOf(min)];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328336
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  return [smallestEven, arr.indexOf(smallestEven)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328307
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzyt7cwjn.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzyt7cwjn.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328308
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let smallestEven = evens.length > 0 ? Math.min(...evens)\
    \ : null;\n  return smallestEven ? [smallestEven, arr.indexOf(smallestEven)] :\
    \ [];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmppps583xb.js:37:12)\n   \
    \ at Object.<anonymous> (/tmp/tmppps583xb.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328337
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let min = Infinity;\n\
    \  let minIndex = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      minIndex = i;\n   \
    \ }\n  }\n  return minIndex === -1 ? [] : [min, minIndex];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328337
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 2
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = [];\n  let\
    \ evensIndex = [];\n  let evensMin = [];\n  let evensMinIndex = [];\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evens.push(arr[i]);\n\
    \      evensIndex.push(i);\n    }\n  }\n  if (evens.length === 0) {\n    return\
    \ [];\n  } else {\n    evensMin = Math.min(...evens);\n    for (let i = 0; i <\
    \ evens.length; i++) {\n      if (evens[i] === evensMin) {\n        evensMinIndex.push(evensIndex[i]);\n\
    \      }\n    }\n    return [evensMin, Math.min(...evensMinIndex)];\n  }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpbwcpvrjr.ts(40,5): error TS2322: Type ''number'' is
    not assignable to type ''any[]''.

    '
  timestamp: 1660328338
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evenArr = arr.filter(e\
    \ => e % 2 === 0);\n    if (evenArr.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evenArr);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328338
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evenArr = arr.filter(item\
    \ => item % 2 === 0);\n  let minEven = Math.min(...evenArr);\n  let index = arr.indexOf(minEven);\n\
    \  return [minEven, index];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1,\
    \ 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmprn1bmudv.js:41:12)\n\
    \    at Object.<anonymous> (/tmp/tmprn1bmudv.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    [ Infinity, -1 ]

    [ 0, 1 ]

    '
  timestamp: 1660328339
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  if (min === Infinity) {\n\
    \    return [];\n  }\n  return [min, arr.indexOf(min)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328308
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  let evens = arr.filter((num) => num % 2 === 0);\n\
    \  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven = evens.reduce((acc,\
    \ curr) => {\n    return acc < curr ? acc : curr;\n  });\n  let smallestEvenIndex\
    \ = arr.indexOf(smallestEven);\n  return [smallestEven, smallestEvenIndex];\n\
    }\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\n\
    console.log(pluck([5, 0, 3, 0, 4, 2]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    []

    [ 0, 1 ]

    '
  timestamp: 1660328339
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let smallestEven = evens.reduce((a, b) => Math.min(a, b));\n    let index\
    \ = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328329
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = Math.min(...evens);\n  let index = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328313
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let minEven = Math.min(...evens);\n    if (minEven ===\
    \ Infinity) {\n        return [];\n    }\n    let minEvenIndex = arr.indexOf(minEven);\n\
    \    return [minEven, minEvenIndex];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328339
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  return [min, arr.indexOf(min)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328310
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evenArr = arr.filter(x\
    \ => x % 2 === 0);\n  let minEven = Math.min(...evenArr);\n  let index = arr.indexOf(minEven);\n\
    \  return [minEven, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp2g4q143s.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2g4q143s.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328340
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  if (min === Infinity) {\n\
    \    return [];\n  }\n  return [min, arr.indexOf(min)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328308
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evenArr = arr.filter(x\
    \ => x % 2 === 0);\n  let minEven = Math.min(...evenArr);\n  let minEvenIndex\
    \ = arr.indexOf(minEven);\n  return minEvenIndex === -1 ? [] : [minEven, minEvenIndex];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328340
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzyt7cwjn.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzyt7cwjn.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328308
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  const evens = arr.filter((x) => x % 2 === 0);\n  if\
    \ (evens.length === 0) {\n    return [];\n  }\n  const min = Math.min(...evens);\n\
    \  const index = arr.indexOf(min);\n  return [min, index];\n}\n\nconsole.log(pluck([4,\
    \ 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5,\
    \ 0, 3, 0, 4, 2]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    []

    [ 0, 1 ]

    '
  timestamp: 1660328341
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  const evens = arr.filter(x\
    \ => x % 2 === 0);\n  const minEven = Math.min(...evens);\n  return [minEven,\
    \ arr.indexOf(minEven)];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmptfy32f9l.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmptfy32f9l.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328341
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = Math.min(...evens);\n  let index = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328313
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(n\
    \ => n % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let smallest = evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n \
    \ assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328341
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = evens.reduce((a, b) => (a < b ? a : b));\n  let index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328342
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  return [min, arr.indexOf(min)];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpd8tf6364.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpd8tf6364.js:43:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328342
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(e\
    \ => e % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  return [min, arr.indexOf(min)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328342
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  let evens = arr.filter((x) => x % 2 === 0);\n  if\
    \ (evens.length === 0) {\n    return [];\n  }\n  let min = Math.min(...evens);\n\
    \  return [min, arr.indexOf(min)];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328343
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  let index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1,\
    \ 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    []

    [ 0, 1 ]

    '
  timestamp: 1660328343
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328310
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallestEven\
    \ = evens.reduce((a, b) => Math.min(a, b));\n  let index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328316
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  let evenArr = arr.filter((item) => item % 2 === 0);\n\
    \  if (evenArr.length === 0) {\n    return [];\n  }\n  let smallestEven = Math.min(...evenArr);\n\
    \  let index = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328344
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let smallest\
    \ = Math.min(...evens);\n  return [smallest, arr.indexOf(smallest)];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328307
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let result = [];\n  let\
    \ even = [];\n  let evenIndex = [];\n  for (let i = 0; i < arr.length; i++) {\n\
    \    if (arr[i] % 2 === 0) {\n      even.push(arr[i]);\n      evenIndex.push(i);\n\
    \    }\n  }\n  if (even.length === 0) {\n    return [];\n  } else {\n    let min\
    \ = Math.min(...even);\n    let minIndex = evenIndex[even.indexOf(min)];\n   \
    \ result.push(min, minIndex);\n    return result;\n  }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328344
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  if (min === Infinity) {\n\
    \    return [];\n  }\n  return [min, arr.indexOf(min)];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328308
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  if (evens.length === 0)\
    \ {\n    return [];\n  }\n  return [min, arr.indexOf(min)];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328319
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  const evens = arr.filter(num\
    \ => num % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  const\
    \ smallestEven = Math.min(...evens);\n  const index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328325
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  if (min === Infinity) {\n\
    \    return [];\n  }\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328307
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(item\
    \ => item % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let\
    \ smallestEven = evens.reduce((a, b) => (a < b ? a : b));\n  let index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1,\
    \ 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 1 ]

    [ 2, 1 ]

    []

    [ 0, 1 ]

    '
  timestamp: 1660328344
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let smallestEven: number\
    \ = Infinity;\n  let smallestEvenIndex: number = Infinity;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < smallestEven) {\n\
    \      smallestEven = arr[i];\n      smallestEvenIndex = i;\n    }\n  }\n  if\
    \ (smallestEven === Infinity) {\n    return [];\n  }\n  return [smallestEven,\
    \ smallestEvenIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328332
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpzyt7cwjn.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzyt7cwjn.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328308
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328310
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evenArr = arr.filter(item\
    \ => item % 2 === 0);\n  let minEven = Math.min(...evenArr);\n  let index = arr.indexOf(minEven);\n\
    \  return [minEven, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpz8_hv4s2.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpz8_hv4s2.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328345
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let smallestEven = evens.sort((a, b) => a - b)[0];\n  let\
    \ index = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp3qnnchv3.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3qnnchv3.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328345
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let smallestEven = evens.sort((a, b) => a - b)[0];\n  let\
    \ index = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n\
    \  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp3qnnchv3.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3qnnchv3.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328345
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328310
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  let evens = arr.filter((x) => x % 2 === 0);\n  if\
    \ (evens.length === 0) {\n    return [];\n  }\n  let smallestEven = Math.min(...evens);\n\
    \  let index = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328346
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328311
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(e\
    \ => e % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return [min, index];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328314
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  if (arr.length === 0)\
    \ {\n    return [];\n  }\n  let evens = arr.filter((el) => el % 2 === 0);\n  if\
    \ (evens.length === 0) {\n    return [];\n  }\n  let min = Math.min(...evens);\n\
    \  return [min, arr.indexOf(min)];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328346
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  const evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  const\
    \ minEven = Math.min(...evens);\n  const index = arr.indexOf(minEven);\n  return\
    \ [minEven, index];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328347
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
    \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328319
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evenArr = arr.filter(x\
    \ => x % 2 === 0);\n  if (evenArr.length === 0) {\n    return [];\n  }\n  let\
    \ minEven = Math.min(...evenArr);\n  let minEvenIndex = arr.indexOf(minEven);\n\
    \  return [minEven, minEvenIndex];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328312
- exit_code: 0
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) {\n    return [];\n  }\n  let minEven\
    \ = Math.min(...evens);\n  let minEvenIndex = arr.indexOf(minEven);\n  return\
    \ [minEven, minEvenIndex];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4,\
    \ 1]);\n  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
    \ 9, 7, 1]),[]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660328347
- exit_code: 1
  program: "//\"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n// your task is to pluck one of the nodes and return it.\n//\
    \ The plucked node should be the node with the smallest even value.\n// If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n// The plucked node should be returned in an array, [ smalest_value,\
    \ its index ],\n// If there are no even values or the given array is empty, return\
    \ [].\n// Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n// Example 2:\n// >>>\
    \ pluck([1, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example\
    \ 4:\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n// so we will choose the first zero, which\
    \ has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n\
    // * 0 <= node.value\nfunction pluck(arr: any): any {\n  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let smallestEven = Math.min(...evens);\n  let index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = pluck;\n\
    \  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
    \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
    \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
    \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity,\n\
    \  -1\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpbznen5ea.js:37:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbznen5ea.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity,\
    \ -1 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660328347
