language: ts
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let parens = paren_string.split(\" \");\n    let max_nesting = [];\n    for\
    \ (let i = 0; i < parens.length; i++) {\n        let paren = parens[i];\n    \
    \    let max = 0;\n        let current = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                current++;\n\
    \                if (current > max) {\n                    max = current;\n  \
    \              }\n            } else if (paren[j] === \")\") {\n             \
    \   current--;\n            }\n        }\n        max_nesting.push(max);\n   \
    \ }\n    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324237
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let max_nested_parens =\
    \ [];\n    for (let i = 0; i < paren_array.length; i++) {\n        let paren_count\
    \ = 0;\n        let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \            } else if (paren_array[i][j] === \")\") {\n                paren_count--;\n\
    \            }\n            if (paren_count > max_paren_count) {\n           \
    \     max_paren_count = paren_count;\n            }\n        }\n        max_nested_parens.push(max_paren_count);\n\
    \    }\n    return max_nested_parens;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324237
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i: number = 0; i < paren_array.length; i++) {\n        let paren_group:\
    \ any = paren_array[i];\n        let paren_count: number = 0;\n        let max_paren_count:\
    \ number = 0;\n        for (let j: number = 0; j < paren_group.length; j++) {\n\
    \            if (paren_group[j] === \"(\") {\n                paren_count += 1;\n\
    \            } else if (paren_group[j] === \")\") {\n                paren_count\
    \ -= 1;\n            }\n            if (paren_count > max_paren_count) {\n   \
    \             max_paren_count = paren_count;\n            }\n        }\n     \
    \   result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324237
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_groups.length; i++) {\n        let count = 0;\n      \
    \  let max = 0;\n        for (let j = 0; j < paren_groups[i].length; j++) {\n\
    \            if (paren_groups[i][j] === \"(\") {\n                count++;\n \
    \           } else if (paren_groups[i][j] === \")\") {\n                count--;\n\
    \            }\n            if (count > max) {\n                max = count;\n\
    \            }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324237
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let paren of paren_list) {\n        let max_depth = 0;\n        let depth =\
    \ 0;\n        for (let c of paren) {\n            if (c === \"(\") {\n       \
    \         depth += 1;\n                max_depth = Math.max(max_depth, depth);\n\
    \            } else if (c === \")\") {\n                depth -= 1;\n        \
    \    }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \ let paren_array = paren_string.split(\" \");\n  let result = [];\n  for (let\
    \ i = 0; i < paren_array.length; i++) {\n    let paren = paren_array[i];\n   \
    \ let max_depth = 0;\n    let current_depth = 0;\n    for (let j = 0; j < paren.length;\
    \ j++) {\n      if (paren[j] === \"(\") {\n        current_depth++;\n        if\
    \ (current_depth > max_depth) {\n          max_depth = current_depth;\n      \
    \  }\n      } else if (paren[j] === \")\") {\n        current_depth--;\n     \
    \ }\n    }\n    result.push(max_depth);\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i = 0; i < paren_array.length; i++) {\n        let paren_count:\
    \ number = 0;\n        let max_paren_count: number = 0;\n        for (let j =\
    \ 0; j < paren_array[i].length; j++) {\n            if (paren_array[i][j] ===\
    \ \"(\") {\n                paren_count++;\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n            if\
    \ (paren_count > max_paren_count) {\n                max_paren_count = paren_count;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_depth = 0;\n  \
    \  let max_depth_index = 0;\n    let paren_depth = 0;\n    let paren_depth_array\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        for (let\
    \ j = 0; j < paren_groups[i].length; j++) {\n            if (paren_groups[i][j]\
    \ === \"(\") {\n                paren_depth++;\n            } else if (paren_groups[i][j]\
    \ === \")\") {\n                paren_depth--;\n            }\n        }\n   \
    \     paren_depth_array.push(paren_depth);\n        paren_depth = 0;\n    }\n\
    \    return paren_depth_array;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmphxh11umx.js:29:12)\n    at Object.<anonymous> (/tmp/tmphxh11umx.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660324240
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_arr = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_arr.length; i++) {\n        let paren_count = 0;\n   \
    \     let max_paren_count = 0;\n        for (let j = 0; j < paren_arr[i].length;\
    \ j++) {\n            if (paren_arr[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_arr[i][j] ===\
    \ \")\") {\n                paren_count--;\n            }\n        }\n       \
    \ result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324240
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let max_depth = 0;\n        let current_depth = 0;\n        for (let\
    \ j = 0; j < paren.length; j++) {\n            if (paren[j] === \"(\") {\n   \
    \             current_depth++;\n                if (current_depth > max_depth)\
    \ {\n                    max_depth = current_depth;\n                }\n     \
    \       } else if (paren[j] === \")\") {\n                current_depth--;\n \
    \           }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324240
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_depth = 0;\n  \
    \  let max_depth_index = 0;\n    let depth = 0;\n    let depth_index = 0;\n  \
    \  let result = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n   \
    \     let paren_group = paren_groups[i];\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            if (paren_group[j] === \"(\") {\n                depth++;\n\
    \                if (depth > max_depth) {\n                    max_depth = depth;\n\
    \                    max_depth_index = depth_index;\n                }\n     \
    \       } else if (paren_group[j] === \")\") {\n                depth--;\n   \
    \         }\n        }\n        result.push(max_depth);\n        depth = 0;\n\
    \        max_depth = 0;\n        depth_index++;\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324240
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i: number = 0; i < paren_array.length; i++) {\n        let paren_count:\
    \ number = 0;\n        let max_paren_count: number = 0;\n        for (let j: number\
    \ = 0; j < paren_array[i].length; j++) {\n            if (paren_array[i][j] ===\
    \ \"(\") {\n                paren_count++;\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n            if\
    \ (paren_count > max_paren_count) {\n                max_paren_count = paren_count;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324242
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_group = paren_array[i];\n\
    \        let paren_count = 0;\n        let max_paren_count = 0;\n        for (let\
    \ j = 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"\
    (\") {\n                paren_count++;\n                if (paren_count > max_paren_count)\
    \ {\n                    max_paren_count = paren_count;\n                }\n \
    \           } else if (paren_group[j] === \")\") {\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324242
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result = [];\n    let paren_array = paren_string.split(\" \");\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let count = 0;\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                count++;\n  \
    \              if (count > max) {\n                    max = count;\n        \
    \        }\n            } else if (paren[j] === \")\") {\n                count--;\n\
    \            }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324242
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i = 0; i < paren_array.length; i++) {\n        let current_paren_string:\
    \ any = paren_array[i];\n        let current_paren_array: any = current_paren_string.split(\"\
    \");\n        let current_paren_array_length: any = current_paren_array.length;\n\
    \        let current_paren_array_length_half: any = current_paren_array_length\
    \ / 2;\n        let current_paren_array_length_half_floor: any = Math.floor(current_paren_array_length_half);\n\
    \        let current_paren_array_length_half_ceil: any = Math.ceil(current_paren_array_length_half);\n\
    \        let current_paren_array_length_half_diff: any = current_paren_array_length_half_ceil\
    \ - current_paren_array_length_half_floor;\n        let current_paren_array_length_half_diff_half:\
    \ any = current_paren_array_length_half_diff / 2;\n        let current_paren_array_length_half_diff_half_floor:\
    \ any = Math.floor(current_paren_array_length_half_diff_half);\n        let current_paren_array_length_half_diff_half_ceil:\
    \ any = Math.ceil(current_paren_array_length_half_diff_half);\n        let current_paren_array_length_half_diff_half_diff:\
    \ any = current_paren_array_length_half_diff_half_ceil - current_paren_array_length_half_diff_half_floor;\n\
    \        let current_paren_array_length_half_diff_half_diff_half: any = current_paren_array_length_half_diff_half_diff\
    \ / 2;\n        let current_paren_array_length_half_diff_half_diff_half_floor:\
    \ any = Math.floor(current_paren_array_length_half_diff_half_diff_half);\n   \
    \     let current_paren_array_length_half_diff_half_diff_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpkq9056q8.ts(35,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660324241
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \ let paren_array = paren_string.split(\" \");\n  let result = [];\n  for (let\
    \ i = 0; i < paren_array.length; i++) {\n    let paren = paren_array[i];\n   \
    \ let count = 0;\n    let max = 0;\n    for (let j = 0; j < paren.length; j++)\
    \ {\n      if (paren[j] === \"(\") {\n        count++;\n      } else if (paren[j]\
    \ === \")\") {\n        count--;\n      }\n      if (count > max) {\n        max\
    \ = count;\n      }\n    }\n    result.push(max);\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324243
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i = 0; i < paren_array.length; i++) {\n        let paren_group:\
    \ any = paren_array[i];\n        let paren_count: any = 0;\n        let max_paren_count:\
    \ any = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n         \
    \   if (paren_group[j] === \"(\") {\n                paren_count++;\n        \
    \        if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_group[j] ===\
    \ \")\") {\n                paren_count--;\n            }\n        }\n       \
    \ result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324243
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpgxgg7b3a.ts(10,21): error TS2304: Cannot find name ''parse_nested_parens_helper''.

    '
  timestamp: 1660324243
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let stack = [];\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                stack.push(paren[j]);\n\
    \                max = Math.max(max, stack.length);\n            } else {\n  \
    \              stack.pop();\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324243
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let paren_levels = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_level = 0;\n        let max_level = 0;\n\
    \        for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === \"(\") {\n                paren_level++;\n                if (paren_level\
    \ > max_level) {\n                    max_level = paren_level;\n             \
    \   }\n            } else if (paren_group[j] === \")\") {\n                paren_level--;\n\
    \            }\n        }\n        paren_levels.push(max_level);\n    }\n    return\
    \ paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324244
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_nesting = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_count = 0;\n        let nesting_count\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === \"(\") {\n                nesting_count++;\n           \
    \ } else if (paren_group[j] === \")\") {\n                nesting_count--;\n \
    \           }\n            if (nesting_count > max_nesting_count) {\n        \
    \        max_nesting_count = nesting_count;\n            }\n        }\n      \
    \  max_nesting.push(max_nesting_count);\n    }\n    return max_nesting;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324244
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let paren_levels = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_level = 0;\n        let max_paren_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === \"(\") {\n                paren_level += 1;\n          \
    \  } else if (paren_group[j] === \")\") {\n                paren_level -= 1;\n\
    \            }\n            if (paren_level > max_paren_level) {\n           \
    \     max_paren_level = paren_level;\n            }\n        }\n        paren_levels.push(max_paren_level);\n\
    \    }\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324244
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_list.length; i++) {\n        let paren = paren_list[i];\n\
    \        let max_nesting = 0;\n        let current_nesting = 0;\n        for (let\
    \ j = 0; j < paren.length; j++) {\n            if (paren[j] === \"(\") {\n   \
    \             current_nesting++;\n                if (current_nesting > max_nesting)\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           } else if (paren[j] === \")\") {\n                current_nesting--;\n\
    \            }\n        }\n        result.push(max_nesting);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324245
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_list.length; i++) {\n        let paren = paren_list[i];\n\
    \        let count = 0;\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                count++;\n  \
    \              if (count > max) {\n                    max = count;\n        \
    \        }\n            } else if (paren[j] === \")\") {\n                count--;\n\
    \            }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324246
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result = [];\n    let paren_array = paren_string.split(\" \");\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324246
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let paren_levels = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_level = 0;\n        let max_level = 0;\n\
    \        for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === \"(\") {\n                paren_level++;\n                if (paren_level\
    \ > max_level) {\n                    max_level = paren_level;\n             \
    \   }\n            } else if (paren_group[j] === \")\") {\n                paren_level--;\n\
    \            }\n        }\n        paren_levels.push(max_level);\n    }\n    return\
    \ paren_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324244
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_list.length; i++) {\n        result.push(get_max_nested_parens(paren_list[i]));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpkd9adkgd.ts(10,21): error TS2304: Cannot find name ''get_max_nested_parens''.

    '
  timestamp: 1660324246
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i = 0; i < paren_array.length; i++) {\n        let paren_group:\
    \ any = paren_array[i];\n        let paren_stack: any = [];\n        let max_nesting:\
    \ any = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n         \
    \   let paren: any = paren_group[j];\n            if (paren === \"(\") {\n   \
    \             paren_stack.push(paren);\n                max_nesting = Math.max(max_nesting,\
    \ paren_stack.length);\n            } else if (paren === \")\") {\n          \
    \      paren_stack.pop();\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324246
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result = [];\n    let paren_array = paren_string.split(\" \");\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let count = 0;\n       \
    \ let max = 0;\n        for (let j = 0; j < paren_array[i].length; j++) {\n  \
    \          if (paren_array[i][j] === \"(\") {\n                count++;\n    \
    \        } else if (paren_array[i][j] === \")\") {\n                count--;\n\
    \            }\n            if (count > max) {\n                max = count;\n\
    \            }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324247
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result = [];\n    let paren_array = paren_string.split(\" \");\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_group = paren_array[i];\n\
    \        let paren_count = 0;\n        let max_paren_count = 0;\n        for (let\
    \ j = 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"\
    (\") {\n                paren_count++;\n                if (paren_count > max_paren_count)\
    \ {\n                    max_paren_count = paren_count;\n                }\n \
    \           } else if (paren_group[j] === \")\") {\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324247
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i = 0; i < paren_array.length; i++) {\n        let paren_group:\
    \ any = paren_array[i];\n        let paren_stack: any = [];\n        let max_depth:\
    \ any = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n         \
    \   let paren: any = paren_group[j];\n            if (paren === \"(\") {\n   \
    \             paren_stack.push(paren);\n                max_depth = Math.max(max_depth,\
    \ paren_stack.length);\n            } else if (paren === \")\") {\n          \
    \      paren_stack.pop();\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324247
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i = 0; i < paren_array.length; i++) {\n        let paren_group:\
    \ any = paren_array[i];\n        let paren_stack: any = [];\n        let max_depth:\
    \ any = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n         \
    \   let paren: any = paren_group[j];\n            if (paren === \"(\") {\n   \
    \             paren_stack.push(paren);\n                max_depth = Math.max(max_depth,\
    \ paren_stack.length);\n            } else if (paren === \")\") {\n          \
    \      paren_stack.pop();\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324247
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let max_nesting_level\
    \ = 0;\n        let current_nesting_level = 0;\n        for (let j = 0; j < paren_groups[i].length;\
    \ j++) {\n            if (paren_groups[i][j] === \"(\") {\n                current_nesting_level++;\n\
    \            } else if (paren_groups[i][j] === \")\") {\n                current_nesting_level--;\n\
    \            }\n            if (current_nesting_level > max_nesting_level) {\n\
    \                max_nesting_level = current_nesting_level;\n            }\n \
    \       }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324248
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let parens = paren_string.split(\" \");\n    let result = [];\n    for (let\
    \ i = 0; i < parens.length; i++) {\n        let paren = parens[i];\n        let\
    \ stack = [];\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                stack.push(paren[j]);\n\
    \                max = Math.max(max, stack.length);\n            } else {\n  \
    \              stack.pop();\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324249
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   const paren_groups = paren_string.split(\" \");\n    const result = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        result.push(parse_nested_parens_helper(paren_groups[i]));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpe1kiy_ed.ts(10,21): error TS2304: Cannot find name ''parse_nested_parens_helper''.

    '
  timestamp: 1660324249
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let paren of paren_list) {\n        let max_level = 0;\n        let level =\
    \ 0;\n        for (let i = 0; i < paren.length; i++) {\n            if (paren[i]\
    \ === \"(\") {\n                level++;\n                if (level > max_level)\
    \ {\n                    max_level = level;\n                }\n            }\
    \ else if (paren[i] === \")\") {\n                level--;\n            }\n  \
    \      }\n        result.push(max_level);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324249
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i: number = 0; i < paren_array.length; i++) {\n        let current_paren:\
    \ any = paren_array[i];\n        let current_max: number = 0;\n        let current_count:\
    \ number = 0;\n        for (let j: number = 0; j < current_paren.length; j++)\
    \ {\n            if (current_paren[j] === \"(\") {\n                current_count++;\n\
    \                if (current_count > current_max) {\n                    current_max\
    \ = current_count;\n                }\n            } else if (current_paren[j]\
    \ === \")\") {\n                current_count--;\n            }\n        }\n \
    \       result.push(current_max);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324249
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i = 0; i < paren_array.length; i++) {\n        result.push(get_nested_parens(paren_array[i]));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp7q3037ll.ts(10,21): error TS2552: Cannot find name ''get_nested_parens''.
    Did you mean ''parse_nested_parens''?

    '
  timestamp: 1660324250
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_groups: any = paren_string.split(\" \"\
    );\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ any = paren_groups[i];\n        let max_level: any = 0;\n        let level:\
    \ any = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n         \
    \   if (paren_group[j] === \"(\") {\n                level++;\n              \
    \  if (level > max_level) {\n                    max_level = level;\n        \
    \        }\n            } else if (paren_group[j] === \")\") {\n             \
    \   level--;\n            }\n        }\n        result.push(max_level);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324250
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_nesting = 0;\n\
    \    let max_nesting_index = 0;\n    for (let i = 0; i < paren_groups.length;\
    \ i++) {\n        let current_group = paren_groups[i];\n        let current_nesting\
    \ = 0;\n        for (let j = 0; j < current_group.length; j++) {\n           \
    \ if (current_group[j] === \"(\") {\n                current_nesting++;\n    \
    \        }\n            if (current_group[j] === \")\") {\n                current_nesting--;\n\
    \            }\n        }\n        if (current_nesting > max_nesting) {\n    \
    \        max_nesting = current_nesting;\n            max_nesting_index = i;\n\
    \        }\n    }\n    return max_nesting_index;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmps4_th_kc.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmps4_th_kc.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660324250
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let count = 0;\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                count++;\n  \
    \          } else if (paren[j] === \")\") {\n                count--;\n      \
    \      }\n            if (count > max) {\n                max = count;\n     \
    \       }\n        }\n        result.push(max);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324251
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_nesting = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let curr_nesting = 0;\n        let max_curr_nesting\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === \"(\") {\n                curr_nesting++;\n            }\
    \ else if (paren_group[j] === \")\") {\n                curr_nesting--;\n    \
    \        }\n            if (curr_nesting > max_curr_nesting) {\n             \
    \   max_curr_nesting = curr_nesting;\n            }\n        }\n        max_nesting.push(max_curr_nesting);\n\
    \    }\n    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324251
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_group = paren_array[i];\n\
    \        let paren_count = 0;\n        let max_paren_count = 0;\n        for (let\
    \ j = 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"\
    (\") {\n                paren_count++;\n                if (paren_count > max_paren_count)\
    \ {\n                    max_paren_count = paren_count;\n                }\n \
    \           } else if (paren_group[j] === \")\") {\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324242
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i: number = 0; i < paren_array.length; i++) {\n        let paren_group:\
    \ any = paren_array[i];\n        let paren_stack: any = [];\n        let max_depth:\
    \ number = 0;\n        for (let j: number = 0; j < paren_group.length; j++) {\n\
    \            let paren: any = paren_group[j];\n            if (paren === \"(\"\
    ) {\n                paren_stack.push(paren);\n                max_depth = Math.max(max_depth,\
    \ paren_stack.length);\n            } else if (paren === \")\") {\n          \
    \      paren_stack.pop();\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324252
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_nesting = [];\n\
    \    for (let paren_group of paren_groups) {\n        let max_nesting_count =\
    \ 0;\n        let nesting_count = 0;\n        for (let paren of paren_group) {\n\
    \            if (paren === \"(\") {\n                nesting_count++;\n      \
    \      } else if (paren === \")\") {\n                nesting_count--;\n     \
    \       }\n            if (nesting_count > max_nesting_count) {\n            \
    \    max_nesting_count = nesting_count;\n            }\n        }\n        max_nesting.push(max_nesting_count);\n\
    \    }\n    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324252
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i = 0; i < paren_array.length; i++) {\n        let paren_count:\
    \ number = 0;\n        let max_paren_count: number = 0;\n        for (let j =\
    \ 0; j < paren_array[i].length; j++) {\n            if (paren_array[i][j] ===\
    \ \"(\") {\n                paren_count++;\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n            if\
    \ (paren_count > max_paren_count) {\n                max_paren_count = paren_count;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i: number = 0; i < paren_array.length; i++) {\n        let paren_count:\
    \ number = 0;\n        let max_paren_count: number = 0;\n        for (let j: number\
    \ = 0; j < paren_array[i].length; j++) {\n            if (paren_array[i][j] ===\
    \ \"(\") {\n                paren_count++;\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n            if\
    \ (paren_count > max_paren_count) {\n                max_paren_count = paren_count;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324242
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i = 0; i < paren_array.length; i++) {\n        let paren_group:\
    \ any = paren_array[i];\n        let count: any = 0;\n        let max_count: any\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === \"(\") {\n                count++;\n                if (count\
    \ > max_count) {\n                    max_count = count;\n                }\n\
    \            } else if (paren_group[j] === \")\") {\n                count--;\n\
    \            }\n        }\n        result.push(max_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324252
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i = 0; i < paren_array.length; i++) {\n        let paren_count:\
    \ number = 0;\n        let max_paren_count: number = 0;\n        for (let j =\
    \ 0; j < paren_array[i].length; j++) {\n            if (paren_array[i][j] ===\
    \ \"(\") {\n                paren_count++;\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n            if\
    \ (paren_count > max_paren_count) {\n                max_paren_count = paren_count;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result = [];\n    let paren_groups = paren_string.split(\" \");\n    for\
    \ (let i = 0; i < paren_groups.length; i++) {\n        let paren_group = paren_groups[i];\n\
    \        let count = 0;\n        let max = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            if (paren_group[j] === \"(\") {\n                count++;\n\
    \                if (count > max) {\n                    max = count;\n      \
    \          }\n            } else if (paren_group[j] === \")\") {\n           \
    \     count--;\n            }\n        }\n        result.push(max);\n    }\n \
    \   return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324253
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let max_depth = 0;\n        let current_depth = 0;\n        for (let\
    \ j = 0; j < paren.length; j++) {\n            if (paren[j] === \"(\") {\n   \
    \             current_depth++;\n                if (current_depth > max_depth)\
    \ {\n                    max_depth = current_depth;\n                }\n     \
    \       } else if (paren[j] === \")\") {\n                current_depth--;\n \
    \           }\n        }\n        result.push(max_depth);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324240
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let paren of paren_array) {\n        let count = 0;\n        let max = 0;\n\
    \        for (let i = 0; i < paren.length; i++) {\n            if (paren[i] ===\
    \ \"(\") {\n                count++;\n            } else if (paren[i] === \")\"\
    ) {\n                count--;\n            }\n            if (count > max) {\n\
    \                max = count;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324253
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   const paren_groups = paren_string.split(\" \");\n    const paren_levels =\
    \ [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_level = 0;\n        let max_paren_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === \"(\") {\n                paren_level++;\n             \
    \   if (paren_level > max_paren_level) {\n                    max_paren_level\
    \ = paren_level;\n                }\n            } else if (paren_group[j] ===\
    \ \")\") {\n                paren_level--;\n            }\n        }\n       \
    \ paren_levels.push(max_paren_level);\n    }\n    return paren_levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324254
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i = 0; i < paren_array.length; i++) {\n        result.push(parse_parens(paren_array[i]));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmps5czw6ia.ts(10,21): error TS2304: Cannot find name ''parse_parens''.

    '
  timestamp: 1660324253
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let current_nesting_level = 0;\n        let max_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === \"(\") {\n                current_nesting_level += 1;\n\
    \            } else if (paren_group[j] === \")\") {\n                current_nesting_level\
    \ -= 1;\n            }\n            if (current_nesting_level > max_nesting_level)\
    \ {\n                max_nesting_level = current_nesting_level;\n            }\n\
    \        }\n        max_nesting_levels.push(max_nesting_level);\n    }\n    return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324254
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_list.length; i++) {\n        let paren = paren_list[i];\n\
    \        let max_level = 0;\n        let level = 0;\n        for (let j = 0; j\
    \ < paren.length; j++) {\n            if (paren[j] === \"(\") {\n            \
    \    level++;\n                if (level > max_level) {\n                    max_level\
    \ = level;\n                }\n            } else if (paren[j] === \")\") {\n\
    \                level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324255
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \ let result: any = [];\n  let paren_array: any = paren_string.split(\" \");\n\
    \  for (let i = 0; i < paren_array.length; i++) {\n    let paren_count: any =\
    \ 0;\n    let max_paren_count: any = 0;\n    for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n      if (paren_array[i][j] === \"(\") {\n        paren_count++;\n \
    \     } else if (paren_array[i][j] === \")\") {\n        paren_count--;\n    \
    \  }\n      if (paren_count > max_paren_count) {\n        max_paren_count = paren_count;\n\
    \      }\n    }\n    result.push(max_paren_count);\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324255
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let paren_levels = [];\n\
    \    for (let paren_group of paren_groups) {\n        let paren_level = 0;\n \
    \       let max_paren_level = 0;\n        for (let paren of paren_group) {\n \
    \           if (paren === \"(\") {\n                paren_level++;\n         \
    \   } else if (paren === \")\") {\n                paren_level--;\n          \
    \  }\n            if (paren_level > max_paren_level) {\n                max_paren_level\
    \ = paren_level;\n            }\n        }\n        paren_levels.push(max_paren_level);\n\
    \    }\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324255
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \ let paren_groups = paren_string.split(\" \");\n  let max_nesting_levels = [];\n\
    \  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group = paren_groups[i];\n\
    \    let max_nesting_level = 0;\n    let current_nesting_level = 0;\n    for (let\
    \ j = 0; j < paren_group.length; j++) {\n      let paren = paren_group[j];\n \
    \     if (paren === \"(\") {\n        current_nesting_level++;\n      } else if\
    \ (paren === \")\") {\n        current_nesting_level--;\n      }\n      if (current_nesting_level\
    \ > max_nesting_level) {\n        max_nesting_level = current_nesting_level;\n\
    \      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n  }\n  return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324256
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \ let paren_array = paren_string.split(' ');\n  let result = [];\n  for (let i\
    \ = 0; i < paren_array.length; i++) {\n    let paren_count = 0;\n    let max_paren_count\
    \ = 0;\n    for (let j = 0; j < paren_array[i].length; j++) {\n      if (paren_array[i][j]\
    \ === '(') {\n        paren_count++;\n      } else if (paren_array[i][j] === ')')\
    \ {\n        paren_count--;\n      }\n      if (paren_count > max_paren_count)\
    \ {\n        max_paren_count = paren_count;\n      }\n    }\n    result.push(max_paren_count);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324256
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let count = 0;\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                count++;\n  \
    \          } else if (paren[j] === \")\") {\n                count--;\n      \
    \      }\n            if (count > max) {\n                max = count;\n     \
    \       }\n        }\n        result.push(max);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324251
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let parens = paren_string.split(\" \");\n    let result = [];\n    for (let\
    \ i = 0; i < parens.length; i++) {\n        let paren = parens[i];\n        let\
    \ stack = [];\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                stack.push(paren[j]);\n\
    \                max = Math.max(max, stack.length);\n            } else {\n  \
    \              stack.pop();\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324249
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let paren_levels = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_level = 0;\n        let max_paren_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === \"(\") {\n                paren_level++;\n             \
    \   if (paren_level > max_paren_level) {\n                    max_paren_level\
    \ = paren_level;\n                }\n            } else if (paren_group[j] ===\
    \ \")\") {\n                paren_level--;\n            }\n        }\n       \
    \ paren_levels.push(max_paren_level);\n    }\n    return paren_levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324257
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            let\
    \ paren = paren_group[j];\n            if (paren === \"(\") {\n              \
    \  current_nesting_level++;\n            } else if (paren === \")\") {\n     \
    \           current_nesting_level--;\n            }\n            if (current_nesting_level\
    \ > max_nesting_level) {\n                max_nesting_level = current_nesting_level;\n\
    \            }\n        }\n        max_nesting_levels.push(max_nesting_level);\n\
    \    }\n    return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324257
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_nesting = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            let\
    \ paren = paren_group[j];\n            if (paren === \"(\") {\n              \
    \  current_nesting_level += 1;\n            } else if (paren === \")\") {\n  \
    \              current_nesting_level -= 1;\n            }\n            if (current_nesting_level\
    \ > max_nesting_level) {\n                max_nesting_level = current_nesting_level;\n\
    \            }\n        }\n        max_nesting.push(max_nesting_level);\n    }\n\
    \    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324257
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let count = 0;\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                count++;\n  \
    \          } else if (paren[j] === \")\") {\n                count--;\n      \
    \      }\n            if (count > max) {\n                max = count;\n     \
    \       }\n        }\n        result.push(max);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324251
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let count = 0;\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                count++;\n  \
    \          } else if (paren[j] === \")\") {\n                count--;\n      \
    \      }\n            if (count > max) {\n                max = count;\n     \
    \       }\n        }\n        result.push(max);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324251
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let count = 0;\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                count++;\n  \
    \          } else if (paren[j] === \")\") {\n                count--;\n      \
    \      }\n            if (count > max) {\n                max = count;\n     \
    \       }\n        }\n        result.push(max);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324251
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i = 0; i < paren_array.length; i++) {\n        let paren_count:\
    \ number = 0;\n        let max_paren_count: number = 0;\n        for (let j =\
    \ 0; j < paren_array[i].length; j++) {\n            if (paren_array[i][j] ===\
    \ \"(\") {\n                paren_count++;\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n            if\
    \ (paren_count > max_paren_count) {\n                max_paren_count = paren_count;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_list.length; i++) {\n        let paren_group = paren_list[i];\n\
    \        let paren_count = 0;\n        let max_paren_count = 0;\n        for (let\
    \ j = 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"\
    (\") {\n                paren_count++;\n                if (paren_count > max_paren_count)\
    \ {\n                    max_paren_count = paren_count;\n                }\n \
    \           } else if (paren_group[j] === \")\") {\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324258
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result = [];\n    let paren_array = paren_string.split(\" \");\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324246
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_list.length; i++) {\n        result.push(parse_single_parens(paren_list[i]));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp2ricxqzv.ts(10,21): error TS2304: Cannot find name ''parse_single_parens''.

    '
  timestamp: 1660324258
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_groups.length; i++) {\n        let paren_group = paren_groups[i];\n\
    \        let max_level = 0;\n        let current_level = 0;\n        for (let\
    \ j = 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"\
    (\") {\n                current_level++;\n                if (current_level >\
    \ max_level) {\n                    max_level = current_level;\n             \
    \   }\n            } else if (paren_group[j] === \")\") {\n                current_level--;\n\
    \            }\n        }\n        result.push(max_level);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324258
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let count = 0;\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                count++;\n  \
    \          } else if (paren[j] === \")\") {\n                count--;\n      \
    \      }\n            if (count > max) {\n                max = count;\n     \
    \       }\n        }\n        result.push(max);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324251
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_list.length; i++) {\n        let paren = paren_list[i];\n\
    \        let count = 0;\n        let max_count = 0;\n        for (let j = 0; j\
    \ < paren.length; j++) {\n            if (paren[j] === \"(\") {\n            \
    \    count++;\n            } else if (paren[j] === \")\") {\n                count--;\n\
    \            }\n            if (count > max_count) {\n                max_count\
    \ = count;\n            }\n        }\n        result.push(max_count);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324259
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_nesting = [];\n\
    \    for (let paren_group of paren_groups) {\n        let max_nesting_level =\
    \ 0;\n        let current_nesting_level = 0;\n        for (let paren of paren_group)\
    \ {\n            if (paren === \"(\") {\n                current_nesting_level\
    \ += 1;\n            } else if (paren === \")\") {\n                current_nesting_level\
    \ -= 1;\n            }\n            if (current_nesting_level > max_nesting_level)\
    \ {\n                max_nesting_level = current_nesting_level;\n            }\n\
    \        }\n        max_nesting.push(max_nesting_level);\n    }\n    return max_nesting;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324259
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_list.length; i++) {\n        let paren_group = paren_list[i];\n\
    \        let max_nesting = 0;\n        let current_nesting = 0;\n        for (let\
    \ j = 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"\
    (\") {\n                current_nesting++;\n                if (current_nesting\
    \ > max_nesting) {\n                    max_nesting = current_nesting;\n     \
    \           }\n            } else if (paren_group[j] === \")\") {\n          \
    \      current_nesting--;\n            }\n        }\n        result.push(max_nesting);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324259
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_groups.length; i++) {\n        result.push(parse_parens(paren_groups[i]));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp3b89al7k.ts(10,21): error TS2304: Cannot find name ''parse_parens''.

    '
  timestamp: 1660324260
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let max_nesting = 0;\n        let current_nesting = 0;\n        for (let\
    \ j = 0; j < paren.length; j++) {\n            if (paren[j] === \"(\") {\n   \
    \             current_nesting++;\n                if (current_nesting > max_nesting)\
    \ {\n                    max_nesting = current_nesting;\n                }\n \
    \           } else if (paren[j] === \")\") {\n                current_nesting--;\n\
    \            }\n        }\n        result.push(max_nesting);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324260
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let paren_count = [];\n \
    \   for (let i = 0; i < paren_list.length; i++) {\n        let paren_count_temp\
    \ = 0;\n        let paren_temp = paren_list[i];\n        for (let j = 0; j < paren_temp.length;\
    \ j++) {\n            if (paren_temp[j] === \"(\") {\n                paren_count_temp++;\n\
    \            }\n        }\n        paren_count.push(paren_count_temp);\n    }\n\
    \    return paren_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp98s99gbi.js:24:12)\n    at Object.<anonymous> (/tmp/tmp98s99gbi.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1,\
    \ 5 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660324261
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \ let paren_list = paren_string.split(\" \");\n  let result = [];\n  for (let\
    \ i = 0; i < paren_list.length; i++) {\n    let paren_count = 0;\n    let max_paren_count\
    \ = 0;\n    for (let j = 0; j < paren_list[i].length; j++) {\n      if (paren_list[i][j]\
    \ === \"(\") {\n        paren_count++;\n      } else if (paren_list[i][j] ===\
    \ \")\") {\n        paren_count--;\n      }\n      if (paren_count > max_paren_count)\
    \ {\n        max_paren_count = paren_count;\n      }\n    }\n    result.push(max_paren_count);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324261
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_list.length; i++) {\n        let count = 0;\n        let\
    \ max = 0;\n        for (let j = 0; j < paren_list[i].length; j++) {\n       \
    \     if (paren_list[i][j] === \"(\") {\n                count++;\n          \
    \      if (count > max) {\n                    max = count;\n                }\n\
    \            } else if (paren_list[i][j] === \")\") {\n                count--;\n\
    \            }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324261
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_levels = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_level = 0;\n        let current_level =\
    \ 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === \"(\") {\n                current_level += 1;\n            } else if (paren_group[j]\
    \ === \")\") {\n                current_level -= 1;\n            }\n         \
    \   if (current_level > max_level) {\n                max_level = current_level;\n\
    \            }\n        }\n        max_levels.push(max_level);\n    }\n    return\
    \ max_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324262
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_group = paren_array[i];\n\
    \        let count = 0;\n        let max = 0;\n        for (let j = 0; j < paren_group.length;\
    \ j++) {\n            if (paren_group[j] === \"(\") {\n                count++;\n\
    \                if (count > max) {\n                    max = count;\n      \
    \          }\n            } else if (paren_group[j] === \")\") {\n           \
    \     count--;\n            }\n        }\n        result.push(max);\n    }\n \
    \   return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324262
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_depth = 0;\n  \
    \  let max_depth_list = [];\n    for (let i = 0; i < paren_groups.length; i++)\
    \ {\n        let paren_group = paren_groups[i];\n        let depth = 0;\n    \
    \    for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === \"(\") {\n                depth += 1;\n            } else if (paren_group[j]\
    \ === \")\") {\n                depth -= 1;\n            }\n        }\n      \
    \  max_depth_list.push(depth);\n    }\n    return max_depth_list;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp3p6mbr_s.js:28:12)\n    at Object.<anonymous> (/tmp/tmp3p6mbr_s.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660324263
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result: any = [];\n \
    \   for (let i = 0; i < paren_list.length; i++) {\n        result.push(parse_nested_parens_helper(paren_list[i]));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp_nfgue85.ts(10,21): error TS2304: Cannot find name ''parse_nested_parens_helper''.

    '
  timestamp: 1660324263
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            let\
    \ paren = paren_group[j];\n            if (paren === \"(\") {\n              \
    \  current_nesting_level++;\n            } else if (paren === \")\") {\n     \
    \           current_nesting_level--;\n            }\n            if (current_nesting_level\
    \ > max_nesting_level) {\n                max_nesting_level = current_nesting_level;\n\
    \            }\n        }\n        max_nesting_levels.push(max_nesting_level);\n\
    \    }\n    return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324257
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i: number = 0; i < paren_array.length; i++) {\n        let paren_count:\
    \ number = 0;\n        let max_paren_count: number = 0;\n        for (let j: number\
    \ = 0; j < paren_array[i].length; j++) {\n            if (paren_array[i][j] ===\
    \ \"(\") {\n                paren_count++;\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n            if\
    \ (paren_count > max_paren_count) {\n                max_paren_count = paren_count;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324242
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_groups.length; i++) {\n        let max_count = 0;\n  \
    \      let count = 0;\n        for (let j = 0; j < paren_groups[i].length; j++)\
    \ {\n            if (paren_groups[i][j] === \"(\") {\n                count++;\n\
    \            } else if (paren_groups[i][j] === \")\") {\n                count--;\n\
    \            }\n            if (count > max_count) {\n                max_count\
    \ = count;\n            }\n        }\n        result.push(max_count);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324263
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \ let paren_array = paren_string.split(\" \");\n  let result = [];\n  for (let\
    \ i = 0; i < paren_array.length; i++) {\n    let paren = paren_array[i];\n   \
    \ let count = 0;\n    let max = 0;\n    for (let j = 0; j < paren.length; j++)\
    \ {\n      if (paren[j] === \"(\") {\n        count++;\n      } else if (paren[j]\
    \ === \")\") {\n        count--;\n      }\n      if (count > max) {\n        max\
    \ = count;\n      }\n    }\n    result.push(max);\n  }\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324243
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_list.length; i++) {\n        let paren = paren_list[i];\n\
    \        let max_depth = 0;\n        let curr_depth = 0;\n        for (let j =\
    \ 0; j < paren.length; j++) {\n            if (paren[j] === \"(\") {\n       \
    \         curr_depth++;\n                max_depth = Math.max(max_depth, curr_depth);\n\
    \            } else {\n                curr_depth--;\n            }\n        }\n\
    \        result.push(max_depth);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324264
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let max_nesting_list = [];\n\
    \    for (let paren of paren_list) {\n        let max_nesting = 0;\n        let\
    \ current_nesting = 0;\n        for (let i = 0; i < paren.length; i++) {\n   \
    \         if (paren[i] === \"(\") {\n                current_nesting++;\n    \
    \        } else if (paren[i] === \")\") {\n                current_nesting--;\n\
    \            }\n            if (current_nesting > max_nesting) {\n           \
    \     max_nesting = current_nesting;\n            }\n        }\n        max_nesting_list.push(max_nesting);\n\
    \    }\n    return max_nesting_list;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324264
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_nesting = [];\n\
    \    for (let paren_group of paren_groups) {\n        let nesting = 0;\n     \
    \   let max_nesting_in_group = 0;\n        for (let paren of paren_group) {\n\
    \            if (paren === \"(\") {\n                nesting += 1;\n         \
    \   } else if (paren === \")\") {\n                nesting -= 1;\n           \
    \ }\n            if (nesting > max_nesting_in_group) {\n                max_nesting_in_group\
    \ = nesting;\n            }\n        }\n        max_nesting.push(max_nesting_in_group);\n\
    \    }\n    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324264
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \ let parens = paren_string.split(\" \");\n  let result = [];\n  for (let i =\
    \ 0; i < parens.length; i++) {\n    let paren = parens[i];\n    let max = 0;\n\
    \    let count = 0;\n    for (let j = 0; j < paren.length; j++) {\n      if (paren[j]\
    \ === \"(\") {\n        count++;\n        if (count > max) {\n          max =\
    \ count;\n        }\n      } else if (paren[j] === \")\") {\n        count--;\n\
    \      }\n    }\n    result.push(max);\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324265
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let paren_count = [];\n\
    \    for (let i = 0; i < paren_array.length; i++) {\n        let paren_count_temp\
    \ = 0;\n        for (let j = 0; j < paren_array[i].length; j++) {\n          \
    \  if (paren_array[i][j] === \"(\") {\n                paren_count_temp++;\n \
    \           }\n        }\n        paren_count.push(paren_count_temp);\n    }\n\
    \    return paren_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpnex92u3h.js:23:12)\n    at Object.<anonymous> (/tmp/tmpnex92u3h.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1,\
    \ 5 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660324265
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let result: any = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_level = 0;\n        let level = 0;\n   \
    \     for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === \"(\") {\n                level++;\n                if (level > max_level)\
    \ {\n                    max_level = level;\n                }\n            }\
    \ else if (paren_group[j] === \")\") {\n                level--;\n           \
    \ }\n        }\n        result.push(max_level);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324266
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let paren of paren_list) {\n        let count = 0;\n        let max = 0;\n\
    \        for (let i = 0; i < paren.length; i++) {\n            if (paren[i] ===\
    \ \"(\") {\n                count++;\n            } else if (paren[i] === \")\"\
    ) {\n                count--;\n            }\n            if (count > max) {\n\
    \                max = count;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324266
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i = 0; i < paren_array.length; i++) {\n        let count: number\
    \ = 0;\n        let max_count: number = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                count++;\n\
    \            } else if (paren_array[i][j] === \")\") {\n                count--;\n\
    \            }\n            if (count > max_count) {\n                max_count\
    \ = count;\n            }\n        }\n        result.push(max_count);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324266
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_list.length; i++) {\n        let paren = paren_list[i];\n\
    \        let max_level = 0;\n        let current_level = 0;\n        for (let\
    \ j = 0; j < paren.length; j++) {\n            if (paren[j] === \"(\") {\n   \
    \             current_level++;\n                if (current_level > max_level)\
    \ {\n                    max_level = current_level;\n                }\n     \
    \       } else if (paren[j] === \")\") {\n                current_level--;\n \
    \           }\n        }\n        result.push(max_level);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324267
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let paren of paren_list) {\n        let max_level = 0;\n        let level =\
    \ 0;\n        for (let i = 0; i < paren.length; i++) {\n            if (paren[i]\
    \ === \"(\") {\n                level++;\n                if (level > max_level)\
    \ {\n                    max_level = level;\n                }\n            }\
    \ else if (paren[i] === \")\") {\n                level--;\n            }\n  \
    \      }\n        result.push(max_level);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324249
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_groups: any = paren_string.split(\" \"\
    );\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ any = paren_groups[i];\n        let paren_stack: any = [];\n        let max_depth:\
    \ any = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n         \
    \   let paren: any = paren_group[j];\n            if (paren === \"(\") {\n   \
    \             paren_stack.push(paren);\n                max_depth = Math.max(max_depth,\
    \ paren_stack.length);\n            } else if (paren === \")\") {\n          \
    \      paren_stack.pop();\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324267
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_arr = paren_string.split(\" \");\n    let result: any = [];\n  \
    \  for (let i = 0; i < paren_arr.length; i++) {\n        let paren_count = 0;\n\
    \        let max_paren_count = 0;\n        for (let j = 0; j < paren_arr[i].length;\
    \ j++) {\n            if (paren_arr[i][j] === \"(\") {\n                paren_count++;\n\
    \            } else if (paren_arr[i][j] === \")\") {\n                paren_count--;\n\
    \            }\n            if (paren_count > max_paren_count) {\n           \
    \     max_paren_count = paren_count;\n            }\n        }\n        result.push(max_paren_count);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324267
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let paren_count = [];\n\
    \    for (let i = 0; i < paren_array.length; i++) {\n        let paren_count_temp\
    \ = 0;\n        for (let j = 0; j < paren_array[i].length; j++) {\n          \
    \  if (paren_array[i][j] === \"(\") {\n                paren_count_temp++;\n \
    \           }\n        }\n        paren_count.push(paren_count_temp);\n    }\n\
    \    return paren_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpnex92u3h.js:23:12)\n    at Object.<anonymous> (/tmp/tmpnex92u3h.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1,\
    \ 5 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660324265
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_arr = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_arr.length; i++) {\n        result.push(parse_nested_parens_helper(paren_arr[i]));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpd1ylyaat.ts(10,21): error TS2304: Cannot find name ''parse_nested_parens_helper''.

    '
  timestamp: 1660324268
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let paren_levels = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_level = 0;\n        let max_paren_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === \"(\") {\n                paren_level++;\n             \
    \   if (paren_level > max_paren_level) {\n                    max_paren_level\
    \ = paren_level;\n                }\n            } else if (paren_group[j] ===\
    \ \")\") {\n                paren_level--;\n            }\n        }\n       \
    \ paren_levels.push(max_paren_level);\n    }\n    return paren_levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324257
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   const paren_groups = paren_string.split(\" \");\n    const paren_levels =\
    \ [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        const paren_group\
    \ = paren_groups[i];\n        let level = 0;\n        let max_level = 0;\n   \
    \     for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === \"(\") {\n                level++;\n                if (level > max_level)\
    \ {\n                    max_level = level;\n                }\n            }\
    \ else if (paren_group[j] === \")\") {\n                level--;\n           \
    \ }\n        }\n        paren_levels.push(max_level);\n    }\n    return paren_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324268
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let paren_depth = [];\n \
    \   for (let i = 0; i < paren_list.length; i++) {\n        let paren_count = 0;\n\
    \        let max_paren_count = 0;\n        for (let j = 0; j < paren_list[i].length;\
    \ j++) {\n            if (paren_list[i][j] === \"(\") {\n                paren_count++;\n\
    \            } else if (paren_list[i][j] === \")\") {\n                paren_count--;\n\
    \            }\n            if (paren_count > max_paren_count) {\n           \
    \     max_paren_count = paren_count;\n            }\n        }\n        paren_depth.push(max_paren_count);\n\
    \    }\n    return paren_depth;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324269
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \ let paren_groups = paren_string.split(\" \");\n  let max_nesting_levels = [];\n\
    \  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group = paren_groups[i];\n\
    \    let max_nesting_level = 0;\n    let current_nesting_level = 0;\n    for (let\
    \ j = 0; j < paren_group.length; j++) {\n      if (paren_group[j] === \"(\") {\n\
    \        current_nesting_level++;\n      } else if (paren_group[j] === \")\")\
    \ {\n        current_nesting_level--;\n      }\n      if (current_nesting_level\
    \ > max_nesting_level) {\n        max_nesting_level = current_nesting_level;\n\
    \      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n  }\n  return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324269
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \ const paren_groups = paren_string.split(\" \");\n  const result = [];\n  for\
    \ (let i = 0; i < paren_groups.length; i++) {\n    let paren_group = paren_groups[i];\n\
    \    let max_depth = 0;\n    let depth = 0;\n    for (let j = 0; j < paren_group.length;\
    \ j++) {\n      if (paren_group[j] === \"(\") {\n        depth++;\n      } else\
    \ if (paren_group[j] === \")\") {\n        depth--;\n      }\n      if (depth\
    \ > max_depth) {\n        max_depth = depth;\n      }\n    }\n    result.push(max_depth);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324269
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let paren_count = [];\n \
    \   for (let i = 0; i < paren_list.length; i++) {\n        let paren_count_temp\
    \ = 0;\n        let paren_count_max = 0;\n        for (let j = 0; j < paren_list[i].length;\
    \ j++) {\n            if (paren_list[i][j] === \"(\") {\n                paren_count_temp++;\n\
    \            } else if (paren_list[i][j] === \")\") {\n                paren_count_temp--;\n\
    \            }\n            if (paren_count_temp > paren_count_max) {\n      \
    \          paren_count_max = paren_count_temp;\n            }\n        }\n   \
    \     paren_count.push(paren_count_max);\n    }\n    return paren_count;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324270
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_groups: any = paren_string.split(\" \"\
    );\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group:\
    \ any = paren_groups[i];\n        let max_depth: any = 0;\n        let depth:\
    \ any = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n         \
    \   if (paren_group[j] === \"(\") {\n                depth += 1;\n           \
    \     if (depth > max_depth) {\n                    max_depth = depth;\n     \
    \           }\n            } else if (paren_group[j] === \")\") {\n          \
    \      depth -= 1;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324270
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let count = 0;\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                count++;\n  \
    \          } else if (paren[j] === \")\") {\n                count--;\n      \
    \      }\n            if (count > max) {\n                max = count;\n     \
    \       }\n        }\n        result.push(max);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324251
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let paren_count = [];\n\
    \    for (let i = 0; i < paren_array.length; i++) {\n        let paren_count_temp\
    \ = 0;\n        for (let j = 0; j < paren_array[i].length; j++) {\n          \
    \  if (paren_array[i][j] === \"(\") {\n                paren_count_temp++;\n \
    \           }\n        }\n        paren_count.push(paren_count_temp);\n    }\n\
    \    return paren_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpnex92u3h.js:23:12)\n    at Object.<anonymous> (/tmp/tmpnex92u3h.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1,\
    \ 5 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660324265
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_group = paren_array[i];\n\
    \        let paren_count = 0;\n        let max_paren_count = 0;\n        for (let\
    \ j = 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"\
    (\") {\n                paren_count++;\n                if (paren_count > max_paren_count)\
    \ {\n                    max_paren_count = paren_count;\n                }\n \
    \           } else if (paren_group[j] === \")\") {\n                paren_count--;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324242
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let paren_levels = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        paren_levels.push(paren_levels_in_group(paren_groups[i]));\n\
    \    }\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpflvh9_6w.ts(10,27): error TS2304: Cannot find name ''paren_levels_in_group''.

    '
  timestamp: 1660324270
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let count = 0;\n        let max_count = 0;\n        for (let j = 0; j\
    \ < paren.length; j++) {\n            if (paren[j] === \"(\") {\n            \
    \    count++;\n            } else if (paren[j] === \")\") {\n                count--;\n\
    \            }\n            if (count > max_count) {\n                max_count\
    \ = count;\n            }\n        }\n        result.push(max_count);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324271
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let paren_depth_list = [];\n\
    \    for (let i = 0; i < paren_list.length; i++) {\n        let paren_depth =\
    \ 0;\n        let paren_stack = [];\n        for (let j = 0; j < paren_list[i].length;\
    \ j++) {\n            if (paren_list[i][j] === \"(\") {\n                paren_stack.push(paren_list[i][j]);\n\
    \                paren_depth = Math.max(paren_depth, paren_stack.length);\n  \
    \          } else if (paren_list[i][j] === \")\") {\n                paren_stack.pop();\n\
    \            }\n        }\n        paren_depth_list.push(paren_depth);\n    }\n\
    \    return paren_depth_list;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324271
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \ let paren_array = paren_string.split(\" \");\n  let result: any = [];\n  for\
    \ (let i = 0; i < paren_array.length; i++) {\n    let paren_count = 0;\n    let\
    \ max_paren_count = 0;\n    for (let j = 0; j < paren_array[i].length; j++) {\n\
    \      if (paren_array[i][j] === \"(\") {\n        paren_count++;\n      } else\
    \ if (paren_array[i][j] === \")\") {\n        paren_count--;\n      }\n      if\
    \ (paren_count > max_paren_count) {\n        max_paren_count = paren_count;\n\
    \      }\n    }\n    result.push(max_paren_count);\n  }\n  return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324272
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \ let paren_groups = paren_string.split(\" \");\n  let max_nesting_levels = [];\n\
    \  for (let i = 0; i < paren_groups.length; i++) {\n    let paren_group = paren_groups[i];\n\
    \    let max_nesting_level = 0;\n    let current_nesting_level = 0;\n    for (let\
    \ j = 0; j < paren_group.length; j++) {\n      let paren = paren_group[j];\n \
    \     if (paren === \"(\") {\n        current_nesting_level++;\n      } else if\
    \ (paren === \")\") {\n        current_nesting_level--;\n      }\n      if (current_nesting_level\
    \ > max_nesting_level) {\n        max_nesting_level = current_nesting_level;\n\
    \      }\n    }\n    max_nesting_levels.push(max_nesting_level);\n  }\n  return\
    \ max_nesting_levels;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324256
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let paren_depth = [];\n \
    \   for (let paren of paren_list) {\n        let depth = 0;\n        let max_depth\
    \ = 0;\n        for (let i = 0; i < paren.length; i++) {\n            if (paren[i]\
    \ === \"(\") {\n                depth += 1;\n            } else if (paren[i] ===\
    \ \")\") {\n                depth -= 1;\n            }\n            if (depth\
    \ > max_depth) {\n                max_depth = depth;\n            }\n        }\n\
    \        paren_depth.push(max_depth);\n    }\n    return paren_depth;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324272
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let count = 0;\n        let max_count = 0;\n        for (let j = 0; j\
    \ < paren.length; j++) {\n            if (paren[j] === \"(\") {\n            \
    \    count++;\n            } else if (paren[j] === \")\") {\n                count--;\n\
    \            }\n            if (count > max_count) {\n                max_count\
    \ = count;\n            }\n        }\n        result.push(max_count);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324271
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let max_nesting_list = [];\n\
    \    for (let i = 0; i < paren_list.length; i++) {\n        let paren = paren_list[i];\n\
    \        let max_nesting = 0;\n        let current_nesting = 0;\n        for (let\
    \ j = 0; j < paren.length; j++) {\n            if (paren[j] === \"(\") {\n   \
    \             current_nesting++;\n            } else if (paren[j] === \")\") {\n\
    \                current_nesting--;\n            }\n            if (current_nesting\
    \ > max_nesting) {\n                max_nesting = current_nesting;\n         \
    \   }\n        }\n        max_nesting_list.push(max_nesting);\n    }\n    return\
    \ max_nesting_list;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324272
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result = [];\n    let paren_list = paren_string.split(\" \");\n    for\
    \ (let i = 0; i < paren_list.length; i++) {\n        let paren_group = paren_list[i];\n\
    \        let count = 0;\n        let max_count = 0;\n        for (let j = 0; j\
    \ < paren_group.length; j++) {\n            if (paren_group[j] === \"(\") {\n\
    \                count++;\n                if (count > max_count) {\n        \
    \            max_count = count;\n                }\n            } else if (paren_group[j]\
    \ === \")\") {\n                count--;\n            }\n        }\n        result.push(max_count);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324273
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_groups.length; i++) {\n        let paren_group = paren_groups[i];\n\
    \        let max_level = 0;\n        let level = 0;\n        for (let j = 0; j\
    \ < paren_group.length; j++) {\n            if (paren_group[j] === \"(\") {\n\
    \                level++;\n                if (level > max_level) {\n        \
    \            max_level = level;\n                }\n            } else if (paren_group[j]\
    \ === \")\") {\n                level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324273
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \ let result: any = [];\n  let paren_array: any = paren_string.split(\" \");\n\
    \  for (let i: number = 0; i < paren_array.length; i++) {\n    let paren_count:\
    \ number = 0;\n    let max_paren_count: number = 0;\n    for (let j: number =\
    \ 0; j < paren_array[i].length; j++) {\n      if (paren_array[i][j] === \"(\"\
    ) {\n        paren_count++;\n      } else if (paren_array[i][j] === \")\") {\n\
    \        paren_count--;\n      }\n      if (paren_count > max_paren_count) {\n\
    \        max_paren_count = paren_count;\n      }\n    }\n    result.push(max_paren_count);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324273
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_list.length; i++) {\n        result.push(parse_parens(paren_list[i]));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp477g7bn4.ts(10,21): error TS2304: Cannot find name ''parse_parens''.

    '
  timestamp: 1660324274
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_list.length; i++) {\n        let paren = paren_list[i];\n\
    \        let max_level = 0;\n        let level = 0;\n        for (let j = 0; j\
    \ < paren.length; j++) {\n            if (paren[j] === \"(\") {\n            \
    \    level++;\n                if (level > max_level) {\n                    max_level\
    \ = level;\n                }\n            } else if (paren[j] === \")\") {\n\
    \                level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324255
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_groups.length; i++) {\n        let paren_group = paren_groups[i];\n\
    \        let max_level = 0;\n        let level = 0;\n        for (let j = 0; j\
    \ < paren_group.length; j++) {\n            if (paren_group[j] === \"(\") {\n\
    \                level++;\n                if (level > max_level) {\n        \
    \            max_level = level;\n                }\n            } else if (paren_group[j]\
    \ === \")\") {\n                level--;\n            }\n        }\n        result.push(max_level);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324273
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let current_paren = paren_array[i];\n\
    \        let current_max = 0;\n        let current_count = 0;\n        for (let\
    \ j = 0; j < current_paren.length; j++) {\n            if (current_paren[j] ===\
    \ \"(\") {\n                current_count += 1;\n                if (current_count\
    \ > current_max) {\n                    current_max = current_count;\n       \
    \         }\n            } else if (current_paren[j] === \")\") {\n          \
    \      current_count -= 1;\n            }\n        }\n        result.push(current_max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324275
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_groups.length; i++) {\n        let paren_group = paren_groups[i];\n\
    \        let max_nesting = 0;\n        let current_nesting = 0;\n        for (let\
    \ j = 0; j < paren_group.length; j++) {\n            if (paren_group[j] === \"\
    (\") {\n                current_nesting++;\n            } else if (paren_group[j]\
    \ === \")\") {\n                current_nesting--;\n            }\n          \
    \  if (current_nesting > max_nesting) {\n                max_nesting = current_nesting;\n\
    \            }\n        }\n        result.push(max_nesting);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324275
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i: number = 0; i < paren_array.length; i++) {\n        let paren_count:\
    \ number = 0;\n        let max_paren_count: number = 0;\n        for (let j: number\
    \ = 0; j < paren_array[i].length; j++) {\n            if (paren_array[i][j] ===\
    \ \"(\") {\n                paren_count++;\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n            if\
    \ (paren_count > max_paren_count) {\n                max_paren_count = paren_count;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324242
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        result.push(parse_nested_parens_helper(paren_array[i]));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpgxgg7b3a.ts(10,21): error TS2304: Cannot find name ''parse_nested_parens_helper''.

    '
  timestamp: 1660324243
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let max_depth = 0;\n    let depth = 0;\n    let result = [];\n    let current_group\
    \ = \"\";\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i]\
    \ === \"(\") {\n            depth++;\n            max_depth = Math.max(max_depth,\
    \ depth);\n        } else if (paren_string[i] === \")\") {\n            depth--;\n\
    \        } else if (paren_string[i] === \" \") {\n            result.push(max_depth);\n\
    \            max_depth = 0;\n            depth = 0;\n        }\n    }\n    result.push(max_depth);\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324275
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_list.length; i++) {\n        let paren = paren_list[i];\n\
    \        let count = 0;\n        let max_count = 0;\n        for (let j = 0; j\
    \ < paren.length; j++) {\n            if (paren[j] === \"(\") {\n            \
    \    count++;\n            } else if (paren[j] === \")\") {\n                count--;\n\
    \            }\n            if (count > max_count) {\n                max_count\
    \ = count;\n            }\n        }\n        result.push(max_count);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324259
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let max_depth = 0;\n    let depth = 0;\n    let result = [];\n    for (let\
    \ i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] === \"(\"\
    ) {\n            depth++;\n            if (depth > max_depth) {\n            \
    \    max_depth = depth;\n            }\n        } else if (paren_string[i] ===\
    \ \")\") {\n            depth--;\n        } else if (paren_string[i] === \" \"\
    ) {\n            result.push(max_depth);\n            max_depth = 0;\n       \
    \     depth = 0;\n        }\n    }\n    result.push(max_depth);\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324275
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let stack = [];\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                stack.push(paren[j]);\n\
    \                max = Math.max(max, stack.length);\n            } else {\n  \
    \              stack.pop();\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324243
- exit_code: 2
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_arr: any = paren_string.split(\" \");\n\
    \    for (let i: number = 0; i < paren_arr.length; i++) {\n        result.push(parse_nested_parens_helper(paren_arr[i]));\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpuue18okg.ts(10,21): error TS2304: Cannot find name ''parse_nested_parens_helper''.

    '
  timestamp: 1660324276
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i: number = 0; i < paren_array.length; i++) {\n        let paren_count:\
    \ number = 0;\n        let max_paren_count: number = 0;\n        for (let j: number\
    \ = 0; j < paren_array[i].length; j++) {\n            if (paren_array[i][j] ===\
    \ \"(\") {\n                paren_count++;\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n            if\
    \ (paren_count > max_paren_count) {\n                max_paren_count = paren_count;\n\
    \            }\n        }\n        result.push(max_paren_count);\n    }\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324242
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let result: any = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_level = 0;\n        let level = 0;\n   \
    \     for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === \"(\") {\n                level++;\n                if (level > max_level)\
    \ {\n                    max_level = level;\n                }\n            }\
    \ else if (paren_group[j] === \")\") {\n                level--;\n           \
    \ }\n        }\n        result.push(max_level);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324266
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let paren of paren_array) {\n        let count = 0;\n        let max = 0;\n\
    \        for (let i = 0; i < paren.length; i++) {\n            if (paren[i] ===\
    \ \"(\") {\n                count++;\n            } else if (paren[i] === \")\"\
    ) {\n                count--;\n            }\n            if (count > max) {\n\
    \                max = count;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324253
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let paren_group of paren_groups) {\n        let max_depth = 0;\n        let\
    \ current_depth = 0;\n        for (let paren of paren_group) {\n            if\
    \ (paren === \"(\") {\n                current_depth += 1;\n                max_depth\
    \ = Math.max(max_depth, current_depth);\n            } else if (paren === \")\"\
    ) {\n                current_depth -= 1;\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324277
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_nesting = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let paren_stack = [];\n        let max_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            let\
    \ paren = paren_group[j];\n            if (paren === \"(\") {\n              \
    \  paren_stack.push(paren);\n                max_nesting_level = Math.max(max_nesting_level,\
    \ paren_stack.length);\n            } else if (paren === \")\") {\n          \
    \      paren_stack.pop();\n            }\n        }\n        max_nesting.push(max_nesting_level);\n\
    \    }\n    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324277
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let paren_levels = [];\n\
    \    for (let i = 0; i < paren_array.length; i++) {\n        let paren_level =\
    \ 0;\n        let paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > paren_level) {\n                    paren_level\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     paren_levels.push(paren_level);\n    }\n    return paren_levels;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324277
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let count = 0;\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                count++;\n  \
    \          } else if (paren[j] === \")\") {\n                count--;\n      \
    \      }\n            if (count > max) {\n                max = count;\n     \
    \       }\n        }\n        result.push(max);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324251
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let count = 0;\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                count++;\n  \
    \          } else if (paren[j] === \")\") {\n                count--;\n      \
    \      }\n            if (count > max) {\n                max = count;\n     \
    \       }\n        }\n        result.push(max);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324251
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   // TODO: Implement this function\n    return [];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmphe2ei6_r.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmphe2ei6_r.js:17:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660324278
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_array: any = paren_string.split(\" \"\
    );\n    for (let i = 0; i < paren_array.length; i++) {\n        let paren_group:\
    \ any = paren_array[i];\n        let paren_count: any = 0;\n        let max_paren_count:\
    \ any = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n         \
    \   if (paren_group[j] === \"(\") {\n                paren_count++;\n        \
    \        if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_group[j] ===\
    \ \")\") {\n                paren_count--;\n            }\n        }\n       \
    \ result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324243
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_list.length; i++) {\n        let paren = paren_list[i];\n\
    \        let count = 0;\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                count++;\n  \
    \              if (count > max) {\n                    max = count;\n        \
    \        }\n            } else if (paren[j] === \")\") {\n                count--;\n\
    \            }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324246
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let paren_count = [];\n\
    \    for (let i = 0; i < paren_array.length; i++) {\n        let paren_count_temp\
    \ = 0;\n        for (let j = 0; j < paren_array[i].length; j++) {\n          \
    \  if (paren_array[i][j] === \"(\") {\n                paren_count_temp++;\n \
    \           }\n        }\n        paren_count.push(paren_count_temp);\n    }\n\
    \    return paren_count;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpnex92u3h.js:23:12)\n    at Object.<anonymous> (/tmp/tmpnex92u3h.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1,\
    \ 5 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660324265
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let parens = paren_string.split(\" \");\n    let result = [];\n    for (let\
    \ i = 0; i < parens.length; i++) {\n        let paren = parens[i];\n        let\
    \ count = 0;\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                count++;\n  \
    \              if (count > max) {\n                    max = count;\n        \
    \        }\n            } else if (paren[j] === \")\") {\n                count--;\n\
    \            }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324278
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let count = 0;\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                count++;\n  \
    \          } else if (paren[j] === \")\") {\n                count--;\n      \
    \      }\n            if (count > max) {\n                max = count;\n     \
    \       }\n        }\n        result.push(max);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324251
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let count = 0;\n        let max_count = 0;\n        for (let j = 0; j\
    \ < paren.length; j++) {\n            if (paren[j] === \"(\") {\n            \
    \    count++;\n            } else if (paren[j] === \")\") {\n                count--;\n\
    \            }\n            if (count > max_count) {\n                max_count\
    \ = count;\n            }\n        }\n        result.push(max_count);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324271
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let count = 0;\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                count++;\n  \
    \          } else if (paren[j] === \")\") {\n                count--;\n      \
    \      }\n            if (count > max) {\n                max = count;\n     \
    \       }\n        }\n        result.push(max);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324251
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_list.length; i++) {\n        let curr_paren = paren_list[i];\n\
    \        let curr_max = 0;\n        let curr_count = 0;\n        for (let j =\
    \ 0; j < curr_paren.length; j++) {\n            if (curr_paren[j] === \"(\") {\n\
    \                curr_count++;\n                if (curr_count > curr_max) {\n\
    \                    curr_max = curr_count;\n                }\n            }\
    \ else if (curr_paren[j] === \")\") {\n                curr_count--;\n       \
    \     }\n        }\n        result.push(curr_max);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324278
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let count = 0;\n        let max_count = 0;\n        for (let j = 0; j\
    \ < paren.length; j++) {\n            if (paren[j] === \"(\") {\n            \
    \    count++;\n            } else if (paren[j] === \")\") {\n                count--;\n\
    \            }\n            if (count > max_count) {\n                max_count\
    \ = count;\n            }\n        }\n        result.push(max_count);\n    }\n\
    \    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324271
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_nesting = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === \"(\") {\n                nesting_level++;\n           \
    \ } else if (paren_group[j] === \")\") {\n                nesting_level--;\n \
    \           }\n            if (nesting_level > max_nesting_level) {\n        \
    \        max_nesting_level = nesting_level;\n            }\n        }\n      \
    \  max_nesting.push(max_nesting_level);\n    }\n    return max_nesting;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324279
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let paren_count = [];\n\
    \    for (let i = 0; i < paren_array.length; i++) {\n        let paren_string\
    \ = paren_array[i];\n        let count = 0;\n        let max_count = 0;\n    \
    \    for (let j = 0; j < paren_string.length; j++) {\n            if (paren_string[j]\
    \ === \"(\") {\n                count++;\n            } else if (paren_string[j]\
    \ === \")\") {\n                count--;\n            }\n            if (count\
    \ > max_count) {\n                max_count = count;\n            }\n        }\n\
    \        paren_count.push(max_count);\n    }\n    return paren_count;\n}\n\nconsole.log(parse_nested_parens(\"\
    (()()) ((())) () ((())()())\"));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 2, 3, 1, 3 ]

    '
  timestamp: 1660324279
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_nesting = [];\n\
    \    for (let paren_group of paren_groups) {\n        let current_nesting = 0;\n\
    \        let max_current_nesting = 0;\n        for (let paren of paren_group)\
    \ {\n            if (paren === \"(\") {\n                current_nesting += 1;\n\
    \            } else if (paren === \")\") {\n                current_nesting -=\
    \ 1;\n            }\n            max_current_nesting = Math.max(max_current_nesting,\
    \ current_nesting);\n        }\n        max_nesting.push(max_current_nesting);\n\
    \    }\n    return max_nesting;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324280
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    paren_array.forEach(function\
    \ (paren_group: any) {\n        let max_level = 0;\n        let current_level\
    \ = 0;\n        for (let i = 0; i < paren_group.length; i++) {\n            if\
    \ (paren_group[i] === \"(\") {\n                current_level++;\n           \
    \     if (current_level > max_level) {\n                    max_level = current_level;\n\
    \                }\n            } else if (paren_group[i] === \")\") {\n     \
    \           current_level--;\n            }\n        }\n        result.push(max_level);\n\
    \    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324280
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_list = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_list.length; i++) {\n        let count = 0;\n        let\
    \ max = 0;\n        for (let j = 0; j < paren_list[i].length; j++) {\n       \
    \     if (paren_list[i][j] === \"(\") {\n                count++;\n          \
    \      if (count > max) {\n                    max = count;\n                }\n\
    \            } else if (paren_list[i][j] === \")\") {\n                count--;\n\
    \            }\n        }\n        result.push(max);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324261
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren = paren_array[i];\n\
    \        let count = 0;\n        let max = 0;\n        for (let j = 0; j < paren.length;\
    \ j++) {\n            if (paren[j] === \"(\") {\n                count++;\n  \
    \          } else if (paren[j] === \")\") {\n                count--;\n      \
    \      }\n            if (count > max) {\n                max = count;\n     \
    \       }\n        }\n        result.push(max);\n    }\n    return result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324251
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_nesting_levels\
    \ = [];\n    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let current_nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            let\
    \ paren = paren_group[j];\n            if (paren === \"(\") {\n              \
    \  current_nesting_level++;\n            } else if (paren === \")\") {\n     \
    \           current_nesting_level--;\n            }\n            if (current_nesting_level\
    \ > max_nesting_level) {\n                max_nesting_level = current_nesting_level;\n\
    \            }\n        }\n        max_nesting_levels.push(max_nesting_level);\n\
    \    }\n    return max_nesting_levels;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324257
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   const paren_groups = paren_string.split(\" \");\n    const result = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        const paren_group\
    \ = paren_groups[i];\n        let max_nesting = 0;\n        let current_nesting\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === \"(\") {\n                current_nesting++;\n         \
    \       max_nesting = Math.max(max_nesting, current_nesting);\n            } else\
    \ if (paren_group[j] === \")\") {\n                current_nesting--;\n      \
    \      }\n        }\n        result.push(max_nesting);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324280
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let result: any = [];\n    let paren_list: any = paren_string.split(\" \"\
    );\n    for (let i: number = 0; i < paren_list.length; i++) {\n        let paren_group:\
    \ any = paren_list[i];\n        let paren_stack: any = [];\n        let max_depth:\
    \ number = 0;\n        for (let j: number = 0; j < paren_group.length; j++) {\n\
    \            let paren: any = paren_group[j];\n            if (paren === \"(\"\
    ) {\n                paren_stack.push(paren);\n                max_depth = Math.max(max_depth,\
    \ paren_stack.length);\n            } else if (paren === \")\") {\n          \
    \      paren_stack.pop();\n            }\n        }\n        result.push(max_depth);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324281
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \ const parens = paren_string.split(\" \");\n  const result = [];\n  for (let\
    \ i = 0; i < parens.length; i++) {\n    let paren = parens[i];\n    let count\
    \ = 0;\n    let max = 0;\n    for (let j = 0; j < paren.length; j++) {\n     \
    \ if (paren[j] === \"(\") {\n        count++;\n        if (count > max) {\n  \
    \        max = count;\n        }\n      } else if (paren[j] === \")\") {\n   \
    \     count--;\n      }\n    }\n    result.push(max);\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324281
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_levels = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let level = 0;\n        let max_level = 0;\n   \
    \     for (let j = 0; j < paren_group.length; j++) {\n            if (paren_group[j]\
    \ === \"(\") {\n                level++;\n                if (level > max_level)\
    \ {\n                    max_level = level;\n                }\n            }\
    \ else if (paren_group[j] === \")\") {\n                level--;\n           \
    \ }\n        }\n        max_levels.push(max_level);\n    }\n    return max_levels;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324281
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_count) {\n                    max_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_count);\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324282
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let max_nesting = [];\n\
    \    for (let i = 0; i < paren_groups.length; i++) {\n        let paren_group\
    \ = paren_groups[i];\n        let max_nesting_level = 0;\n        let nesting_level\
    \ = 0;\n        for (let j = 0; j < paren_group.length; j++) {\n            if\
    \ (paren_group[j] === \"(\") {\n                nesting_level++;\n           \
    \ } else if (paren_group[j] === \")\") {\n                nesting_level--;\n \
    \           }\n            if (nesting_level > max_nesting_level) {\n        \
    \        max_nesting_level = nesting_level;\n            }\n        }\n      \
    \  max_nesting.push(max_nesting_level);\n    }\n    return max_nesting;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324279
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_groups = paren_string.split(\" \");\n    let paren_levels = [];\n\
    \    for (let paren_group of paren_groups) {\n        let paren_level = 0;\n \
    \       let max_paren_level = 0;\n        for (let paren of paren_group) {\n \
    \           if (paren === \"(\") {\n                paren_level += 1;\n      \
    \      } else if (paren === \")\") {\n                paren_level -= 1;\n    \
    \        }\n            if (paren_level > max_paren_level) {\n               \
    \ max_paren_level = paren_level;\n            }\n        }\n        paren_levels.push(max_paren_level);\n\
    \    }\n    return paren_levels;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324282
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string: any): any {\n \
    \   let paren_array = paren_string.split(\" \");\n    let result = [];\n    for\
    \ (let i = 0; i < paren_array.length; i++) {\n        let paren_count = 0;\n \
    \       let max_paren_count = 0;\n        for (let j = 0; j < paren_array[i].length;\
    \ j++) {\n            if (paren_array[i][j] === \"(\") {\n                paren_count++;\n\
    \                if (paren_count > max_paren_count) {\n                    max_paren_count\
    \ = paren_count;\n                }\n            } else if (paren_array[i][j]\
    \ === \")\") {\n                paren_count--;\n            }\n        }\n   \
    \     result.push(max_paren_count);\n    }\n    return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660324239
