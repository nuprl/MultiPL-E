name: HumanEval_29_filter_by_prefix
language: ts
prompt: "//Filter an input array of strings only for ones that start with a given\
  \ prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"\
  abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings:\
  \ any, prefix: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
  \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
  \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
  test();"
completions: ["    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (str: any) {\n        return\
    \ str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    var result: any = [];\n\
    \    for (var i = 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix))\
    \ {\n            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (str: any) {\n        return\
    \ str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (str: any) {\n        return str.startsWith(prefix);\n    });\n}\n", "    return\
    \ strings.filter(function (s: any) { return s.startsWith(prefix); });\n}\n", " \
    \   return strings.filter(function (str: any) {\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function (str: any) {\n        return\
    \ str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (str: any) {\n        return str.startsWith(prefix);\n    });\n}\n", "    return\
    \ strings.filter(function (s: any) { return s.startsWith(prefix); });\n}\n", " \
    \   return strings.filter(function (s: any) { return s.startsWith(prefix); });\n\
    }\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (string: any) {\n        return\
    \ string.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (str: any) {\n        return str.startsWith(prefix);\n    });\n}\n", "    return\
    \ strings.filter(function (str: any) {\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (str: any) {\n        return\
    \ str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function\
    \ (str: any) {\n        return str.startsWith(prefix);\n    });\n}\n", "    return\
    \ strings.filter(function (s: any) { return s.startsWith(prefix); });\n}\n", " \
    \   return strings.filter(function (s: any) { return s.startsWith(prefix); });\n\
    }\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (str: any) {\n        return\
    \ str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "  return strings.filter((s:\
    \ any) => s.startsWith(prefix));\n}\n", "    return strings.filter(function (s:\
    \ any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (str: any) {\n        return str.startsWith(prefix);\n    });\n}\n", "    return\
    \ strings.filter(function (s: any) { return s.startsWith(prefix); });\n}\n", " \
    \   return strings.filter(function (s: any) { return s.startsWith(prefix); });\n\
    }\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (x: any) { return x.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (string: any) {\n        return\
    \ string.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (str: any) {\n        return str.startsWith(prefix);\n    });\n}\n", "    return\
    \ strings.filter(function (str: any) {\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (string: any) {\n        return\
    \ string.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (str: any) {\n        return str.startsWith(prefix);\n    });\n}\n", "  return\
    \ strings.filter((s: any) => s.startsWith(prefix));\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (str: any) {\n        return str.startsWith(prefix);\n    });\n}\n", "    return\
    \ strings.filter(function (s: any) { return s.startsWith(prefix); });\n}\n", " \
    \   return strings.filter(function (string: any) {\n        return string.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "  return strings.filter(function(s: any) {\n    return s.startsWith(prefix);\n\
    \  });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (str: any) {\n        return\
    \ str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (str: any) {\n        return str.startsWith(prefix);\n    });\n}\n", "    return\
    \ strings.filter(function (str: any) {\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (str: any) {\n        return\
    \ str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (str: any) {\n        return str.startsWith(prefix);\n    });\n}\n", "    return\
    \ strings.filter(function (str: any) {\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function (str: any) {\n        return\
    \ str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (str: any) {\n        return str.startsWith(prefix);\n    });\n}\n", "    return\
    \ strings.filter(function (s: any) { return s.startsWith(prefix); });\n}\n", " \
    \   return strings.filter(function (s: any) { return s.startsWith(prefix); });\n\
    }\n", "    return strings.filter(function (str: any) {\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (str: any) {\n        return\
    \ str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (str: any) {\n        return str.startsWith(prefix);\n    });\n}\n", "    return\
    \ strings.filter(function (s: any) { return s.startsWith(prefix); });\n}\n", " \
    \   return strings.filter(function (s: any) { return s.startsWith(prefix); });\n\
    }\n", "    return strings.filter(function (str: any) {\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (str: any) {\n        return\
    \ str.startsWith(prefix);\n    });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (s: any) { return s.startsWith(prefix); });\n}\n", "    return strings.filter(function\
    \ (str: any) {\n        return str.startsWith(prefix);\n    });\n}\n", "    return\
    \ strings.filter(function (s: any) { return s.startsWith(prefix); });\n}\n", " \
    \   return strings.filter(function (s: any) { return s.startsWith(prefix); });\n\
    }\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n", "    return strings.filter(function (s: any) { return s.startsWith(prefix);\
    \ });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
