name: HumanEval_59_largest_prime_factor
language: ts
prompt: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunction largest_prime_factor(n: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
  \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
  \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
completions: ["    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n \
    \           n /= i;\n        } else {\n            i++;\n        }\n    }\n  \
    \  return i;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i ==\
    \ 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return i;\n}\n", "    let i: any;\n    let max: any;\n    for (i =\
    \ 2; i <= n; i++) {\n        if (n % i === 0) {\n            max = i;\n      \
    \      n /= i;\n            i = 1;\n        }\n    }\n    return max;\n}\n", " \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    let i: any = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return i;\n}\n", "    let i: any;\n    let factors: any;\n    let max: any;\n\
    \    factors = prime_factors(n);\n    max = 0;\n    for (i = 0; i < factors.length;\
    \ i++) {\n        if (factors[i] > max) {\n            max = factors[i];\n   \
    \     }\n    }\n    return max;\n}\n", "    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n", "    let i: any;\n    let prime:\
    \ any;\n    let max: any;\n    let num: any;\n    num = n;\n    max = 0;\n   \
    \ i = 2;\n    while (i <= num) {\n        if (num % i === 0) {\n            prime\
    \ = true;\n            for (let j: any = 2; j < i; j++) {\n                if\
    \ (i % j === 0) {\n                    prime = false;\n                    break;\n\
    \                }\n            }\n            if (prime) {\n                max\
    \ = i;\n                num = num / i;\n            }\n        }\n        i++;\n\
    \    }\n    return max;\n}\n", "    let i: any;\n    let max: any;\n    for (i\
    \ = 2; i <= n; i++) {\n        while (n % i === 0) {\n            max = i;\n \
    \           n /= i;\n        }\n    }\n    return max;\n}\n", "    let i: any;\n\
    \    let factors: any = [];\n    for (i = 2; i <= n; i++) {\n        while (n\
    \ % i === 0) {\n            factors.push(i);\n            n /= i;\n        }\n\
    \    }\n    return factors[factors.length - 1];\n}\n", "    let i: any;\n    let\
    \ largest: any;\n    let factor: any;\n    let factors: any;\n    let prime: any;\n\
    \    factors = prime_factors(n);\n    largest = 0;\n    for (i = 0; i < factors.length;\
    \ i++) {\n        factor = factors[i];\n        if (factor > largest) {\n    \
    \        largest = factor;\n        }\n    }\n    return largest;\n}\n", "   \
    \ let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /=\
    \ i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n}\n",
  "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    let i: any;\n    let max: any;\n    for (i = 2; i <= n; i++) {\n  \
    \      if (n % i === 0) {\n            max = i;\n            n /= i;\n       \
    \     i = 1;\n        }\n    }\n    return max;\n}\n", "    let i: any;\n    let\
    \ factors: any;\n    let max: any;\n    factors = prime_factors(n);\n    max =\
    \ 0;\n    for (i = 0; i < factors.length; i++) {\n        if (factors[i] > max)\
    \ {\n            max = factors[i];\n        }\n    }\n    return max;\n}\n", " \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    let i: any;\n    let factor: any;\n    let max: any;\n    max = 1;\n\
    \    i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            factor\
    \ = i;\n            n = n / factor;\n            while (n % factor === 0) {\n\
    \                n = n / factor;\n            }\n            max = factor;\n \
    \       }\n        i = i + 1;\n    }\n    return max;\n}\n", "    let i = 2;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    let i: any;\n    let factors: any;\n    let largest_factor: any;\n\
    \    factors = [];\n    for (i = 2; i <= n; i++) {\n        while (n % i === 0)\
    \ {\n            factors.push(i);\n            n /= i;\n        }\n    }\n   \
    \ largest_factor = factors[factors.length - 1];\n    return largest_factor;\n\
    }\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n     \
    \       n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n", "    let i: any;\n    let factors: any;\n    let largest: any;\n \
    \   factors = prime_factors(n);\n    largest = factors[0];\n    for (i = 1; i\
    \ < factors.length; i++) {\n        if (factors[i] > largest) {\n            largest\
    \ = factors[i];\n        }\n    }\n    return largest;\n}\n", "    let i = 2;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return i;\n\
    }\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n     \
    \       n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n", "    let i: any;\n    let largest_prime: any;\n    for (i = 2; i <=\
    \ n; i++) {\n        if (n % i === 0) {\n            n /= i;\n            largest_prime\
    \ = i;\n        }\n    }\n    return largest_prime;\n}\n", "    let i: any = 2;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let\
    \ i: any;\n    let factor: any;\n    let largest_factor: any;\n    for (i = 2;\
    \ i <= n; i++) {\n        if (n % i === 0) {\n            factor = i;\n      \
    \      n /= i;\n            while (n % i === 0) {\n                n /= i;\n \
    \           }\n            largest_factor = factor;\n        }\n    }\n    if\
    \ (largest_factor === undefined) {\n        return n;\n    }\n    return largest_factor;\n\
    }\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n     \
    \       n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n", "    let i: any;\n    let largest_prime_factor: any;\n    for (i =\
    \ 2; i <= n; i++) {\n        if (n % i === 0) {\n            largest_prime_factor\
    \ = n / i;\n            n = largest_prime_factor;\n            i = 2;\n      \
    \  }\n    }\n    return largest_prime_factor;\n}\n", "    let i = 2;\n    while\
    \ (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return i;\n}\n", "    let i = 2;\n  \
    \  while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let i\
    \ = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let i: any;\n    let factor: any;\n    let max: any;\n    max = 1;\n    i\
    \ = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            factor =\
    \ i;\n            n = n / factor;\n            while (n % factor === 0) {\n  \
    \              n = n / factor;\n            }\n            max = factor;\n   \
    \     }\n        i = i + 1;\n    }\n    return max;\n}\n", "    let i = 2;\n \
    \   while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n       \
    \ } else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    let i: any;\n    let factors: any;\n    let max: any;\n    let prime:\
    \ any;\n    let primes: any;\n    let result: any;\n    factors = factor(n);\n\
    \    max = Math.max.apply(null, factors);\n    primes = prime_factors(n);\n  \
    \  prime = Math.max.apply(null, primes);\n    result = prime;\n    return result;\n\
    }\n", "    let i: any = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return i;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i\
    \ == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n\
    \    }\n    return i;\n}\n", "    let i: any = 2;\n    while (i <= n) {\n    \
    \    if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return i;\n}\n", "    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n", "    let i = 2;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return i;\n}\n", "    if (n <= 1) {\n\
    \        return undefined;\n    }\n    if (n === 2) {\n        return 2;\n   \
    \ }\n    if (n % 2 === 0) {\n        return largest_prime_factor(n / 2);\n   \
    \ }\n    let i = 3;\n    while (i <= Math.sqrt(n)) {\n        if (n % i === 0)\
    \ {\n            return largest_prime_factor(n / i);\n        }\n        i +=\
    \ 2;\n    }\n    return n;\n}\n", "    let i: any;\n    let max: any;\n    for\
    \ (i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            max = i;\n\
    \            n /= i;\n        }\n    }\n    return max;\n}\n", "    let i = 2;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let i: any;\n    let factors: any;\n    let result: any;\n    factors = [];\n\
    \    for (i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    result = factors[factors.length -\
    \ 1];\n    return result;\n}\n", "    let i = 2;\n    while (i <= n) {\n     \
    \   if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return i;\n}\n", "    let i: any;\n    let max: any;\n\
    \    for (i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            max =\
    \ i;\n            n /= i;\n            i--;\n        }\n    }\n    return max;\n\
    }\n", "    let i: any;\n    let prime: any;\n    let max: any;\n    if (n % 2\
    \ === 0) {\n        max = 2;\n        n = n / 2;\n        while (n % 2 === 0)\
    \ {\n            n = n / 2;\n        }\n    } else {\n        max = 1;\n    }\n\
    \    i = 3;\n    prime = 3;\n    while (n !== 1) {\n        if (n % i === 0) {\n\
    \            n = n / i;\n            max = i;\n            while (n % i === 0)\
    \ {\n                n = n / i;\n            }\n        }\n        i = i + 2;\n\
    \    }\n    return max;\n}\n", "    let i: any;\n    let factors: any[] = [];\n\
    \    for (i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    return factors[factors.length - 1];\n\
    }\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n     \
    \       n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return i;\n}\n", "    let factors = prime_factors(n);\n    return factors[factors.length\
    \ - 1];\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0)\
    \ {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n\
    \    return i;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i\
    \ == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n\
    \    }\n    return i;\n}\n", "    let i: any;\n    let max: any;\n    for (i =\
    \ 2; i <= n; i++) {\n        if (n % i === 0) {\n            max = i;\n      \
    \      n /= i;\n            i--;\n        }\n    }\n    return max;\n}\n", " \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    let i: any;\n    let max: any;\n    for (i = 2; i <= n; i++) {\n  \
    \      while (n % i === 0) {\n            max = i;\n            n /= i;\n    \
    \    }\n    }\n    return max;\n}\n", "    let i: any;\n    let max: any;\n  \
    \  for (i = 2; i < n; i++) {\n        if (n % i === 0) {\n            n /= i;\n\
    \            max = i;\n        }\n    }\n    if (n > max) {\n        max = n;\n\
    \    }\n    return max;\n}\n", "    let i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return i;\n}\n", "    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n", "    let i: any;\n    let largest:\
    \ any;\n    let factor: any;\n    largest = 1;\n    for (i = 2; i <= n; i++) {\n\
    \        if (n % i === 0) {\n            factor = i;\n            while (n % factor\
    \ === 0) {\n                n /= factor;\n            }\n            largest =\
    \ factor;\n        }\n    }\n    return largest;\n}\n", "    let i = 2;\n    while\
    \ (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return i;\n}\n", "    let i: any;\n \
    \   let largest: any;\n    for (i = 2; i <= n; i++) {\n        if (n % i === 0)\
    \ {\n            n /= i;\n            largest = i;\n        }\n    }\n    return\
    \ largest;\n}\n", "    let i: any;\n    let factors: any;\n    let max: any;\n\
    \    let factor: any;\n    factors = [];\n    for (i = 2; i <= n; i++) {\n   \
    \     if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n\
    \        }\n    }\n    max = 0;\n    for (factor of factors) {\n        if (factor\
    \ > max) {\n            max = factor;\n        }\n    }\n    return max;\n}\n",
  "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    let i: any;\n    let max: any;\n    for (i = 2; i < n; i++) {\n   \
    \     if (n % i === 0) {\n            max = n / i;\n            break;\n     \
    \   }\n    }\n    if (max === undefined) {\n        return n;\n    }\n    return\
    \ largest_prime_factor(max);\n}\n", "    let i: any;\n    let factors: any;\n\
    \    let max: any;\n    factors = [];\n    for (i = 2; i <= n; i++) {\n      \
    \  if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n   \
    \     }\n    }\n    max = Math.max.apply(null, factors);\n    return max;\n}\n",
  "    let i: any;\n    let factor: any;\n    let max: any;\n    max = 0;\n    i =\
    \ 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            factor = i;\n\
    \            n = n / factor;\n            if (factor > max) {\n              \
    \  max = factor;\n            }\n        } else {\n            i = i + 1;\n  \
    \      }\n    }\n    return max;\n}\n", "    let i: any;\n    let largest: any;\n\
    \    for (i = 2; i < n; i++) {\n        if (n % i === 0) {\n            n /= i;\n\
    \            largest = i;\n        }\n    }\n    return largest;\n}\n", "    let\
    \ i: any;\n    let largest_prime_factor: any;\n    let prime: any;\n    let prime_factors:\
    \ any;\n    prime_factors = [];\n    prime = 2;\n    while (n > 1) {\n       \
    \ if (n % prime === 0) {\n            prime_factors.push(prime);\n           \
    \ n = n / prime;\n        } else {\n            prime = next_prime(prime);\n \
    \       }\n    }\n    largest_prime_factor = prime_factors[0];\n    for (i = 1;\
    \ i < prime_factors.length; i++) {\n        if (prime_factors[i] > largest_prime_factor)\
    \ {\n            largest_prime_factor = prime_factors[i];\n        }\n    }\n\
    \    return largest_prime_factor;\n}\n", "    let i = 2;\n    while (i * i <=\
    \ n) {\n        if (n % i == 0) {\n            n = n / i;\n        } else {\n\
    \            i = i + 1;\n        }\n    }\n    return n;\n}\n", "    let i = 2;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let i: any;\n    let largest: any;\n    let prime: any;\n    let factor: any;\n\
    \    let factors: any;\n    let is_prime: any;\n    let j: any;\n    let k: any;\n\
    \    let sqrt: any;\n    let is_factor: any;\n    let is_prime_factor: any;\n\
    \    let is_largest_prime_factor: any;\n    let is_largest: any;\n    let is_prime_factor_of:\
    \ any;\n    let is_factor_of: any;\n    let is_prime_of: any;\n    let is_factor_of_n:\
    \ any;\n    let is_prime_of_n: any;\n    let is_prime_factor_of_n: any;\n    let\
    \ is_largest_prime_factor_of: any;\n    let is_largest_prime_factor_of_n: any;\n\
    \    let is_largest_of: any;\n    let is_largest_of_n: any;\n    let is_largest_prime_factor_of_n:\
    \ any;\n    let is_largest_prime_factor_of_n: any;\n    let is_largest_prime_factor_of_n:\
    \ any;\n    let is_largest_prime_factor_of_n: any;\n    let is_largest_prime_factor_of_n:\
    \ any;\n    let is_largest_prime_factor_of_n: any;\n    let is_largest_prime_factor_of_n:\
    \ any;\n    let is_largest_prime_factor_of_n: any;\n    let is_largest_prime_factor_of_n:\
    \ any;\n    let is_largest_prime_factor_of_n: any;\n    let is_largest_prime_factor_of_n:\
    \ any;\n    let is_largest_prime_factor_of_n: any;\n    let is_largest_prime_factor_of_n:\
    \ any;\n    let is_largest_prime_factor_of_n: any;\n    let is_largest_prime_factor_of_n:\
    \ any;\n    let is_largest_prime_factor_of_n: any;", "    let i: any;\n    let\
    \ factors: any;\n    let max: any;\n    let prime: any;\n    factors = [];\n \
    \   for (i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    max = 0;\n    for (i = 0; i < factors.length;\
    \ i++) {\n        prime = true;\n        for (let j = 2; j < factors[i]; j++)\
    \ {\n            if (factors[i] % j === 0) {\n                prime = false;\n\
    \            }\n        }\n        if (prime && factors[i] > max) {\n        \
    \    max = factors[i];\n        }\n    }\n    return max;\n}\n", "    let i =\
    \ 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n \
    \       } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let i: any;\n    let factors: any;\n    let max: any;\n    factors = [];\n\
    \    for (i = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    max = factors[0];\n    for (i = 1;\
    \ i < factors.length; i++) {\n        if (factors[i] > max) {\n            max\
    \ = factors[i];\n        }\n    }\n    return max;\n}\n", "    let i = 2;\n  \
    \  while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let i\
    \ = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i++;\n   \
    \     } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n", " \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    let i: any;\n    let factors: any;\n    let max: any;\n    factors\
    \ = [];\n    for (i = 2; i <= n; i++) {\n        while (n % i === 0) {\n     \
    \       factors.push(i);\n            n /= i;\n        }\n    }\n    max = Math.max.apply(null,\
    \ factors);\n    return max;\n}\n", "    let i: any;\n    let factors: any;\n\
    \    let max: any;\n    factors = [];\n    for (i = 2; i <= n; i++) {\n      \
    \  if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n   \
    \     }\n    }\n    max = 0;\n    for (i = 0; i < factors.length; i++) {\n   \
    \     if (factors[i] > max) {\n            max = factors[i];\n        }\n    }\n\
    \    return max;\n}\n", "    let i: any;\n    let factors: any;\n    let max_factor:\
    \ any;\n    factors = prime_factors(n);\n    max_factor = factors[0];\n    for\
    \ (i = 1; i < factors.length; i++) {\n        if (factors[i] > max_factor) {\n\
    \            max_factor = factors[i];\n        }\n    }\n    return max_factor;\n\
    }\n", "    let i: any;\n    let factors: any;\n    let max: any;\n    factors\
    \ = prime_factors(n);\n    max = 0;\n    for (i = 0; i < factors.length; i++)\
    \ {\n        if (factors[i] > max) {\n            max = factors[i];\n        }\n\
    \    }\n    return max;\n}\n", "    let factor = 2;\n    while (n > factor) {\n\
    \        if (n % factor == 0) {\n            n = n / factor;\n        } else {\n\
    \            factor++;\n        }\n    }\n    return factor;\n}\n", "    let i:\
    \ any;\n    let max: any;\n    for (i = 2; i <= n; i++) {\n        if (n % i ===\
    \ 0) {\n            max = i;\n            n /= i;\n            i = 1;\n      \
    \  }\n    }\n    return max;\n}\n", "    let i: any;\n    let factors: any;\n\
    \    let max: any;\n    let prime: any;\n    factors = [];\n    for (i = 2; i\
    \ <= n; i++) {\n        if (n % i === 0) {\n            factors.push(i);\n   \
    \         n /= i;\n        }\n    }\n    max = factors[0];\n    for (i = 1; i\
    \ < factors.length; i++) {\n        if (factors[i] > max) {\n            max =\
    \ factors[i];\n        }\n    }\n    return max;\n}\n", "    let i: any;\n   \
    \ let factors: any;\n    let max: any;\n    factors = prime_factors(n);\n    max\
    \ = 0;\n    for (i = 0; i < factors.length; i++) {\n        if (factors[i] > max)\
    \ {\n            max = factors[i];\n        }\n    }\n    return max;\n}\n", " \
    \   let i: any;\n    let factors: any = [];\n    for (i = 2; i <= n; i++) {\n\
    \        while (n % i === 0) {\n            factors.push(i);\n            n /=\
    \ i;\n        }\n    }\n    return factors[factors.length - 1];\n}\n", "    let\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i += 1;\n        }\n    }\n    return i;\n\
    }\n", "    let i: any;\n    let max: any;\n    for (i = 2; i <= n; i++) {\n  \
    \      if (n % i === 0) {\n            max = i;\n            n /= i;\n       \
    \     i = 1;\n        }\n    }\n    return max;\n}\n", "    // TODO: Implement\
    \ this function\n    return n;\n}\n", "    let i: any;\n    let largest_prime:\
    \ any;\n    for (i = 2; i <= n; i++) {\n        if (n % i === 0) {\n         \
    \   n /= i;\n            largest_prime = i;\n        }\n    }\n    return largest_prime;\n\
    }\n", "    let i: any;\n    let factor: any;\n    let largest_factor: any;\n \
    \   for (i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            factor\
    \ = i;\n            n /= i;\n            while (n % i === 0) {\n             \
    \   n /= i;\n            }\n            largest_factor = factor;\n        }\n\
    \    }\n    if (largest_factor === undefined) {\n        return n;\n    }\n  \
    \  return largest_factor;\n}\n", "    let i = 2;\n    while (i <= n) {\n     \
    \   if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return i;\n}\n", "    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n", "    let i = 2;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return i;\n}\n", "    let i = 2;\n  \
    \  while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let i:\
    \ any;\n    let largest: any;\n    for (i = 2; i <= n; i++) {\n        if (n %\
    \ i === 0) {\n            largest = i;\n            n /= i;\n            i = 1;\n\
    \        }\n    }\n    return largest;\n}\n", "    let i: any;\n    let largest:\
    \ any;\n    let factor: any;\n    let factors: any;\n    let prime: any;\n   \
    \ let primes: any;\n    let _i: any;\n    let _len: any;\n    factors = [];\n\
    \    primes = [];\n    for (i = 2; i <= n; i++) {\n        if (n % i === 0) {\n\
    \            factors.push(i);\n        }\n    }\n    for (_i = 0, _len = factors.length;\
    \ _i < _len; _i++) {\n        factor = factors[_i];\n        prime = true;\n \
    \       for (i = 2; i <= factor; i++) {\n            if (factor % i === 0 && i\
    \ !== factor) {\n                prime = false;\n            }\n        }\n  \
    \      if (prime) {\n            primes.push(factor);\n        }\n    }\n    largest\
    \ = primes[primes.length - 1];\n    return largest;\n}\n", "    let i = 2;\n \
    \   while (i * i <= n) {\n        if (n % i) {\n            i++;\n        } else\
    \ {\n            n /= i;\n        }\n    }\n    return n;\n}\n", "    let i: any;\n\
    \    let max: any;\n    for (i = 2; i <= n; i++) {\n        if (n % i === 0) {\n\
    \            max = i;\n            n /= i;\n            i = 1;\n        }\n  \
    \  }\n    return max;\n}\n", "    let i: any;\n    let max: any;\n    for (i =\
    \ 2; i <= n; i++) {\n        while (n % i === 0) {\n            max = i;\n   \
    \         n /= i;\n        }\n    }\n    return max;\n}\n", "    let i = 2;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let i: any;\n    let largest_prime: any;\n    for (i = 2; i <= n; i++) {\n\
    \        if (n % i === 0) {\n            n /= i;\n            largest_prime =\
    \ i;\n        }\n    }\n    return largest_prime;\n}\n", "    let i: any;\n  \
    \  let factors: any;\n    let max: any;\n    let prime: any;\n    factors = [];\n\
    \    for (i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    max = factors[0];\n    for (i = 1;\
    \ i < factors.length; i++) {\n        prime = true;\n        for (let j = 2; j\
    \ < factors[i]; j++) {\n            if (factors[i] % j === 0) {\n            \
    \    prime = false;\n                break;\n            }\n        }\n      \
    \  if (prime && factors[i] > max) {\n            max = factors[i];\n        }\n\
    \    }\n    return max;\n}\n", "    let i: any;\n    let max: any;\n    for (i\
    \ = 2; i <= n; i++) {\n        while (n % i === 0) {\n            max = i;\n \
    \           n /= i;\n        }\n    }\n    return max;\n}\n", "    let i: any;\n\
    \    let factors: any;\n    let max: any;\n    factors = [];\n    for (i = 2;\
    \ i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    max = factors[0];\n    for (i = 1;\
    \ i < factors.length; i++) {\n        if (factors[i] > max) {\n            max\
    \ = factors[i];\n        }\n    }\n    return max;\n}\n", "    let i: any;\n \
    \   let factors: any;\n    let max: any;\n    let prime: any;\n    factors = [];\n\
    \    for (i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    max = factors[0];\n    for (i = 1;\
    \ i < factors.length; i++) {\n        prime = true;\n        for (let j = 2; j\
    \ < factors[i]; j++) {\n            if (factors[i] % j === 0) {\n            \
    \    prime = false;\n                break;\n            }\n        }\n      \
    \  if (prime && factors[i] > max) {\n            max = factors[i];\n        }\n\
    \    }\n    return max;\n}\n", "    let i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return i;\n}\n", "    let i: any;\n    let factors: any;\n\
    \    let max: any;\n    factors = [];\n    for (i = 2; i <= n; i++) {\n      \
    \  while (n % i === 0) {\n            factors.push(i);\n            n /= i;\n\
    \        }\n    }\n    max = factors[0];\n    for (i = 1; i < factors.length;\
    \ i++) {\n        if (factors[i] > max) {\n            max = factors[i];\n   \
    \     }\n    }\n    return max;\n}\n", "    let i: any = 2;\n    while (i <= n)\
    \ {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n      \
    \      i++;\n        }\n    }\n    return i;\n}\n", "    let i = 2;\n    while\
    \ (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return i;\n}\n", "    let i: any;\n \
    \   let max: any;\n    for (i = 2; i <= n; i++) {\n        while (n % i === 0)\
    \ {\n            max = i;\n            n /= i;\n        }\n    }\n    return max;\n\
    }\n", "    let i: any;\n    let max: any;\n    for (i = 2; i <= n; i++) {\n  \
    \      if (n % i === 0) {\n            n /= i;\n            max = i;\n       \
    \ }\n    }\n    return max;\n}\n", "    let i = 2;\n    while (i <= n) {\n   \
    \     if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return i;\n}\n", "    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i += 1;\n        }\n    }\n    return i;\n}\n", "    let i: any;\n    let factors:\
    \ any = [];\n    for (i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n            n /= i;\n        }\n    }\n    return factors[factors.length\
    \ - 1];\n}\n", "    let i: any;\n    let factors: any;\n    let max: any;\n  \
    \  factors = prime_factors(n);\n    max = 0;\n    for (i = 0; i < factors.length;\
    \ i++) {\n        if (factors[i] > max) {\n            max = factors[i];\n   \
    \     }\n    }\n    return max;\n}\n", "    let prime_factors = prime_factors_of(n);\n\
    \    return prime_factors[prime_factors.length - 1];\n}\n", "    if (n === 1)\
    \ {\n        return 1;\n    }\n    let i = 2;\n    while (i <= n) {\n        if\
    \ (n % i === 0) {\n            n /= i;\n        } else {\n            i++;\n \
    \       }\n    }\n    return i;\n}\n", "    let i: any;\n    let max: any;\n \
    \   for (i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            max =\
    \ i;\n            n /= i;\n            i--;\n        }\n    }\n    return max;\n\
    }\n", "    let i: any;\n    let factors: any;\n    let max: any;\n    factors\
    \ = prime_factors(n);\n    max = 0;\n    for (i = 0; i < factors.length; i++)\
    \ {\n        if (factors[i] > max) {\n            max = factors[i];\n        }\n\
    \    }\n    return max;\n}\n", "    let i = 2;\n    while (i <= n) {\n       \
    \ if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n\
    \        }\n    }\n    return i;\n}\n", "    let i: any;\n    let factors: any\
    \ = [];\n    for (i = 1; i <= n; i++) {\n        if (n % i === 0) {\n        \
    \    factors.push(i);\n        }\n    }\n    let largest_prime_factor: any;\n\
    \    for (i = factors.length - 1; i >= 0; i--) {\n        if (is_prime(factors[i]))\
    \ {\n            largest_prime_factor = factors[i];\n            break;\n    \
    \    }\n    }\n    return largest_prime_factor;\n}\n", "    let i: any;\n    let\
    \ factors: any;\n    let max: any;\n    factors = [];\n    for (i = 2; i <= n;\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   n /= i;\n        }\n    }\n    max = factors[0];\n    for (i = 1; i < factors.length;\
    \ i++) {\n        if (factors[i] > max) {\n            max = factors[i];\n   \
    \     }\n    }\n    return max;\n}\n", "    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n", "    let i = 2;\n    while (i\
    \ <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return i;\n}\n", "    let i: any;\n \
    \   let factors: any;\n    let max: any;\n    let prime: any;\n    let _i: any;\n\
    \    let _len: any;\n    factors = prime_factors(n);\n    max = 0;\n    for (_i\
    \ = 0, _len = factors.length; _i < _len; _i++) {\n        i = factors[_i];\n \
    \       if (i > max) {\n            max = i;\n        }\n    }\n    prime = true;\n\
    \    for (i = 2; i < max; i++) {\n        if (max % i === 0) {\n            prime\
    \ = false;\n        }\n    }\n    if (prime) {\n        return max;\n    } else\
    \ {\n        return \"Not a prime\";\n    }\n}\n", "    let i: any = 2;\n    while\
    \ (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return i;\n}\n", "    let i = 2;\n  \
    \  while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let i\
    \ = 2;\n    while (i * i <= n) {\n        if (n % i) {\n            i++;\n   \
    \     } else {\n            n /= i;\n        }\n    }\n    return n;\n}\n", " \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n     \
    \       n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return i;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i\
    \ == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n\
    \    }\n    return i;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if\
    \ (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n  \
    \      }\n    }\n    return i;\n}\n", "    let i: any;\n    let max: any;\n  \
    \  for (i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            max = i;\n\
    \            n /= i;\n            i = 1;\n        }\n    }\n    return max;\n\
    }\n", "    let factors = prime_factors(n);\n    return factors[factors.length\
    \ - 1];\n}\n", "    let i: any;\n    let factor: any;\n    let max: any;\n   \
    \ max = 1;\n    i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n   \
    \         factor = i;\n            n = n / factor;\n            if (factor > max)\
    \ {\n                max = factor;\n            }\n        } else {\n        \
    \    i += 1;\n        }\n    }\n    return max;\n}\n", "    let i = 2;\n    while\
    \ (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return i;\n}\n", "    let i: any;\n \
    \   let factors: any;\n    let max: any;\n    let prime: any;\n    let prime_factors:\
    \ any;\n    factors = factor(n);\n    max = Math.max.apply(null, factors);\n \
    \   prime_factors = [];\n    for (i = 0; i < factors.length; i++) {\n        prime\
    \ = true;\n        for (let j = 0; j < factors.length; j++) {\n            if\
    \ (i !== j && factors[i] % factors[j] === 0) {\n                prime = false;\n\
    \                break;\n            }\n        }\n        if (prime) {\n    \
    \        prime_factors.push(factors[i]);\n        }\n    }\n    return Math.max.apply(null,\
    \ prime_factors);\n}\n", "    let i: any;\n    let max: any;\n    for (i = 2;\
    \ i <= n; i++) {\n        while (n % i === 0) {\n            max = i;\n      \
    \      n /= i;\n        }\n    }\n    return max;\n}\n", "    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let i\
    \ = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let i: any;\n    let factors: any = [];\n    for (i = 2; i <= n; i++) {\n\
    \        while (n % i === 0) {\n            factors.push(i);\n            n /=\
    \ i;\n        }\n    }\n    return factors.pop();\n}\n", "    let i = 2;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let i\
    \ = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let i: any;\n    let max: any;\n    for (i = 2; i <= n; i++) {\n        if\
    \ (n % i === 0) {\n            n /= i;\n            max = i;\n        }\n    }\n\
    \    return max;\n}\n", "    let largest_prime = 1;\n    let i = 2;\n    while\
    \ (i <= n) {\n        if (n % i == 0) {\n            largest_prime = i;\n    \
    \        n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest_prime;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n %\
    \ i == 0) {\n            n /= i;\n        } else {\n            i++;\n       \
    \ }\n    }\n    return i;\n}\n", "    let i: any;\n    let j: any;\n    let k:\
    \ any;\n    let l: any;\n    let m: any;\n    let o: any;\n    let p: any;\n \
    \   let q: any;\n    let r: any;\n    let s: any;\n    let t: any;\n    let u:\
    \ any;\n    let v: any;\n    let w: any;\n    let x: any;\n    let y: any;\n \
    \   let z: any;\n    let aa: any;\n    let ab: any;\n    let ac: any;\n    let\
    \ ad: any;\n    let ae: any;\n    let af: any;\n    let ag: any;\n    let ah:\
    \ any;\n    let ai: any;\n    let aj: any;\n    let ak: any;\n    let al: any;\n\
    \    let am: any;\n    let an: any;\n    let ao: any;\n    let ap: any;\n    let\
    \ aq: any;\n    let ar: any;\n    let as: any;\n    let at: any;\n    let au:\
    \ any;\n    let av: any;\n    let aw: any;\n    let ax: any;\n    let ay: any;\n\
    \    let az: any;\n    let ba: any;\n    let bb: any;\n    let bc: any;\n    let\
    \ bd: any;\n    let be: any;\n    let bf: any;\n    let bg: any;\n    let bh:\
    \ any;\n    let bi: any;\n    let bj: any;\n    let bk: any;\n    let bl: any;\n\
    \    let bm: any;\n    let bn: any;\n    let bo: any;\n    let bp: any;\n    let\
    \ bq: any;\n    let br: any;\n    let bs: any;\n    let bt: any;\n    let bu:\
    \ any;\n    let bv: any;\n    let bw: any;\n    let bx: any;\n    let by: any;\n\
    \    let bz: any;\n    let ca: any", "    let i = 2;\n    while (i <= n) {\n \
    \       if (n % i == 0) {\n            n /= i;\n        } else {\n           \
    \ i++;\n        }\n    }\n    return i;\n}\n", "    let i = 2;\n    while (i *\
    \ i <= n) {\n        if (n % i === 0) {\n            n = n / i;\n        } else\
    \ {\n            i++;\n        }\n    }\n    return n;\n}\n", "    let i: any;\n\
    \    let max: any;\n    for (i = 2; i <= n; i++) {\n        if (n % i === 0) {\n\
    \            n /= i;\n            max = i;\n        }\n    }\n    return max;\n\
    }\n", "    let i: any = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return i;\n}\n", "    let factor = 2;\n    while (n > factor) {\n        if\
    \ (n % factor == 0) {\n            n = n / factor;\n        } else {\n       \
    \     factor++;\n        }\n    }\n    return factor;\n}\n", "    let i = 2;\n\
    \    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n      \
    \  } else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    let i: any;\n    let factors: any;\n    let max: any;\n    factors\
    \ = prime_factors(n);\n    max = 0;\n    for (i = 0; i < factors.length; i++)\
    \ {\n        if (factors[i] > max) {\n            max = factors[i];\n        }\n\
    \    }\n    return max;\n}\n", "    let largest = 0;\n    let i = 2;\n    while\
    \ (i <= n) {\n        if (n % i === 0) {\n            largest = i;\n         \
    \   n = n / i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ largest;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i ==\
    \ 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n \
    \   }\n    return i;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if\
    \ (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n  \
    \      }\n    }\n    return i;\n}\n", "    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n", "    let i: any;\n    let j: any;\n\
    \    let largest: any;\n    let prime: any;\n    largest = 1;\n    for (i = 2;\
    \ i <= n; i++) {\n        prime = true;\n        for (j = 2; j < i; j++) {\n \
    \           if (i % j === 0) {\n                prime = false;\n             \
    \   break;\n            }\n        }\n        if (prime && n % i === 0) {\n  \
    \          largest = i;\n        }\n    }\n    return largest;\n}\n", "    let\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n\
    \        } else {\n            i++;\n        }\n    }\n    return i;\n}\n", " \
    \   let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n     \
    \       n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n", "    let i: any;\n    let factors: any;\n    let max: any;\n    factors\
    \ = [];\n    for (i = 2; i <= n; i++) {\n        while (n % i === 0) {\n     \
    \       factors.push(i);\n            n /= i;\n        }\n    }\n    max = Math.max.apply(null,\
    \ factors);\n    return max;\n}\n", "    let i: any;\n    let factors: any[] =\
    \ [];\n    let max: any;\n    for (i = 2; i <= n; i++) {\n        while (n % i\
    \ === 0) {\n            factors.push(i);\n            n /= i;\n        }\n   \
    \ }\n    max = Math.max.apply(Math, factors);\n    return max;\n}\n", "    let\
    \ i: any;\n    let factors: any;\n    let max: any;\n    factors = [];\n    for\
    \ (i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    max = factors[0];\n    for (i = 1;\
    \ i < factors.length; i++) {\n        if (factors[i] > max) {\n            max\
    \ = factors[i];\n        }\n    }\n    return max;\n}\n", "    let i = 2;\n  \
    \  while (i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        }\
    \ else {\n            i++;\n        }\n    }\n    return i;\n}\n", "    let i:\
    \ any;\n    let factor: any;\n    let max: any;\n    max = 1;\n    i = 2;\n  \
    \  while (i <= n) {\n        if (n % i === 0) {\n            factor = i;\n   \
    \         n = n / factor;\n            while (n % factor === 0) {\n          \
    \      n = n / factor;\n            }\n            max = factor;\n        }\n\
    \        i += 1;\n    }\n    return max;\n}\n", "    let i: any;\n    let factors:\
    \ any = [];\n    for (i = 2; i <= n; i++) {\n        while (n % i === 0) {\n \
    \           factors.push(i);\n            n /= i;\n        }\n    }\n    return\
    \ factors[factors.length - 1];\n}\n", "    let i = 2;\n    while (i <= n) {\n\
    \        if (n % i == 0) {\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return i;\n}\n", "    let i: any;\n    let max:\
    \ any;\n    for (i = 2; i <= n; i++) {\n        while (n % i === 0) {\n      \
    \      max = i;\n            n /= i;\n        }\n    }\n    return max;\n}\n",
  "    var i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n     \
    \       n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n\
    \            n /= i;\n        } else {\n            i++;\n        }\n    }\n \
    \   return i;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if (n % i\
    \ == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n\
    \    }\n    return i;\n}\n", "    let i: any;\n    let max: any;\n    for (i =\
    \ 2; i <= n; i++) {\n        while (n % i === 0) {\n            max = i;\n   \
    \         n /= i;\n        }\n    }\n    return max;\n}\n", "    let factors =\
    \ [];\n    let i = 2;\n    while (n > 1) {\n        while (n % i === 0) {\n  \
    \          factors.push(i);\n            n = n / i;\n        }\n        i = i\
    \ + 1;\n    }\n    return factors[factors.length - 1];\n}\n", "    let largest_prime_factor\
    \ = 1;\n    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n    \
    \        largest_prime_factor = i;\n            n /= i;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    return largest_prime_factor;\n}\n",
  "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            n\
    \ /= i;\n        } else {\n            i++;\n        }\n    }\n    return i;\n\
    }\n", "    let i: any;\n    let largest: any;\n    for (i = 2; i <= n; i++) {\n\
    \        if (n % i === 0) {\n            largest = i;\n            n /= i;\n \
    \           i = 1;\n        }\n    }\n    return largest;\n}\n", "    let i: any;\n\
    \    let max: any;\n    for (i = 2; i <= n; i++) {\n        if (n % i === 0) {\n\
    \            max = i;\n            n /= i;\n            i = 1;\n        }\n  \
    \  }\n    return max;\n}\n", "    let i = 2;\n    while (i <= n) {\n        if\
    \ (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n  \
    \      }\n    }\n    return i;\n}\n", "    let factors = [];\n    let i = 2;\n\
    \    while (n > 1) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            n = n / i;\n        } else {\n            i++;\n        }\n    }\n\
    \    return factors[factors.length - 1];\n}\n", "    let i: any;\n    let factors:\
    \ any;\n    let max: any;\n    factors = [];\n    for (i = 2; i <= n; i++) {\n\
    \        if (n % i === 0) {\n            factors.push(i);\n            n /= i;\n\
    \        }\n    }\n    max = Math.max.apply(null, factors);\n    return max;\n\
    }\n", "    let i: any;\n    let j: any;\n    let k: any;\n    let l: any;\n  \
    \  let m: any;\n    let o: any;\n    let p: any;\n    let q: any;\n    let r:\
    \ any;\n    let s: any;\n    let t: any;\n    let u: any;\n    let v: any;\n \
    \   let w: any;\n    let x: any;\n    let y: any;\n    let z: any;\n    let aa:\
    \ any;\n    let ab: any;\n    let ac: any;\n    let ad: any;\n    let ae: any;\n\
    \    let af: any;\n    let ag: any;\n    let ah: any;\n    let ai: any;\n    let\
    \ aj: any;\n    let ak: any;\n    let al: any;\n    let am: any;\n    let an:\
    \ any;\n    let ao: any;\n    let ap: any;\n    let aq: any;\n    let ar: any;\n\
    \    let as: any;\n    let at: any;\n    let au: any;\n    let av: any;\n    let\
    \ aw: any;\n    let ax: any;\n    let ay: any;\n    let az: any;\n    let ba:\
    \ any;\n    let bb: any;\n    let bc: any;\n    let bd: any;\n    let be: any;\n\
    \    let bf: any;\n    let bg: any;\n    let bh: any;\n    let bi: any;\n    let\
    \ bj: any;\n    let bk: any;\n    let bl: any;\n    let bm: any;\n    let bn:\
    \ any;\n    let bo: any;\n    let bp: any;\n    let bq: any;\n    let br: any;\n\
    \    let bs: any;\n    let bt: any;\n    let bu: any;\n    let bv: any;\n    let\
    \ bw: any;\n    let bx: any;\n    let by: any;\n    let bz: any;\n    let ca:\
    \ any", "    let i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n   \
    \         n /= i;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ i;\n}\n", "    let i: any;\n    let factor: any;\n    let max: any;\n    max\
    \ = 1;\n    i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n       \
    \     factor = i;\n            n = n / factor;\n            if (factor > max)\
    \ {\n                max = factor;\n            }\n        } else {\n        \
    \    i = i + 1;\n        }\n    }\n    return max;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
