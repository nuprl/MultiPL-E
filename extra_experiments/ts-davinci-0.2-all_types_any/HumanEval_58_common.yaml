name: HumanEval_58_common
language: ts
prompt: "//Return sorted unique common elements for two arrays.\n// >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
  \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1: any, l2: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = common;\n  assert.deepEqual(candidate([1, 4, 3, 34,\
  \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5,\
  \ 3, 2, 8], [3, 2]),[2, 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2,\
  \ 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 8], []),[]);\n}\n\ntest();"
completions: ["    let result: any = [];\n    for (let i = 0; i < l1.length; i++)\
    \ {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n            }\n        }\n  \
    \  }\n    return result;\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return Array.from(new Set(l1.filter(x => l2.includes(x))));\n\
    }\n", "    return [...new Set(l1)].filter(x => l2.includes(x));\n}\n", "    return\
    \ l1.filter(function (n: any) {\n        return l2.indexOf(n) !== -1;\n    }).sort(function\
    \ (a: any, b: any) {\n        return a - b;\n    });\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(function\
    \ (n: any) {\n        return l2.indexOf(n) !== -1;\n    }).sort(function (a: any,\
    \ b: any) {\n        return a - b;\n    });\n}\n", "    return [...new Set(l1)].filter(x\
    \ => new Set(l2).has(x));\n}\n", "  return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1)].filter(x => l2.includes(x));\n\
    }\n", "    return [...new Set(l1)].filter(x => new Set(l2).has(x));\n}\n", " \
    \   return [...new Set(l1)].filter(x => l2.includes(x));\n}\n", "    let result:\
    \ any = [];\n    for (let i = 0; i < l1.length; i++) {\n        for (let j = 0;\
    \ j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    return [...new\
    \ Set(l1)].filter(x => l2.includes(x));\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b).filter((x, i, a) => a.indexOf(x) === i);\n}\n", "    let result: any\
    \ = [];\n    for (let i: number = 0; i < l1.length; i++) {\n        for (let j:\
    \ number = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n    \
    \            result.push(l1[i]);\n            }\n        }\n    }\n    return\
    \ result;\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b).filter((x, i, a) => a.indexOf(x) === i);\n}\n", "    let l3 = [];\n    for\
    \ (let i = 0; i < l1.length; i++) {\n        for (let j = 0; j < l2.length; j++)\
    \ {\n            if (l1[i] === l2[j]) {\n                l3.push(l1[i]);\n   \
    \         }\n        }\n    }\n    return l3;\n}\n", "    return [...new Set(l1)].filter(x\
    \ => l2.includes(x));\n}\n", "    let result: any = [];\n    for (let i: number\
    \ = 0; i < l1.length; i++) {\n        for (let j: number = 0; j < l2.length; j++)\
    \ {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    let result: any\
    \ = [];\n    for (let i = 0; i < l1.length; i++) {\n        for (let j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    let result: any\
    \ = [];\n    for (let i = 0; i < l1.length; i++) {\n        for (let j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    return [...new\
    \ Set(l1)].filter(x => l2.includes(x));\n}\n", "    return [...new Set(l1)].filter(x\
    \ => l2.includes(x));\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1)].filter(x => new Set(l2).has(x));\n\
    }\n", "    let result: any = [];\n    for (let i = 0; i < l1.length; i++) {\n\
    \        for (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j])\
    \ {\n                result.push(l1[i]);\n            }\n        }\n    }\n  \
    \  return result;\n}\n", "    return l1.filter(function (n: any) {\n        return\
    \ l2.indexOf(n) !== -1;\n    }).sort(function (a: any, b: any) {\n        return\
    \ a - b;\n    });\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b).filter((x, i, a) => a.indexOf(x) === i);\n}\n", "    return [...new\
    \ Set(l1)].filter(x => l2.includes(x));\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    let l3 = [];\n    for (let i = 0; i < l1.length; i++)\
    \ {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                l3.push(l1[i]);\n            }\n        }\n    }\n\
    \    return l3;\n}\n", "    var l3 = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] == l2[j])\
    \ {\n                l3.push(l1[i]);\n            }\n        }\n    }\n    return\
    \ l3;\n}\n", "    let result: any = [];\n    l1.forEach(function (item: any) {\n\
    \        if (l2.indexOf(item) !== -1) {\n            result.push(item);\n    \
    \    }\n    });\n    return result.sort();\n}\n", "    return [...new Set(l1)].filter(x\
    \ => l2.includes(x));\n}\n", "    return [...new Set(l1)].filter(x => l2.includes(x));\n\
    }\n", "    let result = [];\n    for (let i = 0; i < l1.length; i++) {\n     \
    \   for (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n\
    \                result.push(l1[i]);\n            }\n        }\n    }\n    return\
    \ result;\n}\n", "    return l1.filter(function (n: any) {\n        return l2.indexOf(n)\
    \ !== -1;\n    }).sort(function (a: any, b: any) {\n        return a - b;\n  \
    \  });\n}\n", "    return l1.filter(function (n: any) {\n        return l2.indexOf(n)\
    \ !== -1;\n    }).sort(function (a: any, b: any) {\n        return a - b;\n  \
    \  });\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n\
    }\n", "    return [...new Set(l1)].filter(x => new Set(l2).has(x));\n}\n", " \
    \   let l3 = [];\n    for (let i = 0; i < l1.length; i++) {\n        for (let\
    \ j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n         \
    \       l3.push(l1[i]);\n            }\n        }\n    }\n    return l3;\n}\n",
  "    let result: any = [];\n    for (let i = 0; i < l1.length; i++) {\n        for\
    \ (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n    \
    \            result.push(l1[i]);\n            }\n        }\n    }\n    return\
    \ result;\n}\n", "    let result: any = [];\n    for (let i = 0; i < l1.length;\
    \ i++) {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(function (n: any) {\n        return l2.indexOf(n)\
    \ !== -1;\n    }).sort(function (a: any, b: any) {\n        return a - b;\n  \
    \  });\n}\n", "    return l1.filter(function (n: any) {\n        return l2.indexOf(n)\
    \ !== -1;\n    }).sort(function (a: any, b: any) {\n        return a - b;\n  \
    \  });\n}\n", "    let result: any = [];\n    for (let i = 0; i < l1.length; i++)\
    \ {\n        if (l2.indexOf(l1[i]) > -1) {\n            result.push(l1[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    let l1Set = new Set(l1);\n \
    \   let l2Set = new Set(l2);\n    let commonSet = new Set();\n    for (let item\
    \ of l1Set) {\n        if (l2Set.has(item)) {\n            commonSet.add(item);\n\
    \        }\n    }\n    return Array.from(commonSet);\n}\n", "    return [...new\
    \ Set(l1)].filter(x => new Set(l2).has(x));\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return [...new Set(l1)].filter(x\
    \ => l2.includes(x));\n}\n", "    let result: any = [];\n    for (let i = 0; i\
    \ < l1.length; i++) {\n        for (let j = 0; j < l2.length; j++) {\n       \
    \     if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n          \
    \  }\n        }\n    }\n    return result;\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "  return [...new Set(l1)].filter(x => new Set(l2).has(x));\n\
    }\n", "    return l1.filter(function (n: any) {\n        return l2.indexOf(n)\
    \ !== -1;\n    });\n}\n", "    let result: any = [];\n    for (let i = 0; i <\
    \ l1.length; i++) {\n        for (let j = 0; j < l2.length; j++) {\n         \
    \   if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n            }\n\
    \        }\n    }\n    return result;\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return [...new Set(l1)].filter(x => new Set(l2).has(x));\n\
    }\n", "    let l3 = [];\n    for (let i = 0; i < l1.length; i++) {\n        for\
    \ (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n    \
    \            l3.push(l1[i]);\n            }\n        }\n    }\n    return l3;\n\
    }\n", "    let result: any = [];\n    for (let i: number = 0; i < l1.length; i++)\
    \ {\n        for (let j: number = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    let result = [];\n    for (let i = 0; i\
    \ < l1.length; i++) {\n        for (let j = 0; j < l2.length; j++) {\n       \
    \     if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n          \
    \  }\n        }\n    }\n    return result;\n}\n", "    return l1.filter(function\
    \ (n: any) {\n        return l2.indexOf(n) !== -1;\n    }).sort(function (a: any,\
    \ b: any) {\n        return a - b;\n    });\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b).filter((x, i, a) => a.indexOf(x) === i);\n}\n", "    return l1.filter(function\
    \ (n: any) {\n        return l2.indexOf(n) !== -1;\n    }).sort(function (a: any,\
    \ b: any) {\n        return a - b;\n    });\n}\n", "    return l1.filter(function\
    \ (n: any) {\n        return l2.indexOf(n) !== -1;\n    }).sort(function (a: any,\
    \ b: any) {\n        return a - b;\n    });\n}\n", "    return [...new Set(l1)].filter(x\
    \ => new Set(l2).has(x));\n}\n", "  return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) =>\
    \ a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n\
    }\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n",
  "    return l1.filter(function (n: any) {\n        return l2.indexOf(n) !== -1;\n\
    \    }).sort(function (a: any, b: any) {\n        return a - b;\n    });\n}\n",
  "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return\
    \ l1.filter(function (n: any) {\n        return l2.indexOf(n) !== -1;\n    }).sort(function\
    \ (a: any, b: any) {\n        return a - b;\n    });\n}\n", "    return [...new\
    \ Set(l1)].filter(x => new Set(l2).has(x));\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "  return [...new Set(l1)].filter(x\
    \ => l2.includes(x));\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1)].filter(x => new Set(l2).has(x));\n\
    }\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n",
  "    return l1.filter(function (n: any) {\n        return l2.indexOf(n) !== -1;\n\
    \    }).sort(function (a: any, b: any) {\n        return a - b;\n    });\n}\n",
  "    let result: any = [];\n    for (let i = 0; i < l1.length; i++) {\n        for\
    \ (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n    \
    \            result.push(l1[i]);\n            }\n        }\n    }\n    return\
    \ result;\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b);\n}\n", "    let l3 = [];\n    for (let i = 0; i < l1.length; i++) {\n  \
    \      for (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j])\
    \ {\n                l3.push(l1[i]);\n            }\n        }\n    }\n    return\
    \ l3;\n}\n", "    return l1.filter(function (n: any) {\n        return l2.indexOf(n)\
    \ !== -1;\n    }).sort(function (a: any, b: any) {\n        return a - b;\n  \
    \  });\n}\n", "  return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n\
    }\n", "    let result: any = [];\n    for (let i: number = 0; i < l1.length; i++)\
    \ {\n        for (let j: number = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    let res: any = [];\n    for (let i = 0; i < l1.length;\
    \ i++) {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                res.push(l1[i]);\n            }\n        }\n \
    \   }\n    return res;\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1)].filter(x => new Set(l2).has(x));\n\
    }\n", "    return [...new Set(l1)].filter(x => l2.includes(x));\n}\n", "    let\
    \ result = [];\n    for (let i = 0; i < l1.length; i++) {\n        for (let j\
    \ = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n           \
    \     result.push(l1[i]);\n            }\n        }\n    }\n    return result;\n\
    }\n", "    return l1.filter(function (n: any) {\n        return l2.indexOf(n)\
    \ !== -1;\n    }).sort(function (a: any, b: any) {\n        return a - b;\n  \
    \  });\n}\n", "    return l1.filter(function (n: any) {\n        return l2.indexOf(n)\
    \ !== -1;\n    }).sort(function (a: any, b: any) {\n        return a - b;\n  \
    \  });\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n\
    }\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n",
  "    let l3 = [];\n    for (let i = 0; i < l1.length; i++) {\n        for (let j\
    \ = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n           \
    \     l3.push(l1[i]);\n            }\n        }\n    }\n    return l3;\n}\n",
  "    let result: any = [];\n    for (let i: number = 0; i < l1.length; i++) {\n\
    \        for (let j: number = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(function (n: any) {\n        return\
    \ l2.indexOf(n) !== -1;\n    }).sort(function (a: any, b: any) {\n        return\
    \ a - b;\n    });\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return [...new Set(l1)].filter(x => new Set(l2).has(x));\n\
    }\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n",
  "    return [...new Set(l1)].filter(x => new Set(l2).has(x));\n}\n", "    return\
    \ l1.filter(function (n: any) {\n        return l2.indexOf(n) !== -1;\n    }).sort(function\
    \ (a: any, b: any) {\n        return a - b;\n    });\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    let result: any = [];\n\
    \    for (let i = 0; i < l1.length; i++) {\n        for (let j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b).filter((x, i, a) => a.indexOf(x) ===\
    \ i);\n}\n", "    return [...new Set(l1)].filter(x => l2.includes(x));\n}\n",
  "    return [...new Set(l1)].filter(x => l2.includes(x));\n}\n", "    return l1.filter(function\
    \ (n: any) {\n        return l2.indexOf(n) !== -1;\n    }).sort(function (a: any,\
    \ b: any) {\n        return a - b;\n    });\n}\n", "    return [...new Set(l1)].filter(x\
    \ => l2.includes(x));\n}\n", "    let l3 = [];\n    for (let i = 0; i < l1.length;\
    \ i++) {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                l3.push(l1[i]);\n            }\n        }\n  \
    \  }\n    return l3;\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(function (n: any) {\n        return\
    \ l2.indexOf(n) !== -1;\n    }).sort(function (a: any, b: any) {\n        return\
    \ a - b;\n    });\n}\n", "  let result: any = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
    \ {\n        result.push(l1[i]);\n      }\n    }\n  }\n  return result;\n}\n",
  "    let result: any = [];\n    for (let i = 0; i < l1.length; i++) {\n        for\
    \ (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n    \
    \            result.push(l1[i]);\n            }\n        }\n    }\n    return\
    \ result;\n}\n", "    return [...new Set(l1)].filter(x => l2.includes(x));\n}\n",
  "    return [...new Set(l1)].filter(x => new Set(l2).has(x));\n}\n", "    return\
    \ [...new Set(l1)].filter(x => l2.includes(x));\n}\n", "    let result: any =\
    \ [];\n    for (let i = 0; i < l1.length; i++) {\n        for (let j = 0; j <\
    \ l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return [...new Set(l1)].filter(x\
    \ => new Set(l2).has(x));\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    let result: any = [];\n    for (let i: number = 0;\
    \ i < l1.length; i++) {\n        for (let j: number = 0; j < l2.length; j++) {\n\
    \            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n   \
    \         }\n        }\n    }\n    return result;\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    let result: any = [];\n    for (let i = 0; i < l1.length;\
    \ i++) {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return Array.from(new Set(l1.filter(x => l2.includes(x))));\n\
    }\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n",
  "    let result: any = [];\n    for (let i = 0; i < l1.length; i++) {\n        for\
    \ (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n    \
    \            result.push(l1[i]);\n            }\n        }\n    }\n    return\
    \ result;\n}\n", "    let l3 = [];\n    for (let i = 0; i < l1.length; i++) {\n\
    \        for (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j])\
    \ {\n                l3.push(l1[i]);\n            }\n        }\n    }\n    return\
    \ l3;\n}\n", "    let result: any = [];\n    for (let i = 0; i < l1.length; i++)\
    \ {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n            }\n        }\n  \
    \  }\n    return result;\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    let result: any = [];\n    for (let i = 0; i < l1.length;\
    \ i++) {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1)].filter(x => l2.includes(x));\n\
    }\n", "    return l1.filter(function (n: any) {\n        return l2.indexOf(n)\
    \ !== -1;\n    }).sort(function (a: any, b: any) {\n        return a - b;\n  \
    \  });\n}\n", "    return [...new Set(l1)].filter(x => new Set(l2).has(x));\n\
    }\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b).filter((x,\
    \ i, a) => a.indexOf(x) === i);\n}\n", "    return [...new Set(l1)].filter(x =>\
    \ new Set(l2).has(x));\n}\n", "    return l1.filter(function (n: any) {\n    \
    \    return l2.indexOf(n) !== -1;\n    }).sort(function (a: any, b: any) {\n \
    \       return a - b;\n    });\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "  let result: any = [];\n  for (let i = 0; i < l1.length;\
    \ i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (l1[i] === l2[j])\
    \ {\n        result.push(l1[i]);\n      }\n    }\n  }\n  return result;\n}\n",
  "    let l3 = l1.filter(x => l2.includes(x));\n    return l3.filter((x, i) => l3.indexOf(x)\
    \ === i);\n}\n", "  return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n\
    }\n", "    return l1.filter(function (value: any) {\n        return l2.indexOf(value)\
    \ !== -1;\n    }).sort().filter(function (value: any, index: any, array: any)\
    \ {\n        return array.indexOf(value) === index;\n    });\n}\n", "    let l3\
    \ = [];\n    for (let i = 0; i < l1.length; i++) {\n        for (let j = 0; j\
    \ < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n                l3.push(l1[i]);\n\
    \            }\n        }\n    }\n    return l3;\n}\n", "    return [...new Set(l1)].filter(x\
    \ => new Set(l2).has(x));\n}\n", "    return l1.filter(function (n: any) {\n \
    \       return l2.indexOf(n) !== -1;\n    }).sort(function (a: any, b: any) {\n\
    \        return a - b;\n    });\n}\n", "  return [...new Set(l1)].filter(x =>\
    \ l2.includes(x));\n}\n", "    return [...new Set(l1)].filter(x => l2.includes(x));\n\
    }\n", "    return l1.filter(x => l2.includes(x)).sort((a, b) => a - b);\n}\n",
  "    return l1.filter(function (n: any) {\n        return l2.indexOf(n) !== -1;\n\
    \    }).sort(function (a: any, b: any) {\n        return a - b;\n    });\n}\n",
  "    let result: any = [];\n    for (let i = 0; i < l1.length; i++) {\n        for\
    \ (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n    \
    \            result.push(l1[i]);\n            }\n        }\n    }\n    return\
    \ result;\n}\n", "    return l1.filter(function (n: any) {\n        return l2.indexOf(n)\
    \ !== -1;\n    }).sort(function (a: any, b: any) {\n        return a - b;\n  \
    \  });\n}\n", "    var result: any = [];\n    for (var i = 0; i < l1.length; i++)\
    \ {\n        for (var j = 0; j < l2.length; j++) {\n            if (l1[i] ===\
    \ l2[j]) {\n                result.push(l1[i]);\n            }\n        }\n  \
    \  }\n    return result;\n}\n", "    return l1.filter(function (n: any) {\n  \
    \      return l2.indexOf(n) !== -1;\n    }).sort(function (a: any, b: any) {\n\
    \        return a - b;\n    });\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(function (n: any) {\n        return\
    \ l2.indexOf(n) !== -1;\n    }).sort(function (a: any, b: any) {\n        return\
    \ a - b;\n    });\n}\n", "    let result: any = [];\n    for (let i: number =\
    \ 0; i < l1.length; i++) {\n        for (let j: number = 0; j < l2.length; j++)\
    \ {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    let l3 = [];\n\
    \    for (let i = 0; i < l1.length; i++) {\n        for (let j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                l3.push(l1[i]);\n\
    \            }\n        }\n    }\n    return l3;\n}\n", "    return l1.filter(x\
    \ => l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    var l3 = [];\n    for (var\
    \ i = 0; i < l1.length; i++) {\n        for (var j = 0; j < l2.length; j++) {\n\
    \            if (l1[i] == l2[j]) {\n                l3.push(l1[i]);\n        \
    \    }\n        }\n    }\n    return l3;\n}\n", "    return [...new Set(l1)].filter(x\
    \ => new Set(l2).has(x));\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return [...new Set(l1)].filter(x => l2.includes(x));\n\
    }\n", "    let l3 = [];\n    for (let i = 0; i < l1.length; i++) {\n        for\
    \ (let j = 0; j < l2.length; j++) {\n            if (l1[i] === l2[j]) {\n    \
    \            l3.push(l1[i]);\n            }\n        }\n    }\n    return l3;\n\
    }\n", "    return [...new Set(l1)].filter(x => l2.includes(x));\n}\n", "    return\
    \ [...new Set(l1)].filter(x => new Set(l2).has(x));\n}\n", "    return l1.filter(function\
    \ (n: any) {\n        return l2.indexOf(n) !== -1;\n    }).sort(function (a: any,\
    \ b: any) {\n        return a - b;\n    });\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(function\
    \ (n: any) {\n        return l2.indexOf(n) !== -1;\n    }).sort(function (a: any,\
    \ b: any) {\n        return a - b;\n    });\n}\n", "    return l1.filter(x =>\
    \ l2.includes(x)).sort((a, b) => a - b);\n}\n", "    return l1.filter(function\
    \ (n: any) {\n        return l2.indexOf(n) !== -1;\n    }).sort(function (a: any,\
    \ b: any) {\n        return a - b;\n    });\n}\n", "    let result: any = [];\n\
    \    for (let i = 0; i < l1.length; i++) {\n        for (let j = 0; j < l2.length;\
    \ j++) {\n            if (l1[i] === l2[j]) {\n                result.push(l1[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    return [...new\
    \ Set(l1)].filter(x => l2.includes(x));\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a, b)\
    \ => a - b);\n}\n", "    return l1.filter(function (n: any) {\n        return\
    \ l2.indexOf(n) !== -1;\n    }).sort(function (a: any, b: any) {\n        return\
    \ a - b;\n    });\n}\n", "    let result: any = [];\n    for (let i = 0; i < l1.length;\
    \ i++) {\n        for (let j = 0; j < l2.length; j++) {\n            if (l1[i]\
    \ === l2[j]) {\n                result.push(l1[i]);\n            }\n        }\n\
    \    }\n    return result;\n}\n", "    return l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
