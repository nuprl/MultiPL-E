name: HumanEval_136_largest_smallest_integers
language: ts
prompt: "//Create a function that returns an array (a, b), where 'a' is\n// the largest\
  \ of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n\
  // If there is no negative or positive integers, return them as undefined.\n// Examples:\n\
  // >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>>\
  \ largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n\
  // [undefined, undefined]\nfunction largest_smallest_integers(lst: any): any {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_smallest_integers;\n  assert.deepEqual(candidate([2,\
  \ 4, 1, 3, 5, 7]),[undefined, 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5,\
  \ 7, 0]),[undefined, 1]);\n  assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2,\
  \ 1]);\n  assert.deepEqual(candidate([4, 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7,\
  \ 3, 8, 4, 9, 2, 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined,\
  \ undefined]);\n  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
  \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
  \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
  \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\n\
  test();"
completions: ["    let largest: number = undefined;\n    let smallest: number = undefined;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n     \
    \       if (largest == undefined) {\n                largest = lst[i];\n     \
    \       } else if (lst[i] > largest) {\n                largest = lst[i];\n  \
    \          }\n        } else if (lst[i] > 0) {\n            if (smallest == undefined)\
    \ {\n                smallest = lst[i];\n            } else if (lst[i] < smallest)\
    \ {\n                smallest = lst[i];\n            }\n        }\n    }\n   \
    \ return [largest, smallest];\n}\n", "    let smallest = undefined;\n    let largest\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ > 0) {\n            if (smallest === undefined) {\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < smallest) {\n                smallest\
    \ = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest\
    \ === undefined) {\n                largest = lst[i];\n            } else if (lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n", "    let smallest: number = Number.MAX_VALUE;\n\
    \    let largest: number = Number.MIN_VALUE;\n    let has_positive: boolean =\
    \ false;\n    let has_negative: boolean = false;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (lst[i] > largest) {\n   \
    \             largest = lst[i];\n            }\n            has_negative = true;\n\
    \        } else if (lst[i] > 0) {\n            if (lst[i] < smallest) {\n    \
    \            smallest = lst[i];\n            }\n            has_positive = true;\n\
    \        }\n    }\n    if (has_positive && has_negative) {\n        return [largest,\
    \ smallest];\n    } else if (has_positive) {\n        return [undefined, smallest];\n\
    \    } else if (has_negative) {\n        return [largest, undefined];\n    } else\
    \ {\n        return [undefined, undefined];\n    }\n}\n", "    let largest_negative\
    \ = undefined;\n    let smallest_positive = undefined;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative\
    \ === undefined) {\n                largest_negative = lst[i];\n            }\
    \ else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive\
    \ === undefined) {\n                smallest_positive = lst[i];\n            }\
    \ else if (lst[i] < smallest_positive) {\n                smallest_positive =\
    \ lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n\
    }\n", "    let a: number = undefined;\n    let b: number = undefined;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if\
    \ (a === undefined) {\n                a = lst[i];\n            } else if (lst[i]\
    \ > a) {\n                a = lst[i];\n            }\n        } else if (lst[i]\
    \ > 0) {\n            if (b === undefined) {\n                b = lst[i];\n  \
    \          } else if (lst[i] < b) {\n                b = lst[i];\n           \
    \ }\n        }\n    }\n    return [a, b];\n}\n", "    let smallest_pos = undefined;\n\
    \    let largest_neg = undefined;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] > 0) {\n            if (smallest_pos === undefined) {\n  \
    \              smallest_pos = lst[i];\n            } else if (lst[i] < smallest_pos)\
    \ {\n                smallest_pos = lst[i];\n            }\n        } else if\
    \ (lst[i] < 0) {\n            if (largest_neg === undefined) {\n             \
    \   largest_neg = lst[i];\n            } else if (lst[i] > largest_neg) {\n  \
    \              largest_neg = lst[i];\n            }\n        }\n    }\n    return\
    \ [largest_neg, smallest_pos];\n}\n", "    let largestNegative = undefined;\n\
    \    let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined)\
    \ {\n                largestNegative = lst[i];\n            } else if (lst[i]\
    \ > largestNegative) {\n                largestNegative = lst[i];\n          \
    \  }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined)\
    \ {\n                smallestPositive = lst[i];\n            } else if (lst[i]\
    \ < smallestPositive) {\n                smallestPositive = lst[i];\n        \
    \    }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n",
  "    let min: number = 0;\n    let max: number = 0;\n    let min_found: boolean\
    \ = false;\n    let max_found: boolean = false;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (!min_found) {\n         \
    \       min = lst[i];\n                min_found = true;\n            } else {\n\
    \                if (lst[i] < min) {\n                    min = lst[i];\n    \
    \            }\n            }\n        } else if (lst[i] < 0) {\n            if\
    \ (!max_found) {\n                max = lst[i];\n                max_found = true;\n\
    \            } else {\n                if (lst[i] > max) {\n                 \
    \   max = lst[i];\n                }\n            }\n        }\n    }\n    return\
    \ [max, min];\n}\n", "    let a: number = undefined;\n    let b: number = undefined;\n\
    \    let i: number = 0;\n    while (i < lst.length) {\n        if (lst[i] < 0)\
    \ {\n            if (a == undefined) {\n                a = lst[i];\n        \
    \    } else if (lst[i] > a) {\n                a = lst[i];\n            }\n  \
    \      } else if (lst[i] > 0) {\n            if (b == undefined) {\n         \
    \       b = lst[i];\n            } else if (lst[i] < b) {\n                b =\
    \ lst[i];\n            }\n        }\n        i = i + 1;\n    }\n    return [a,\
    \ b];\n}\n", "    let max_neg = undefined;\n    let min_pos = undefined;\n   \
    \ for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n        \
    \    if (max_neg === undefined) {\n                max_neg = lst[i];\n       \
    \     } else if (lst[i] > max_neg) {\n                max_neg = lst[i];\n    \
    \        }\n        } else if (lst[i] > 0) {\n            if (min_pos === undefined)\
    \ {\n                min_pos = lst[i];\n            } else if (lst[i] < min_pos)\
    \ {\n                min_pos = lst[i];\n            }\n        }\n    }\n    return\
    \ [max_neg, min_pos];\n}\n", "    let min: number = undefined;\n    let max: number\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (max === undefined) {\n                max = lst[i];\n\
    \            } else if (lst[i] > max) {\n                max = lst[i];\n     \
    \       }\n        } else if (lst[i] > 0) {\n            if (min === undefined)\
    \ {\n                min = lst[i];\n            } else if (lst[i] < min) {\n \
    \               min = lst[i];\n            }\n        }\n    }\n    return [max,\
    \ min];\n}\n", "    let largestNegative: number = null;\n    let smallestPositive:\
    \ number = null;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (largestNegative === null) {\n                largestNegative\
    \ = lst[i];\n            } else if (lst[i] > largestNegative) {\n            \
    \    largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallestPositive === null) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let a: number = undefined;\n\
    \    let b: number = undefined;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] < 0) {\n            if (a === undefined) {\n             \
    \   a = lst[i];\n            } else if (lst[i] > a) {\n                a = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (b === undefined)\
    \ {\n                b = lst[i];\n            } else if (lst[i] < b) {\n     \
    \           b = lst[i];\n            }\n        }\n    }\n    return [a, b];\n\
    }\n", "    let smallest_positive: number = Number.MAX_VALUE;\n    let largest_negative:\
    \ number = Number.MIN_VALUE;\n    let result: any = [];\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > 0 && lst[i] < smallest_positive)\
    \ {\n            smallest_positive = lst[i];\n        }\n        if (lst[i] <\
    \ 0 && lst[i] > largest_negative) {\n            largest_negative = lst[i];\n\
    \        }\n    }\n    result.push(largest_negative);\n    result.push(smallest_positive);\n\
    \    return result;\n}\n", "    let largestNegative: number = undefined;\n   \
    \ let smallestPositive: number = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined)\
    \ {\n                largestNegative = lst[i];\n            } else if (lst[i]\
    \ > largestNegative) {\n                largestNegative = lst[i];\n          \
    \  }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined)\
    \ {\n                smallestPositive = lst[i];\n            } else if (lst[i]\
    \ < smallestPositive) {\n                smallestPositive = lst[i];\n        \
    \    }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n",
  "    let largestNegative = undefined;\n    let smallestPositive = undefined;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n      \
    \      if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let smallest_positive = undefined;\n\
    \    let largest_negative = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined)\
    \ {\n                smallest_positive = lst[i];\n            } else if (lst[i]\
    \ < smallest_positive) {\n                smallest_positive = lst[i];\n      \
    \      }\n        } else if (lst[i] < 0) {\n            if (largest_negative ===\
    \ undefined) {\n                largest_negative = lst[i];\n            } else\
    \ if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n\
    \            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n\
    }\n", "    let smallest_positive: number = Number.MAX_VALUE;\n    let largest_negative:\
    \ number = Number.MIN_VALUE;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (lst[i] < 0 && lst[i] > largest_negative) {\n            largest_negative\
    \ = lst[i];\n        }\n        if (lst[i] > 0 && lst[i] < smallest_positive)\
    \ {\n            smallest_positive = lst[i];\n        }\n    }\n    if (largest_negative\
    \ === Number.MIN_VALUE) {\n        largest_negative = undefined;\n    }\n    if\
    \ (smallest_positive === Number.MAX_VALUE) {\n        smallest_positive = undefined;\n\
    \    }\n    return [largest_negative, smallest_positive];\n}\n", "    let largest:\
    \ number = 0;\n    let smallest: number = 0;\n    let largest_found: boolean =\
    \ false;\n    let smallest_found: boolean = false;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largest_found) {\n      \
    \          if (lst[i] > largest) {\n                    largest = lst[i];\n  \
    \              }\n            } else {\n                largest = lst[i];\n  \
    \              largest_found = true;\n            }\n        } else if (lst[i]\
    \ > 0) {\n            if (smallest_found) {\n                if (lst[i] < smallest)\
    \ {\n                    smallest = lst[i];\n                }\n            }\
    \ else {\n                smallest = lst[i];\n                smallest_found =\
    \ true;\n            }\n        }\n    }\n    if (largest_found) {\n        if\
    \ (smallest_found) {\n            return [largest, smallest];\n        } else\
    \ {\n            return [largest, undefined];\n        }\n    } else {\n     \
    \   if (smallest_found) {\n            return [undefined, smallest];\n       \
    \ } else {\n            return [undefined, undefined];\n        }\n    }\n}\n",
  "    let largestNegative = undefined;\n    let smallestPositive = undefined;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n      \
    \      if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let smallest: number = 0;\n\
    \    let largest: number = 0;\n    let smallest_found: boolean = false;\n    let\
    \ largest_found: boolean = false;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] > 0) {\n            if (!smallest_found) {\n             \
    \   smallest = lst[i];\n                smallest_found = true;\n            }\
    \ else {\n                if (lst[i] < smallest) {\n                    smallest\
    \ = lst[i];\n                }\n            }\n        } else if (lst[i] < 0)\
    \ {\n            if (!largest_found) {\n                largest = lst[i];\n  \
    \              largest_found = true;\n            } else {\n                if\
    \ (lst[i] > largest) {\n                    largest = lst[i];\n              \
    \  }\n            }\n        }\n    }\n    return [largest, smallest];\n}\n",
  "  if (lst.length == 0) {\n    return [undefined, undefined];\n  }\n  let smallest\
    \ = lst[0];\n  let largest = lst[0];\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < smallest) {\n      smallest = lst[i];\n    }\n    if (lst[i]\
    \ > largest) {\n      largest = lst[i];\n    }\n  }\n  return [largest, smallest];\n\
    }\n", "    let a: number = 0;\n    let b: number = 0;\n    let flag: boolean =\
    \ false;\n    let flag1: boolean = false;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (lst[i] > a) {\n         \
    \       a = lst[i];\n                flag = true;\n            }\n        }\n\
    \        if (lst[i] > 0) {\n            if (lst[i] < b || flag1 == false) {\n\
    \                b = lst[i];\n                flag1 = true;\n            }\n \
    \       }\n    }\n    if (flag == false) {\n        a = undefined;\n    }\n  \
    \  if (flag1 == false) {\n        b = undefined;\n    }\n    return [a, b];\n\
    }\n", "    let largest = undefined;\n    let smallest = undefined;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest\
    \ === undefined) {\n                largest = lst[i];\n            } else if (lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (smallest === undefined) {\n             \
    \   smallest = lst[i];\n            } else if (lst[i] < smallest) {\n        \
    \        smallest = lst[i];\n            }\n        }\n    }\n    return [largest,\
    \ smallest];\n}\n", "    let largestNegative: number = undefined;\n    let smallestPositive:\
    \ number = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] < 0) {\n            if (largestNegative === undefined) {\n         \
    \       largestNegative = lst[i];\n            } else if (lst[i] > largestNegative)\
    \ {\n                largestNegative = lst[i];\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n     \
    \           smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive)\
    \ {\n                smallestPositive = lst[i];\n            }\n        }\n  \
    \  }\n    return [largestNegative, smallestPositive];\n}\n", "    let smallest:\
    \ number = 0;\n    let largest: number = 0;\n    let smallest_found: boolean =\
    \ false;\n    let largest_found: boolean = false;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (!smallest_found) {\n    \
    \            smallest = lst[i];\n                smallest_found = true;\n    \
    \        } else {\n                if (lst[i] < smallest) {\n                \
    \    smallest = lst[i];\n                }\n            }\n        } else if (lst[i]\
    \ < 0) {\n            if (!largest_found) {\n                largest = lst[i];\n\
    \                largest_found = true;\n            } else {\n               \
    \ if (lst[i] > largest) {\n                    largest = lst[i];\n           \
    \     }\n            }\n        }\n    }\n    return [largest, smallest];\n}\n",
  "    let neg: number[] = [];\n    let pos: number[] = [];\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] < 0) {\n            neg.push(lst[i]);\n\
    \        } else if (lst[i] > 0) {\n            pos.push(lst[i]);\n        }\n\
    \    }\n    if (neg.length == 0 || pos.length == 0) {\n        return [undefined,\
    \ undefined];\n    } else {\n        return [Math.max(...neg), Math.min(...pos)];\n\
    \    }\n}\n", "    let neg: number[] = [];\n    let pos: number[] = [];\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            neg.push(lst[i]);\n\
    \        } else if (lst[i] > 0) {\n            pos.push(lst[i]);\n        }\n\
    \    }\n    if (neg.length === 0) {\n        neg.push(undefined);\n    }\n   \
    \ if (pos.length === 0) {\n        pos.push(undefined);\n    }\n    return [Math.max(...neg),\
    \ Math.min(...pos)];\n}\n", "    let negative = [];\n    let positive = [];\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n     \
    \       negative.push(lst[i]);\n        } else if (lst[i] > 0) {\n           \
    \ positive.push(lst[i]);\n        }\n    }\n    if (negative.length === 0) {\n\
    \        negative.push(undefined);\n    }\n    if (positive.length === 0) {\n\
    \        positive.push(undefined);\n    }\n    return [Math.max(...negative),\
    \ Math.min(...positive)];\n}\n", "    let neg = [];\n    let pos = [];\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            neg.push(lst[i]);\n\
    \        } else if (lst[i] > 0) {\n            pos.push(lst[i]);\n        }\n\
    \    }\n    if (neg.length === 0) {\n        neg.push(undefined);\n    }\n   \
    \ if (pos.length === 0) {\n        pos.push(undefined);\n    }\n    return [Math.max(...neg),\
    \ Math.min(...pos)];\n}\n", "    let largest: number = 0;\n    let smallest: number\
    \ = 0;\n    let largest_smallest_integers: any = [];\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] > largest) {\n            largest = lst[i];\n\
    \        }\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n\
    \        }\n    }\n    largest_smallest_integers.push(largest);\n    largest_smallest_integers.push(smallest);\n\
    \    return largest_smallest_integers;\n}\n", "    let largest: number = undefined;\n\
    \    let smallest: number = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largest === undefined) {\n   \
    \             largest = lst[i];\n            } else if (lst[i] > largest) {\n\
    \                largest = lst[i];\n            }\n        } else if (lst[i] >\
    \ 0) {\n            if (smallest === undefined) {\n                smallest =\
    \ lst[i];\n            } else if (lst[i] < smallest) {\n                smallest\
    \ = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n\
    }\n", "    let a = undefined;\n    let b = undefined;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] < 0) {\n            if (a === undefined)\
    \ {\n                a = lst[i];\n            } else if (lst[i] > a) {\n     \
    \           a = lst[i];\n            }\n        } else if (lst[i] > 0) {\n   \
    \         if (b === undefined) {\n                b = lst[i];\n            } else\
    \ if (lst[i] < b) {\n                b = lst[i];\n            }\n        }\n \
    \   }\n    return [a, b];\n}\n", "    let a = undefined;\n    let b = undefined;\n\
    \    let i = 0;\n    while (i < lst.length) {\n        if (lst[i] < 0) {\n   \
    \         if (a === undefined) {\n                a = lst[i];\n            } else\
    \ if (lst[i] > a) {\n                a = lst[i];\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (b === undefined) {\n                b = lst[i];\n\
    \            } else if (lst[i] < b) {\n                b = lst[i];\n         \
    \   }\n        }\n        i = i + 1;\n    }\n    return [a, b];\n}\n", "    let\
    \ smallest_positive = undefined;\n    let largest_negative = undefined;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if\
    \ (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n\
    \            } else if (lst[i] < smallest_positive) {\n                smallest_positive\
    \ = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative\
    \ === undefined) {\n                largest_negative = lst[i];\n            }\
    \ else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n\
    \            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n\
    }\n", "    let negative_max = undefined;\n    let positive_min = undefined;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n     \
    \       if (negative_max === undefined) {\n                negative_max = lst[i];\n\
    \            } else if (lst[i] > negative_max) {\n                negative_max\
    \ = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (positive_min\
    \ === undefined) {\n                positive_min = lst[i];\n            } else\
    \ if (lst[i] < positive_min) {\n                positive_min = lst[i];\n     \
    \       }\n        }\n    }\n    return [negative_max, positive_min];\n}\n", " \
    \   let largestNegative = undefined;\n    let smallestPositive = undefined;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n     \
    \       if (largestNegative === undefined) {\n                largestNegative\
    \ = lst[i];\n            } else if (lst[i] > largestNegative) {\n            \
    \    largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let smallest: number = 0;\n\
    \    let largest: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n  \
    \      if (lst[i] > 0) {\n            if (smallest === 0) {\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < smallest) {\n                smallest\
    \ = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest\
    \ === 0) {\n                largest = lst[i];\n            } else if (lst[i] >\
    \ largest) {\n                largest = lst[i];\n            }\n        }\n  \
    \  }\n    return [largest, smallest];\n}\n", "    if (lst.length === 0) {\n  \
    \      return [undefined, undefined];\n    }\n    let negative_list = [];\n  \
    \  let positive_list = [];\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   if (lst[i] < 0) {\n            negative_list.push(lst[i]);\n        } else\
    \ if (lst[i] > 0) {\n            positive_list.push(lst[i]);\n        }\n    }\n\
    \    if (negative_list.length === 0) {\n        negative_list.push(undefined);\n\
    \    }\n    if (positive_list.length === 0) {\n        positive_list.push(undefined);\n\
    \    }\n    return [Math.max(...negative_list), Math.min(...positive_list)];\n\
    }\n", "    let largest = undefined;\n    let smallest = undefined;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest\
    \ === undefined) {\n                largest = lst[i];\n            } else if (lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (smallest === undefined) {\n             \
    \   smallest = lst[i];\n            } else if (lst[i] < smallest) {\n        \
    \        smallest = lst[i];\n            }\n        }\n    }\n    return [largest,\
    \ smallest];\n}\n", "    let largestNegative = undefined;\n    let smallestPositive\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (largestNegative === undefined) {\n                largestNegative\
    \ = lst[i];\n            } else if (lst[i] > largestNegative) {\n            \
    \    largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let maxNegative = undefined;\n\
    \    let minPositive = undefined;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] < 0) {\n            if (maxNegative === undefined) {\n   \
    \             maxNegative = lst[i];\n            } else if (lst[i] > maxNegative)\
    \ {\n                maxNegative = lst[i];\n            }\n        } else if (lst[i]\
    \ > 0) {\n            if (minPositive === undefined) {\n                minPositive\
    \ = lst[i];\n            } else if (lst[i] < minPositive) {\n                minPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [maxNegative, minPositive];\n\
    }\n", "  let smallest_positive: number = undefined;\n  let largest_negative: number\
    \ = undefined;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0)\
    \ {\n      if (smallest_positive === undefined) {\n        smallest_positive =\
    \ lst[i];\n      } else if (lst[i] < smallest_positive) {\n        smallest_positive\
    \ = lst[i];\n      }\n    } else if (lst[i] < 0) {\n      if (largest_negative\
    \ === undefined) {\n        largest_negative = lst[i];\n      } else if (lst[i]\
    \ > largest_negative) {\n        largest_negative = lst[i];\n      }\n    }\n\
    \  }\n  return [largest_negative, smallest_positive];\n}\n", "    let result =\
    \ [undefined, undefined];\n    let neg = [];\n    let pos = [];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            neg.push(lst[i]);\n\
    \        } else if (lst[i] > 0) {\n            pos.push(lst[i]);\n        }\n\
    \    }\n    if (neg.length > 0) {\n        result[0] = Math.max(...neg);\n   \
    \ }\n    if (pos.length > 0) {\n        result[1] = Math.min(...pos);\n    }\n\
    \    return result;\n}\n", "    let smallest: number = 0;\n    let largest: number\
    \ = 0;\n    let smallest_found: boolean = false;\n    let largest_found: boolean\
    \ = false;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0)\
    \ {\n            if (!smallest_found) {\n                smallest = lst[i];\n\
    \                smallest_found = true;\n            } else {\n              \
    \  if (lst[i] < smallest) {\n                    smallest = lst[i];\n        \
    \        }\n            }\n        } else if (lst[i] < 0) {\n            if (!largest_found)\
    \ {\n                largest = lst[i];\n                largest_found = true;\n\
    \            } else {\n                if (lst[i] > largest) {\n             \
    \       largest = lst[i];\n                }\n            }\n        }\n    }\n\
    \    return [largest, smallest];\n}\n", "    let largest_negative = undefined;\n\
    \    let smallest_positive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined)\
    \ {\n                largest_negative = lst[i];\n            } else if (lst[i]\
    \ > largest_negative) {\n                largest_negative = lst[i];\n        \
    \    }\n        } else if (lst[i] > 0) {\n            if (smallest_positive ===\
    \ undefined) {\n                smallest_positive = lst[i];\n            } else\
    \ if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n\
    \            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n\
    }\n", "    let largestNegative = undefined;\n    let smallestPositive = undefined;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n     \
    \       if (largestNegative === undefined) {\n                largestNegative\
    \ = lst[i];\n            } else if (lst[i] > largestNegative) {\n            \
    \    largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let smallest: number = Number.MAX_VALUE;\n\
    \    let largest: number = Number.MIN_VALUE;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0 && lst[i] > largest) {\n            largest =\
    \ lst[i];\n        }\n        if (lst[i] > 0 && lst[i] < smallest) {\n       \
    \     smallest = lst[i];\n        }\n    }\n    if (largest === Number.MIN_VALUE)\
    \ {\n        largest = undefined;\n    }\n    if (smallest === Number.MAX_VALUE)\
    \ {\n        smallest = undefined;\n    }\n    return [largest, smallest];\n}\n",
  "    let largest: number = 0;\n    let smallest: number = 0;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (lst[i] > largest) {\n            largest\
    \ = lst[i];\n        }\n        if (lst[i] < smallest) {\n            smallest\
    \ = lst[i];\n        }\n    }\n    return [largest, smallest];\n}\n", "    let\
    \ largest_negative: number = undefined;\n    let smallest_positive: number = undefined;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (typeof lst[i] === \"\
    number\") {\n            if (lst[i] > 0) {\n                if (smallest_positive\
    \ === undefined) {\n                    smallest_positive = lst[i];\n        \
    \        } else if (lst[i] < smallest_positive) {\n                    smallest_positive\
    \ = lst[i];\n                }\n            } else if (lst[i] < 0) {\n       \
    \         if (largest_negative === undefined) {\n                    largest_negative\
    \ = lst[i];\n                } else if (lst[i] > largest_negative) {\n       \
    \             largest_negative = lst[i];\n                }\n            }\n \
    \       }\n    }\n    return [largest_negative, smallest_positive];\n}\n", " \
    \   let negative_lst: any = [];\n    let positive_lst: any = [];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            negative_lst.push(lst[i]);\n\
    \        } else if (lst[i] > 0) {\n            positive_lst.push(lst[i]);\n  \
    \      }\n    }\n    if (negative_lst.length === 0) {\n        negative_lst.push(undefined);\n\
    \    }\n    if (positive_lst.length === 0) {\n        positive_lst.push(undefined);\n\
    \    }\n    return [Math.max(...negative_lst), Math.min(...positive_lst)];\n}\n",
  "  let largest_negative = undefined;\n  let smallest_positive = undefined;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest_negative\
    \ === undefined) {\n        largest_negative = lst[i];\n      } else if (lst[i]\
    \ > largest_negative) {\n        largest_negative = lst[i];\n      }\n    } else\
    \ if (lst[i] > 0) {\n      if (smallest_positive === undefined) {\n        smallest_positive\
    \ = lst[i];\n      } else if (lst[i] < smallest_positive) {\n        smallest_positive\
    \ = lst[i];\n      }\n    }\n  }\n  return [largest_negative, smallest_positive];\n\
    }\n", "    let largestNegative = undefined;\n    let smallestPositive = undefined;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n     \
    \       if (largestNegative === undefined) {\n                largestNegative\
    \ = lst[i];\n            } else if (lst[i] > largestNegative) {\n            \
    \    largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let smallest_positive: number\
    \ = undefined;\n    let largest_negative: number = undefined;\n    for (let i:\
    \ number = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if\
    \ (smallest_positive === undefined) {\n                smallest_positive = lst[i];\n\
    \            } else if (lst[i] < smallest_positive) {\n                smallest_positive\
    \ = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest_negative\
    \ === undefined) {\n                largest_negative = lst[i];\n            }\
    \ else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n\
    \            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n\
    }\n", "    let pos: number[] = [];\n    let neg: number[] = [];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            pos.push(lst[i]);\n\
    \        } else if (lst[i] < 0) {\n            neg.push(lst[i]);\n        }\n\
    \    }\n    if (pos.length === 0 && neg.length === 0) {\n        return [undefined,\
    \ undefined];\n    } else if (pos.length === 0) {\n        return [Math.max(...neg),\
    \ undefined];\n    } else if (neg.length === 0) {\n        return [undefined,\
    \ Math.min(...pos)];\n    } else {\n        return [Math.max(...neg), Math.min(...pos)];\n\
    \    }\n}\n", "    let smallest: number = 0;\n    let largest: number = 0;\n \
    \   let smallest_found: boolean = false;\n    let largest_found: boolean = false;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n     \
    \       if (!smallest_found) {\n                smallest = lst[i];\n         \
    \       smallest_found = true;\n            } else {\n                if (lst[i]\
    \ < smallest) {\n                    smallest = lst[i];\n                }\n \
    \           }\n        } else if (lst[i] < 0) {\n            if (!largest_found)\
    \ {\n                largest = lst[i];\n                largest_found = true;\n\
    \            } else {\n                if (lst[i] > largest) {\n             \
    \       largest = lst[i];\n                }\n            }\n        }\n    }\n\
    \    if (smallest_found && largest_found) {\n        return [largest, smallest];\n\
    \    } else if (smallest_found) {\n        return [undefined, smallest];\n   \
    \ } else if (largest_found) {\n        return [largest, undefined];\n    } else\
    \ {\n        return [undefined, undefined];\n    }\n}\n", "    let largestNegative\
    \ = undefined;\n    let smallestPositive = undefined;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative\
    \ === undefined) {\n                largestNegative = lst[i];\n            } else\
    \ if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined) {\n                smallestPositive = lst[i];\n            }\
    \ else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n\
    \            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n", "    let largestNegative = undefined;\n    let smallestPositive = undefined;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n     \
    \       if (largestNegative === undefined) {\n                largestNegative\
    \ = lst[i];\n            } else if (lst[i] > largestNegative) {\n            \
    \    largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let largest_negative = undefined;\n\
    \    let smallest_positive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largest_negative === undefined)\
    \ {\n                largest_negative = lst[i];\n            } else if (lst[i]\
    \ > largest_negative) {\n                largest_negative = lst[i];\n        \
    \    }\n        } else if (lst[i] > 0) {\n            if (smallest_positive ===\
    \ undefined) {\n                smallest_positive = lst[i];\n            } else\
    \ if (lst[i] < smallest_positive) {\n                smallest_positive = lst[i];\n\
    \            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n\
    }\n", "    let largest_negative: number = 0;\n    let smallest_positive: number\
    \ = 0;\n    let largest_negative_found: boolean = false;\n    let smallest_positive_found:\
    \ boolean = false;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (largest_negative_found) {\n                if (lst[i]\
    \ > largest_negative) {\n                    largest_negative = lst[i];\n    \
    \            }\n            } else {\n                largest_negative = lst[i];\n\
    \                largest_negative_found = true;\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (smallest_positive_found) {\n            \
    \    if (lst[i] < smallest_positive) {\n                    smallest_positive\
    \ = lst[i];\n                }\n            } else {\n                smallest_positive\
    \ = lst[i];\n                smallest_positive_found = true;\n            }\n\
    \        }\n    }\n    if (largest_negative_found && smallest_positive_found)\
    \ {\n        return [largest_negative, smallest_positive];\n    } else if (largest_negative_found)\
    \ {\n        return [largest_negative, undefined];\n    } else if (smallest_positive_found)\
    \ {\n        return [undefined, smallest_positive];\n    } else {\n        return\
    \ [undefined, undefined];\n    }\n}\n", "    let max: number = -Infinity;\n  \
    \  let min: number = Infinity;\n    let result: any = [];\n    if (lst.length\
    \ === 0) {\n        return [undefined, undefined];\n    }\n    for (let i: number\
    \ = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (lst[i]\
    \ < min) {\n                min = lst[i];\n            }\n        } else if (lst[i]\
    \ < 0) {\n            if (lst[i] > max) {\n                max = lst[i];\n   \
    \         }\n        }\n    }\n    if (max === -Infinity) {\n        result.push(undefined);\n\
    \    } else {\n        result.push(max);\n    }\n    if (min === Infinity) {\n\
    \        result.push(undefined);\n    } else {\n        result.push(min);\n  \
    \  }\n    return result;\n}\n", "    let largestNegative = undefined;\n    let\
    \ smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] < 0) {\n            if (largestNegative === undefined) {\n\
    \                largestNegative = lst[i];\n            } else if (lst[i] > largestNegative)\
    \ {\n                largestNegative = lst[i];\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n     \
    \           smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive)\
    \ {\n                smallestPositive = lst[i];\n            }\n        }\n  \
    \  }\n    return [largestNegative, smallestPositive];\n}\n", "    let largestNegative\
    \ = undefined;\n    let smallestPositive = undefined;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative\
    \ === undefined) {\n                largestNegative = lst[i];\n            } else\
    \ if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined) {\n                smallestPositive = lst[i];\n            }\
    \ else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n\
    \            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n", "    let a = [];\n    let b = [];\n    let c = [];\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (lst[i] < 0) {\n            a.push(lst[i]);\n\
    \        }\n        else if (lst[i] > 0) {\n            b.push(lst[i]);\n    \
    \    }\n        else {\n            c.push(lst[i]);\n        }\n    }\n    if\
    \ (a.length > 0 && b.length > 0) {\n        return [Math.max(...a), Math.min(...b)];\n\
    \    }\n    else {\n        return [undefined, undefined];\n    }\n}\n", "   \
    \ let positive: number[] = [];\n    let negative: number[] = [];\n    let result:\
    \ any = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] >\
    \ 0) {\n            positive.push(lst[i]);\n        } else if (lst[i] < 0) {\n\
    \            negative.push(lst[i]);\n        }\n    }\n    if (positive.length\
    \ > 0) {\n        result.push(Math.max(...negative));\n        result.push(Math.min(...positive));\n\
    \    } else {\n        result.push(undefined);\n        result.push(undefined);\n\
    \    }\n    return result;\n}\n", "    let neg = [];\n    let pos = [];\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            neg.push(lst[i]);\n\
    \        } else if (lst[i] > 0) {\n            pos.push(lst[i]);\n        }\n\
    \    }\n    if (neg.length === 0) {\n        neg.push(undefined);\n    }\n   \
    \ if (pos.length === 0) {\n        pos.push(undefined);\n    }\n    return [Math.max(...neg),\
    \ Math.min(...pos)];\n}\n", "    let largest_negative: number = undefined;\n \
    \   let smallest_positive: number = undefined;\n    for (let i: number = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative\
    \ === undefined) {\n                largest_negative = lst[i];\n            }\
    \ else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive\
    \ === undefined) {\n                smallest_positive = lst[i];\n            }\
    \ else if (lst[i] < smallest_positive) {\n                smallest_positive =\
    \ lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n\
    }\n", "    let largestNegative: number = 0;\n    let smallestPositive: number\
    \ = 0;\n    let largestNegativeFound: boolean = false;\n    let smallestPositiveFound:\
    \ boolean = false;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (largestNegativeFound) {\n                if (lst[i]\
    \ > largestNegative) {\n                    largestNegative = lst[i];\n      \
    \          }\n            } else {\n                largestNegative = lst[i];\n\
    \                largestNegativeFound = true;\n            }\n        } else if\
    \ (lst[i] > 0) {\n            if (smallestPositiveFound) {\n                if\
    \ (lst[i] < smallestPositive) {\n                    smallestPositive = lst[i];\n\
    \                }\n            } else {\n                smallestPositive = lst[i];\n\
    \                smallestPositiveFound = true;\n            }\n        }\n   \
    \ }\n    if (largestNegativeFound) {\n        if (smallestPositiveFound) {\n \
    \           return [largestNegative, smallestPositive];\n        } else {\n  \
    \          return [largestNegative, undefined];\n        }\n    } else {\n   \
    \     if (smallestPositiveFound) {\n            return [undefined, smallestPositive];\n\
    \        } else {\n            return [undefined, undefined];\n        }\n   \
    \ }\n}\n", "    let largestNegative: number = null;\n    let smallestPositive:\
    \ number = null;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (largestNegative === null) {\n                largestNegative\
    \ = lst[i];\n            } else if (lst[i] > largestNegative) {\n            \
    \    largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallestPositive === null) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let a = undefined;\n    let\
    \ b = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (a === undefined) {\n                a = lst[i];\n  \
    \          } else if (lst[i] > a) {\n                a = lst[i];\n           \
    \ }\n        } else if (lst[i] > 0) {\n            if (b === undefined) {\n  \
    \              b = lst[i];\n            } else if (lst[i] < b) {\n           \
    \     b = lst[i];\n            }\n        }\n    }\n    return [a, b];\n}\n",
  "    let largest: number = 0;\n    let smallest: number = 0;\n    let largest_smallest:\
    \ any = [];\n    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (lst[i] > largest) {\n                largest = lst[i];\n\
    \            }\n        }\n        if (lst[i] > 0) {\n            if (lst[i] <\
    \ smallest) {\n                smallest = lst[i];\n            }\n        }\n\
    \    }\n    largest_smallest.push(largest);\n    largest_smallest.push(smallest);\n\
    \    return largest_smallest;\n}\n", "    let a: number = 0;\n    let b: number\
    \ = 0;\n    let c: number = 0;\n    let d: number = 0;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (b == 0) {\n\
    \                b = lst[i];\n            }\n            if (lst[i] < b) {\n \
    \               b = lst[i];\n            }\n        }\n        if (lst[i] < 0)\
    \ {\n            if (a == 0) {\n                a = lst[i];\n            }\n \
    \           if (lst[i] > a) {\n                a = lst[i];\n            }\n  \
    \      }\n    }\n    if (a == 0) {\n        a = undefined;\n    }\n    if (b ==\
    \ 0) {\n        b = undefined;\n    }\n    return [a, b];\n}\n", "    let max\
    \ = 0;\n    let min = 0;\n    let max_flag = false;\n    let min_flag = false;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n     \
    \       if (min_flag === false) {\n                min = lst[i];\n           \
    \     min_flag = true;\n            }\n            if (lst[i] < min) {\n     \
    \           min = lst[i];\n            }\n        }\n        if (lst[i] < 0) {\n\
    \            if (max_flag === false) {\n                max = lst[i];\n      \
    \          max_flag = true;\n            }\n            if (lst[i] > max) {\n\
    \                max = lst[i];\n            }\n        }\n    }\n    if (max_flag\
    \ === false) {\n        max = undefined;\n    }\n    if (min_flag === false) {\n\
    \        min = undefined;\n    }\n    return [max, min];\n}\n", "    let largest_negative\
    \ = undefined;\n    let smallest_positive = undefined;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest_negative\
    \ === undefined) {\n                largest_negative = lst[i];\n            }\
    \ else if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallest_positive\
    \ === undefined) {\n                smallest_positive = lst[i];\n            }\
    \ else if (lst[i] < smallest_positive) {\n                smallest_positive =\
    \ lst[i];\n            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n\
    }\n", "    let smallest_positive: number = 0;\n    let largest_negative: number\
    \ = 0;\n    let smallest_positive_found: boolean = false;\n    let largest_negative_found:\
    \ boolean = false;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ > 0) {\n            if (!smallest_positive_found) {\n                smallest_positive\
    \ = lst[i];\n                smallest_positive_found = true;\n            } else\
    \ {\n                if (lst[i] < smallest_positive) {\n                    smallest_positive\
    \ = lst[i];\n                }\n            }\n        } else if (lst[i] < 0)\
    \ {\n            if (!largest_negative_found) {\n                largest_negative\
    \ = lst[i];\n                largest_negative_found = true;\n            } else\
    \ {\n                if (lst[i] > largest_negative) {\n                    largest_negative\
    \ = lst[i];\n                }\n            }\n        }\n    }\n    return [largest_negative,\
    \ smallest_positive];\n}\n", "    let smallest: number = 0;\n    let largest:\
    \ number = 0;\n    let smallest_found: boolean = false;\n    let largest_found:\
    \ boolean = false;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ > 0) {\n            if (!smallest_found) {\n                smallest = lst[i];\n\
    \                smallest_found = true;\n            } else {\n              \
    \  if (lst[i] < smallest) {\n                    smallest = lst[i];\n        \
    \        }\n            }\n        } else if (lst[i] < 0) {\n            if (!largest_found)\
    \ {\n                largest = lst[i];\n                largest_found = true;\n\
    \            } else {\n                if (lst[i] > largest) {\n             \
    \       largest = lst[i];\n                }\n            }\n        }\n    }\n\
    \    return [largest, smallest];\n}\n", "    let largestNegative = undefined;\n\
    \    let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined)\
    \ {\n                largestNegative = lst[i];\n            } else if (lst[i]\
    \ > largestNegative) {\n                largestNegative = lst[i];\n          \
    \  }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined)\
    \ {\n                smallestPositive = lst[i];\n            } else if (lst[i]\
    \ < smallestPositive) {\n                smallestPositive = lst[i];\n        \
    \    }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n",
  "    let largest_neg: number = undefined;\n    let smallest_pos: number = undefined;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n     \
    \       if (largest_neg === undefined) {\n                largest_neg = lst[i];\n\
    \            } else if (lst[i] > largest_neg) {\n                largest_neg =\
    \ lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_pos\
    \ === undefined) {\n                smallest_pos = lst[i];\n            } else\
    \ if (lst[i] < smallest_pos) {\n                smallest_pos = lst[i];\n     \
    \       }\n        }\n    }\n    return [largest_neg, smallest_pos];\n}\n", " \
    \   let largest = undefined;\n    let smallest = undefined;\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest\
    \ === undefined) {\n                smallest = lst[i];\n            } else if\
    \ (lst[i] < smallest) {\n                smallest = lst[i];\n            }\n \
    \       } else if (lst[i] < 0) {\n            if (largest === undefined) {\n \
    \               largest = lst[i];\n            } else if (lst[i] > largest) {\n\
    \                largest = lst[i];\n            }\n        }\n    }\n    return\
    \ [largest, smallest];\n}\n", "  let largest: number = 0;\n  let smallest: number\
    \ = 0;\n  let largest_smallest_integers: any = [];\n  let negative_integers: number[]\
    \ = [];\n  let positive_integers: number[] = [];\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] < 0) {\n      negative_integers.push(lst[i]);\n    }\
    \ else if (lst[i] > 0) {\n      positive_integers.push(lst[i]);\n    }\n  }\n\
    \  if (negative_integers.length > 0) {\n    largest = Math.max(...negative_integers);\n\
    \  } else {\n    largest = undefined;\n  }\n  if (positive_integers.length > 0)\
    \ {\n    smallest = Math.min(...positive_integers);\n  } else {\n    smallest\
    \ = undefined;\n  }\n  largest_smallest_integers.push(largest, smallest);\n  return\
    \ largest_smallest_integers;\n}\n", "    let max: number = 0;\n    let min: number\
    \ = 0;\n    let max_set: boolean = false;\n    let min_set: boolean = false;\n\
    \    for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n\
    \            if (!max_set) {\n                max = lst[i];\n                max_set\
    \ = true;\n            } else if (lst[i] > max) {\n                max = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (!min_set) {\n\
    \                min = lst[i];\n                min_set = true;\n            }\
    \ else if (lst[i] < min) {\n                min = lst[i];\n            }\n   \
    \     }\n    }\n    if (!max_set) {\n        max = undefined;\n    }\n    if (!min_set)\
    \ {\n        min = undefined;\n    }\n    return [max, min];\n}\n", "    let maxNeg:\
    \ number = 0;\n    let minPos: number = 0;\n    let maxNegFound: boolean = false;\n\
    \    let minPosFound: boolean = false;\n    for (let i: number = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (lst[i] > maxNeg) {\n    \
    \            maxNeg = lst[i];\n                maxNegFound = true;\n         \
    \   }\n        }\n        if (lst[i] > 0) {\n            if (minPosFound) {\n\
    \                if (lst[i] < minPos) {\n                    minPos = lst[i];\n\
    \                }\n            } else {\n                minPos = lst[i];\n \
    \               minPosFound = true;\n            }\n        }\n    }\n    if (maxNegFound)\
    \ {\n        if (minPosFound) {\n            return [maxNeg, minPos];\n      \
    \  } else {\n            return [maxNeg, undefined];\n        }\n    } else {\n\
    \        if (minPosFound) {\n            return [undefined, minPos];\n       \
    \ } else {\n            return [undefined, undefined];\n        }\n    }\n}\n",
  "  let a = undefined;\n  let b = undefined;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < 0) {\n      if (a === undefined) {\n        a = lst[i];\n\
    \      } else if (lst[i] > a) {\n        a = lst[i];\n      }\n    } else if (lst[i]\
    \ > 0) {\n      if (b === undefined) {\n        b = lst[i];\n      } else if (lst[i]\
    \ < b) {\n        b = lst[i];\n      }\n    }\n  }\n  return [a, b];\n}\n", " \
    \   let negative = [];\n    let positive = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            negative.push(lst[i]);\n    \
    \    } else if (lst[i] > 0) {\n            positive.push(lst[i]);\n        }\n\
    \    }\n    if (negative.length === 0) {\n        negative.push(undefined);\n\
    \    }\n    if (positive.length === 0) {\n        positive.push(undefined);\n\
    \    }\n    return [Math.max(...negative), Math.min(...positive)];\n}\n", "  \
    \  let largest_neg: number = 0;\n    let smallest_pos: number = 0;\n    let neg_found:\
    \ boolean = false;\n    let pos_found: boolean = false;\n    for (let i = 0; i\
    \ < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (lst[i] > largest_neg)\
    \ {\n                largest_neg = lst[i];\n                neg_found = true;\n\
    \            }\n        }\n        if (lst[i] > 0) {\n            if (pos_found\
    \ == false) {\n                smallest_pos = lst[i];\n                pos_found\
    \ = true;\n            }\n            if (lst[i] < smallest_pos) {\n         \
    \       smallest_pos = lst[i];\n            }\n        }\n    }\n    if (neg_found\
    \ == false) {\n        largest_neg = undefined;\n    }\n    if (pos_found == false)\
    \ {\n        smallest_pos = undefined;\n    }\n    return [largest_neg, smallest_pos];\n\
    }\n", "    let largestNegative: number = undefined;\n    let smallestPositive:\
    \ number = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] < 0) {\n            if (largestNegative === undefined) {\n         \
    \       largestNegative = lst[i];\n            } else if (lst[i] > largestNegative)\
    \ {\n                largestNegative = lst[i];\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (smallestPositive === undefined) {\n     \
    \           smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive)\
    \ {\n                smallestPositive = lst[i];\n            }\n        }\n  \
    \  }\n    return [largestNegative, smallestPositive];\n}\n", "    let a = undefined;\n\
    \    let b = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] < 0) {\n            if (a === undefined) {\n                a = lst[i];\n\
    \            } else if (lst[i] > a) {\n                a = lst[i];\n         \
    \   }\n        } else if (lst[i] > 0) {\n            if (b === undefined) {\n\
    \                b = lst[i];\n            } else if (lst[i] < b) {\n         \
    \       b = lst[i];\n            }\n        }\n    }\n    return [a, b];\n}\n",
  "    let neg: number = 0;\n    let pos: number = 0;\n    let neg_max: number = 0;\n\
    \    let pos_min: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n  \
    \      if (lst[i] < 0) {\n            neg = lst[i];\n            if (neg > neg_max)\
    \ {\n                neg_max = neg;\n            }\n        }\n        if (lst[i]\
    \ > 0) {\n            pos = lst[i];\n            if (pos_min === 0) {\n      \
    \          pos_min = pos;\n            }\n            if (pos < pos_min) {\n \
    \               pos_min = pos;\n            }\n        }\n    }\n    return [neg_max,\
    \ pos_min];\n}\n", "    let smallest: number = 0;\n    let largest: number = 0;\n\
    \    let smallest_found: boolean = false;\n    let largest_found: boolean = false;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n     \
    \       if (!smallest_found) {\n                smallest = lst[i];\n         \
    \       smallest_found = true;\n            } else {\n                if (lst[i]\
    \ < smallest) {\n                    smallest = lst[i];\n                }\n \
    \           }\n        } else if (lst[i] < 0) {\n            if (!largest_found)\
    \ {\n                largest = lst[i];\n                largest_found = true;\n\
    \            } else {\n                if (lst[i] > largest) {\n             \
    \       largest = lst[i];\n                }\n            }\n        }\n    }\n\
    \    return [largest, smallest];\n}\n", "    let largestNegative = undefined;\n\
    \    let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined)\
    \ {\n                largestNegative = lst[i];\n            } else if (lst[i]\
    \ > largestNegative) {\n                largestNegative = lst[i];\n          \
    \  }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined)\
    \ {\n                smallestPositive = lst[i];\n            } else if (lst[i]\
    \ < smallestPositive) {\n                smallestPositive = lst[i];\n        \
    \    }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n",
  "    let negative: number[] = [];\n    let positive: number[] = [];\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            negative.push(lst[i]);\n\
    \        } else if (lst[i] > 0) {\n            positive.push(lst[i]);\n      \
    \  }\n    }\n    if (negative.length === 0) {\n        negative.push(undefined);\n\
    \    }\n    if (positive.length === 0) {\n        positive.push(undefined);\n\
    \    }\n    return [Math.max(...negative), Math.min(...positive)];\n}\n", "  \
    \  let max = undefined;\n    let min = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (min === undefined) {\n  \
    \              min = lst[i];\n            } else if (lst[i] < min) {\n       \
    \         min = lst[i];\n            }\n        } else if (lst[i] < 0) {\n   \
    \         if (max === undefined) {\n                max = lst[i];\n          \
    \  } else if (lst[i] > max) {\n                max = lst[i];\n            }\n\
    \        }\n    }\n    return [max, min];\n}\n", "    let smallest_positive =\
    \ undefined;\n    let largest_negative = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined)\
    \ {\n                smallest_positive = lst[i];\n            } else if (lst[i]\
    \ < smallest_positive) {\n                smallest_positive = lst[i];\n      \
    \      }\n        } else if (lst[i] < 0) {\n            if (largest_negative ===\
    \ undefined) {\n                largest_negative = lst[i];\n            } else\
    \ if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n\
    \            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n\
    }\n", "    let smallest = undefined;\n    let largest = undefined;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest\
    \ === undefined) {\n                smallest = lst[i];\n            } else if\
    \ (lst[i] < smallest) {\n                smallest = lst[i];\n            }\n \
    \       } else if (lst[i] < 0) {\n            if (largest === undefined) {\n \
    \               largest = lst[i];\n            } else if (lst[i] > largest) {\n\
    \                largest = lst[i];\n            }\n        }\n    }\n    return\
    \ [largest, smallest];\n}\n", "    let smallest: number = undefined;\n    let\
    \ largest: number = undefined;\n    for (let i = 0; i < lst.length; i++) {\n \
    \       if (lst[i] > 0) {\n            if (smallest === undefined) {\n       \
    \         smallest = lst[i];\n            } else if (lst[i] < smallest) {\n  \
    \              smallest = lst[i];\n            }\n        } else if (lst[i] <\
    \ 0) {\n            if (largest === undefined) {\n                largest = lst[i];\n\
    \            } else if (lst[i] > largest) {\n                largest = lst[i];\n\
    \            }\n        }\n    }\n    return [largest, smallest];\n}\n", "   \
    \ let largestNegative = undefined;\n    let smallestPositive = undefined;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let smallest_positive = undefined;\n\
    \    let largest_negative = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0) {\n            if (smallest_positive === undefined)\
    \ {\n                smallest_positive = lst[i];\n            } else if (lst[i]\
    \ < smallest_positive) {\n                smallest_positive = lst[i];\n      \
    \      }\n        } else if (lst[i] < 0) {\n            if (largest_negative ===\
    \ undefined) {\n                largest_negative = lst[i];\n            } else\
    \ if (lst[i] > largest_negative) {\n                largest_negative = lst[i];\n\
    \            }\n        }\n    }\n    return [largest_negative, smallest_positive];\n\
    }\n", "    let maxNeg = undefined;\n    let minPos = undefined;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (maxNeg\
    \ === undefined) {\n                maxNeg = lst[i];\n            } else if (lst[i]\
    \ > maxNeg) {\n                maxNeg = lst[i];\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (minPos === undefined) {\n               \
    \ minPos = lst[i];\n            } else if (lst[i] < minPos) {\n              \
    \  minPos = lst[i];\n            }\n        }\n    }\n    return [maxNeg, minPos];\n\
    }\n", "    let pos: number[] = [];\n    let neg: number[] = [];\n    let res:\
    \ any[] = [];\n    for (let i: number = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > 0) {\n            pos.push(lst[i]);\n        } else if (lst[i] < 0)\
    \ {\n            neg.push(lst[i]);\n        }\n    }\n    if (pos.length > 0)\
    \ {\n        res.push(Math.min(...pos));\n    } else {\n        res.push(undefined);\n\
    \    }\n    if (neg.length > 0) {\n        res.push(Math.max(...neg));\n    }\
    \ else {\n        res.push(undefined);\n    }\n    return res;\n}\n", "    let\
    \ largestNegative: number = undefined;\n    let smallestPositive: number = undefined;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n     \
    \       if (largestNegative === undefined) {\n                largestNegative\
    \ = lst[i];\n            } else if (lst[i] > largestNegative) {\n            \
    \    largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let largest: number = 0;\n\
    \    let smallest: number = 0;\n    let neg: number = 0;\n    let pos: number\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n\
    \            neg = lst[i];\n            if (neg > largest) {\n               \
    \ largest = neg;\n            }\n        }\n        if (lst[i] > 0) {\n      \
    \      pos = lst[i];\n            if (pos < smallest) {\n                smallest\
    \ = pos;\n            }\n        }\n    }\n    return [largest, smallest];\n}\n",
  "    let largest: number = 0;\n    let smallest: number = 0;\n    let largest_smallest_integers:\
    \ any = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] <\
    \ 0) {\n            if (lst[i] > largest) {\n                largest = lst[i];\n\
    \            }\n        }\n        if (lst[i] > 0) {\n            if (lst[i] <\
    \ smallest) {\n                smallest = lst[i];\n            }\n        }\n\
    \    }\n    largest_smallest_integers.push(largest);\n    largest_smallest_integers.push(smallest);\n\
    \    return largest_smallest_integers;\n}\n", "    let largest = undefined;\n\
    \    let smallest = undefined;\n    for (let i = 0; i < lst.length; i++) {\n \
    \       if (lst[i] < 0) {\n            if (largest === undefined) {\n        \
    \        largest = lst[i];\n            } else if (lst[i] > largest) {\n     \
    \           largest = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallest === undefined) {\n                smallest = lst[i];\n\
    \            } else if (lst[i] < smallest) {\n                smallest = lst[i];\n\
    \            }\n        }\n    }\n    return [largest, smallest];\n}\n", "   \
    \ let largestNegative: number = 0;\n    let smallestPositive: number = 0;\n  \
    \  let isNegative: boolean = false;\n    let isPositive: boolean = false;\n  \
    \  for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n       \
    \     if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \                isNegative = true;\n            }\n        }\n        if (lst[i]\
    \ > 0) {\n            if (lst[i] < smallestPositive || isPositive == false) {\n\
    \                smallestPositive = lst[i];\n                isPositive = true;\n\
    \            }\n        }\n    }\n    if (isNegative == false) {\n        largestNegative\
    \ = undefined;\n    }\n    if (isPositive == false) {\n        smallestPositive\
    \ = undefined;\n    }\n    return [largestNegative, smallestPositive];\n}\n",
  "    let positive_list = [];\n    let negative_list = [];\n    let result = [];\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n     \
    \       positive_list.push(lst[i]);\n        } else if (lst[i] < 0) {\n      \
    \      negative_list.push(lst[i]);\n        }\n    }\n    if (positive_list.length\
    \ === 0) {\n        result.push(undefined);\n    } else {\n        result.push(Math.min(...positive_list));\n\
    \    }\n    if (negative_list.length === 0) {\n        result.push(undefined);\n\
    \    } else {\n        result.push(Math.max(...negative_list));\n    }\n    return\
    \ result;\n}\n", "    let largestNegative = undefined;\n    let smallestPositive\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (largestNegative === undefined) {\n                largestNegative\
    \ = lst[i];\n            } else if (lst[i] > largestNegative) {\n            \
    \    largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let largestNegative: number\
    \ = 0;\n    let smallestPositive: number = 0;\n    let result: any = [];\n   \
    \ for (let i: number = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n\
    \            if (lst[i] > largestNegative) {\n                largestNegative\
    \ = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === 0) {\n                smallestPositive = lst[i];\n            } else if\
    \ (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n\
    \            }\n        }\n    }\n    result.push(largestNegative);\n    result.push(smallestPositive);\n\
    \    return result;\n}\nconsole.log(largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]));\nconsole.log(largest_smallest_integers([]));\nconsole.log(largest_smallest_integers([0]));\n",
  "    let largest: number = 0;\n    let smallest: number = 0;\n    let largest_smallest:\
    \ any = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] <\
    \ 0) {\n            if (lst[i] > largest) {\n                largest = lst[i];\n\
    \            }\n        }\n        if (lst[i] > 0) {\n            if (lst[i] <\
    \ smallest) {\n                smallest = lst[i];\n            }\n        }\n\
    \    }\n    largest_smallest.push(largest);\n    largest_smallest.push(smallest);\n\
    \    return largest_smallest;\n}\n", "    let negative: number[] = [];\n    let\
    \ positive: number[] = [];\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   if (lst[i] < 0) {\n            negative.push(lst[i]);\n        } else if (lst[i]\
    \ > 0) {\n            positive.push(lst[i]);\n        }\n    }\n    negative.sort(function\
    \ (a, b) { return b - a });\n    positive.sort(function (a, b) { return a - b\
    \ });\n    if (negative.length == 0) {\n        negative.push(undefined);\n  \
    \  }\n    if (positive.length == 0) {\n        positive.push(undefined);\n   \
    \ }\n    return [negative[0], positive[0]];\n}\n", "    let max_neg: number =\
    \ 0;\n    let min_pos: number = 0;\n    let max_neg_found: boolean = false;\n\
    \    let min_pos_found: boolean = false;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (!max_neg_found) {\n     \
    \           max_neg = lst[i];\n                max_neg_found = true;\n       \
    \     } else {\n                if (lst[i] > max_neg) {\n                    max_neg\
    \ = lst[i];\n                }\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (!min_pos_found) {\n                min_pos = lst[i];\n  \
    \              min_pos_found = true;\n            } else {\n                if\
    \ (lst[i] < min_pos) {\n                    min_pos = lst[i];\n              \
    \  }\n            }\n        }\n    }\n    if (!max_neg_found) {\n        max_neg\
    \ = undefined;\n    }\n    if (!min_pos_found) {\n        min_pos = undefined;\n\
    \    }\n    return [max_neg, min_pos];\n}\n", "    let smallest: number = Number.MAX_VALUE;\n\
    \    let largest: number = Number.MIN_VALUE;\n    let found_positive: boolean\
    \ = false;\n    let found_negative: boolean = false;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] > 0) {\n            found_positive =\
    \ true;\n            if (lst[i] < smallest) {\n                smallest = lst[i];\n\
    \            }\n        } else if (lst[i] < 0) {\n            found_negative =\
    \ true;\n            if (lst[i] > largest) {\n                largest = lst[i];\n\
    \            }\n        }\n    }\n    if (found_positive) {\n        if (found_negative)\
    \ {\n            return [largest, smallest];\n        } else {\n            return\
    \ [undefined, smallest];\n        }\n    } else {\n        if (found_negative)\
    \ {\n            return [largest, undefined];\n        } else {\n            return\
    \ [undefined, undefined];\n        }\n    }\n}\n", "  let a: number = 0;\n  let\
    \ b: number = 0;\n  let c: number = 0;\n  let d: number = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (lst[i] > a) {\n   \
    \     a = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (lst[i] < b)\
    \ {\n        b = lst[i];\n      }\n    }\n  }\n  if (a == 0) {\n    c = undefined;\n\
    \  } else {\n    c = a;\n  }\n  if (b == 0) {\n    d = undefined;\n  } else {\n\
    \    d = b;\n  }\n  return [c, d];\n}\n", "    let largestNegative: number = undefined;\n\
    \    let smallestPositive: number = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined)\
    \ {\n                largestNegative = lst[i];\n            } else if (lst[i]\
    \ > largestNegative) {\n                largestNegative = lst[i];\n          \
    \  }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined)\
    \ {\n                smallestPositive = lst[i];\n            } else if (lst[i]\
    \ < smallestPositive) {\n                smallestPositive = lst[i];\n        \
    \    }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n",
  "    let largestNegative = undefined;\n    let smallestPositive = undefined;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n      \
    \      if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let largest = undefined;\n\
    \    let smallest = undefined;\n    for (let i = 0; i < lst.length; i++) {\n \
    \       if (lst[i] > 0) {\n            if (smallest == undefined) {\n        \
    \        smallest = lst[i];\n            } else if (lst[i] < smallest) {\n   \
    \             smallest = lst[i];\n            }\n        } else if (lst[i] < 0)\
    \ {\n            if (largest == undefined) {\n                largest = lst[i];\n\
    \            } else if (lst[i] > largest) {\n                largest = lst[i];\n\
    \            }\n        }\n    }\n    return [largest, smallest];\n}\n", "   \
    \ if (lst.length === 0) {\n        return [undefined, undefined];\n    }\n   \
    \ let negative = [];\n    let positive = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            negative.push(lst[i]);\n    \
    \    } else if (lst[i] > 0) {\n            positive.push(lst[i]);\n        }\n\
    \    }\n    if (negative.length === 0 || positive.length === 0) {\n        return\
    \ [undefined, undefined];\n    }\n    let neg_max = Math.max(...negative);\n \
    \   let pos_min = Math.min(...positive);\n    return [neg_max, pos_min];\n}\n",
  "    let a: number = 0;\n    let b: number = 0;\n    let c: number = 0;\n    let\
    \ d: number = 0;\n    let e: number = 0;\n    let f: number = 0;\n    let g: number\
    \ = 0;\n    let h: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n\
    \    let k: number = 0;\n    let l: number = 0;\n    let m: number = 0;\n    let\
    \ n: number = 0;\n    let o: number = 0;\n    let p: number = 0;\n    let q: number\
    \ = 0;\n    let r: number = 0;\n    let s: number = 0;\n    let t: number = 0;\n\
    \    let u: number = 0;\n    let v: number = 0;\n    let w: number = 0;\n    let\
    \ x: number = 0;\n    let y: number = 0;\n    let z: number = 0;\n    let aa:\
    \ number = 0;\n    let bb: number = 0;\n    let cc: number = 0;\n    let dd: number\
    \ = 0;\n    let ee: number = 0;\n    let ff: number = 0;\n    let gg: number =\
    \ 0;\n    let hh: number = 0;\n    let ii: number = 0;\n    let jj: number = 0;\n\
    \    let kk: number = 0;\n    let ll: number = 0;\n    let mm: number = 0;\n \
    \   let nn: number = 0;\n    let oo: number = 0;\n    let pp: number = 0;\n  \
    \  let qq: number = 0;\n    let rr: number = 0;\n    let ss: number = 0;\n   \
    \ let tt: number = 0;\n    let uu: number = 0;\n    let vv: number = 0;\n    let\
    \ ww: number = 0;\n    let xx: number = 0;\n    let yy: number = 0;\n    let zz:\
    \ number = 0;\n    let aaa: number = 0;\n    let bbb: number = 0;\n    let ccc:\
    \ number", "    let largestNegative: number = null;\n    let smallestPositive:\
    \ number = null;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (largestNegative === null) {\n                largestNegative\
    \ = lst[i];\n            } else if (lst[i] > largestNegative) {\n            \
    \    largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallestPositive === null) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let smallest_positive: number\
    \ = 0;\n    let largest_negative: number = 0;\n    let smallest_positive_found:\
    \ boolean = false;\n    let largest_negative_found: boolean = false;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if\
    \ (!smallest_positive_found) {\n                smallest_positive = lst[i];\n\
    \                smallest_positive_found = true;\n            } else {\n     \
    \           if (lst[i] < smallest_positive) {\n                    smallest_positive\
    \ = lst[i];\n                }\n            }\n        } else if (lst[i] < 0)\
    \ {\n            if (!largest_negative_found) {\n                largest_negative\
    \ = lst[i];\n                largest_negative_found = true;\n            } else\
    \ {\n                if (lst[i] > largest_negative) {\n                    largest_negative\
    \ = lst[i];\n                }\n            }\n        }\n    }\n    return [largest_negative,\
    \ smallest_positive];\n}\n", "    let largest_negative = undefined;\n    let smallest_positive\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (largest_negative === undefined) {\n                largest_negative\
    \ = lst[i];\n            } else if (lst[i] > largest_negative) {\n           \
    \     largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallest_positive === undefined) {\n                smallest_positive\
    \ = lst[i];\n            } else if (lst[i] < smallest_positive) {\n          \
    \      smallest_positive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largest_negative, smallest_positive];\n}\n", "    let largest = undefined;\n\
    \    let smallest = undefined;\n    let i = 0;\n    while (i < lst.length) {\n\
    \        if (lst[i] < 0) {\n            if (largest === undefined) {\n       \
    \         largest = lst[i];\n            } else if (lst[i] > largest) {\n    \
    \            largest = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallest === undefined) {\n                smallest = lst[i];\n\
    \            } else if (lst[i] < smallest) {\n                smallest = lst[i];\n\
    \            }\n        }\n        i++;\n    }\n    return [largest, smallest];\n\
    }\n", "    let pos = [];\n    let neg = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            pos.push(lst[i]);\n        }\
    \ else if (lst[i] < 0) {\n            neg.push(lst[i]);\n        }\n    }\n  \
    \  if (pos.length > 0 && neg.length > 0) {\n        return [Math.max(...neg),\
    \ Math.min(...pos)];\n    } else {\n        return [undefined, undefined];\n \
    \   }\n}\n", "    let largestNegative: number = 0;\n    let smallestPositive:\
    \ number = 0;\n    let result: any = [];\n    for (let i: number = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (lst[i] > largestNegative)\
    \ {\n                largestNegative = lst[i];\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (smallestPositive === 0) {\n             \
    \   smallestPositive = lst[i];\n            } else if (lst[i] < smallestPositive)\
    \ {\n                smallestPositive = lst[i];\n            }\n        }\n  \
    \  }\n    result.push(largestNegative);\n    result.push(smallestPositive);\n\
    \    return result;\n}\n", "  let negs: any = [];\n  let poss: any = [];\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      negs.push(lst[i]);\n\
    \    } else if (lst[i] > 0) {\n      poss.push(lst[i]);\n    }\n  }\n  if (negs.length\
    \ === 0) {\n    negs.push(undefined);\n  }\n  if (poss.length === 0) {\n    poss.push(undefined);\n\
    \  }\n  return [Math.max(...negs), Math.min(...poss)];\n}\n", "    let negative:\
    \ number[] = [];\n    let positive: number[] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            negative.push(lst[i]);\n    \
    \    } else if (lst[i] > 0) {\n            positive.push(lst[i]);\n        }\n\
    \    }\n    if (negative.length === 0) {\n        negative.push(undefined);\n\
    \    }\n    if (positive.length === 0) {\n        positive.push(undefined);\n\
    \    }\n    return [Math.max(...negative), Math.min(...positive)];\n}\n", "  \
    \  let max: number = 0;\n    let min: number = 0;\n    let max_found: boolean\
    \ = false;\n    let min_found: boolean = false;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (!min_found) {\n         \
    \       min = lst[i];\n                min_found = true;\n            }\n    \
    \        if (lst[i] < min) {\n                min = lst[i];\n            }\n \
    \       }\n        if (lst[i] < 0) {\n            if (!max_found) {\n        \
    \        max = lst[i];\n                max_found = true;\n            }\n   \
    \         if (lst[i] > max) {\n                max = lst[i];\n            }\n\
    \        }\n    }\n    if (max_found && min_found) {\n        return [max, min];\n\
    \    }\n    if (max_found) {\n        return [max, undefined];\n    }\n    if\
    \ (min_found) {\n        return [undefined, min];\n    }\n    return [undefined,\
    \ undefined];\n}\n", "  let largestNegative: number = 0;\n  let smallestPositive:\
    \ number = 0;\n  let result: any = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < 0) {\n      if (lst[i] > largestNegative) {\n        largestNegative\
    \ = lst[i];\n      }\n    } else if (lst[i] > 0) {\n      if (smallestPositive\
    \ === 0) {\n        smallestPositive = lst[i];\n      } else if (lst[i] < smallestPositive)\
    \ {\n        smallestPositive = lst[i];\n      }\n    }\n  }\n  result.push(largestNegative);\n\
    \  result.push(smallestPositive);\n  return result;\n}\n", "    let largestNegative:\
    \ number = undefined;\n    let smallestPositive: number = undefined;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if\
    \ (largestNegative == undefined) {\n                largestNegative = lst[i];\n\
    \            } else if (lst[i] > largestNegative) {\n                largestNegative\
    \ = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ == undefined) {\n                smallestPositive = lst[i];\n            } else\
    \ if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n\
    \            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n", "    let largest_negative: number = 0;\n    let smallest_positive: number\
    \ = 0;\n    let largest_negative_found: boolean = false;\n    let smallest_positive_found:\
    \ boolean = false;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (largest_negative_found) {\n                if (lst[i]\
    \ > largest_negative) {\n                    largest_negative = lst[i];\n    \
    \            }\n            } else {\n                largest_negative = lst[i];\n\
    \                largest_negative_found = true;\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (smallest_positive_found) {\n            \
    \    if (lst[i] < smallest_positive) {\n                    smallest_positive\
    \ = lst[i];\n                }\n            } else {\n                smallest_positive\
    \ = lst[i];\n                smallest_positive_found = true;\n            }\n\
    \        }\n    }\n    if (largest_negative_found && smallest_positive_found)\
    \ {\n        return [largest_negative, smallest_positive];\n    } else if (largest_negative_found)\
    \ {\n        return [largest_negative, undefined];\n    } else if (smallest_positive_found)\
    \ {\n        return [undefined, smallest_positive];\n    } else {\n        return\
    \ [undefined, undefined];\n    }\n}\n", "    let largestNegative = undefined;\n\
    \    let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined)\
    \ {\n                largestNegative = lst[i];\n            } else if (lst[i]\
    \ > largestNegative) {\n                largestNegative = lst[i];\n          \
    \  }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined)\
    \ {\n                smallestPositive = lst[i];\n            } else if (lst[i]\
    \ < smallestPositive) {\n                smallestPositive = lst[i];\n        \
    \    }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n",
  "    let largest: number = undefined;\n    let smallest: number = undefined;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n      \
    \      if (largest === undefined) {\n                largest = lst[i];\n     \
    \       } else if (lst[i] > largest) {\n                largest = lst[i];\n  \
    \          }\n        } else if (lst[i] > 0) {\n            if (smallest === undefined)\
    \ {\n                smallest = lst[i];\n            } else if (lst[i] < smallest)\
    \ {\n                smallest = lst[i];\n            }\n        }\n    }\n   \
    \ return [largest, smallest];\n}\n", "    let largestNegative = undefined;\n \
    \   let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined)\
    \ {\n                largestNegative = lst[i];\n            } else if (lst[i]\
    \ > largestNegative) {\n                largestNegative = lst[i];\n          \
    \  }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined)\
    \ {\n                smallestPositive = lst[i];\n            } else if (lst[i]\
    \ < smallestPositive) {\n                smallestPositive = lst[i];\n        \
    \    }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n",
  "    let largestNegative = undefined;\n    let smallestPositive = undefined;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n      \
    \      if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let smallest: number = 0;\n\
    \    let largest: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n  \
    \      if (lst[i] > 0) {\n            if (smallest == 0) {\n                smallest\
    \ = lst[i];\n            } else if (lst[i] < smallest) {\n                smallest\
    \ = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if (largest\
    \ == 0) {\n                largest = lst[i];\n            } else if (lst[i] >\
    \ largest) {\n                largest = lst[i];\n            }\n        }\n  \
    \  }\n    return [largest, smallest];\n}\n", "  let largest: number = 0;\n  let\
    \ smallest: number = 0;\n  let largest_smallest_integers: any = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (lst[i] > largest) {\n      largest =\
    \ lst[i];\n    }\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n   \
    \ }\n  }\n  largest_smallest_integers.push(largest);\n  largest_smallest_integers.push(smallest);\n\
    \  return largest_smallest_integers;\n}\n", "    let smallest: number = 0;\n \
    \   let largest: number = 0;\n    let smallest_found: boolean = false;\n    let\
    \ largest_found: boolean = false;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] > 0) {\n            if (!smallest_found) {\n             \
    \   smallest = lst[i];\n                smallest_found = true;\n            }\
    \ else {\n                if (lst[i] < smallest) {\n                    smallest\
    \ = lst[i];\n                }\n            }\n        } else if (lst[i] < 0)\
    \ {\n            if (!largest_found) {\n                largest = lst[i];\n  \
    \              largest_found = true;\n            } else {\n                if\
    \ (lst[i] > largest) {\n                    largest = lst[i];\n              \
    \  }\n            }\n        }\n    }\n    return [largest, smallest];\n}\n",
  "    let pos = [];\n    let neg = [];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0) {\n            pos.push(lst[i]);\n        } else\
    \ if (lst[i] < 0) {\n            neg.push(lst[i]);\n        }\n    }\n    if (pos.length\
    \ === 0 && neg.length === 0) {\n        return [undefined, undefined];\n    }\
    \ else if (pos.length === 0) {\n        return [Math.max(...neg), undefined];\n\
    \    } else if (neg.length === 0) {\n        return [undefined, Math.min(...pos)];\n\
    \    } else {\n        return [Math.max(...neg), Math.min(...pos)];\n    }\n}\n",
  "    let largest_negative: number = 0;\n    let smallest_positive: number = 0;\n\
    \    let result: any = [];\n    for (let i: number = 0; i < lst.length; i++) {\n\
    \        if (lst[i] < 0) {\n            if (lst[i] > largest_negative) {\n   \
    \             largest_negative = lst[i];\n            }\n        }\n        if\
    \ (lst[i] > 0) {\n            if (smallest_positive == 0) {\n                smallest_positive\
    \ = lst[i];\n            }\n            if (lst[i] < smallest_positive) {\n  \
    \              smallest_positive = lst[i];\n            }\n        }\n    }\n\
    \    result.push(largest_negative);\n    result.push(smallest_positive);\n   \
    \ return result;\n}\n", "    let negs: number[] = [];\n    let pos: number[] =\
    \ [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n\
    \            negs.push(lst[i]);\n        } else if (lst[i] > 0) {\n          \
    \  pos.push(lst[i]);\n        }\n    }\n    if (negs.length === 0 && pos.length\
    \ === 0) {\n        return [undefined, undefined];\n    } else if (negs.length\
    \ === 0) {\n        return [undefined, Math.min(...pos)];\n    } else if (pos.length\
    \ === 0) {\n        return [Math.max(...negs), undefined];\n    } else {\n   \
    \     return [Math.max(...negs), Math.min(...pos)];\n    }\n}\n", "    let largestNegative:\
    \ number = 0;\n    let smallestPositive: number = 0;\n    let largestNegativeFound:\
    \ boolean = false;\n    let smallestPositiveFound: boolean = false;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (lst[i]\
    \ > largestNegative) {\n                largestNegative = lst[i];\n          \
    \      largestNegativeFound = true;\n            }\n        }\n        if (lst[i]\
    \ > 0) {\n            if (smallestPositiveFound === false) {\n               \
    \ smallestPositive = lst[i];\n                smallestPositiveFound = true;\n\
    \            }\n            if (lst[i] < smallestPositive) {\n               \
    \ smallestPositive = lst[i];\n            }\n        }\n    }\n    if (largestNegativeFound\
    \ === false) {\n        largestNegative = undefined;\n    }\n    if (smallestPositiveFound\
    \ === false) {\n        smallestPositive = undefined;\n    }\n    return [largestNegative,\
    \ smallestPositive];\n}\n", "    let largest = undefined;\n    let smallest =\
    \ undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] <\
    \ 0) {\n            if (largest === undefined) {\n                largest = lst[i];\n\
    \            } else if (lst[i] > largest) {\n                largest = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallest ===\
    \ undefined) {\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < smallest) {\n                smallest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n", "    let maxNegative: number =\
    \ 0;\n    let minPositive: number = 0;\n    let maxNegativeFlag: boolean = false;\n\
    \    let minPositiveFlag: boolean = false;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (lst[i] > maxNegative) {\n\
    \                maxNegative = lst[i];\n                maxNegativeFlag = true;\n\
    \            }\n        }\n        if (lst[i] > 0) {\n            if (minPositiveFlag\
    \ === false) {\n                minPositive = lst[i];\n                minPositiveFlag\
    \ = true;\n            }\n            if (lst[i] < minPositive) {\n          \
    \      minPositive = lst[i];\n            }\n        }\n    }\n    if (maxNegativeFlag\
    \ === false) {\n        maxNegative = undefined;\n    }\n    if (minPositiveFlag\
    \ === false) {\n        minPositive = undefined;\n    }\n    return [maxNegative,\
    \ minPositive];\n}\n", "    let largestNegative = undefined;\n    let smallestPositive\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (largestNegative === undefined) {\n                largestNegative\
    \ = lst[i];\n            } else if (lst[i] > largestNegative) {\n            \
    \    largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let largestNegative: number\
    \ = 0;\n    let smallestPositive: number = 0;\n    let largestNegativeFound: boolean\
    \ = false;\n    let smallestPositiveFound: boolean = false;\n    for (let i: number\
    \ = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegativeFound)\
    \ {\n                if (lst[i] > largestNegative) {\n                    largestNegative\
    \ = lst[i];\n                }\n            } else {\n                largestNegative\
    \ = lst[i];\n                largestNegativeFound = true;\n            }\n   \
    \     } else if (lst[i] > 0) {\n            if (smallestPositiveFound) {\n   \
    \             if (lst[i] < smallestPositive) {\n                    smallestPositive\
    \ = lst[i];\n                }\n            } else {\n                smallestPositive\
    \ = lst[i];\n                smallestPositiveFound = true;\n            }\n  \
    \      }\n    }\n    if (largestNegativeFound && smallestPositiveFound) {\n  \
    \      return [largestNegative, smallestPositive];\n    } else if (largestNegativeFound)\
    \ {\n        return [largestNegative, undefined];\n    } else if (smallestPositiveFound)\
    \ {\n        return [undefined, smallestPositive];\n    } else {\n        return\
    \ [undefined, undefined];\n    }\n}\n", "    let a: number = undefined;\n    let\
    \ b: number = undefined;\n    for (let i = 0; i < lst.length; i++) {\n       \
    \ if (lst[i] < 0) {\n            if (a === undefined) {\n                a = lst[i];\n\
    \            } else if (lst[i] > a) {\n                a = lst[i];\n         \
    \   }\n        } else if (lst[i] > 0) {\n            if (b === undefined) {\n\
    \                b = lst[i];\n            } else if (lst[i] < b) {\n         \
    \       b = lst[i];\n            }\n        }\n    }\n    return [a, b];\n}\n",
  "    let largestNegative = undefined;\n    let smallestPositive = undefined;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n      \
    \      if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let largestNegative = undefined;\n\
    \    let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined)\
    \ {\n                largestNegative = lst[i];\n            } else if (lst[i]\
    \ > largestNegative) {\n                largestNegative = lst[i];\n          \
    \  }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined)\
    \ {\n                smallestPositive = lst[i];\n            } else if (lst[i]\
    \ < smallestPositive) {\n                smallestPositive = lst[i];\n        \
    \    }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n",
  "    let largestNegative = undefined;\n    let smallestPositive = undefined;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n      \
    \      if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let a = undefined;\n    let\
    \ b = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (a === undefined) {\n                a = lst[i];\n  \
    \          } else if (lst[i] > a) {\n                a = lst[i];\n           \
    \ }\n        } else if (lst[i] > 0) {\n            if (b === undefined) {\n  \
    \              b = lst[i];\n            } else if (lst[i] < b) {\n           \
    \     b = lst[i];\n            }\n        }\n    }\n    return [a, b];\n}\n",
  "  let smallest: number = 0;\n  let largest: number = 0;\n  let result: any = [];\n\
    \  if (lst.length === 0) {\n    return [undefined, undefined];\n  }\n  for (let\
    \ i: number = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      if (smallest\
    \ === 0) {\n        smallest = lst[i];\n      } else if (lst[i] < smallest) {\n\
    \        smallest = lst[i];\n      }\n    } else if (lst[i] < 0) {\n      if (largest\
    \ === 0) {\n        largest = lst[i];\n      } else if (lst[i] > largest) {\n\
    \        largest = lst[i];\n      }\n    }\n  }\n  result.push(largest);\n  result.push(smallest);\n\
    \  return result;\n}\n", "    let smallest: number = 0;\n    let largest: number\
    \ = 0;\n    let smallest_found: boolean = false;\n    let largest_found: boolean\
    \ = false;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0)\
    \ {\n            if (!smallest_found) {\n                smallest = lst[i];\n\
    \                smallest_found = true;\n            } else {\n              \
    \  if (lst[i] < smallest) {\n                    smallest = lst[i];\n        \
    \        }\n            }\n        } else if (lst[i] < 0) {\n            if (!largest_found)\
    \ {\n                largest = lst[i];\n                largest_found = true;\n\
    \            } else {\n                if (lst[i] > largest) {\n             \
    \       largest = lst[i];\n                }\n            }\n        }\n    }\n\
    \    return [largest, smallest];\n}\n", "    let largestNegative = undefined;\n\
    \    let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined)\
    \ {\n                largestNegative = lst[i];\n            } else if (lst[i]\
    \ > largestNegative) {\n                largestNegative = lst[i];\n          \
    \  }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined)\
    \ {\n                smallestPositive = lst[i];\n            } else if (lst[i]\
    \ < smallestPositive) {\n                smallestPositive = lst[i];\n        \
    \    }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n",
  "    let largest_neg: number = undefined;\n    let smallest_pos: number = undefined;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n     \
    \       if (largest_neg === undefined) {\n                largest_neg = lst[i];\n\
    \            } else if (lst[i] > largest_neg) {\n                largest_neg =\
    \ lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallest_pos\
    \ === undefined) {\n                smallest_pos = lst[i];\n            } else\
    \ if (lst[i] < smallest_pos) {\n                smallest_pos = lst[i];\n     \
    \       }\n        }\n    }\n    return [largest_neg, smallest_pos];\n}\n", " \
    \   var a = undefined;\n    var b = undefined;\n    for (var i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (b == undefined) {\n     \
    \           b = lst[i];\n            } else if (lst[i] < b) {\n              \
    \  b = lst[i];\n            }\n        } else if (lst[i] < 0) {\n            if\
    \ (a == undefined) {\n                a = lst[i];\n            } else if (lst[i]\
    \ > a) {\n                a = lst[i];\n            }\n        }\n    }\n    return\
    \ [a, b];\n}\n", "    let smallest: number = lst[0];\n    let largest: number\
    \ = lst[0];\n    let smallest_pos: number = 0;\n    let largest_neg: number =\
    \ 0;\n    let result: number[] = [];\n    for (let i: number = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < smallest) {\n            smallest = lst[i];\n \
    \           smallest_pos = i;\n        }\n        if (lst[i] > largest) {\n  \
    \          largest = lst[i];\n            largest_neg = i;\n        }\n    }\n\
    \    if (smallest_pos === largest_neg) {\n        result.push(undefined);\n  \
    \      result.push(undefined);\n    } else {\n        result.push(largest);\n\
    \        result.push(smallest);\n    }\n    return result;\n}\n", "    let smallest:\
    \ number = 0;\n    let largest: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            if (smallest == 0) {\n      \
    \          smallest = lst[i];\n            } else if (lst[i] < smallest) {\n \
    \               smallest = lst[i];\n            }\n        } else if (lst[i] <\
    \ 0) {\n            if (largest == 0) {\n                largest = lst[i];\n \
    \           } else if (lst[i] > largest) {\n                largest = lst[i];\n\
    \            }\n        }\n    }\n    return [largest, smallest];\n}\n", "   \
    \ let smallest: number = 0;\n    let largest: number = 0;\n    let smallest_found:\
    \ boolean = false;\n    let largest_found: boolean = false;\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (!smallest_found)\
    \ {\n                smallest = lst[i];\n                smallest_found = true;\n\
    \            } else {\n                if (lst[i] < smallest) {\n            \
    \        smallest = lst[i];\n                }\n            }\n        } else\
    \ if (lst[i] < 0) {\n            if (!largest_found) {\n                largest\
    \ = lst[i];\n                largest_found = true;\n            } else {\n   \
    \             if (lst[i] > largest) {\n                    largest = lst[i];\n\
    \                }\n            }\n        }\n    }\n    return [largest, smallest];\n\
    }\n", "    let largestNegative = undefined;\n    let smallestPositive = undefined;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n     \
    \       if (largestNegative === undefined) {\n                largestNegative\
    \ = lst[i];\n            } else if (lst[i] > largestNegative) {\n            \
    \    largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let pos = [];\n    let neg\
    \ = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n\
    \            pos.push(lst[i]);\n        } else if (lst[i] < 0) {\n           \
    \ neg.push(lst[i]);\n        }\n    }\n    if (pos.length === 0 || neg.length\
    \ === 0) {\n        return [undefined, undefined];\n    } else {\n        return\
    \ [Math.max(...neg), Math.min(...pos)];\n    }\n}\n", "    let negative: number[]\
    \ = [];\n    let positive: number[] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            negative.push(lst[i]);\n    \
    \    } else if (lst[i] > 0) {\n            positive.push(lst[i]);\n        }\n\
    \    }\n    if (negative.length === 0) {\n        negative.push(undefined);\n\
    \    }\n    if (positive.length === 0) {\n        positive.push(undefined);\n\
    \    }\n    return [Math.max(...negative), Math.min(...positive)];\n}\n", "  \
    \  let largestNegative = undefined;\n    let smallestPositive = undefined;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n      \
    \      if (largestNegative === undefined) {\n                largestNegative =\
    \ lst[i];\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "  let largest: number = undefined;\n\
    \  let smallest: number = undefined;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (lst[i] < 0) {\n      if (largest === undefined) {\n        largest =\
    \ lst[i];\n      } else if (lst[i] > largest) {\n        largest = lst[i];\n \
    \     }\n    } else if (lst[i] > 0) {\n      if (smallest === undefined) {\n \
    \       smallest = lst[i];\n      } else if (lst[i] < smallest) {\n        smallest\
    \ = lst[i];\n      }\n    }\n  }\n  return [largest, smallest];\n}\n", "    let\
    \ a: number = 0;\n    let b: number = 0;\n    let c: number = 0;\n    let d: number\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n\
    \            if (lst[i] > a) {\n                a = lst[i];\n            }\n \
    \       }\n        if (lst[i] > 0) {\n            if (lst[i] < b) {\n        \
    \        b = lst[i];\n            }\n        }\n    }\n    if (a == 0) {\n   \
    \     a = undefined;\n    }\n    if (b == 0) {\n        b = undefined;\n    }\n\
    \    return [a, b];\n}\n", "  let largestNegative: number = undefined;\n  let\
    \ smallestPositive: number = undefined;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] < 0) {\n      if (largestNegative === undefined) {\n     \
    \   largestNegative = lst[i];\n      } else if (lst[i] > largestNegative) {\n\
    \        largestNegative = lst[i];\n      }\n    } else if (lst[i] > 0) {\n  \
    \    if (smallestPositive === undefined) {\n        smallestPositive = lst[i];\n\
    \      } else if (lst[i] < smallestPositive) {\n        smallestPositive = lst[i];\n\
    \      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n}\n", " \
    \   let largest_negative = undefined;\n    let smallest_positive = undefined;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n     \
    \       if (largest_negative === undefined) {\n                largest_negative\
    \ = lst[i];\n            } else if (lst[i] > largest_negative) {\n           \
    \     largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallest_positive === undefined) {\n                smallest_positive\
    \ = lst[i];\n            } else if (lst[i] < smallest_positive) {\n          \
    \      smallest_positive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largest_negative, smallest_positive];\n}\n", "    let maxNegative = undefined;\n\
    \    let minPositive = undefined;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (lst[i] < 0) {\n            if (maxNegative === undefined) {\n   \
    \             maxNegative = lst[i];\n            } else if (lst[i] > maxNegative)\
    \ {\n                maxNegative = lst[i];\n            }\n        } else if (lst[i]\
    \ > 0) {\n            if (minPositive === undefined) {\n                minPositive\
    \ = lst[i];\n            } else if (lst[i] < minPositive) {\n                minPositive\
    \ = lst[i];\n            }\n        }\n    }\n    return [maxNegative, minPositive];\n\
    }\n", "    let largest = undefined;\n    let smallest = undefined;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest\
    \ === undefined) {\n                largest = lst[i];\n            } else if (lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (smallest === undefined) {\n             \
    \   smallest = lst[i];\n            } else if (lst[i] < smallest) {\n        \
    \        smallest = lst[i];\n            }\n        }\n    }\n    return [largest,\
    \ smallest];\n}\n", "    let largestNegative: number = 0;\n    let smallestPositive:\
    \ number = 0;\n    let result: any = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (lst[i] > largestNegative)\
    \ {\n                largestNegative = lst[i];\n            }\n        }\n   \
    \     if (lst[i] > 0) {\n            if (lst[i] < smallestPositive || smallestPositive\
    \ === 0) {\n                smallestPositive = lst[i];\n            }\n      \
    \  }\n    }\n    result.push(largestNegative);\n    result.push(smallestPositive);\n\
    \    return result;\n}\n", "  if (lst.length === 0) {\n    return [undefined,\
    \ undefined];\n  }\n  let a = undefined;\n  let b = undefined;\n  for (let i =\
    \ 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (a === undefined)\
    \ {\n        a = lst[i];\n      } else if (lst[i] > a) {\n        a = lst[i];\n\
    \      }\n    } else if (lst[i] > 0) {\n      if (b === undefined) {\n       \
    \ b = lst[i];\n      } else if (lst[i] < b) {\n        b = lst[i];\n      }\n\
    \    }\n  }\n  return [a, b];\n}\n", "    let smallest: number = undefined;\n\
    \    let largest: number = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0) {\n            if (smallest === undefined) {\n  \
    \              smallest = lst[i];\n            } else if (lst[i] < smallest) {\n\
    \                smallest = lst[i];\n            }\n        } else if (lst[i]\
    \ < 0) {\n            if (largest === undefined) {\n                largest =\
    \ lst[i];\n            } else if (lst[i] > largest) {\n                largest\
    \ = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n\
    }\n", "    let smallest: number = Number.MAX_VALUE;\n    let largest: number =\
    \ Number.MIN_VALUE;\n    let smallest_found: boolean = false;\n    let largest_found:\
    \ boolean = false;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (lst[i] > largest) {\n                largest = lst[i];\n\
    \                largest_found = true;\n            }\n        } else if (lst[i]\
    \ > 0) {\n            if (lst[i] < smallest) {\n                smallest = lst[i];\n\
    \                smallest_found = true;\n            }\n        }\n    }\n   \
    \ if (largest_found && smallest_found) {\n        return [largest, smallest];\n\
    \    } else if (largest_found) {\n        return [largest, undefined];\n    }\
    \ else if (smallest_found) {\n        return [undefined, smallest];\n    } else\
    \ {\n        return [undefined, undefined];\n    }\n}\n", "    let largestNegative\
    \ = undefined;\n    let smallestPositive = undefined;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegative\
    \ == undefined) {\n                largestNegative = lst[i];\n            } else\
    \ if (lst[i] > largestNegative) {\n                largestNegative = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ == undefined) {\n                smallestPositive = lst[i];\n            } else\
    \ if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n\
    \            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n", "    let smallest_positive: number = undefined;\n    let largest_negative:\
    \ number = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] > 0) {\n            if (smallest_positive === undefined) {\n       \
    \         smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive)\
    \ {\n                smallest_positive = lst[i];\n            }\n        } else\
    \ if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n     \
    \           largest_negative = lst[i];\n            } else if (lst[i] > largest_negative)\
    \ {\n                largest_negative = lst[i];\n            }\n        }\n  \
    \  }\n    return [largest_negative, smallest_positive];\n}\n", "    let largest\
    \ = undefined;\n    let smallest = undefined;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (largest === undefined) {\n\
    \                largest = lst[i];\n            } else if (lst[i] > largest) {\n\
    \                largest = lst[i];\n            }\n        } else if (lst[i] >\
    \ 0) {\n            if (smallest === undefined) {\n                smallest =\
    \ lst[i];\n            } else if (lst[i] < smallest) {\n                smallest\
    \ = lst[i];\n            }\n        }\n    }\n    return [largest, smallest];\n\
    }\n", "    let smallest: number = Number.MAX_VALUE;\n    let largest: number =\
    \ Number.MIN_VALUE;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0 && lst[i] > largest) {\n            largest = lst[i];\n        }\n     \
    \   if (lst[i] > 0 && lst[i] < smallest) {\n            smallest = lst[i];\n \
    \       }\n    }\n    return [largest, smallest];\n}\n", "    if (lst.length ==\
    \ 0) {\n        return [undefined, undefined];\n    }\n    let negative = [];\n\
    \    let positive = [];\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] < 0) {\n            negative.push(lst[i]);\n        }\n        else\
    \ if (lst[i] > 0) {\n            positive.push(lst[i]);\n        }\n    }\n  \
    \  if (negative.length == 0) {\n        negative.push(undefined);\n    }\n   \
    \ if (positive.length == 0) {\n        positive.push(undefined);\n    }\n    return\
    \ [Math.max(...negative), Math.min(...positive)];\n}\n", "    let largest: number\
    \ = undefined;\n    let smallest: number = undefined;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] > 0) {\n            if (smallest ===\
    \ undefined) {\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < smallest) {\n                smallest = lst[i];\n            }\n        }\
    \ else if (lst[i] < 0) {\n            if (largest === undefined) {\n         \
    \       largest = lst[i];\n            } else if (lst[i] > largest) {\n      \
    \          largest = lst[i];\n            }\n        }\n    }\n    return [largest,\
    \ smallest];\n}\n", "    let smallest_positive = undefined;\n    let largest_negative\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ > 0) {\n            if (smallest_positive === undefined) {\n               \
    \ smallest_positive = lst[i];\n            } else if (lst[i] < smallest_positive)\
    \ {\n                smallest_positive = lst[i];\n            }\n        } else\
    \ if (lst[i] < 0) {\n            if (largest_negative === undefined) {\n     \
    \           largest_negative = lst[i];\n            } else if (lst[i] > largest_negative)\
    \ {\n                largest_negative = lst[i];\n            }\n        }\n  \
    \  }\n    return [largest_negative, smallest_positive];\n}\n", "    let a = undefined;\n\
    \    let b = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] < 0) {\n            if (a === undefined) {\n                a = lst[i];\n\
    \            } else if (lst[i] > a) {\n                a = lst[i];\n         \
    \   }\n        } else if (lst[i] > 0) {\n            if (b === undefined) {\n\
    \                b = lst[i];\n            } else if (lst[i] < b) {\n         \
    \       b = lst[i];\n            }\n        }\n    }\n    return [a, b];\n}\n",
  "    let smallest: number = 0;\n    let largest: number = 0;\n    let smallest_found:\
    \ boolean = false;\n    let largest_found: boolean = false;\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (!largest_found)\
    \ {\n                largest = lst[i];\n                largest_found = true;\n\
    \            } else if (lst[i] > largest) {\n                largest = lst[i];\n\
    \            }\n        } else if (lst[i] > 0) {\n            if (!smallest_found)\
    \ {\n                smallest = lst[i];\n                smallest_found = true;\n\
    \            } else if (lst[i] < smallest) {\n                smallest = lst[i];\n\
    \            }\n        }\n    }\n    return [largest, smallest];\n}\n", "   \
    \ let smallest_positive: number = Number.MAX_VALUE;\n    let largest_negative:\
    \ number = Number.MIN_VALUE;\n    let result: any = [];\n    for (let i: number\
    \ = 0; i < lst.length; i++) {\n        if (lst[i] < 0 && lst[i] > largest_negative)\
    \ {\n            largest_negative = lst[i];\n        }\n        if (lst[i] > 0\
    \ && lst[i] < smallest_positive) {\n            smallest_positive = lst[i];\n\
    \        }\n    }\n    result.push(largest_negative);\n    result.push(smallest_positive);\n\
    \    return result;\n}\n", "    let largestNegative = undefined;\n    let smallestPositive\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (largestNegative === undefined) {\n                largestNegative\
    \ = lst[i];\n            } else if (lst[i] > largestNegative) {\n            \
    \    largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallestPositive === undefined) {\n                smallestPositive\
    \ = lst[i];\n            } else if (lst[i] < smallestPositive) {\n           \
    \     smallestPositive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largestNegative, smallestPositive];\n}\n", "    let largestNegative: number\
    \ = 0;\n    let smallestPositive: number = 0;\n    let largestNegativeFound: boolean\
    \ = false;\n    let smallestPositiveFound: boolean = false;\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largestNegativeFound\
    \ === false) {\n                largestNegative = lst[i];\n                largestNegativeFound\
    \ = true;\n            } else if (lst[i] > largestNegative) {\n              \
    \  largestNegative = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (smallestPositiveFound === false) {\n                smallestPositive\
    \ = lst[i];\n                smallestPositiveFound = true;\n            } else\
    \ if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n\
    \            }\n        }\n    }\n    if (largestNegativeFound === false) {\n\
    \        largestNegative = undefined;\n    }\n    if (smallestPositiveFound ===\
    \ false) {\n        smallestPositive = undefined;\n    }\n    return [largestNegative,\
    \ smallestPositive];\n}\n", "    let negs: number[] = [];\n    let poss: number[]\
    \ = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n\
    \            negs.push(lst[i]);\n        } else if (lst[i] > 0) {\n          \
    \  poss.push(lst[i]);\n        }\n    }\n    if (negs.length === 0 && poss.length\
    \ === 0) {\n        return [undefined, undefined];\n    } else if (negs.length\
    \ === 0) {\n        return [undefined, Math.min(...poss)];\n    } else if (poss.length\
    \ === 0) {\n        return [Math.max(...negs), undefined];\n    } else {\n   \
    \     return [Math.max(...negs), Math.min(...poss)];\n    }\n}\n", "    let a:\
    \ number = 0;\n    let b: number = 0;\n    let c: number = 0;\n    let d: number\
    \ = 0;\n    let e: number = 0;\n    let f: number = 0;\n    let g: number = 0;\n\
    \    let h: number = 0;\n    let i: number = 0;\n    let j: number = 0;\n    let\
    \ k: number = 0;\n    let l: number = 0;\n    let m: number = 0;\n    let n: number\
    \ = 0;\n    let o: number = 0;\n    let p: number = 0;\n    let q: number = 0;\n\
    \    let r: number = 0;\n    let s: number = 0;\n    let t: number = 0;\n    let\
    \ u: number = 0;\n    let v: number = 0;\n    let w: number = 0;\n    let x: number\
    \ = 0;\n    let y: number = 0;\n    let z: number = 0;\n    let aa: number = 0;\n\
    \    let bb: number = 0;\n    let cc: number = 0;\n    let dd: number = 0;\n \
    \   let ee: number = 0;\n    let ff: number = 0;\n    let gg: number = 0;\n  \
    \  let hh: number = 0;\n    let ii: number = 0;\n    let jj: number = 0;\n   \
    \ let kk: number = 0;\n    let ll: number = 0;\n    let mm: number = 0;\n    let\
    \ nn: number = 0;\n    let oo: number = 0;\n    let pp: number = 0;\n    let qq:\
    \ number = 0;\n    let rr: number = 0;\n    let ss: number = 0;\n    let tt: number\
    \ = 0;\n    let uu: number = 0;\n    let vv: number = 0;\n    let ww: number =\
    \ 0;\n    let xx: number = 0;\n    let yy: number = 0;\n    let zz: number = 0;\n\
    \    let aaa: number = 0;\n    let bbb: number = 0;\n    let ccc: number", " \
    \   let largestNegative: number = 0;\n    let smallestPositive: number = 0;\n\
    \    let largestNegativeFound: boolean = false;\n    let smallestPositiveFound:\
    \ boolean = false;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (lst[i] > largestNegative) {\n                largestNegative\
    \ = lst[i];\n                largestNegativeFound = true;\n            }\n   \
    \     }\n        if (lst[i] > 0) {\n            if (smallestPositiveFound) {\n\
    \                if (lst[i] < smallestPositive) {\n                    smallestPositive\
    \ = lst[i];\n                }\n            } else {\n                smallestPositive\
    \ = lst[i];\n                smallestPositiveFound = true;\n            }\n  \
    \      }\n    }\n    if (largestNegativeFound) {\n        if (smallestPositiveFound)\
    \ {\n            return [largestNegative, smallestPositive];\n        } else {\n\
    \            return [largestNegative, undefined];\n        }\n    } else {\n \
    \       if (smallestPositiveFound) {\n            return [undefined, smallestPositive];\n\
    \        } else {\n            return [undefined, undefined];\n        }\n   \
    \ }\n}\n", "  let largestNegative = undefined;\n  let smallestPositive = undefined;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largestNegative\
    \ === undefined) {\n        largestNegative = lst[i];\n      } else if (lst[i]\
    \ > largestNegative) {\n        largestNegative = lst[i];\n      }\n    } else\
    \ if (lst[i] > 0) {\n      if (smallestPositive === undefined) {\n        smallestPositive\
    \ = lst[i];\n      } else if (lst[i] < smallestPositive) {\n        smallestPositive\
    \ = lst[i];\n      }\n    }\n  }\n  return [largestNegative, smallestPositive];\n\
    }\n", "    let pos = [];\n    let neg = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] > 0) {\n            pos.push(lst[i]);\n        }\
    \ else if (lst[i] < 0) {\n            neg.push(lst[i]);\n        }\n    }\n  \
    \  if (pos.length === 0 && neg.length === 0) {\n        return [undefined, undefined];\n\
    \    } else if (pos.length === 0) {\n        return [Math.max(...neg), undefined];\n\
    \    } else if (neg.length === 0) {\n        return [undefined, Math.min(...pos)];\n\
    \    } else {\n        return [Math.max(...neg), Math.min(...pos)];\n    }\n}\n",
  "    let smallest: number = 0;\n    let largest: number = 0;\n    let smallest_found:\
    \ boolean = false;\n    let largest_found: boolean = false;\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n            if (!smallest_found)\
    \ {\n                smallest = lst[i];\n                smallest_found = true;\n\
    \            } else {\n                if (lst[i] < smallest) {\n            \
    \        smallest = lst[i];\n                }\n            }\n        } else\
    \ if (lst[i] < 0) {\n            if (!largest_found) {\n                largest\
    \ = lst[i];\n                largest_found = true;\n            } else {\n   \
    \             if (lst[i] > largest) {\n                    largest = lst[i];\n\
    \                }\n            }\n        }\n    }\n    return [largest, smallest];\n\
    }\n", "    let a: number = 0;\n    let b: number = 0;\n    let c: number = 0;\n\
    \    let d: number = 0;\n    let e: number = 0;\n    let f: number = 0;\n    let\
    \ g: number = 0;\n    let h: number = 0;\n    let i: number = 0;\n    let j: number\
    \ = 0;\n    let k: number = 0;\n    let l: number = 0;\n    let m: number = 0;\n\
    \    let n: number = 0;\n    let o: number = 0;\n    let p: number = 0;\n    let\
    \ q: number = 0;\n    let r: number = 0;\n    let s: number = 0;\n    let t: number\
    \ = 0;\n    let u: number = 0;\n    let v: number = 0;\n    let w: number = 0;\n\
    \    let x: number = 0;\n    let y: number = 0;\n    let z: number = 0;\n    let\
    \ aa: number = 0;\n    let bb: number = 0;\n    let cc: number = 0;\n    let dd:\
    \ number = 0;\n    let ee: number = 0;\n    let ff: number = 0;\n    let gg: number\
    \ = 0;\n    let hh: number = 0;\n    let ii: number = 0;\n    let jj: number =\
    \ 0;\n    let kk: number = 0;\n    let ll: number = 0;\n    let mm: number = 0;\n\
    \    let nn: number = 0;\n    let oo: number = 0;\n    let pp: number = 0;\n \
    \   let qq: number = 0;\n    let rr: number = 0;\n    let ss: number = 0;\n  \
    \  let tt: number = 0;\n    let uu: number = 0;\n    let vv: number = 0;\n   \
    \ let ww: number = 0;\n    let xx: number = 0;\n    let yy: number = 0;\n    let\
    \ zz: number = 0;\n    let aaa: number = 0;\n    let bbb: number = 0;\n    let\
    \ ccc: number", "    let a: number = 0;\n    let b: number = 0;\n    let c: number\
    \ = 0;\n    let d: number = 0;\n    let e: number = 0;\n    let f: number = 0;\n\
    \    let g: number = 0;\n    let h: number = 0;\n    let i: number = 0;\n    let\
    \ j: number = 0;\n    let k: number = 0;\n    let l: number = 0;\n    let m: number\
    \ = 0;\n    let n: number = 0;\n    let o: number = 0;\n    let p: number = 0;\n\
    \    let q: number = 0;\n    let r: number = 0;\n    let s: number = 0;\n    let\
    \ t: number = 0;\n    let u: number = 0;\n    let v: number = 0;\n    let w: number\
    \ = 0;\n    let x: number = 0;\n    let y: number = 0;\n    let z: number = 0;\n\
    \    let aa: number = 0;\n    let bb: number = 0;\n    let cc: number = 0;\n \
    \   let dd: number = 0;\n    let ee: number = 0;\n    let ff: number = 0;\n  \
    \  let gg: number = 0;\n    let hh: number = 0;\n    let ii: number = 0;\n   \
    \ let jj: number = 0;\n    let kk: number = 0;\n    let ll: number = 0;\n    let\
    \ mm: number = 0;\n    let nn: number = 0;\n    let oo: number = 0;\n    let pp:\
    \ number = 0;\n    let qq: number = 0;\n    let rr: number = 0;\n    let ss: number\
    \ = 0;\n    let tt: number = 0;\n    let uu: number = 0;\n    let vv: number =\
    \ 0;\n    let ww: number = 0;\n    let xx: number = 0;\n    let yy: number = 0;\n\
    \    let zz: number = 0;\n    let aaa: number = 0;\n    let bbb: number = 0;\n\
    \    let ccc: number", "    let largest_negative = undefined;\n    let smallest_positive\
    \ = undefined;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0) {\n            if (largest_negative === undefined) {\n                largest_negative\
    \ = lst[i];\n            } else if (lst[i] > largest_negative) {\n           \
    \     largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallest_positive === undefined) {\n                smallest_positive\
    \ = lst[i];\n            } else if (lst[i] < smallest_positive) {\n          \
    \      smallest_positive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largest_negative, smallest_positive];\n}\n", "    let largestNegative = undefined;\n\
    \    let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined)\
    \ {\n                largestNegative = lst[i];\n            } else if (lst[i]\
    \ > largestNegative) {\n                largestNegative = lst[i];\n          \
    \  }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined)\
    \ {\n                smallestPositive = lst[i];\n            } else if (lst[i]\
    \ < smallestPositive) {\n                smallestPositive = lst[i];\n        \
    \    }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n",
  "    let largest: number = undefined;\n    let smallest: number = undefined;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0) {\n      \
    \      if (smallest === undefined) {\n                smallest = lst[i];\n   \
    \         } else if (lst[i] < smallest) {\n                smallest = lst[i];\n\
    \            }\n        } else if (lst[i] < 0) {\n            if (largest ===\
    \ undefined) {\n                largest = lst[i];\n            } else if (lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        }\n\
    \    }\n    return [largest, smallest];\n}\n", "    let smallest: number = Number.MAX_VALUE;\n\
    \    let largest: number = Number.MIN_VALUE;\n    let smallest_found: boolean\
    \ = false;\n    let largest_found: boolean = false;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] < 0) {\n            if (lst[i] > largest) {\n   \
    \             largest = lst[i];\n                largest_found = true;\n     \
    \       }\n        } else if (lst[i] > 0) {\n            if (lst[i] < smallest)\
    \ {\n                smallest = lst[i];\n                smallest_found = true;\n\
    \            }\n        }\n    }\n    if (largest_found) {\n        if (smallest_found)\
    \ {\n            return [largest, smallest];\n        } else {\n            return\
    \ [largest, undefined];\n        }\n    } else {\n        if (smallest_found)\
    \ {\n            return [undefined, smallest];\n        } else {\n           \
    \ return [undefined, undefined];\n        }\n    }\n}\n", "    let max_neg = undefined;\n\
    \    let min_pos = undefined;\n    for (let i = 0; i < lst.length; i++) {\n  \
    \      if (lst[i] < 0) {\n            if (max_neg === undefined) {\n         \
    \       max_neg = lst[i];\n            } else if (lst[i] > max_neg) {\n      \
    \          max_neg = lst[i];\n            }\n        } else if (lst[i] > 0) {\n\
    \            if (min_pos === undefined) {\n                min_pos = lst[i];\n\
    \            } else if (lst[i] < min_pos) {\n                min_pos = lst[i];\n\
    \            }\n        }\n    }\n    return [max_neg, min_pos];\n}\n", "    let\
    \ largestNegative = undefined;\n    let smallestPositive = undefined;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if\
    \ (largestNegative === undefined) {\n                largestNegative = lst[i];\n\
    \            } else if (lst[i] > largestNegative) {\n                largestNegative\
    \ = lst[i];\n            }\n        } else if (lst[i] > 0) {\n            if (smallestPositive\
    \ === undefined) {\n                smallestPositive = lst[i];\n            }\
    \ else if (lst[i] < smallestPositive) {\n                smallestPositive = lst[i];\n\
    \            }\n        }\n    }\n    return [largestNegative, smallestPositive];\n\
    }\n", "    let largest_negative = undefined;\n    let smallest_positive = undefined;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] < 0) {\n     \
    \       if (largest_negative === undefined) {\n                largest_negative\
    \ = lst[i];\n            } else if (lst[i] > largest_negative) {\n           \
    \     largest_negative = lst[i];\n            }\n        } else if (lst[i] > 0)\
    \ {\n            if (smallest_positive === undefined) {\n                smallest_positive\
    \ = lst[i];\n            } else if (lst[i] < smallest_positive) {\n          \
    \      smallest_positive = lst[i];\n            }\n        }\n    }\n    return\
    \ [largest_negative, smallest_positive];\n}\n", "    let largestNegative = undefined;\n\
    \    let smallestPositive = undefined;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] < 0) {\n            if (largestNegative === undefined)\
    \ {\n                largestNegative = lst[i];\n            } else if (lst[i]\
    \ > largestNegative) {\n                largestNegative = lst[i];\n          \
    \  }\n        } else if (lst[i] > 0) {\n            if (smallestPositive === undefined)\
    \ {\n                smallestPositive = lst[i];\n            } else if (lst[i]\
    \ < smallestPositive) {\n                smallestPositive = lst[i];\n        \
    \    }\n        }\n    }\n    return [largestNegative, smallestPositive];\n}\n",
  "    let smallest = undefined;\n    let largest = undefined;\n    for (let i = 0;\
    \ i < lst.length; i++) {\n        if (lst[i] < 0) {\n            if (largest ===\
    \ undefined) {\n                largest = lst[i];\n            } else if (lst[i]\
    \ > largest) {\n                largest = lst[i];\n            }\n        } else\
    \ if (lst[i] > 0) {\n            if (smallest === undefined) {\n             \
    \   smallest = lst[i];\n            } else if (lst[i] < smallest) {\n        \
    \        smallest = lst[i];\n            }\n        }\n    }\n    return [largest,\
    \ smallest];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
